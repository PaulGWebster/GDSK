x*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	movzx	ebx,bl
	pxor	mm2,mm2
	psllq	mm1,4
	movd	ecx,mm7
	psrlq	mm7,4
	movq	mm3,mm6
	psrlq	mm6,4
	shl	ecx,4
	pxor	mm7,[16+edi*8+esp]
	psllq	mm3,60
	movzx	ecx,cl
	pxor	mm7,mm3
	pxor	mm6,[144+edi*8+esp]
	pinsrw	mm0,WORD [ebx*2+esi],2
	pxor	mm6,mm1
	movd	edx,mm7
	pinsrw	mm2,WORD [ecx*2+esi],3
	psllq	mm0,12
	pxor	mm6,mm0
	psrlq	mm7,32
	pxor	mm6,mm2
	mov	ecx,DWORD [548+esp]
	movd	ebx,mm7
	movq	mm3,mm6
	psllw	mm6,8
	psrlw	mm3,8
	por	mm6,mm3
	bswap	edx
	pshufw	mm6,mm6,27
	bswap	ebx
	cmp	ecx,DWORD [552+esp]
	jne	NEAR L$009outer
	mov	eax,DWORD [544+esp]
	mov	DWORD [12+eax],edx
	mov	DWORD [8+eax],ebx
	movq	[eax],mm6
	mov	esp,DWORD [556+esp]
	emms
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_gcm_init_clmul
align	16
_gcm_init_clmul:
L$_gcm_init_clmul_begin:
	mov	edx,DWORD [4+esp]
	mov	eax,DWORD [8+esp]
	call	L$010pic
L$010pic:
	pop	ecx
	lea	ecx,[(L$bswap-L$010pic)+ecx]
	movdqu	xmm2,[eax]
	pshufd	xmm2,xmm2,78
	pshufd	xmm4,xmm2,255
	movdqa	xmm3,xmm2
	psllq	xmm2,1
	pxor	xmm5,xmm5
	psrlq	xmm3,63
	pcmpgtd	xmm5,xmm4
	pslldq	xmm3,8
	por	xmm2,xmm3
	pand	xmm5,[16+ecx]
	pxor	xmm2,xmm5
	movdqa	xmm0,xmm2
	movdqa	xmm1,xmm0
	pshufd	xmm3,xmm0,78
	pshufd	xmm4,xmm2,78
	pxor	xmm3,xmm0
	pxor	xmm4,xmm2
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,220,0
	xorps	xmm3,xmm0
	xorps	xmm3,xmm1
	movdqa	xmm4,xmm3
	psrldq	xmm3,8
	pslldq	xmm4,8
	pxor	xmm1,xmm3
	pxor	xmm0,xmm4
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
	pshufd	xmm3,xmm2,78
	pshufd	xmm4,xmm0,78
	pxor	xmm3,xmm2
	movdqu	[edx],xmm2
	pxor	xmm4,xmm0
	movdqu	[16+edx],xmm0
db	102,15,58,15,227,8
	movdqu	[32+edx],xmm4
	ret
global	_gcm_gmult_clmul
align	16
_gcm_gmult_clmul:
L$_gcm_gmult_clmul_begin:
	mov	eax,DWORD [4+esp]
	mov	edx,DWORD [8+esp]
	call	L$011pic
L$011pic:
	pop	ecx
	lea	ecx,[(L$bswap-L$011pic)+ecx]
	movdqu	xmm0,[eax]
	movdqa	xmm5,[ecx]
	movups	xmm2,[edx]
db	102,15,56,0,197
	movups	xmm4,[32+edx]
	movdqa	xmm1,xmm0
	pshufd	xmm3,xmm0,78
	pxor	xmm3,xmm0
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,220,0
	xorps	xmm3,xmm0
	xorps	xmm3,xmm1
	movdqa	xmm4,xmm3
	psrldq	xmm3,8
	pslldq	xmm4,8
	pxor	xmm1,xmm3
	pxor	xmm0,xmm4
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
db	102,15,56,0,197
	movdqu	[eax],xmm0
	ret
global	_gcm_ghash_clmul
align	16
_gcm_ghash_clmul:
L$_gcm_ghash_clmul_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	eax,DWORD [20+esp]
	mov	edx,DWORD [24+esp]
	mov	esi,DWORD [28+esp]
	mov	ebx,DWORD [32+esp]
	call	L$012pic
L$012pic:
	pop	ecx
	lea	ecx,[(L$bswap-L$012pic)+ecx]
	movdqu	xmm0,[eax]
	movdqa	xmm5,[ecx]
	movdqu	xmm2,[edx]
db	102,15,56,0,197
	sub	ebx,16
	jz	NEAR L$013odd_tail
	movdqu	xmm3,[esi]
	movdqu	xmm6,[16+esi]
db	102,15,56,0,221
db	102,15,56,0,245
	movdqu	xmm5,[32+edx]
	pxor	xmm0,xmm3
	pshufd	xmm3,xmm6,78
	movdqa	xmm7,xmm6
	pxor	xmm3,xmm6
	lea	esi,[32+esi]
db	102,15,58,68,242,0
db	102,15,58,68,250,17
db	102,15,58,68,221,0
	movups	xmm2,[16+edx]
	nop
	sub	ebx,32
	jbe	NEAR L$014even_tail
	jmp	NEAR L$015mod_loop
align	32
L$015mod_loop:
	pshufd	xmm4,xmm0,78
	movdqa	xmm1,xmm0
	pxor	xmm4,xmm0
	nop
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,229,16
	movups	xmm2,[edx]
	xorps	xmm0,xmm6
	movdqa	xmm5,[ecx]
	xorps	xmm1,xmm7
	movdqu	xmm7,[esi]
	pxor	xmm3,xmm0
	movdqu	xmm6,[16+esi]
	pxor	xmm3,xmm1
db	102,15,56,0,253
	pxor	xmm4,xmm3
	movdqa	xmm3,xmm4
	psrldq	xmm4,8
	pslldq	xmm3,8
	pxor	xmm1,xmm4
	pxor	xmm0,xmm3
db	102,15,56,0,245
	pxor	xmm1,xmm7
	movdqa	xmm7,xmm6
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
db	102,15,58,68,242,0
	movups	xmm5,[32+edx]
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	pshufd	xmm3,xmm7,78
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm3,xmm7
	pxor	xmm1,xmm4
db	102,15,58,68,250,17
	movups	xmm2,[16+edx]
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
db	102,15,58,68,221,0
	lea	esi,[32+esi]
	sub	ebx,32
	ja	NEAR L$015mod_loop
L$014even_tail:
	pshufd	xmm4,xmm0,78
	movdqa	xmm1,xmm0
	pxor	xmm4,xmm0
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,229,16
	movdqa	xmm5,[ecx]
	xorps	xmm0,xmm6
	xorps	xmm1,xmm7
	pxor	xmm3,xmm0
	pxor	xmm3,xmm1
	pxor	xmm4,xmm3
	movdqa	xmm3,xmm4
	psrldq	xmm4,8
	pslldq	xmm3,8
	pxor	xmm1,xmm4
	pxor	xmm0,xmm3
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
	test	ebx,ebx
	jnz	NEAR L$016done
	movups	xmm2,[edx]
L$013odd_tail:
	movdqu	xmm3,[esi]
db	102,15,56,0,221
	pxor	xmm0,xmm3
	movdqa	xmm1,xmm0
	pshufd	xmm3,xmm0,78
	pshufd	xmm4,xmm2,78
	pxor	xmm3,xmm0
	pxor	xmm4,xmm2
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,220,0
	xorps	xmm3,xmm0
	xorps	xmm3,xmm1
	movdqa	xmm4,xmm3
	psrldq	xmm3,8
	pslldq	xmm4,8
	pxor	xmm1,xmm3
	pxor	xmm0,xmm4
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
L$016done:
db	102,15,56,0,197
	movdqu	[eax],xmm0
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$bswap:
db	15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
db	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194
align	64
L$rem_8bit:
dw	0,450,900,582,1800,1738,1164,1358
dw	3600,4050,3476,3158,2328,2266,2716,2910
dw	7200,7650,8100,7782,6952,6890,6316,6510
dw	4656,5106,4532,4214,5432,5370,5820,6014
dw	14400,14722,15300,14854,16200,16010,15564,15630
dw	13904,14226,13780,13334,12632,12442,13020,13086
dw	9312,9634,10212,9766,9064,8874,8428,8494
dw	10864,11186,10740,10294,11640,11450,12028,12094
dw	28800,28994,29444,29382,30600,30282,29708,30158
dw	32400,32594,32020,31958,31128,30810,31260,31710
dw	27808,28002,28452,28390,27560,27242,26668,27118
dw	25264,25458,24884,24822,26040,25722,26172,26622
dw	18624,18690,19268,19078,20424,19978,19532,19854
dw	18128,18194,17748,17558,16856,16410,16988,17310
dw	21728,21794,22372,22182,21480,21034,20588,20910
dw	23280,23346,22900,22710,24056,23610,24188,24510
dw	57600,57538,57988,58182,58888,59338,58764,58446
dw	61200,61138,60564,60758,59416,59866,60316,59998
dw	64800,64738,65188,65382,64040,64490,63916,63598
dw	62256,62194,61620,61814,62520,62970,63420,63102
dw	55616,55426,56004,56070,56904,57226,56780,56334
dw	55120,54930,54484,54550,53336,53658,54236,53790
dw	50528,50338,50916,50982,49768,50090,49644,49198
dw	52080,51890,51444,51510,52344,52666,53244,52798
dw	37248,36930,37380,37830,38536,38730,38156,38094
dw	40848,40530,39956,40406,39064,39258,39708,39646
dw	36256,35938,36388,36838,35496,35690,35116,35054
dw	33712,33394,32820,33270,33976,34170,34620,34558
dw	43456,43010,43588,43910,44744,44810,44364,44174
dw	42960,42514,42068,42390,41176,41242,41820,41630
dw	46560,46114,46692,47014,45800,45866,45420,45230
dw	48112,47666,47220,47542,48376,48442,49020,48830
align	64
L$rem_4bit:
dd	0,0,0,471859200,0,943718400,0,610271232
dd	0,1887436800,0,1822425088,0,1220542464,0,1423966208
dd	0,3774873600,0,4246732800,0,3644850176,0,3311403008
dd	0,2441084928,0,2376073216,0,2847932416,0,3051356160
db	71,72,65,83,72,32,102,111,114,32,120,56,54,44,32,67
db	82,89,80,84,79,71,65,77,83,32,98,121,32,60,97,112
db	112,114,111,64,111,112,101,110,115,115,108,46,111,114,103,62
db	0
                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/poly1305/                                 0000775 0000000 0000000 00000000000 14746647661 0024244 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/poly1305/poly1305-x86.asm                 0000664 0000000 0000000 00000111175 14746647661 0026673 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
align	64
global	_poly1305_init
align	16
_poly1305_init:
L$_poly1305_init_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	xor	eax,eax
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],eax
	mov	DWORD [8+edi],eax
	mov	DWORD [12+edi],eax
	mov	DWORD [16+edi],eax
	mov	DWORD [20+edi],eax
	cmp	esi,0
	je	NEAR L$000nokey
	call	L$001pic_point
L$001pic_point:
	pop	ebx
	lea	eax,[(_poly1305_blocks-L$001pic_point)+ebx]
	lea	edx,[(_poly1305_emit-L$001pic_point)+ebx]
	lea	edi,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [edi]
	and	ecx,83886080
	cmp	ecx,83886080
	jne	NEAR L$002no_sse2
	lea	eax,[(__poly1305_blocks_sse2-L$001pic_point)+ebx]
	lea	edx,[(__poly1305_emit_sse2-L$001pic_point)+ebx]
	mov	ecx,DWORD [8+edi]
	test	ecx,32
	jz	NEAR L$002no_sse2
	lea	eax,[(__poly1305_blocks_avx2-L$001pic_point)+ebx]
L$002no_sse2:
	mov	edi,DWORD [20+esp]
	mov	DWORD [ebp],eax
	mov	DWORD [4+ebp],edx
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	and	eax,268435455
	and	ebx,268435452
	and	ecx,268435452
	and	edx,268435452
	mov	DWORD [24+edi],eax
	mov	DWORD [28+edi],ebx
	mov	DWORD [32+edi],ecx
	mov	DWORD [36+edi],edx
	mov	eax,1
L$000nokey:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_poly1305_blocks
align	16
_poly1305_blocks:
L$_poly1305_blocks_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
L$enter_blocks:
	and	ecx,-15
	jz	NEAR L$003nodata
	sub	esp,64
	mov	eax,DWORD [24+edi]
	mov	ebx,DWORD [28+edi]
	lea	ebp,[ecx*1+esi]
	mov	ecx,DWORD [32+edi]
	mov	edx,DWORD [36+edi]
	mov	DWORD [92+esp],ebp
	mov	ebp,esi
	mov	DWORD [36+esp],eax
	mov	eax,ebx
	shr	eax,2
	mov	DWORD [40+esp],ebx
	add	eax,ebx
	mov	ebx,ecx
	shr	ebx,2
	mov	DWORD [44+esp],ecx
	add	ebx,ecx
	mov	ecx,edx
	shr	ecx,2
	mov	DWORD [48+esp],edx
	add	ecx,edx
	mov	DWORD [52+esp],eax
	mov	DWORD [56+esp],ebx
	mov	DWORD [60+esp],ecx
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	esi,DWORD [12+edi]
	mov	edi,DWORD [16+edi]
	jmp	NEAR L$004loop
align	32
L$004loop:
	add	eax,DWORD [ebp]
	adc	ebx,DWORD [4+ebp]
	adc	ecx,DWORD [8+ebp]
	adc	esi,DWORD [12+ebp]
	lea	ebp,[16+ebp]
	adc	edi,DWORD [96+esp]
	mov	DWORD [esp],eax
	mov	DWORD [12+esp],esi
	mul	DWORD [36+esp]
	mov	DWORD [16+esp],edi
	mov	edi,eax
	mov	eax,ebx
	mov	esi,edx
	mul	DWORD [60+esp]
	add	edi,eax
	mov	eax,ecx
	adc	esi,edx
	mul	DWORD [56+esp]
	add	edi,eax
	mov	eax,DWORD [12+esp]
	adc	esi,edx
	mul	DWORD [52+esp]
	add	edi,eax
	mov	eax,DWORD [esp]
	adc	esi,edx
	mul	DWORD [40+esp]
	mov	DWORD [20+esp],edi
	xor	edi,edi
	add	esi,eax
	mov	eax,ebx
	adc	edi,edx
	mul	DWORD [36+esp]
	add	esi,eax
	mov	eax,ecx
	adc	edi,edx
	mul	DWORD [60+esp]
	add	esi,eax
	mov	eax,DWORD [12+esp]
	adc	edi,edx
	mul	DWORD [56+esp]
	add	esi,eax
	mov	eax,DWORD [16+esp]
	adc	edi,edx
	imul	eax,DWORD [52+esp]
	add	esi,eax
	mov	eax,DWORD [esp]
	adc	edi,0
	mul	DWORD [44+esp]
	mov	DWORD [24+esp],esi
	xor	esi,esi
	add	edi,eax
	mov	eax,ebx
	adc	esi,edx
	mul	DWORD [40+esp]
	add	edi,eax
	mov	eax,ecx
	adc	esi,edx
	mul	DWORD [36+esp]
	add	edi,eax
	mov	eax,DWORD [12+esp]
	adc	esi,edx
	mul	DWORD [60+esp]
	add	edi,eax
	mov	eax,DWORD [16+esp]
	adc	esi,edx
	imul	eax,DWORD [56+esp]
	add	edi,eax
	mov	eax,DWORD [esp]
	adc	esi,0
	mul	DWORD [48+esp]
	mov	DWORD [28+esp],edi
	xor	edi,edi
	add	esi,eax
	mov	eax,ebx
	adc	edi,edx
	mul	DWORD [44+esp]
	add	esi,eax
	mov	eax,ecx
	adc	edi,edx
	mul	DWORD [40+esp]
	add	esi,eax
	mov	eax,DWORD [12+esp]
	adc	edi,edx
	mul	DWORD [36+esp]
	add	esi,eax
	mov	ecx,DWORD [16+esp]
	adc	edi,edx
	mov	edx,ecx
	imul	ecx,DWORD [60+esp]
	add	esi,ecx
	mov	eax,DWORD [20+esp]
	adc	edi,0
	imul	edx,DWORD [36+esp]
	add	edx,edi
	mov	ebx,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	mov	edi,edx
	shr	edx,2
	and	edi,3
	lea	edx,[edx*4+edx]
	add	eax,edx
	adc	ebx,0
	adc	ecx,0
	adc	esi,0
	adc	edi,0
	cmp	ebp,DWORD [92+esp]
	jne	NEAR L$004loop
	mov	edx,DWORD [84+esp]
	add	esp,64
	mov	DWORD [edx],eax
	mov	DWORD [4+edx],ebx
	mov	DWORD [8+edx],ecx
	mov	DWORD [12+edx],esi
	mov	DWORD [16+edx],edi
L$003nodata:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_poly1305_emit
align	16
_poly1305_emit:
L$_poly1305_emit_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	ebp,DWORD [20+esp]
L$enter_emit:
	mov	edi,DWORD [24+esp]
	mov	eax,DWORD [ebp]
	mov	ebx,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	mov	esi,DWORD [16+ebp]
	add	eax,5
	adc	ebx,0
	adc	ecx,0
	adc	edx,0
	adc	esi,0
	shr	esi,2
	neg	esi
	and	eax,esi
	and	ebx,esi
	and	ecx,esi
	and	edx,esi
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	not	esi
	mov	eax,DWORD [ebp]
	mov	ebx,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	mov	ebp,DWORD [28+esp]
	and	eax,esi
	and	ebx,esi
	and	ecx,esi
	and	edx,esi
	or	eax,DWORD [edi]
	or	ebx,DWORD [4+edi]
	or	ecx,DWORD [8+edi]
	or	edx,DWORD [12+edi]
	add	eax,DWORD [ebp]
	adc	ebx,DWORD [4+ebp]
	adc	ecx,DWORD [8+ebp]
	adc	edx,DWORD [12+ebp]
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
align	16
__poly1305_init_sse2:
	movdqu	xmm4,[24+edi]
	lea	edi,[48+edi]
	mov	ebp,esp
	sub	esp,224
	and	esp,-16
	movq	xmm7,[64+ebx]
	movdqa	xmm0,xmm4
	movdqa	xmm1,xmm4
	movdqa	xmm2,xmm4
	pand	xmm0,xmm7
	psrlq	xmm1,26
	psrldq	xmm2,6
	pand	xmm1,xmm7
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	psrldq	xmm4,13
	lea	edx,[144+esp]
	mov	ecx,2
L$005square:
	movdqa	[esp],xmm0
	movdqa	[16+esp],xmm1
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	movdqa	xmm6,xmm1
	movdqa	xmm5,xmm2
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm1
	paddd	xmm5,xmm2
	movdqa	[80+esp],xmm6
	movdqa	[96+esp],xmm5
	movdqa	xmm6,xmm3
	movdqa	xmm5,xmm4
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm3
	paddd	xmm5,xmm4
	movdqa	[112+esp],xmm6
	movdqa	[128+esp],xmm5
	pshufd	xmm6,xmm0,68
	movdqa	xmm5,xmm1
	pshufd	xmm1,xmm1,68
	pshufd	xmm2,xmm2,68
	pshufd	xmm3,xmm3,68
	pshufd	xmm4,xmm4,68
	movdqa	[edx],xmm6
	movdqa	[16+edx],xmm1
	movdqa	[32+edx],xmm2
	movdqa	[48+edx],xmm3
	movdqa	[64+edx],xmm4
	pmuludq	xmm4,xmm0
	pmuludq	xmm3,xmm0
	pmuludq	xmm2,xmm0
	pmuludq	xmm1,xmm0
	pmuludq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+edx]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+edx]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,[80+esp]
	pmuludq	xmm5,[edx]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+edx]
	movdqa	xmm7,[32+esp]
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+edx]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+edx]
	paddq	xmm4,xmm7
	movdqa	xmm7,[96+esp]
	pmuludq	xmm6,[edx]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+edx]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+edx]
	movdqa	xmm6,[48+esp]
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+edx]
	paddq	xmm0,xmm5
	movdqa	xmm5,[112+esp]
	pmuludq	xmm7,[edx]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+edx]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+edx]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+edx]
	movdqa	xmm5,[64+esp]
	paddq	xmm1,xmm6
	movdqa	xmm6,[128+esp]
	pmuludq	xmm5,[edx]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+edx]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+edx]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+edx]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
	dec	ecx
	jz	NEAR L$006square_break
	punpcklqdq	xmm0,[esp]
	punpcklqdq	xmm1,[16+esp]
	punpcklqdq	xmm2,[32+esp]
	punpcklqdq	xmm3,[48+esp]
	punpcklqdq	xmm4,[64+esp]
	jmp	NEAR L$005square
L$006square_break:
	psllq	xmm0,32
	psllq	xmm1,32
	psllq	xmm2,32
	psllq	xmm3,32
	psllq	xmm4,32
	por	xmm0,[esp]
	por	xmm1,[16+esp]
	por	xmm2,[32+esp]
	por	xmm3,[48+esp]
	por	xmm4,[64+esp]
	pshufd	xmm0,xmm0,141
	pshufd	xmm1,xmm1,141
	pshufd	xmm2,xmm2,141
	pshufd	xmm3,xmm3,141
	pshufd	xmm4,xmm4,141
	movdqu	[edi],xmm0
	movdqu	[16+edi],xmm1
	movdqu	[32+edi],xmm2
	movdqu	[48+edi],xmm3
	movdqu	[64+edi],xmm4
	movdqa	xmm6,xmm1
	movdqa	xmm5,xmm2
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm1
	paddd	xmm5,xmm2
	movdqu	[80+edi],xmm6
	movdqu	[96+edi],xmm5
	movdqa	xmm6,xmm3
	movdqa	xmm5,xmm4
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm3
	paddd	xmm5,xmm4
	movdqu	[112+edi],xmm6
	movdqu	[128+edi],xmm5
	mov	esp,ebp
	lea	edi,[edi-48]
	ret
align	32
align	16
__poly1305_blocks_sse2:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	mov	eax,DWORD [20+edi]
	and	ecx,-16
	jz	NEAR L$007nodata
	cmp	ecx,64
	jae	NEAR L$008enter_sse2
	test	eax,eax
	jz	NEAR L$enter_blocks
align	16
L$008enter_sse2:
	call	L$009pic_point
L$009pic_point:
	pop	ebx
	lea	ebx,[(L$const_sse2-L$009pic_point)+ebx]
	test	eax,eax
	jnz	NEAR L$010base2_26
	call	__poly1305_init_sse2
	mov	eax,DWORD [edi]
	mov	ecx,DWORD [3+edi]
	mov	edx,DWORD [6+edi]
	mov	esi,DWORD [9+edi]
	mov	ebp,DWORD [13+edi]
	mov	DWORD [20+edi],1
	shr	ecx,2
	and	eax,67108863
	shr	edx,4
	and	ecx,67108863
	shr	esi,6
	and	edx,67108863
	movd	xmm0,eax
	movd	xmm1,ecx
	movd	xmm2,edx
	movd	xmm3,esi
	movd	xmm4,ebp
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	jmp	NEAR L$011base2_32
align	16
L$010base2_26:
	movd	xmm0,DWORD [edi]
	movd	xmm1,DWORD [4+edi]
	movd	xmm2,DWORD [8+edi]
	movd	xmm3,DWORD [12+edi]
	movd	xmm4,DWORD [16+edi]
	movdqa	xmm7,[64+ebx]
L$011base2_32:
	mov	eax,DWORD [32+esp]
	mov	ebp,esp
	sub	esp,528
	and	esp,-16
	lea	edi,[48+edi]
	shl	eax,24
	test	ecx,31
	jz	NEAR L$012even
	movdqu	xmm6,[esi]
	lea	esi,[16+esi]
	movdqa	xmm5,xmm6
	pand	xmm6,xmm7
	paddd	xmm0,xmm6
	movdqa	xmm6,xmm5
	psrlq	xmm5,26
	psrldq	xmm6,6
	pand	xmm5,xmm7
	paddd	xmm1,xmm5
	movdqa	xmm5,xmm6
	psrlq	xmm6,4
	pand	xmm6,xmm7
	paddd	xmm2,xmm6
	movdqa	xmm6,xmm5
	psrlq	xmm5,30
	pand	xmm5,xmm7
	psrldq	xmm6,7
	paddd	xmm3,xmm5
	movd	xmm5,eax
	paddd	xmm4,xmm6
	movd	xmm6,DWORD [12+edi]
	paddd	xmm4,xmm5
	movdqa	[esp],xmm0
	movdqa	[16+esp],xmm1
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	pmuludq	xmm0,xmm6
	pmuludq	xmm1,xmm6
	pmuludq	xmm2,xmm6
	movd	xmm5,DWORD [28+edi]
	pmuludq	xmm3,xmm6
	pmuludq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+esp]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	movd	xmm6,DWORD [92+edi]
	pmuludq	xmm5,[esp]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+esp]
	movd	xmm7,DWORD [44+edi]
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+esp]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+esp]
	paddq	xmm4,xmm7
	movd	xmm7,DWORD [108+edi]
	pmuludq	xmm6,[esp]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+esp]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+esp]
	movd	xmm6,DWORD [60+edi]
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+esp]
	paddq	xmm0,xmm5
	movd	xmm5,DWORD [124+edi]
	pmuludq	xmm7,[esp]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+esp]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+esp]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+esp]
	movd	xmm5,DWORD [76+edi]
	paddq	xmm1,xmm6
	movd	xmm6,DWORD [140+edi]
	pmuludq	xmm5,[esp]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+esp]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+esp]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
	sub	ecx,16
	jz	NEAR L$013done
L$012even:
	lea	edx,[384+esp]
	lea	eax,[esi-32]
	sub	ecx,64
	movdqu	xmm5,[edi]
	pshufd	xmm6,xmm5,68
	cmovb	esi,eax
	pshufd	xmm5,xmm5,238
	movdqa	[edx],xmm6
	lea	eax,[160+esp]
	movdqu	xmm6,[16+edi]
	movdqa	[edx-144],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[16+edx],xmm5
	movdqu	xmm5,[32+edi]
	movdqa	[edx-128],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[32+edx],xmm6
	movdqu	xmm6,[48+edi]
	movdqa	[edx-112],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[48+edx],xmm5
	movdqu	xmm5,[64+edi]
	movdqa	[edx-96],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[64+edx],xmm6
	movdqu	xmm6,[80+edi]
	movdqa	[edx-80],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[80+edx],xmm5
	movdqu	xmm5,[96+edi]
	movdqa	[edx-64],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[96+edx],xmm6
	movdqu	xmm6,[112+edi]
	movdqa	[edx-48],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[112+edx],xmm5
	movdqu	xmm5,[128+edi]
	movdqa	[edx-32],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[128+edx],xmm6
	movdqa	[edx-16],xmm5
	movdqu	xmm5,[32+esi]
	movdqu	xmm6,[48+esi]
	lea	esi,[32+esi]
	movdqa	[112+esp],xmm2
	movdqa	[128+esp],xmm3
	movdqa	[144+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	movdqa	[80+esp],xmm0
	movdqa	[96+esp],xmm1
	jbe	NEAR L$014skip_loop
	jmp	NEAR L$015loop
align	32
L$015loop:
	movdqa	xmm7,[edx-144]
	movdqa	[16+eax],xmm6
	movdqa	[32+eax],xmm2
	movdqa	[48+eax],xmm3
	movdqa	[64+eax],xmm4
	movdqa	xmm1,xmm5
	pmuludq	xmm5,xmm7
	movdqa	xmm0,xmm6
	pmuludq	xmm6,xmm7
	pmuludq	xmm2,xmm7
	pmuludq	xmm3,xmm7
	pmuludq	xmm4,xmm7
	pmuludq	xmm0,[edx-16]
	movdqa	xmm7,xmm1
	pmuludq	xmm1,[edx-128]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-112]
	paddq	xmm1,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-96]
	paddq	xmm2,xmm7
	movdqa	xmm7,[16+eax]
	pmuludq	xmm6,[edx-80]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-128]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-112]
	paddq	xmm2,xmm7
	movdqa	xmm7,[32+eax]
	pmuludq	xmm6,[edx-96]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-32]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-16]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[edx-128]
	paddq	xmm1,xmm5
	movdqa	xmm5,[48+eax]
	pmuludq	xmm7,[edx-112]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-48]
	paddq	xmm4,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[edx-32]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-16]
	paddq	xmm1,xmm6
	movdqa	xmm6,[64+eax]
	pmuludq	xmm5,[edx-128]
	paddq	xmm2,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[edx-16]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-64]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-48]
	paddq	xmm0,xmm7
	movdqa	xmm7,[64+ebx]
	pmuludq	xmm6,[edx-32]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqu	xmm5,[esi-32]
	movdqu	xmm6,[esi-16]
	lea	esi,[32+esi]
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	lea	eax,[esi-32]
	sub	ecx,64
	paddd	xmm5,[80+esp]
	paddd	xmm6,[96+esp]
	paddd	xmm2,[112+esp]
	paddd	xmm3,[128+esp]
	paddd	xmm4,[144+esp]
	cmovb	esi,eax
	lea	eax,[160+esp]
	movdqa	xmm7,[edx]
	movdqa	[16+esp],xmm1
	movdqa	[16+eax],xmm6
	movdqa	[32+eax],xmm2
	movdqa	[48+eax],xmm3
	movdqa	[64+eax],xmm4
	movdqa	xmm1,xmm5
	pmuludq	xmm5,xmm7
	paddq	xmm5,xmm0
	movdqa	xmm0,xmm6
	pmuludq	xmm6,xmm7
	pmuludq	xmm2,xmm7
	pmuludq	xmm3,xmm7
	pmuludq	xmm4,xmm7
	paddq	xmm6,[16+esp]
	paddq	xmm2,[32+esp]
	paddq	xmm3,[48+esp]
	paddq	xmm4,[64+esp]
	pmuludq	xmm0,[128+edx]
	movdqa	xmm7,xmm1
	pmuludq	xmm1,[16+edx]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+edx]
	paddq	xmm1,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+edx]
	paddq	xmm2,xmm7
	movdqa	xmm7,[16+eax]
	pmuludq	xmm6,[64+edx]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+edx]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+edx]
	paddq	xmm2,xmm7
	movdqa	xmm7,[32+eax]
	pmuludq	xmm6,[48+edx]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[112+edx]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[128+edx]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+edx]
	paddq	xmm1,xmm5
	movdqa	xmm5,[48+eax]
	pmuludq	xmm7,[32+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[96+edx]
	paddq	xmm4,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[112+edx]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[128+edx]
	paddq	xmm1,xmm6
	movdqa	xmm6,[64+eax]
	pmuludq	xmm5,[16+edx]
	paddq	xmm2,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[128+edx]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[80+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[96+edx]
	paddq	xmm0,xmm7
	movdqa	xmm7,[64+ebx]
	pmuludq	xmm6,[112+edx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
	movdqu	xmm5,[32+esi]
	movdqu	xmm6,[48+esi]
	lea	esi,[32+esi]
	movdqa	[112+esp],xmm2
	movdqa	[128+esp],xmm3
	movdqa	[144+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	movdqa	[80+esp],xmm0
	movdqa	[96+esp],xmm1
	ja	NEAR L$015loop
L$014skip_loop:
	pshufd	xmm7,[edx-144],16
	add	ecx,32
	jnz	NEAR L$016long_tail
	paddd	xmm5,xmm0
	paddd	xmm6,xmm1
	paddd	xmm2,[112+esp]
	paddd	xmm3,[128+esp]
	paddd	xmm4,[144+esp]
L$016long_tail:
	movdqa	[eax],xmm5
	movdqa	[16+eax],xmm6
	movdqa	[32+eax],xmm2
	movdqa	[48+eax],xmm3
	movdqa	[64+eax],xmm4
	pmuludq	xmm5,xmm7
	pmuludq	xmm6,xmm7
	pmuludq	xmm2,xmm7
	movdqa	xmm0,xmm5
	pshufd	xmm5,[edx-128],16
	pmuludq	xmm3,xmm7
	movdqa	xmm1,xmm6
	pmuludq	xmm4,xmm7
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+eax]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+eax]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+eax]
	paddq	xmm3,xmm6
	pshufd	xmm6,[edx-64],16
	pmuludq	xmm5,[eax]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+eax]
	pshufd	xmm7,[edx-112],16
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+eax]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+eax]
	paddq	xmm4,xmm7
	pshufd	xmm7,[edx-48],16
	pmuludq	xmm6,[eax]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+eax]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+eax]
	pshufd	xmm6,[edx-96],16
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+eax]
	paddq	xmm0,xmm5
	pshufd	xmm5,[edx-32],16
	pmuludq	xmm7,[eax]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+eax]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+eax]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+eax]
	pshufd	xmm5,[edx-80],16
	paddq	xmm1,xmm6
	pshufd	xmm6,[edx-16],16
	pmuludq	xmm5,[eax]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+eax]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+eax]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+eax]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+eax]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	jz	NEAR L$017short_tail
	movdqu	xmm5,[esi-32]
	movdqu	xmm6,[esi-16]
	lea	esi,[32+esi]
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	pshufd	xmm7,[edx],16
	paddd	xmm5,[80+esp]
	paddd	xmm6,[96+esp]
	paddd	xmm2,[112+esp]
	paddd	xmm3,[128+esp]
	paddd	xmm4,[144+esp]
	movdqa	[esp],xmm5
	pmuludq	xmm5,xmm7
	movdqa	[16+esp],xmm6
	pmuludq	xmm6,xmm7
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm2
	pmuludq	xmm2,xmm7
	paddq	xmm1,xmm6
	movdqa	xmm6,xmm3
	pmuludq	xmm3,xmm7
	paddq	xmm2,[32+esp]
	movdqa	[32+esp],xmm5
	pshufd	xmm5,[16+edx],16
	paddq	xmm3,[48+esp]
	movdqa	[48+esp],xmm6
	movdqa	xmm6,xmm4
	pmuludq	xmm4,xmm7
	paddq	xmm4,[64+esp]
	movdqa	[64+esp],xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+esp]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	pshufd	xmm6,[80+edx],16
	pmuludq	xmm5,[esp]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+esp]
	pshufd	xmm7,[32+edx],16
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+esp]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+esp]
	paddq	xmm4,xmm7
	pshufd	xmm7,[96+edx],16
	pmuludq	xmm6,[esp]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+esp]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+esp]
	pshufd	xmm6,[48+edx],16
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+esp]
	paddq	xmm0,xmm5
	pshufd	xmm5,[112+edx],16
	pmuludq	xmm7,[esp]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+esp]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+esp]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+esp]
	pshufd	xmm5,[64+edx],16
	paddq	xmm1,xmm6
	pshufd	xmm6,[128+edx],16
	pmuludq	xmm5,[esp]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+esp]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+esp]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
L$017short_tail:
	pshufd	xmm6,xmm4,78
	pshufd	xmm5,xmm3,78
	paddq	xmm4,xmm6
	paddq	xmm3,xmm5
	pshufd	xmm6,xmm0,78
	pshufd	xmm5,xmm1,78
	paddq	xmm0,xmm6
	paddq	xmm1,xmm5
	pshufd	xmm6,xmm2,78
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm2,xmm6
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
L$013done:
	movd	DWORD [edi-48],xmm0
	movd	DWORD [edi-44],xmm1
	movd	DWORD [edi-40],xmm2
	movd	DWORD [edi-36],xmm3
	movd	DWORD [edi-32],xmm4
	mov	esp,ebp
L$007nodata:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
align	16
__poly1305_emit_sse2:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	ebp,DWORD [20+esp]
	cmp	DWORD [20+ebp],0
	je	NEAR L$enter_emit
	mov	eax,DWORD [ebp]
	mov	edi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	mov	esi,DWORD [16+ebp]
	mov	ebx,edi
	shl	edi,26
	shr	ebx,6
	add	eax,edi
	mov	edi,ecx
	adc	ebx,0
	shl	edi,20
	shr	ecx,12
	add	ebx,edi
	mov	edi,edx
	adc	ecx,0
	shl	edi,14
	shr	edx,18
	add	ecx,edi
	mov	edi,esi
	adc	edx,0
	shl	edi,8
	shr	esi,24
	add	edx,edi
	adc	esi,0
	mov	edi,esi
	and	esi,3
	shr	edi,2
	lea	ebp,[edi*4+edi]
	mov	edi,DWORD [24+esp]
	add	eax,ebp
	mov	ebp,DWORD [28+esp]
	adc	ebx,0
	adc	ecx,0
	adc	edx,0
	adc	esi,0
	movd	xmm0,eax
	add	eax,5
	movd	xmm1,ebx
	adc	ebx,0
	movd	xmm2,ecx
	adc	ecx,0
	movd	xmm3,edx
	adc	edx,0
	adc	esi,0
	shr	esi,2
	neg	esi
	and	eax,esi
	and	ebx,esi
	and	ecx,esi
	and	edx,esi
	mov	DWORD [edi],eax
	movd	eax,xmm0
	mov	DWORD [4+edi],ebx
	movd	ebx,xmm1
	mov	DWORD [8+edi],ecx
	movd	ecx,xmm2
	mov	DWORD [12+edi],edx
	movd	edx,xmm3
	not	esi
	and	eax,esi
	and	ebx,esi
	or	eax,DWORD [edi]
	and	ecx,esi
	or	ebx,DWORD [4+edi]
	and	edx,esi
	or	ecx,DWORD [8+edi]
	or	edx,DWORD [12+edi]
	add	eax,DWORD [ebp]
	adc	ebx,DWORD [4+ebp]
	mov	DWORD [edi],eax
	adc	ecx,DWORD [8+ebp]
	mov	DWORD [4+edi],ebx
	adc	edx,DWORD [12+ebp]
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
align	16
__poly1305_init_avx2:
	vmovdqu	xmm4,[24+edi]
	lea	edi,[48+edi]
	mov	ebp,esp
	sub	esp,224
	and	esp,-16
	vmovdqa	xmm7,[64+ebx]
	vpand	xmm0,xmm4,xmm7
	vpsrlq	xmm1,xmm4,26
	vpsrldq	xmm3,xmm4,6
	vpand	xmm1,xmm1,xmm7
	vpsrlq	xmm2,xmm3,4
	vpsrlq	xmm3,xmm3,30
	vpand	xmm2,xmm2,xmm7
	vpand	xmm3,xmm3,xmm7
	vpsrldq	xmm4,xmm4,13
	lea	edx,[144+esp]
	mov	ecx,2
L$018square:
	vmovdqa	[esp],xmm0
	vmovdqa	[16+esp],xmm1
	vmovdqa	[32+esp],xmm2
	vmovdqa	[48+esp],xmm3
	vmovdqa	[64+esp],xmm4
	vpslld	xmm6,xmm1,2
	vpslld	xmm5,xmm2,2
	vpaddd	xmm6,xmm6,xmm1
	vpaddd	xmm5,xmm5,xmm2
	vmovdqa	[80+esp],xmm6
	vmovdqa	[96+esp],xmm5
	vpslld	xmm6,xmm3,2
	vpslld	xmm5,xmm4,2
	vpaddd	xmm6,xmm6,xmm3
	vpaddd	xmm5,xmm5,xmm4
	vmovdqa	[112+esp],xmm6
	vmovdqa	[128+esp],xmm5
	vpshufd	xmm5,xmm0,68
	vmovdqa	xmm6,xmm1
	vpshufd	xmm1,xmm1,68
	vpshufd	xmm2,xmm2,68
	vpshufd	xmm3,xmm3,68
	vpshufd	xmm4,xmm4,68
	vmovdqa	[edx],xmm5
	vmovdqa	[16+edx],xmm1
	vmovdqa	[32+edx],xmm2
	vmovdqa	[48+edx],xmm3
	vmovdqa	[64+edx],xmm4
	vpmuludq	xmm4,xmm4,xmm0
	vpmuludq	xmm3,xmm3,xmm0
	vpmuludq	xmm2,xmm2,xmm0
	vpmuludq	xmm1,xmm1,xmm0
	vpmuludq	xmm0,xmm5,xmm0
	vpmuludq	xmm5,xmm6,[48+edx]
	vpaddq	xmm4,xmm4,xmm5
	vpmuludq	xmm7,xmm6,[32+edx]
	vpaddq	xmm3,xmm3,xmm7
	vpmuludq	xmm5,xmm6,[16+edx]
	vpaddq	xmm2,xmm2,xmm5
	vmovdqa	xmm7,[80+esp]
	vpmuludq	xmm6,xmm6,[edx]
	vpaddq	xmm1,xmm1,xmm6
	vmovdqa	xmm5,[32+esp]
	vpmuludq	xmm7,xmm7,[64+edx]
	vpaddq	xmm0,xmm0,xmm7
	vpmuludq	xmm6,xmm5,[32+edx]
	vpaddq	xmm4,xmm4,xmm6
	vpmuludq	xmm7,xmm5,[16+edx]
	vpaddq	xmm3,xmm3,xmm7
	vmovdqa	xmm6,[96+esp]
	vpmuludq	xmm5,xmm5,[edx]
	vpaddq	xmm2,xmm2,xmm5
	vpmuludq	xmm7,xmm6,[64+edx]
	vpaddq	xmm1,xmm1,xmm7
	vmovdqa	xmm5,[48+esp]
	vpmuludq	xmm6,xmm6,[48+edx]
	vpaddq	xmm0,xmm0,xmm6
	vpmuludq	xmm7,xmm5,[16+edx]
	vpaddq	xmm4,xmm4,xmm7
	vmovdqa	xmm6,[112+esp]
	vpmuludq	xmm5,xmm5,[edx]
	vpaddq	xmm3,xmm3,xmm5
	vpmuludq	xmm7,xmm6,[64+edx]
	vpaddq	xmm2,xmm2,xmm7
	vpmuludq	xmm5,xmm6,[48+edx]
	vpaddq	xmm1,xmm1,xmm5
	vmovdqa	xmm7,[64+esp]
	vpmuludq	xmm6,xmm6,[32+edx]
	vpaddq	xmm0,xmm0,xmm6
	vmovdqa	xmm5,[128+esp]
	vpmuludq	xmm7,xmm7,[edx]
	vpaddq	xmm4,xmm4,xmm7
	vpmuludq	xmm6,xmm5,[64+edx]
	vpaddq	xmm3,xmm3,xmm6
	vpmuludq	xmm7,xmm5,[16+edx]
	vpaddq	xmm0,xmm0,xmm7
	vpmuludq	xmm6,xmm5,[32+edx]
	vpaddq	xmm1,xmm1,xmm6
	vmovdqa	xmm7,[64+ebx]
	vpmuludq	xmm5,xmm5,[48+edx]
	vpaddq	xmm2,xmm2,xmm5
	vpsrlq	xmm5,xmm3,26
	vpand	xmm3,xmm3,xmm7
	vpsrlq	xmm6,xmm0,26
	vpand	xmm0,xmm0,xmm7
	vpaddq	xmm4,xmm4,xmm5
	vpaddq	xmm1,xmm1,xmm6
	vpsrlq	xmm5,xmm4,26
	vpand	xmm4,xmm4,xmm7
	vpsrlq	xmm6,xmm1,26
	vpand	xmm1,xmm1,xmm7
	vpaddq	xmm2,xmm2,xmm6
	vpaddd	xmm0,xmm0,xmm5
	vpsllq	xmm5,xmm5,2
	vpsrlq	xmm6,xmm2,26
	vpand	xmm2,xmm2,xmm7
	vpaddd	xmm0,xmm0,xmm5
	vpaddd	xmm3,xmm3,xmm6
	vpsrlq	xmm6,xmm3,26
	vpsrlq	xmm5,xmm0,26
	vpand	xmm0,xmm0,xmm7
	vpand	xmm3,xmm3,xmm7
	vpaddd	xmm1,xmm1,xmm5
	vpaddd	xmm4,xmm4,xmm6
	dec	ecx
	jz	NEAR L$019square_break
	vpunpcklqdq	xmm0,xmm0,[esp]
	vpunpcklqdq	xmm1,xmm1,[16+esp]
	vpunpcklqdq	xmm2,xmm2,[32+esp]
	vpunpcklqdq	xmm3,xmm3,[48+esp]
	vpunpcklqdq	xmm4,xmm4,[64+esp]
	jmp	NEAR L$018square
L$019square_break:
	vpsllq	xmm0,xmm0,32
	vpsllq	xmm1,xmm1,32
	vpsllq	xmm2,xmm2,32
	vpsllq	xmm3,xmm3,32
	vpsllq	xmm4,xmm4,32
	vpor	xmm0,xmm0,[esp]
	vpor	xmm1,xmm1,[16+esp]
	vpor	xmm2,xmm2,[32+esp]
	vpor	xmm3,xmm3,[48+esp]
	vpor	xmm4,xmm4,[64+esp]
	vpshufd	xmm0,xmm0,141
	vpshufd	xmm1,xmm1,141
	vpshufd	xmm2,xmm2,141
	vpshufd	xmm3,xmm3,141
	vpshufd	xmm4,xmm4,141
	vmovdqu	[edi],xmm0
	vmovdqu	[16+edi],xmm1
	vmovdqu	[32+edi],xmm2
	vmovdqu	[48+edi],xmm3
	vmovdqu	[64+edi],xmm4
	vpslld	xmm6,xmm1,2
	vpslld	xmm5,xmm2,2
	vpaddd	xmm6,xmm6,xmm1
	vpaddd	xmm5,xmm5,xmm2
	vmovdqu	[80+edi],xmm6
	vmovdqu	[96+edi],xmm5
	vpslld	xmm6,xmm3,2
	vpslld	xmm5,xmm4,2
	vpaddd	xmm6,xmm6,xmm3
	vpaddd	xmm5,xmm5,xmm4
	vmovdqu	[112+edi],xmm6
	vmovdqu	[128+edi],xmm5
	mov	esp,ebp
	lea	edi,[edi-48]
	ret
align	32
align	16
__poly1305_blocks_avx2:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	mov	eax,DWORD [20+edi]
	and	ecx,-16
	jz	NEAR L$020nodata
	cmp	ecx,64
	jae	NEAR L$021enter_avx2
	test	eax,eax
	jz	NEAR L$enter_blocks
L$021enter_avx2:
	vzeroupper
	call	L$022pic_point
L$022pic_point:
	pop	ebx
	lea	ebx,[(L$const_sse2-L$022pic_point)+ebx]
	test	eax,eax
	jnz	NEAR L$023base2_26
	call	__poly1305_init_avx2
	mov	eax,DWORD [edi]
	mov	ecx,DWORD [3+edi]
	mov	edx,DWORD [6+edi]
	mov	esi,DWORD [9+edi]
	mov	ebp,DWORD [13+edi]
	shr	ecx,2
	and	eax,67108863
	shr	edx,4
	and	ecx,67108863
	shr	esi,6
	and	edx,67108863
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ecx
	mov	DWORD [8+edi],edx
	mov	DWORD [12+edi],esi
	mov	DWORD [16+edi],ebp
	mov	DWORD [20+edi],1
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
L$023base2_26:
	mov	eax,DWORD [32+esp]
	mov	ebp,esp
	sub	esp,448
	and	esp,-512
	vmovdqu	xmm0,[48+edi]
	lea	edx,[288+esp]
	vmovdqu	xmm1,[64+edi]
	vmovdqu	xmm2,[80+edi]
	vmovdqu	xmm3,[96+edi]
	vmovdqu	xmm4,[112+edi]
	lea	edi,[48+edi]
	vpermq	ymm0,ymm0,64
	vpermq	ymm1,ymm1,64
	vpermq	ymm2,ymm2,64
	vpermq	ymm3,ymm3,64
	vpermq	ymm4,ymm4,64
	vpshufd	ymm0,ymm0,200
	vpshufd	ymm1,ymm1,200
	vpshufd	ymm2,ymm2,200
	vpshufd	ymm3,ymm3,200
	vpshufd	ymm4,ymm4,200
	vmovdqa	[edx-128],ymm0
	vmovdqu	xmm0,[80+edi]
	vmovdqa	[edx-96],ymm1
	vmovdqu	xmm1,[96+edi]
	vmovdqa	[edx-64],ymm2
	vmovdqu	xmm2,[112+edi]
	vmovdqa	[edx-32],ymm3
	vmovdqu	xmm3,[128+edi]
	vmovdqa	[edx],ymm4
	vpermq	ymm0,ymm0,64
	vpermq	ymm1,ymm1,64
	vpermq	ymm2,ymm2,64
	vpermq	ymm3,ymm3,64
	vpshufd	ymm0,ymm0,200
	vpshufd	ymm1,ymm1,200
	vpshufd	ymm2,ymm2,200
	vpshufd	ymm3,ymm3,200
	vmovdqa	[32+edx],ymm0
	vmovd	xmm0,DWORD [edi-48]
	vmovdqa	[64+edx],ymm1
	vmovd	xmm1,DWORD [edi-44]
	vmovdqa	[96+edx],ymm2
	vmovd	xmm2,DWORD [edi-40]
	vmovdqa	[128+edx],ymm3
	vmovd	xmm3,DWORD [edi-36]
	vmovd	xmm4,DWORD [edi-32]
	vmovdqa	ymm7,[64+ebx]
	neg	eax
	test	ecx,63
	jz	NEAR L$024even
	mov	edx,ecx
	and	ecx,-64
	and	edx,63
	vmovdqu	xmm5,[esi]
	cmp	edx,32
	jb	NEAR L$025one
	vmovdqu	xmm6,[16+esi]
	je	NEAR L$026two
	vinserti128	ymm5,ymm5,[32+esi],1
	lea	esi,[48+esi]
	lea	ebx,[8+ebx]
	lea	edx,[296+esp]
	jmp	NEAR L$027tail
L$026two:
	lea	esi,[32+esi]
	lea	ebx,[16+ebx]
	lea	edx,[304+esp]
	jmp	NEAR L$027tail
L$025one:
	lea	esi,[16+esi]
	vpxor	ymm6,ymm6,ymm6
	lea	ebx,[32+eax*8+ebx]
	lea	edx,[312+esp]
	jmp	NEAR L$027tail
align	32
L$024even:
	vmovdqu	xmm5,[esi]
	vmovdqu	xmm6,[16+esi]
	vinserti128	ymm5,ymm5,[32+esi],1
	vinserti128	ymm6,ymm6,[48+esi],1
	lea	esi,[64+esi]
	sub	ecx,64
	jz	NEAR L$027tail
L$028loop:
	vmovdqa	[64+esp],ymm2
	vpsrldq	ymm2,ymm5,6
	vmovdqa	[esp],ymm0
	vpsrldq	ymm0,ymm6,6
	vmovdqa	[32+esp],ymm1
	vpunpckhqdq	ymm1,ymm5,ymm6
	vpunpcklqdq	ymm5,ymm5,ymm6
	vpunpcklqdq	ymm2,ymm2,ymm0
	vpsrlq	ymm0,ymm2,30
	vpsrlq	ymm2,ymm2,4
	vpsrlq	ymm6,ymm5,26
	vpsrlq	ymm1,ymm1,40
	vpand	ymm2,ymm2,ymm7
	vpand	ymm5,ymm5,ymm7
	vpand	ymm6,ymm6,ymm7
	vpand	ymm0,ymm0,ymm7
	vpor	ymm1,ymm1,[ebx]
	vpaddq	ymm2,ymm2,[64+esp]
	vpaddq	ymm5,ymm5,[esp]
	vpaddq	ymm6,ymm6,[32+esp]
	vpaddq	ymm0,ymm0,ymm3
	vpaddq	ymm1,ymm1,ymm4
	vpmuludq	ymm3,ymm2,[edx-96]
	vmovdqa	[32+esp],ymm6
	vpmuludq	ymm4,ymm2,[edx-64]
	vmovdqa	[96+esp],ymm0
	vpmuludq	ymm0,ymm2,[96+edx]
	vmovdqa	[128+esp],ymm1
	vpmuludq	ymm1,ymm2,[128+edx]
	vpmuludq	ymm2,ymm2,[edx-128]
	vpmuludq	ymm7,ymm5,[edx-32]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[edx]
	vpaddq	ymm4,ymm4,ymm6
	vpmuludq	ymm7,ymm5,[edx-128]
	vpaddq	ymm0,ymm0,ymm7
	vmovdqa	ymm7,[32+esp]
	vpmuludq	ymm6,ymm5,[edx-96]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[edx-64]
	vpaddq	ymm2,ymm2,ymm5
	vpmuludq	ymm6,ymm7,[edx-64]
	vpaddq	ymm3,ymm3,ymm6
	vpmuludq	ymm5,ymm7,[edx-32]
	vpaddq	ymm4,ymm4,ymm5
	vpmuludq	ymm6,ymm7,[128+edx]
	vpaddq	ymm0,ymm0,ymm6
	vmovdqa	ymm6,[96+esp]
	vpmuludq	ymm5,ymm7,[edx-128]
	vpaddq	ymm1,ymm1,ymm5
	vpmuludq	ymm7,ymm7,[edx-96]
	vpaddq	ymm2,ymm2,ymm7
	vpmuludq	ymm5,ymm6,[edx-128]
	vpaddq	ymm3,ymm3,ymm5
	vpmuludq	ymm7,ymm6,[edx-96]
	vpaddq	ymm4,ymm4,ymm7
	vpmuludq	ymm5,ymm6,[64+edx]
	vpaddq	ymm0,ymm0,ymm5
	vmovdqa	ymm5,[128+esp]
	vpmuludq	ymm7,ymm6,[96+edx]
	vpaddq	ymm1,ymm1,ymm7
	vpmuludq	ymm6,ymm6,[128+edx]
	vpaddq	ymm2,ymm2,ymm6
	vpmuludq	ymm7,ymm5,[128+edx]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[32+edx]
	vpaddq	ymm0,ymm0,ymm6
	vpmuludq	ymm7,ymm5,[edx-128]
	vpaddq	ymm4,ymm4,ymm7
	vmovdqa	ymm7,[64+ebx]
	vpmuludq	ymm6,ymm5,[64+edx]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[96+edx]
	vpaddq	ymm2,ymm2,ymm5
	vpsrlq	ymm5,ymm3,26
	vpand	ymm3,ymm3,ymm7
	vpsrlq	ymm6,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpaddq	ymm4,ymm4,ymm5
	vpaddq	ymm1,ymm1,ymm6
	vpsrlq	ymm5,ymm4,26
	vpand	ymm4,ymm4,ymm7
	vpsrlq	ymm6,ymm1,26
	vpand	ymm1,ymm1,ymm7
	vpaddq	ymm2,ymm2,ymm6
	vpaddq	ymm0,ymm0,ymm5
	vpsllq	ymm5,ymm5,2
	vpsrlq	ymm6,ymm2,26
	vpand	ymm2,ymm2,ymm7
	vpaddq	ymm0,ymm0,ymm5
	vpaddq	ymm3,ymm3,ymm6
	vpsrlq	ymm6,ymm3,26
	vpsrlq	ymm5,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpand	ymm3,ymm3,ymm7
	vpaddq	ymm1,ymm1,ymm5
	vpaddq	ymm4,ymm4,ymm6
	vmovdqu	xmm5,[esi]
	vmovdqu	xmm6,[16+esi]
	vinserti128	ymm5,ymm5,[32+esi],1
	vinserti128	ymm6,ymm6,[48+esi],1
	lea	esi,[64+esi]
	sub	ecx,64
	jnz	NEAR L$028loop
L$027tail:
	vmovdqa	[64+esp],ymm2
	vpsrldq	ymm2,ymm5,6
	vmovdqa	[esp],ymm0
	vpsrldq	ymm0,ymm6,6
	vmovdqa	[32+esp],ymm1
	vpunpckhqdq	ymm1,ymm5,ymm6
	vpunpcklqdq	ymm5,ymm5,ymm6
	vpunpcklqdq	ymm2,ymm2,ymm0
	vpsrlq	ymm0,ymm2,30
	vpsrlq	ymm2,ymm2,4
	vpsrlq	ymm6,ymm5,26
	vpsrlq	ymm1,ymm1,40
	vpand	ymm2,ymm2,ymm7
	vpand	ymm5,ymm5,ymm7
	vpand	ymm6,ymm6,ymm7
	vpand	ymm0,ymm0,ymm7
	vpor	ymm1,ymm1,[ebx]
	and	ebx,-64
	vpaddq	ymm2,ymm2,[64+esp]
	vpaddq	ymm5,ymm5,[esp]
	vpaddq	ymm6,ymm6,[32+esp]
	vpaddq	ymm0,ymm0,ymm3
	vpaddq	ymm1,ymm1,ymm4
	vpmuludq	ymm3,ymm2,[edx-92]
	vmovdqa	[32+esp],ymm6
	vpmuludq	ymm4,ymm2,[edx-60]
	vmovdqa	[96+esp],ymm0
	vpmuludq	ymm0,ymm2,[100+edx]
	vmovdqa	[128+esp],ymm1
	vpmuludq	ymm1,ymm2,[132+edx]
	vpmuludq	ymm2,ymm2,[edx-124]
	vpmuludq	ymm7,ymm5,[edx-28]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[4+edx]
	vpaddq	ymm4,ymm4,ymm6
	vpmuludq	ymm7,ymm5,[edx-124]
	vpaddq	ymm0,ymm0,ymm7
	vmovdqa	ymm7,[32+esp]
	vpmuludq	ymm6,ymm5,[edx-92]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[edx-60]
	vpaddq	ymm2,ymm2,ymm5
	vpmuludq	ymm6,ymm7,[edx-60]
	vpaddq	ymm3,ymm3,ymm6
	vpmuludq	ymm5,ymm7,[edx-28]
	vpaddq	ymm4,ymm4,ymm5
	vpmuludq	ymm6,ymm7,[132+edx]
	vpaddq	ymm0,ymm0,ymm6
	vmovdqa	ymm6,[96+esp]
	vpmuludq	ymm5,ymm7,[edx-124]
	vpaddq	ymm1,ymm1,ymm5
	vpmuludq	ymm7,ymm7,[edx-92]
	vpaddq	ymm2,ymm2,ymm7
	vpmuludq	ymm5,ymm6,[edx-124]
	vpaddq	ymm3,ymm3,ymm5
	vpmuludq	ymm7,ymm6,[edx-92]
	vpaddq	ymm4,ymm4,ymm7
	vpmuludq	ymm5,ymm6,[68+edx]
	vpaddq	ymm0,ymm0,ymm5
	vmovdqa	ymm5,[128+esp]
	vpmuludq	ymm7,ymm6,[100+edx]
	vpaddq	ymm1,ymm1,ymm7
	vpmuludq	ymm6,ymm6,[132+edx]
	vpaddq	ymm2,ymm2,ymm6
	vpmuludq	ymm7,ymm5,[132+edx]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[36+edx]
	vpaddq	ymm0,ymm0,ymm6
	vpmuludq	ymm7,ymm5,[edx-124]
	vpaddq	ymm4,ymm4,ymm7
	vmovdqa	ymm7,[64+ebx]
	vpmuludq	ymm6,ymm5,[68+edx]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[100+edx]
	vpaddq	ymm2,ymm2,ymm5
	vpsrldq	ymm5,ymm4,8
	vpsrldq	ymm6,ymm3,8
	vpaddq	ymm4,ymm4,ymm5
	vpsrldq	ymm5,ymm0,8
	vpaddq	ymm3,ymm3,ymm6
	vpsrldq	ymm6,ymm1,8
	vpaddq	ymm0,ymm0,ymm5
	vpsrldq	ymm5,ymm2,8
	vpaddq	ymm1,ymm1,ymm6
	vpermq	ymm6,ymm4,2
	vpaddq	ymm2,ymm2,ymm5
	vpermq	ymm5,ymm3,2
	vpaddq	ymm4,ymm4,ymm6
	vpermq	ymm6,ymm0,2
	vpaddq	ymm3,ymm3,ymm5
	vpermq	ymm5,ymm1,2
	vpaddq	ymm0,ymm0,ymm6
	vpermq	ymm6,ymm2,2
	vpaddq	ymm1,ymm1,ymm5
	vpaddq	ymm2,ymm2,ymm6
	vpsrlq	ymm5,ymm3,26
	vpand	ymm3,ymm3,ymm7
	vpsrlq	ymm6,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpaddq	ymm4,ymm4,ymm5
	vpaddq	ymm1,ymm1,ymm6
	vpsrlq	ymm5,ymm4,26
	vpand	ymm4,ymm4,ymm7
	vpsrlq	ymm6,ymm1,26
	vpand	ymm1,ymm1,ymm7
	vpaddq	ymm2,ymm2,ymm6
	vpaddq	ymm0,ymm0,ymm5
	vpsllq	ymm5,ymm5,2
	vpsrlq	ymm6,ymm2,26
	vpand	ymm2,ymm2,ymm7
	vpaddq	ymm0,ymm0,ymm5
	vpaddq	ymm3,ymm3,ymm6
	vpsrlq	ymm6,ymm3,26
	vpsrlq	ymm5,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpand	ymm3,ymm3,ymm7
	vpaddq	ymm1,ymm1,ymm5
	vpaddq	ymm4,ymm4,ymm6
	cmp	ecx,0
	je	NEAR L$029done
	vpshufd	xmm0,xmm0,252
	lea	edx,[288+esp]
	vpshufd	xmm1,xmm1,252
	vpshufd	xmm2,xmm2,252
	vpshufd	xmm3,xmm3,252
	vpshufd	xmm4,xmm4,252
	jmp	NEAR L$024even
align	16
L$029done:
	vmovd	DWORD [edi-48],xmm0
	vmovd	DWORD [edi-44],xmm1
	vmovd	DWORD [edi-40],xmm2
	vmovd	DWORD [edi-36],xmm3
	vmovd	DWORD [edi-32],xmm4
	vzeroupper
	mov	esp,ebp
L$020nodata:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$const_sse2:
dd	16777216,0,16777216,0,16777216,0,16777216,0
dd	0,0,0,0,0,0,0,0
dd	67108863,0,67108863,0,67108863,0,67108863,0
dd	268435455,268435452,268435452,268435452
db	80,111,108,121,49,51,48,53,32,102,111,114,32,120,56,54
db	44,32,67,82,89,80,84,79,71,65,77,83,32,98,121,32
db	60,97,112,112,114,111,64,111,112,101,110,115,115,108,46,111
db	114,103,62,0
align	4
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/rc4/                                      0000775 0000000 0000000 00000000000 14746647661 0023440 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/rc4/rc4-586.asm                           0000664 0000000 0000000 00000015515 14746647661 0025161 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_RC4
align	16
_RC4:
L$_RC4_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	edx,DWORD [24+esp]
	mov	esi,DWORD [28+esp]
	mov	ebp,DWORD [32+esp]
	xor	eax,eax
	xor	ebx,ebx
	cmp	edx,0
	je	NEAR L$000abort
	mov	al,BYTE [edi]
	mov	bl,BYTE [4+edi]
	add	edi,8
	lea	ecx,[edx*1+esi]
	sub	ebp,esi
	mov	DWORD [24+esp],ecx
	inc	al
	cmp	DWORD [256+edi],-1
	je	NEAR L$001RC4_CHAR
	mov	ecx,DWORD [eax*4+edi]
	and	edx,-4
	jz	NEAR L$002loop1
	mov	DWORD [32+esp],ebp
	test	edx,-8
	jz	NEAR L$003go4loop4
	lea	ebp,[_OPENSSL_ia32cap_P]
	bt	DWORD [ebp],26
	jnc	NEAR L$003go4loop4
	mov	ebp,DWORD [32+esp]
	and	edx,-8
	lea	edx,[edx*1+esi-8]
	mov	DWORD [edi-4],edx
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	movq	mm0,[esi]
	mov	ecx,DWORD [eax*4+edi]
	movd	mm2,DWORD [edx*4+edi]
	jmp	NEAR L$004loop_mmx_enter
align	16
L$005loop_mmx:
	add	bl,cl
	psllq	mm1,56
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	movq	mm0,[esi]
	movq	[esi*1+ebp-8],mm2
	mov	ecx,DWORD [eax*4+edi]
	movd	mm2,DWORD [edx*4+edi]
L$004loop_mmx_enter:
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm0
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,8
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,16
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,24
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,32
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,40
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,48
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	mov	edx,ebx
	xor	ebx,ebx
	mov	bl,dl
	cmp	esi,DWORD [edi-4]
	lea	esi,[8+esi]
	jb	NEAR L$005loop_mmx
	psllq	mm1,56
	pxor	mm2,mm1
	movq	[esi*1+ebp-8],mm2
	emms
	cmp	esi,DWORD [24+esp]
	je	NEAR L$006done
	jmp	NEAR L$002loop1
align	16
L$003go4loop4:
	lea	edx,[edx*1+esi-4]
	mov	DWORD [28+esp],edx
L$007loop4:
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	mov	ecx,DWORD [eax*4+edi]
	mov	ebp,DWORD [edx*4+edi]
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	ror	ebp,8
	mov	ecx,DWORD [eax*4+edi]
	or	ebp,DWORD [edx*4+edi]
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	ror	ebp,8
	mov	ecx,DWORD [eax*4+edi]
	or	ebp,DWORD [edx*4+edi]
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	ror	ebp,8
	mov	ecx,DWORD [32+esp]
	or	ebp,DWORD [edx*4+edi]
	ror	ebp,8
	xor	ebp,DWORD [esi]
	cmp	esi,DWORD [28+esp]
	mov	DWORD [esi*1+ecx],ebp
	lea	esi,[4+esi]
	mov	ecx,DWORD [eax*4+edi]
	jb	NEAR L$007loop4
	cmp	esi,DWORD [24+esp]
	je	NEAR L$006done
	mov	ebp,DWORD [32+esp]
align	16
L$002loop1:
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	mov	edx,DWORD [edx*4+edi]
	xor	dl,BYTE [esi]
	lea	esi,[1+esi]
	mov	ecx,DWORD [eax*4+edi]
	cmp	esi,DWORD [24+esp]
	mov	BYTE [esi*1+ebp-1],dl
	jb	NEAR L$002loop1
	jmp	NEAR L$006done
align	16
L$001RC4_CHAR:
	movzx	ecx,BYTE [eax*1+edi]
L$008cloop1:
	add	bl,cl
	movzx	edx,BYTE [ebx*1+edi]
	mov	BYTE [ebx*1+edi],cl
	mov	BYTE [eax*1+edi],dl
	add	dl,cl
	movzx	edx,BYTE [edx*1+edi]
	add	al,1
	xor	dl,BYTE [esi]
	lea	esi,[1+esi]
	movzx	ecx,BYTE [eax*1+edi]
	cmp	esi,DWORD [24+esp]
	mov	BYTE [esi*1+ebp-1],dl
	jb	NEAR L$008cloop1
L$006done:
	dec	al
	mov	DWORD [edi-4],ebx
	mov	BYTE [edi-8],al
L$000abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_RC4_set_key
align	16
_RC4_set_key:
L$_RC4_set_key_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	ebp,DWORD [24+esp]
	mov	esi,DWORD [28+esp]
	lea	edx,[_OPENSSL_ia32cap_P]
	lea	edi,[8+edi]
	lea	esi,[ebp*1+esi]
	neg	ebp
	xor	eax,eax
	mov	DWORD [edi-4],ebp
	bt	DWORD [edx],20
	jc	NEAR L$009c1stloop
align	16
L$010w1stloop:
	mov	DWORD [eax*4+edi],eax
	add	al,1
	jnc	NEAR L$010w1stloop
	xor	ecx,ecx
	xor	edx,edx
align	16
L$011w2ndloop:
	mov	eax,DWORD [ecx*4+edi]
	add	dl,BYTE [ebp*1+esi]
	add	dl,al
	add	ebp,1
	mov	ebx,DWORD [edx*4+edi]
	jnz	NEAR L$012wnowrap
	mov	ebp,DWORD [edi-4]
L$012wnowrap:
	mov	DWORD [edx*4+edi],eax
	mov	DWORD [ecx*4+edi],ebx
	add	cl,1
	jnc	NEAR L$011w2ndloop
	jmp	NEAR L$013exit
align	16
L$009c1stloop:
	mov	BYTE [eax*1+edi],al
	add	al,1
	jnc	NEAR L$009c1stloop
	xor	ecx,ecx
	xor	edx,edx
	xor	ebx,ebx
align	16
L$014c2ndloop:
	mov	al,BYTE [ecx*1+edi]
	add	dl,BYTE [ebp*1+esi]
	add	dl,al
	add	ebp,1
	mov	bl,BYTE [edx*1+edi]
	jnz	NEAR L$015cnowrap
	mov	ebp,DWORD [edi-4]
L$015cnowrap:
	mov	BYTE [edx*1+edi],al
	mov	BYTE [ecx*1+edi],bl
	add	cl,1
	jnc	NEAR L$014c2ndloop
	mov	DWORD [256+edi],-1
L$013exit:
	xor	eax,eax
	mov	DWORD [edi-8],eax
	mov	DWORD [edi-4],eax
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_RC4_options
align	16
_RC4_options:
L$_RC4_options_begin:
	call	L$016pic_point
L$016pic_point:
	pop	eax
	lea	eax,[(L$017opts-L$016pic_point)+eax]
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	edx,DWORD [edx]
	bt	edx,20
	jc	NEAR L$0181xchar
	bt	edx,26
	jnc	NEAR L$019ret
	add	eax,25
	ret
L$0181xchar:
	add	eax,12
L$019ret:
	ret
align	64
L$017opts:
db	114,99,52,40,52,120,44,105,110,116,41,0
db	114,99,52,40,49,120,44,99,104,97,114,41,0
db	114,99,52,40,56,120,44,109,109,120,41,0
db	82,67,52,32,102,111,114,32,120,56,54,44,32,67,82,89
db	80,84,79,71,65,77,83,32,98,121,32,60,97,112,112,114
db	111,64,111,112,101,110,115,115,108,46,111,114,103,62,0
align	64
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/ripemd/                                   0000775 0000000 0000000 00000000000 14746647661 0024230 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/ripemd/rmd-586.asm                        0000664 0000000 0000000 00000070306 14746647661 0026042 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_ripemd160_block_asm_data_order
align	16
_ripemd160_block_asm_data_order:
L$_ripemd160_block_asm_data_order_begin:
	mov	edx,DWORD [4+esp]
	mov	eax,DWORD [8+esp]
	push	esi
	mov	ecx,DWORD [edx]
	push	edi
	mov	esi,DWORD [4+edx]
	push	ebp
	mov	edi,DWORD [8+edx]
	push	ebx
	sub	esp,108
L$000start:
	; 
	mov	ebx,DWORD [eax]
	mov	ebp,DWORD [4+eax]
	mov	DWORD [esp],ebx
	mov	DWORD [4+esp],ebp
	mov	ebx,DWORD [8+eax]
	mov	ebp,DWORD [12+eax]
	mov	DWORD [8+esp],ebx
	mov	DWORD [12+esp],ebp
	mov	ebx,DWORD [16+eax]
	mov	ebp,DWORD [20+eax]
	mov	DWORD [16+esp],ebx
	mov	DWORD [20+esp],ebp
	mov	ebx,DWORD [24+eax]
	mov	ebp,DWORD [28+eax]
	mov	DWORD [24+esp],ebx
	mov	DWORD [28+esp],ebp
	mov	ebx,DWORD [32+eax]
	mov	ebp,DWORD [36+eax]
	mov	DWORD [32+esp],ebx
	mov	DWORD [36+esp],ebp
	mov	ebx,DWORD [40+eax]
	mov	ebp,DWORD [44+eax]
	mov	DWORD [40+esp],ebx
	mov	DWORD [44+esp],ebp
	mov	ebx,DWORD [48+eax]
	mov	ebp,DWORD [52+eax]
	mov	DWORD [48+esp],ebx
	mov	DWORD [52+esp],ebp
	mov	ebx,DWORD [56+eax]
	mov	ebp,DWORD [60+eax]
	mov	DWORD [56+esp],ebx
	mov	DWORD [60+esp],ebp
	mov	eax,edi
	mov	ebx,DWORD [12+edx]
	mov	ebp,DWORD [16+edx]
	; 0
	xor	eax,ebx
	mov	edx,DWORD [esp]
	xor	eax,esi
	add	ecx,edx
	rol	edi,10
	add	ecx,eax
	mov	eax,esi
	rol	ecx,11
	add	ecx,ebp
	; 1
	xor	eax,edi
	mov	edx,DWORD [4+esp]
	xor	eax,ecx
	add	ebp,eax
	mov	eax,ecx
	rol	esi,10
	add	ebp,edx
	xor	eax,esi
	rol	ebp,14
	add	ebp,ebx
	; 2
	mov	edx,DWORD [8+esp]
	xor	eax,ebp
	add	ebx,edx
	rol	ecx,10
	add	ebx,eax
	mov	eax,ebp
	rol	ebx,15
	add	ebx,edi
	; 3
	xor	eax,ecx
	mov	edx,DWORD [12+esp]
	xor	eax,ebx
	add	edi,eax
	mov	eax,ebx
	rol	ebp,10
	add	edi,edx
	xor	eax,ebp
	rol	edi,12
	add	edi,esi
	; 4
	mov	edx,DWORD [16+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,5
	add	esi,ecx
	; 5
	xor	eax,ebx
	mov	edx,DWORD [20+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,esi
	rol	edi,10
	add	ecx,edx
	xor	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 6
	mov	edx,DWORD [24+esp]
	xor	eax,ecx
	add	ebp,edx
	rol	esi,10
	add	ebp,eax
	mov	eax,ecx
	rol	ebp,7
	add	ebp,ebx
	; 7
	xor	eax,esi
	mov	edx,DWORD [28+esp]
	xor	eax,ebp
	add	ebx,eax
	mov	eax,ebp
	rol	ecx,10
	add	ebx,edx
	xor	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 8
	mov	edx,DWORD [32+esp]
	xor	eax,ebx
	add	edi,edx
	rol	ebp,10
	add	edi,eax
	mov	eax,ebx
	rol	edi,11
	add	edi,esi
	; 9
	xor	eax,ebp
	mov	edx,DWORD [36+esp]
	xor	eax,edi
	add	esi,eax
	mov	eax,edi
	rol	ebx,10
	add	esi,edx
	xor	eax,ebx
	rol	esi,13
	add	esi,ecx
	; 10
	mov	edx,DWORD [40+esp]
	xor	eax,esi
	add	ecx,edx
	rol	edi,10
	add	ecx,eax
	mov	eax,esi
	rol	ecx,14
	add	ecx,ebp
	; 11
	xor	eax,edi
	mov	edx,DWORD [44+esp]
	xor	eax,ecx
	add	ebp,eax
	mov	eax,ecx
	rol	esi,10
	add	ebp,edx
	xor	eax,esi
	rol	ebp,15
	add	ebp,ebx
	; 12
	mov	edx,DWORD [48+esp]
	xor	eax,ebp
	add	ebx,edx
	rol	ecx,10
	add	ebx,eax
	mov	eax,ebp
	rol	ebx,6
	add	ebx,edi
	; 13
	xor	eax,ecx
	mov	edx,DWORD [52+esp]
	xor	eax,ebx
	add	edi,eax
	mov	eax,ebx
	rol	ebp,10
	add	edi,edx
	xor	eax,ebp
	rol	edi,7
	add	edi,esi
	; 14
	mov	edx,DWORD [56+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,9
	add	esi,ecx
	; 15
	xor	eax,ebx
	mov	edx,DWORD [60+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,-1
	rol	edi,10
	add	ecx,edx
	mov	edx,DWORD [28+esp]
	rol	ecx,8
	add	ecx,ebp
	; 16
	add	ebp,edx
	mov	edx,esi
	sub	eax,ecx
	and	edx,ecx
	and	eax,edi
	or	edx,eax
	mov	eax,DWORD [16+esp]
	rol	esi,10
	lea	ebp,[1518500249+edx*1+ebp]
	mov	edx,-1
	rol	ebp,7
	add	ebp,ebx
	; 17
	add	ebx,eax
	mov	eax,ecx
	sub	edx,ebp
	and	eax,ebp
	and	edx,esi
	or	eax,edx
	mov	edx,DWORD [52+esp]
	rol	ecx,10
	lea	ebx,[1518500249+eax*1+ebx]
	mov	eax,-1
	rol	ebx,6
	add	ebx,edi
	; 18
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	ebp,10
	lea	edi,[1518500249+edx*1+edi]
	mov	edx,-1
	rol	edi,8
	add	edi,esi
	; 19
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [40+esp]
	rol	ebx,10
	lea	esi,[1518500249+eax*1+esi]
	mov	eax,-1
	rol	esi,13
	add	esi,ecx
	; 20
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	edi,10
	lea	ecx,[1518500249+edx*1+ecx]
	mov	edx,-1
	rol	ecx,11
	add	ecx,ebp
	; 21
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,DWORD [60+esp]
	rol	esi,10
	lea	ebp,[1518500249+eax*1+ebp]
	mov	eax,-1
	rol	ebp,9
	add	ebp,ebx
	; 22
	add	ebx,edx
	mov	edx,ecx
	sub	eax,ebp
	and	edx,ebp
	and	eax,esi
	or	edx,eax
	mov	eax,DWORD [12+esp]
	rol	ecx,10
	lea	ebx,[1518500249+edx*1+ebx]
	mov	edx,-1
	rol	ebx,7
	add	ebx,edi
	; 23
	add	edi,eax
	mov	eax,ebp
	sub	edx,ebx
	and	eax,ebx
	and	edx,ecx
	or	eax,edx
	mov	edx,DWORD [48+esp]
	rol	ebp,10
	lea	edi,[1518500249+eax*1+edi]
	mov	eax,-1
	rol	edi,15
	add	edi,esi
	; 24
	add	esi,edx
	mov	edx,ebx
	sub	eax,edi
	and	edx,edi
	and	eax,ebp
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	ebx,10
	lea	esi,[1518500249+edx*1+esi]
	mov	edx,-1
	rol	esi,7
	add	esi,ecx
	; 25
	add	ecx,eax
	mov	eax,edi
	sub	edx,esi
	and	eax,esi
	and	edx,ebx
	or	eax,edx
	mov	edx,DWORD [36+esp]
	rol	edi,10
	lea	ecx,[1518500249+eax*1+ecx]
	mov	eax,-1
	rol	ecx,12
	add	ecx,ebp
	; 26
	add	ebp,edx
	mov	edx,esi
	sub	eax,ecx
	and	edx,ecx
	and	eax,edi
	or	edx,eax
	mov	eax,DWORD [20+esp]
	rol	esi,10
	lea	ebp,[1518500249+edx*1+ebp]
	mov	edx,-1
	rol	ebp,15
	add	ebp,ebx
	; 27
	add	ebx,eax
	mov	eax,ecx
	sub	edx,ebp
	and	eax,ebp
	and	edx,esi
	or	eax,edx
	mov	edx,DWORD [8+esp]
	rol	ecx,10
	lea	ebx,[1518500249+eax*1+ebx]
	mov	eax,-1
	rol	ebx,9
	add	ebx,edi
	; 28
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	ebp,10
	lea	edi,[1518500249+edx*1+edi]
	mov	edx,-1
	rol	edi,11
	add	edi,esi
	; 29
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [44+esp]
	rol	ebx,10
	lea	esi,[1518500249+eax*1+esi]
	mov	eax,-1
	rol	esi,7
	add	esi,ecx
	; 30
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [32+esp]
	rol	edi,10
	lea	ecx,[1518500249+edx*1+ecx]
	mov	edx,-1
	rol	ecx,13
	add	ecx,ebp
	; 31
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1518500249+eax*1+ebp]
	sub	edx,ecx
	rol	ebp,12
	add	ebp,ebx
	; 32
	mov	eax,DWORD [12+esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1859775393+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,11
	add	ebx,edi
	; 33
	mov	edx,DWORD [40+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1859775393+eax*1+edi]
	sub	edx,ebx
	rol	edi,13
	add	edi,esi
	; 34
	mov	eax,DWORD [56+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1859775393+edx*1+esi]
	sub	eax,edi
	rol	esi,6
	add	esi,ecx
	; 35
	mov	edx,DWORD [16+esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1859775393+eax*1+ecx]
	sub	edx,esi
	rol	ecx,7
	add	ecx,ebp
	; 36
	mov	eax,DWORD [36+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1859775393+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,14
	add	ebp,ebx
	; 37
	mov	edx,DWORD [60+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1859775393+eax*1+ebx]
	sub	edx,ebp
	rol	ebx,9
	add	ebx,edi
	; 38
	mov	eax,DWORD [32+esp]
	or	edx,ebx
	add	edi,eax
	xor	edx,ecx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[1859775393+edx*1+edi]
	sub	eax,ebx
	rol	edi,13
	add	edi,esi
	; 39
	mov	edx,DWORD [4+esp]
	or	eax,edi
	add	esi,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ebx,10
	lea	esi,[1859775393+eax*1+esi]
	sub	edx,edi
	rol	esi,15
	add	esi,ecx
	; 40
	mov	eax,DWORD [8+esp]
	or	edx,esi
	add	ecx,eax
	xor	edx,ebx
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1859775393+edx*1+ecx]
	sub	eax,esi
	rol	ecx,14
	add	ecx,ebp
	; 41
	mov	edx,DWORD [28+esp]
	or	eax,ecx
	add	ebp,edx
	xor	eax,edi
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1859775393+eax*1+ebp]
	sub	edx,ecx
	rol	ebp,8
	add	ebp,ebx
	; 42
	mov	eax,DWORD [esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1859775393+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,13
	add	ebx,edi
	; 43
	mov	edx,DWORD [24+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1859775393+eax*1+edi]
	sub	edx,ebx
	rol	edi,6
	add	edi,esi
	; 44
	mov	eax,DWORD [52+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1859775393+edx*1+esi]
	sub	eax,edi
	rol	esi,5
	add	esi,ecx
	; 45
	mov	edx,DWORD [44+esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1859775393+eax*1+ecx]
	sub	edx,esi
	rol	ecx,12
	add	ecx,ebp
	; 46
	mov	eax,DWORD [20+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1859775393+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,7
	add	ebp,ebx
	; 47
	mov	edx,DWORD [48+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,ecx
	rol	ebx,5
	add	ebx,edi
	; 48
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,11
	add	edi,esi
	; 49
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [36+esp]
	rol	ebx,10
	lea	esi,[2400959708+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,12
	add	esi,ecx
	; 50
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [44+esp]
	rol	edi,10
	lea	ecx,[2400959708+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,14
	add	ecx,ebp
	; 51
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [40+esp]
	rol	esi,10
	lea	ebp,[2400959708+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,15
	add	ebp,ebx
	; 52
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	ecx,10
	lea	ebx,[2400959708+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,14
	add	ebx,edi
	; 53
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [32+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,15
	add	edi,esi
	; 54
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [48+esp]
	rol	ebx,10
	lea	esi,[2400959708+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,9
	add	esi,ecx
	; 55
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [16+esp]
	rol	edi,10
	lea	ecx,[2400959708+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 56
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [52+esp]
	rol	esi,10
	lea	ebp,[2400959708+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,9
	add	ebp,ebx
	; 57
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [12+esp]
	rol	ecx,10
	lea	ebx,[2400959708+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,14
	add	ebx,edi
	; 58
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [28+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,5
	add	edi,esi
	; 59
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [60+esp]
	rol	ebx,10
	lea	esi,[2400959708+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,6
	add	esi,ecx
	; 60
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	edi,10
	lea	ecx,[2400959708+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 61
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [20+esp]
	rol	esi,10
	lea	ebp,[2400959708+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,6
	add	ebp,ebx
	; 62
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	ecx,10
	lea	ebx,[2400959708+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,5
	add	ebx,edi
	; 63
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [8+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	sub	edx,ebp
	rol	edi,12
	add	edi,esi
	; 64
	mov	eax,DWORD [16+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[2840853838+edx*1+esi]
	sub	eax,ebx
	rol	esi,9
	add	esi,ecx
	; 65
	mov	edx,DWORD [esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[2840853838+eax*1+ecx]
	sub	edx,edi
	rol	ecx,15
	add	ecx,ebp
	; 66
	mov	eax,DWORD [20+esp]
	or	edx,esi
	add	ebp,eax
	xor	edx,ecx
	mov	eax,-1
	rol	esi,10
	lea	ebp,[2840853838+edx*1+ebp]
	sub	eax,esi
	rol	ebp,5
	add	ebp,ebx
	; 67
	mov	edx,DWORD [36+esp]
	or	eax,ecx
	add	ebx,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[2840853838+eax*1+ebx]
	sub	edx,ecx
	rol	ebx,11
	add	ebx,edi
	; 68
	mov	eax,DWORD [28+esp]
	or	edx,ebp
	add	edi,eax
	xor	edx,ebx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[2840853838+edx*1+edi]
	sub	eax,ebp
	rol	edi,6
	add	edi,esi
	; 69
	mov	edx,DWORD [48+esp]
	or	eax,ebx
	add	esi,edx
	xor	eax,edi
	mov	edx,-1
	rol	ebx,10
	lea	esi,[2840853838+eax*1+esi]
	sub	edx,ebx
	rol	esi,8
	add	esi,ecx
	; 70
	mov	eax,DWORD [8+esp]
	or	edx,edi
	add	ecx,eax
	xor	edx,esi
	mov	eax,-1
	rol	edi,10
	lea	ecx,[2840853838+edx*1+ecx]
	sub	eax,edi
	rol	ecx,13
	add	ecx,ebp
	; 71
	mov	edx,DWORD [40+esp]
	or	eax,esi
	add	ebp,edx
	xor	eax,ecx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[2840853838+eax*1+ebp]
	sub	edx,esi
	rol	ebp,12
	add	ebp,ebx
	; 72
	mov	eax,DWORD [56+esp]
	or	edx,ecx
	add	ebx,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[2840853838+edx*1+ebx]
	sub	eax,ecx
	rol	ebx,5
	add	ebx,edi
	; 73
	mov	edx,DWORD [4+esp]
	or	eax,ebp
	add	edi,edx
	xor	eax,ebx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[2840853838+eax*1+edi]
	sub	edx,ebp
	rol	edi,12
	add	edi,esi
	; 74
	mov	eax,DWORD [12+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[2840853838+edx*1+esi]
	sub	eax,ebx
	rol	esi,13
	add	esi,ecx
	; 75
	mov	edx,DWORD [32+esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[2840853838+eax*1+ecx]
	sub	edx,edi
	rol	ecx,14
	add	ecx,ebp
	; 76
	mov	eax,DWORD [44+esp]
	or	edx,esi
	add	ebp,eax
	xor	edx,ecx
	mov	eax,-1
	rol	esi,10
	lea	ebp,[2840853838+edx*1+ebp]
	sub	eax,esi
	rol	ebp,11
	add	ebp,ebx
	; 77
	mov	edx,DWORD [24+esp]
	or	eax,ecx
	add	ebx,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[2840853838+eax*1+ebx]
	sub	edx,ecx
	rol	ebx,8
	add	ebx,edi
	; 78
	mov	eax,DWORD [60+esp]
	or	edx,ebp
	add	edi,eax
	xor	edx,ebx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[2840853838+edx*1+edi]
	sub	eax,ebp
	rol	edi,5
	add	edi,esi
	; 79
	mov	edx,DWORD [52+esp]
	or	eax,ebx
	add	esi,edx
	xor	eax,edi
	mov	edx,DWORD [128+esp]
	rol	ebx,10
	lea	esi,[2840853838+eax*1+esi]
	mov	DWORD [64+esp],ecx
	rol	esi,6
	add	esi,ecx
	mov	ecx,DWORD [edx]
	mov	DWORD [68+esp],esi
	mov	DWORD [72+esp],edi
	mov	esi,DWORD [4+edx]
	mov	DWORD [76+esp],ebx
	mov	edi,DWORD [8+edx]
	mov	DWORD [80+esp],ebp
	mov	ebx,DWORD [12+edx]
	mov	ebp,DWORD [16+edx]
	; 80
	mov	edx,-1
	sub	edx,ebx
	mov	eax,DWORD [20+esp]
	or	edx,edi
	add	ecx,eax
	xor	edx,esi
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1352829926+edx*1+ecx]
	sub	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 81
	mov	edx,DWORD [56+esp]
	or	eax,esi
	add	ebp,edx
	xor	eax,ecx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1352829926+eax*1+ebp]
	sub	edx,esi
	rol	ebp,9
	add	ebp,ebx
	; 82
	mov	eax,DWORD [28+esp]
	or	edx,ecx
	add	ebx,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1352829926+edx*1+ebx]
	sub	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 83
	mov	edx,DWORD [esp]
	or	eax,ebp
	add	edi,edx
	xor	eax,ebx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1352829926+eax*1+edi]
	sub	edx,ebp
	rol	edi,11
	add	edi,esi
	; 84
	mov	eax,DWORD [36+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1352829926+edx*1+esi]
	sub	eax,ebx
	rol	esi,13
	add	esi,ecx
	; 85
	mov	edx,DWORD [8+esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1352829926+eax*1+ecx]
	sub	edx,edi
	rol	ecx,15
	add	ecx,ebp
	; 86
	mov	eax,DWORD [44+esp]
	or	edx,esi
	add	ebp,eax
	xor	edx,ecx
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1352829926+edx*1+ebp]
	sub	eax,esi
	rol	ebp,15
	add	ebp,ebx
	; 87
	mov	edx,DWORD [16+esp]
	or	eax,ecx
	add	ebx,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1352829926+eax*1+ebx]
	sub	edx,ecx
	rol	ebx,5
	add	ebx,edi
	; 88
	mov	eax,DWORD [52+esp]
	or	edx,ebp
	add	edi,eax
	xor	edx,ebx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[1352829926+edx*1+edi]
	sub	eax,ebp
	rol	edi,7
	add	edi,esi
	; 89
	mov	edx,DWORD [24+esp]
	or	eax,ebx
	add	esi,edx
	xor	eax,edi
	mov	edx,-1
	rol	ebx,10
	lea	esi,[1352829926+eax*1+esi]
	sub	edx,ebx
	rol	esi,7
	add	esi,ecx
	; 90
	mov	eax,DWORD [60+esp]
	or	edx,edi
	add	ecx,eax
	xor	edx,esi
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1352829926+edx*1+ecx]
	sub	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 91
	mov	edx,DWORD [32+esp]
	or	eax,esi
	add	ebp,edx
	xor	eax,ecx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1352829926+eax*1+ebp]
	sub	edx,esi
	rol	ebp,11
	add	ebp,ebx
	; 92
	mov	eax,DWORD [4+esp]
	or	edx,ecx
	add	ebx,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1352829926+edx*1+ebx]
	sub	eax,ecx
	rol	ebx,14
	add	ebx,edi
	; 93
	mov	edx,DWORD [40+esp]
	or	eax,ebp
	add	edi,edx
	xor	eax,ebx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1352829926+eax*1+edi]
	sub	edx,ebp
	rol	edi,14
	add	edi,esi
	; 94
	mov	eax,DWORD [12+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1352829926+edx*1+esi]
	sub	eax,ebx
	rol	esi,12
	add	esi,ecx
	; 95
	mov	edx,DWORD [48+esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1352829926+eax*1+ecx]
	mov	eax,edi
	rol	ecx,6
	add	ecx,ebp
	; 96
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,9
	add	ebp,ebx
	; 97
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [44+esp]
	rol	ecx,10
	lea	ebx,[1548603684+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,13
	add	ebx,edi
	; 98
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [12+esp]
	rol	ebp,10
	lea	edi,[1548603684+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,15
	add	edi,esi
	; 99
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [28+esp]
	rol	ebx,10
	lea	esi,[1548603684+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,7
	add	esi,ecx
	; 100
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	edi,10
	lea	ecx,[1548603684+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,12
	add	ecx,ebp
	; 101
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [52+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,8
	add	ebp,ebx
	; 102
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [20+esp]
	rol	ecx,10
	lea	ebx,[1548603684+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 103
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [40+esp]
	rol	ebp,10
	lea	edi,[1548603684+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,11
	add	edi,esi
	; 104
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	ebx,10
	lea	esi,[1548603684+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,7
	add	esi,ecx
	; 105
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [60+esp]
	rol	edi,10
	lea	ecx,[1548603684+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,7
	add	ecx,ebp
	; 106
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [32+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,12
	add	ebp,ebx
	; 107
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [48+esp]
	rol	ecx,10
	lea	ebx,[1548603684+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,7
	add	ebx,edi
	; 108
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [16+esp]
	rol	ebp,10
	lea	edi,[1548603684+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,6
	add	edi,esi
	; 109
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [36+esp]
	rol	ebx,10
	lea	esi,[1548603684+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,15
	add	esi,ecx
	; 110
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	edi,10
	lea	ecx,[1548603684+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,13
	add	ecx,ebp
	; 111
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [8+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	sub	edx,ecx
	rol	ebp,11
	add	ebp,ebx
	; 112
	mov	eax,DWORD [60+esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1836072691+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,9
	add	ebx,edi
	; 113
	mov	edx,DWORD [20+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1836072691+eax*1+edi]
	sub	edx,ebx
	rol	edi,7
	add	edi,esi
	; 114
	mov	eax,DWORD [4+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1836072691+edx*1+esi]
	sub	eax,edi
	rol	esi,15
	add	esi,ecx
	; 115
	mov	edx,DWORD [12+esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1836072691+eax*1+ecx]
	sub	edx,esi
	rol	ecx,11
	add	ecx,ebp
	; 116
	mov	eax,DWORD [28+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1836072691+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,8
	add	ebp,ebx
	; 117
	mov	edx,DWORD [56+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1836072691+eax*1+ebx]
	sub	edx,ebp
	rol	ebx,6
	add	ebx,edi
	; 118
	mov	eax,DWORD [24+esp]
	or	edx,ebx
	add	edi,eax
	xor	edx,ecx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[1836072691+edx*1+edi]
	sub	eax,ebx
	rol	edi,6
	add	edi,esi
	; 119
	mov	edx,DWORD [36+esp]
	or	eax,edi
	add	esi,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ebx,10
	lea	esi,[1836072691+eax*1+esi]
	sub	edx,edi
	rol	esi,14
	add	esi,ecx
	; 120
	mov	eax,DWORD [44+esp]
	or	edx,esi
	add	ecx,eax
	xor	edx,ebx
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1836072691+edx*1+ecx]
	sub	eax,esi
	rol	ecx,12
	add	ecx,ebp
	; 121
	mov	edx,DWORD [32+esp]
	or	eax,ecx
	add	ebp,edx
	xor	eax,edi
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1836072691+eax*1+ebp]
	sub	edx,ecx
	rol	ebp,13
	add	ebp,ebx
	; 122
	mov	eax,DWORD [48+esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1836072691+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,5
	add	ebx,edi
	; 123
	mov	edx,DWORD [8+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1836072691+eax*1+edi]
	sub	edx,ebx
	rol	edi,14
	add	edi,esi
	; 124
	mov	eax,DWORD [40+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1836072691+edx*1+esi]
	sub	eax,edi
	rol	esi,13
	add	esi,ecx
	; 125
	mov	edx,DWORD [esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1836072691+eax*1+ecx]
	sub	edx,esi
	rol	ecx,13
	add	ecx,ebp
	; 126
	mov	eax,DWORD [16+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1836072691+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,7
	add	ebp,ebx
	; 127
	mov	edx,DWORD [52+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,DWORD [32+esp]
	rol	ecx,10
	lea	ebx,[1836072691+eax*1+ebx]
	mov	eax,-1
	rol	ebx,5
	add	ebx,edi
	; 128
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	ebp,10
	lea	edi,[2053994217+edx*1+edi]
	mov	edx,-1
	rol	edi,15
	add	edi,esi
	; 129
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [16+esp]
	rol	ebx,10
	lea	esi,[2053994217+eax*1+esi]
	mov	eax,-1
	rol	esi,5
	add	esi,ecx
	; 130
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	edi,10
	lea	ecx,[2053994217+edx*1+ecx]
	mov	edx,-1
	rol	ecx,8
	add	ecx,ebp
	; 131
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,DWORD [12+esp]
	rol	esi,10
	lea	ebp,[2053994217+eax*1+ebp]
	mov	eax,-1
	rol	ebp,11
	add	ebp,ebx
	; 132
	add	ebx,edx
	mov	edx,ecx
	sub	eax,ebp
	and	edx,ebp
	and	eax,esi
	or	edx,eax
	mov	eax,DWORD [44+esp]
	rol	ecx,10
	lea	ebx,[2053994217+edx*1+ebx]
	mov	edx,-1
	rol	ebx,14
	add	ebx,edi
	; 133
	add	edi,eax
	mov	eax,ebp
	sub	edx,ebx
	and	eax,ebx
	and	edx,ecx
	or	eax,edx
	mov	edx,DWORD [60+esp]
	rol	ebp,10
	lea	edi,[2053994217+eax*1+edi]
	mov	eax,-1
	rol	edi,14
	add	edi,esi
	; 134
	add	esi,edx
	mov	edx,ebx
	sub	eax,edi
	and	edx,edi
	and	eax,ebp
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	ebx,10
	lea	esi,[2053994217+edx*1+esi]
	mov	edx,-1
	rol	esi,6
	add	esi,ecx
	; 135
	add	ecx,eax
	mov	eax,edi
	sub	edx,esi
	and	eax,esi
	and	edx,ebx
	or	eax,edx
	mov	edx,DWORD [20+esp]
	rol	edi,10
	lea	ecx,[2053994217+eax*1+ecx]
	mov	eax,-1
	rol	ecx,14
	add	ecx,ebp
	; 136
	add	ebp,edx
	mov	edx,esi
	sub	eax,ecx
	and	edx,ecx
	and	eax,edi
	or	edx,eax
	mov	eax,DWORD [48+esp]
	rol	esi,10
	lea	ebp,[2053994217+edx*1+ebp]
	mov	edx,-1
	rol	ebp,6
	add	ebp,ebx
	; 137
	add	ebx,eax
	mov	eax,ecx
	sub	edx,ebp
	and	eax,ebp
	and	edx,esi
	or	eax,edx
	mov	edx,DWORD [8+esp]
	rol	ecx,10
	lea	ebx,[2053994217+eax*1+ebx]
	mov	eax,-1
	rol	ebx,9
	add	ebx,edi
	; 138
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [52+esp]
	rol	ebp,10
	lea	edi,[2053994217+edx*1+edi]
	mov	edx,-1
	rol	edi,12
	add	edi,esi
	; 139
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [36+esp]
	rol	ebx,10
	lea	esi,[2053994217+eax*1+esi]
	mov	eax,-1
	rol	esi,9
	add	esi,ecx
	; 140
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [28+esp]
	rol	edi,10
	lea	ecx,[2053994217+edx*1+ecx]
	mov	edx,-1
	rol	ecx,12
	add	ecx,ebp
	; 141
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,DWORD [40+esp]
	rol	esi,10
	lea	ebp,[2053994217+eax*1+ebp]
	mov	eax,-1
	rol	ebp,5
	add	ebp,ebx
	; 142
	add	ebx,edx
	mov	edx,ecx
	sub	eax,ebp
	and	edx,ebp
	and	eax,esi
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	ecx,10
	lea	ebx,[2053994217+edx*1+ebx]
	mov	edx,-1
	rol	ebx,15
	add	ebx,edi
	; 143
	add	edi,eax
	mov	eax,ebp
	sub	edx,ebx
	and	eax,ebx
	and	edx,ecx
	or	edx,eax
	mov	eax,ebx
	rol	ebp,10
	lea	edi,[2053994217+edx*1+edi]
	xor	eax,ebp
	rol	edi,8
	add	edi,esi
	; 144
	mov	edx,DWORD [48+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,8
	add	esi,ecx
	; 145
	xor	eax,ebx
	mov	edx,DWORD [60+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,esi
	rol	edi,10
	add	ecx,edx
	xor	eax,edi
	rol	ecx,5
	add	ecx,ebp
	; 146
	mov	edx,DWORD [40+esp]
	xor	eax,ecx
	add	ebp,edx
	rol	esi,10
	add	ebp,eax
	mov	eax,ecx
	rol	ebp,12
	add	ebp,ebx
	; 147
	xor	eax,esi
	mov	edx,DWORD [16+esp]
	xor	eax,ebp
	add	ebx,eax
	mov	eax,ebp
	rol	ecx,10
	add	ebx,edx
	xor	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 148
	mov	edx,DWORD [4+esp]
	xor	eax,ebx
	add	edi,edx
	rol	ebp,10
	add	edi,eax
	mov	eax,ebx
	rol	edi,12
	add	edi,esi
	; 149
	xor	eax,ebp
	mov	edx,DWORD [20+esp]
	xor	eax,edi
	add	esi,eax
	mov	eax,edi
	rol	ebx,10
	add	esi,edx
	xor	eax,ebx
	rol	esi,5
	add	esi,ecx
	; 150
	mov	edx,DWORD [32+esp]
	xor	eax,esi
	add	ecx,edx
	rol	edi,10
	add	ecx,eax
	mov	eax,esi
	rol	ecx,14
	add	ecx,ebp
	; 151
	xor	eax,edi
	mov	edx,DWORD [28+esp]
	xor	eax,ecx
	add	ebp,eax
	mov	eax,ecx
	rol	esi,10
	add	ebp,edx
	xor	eax,esi
	rol	ebp,6
	add	ebp,ebx
	; 152
	mov	edx,DWORD [24+esp]
	xor	eax,ebp
	add	ebx,edx
	rol	ecx,10
	add	ebx,eax
	mov	eax,ebp
	rol	ebx,8
	add	ebx,edi
	; 153
	xor	eax,ecx
	mov	edx,DWORD [8+esp]
	xor	eax,ebx
	add	edi,eax
	mov	eax,ebx
	rol	ebp,10
	add	edi,edx
	xor	eax,ebp
	rol	edi,13
	add	edi,esi
	; 154
	mov	edx,DWORD [52+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,6
	add	esi,ecx
	; 155
	xor	eax,ebx
	mov	edx,DWORD [56+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,esi
	rol	edi,10
	add	ecx,edx
	xor	eax,edi
	rol	ecx,5
	add	ecx,ebp
	; 156
	mov	edx,DWORD [esp]
	xor	eax,ecx
	add	ebp,edx
	rol	esi,10
	add	ebp,eax
	mov	eax,ecx
	rol	ebp,15
	add	ebp,ebx
	; 157
	xor	eax,esi
	mov	edx,DWORD [12+esp]
	xor	eax,ebp
	add	ebx,eax
	mov	eax,ebp
	rol	ecx,10
	add	ebx,edx
	xor	eax,ecx
	rol	ebx,13
	add	ebx,edi
	; 158
	mov	edx,DWORD [36+esp]
	xor	eax,ebx
	add	edi,edx
	rol	ebp,10
	add	edi,eax
	mov	eax,ebx
	rol	edi,11
	add	edi,esi
	; 159
	xor	eax,ebp
	mov	edx,DWORD [44+esp]
	xor	eax,edi
	add	esi,eax
	rol	ebx,10
	add	esi,edx
	mov	edx,DWORD [128+esp]
	rol	esi,11
	add	esi,ecx
	mov	eax,DWORD [4+edx]
	add	ebx,eax
	mov	eax,DWORD [72+esp]
	add	ebx,eax
	mov	eax,DWORD [8+edx]
	add	ebp,eax
	mov	eax,DWORD [76+esp]
	add	ebp,eax
	mov	eax,DWORD [12+edx]
	add	ecx,eax
	mov	eax,DWORD [80+esp]
	add	ecx,eax
	mov	eax,DWORD [16+edx]
	add	esi,eax
	mov	eax,DWORD [64+esp]
	add	esi,eax
	mov	eax,DWORD [edx]
	add	edi,eax
	mov	eax,DWORD [68+esp]
	add	edi,eax
	mov	eax,DWORD [136+esp]
	mov	DWORD [edx],ebx
	mov	DWORD [4+edx],ebp
	mov	DWORD [8+edx],ecx
	sub	eax,1
	mov	DWORD [12+edx],esi
	mov	DWORD [16+edx],edi
	jle	NEAR L$001get_out
	mov	DWORD [136+esp],eax
	mov	edi,ecx
	mov	eax,DWORD [132+esp]
	mov	ecx,ebx
	add	eax,64
	mov	esi,ebp
	mov	DWORD [132+esp],eax
	jmp	NEAR L$000start
L$001get_out:
	add	esp,108
	pop	ebx
	pop	ebp
	pop	edi
	pop	esi
	ret
                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/sha/                                      0000775 0000000 0000000 00000000000 14746647661 0023523 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/sha/sha1-586.asm                          0000664 0000000 0000000 00000177230 14746647661 0025413 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_sha1_block_data_order
align	16
_sha1_block_data_order:
L$_sha1_block_data_order_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	esi,[_OPENSSL_ia32cap_P]
	lea	ebp,[(L$K_XX_XX-L$000pic_point)+ebp]
	mov	eax,DWORD [esi]
	mov	edx,DWORD [4+esi]
	test	edx,512
	jz	NEAR L$001x86
	mov	ecx,DWORD [8+esi]
	test	eax,16777216
	jz	NEAR L$001x86
	test	ecx,536870912
	jnz	NEAR L$shaext_shortcut
	and	edx,268435456
	and	eax,1073741824
	or	eax,edx
	cmp	eax,1342177280
	je	NEAR L$avx_shortcut
	jmp	NEAR L$ssse3_shortcut
align	16
L$001x86:
	mov	ebp,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	eax,DWORD [28+esp]
	sub	esp,76
	shl	eax,6
	add	eax,esi
	mov	DWORD [104+esp],eax
	mov	edi,DWORD [16+ebp]
	jmp	NEAR L$002loop
align	16
L$002loop:
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [16+esp],eax
	mov	DWORD [20+esp],ebx
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [32+esp],eax
	mov	DWORD [36+esp],ebx
	mov	DWORD [40+esp],ecx
	mov	DWORD [44+esp],edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [48+esp],eax
	mov	DWORD [52+esp],ebx
	mov	DWORD [56+esp],ecx
	mov	DWORD [60+esp],edx
	mov	DWORD [100+esp],esi
	mov	eax,DWORD [ebp]
	mov	ebx,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	; 00_15 0
	mov	esi,ecx
	mov	ebp,eax
	rol	ebp,5
	xor	esi,edx
	add	ebp,edi
	mov	edi,DWORD [esp]
	and	esi,ebx
	ror	ebx,2
	xor	esi,edx
	lea	ebp,[1518500249+edi*1+ebp]
	add	ebp,esi
	; 00_15 1
	mov	edi,ebx
	mov	esi,ebp
	rol	ebp,5
	xor	edi,ecx
	add	ebp,edx
	mov	edx,DWORD [4+esp]
	and	edi,eax
	ror	eax,2
	xor	edi,ecx
	lea	ebp,[1518500249+edx*1+ebp]
	add	ebp,edi
	; 00_15 2
	mov	edx,eax
	mov	edi,ebp
	rol	ebp,5
	xor	edx,ebx
	add	ebp,ecx
	mov	ecx,DWORD [8+esp]
	and	edx,esi
	ror	esi,2
	xor	edx,ebx
	lea	ebp,[1518500249+ecx*1+ebp]
	add	ebp,edx
	; 00_15 3
	mov	ecx,esi
	mov	edx,ebp
	rol	ebp,5
	xor	ecx,eax
	add	ebp,ebx
	mov	ebx,DWORD [12+esp]
	and	ecx,edi
	ror	edi,2
	xor	ecx,eax
	lea	ebp,[1518500249+ebx*1+ebp]
	add	ebp,ecx
	; 00_15 4
	mov	ebx,edi
	mov	ecx,ebp
	rol	ebp,5
	xor	ebx,esi
	add	ebp,eax
	mov	eax,DWORD [16+esp]
	and	ebx,edx
	ror	edx,2
	xor	ebx,esi
	lea	ebp,[1518500249+eax*1+ebp]
	add	ebp,ebx
	; 00_15 5
	mov	eax,edx
	mov	ebx,ebp
	rol	ebp,5
	xor	eax,edi
	add	ebp,esi
	mov	esi,DWORD [20+esp]
	and	eax,ecx
	ror	ecx,2
	xor	eax,edi
	lea	ebp,[1518500249+esi*1+ebp]
	add	ebp,eax
	; 00_15 6
	mov	esi,ecx
	mov	eax,ebp
	rol	ebp,5
	xor	esi,edx
	add	ebp,edi
	mov	edi,DWORD [24+esp]
	and	esi,ebx
	ror	ebx,2
	xor	esi,edx
	lea	ebp,[1518500249+edi*1+ebp]
	add	ebp,esi
	; 00_15 7
	mov	edi,ebx
	mov	esi,ebp
	rol	ebp,5
	xor	edi,ecx
	add	ebp,edx
	mov	edx,DWORD [28+esp]
	and	edi,eax
	ror	eax,2
	xor	edi,ecx
	lea	ebp,[1518500249+edx*1+ebp]
	add	ebp,edi
	; 00_15 8
	mov	edx,eax
	mov	edi,ebp
	rol	ebp,5
	xor	edx,ebx
	add	ebp,ecx
	mov	ecx,DWORD [32+esp]
	and	edx,esi
	ror	esi,2
	xor	edx,ebx
	lea	ebp,[1518500249+ecx*1+ebp]
	add	ebp,edx
	; 00_15 9
	mov	ecx,esi
	mov	edx,ebp
	rol	ebp,5
	xor	ecx,eax
	add	ebp,ebx
	mov	ebx,DWORD [36+esp]
	and	ecx,edi
	ror	edi,2
	xor	ecx,eax
	lea	ebp,[1518500249+ebx*1+ebp]
	add	ebp,ecx
	; 00_15 10
	mov	ebx,edi
	mov	ecx,ebp
	rol	ebp,5
	xor	ebx,esi
	add	ebp,eax
	mov	eax,DWORD [40+esp]
	and	ebx,edx
	ror	edx,2
	xor	ebx,esi
	lea	ebp,[1518500249+eax*1+ebp]
	add	ebp,ebx
	; 00_15 11
	mov	eax,edx
	mov	ebx,ebp
	rol	ebp,5
	xor	eax,edi
	add	ebp,esi
	mov	esi,DWORD [44+esp]
	and	eax,ecx
	ror	ecx,2
	xor	eax,edi
	lea	ebp,[1518500249+esi*1+ebp]
	add	ebp,eax
	; 00_15 12
	mov	esi,ecx
	mov	eax,ebp
	rol	ebp,5
	xor	esi,edx
	add	ebp,edi
	mov	edi,DWORD [48+esp]
	and	esi,ebx
	ror	ebx,2
	xor	esi,edx
	lea	ebp,[1518500249+edi*1+ebp]
	add	ebp,esi
	; 00_15 13
	mov	edi,ebx
	mov	esi,ebp
	rol	ebp,5
	xor	edi,ecx
	add	ebp,edx
	mov	edx,DWORD [52+esp]
	and	edi,eax
	ror	eax,2
	xor	edi,ecx
	lea	ebp,[1518500249+edx*1+ebp]
	add	ebp,edi
	; 00_15 14
	mov	edx,eax
	mov	edi,ebp
	rol	ebp,5
	xor	edx,ebx
	add	ebp,ecx
	mov	ecx,DWORD [56+esp]
	and	edx,esi
	ror	esi,2
	xor	edx,ebx
	lea	ebp,[1518500249+ecx*1+ebp]
	add	ebp,edx
	; 00_15 15
	mov	ecx,esi
	mov	edx,ebp
	rol	ebp,5
	xor	ecx,eax
	add	ebp,ebx
	mov	ebx,DWORD [60+esp]
	and	ecx,edi
	ror	edi,2
	xor	ecx,eax
	lea	ebp,[1518500249+ebx*1+ebp]
	mov	ebx,DWORD [esp]
	add	ecx,ebp
	; 16_19 16
	mov	ebp,edi
	xor	ebx,DWORD [8+esp]
	xor	ebp,esi
	xor	ebx,DWORD [32+esp]
	and	ebp,edx
	xor	ebx,DWORD [52+esp]
	rol	ebx,1
	xor	ebp,esi
	add	eax,ebp
	mov	ebp,ecx
	ror	edx,2
	mov	DWORD [esp],ebx
	rol	ebp,5
	lea	ebx,[1518500249+eax*1+ebx]
	mov	eax,DWORD [4+esp]
	add	ebx,ebp
	; 16_19 17
	mov	ebp,edx
	xor	eax,DWORD [12+esp]
	xor	ebp,edi
	xor	eax,DWORD [36+esp]
	and	ebp,ecx
	xor	eax,DWORD [56+esp]
	rol	eax,1
	xor	ebp,edi
	add	esi,ebp
	mov	ebp,ebx
	ror	ecx,2
	mov	DWORD [4+esp],eax
	rol	ebp,5
	lea	eax,[1518500249+esi*1+eax]
	mov	esi,DWORD [8+esp]
	add	eax,ebp
	; 16_19 18
	mov	ebp,ecx
	xor	esi,DWORD [16+esp]
	xor	ebp,edx
	xor	esi,DWORD [40+esp]
	and	ebp,ebx
	xor	esi,DWORD [60+esp]
	rol	esi,1
	xor	ebp,edx
	add	edi,ebp
	mov	ebp,eax
	ror	ebx,2
	mov	DWORD [8+esp],esi
	rol	ebp,5
	lea	esi,[1518500249+edi*1+esi]
	mov	edi,DWORD [12+esp]
	add	esi,ebp
	; 16_19 19
	mov	ebp,ebx
	xor	edi,DWORD [20+esp]
	xor	ebp,ecx
	xor	edi,DWORD [44+esp]
	and	ebp,eax
	xor	edi,DWORD [esp]
	rol	edi,1
	xor	ebp,ecx
	add	edx,ebp
	mov	ebp,esi
	ror	eax,2
	mov	DWORD [12+esp],edi
	rol	ebp,5
	lea	edi,[1518500249+edx*1+edi]
	mov	edx,DWORD [16+esp]
	add	edi,ebp
	; 20_39 20
	mov	ebp,esi
	xor	edx,DWORD [24+esp]
	xor	ebp,eax
	xor	edx,DWORD [48+esp]
	xor	ebp,ebx
	xor	edx,DWORD [4+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [16+esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [20+esp]
	add	edx,ebp
	; 20_39 21
	mov	ebp,edi
	xor	ecx,DWORD [28+esp]
	xor	ebp,esi
	xor	ecx,DWORD [52+esp]
	xor	ebp,eax
	xor	ecx,DWORD [8+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [20+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [24+esp]
	add	ecx,ebp
	; 20_39 22
	mov	ebp,edx
	xor	ebx,DWORD [32+esp]
	xor	ebp,edi
	xor	ebx,DWORD [56+esp]
	xor	ebp,esi
	xor	ebx,DWORD [12+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [24+esp],ebx
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,DWORD [28+esp]
	add	ebx,ebp
	; 20_39 23
	mov	ebp,ecx
	xor	eax,DWORD [36+esp]
	xor	ebp,edx
	xor	eax,DWORD [60+esp]
	xor	ebp,edi
	xor	eax,DWORD [16+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [28+esp],eax
	lea	eax,[1859775393+esi*1+eax]
	mov	esi,DWORD [32+esp]
	add	eax,ebp
	; 20_39 24
	mov	ebp,ebx
	xor	esi,DWORD [40+esp]
	xor	ebp,ecx
	xor	esi,DWORD [esp]
	xor	ebp,edx
	xor	esi,DWORD [20+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [32+esp],esi
	lea	esi,[1859775393+edi*1+esi]
	mov	edi,DWORD [36+esp]
	add	esi,ebp
	; 20_39 25
	mov	ebp,eax
	xor	edi,DWORD [44+esp]
	xor	ebp,ebx
	xor	edi,DWORD [4+esp]
	xor	ebp,ecx
	xor	edi,DWORD [24+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [36+esp],edi
	lea	edi,[1859775393+edx*1+edi]
	mov	edx,DWORD [40+esp]
	add	edi,ebp
	; 20_39 26
	mov	ebp,esi
	xor	edx,DWORD [48+esp]
	xor	ebp,eax
	xor	edx,DWORD [8+esp]
	xor	ebp,ebx
	xor	edx,DWORD [28+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [40+esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [44+esp]
	add	edx,ebp
	; 20_39 27
	mov	ebp,edi
	xor	ecx,DWORD [52+esp]
	xor	ebp,esi
	xor	ecx,DWORD [12+esp]
	xor	ebp,eax
	xor	ecx,DWORD [32+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [44+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [48+esp]
	add	ecx,ebp
	; 20_39 28
	mov	ebp,edx
	xor	ebx,DWORD [56+esp]
	xor	ebp,edi
	xor	ebx,DWORD [16+esp]
	xor	ebp,esi
	xor	ebx,DWORD [36+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [48+esp],ebx
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,DWORD [52+esp]
	add	ebx,ebp
	; 20_39 29
	mov	ebp,ecx
	xor	eax,DWORD [60+esp]
	xor	ebp,edx
	xor	eax,DWORD [20+esp]
	xor	ebp,edi
	xor	eax,DWORD [40+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [52+esp],eax
	lea	eax,[1859775393+esi*1+eax]
	mov	esi,DWORD [56+esp]
	add	eax,ebp
	; 20_39 30
	mov	ebp,ebx
	xor	esi,DWORD [esp]
	xor	ebp,ecx
	xor	esi,DWORD [24+esp]
	xor	ebp,edx
	xor	esi,DWORD [44+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [56+esp],esi
	lea	esi,[1859775393+edi*1+esi]
	mov	edi,DWORD [60+esp]
	add	esi,ebp
	; 20_39 31
	mov	ebp,eax
	xor	edi,DWORD [4+esp]
	xor	ebp,ebx
	xor	edi,DWORD [28+esp]
	xor	ebp,ecx
	xor	edi,DWORD [48+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [60+esp],edi
	lea	edi,[1859775393+edx*1+edi]
	mov	edx,DWORD [esp]
	add	edi,ebp
	; 20_39 32
	mov	ebp,esi
	xor	edx,DWORD [8+esp]
	xor	ebp,eax
	xor	edx,DWORD [32+esp]
	xor	ebp,ebx
	xor	edx,DWORD [52+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [4+esp]
	add	edx,ebp
	; 20_39 33
	mov	ebp,edi
	xor	ecx,DWORD [12+esp]
	xor	ebp,esi
	xor	ecx,DWORD [36+esp]
	xor	ebp,eax
	xor	ecx,DWORD [56+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [4+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [8+esp]
	add	ecx,ebp
	; 20_39 34
	mov	ebp,edx
	xor	ebx,DWORD [16+esp]
	xor	ebp,edi
	xor	ebx,DWORD [40+esp]
	xor	ebp,esi
	xor	ebx,DWORD [60+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [8+esp],ebx
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,DWORD [12+esp]
	add	ebx,ebp
	; 20_39 35
	mov	ebp,ecx
	xor	eax,DWORD [20+esp]
	xor	ebp,edx
	xor	eax,DWORD [44+esp]
	xor	ebp,edi
	xor	eax,DWORD [esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [12+esp],eax
	lea	eax,[1859775393+esi*1+eax]
	mov	esi,DWORD [16+esp]
	add	eax,ebp
	; 20_39 36
	mov	ebp,ebx
	xor	esi,DWORD [24+esp]
	xor	ebp,ecx
	xor	esi,DWORD [48+esp]
	xor	ebp,edx
	xor	esi,DWORD [4+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [16+esp],esi
	lea	esi,[1859775393+edi*1+esi]
	mov	edi,DWORD [20+esp]
	add	esi,ebp
	; 20_39 37
	mov	ebp,eax
	xor	edi,DWORD [28+esp]
	xor	ebp,ebx
	xor	edi,DWORD [52+esp]
	xor	ebp,ecx
	xor	edi,DWORD [8+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [20+esp],edi
	lea	edi,[1859775393+edx*1+edi]
	mov	edx,DWORD [24+esp]
	add	edi,ebp
	; 20_39 38
	mov	ebp,esi
	xor	edx,DWORD [32+esp]
	xor	ebp,eax
	xor	edx,DWORD [56+esp]
	xor	ebp,ebx
	xor	edx,DWORD [12+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [24+esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [28+esp]
	add	edx,ebp
	; 20_39 39
	mov	ebp,edi
	xor	ecx,DWORD [36+esp]
	xor	ebp,esi
	xor	ecx,DWORD [60+esp]
	xor	ebp,eax
	xor	ecx,DWORD [16+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [28+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [32+esp]
	add	ecx,ebp
	; 40_59 40
	mov	ebp,edi
	xor	ebx,DWORD [40+esp]
	xor	ebp,esi
	xor	ebx,DWORD [esp]
	and	ebp,edx
	xor	ebx,DWORD [20+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [32+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [36+esp]
	add	ebx,ebp
	; 40_59 41
	mov	ebp,edx
	xor	eax,DWORD [44+esp]
	xor	ebp,edi
	xor	eax,DWORD [4+esp]
	and	ebp,ecx
	xor	eax,DWORD [24+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [36+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [40+esp]
	add	eax,ebp
	; 40_59 42
	mov	ebp,ecx
	xor	esi,DWORD [48+esp]
	xor	ebp,edx
	xor	esi,DWORD [8+esp]
	and	ebp,ebx
	xor	esi,DWORD [28+esp]
	rol	esi,1
	add	ebp,edi
	ror	ebx,2
	mov	edi,eax
	rol	edi,5
	mov	DWORD [40+esp],esi
	lea	esi,[2400959708+ebp*1+esi]
	mov	ebp,ecx
	add	esi,edi
	and	ebp,edx
	mov	edi,DWORD [44+esp]
	add	esi,ebp
	; 40_59 43
	mov	ebp,ebx
	xor	edi,DWORD [52+esp]
	xor	ebp,ecx
	xor	edi,DWORD [12+esp]
	and	ebp,eax
	xor	edi,DWORD [32+esp]
	rol	edi,1
	add	ebp,edx
	ror	eax,2
	mov	edx,esi
	rol	edx,5
	mov	DWORD [44+esp],edi
	lea	edi,[2400959708+ebp*1+edi]
	mov	ebp,ebx
	add	edi,edx
	and	ebp,ecx
	mov	edx,DWORD [48+esp]
	add	edi,ebp
	; 40_59 44
	mov	ebp,eax
	xor	edx,DWORD [56+esp]
	xor	ebp,ebx
	xor	edx,DWORD [16+esp]
	and	ebp,esi
	xor	edx,DWORD [36+esp]
	rol	edx,1
	add	ebp,ecx
	ror	esi,2
	mov	ecx,edi
	rol	ecx,5
	mov	DWORD [48+esp],edx
	lea	edx,[2400959708+ebp*1+edx]
	mov	ebp,eax
	add	edx,ecx
	and	ebp,ebx
	mov	ecx,DWORD [52+esp]
	add	edx,ebp
	; 40_59 45
	mov	ebp,esi
	xor	ecx,DWORD [60+esp]
	xor	ebp,eax
	xor	ecx,DWORD [20+esp]
	and	ebp,edi
	xor	ecx,DWORD [40+esp]
	rol	ecx,1
	add	ebp,ebx
	ror	edi,2
	mov	ebx,edx
	rol	ebx,5
	mov	DWORD [52+esp],ecx
	lea	ecx,[2400959708+ebp*1+ecx]
	mov	ebp,esi
	add	ecx,ebx
	and	ebp,eax
	mov	ebx,DWORD [56+esp]
	add	ecx,ebp
	; 40_59 46
	mov	ebp,edi
	xor	ebx,DWORD [esp]
	xor	ebp,esi
	xor	ebx,DWORD [24+esp]
	and	ebp,edx
	xor	ebx,DWORD [44+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [56+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [60+esp]
	add	ebx,ebp
	; 40_59 47
	mov	ebp,edx
	xor	eax,DWORD [4+esp]
	xor	ebp,edi
	xor	eax,DWORD [28+esp]
	and	ebp,ecx
	xor	eax,DWORD [48+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [60+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [esp]
	add	eax,ebp
	; 40_59 48
	mov	ebp,ecx
	xor	esi,DWORD [8+esp]
	xor	ebp,edx
	xor	esi,DWORD [32+esp]
	and	ebp,ebx
	xor	esi,DWORD [52+esp]
	rol	esi,1
	add	ebp,edi
	ror	ebx,2
	mov	edi,eax
	rol	edi,5
	mov	DWORD [esp],esi
	lea	esi,[2400959708+ebp*1+esi]
	mov	ebp,ecx
	add	esi,edi
	and	ebp,edx
	mov	edi,DWORD [4+esp]
	add	esi,ebp
	; 40_59 49
	mov	ebp,ebx
	xor	edi,DWORD [12+esp]
	xor	ebp,ecx
	xor	edi,DWORD [36+esp]
	and	ebp,eax
	xor	edi,DWORD [56+esp]
	rol	edi,1
	add	ebp,edx
	ror	eax,2
	mov	edx,esi
	rol	edx,5
	mov	DWORD [4+esp],edi
	lea	edi,[2400959708+ebp*1+edi]
	mov	ebp,ebx
	add	edi,edx
	and	ebp,ecx
	mov	edx,DWORD [8+esp]
	add	edi,ebp
	; 40_59 50
	mov	ebp,eax
	xor	edx,DWORD [16+esp]
	xor	ebp,ebx
	xor	edx,DWORD [40+esp]
	and	ebp,esi
	xor	edx,DWORD [60+esp]
	rol	edx,1
	add	ebp,ecx
	ror	esi,2
	mov	ecx,edi
	rol	ecx,5
	mov	DWORD [8+esp],edx
	lea	edx,[2400959708+ebp*1+edx]
	mov	ebp,eax
	add	edx,ecx
	and	ebp,ebx
	mov	ecx,DWORD [12+esp]
	add	edx,ebp
	; 40_59 51
	mov	ebp,esi
	xor	ecx,DWORD [20+esp]
	xor	ebp,eax
	xor	ecx,DWORD [44+esp]
	and	ebp,edi
	xor	ecx,DWORD [esp]
	rol	ecx,1
	add	ebp,ebx
	ror	edi,2
	mov	ebx,edx
	rol	ebx,5
	mov	DWORD [12+esp],ecx
	lea	ecx,[2400959708+ebp*1+ecx]
	mov	ebp,esi
	add	ecx,ebx
	and	ebp,eax
	mov	ebx,DWORD [16+esp]
	add	ecx,ebp
	; 40_59 52
	mov	ebp,edi
	xor	ebx,DWORD [24+esp]
	xor	ebp,esi
	xor	ebx,DWORD [48+esp]
	and	ebp,edx
	xor	ebx,DWORD [4+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [16+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [20+esp]
	add	ebx,ebp
	; 40_59 53
	mov	ebp,edx
	xor	eax,DWORD [28+esp]
	xor	ebp,edi
	xor	eax,DWORD [52+esp]
	and	ebp,ecx
	xor	eax,DWORD [8+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [20+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [24+esp]
	add	eax,ebp
	; 40_59 54
	mov	ebp,ecx
	xor	esi,DWORD [32+esp]
	xor	ebp,edx
	xor	esi,DWORD [56+esp]
	and	ebp,ebx
	xor	esi,DWORD [12+esp]
	rol	esi,1
	add	ebp,edi
	ror	ebx,2
	mov	edi,eax
	rol	edi,5
	mov	DWORD [24+esp],esi
	lea	esi,[2400959708+ebp*1+esi]
	mov	ebp,ecx
	add	esi,edi
	and	ebp,edx
	mov	edi,DWORD [28+esp]
	add	esi,ebp
	; 40_59 55
	mov	ebp,ebx
	xor	edi,DWORD [36+esp]
	xor	ebp,ecx
	xor	edi,DWORD [60+esp]
	and	ebp,eax
	xor	edi,DWORD [16+esp]
	rol	edi,1
	add	ebp,edx
	ror	eax,2
	mov	edx,esi
	rol	edx,5
	mov	DWORD [28+esp],edi
	lea	edi,[2400959708+ebp*1+edi]
	mov	ebp,ebx
	add	edi,edx
	and	ebp,ecx
	mov	edx,DWORD [32+esp]
	add	edi,ebp
	; 40_59 56
	mov	ebp,eax
	xor	edx,DWORD [40+esp]
	xor	ebp,ebx
	xor	edx,DWORD [esp]
	and	ebp,esi
	xor	edx,DWORD [20+esp]
	rol	edx,1
	add	ebp,ecx
	ror	esi,2
	mov	ecx,edi
	rol	ecx,5
	mov	DWORD [32+esp],edx
	lea	edx,[2400959708+ebp*1+edx]
	mov	ebp,eax
	add	edx,ecx
	and	ebp,ebx
	mov	ecx,DWORD [36+esp]
	add	edx,ebp
	; 40_59 57
	mov	ebp,esi
	xor	ecx,DWORD [44+esp]
	xor	ebp,eax
	xor	ecx,DWORD [4+esp]
	and	ebp,edi
	xor	ecx,DWORD [24+esp]
	rol	ecx,1
	add	ebp,ebx
	ror	edi,2
	mov	ebx,edx
	rol	ebx,5
	mov	DWORD [36+esp],ecx
	lea	ecx,[2400959708+ebp*1+ecx]
	mov	ebp,esi
	add	ecx,ebx
	and	ebp,eax
	mov	ebx,DWORD [40+esp]
	add	ecx,ebp
	; 40_59 58
	mov	ebp,edi
	xor	ebx,DWORD [48+esp]
	xor	ebp,esi
	xor	ebx,DWORD [8+esp]
	and	ebp,edx
	xor	ebx,DWORD [28+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [40+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [44+esp]
	add	ebx,ebp
	; 40_59 59
	mov	ebp,edx
	xor	eax,DWORD [52+esp]
	xor	ebp,edi
	xor	eax,DWORD [12+esp]
	and	ebp,ecx
	xor	eax,DWORD [32+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [44+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [48+esp]
	add	eax,ebp
	; 20_39 60
	mov	ebp,ebx
	xor	esi,DWORD [56+esp]
	xor	ebp,ecx
	xor	esi,DWORD [16+esp]
	xor	ebp,edx
	xor	esi,DWORD [36+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [48+esp],esi
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [52+esp]
	add	esi,ebp
	; 20_39 61
	mov	ebp,eax
	xor	edi,DWORD [60+esp]
	xor	ebp,ebx
	xor	edi,DWORD [20+esp]
	xor	ebp,ecx
	xor	edi,DWORD [40+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [52+esp],edi
	lea	edi,[3395469782+edx*1+edi]
	mov	edx,DWORD [56+esp]
	add	edi,ebp
	; 20_39 62
	mov	ebp,esi
	xor	edx,DWORD [esp]
	xor	ebp,eax
	xor	edx,DWORD [24+esp]
	xor	ebp,ebx
	xor	edx,DWORD [44+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [56+esp],edx
	lea	edx,[3395469782+ecx*1+edx]
	mov	ecx,DWORD [60+esp]
	add	edx,ebp
	; 20_39 63
	mov	ebp,edi
	xor	ecx,DWORD [4+esp]
	xor	ebp,esi
	xor	ecx,DWORD [28+esp]
	xor	ebp,eax
	xor	ecx,DWORD [48+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [60+esp],ecx
	lea	ecx,[3395469782+ebx*1+ecx]
	mov	ebx,DWORD [esp]
	add	ecx,ebp
	; 20_39 64
	mov	ebp,edx
	xor	ebx,DWORD [8+esp]
	xor	ebp,edi
	xor	ebx,DWORD [32+esp]
	xor	ebp,esi
	xor	ebx,DWORD [52+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [esp],ebx
	lea	ebx,[3395469782+eax*1+ebx]
	mov	eax,DWORD [4+esp]
	add	ebx,ebp
	; 20_39 65
	mov	ebp,ecx
	xor	eax,DWORD [12+esp]
	xor	ebp,edx
	xor	eax,DWORD [36+esp]
	xor	ebp,edi
	xor	eax,DWORD [56+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [4+esp],eax
	lea	eax,[3395469782+esi*1+eax]
	mov	esi,DWORD [8+esp]
	add	eax,ebp
	; 20_39 66
	mov	ebp,ebx
	xor	esi,DWORD [16+esp]
	xor	ebp,ecx
	xor	esi,DWORD [40+esp]
	xor	ebp,edx
	xor	esi,DWORD [60+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [8+esp],esi
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [12+esp]
	add	esi,ebp
	; 20_39 67
	mov	ebp,eax
	xor	edi,DWORD [20+esp]
	xor	ebp,ebx
	xor	edi,DWORD [44+esp]
	xor	ebp,ecx
	xor	edi,DWORD [esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [12+esp],edi
	lea	edi,[3395469782+edx*1+edi]
	mov	edx,DWORD [16+esp]
	add	edi,ebp
	; 20_39 68
	mov	ebp,esi
	xor	edx,DWORD [24+esp]
	xor	ebp,eax
	xor	edx,DWORD [48+esp]
	xor	ebp,ebx
	xor	edx,DWORD [4+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [16+esp],edx
	lea	edx,[3395469782+ecx*1+edx]
	mov	ecx,DWORD [20+esp]
	add	edx,ebp
	; 20_39 69
	mov	ebp,edi
	xor	ecx,DWORD [28+esp]
	xor	ebp,esi
	xor	ecx,DWORD [52+esp]
	xor	ebp,eax
	xor	ecx,DWORD [8+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [20+esp],ecx
	lea	ecx,[3395469782+ebx*1+ecx]
	mov	ebx,DWORD [24+esp]
	add	ecx,ebp
	; 20_39 70
	mov	ebp,edx
	xor	ebx,DWORD [32+esp]
	xor	ebp,edi
	xor	ebx,DWORD [56+esp]
	xor	ebp,esi
	xor	ebx,DWORD [12+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [24+esp],ebx
	lea	ebx,[3395469782+eax*1+ebx]
	mov	eax,DWORD [28+esp]
	add	ebx,ebp
	; 20_39 71
	mov	ebp,ecx
	xor	eax,DWORD [36+esp]
	xor	ebp,edx
	xor	eax,DWORD [60+esp]
	xor	ebp,edi
	xor	eax,DWORD [16+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [28+esp],eax
	lea	eax,[3395469782+esi*1+eax]
	mov	esi,DWORD [32+esp]
	add	eax,ebp
	; 20_39 72
	mov	ebp,ebx
	xor	esi,DWORD [40+esp]
	xor	ebp,ecx
	xor	esi,DWORD [esp]
	xor	ebp,edx
	xor	esi,DWORD [20+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [32+esp],esi
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [36+esp]
	add	esi,ebp
	; 20_39 73
	mov	ebp,eax
	xor	edi,DWORD [44+esp]
	xor	ebp,ebx
	xor	edi,DWORD [4+esp]
	xor	ebp,ecx
	xor	edi,DWORD [24+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [36+esp],edi
	lea	edi,[3395469782+edx*1+edi]
	mov	edx,DWORD [40+esp]
	add	edi,ebp
	; 20_39 74
	mov	ebp,esi
	xor	edx,DWORD [48+esp]
	xor	ebp,eax
	xor	edx,DWORD [8+esp]
	xor	ebp,ebx
	xor	edx,DWORD [28+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [40+esp],edx
	lea	edx,[3395469782+ecx*1+edx]
	mov	ecx,DWORD [44+esp]
	add	edx,ebp
	; 20_39 75
	mov	ebp,edi
	xor	ecx,DWORD [52+esp]
	xor	ebp,esi
	xor	ecx,DWORD [12+esp]
	xor	ebp,eax
	xor	ecx,DWORD [32+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [44+esp],ecx
	lea	ecx,[3395469782+ebx*1+ecx]
	mov	ebx,DWORD [48+esp]
	add	ecx,ebp
	; 20_39 76
	mov	ebp,edx
	xor	ebx,DWORD [56+esp]
	xor	ebp,edi
	xor	ebx,DWORD [16+esp]
	xor	ebp,esi
	xor	ebx,DWORD [36+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [48+esp],ebx
	lea	ebx,[3395469782+eax*1+ebx]
	mov	eax,DWORD [52+esp]
	add	ebx,ebp
	; 20_39 77
	mov	ebp,ecx
	xor	eax,DWORD [60+esp]
	xor	ebp,edx
	xor	eax,DWORD [20+esp]
	xor	ebp,edi
	xor	eax,DWORD [40+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	lea	eax,[3395469782+esi*1+eax]
	mov	esi,DWORD [56+esp]
	add	eax,ebp
	; 20_39 78
	mov	ebp,ebx
	xor	esi,DWORD [esp]
	xor	ebp,ecx
	xor	esi,DWORD [24+esp]
	xor	ebp,edx
	xor	esi,DWORD [44+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [60+esp]
	add	esi,ebp
	; 20_39 79
	mov	ebp,eax
	xor	edi,DWORD [4+esp]
	xor	ebp,ebx
	xor	edi,DWORD [28+esp]
	xor	ebp,ecx
	xor	edi,DWORD [48+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	lea	edi,[3395469782+edx*1+edi]
	add	edi,ebp
	mov	ebp,DWORD [96+esp]
	mov	edx,DWORD [100+esp]
	add	edi,DWORD [ebp]
	add	esi,DWORD [4+ebp]
	add	eax,DWORD [8+ebp]
	add	ebx,DWORD [12+ebp]
	add	ecx,DWORD [16+ebp]
	mov	DWORD [ebp],edi
	add	edx,64
	mov	DWORD [4+ebp],esi
	cmp	edx,DWORD [104+esp]
	mov	DWORD [8+ebp],eax
	mov	edi,ecx
	mov	DWORD [12+ebp],ebx
	mov	esi,edx
	mov	DWORD [16+ebp],ecx
	jb	NEAR L$002loop
	add	esp,76
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__sha1_block_data_order_shaext:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$003pic_point
L$003pic_point:
	pop	ebp
	lea	ebp,[(L$K_XX_XX-L$003pic_point)+ebp]
L$shaext_shortcut:
	mov	edi,DWORD [20+esp]
	mov	ebx,esp
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	sub	esp,32
	movdqu	xmm0,[edi]
	movd	xmm1,DWORD [16+edi]
	and	esp,-32
	movdqa	xmm3,[80+ebp]
	movdqu	xmm4,[esi]
	pshufd	xmm0,xmm0,27
	movdqu	xmm5,[16+esi]
	pshufd	xmm1,xmm1,27
	movdqu	xmm6,[32+esi]
db	102,15,56,0,227
	movdqu	xmm7,[48+esi]
db	102,15,56,0,235
db	102,15,56,0,243
db	102,15,56,0,251
	jmp	NEAR L$004loop_shaext
align	16
L$004loop_shaext:
	dec	ecx
	lea	eax,[64+esi]
	movdqa	[esp],xmm1
	paddd	xmm1,xmm4
	cmovne	esi,eax
	movdqa	[16+esp],xmm0
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,0
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,0
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,0
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,0
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,0
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,1
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,1
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,1
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,1
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,1
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,2
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,2
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,2
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,2
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,2
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,3
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
	movdqu	xmm4,[esi]
	movdqa	xmm2,xmm0
db	15,58,204,193,3
db	15,56,200,213
	movdqu	xmm5,[16+esi]
db	102,15,56,0,227
	movdqa	xmm1,xmm0
db	15,58,204,194,3
db	15,56,200,206
	movdqu	xmm6,[32+esi]
db	102,15,56,0,235
	movdqa	xmm2,xmm0
db	15,58,204,193,3
db	15,56,200,215
	movdqu	xmm7,[48+esi]
db	102,15,56,0,243
	movdqa	xmm1,xmm0
db	15,58,204,194,3
	movdqa	xmm2,[esp]
db	102,15,56,0,251
db	15,56,200,202
	paddd	xmm0,[16+esp]
	jnz	NEAR L$004loop_shaext
	pshufd	xmm0,xmm0,27
	pshufd	xmm1,xmm1,27
	movdqu	[edi],xmm0
	movd	DWORD [16+edi],xmm1
	mov	esp,ebx
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__sha1_block_data_order_ssse3:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$005pic_point
L$005pic_point:
	pop	ebp
	lea	ebp,[(L$K_XX_XX-L$005pic_point)+ebp]
L$ssse3_shortcut:
	movdqa	xmm7,[ebp]
	movdqa	xmm0,[16+ebp]
	movdqa	xmm1,[32+ebp]
	movdqa	xmm2,[48+ebp]
	movdqa	xmm6,[64+ebp]
	mov	edi,DWORD [20+esp]
	mov	ebp,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	esi,esp
	sub	esp,208
	and	esp,-64
	movdqa	[112+esp],xmm0
	movdqa	[128+esp],xmm1
	movdqa	[144+esp],xmm2
	shl	edx,6
	movdqa	[160+esp],xmm7
	add	edx,ebp
	movdqa	[176+esp],xmm6
	add	ebp,64
	mov	DWORD [192+esp],edi
	mov	DWORD [196+esp],ebp
	mov	DWORD [200+esp],edx
	mov	DWORD [204+esp],esi
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
	mov	edi,DWORD [16+edi]
	mov	esi,ebx
	movdqu	xmm0,[ebp-64]
	movdqu	xmm1,[ebp-48]
	movdqu	xmm2,[ebp-32]
	movdqu	xmm3,[ebp-16]
db	102,15,56,0,198
db	102,15,56,0,206
db	102,15,56,0,214
	movdqa	[96+esp],xmm7
db	102,15,56,0,222
	paddd	xmm0,xmm7
	paddd	xmm1,xmm7
	paddd	xmm2,xmm7
	movdqa	[esp],xmm0
	psubd	xmm0,xmm7
	movdqa	[16+esp],xmm1
	psubd	xmm1,xmm7
	movdqa	[32+esp],xmm2
	mov	ebp,ecx
	psubd	xmm2,xmm7
	xor	ebp,edx
	pshufd	xmm4,xmm0,238
	and	esi,ebp
	jmp	NEAR L$006loop
align	16
L$006loop:
	ror	ebx,2
	xor	esi,edx
	mov	ebp,eax
	punpcklqdq	xmm4,xmm1
	movdqa	xmm6,xmm3
	add	edi,DWORD [esp]
	xor	ebx,ecx
	paddd	xmm7,xmm3
	movdqa	[64+esp],xmm0
	rol	eax,5
	add	edi,esi
	psrldq	xmm6,4
	and	ebp,ebx
	xor	ebx,ecx
	pxor	xmm4,xmm0
	add	edi,eax
	ror	eax,7
	pxor	xmm6,xmm2
	xor	ebp,ecx
	mov	esi,edi
	add	edx,DWORD [4+esp]
	pxor	xmm4,xmm6
	xor	eax,ebx
	rol	edi,5
	movdqa	[48+esp],xmm7
	add	edx,ebp
	and	esi,eax
	movdqa	xmm0,xmm4
	xor	eax,ebx
	add	edx,edi
	ror	edi,7
	movdqa	xmm6,xmm4
	xor	esi,ebx
	pslldq	xmm0,12
	paddd	xmm4,xmm4
	mov	ebp,edx
	add	ecx,DWORD [8+esp]
	psrld	xmm6,31
	xor	edi,eax
	rol	edx,5
	movdqa	xmm7,xmm0
	add	ecx,esi
	and	ebp,edi
	xor	edi,eax
	psrld	xmm0,30
	add	ecx,edx
	ror	edx,7
	por	xmm4,xmm6
	xor	ebp,eax
	mov	esi,ecx
	add	ebx,DWORD [12+esp]
	pslld	xmm7,2
	xor	edx,edi
	rol	ecx,5
	pxor	xmm4,xmm0
	movdqa	xmm0,[96+esp]
	add	ebx,ebp
	and	esi,edx
	pxor	xmm4,xmm7
	pshufd	xmm5,xmm1,238
	xor	edx,edi
	add	ebx,ecx
	ror	ecx,7
	xor	esi,edi
	mov	ebp,ebx
	punpcklqdq	xmm5,xmm2
	movdqa	xmm7,xmm4
	add	eax,DWORD [16+esp]
	xor	ecx,edx
	paddd	xmm0,xmm4
	movdqa	[80+esp],xmm1
	rol	ebx,5
	add	eax,esi
	psrldq	xmm7,4
	and	ebp,ecx
	xor	ecx,edx
	pxor	xmm5,xmm1
	add	eax,ebx
	ror	ebx,7
	pxor	xmm7,xmm3
	xor	ebp,edx
	mov	esi,eax
	add	edi,DWORD [20+esp]
	pxor	xmm5,xmm7
	xor	ebx,ecx
	rol	eax,5
	movdqa	[esp],xmm0
	add	edi,ebp
	and	esi,ebx
	movdqa	xmm1,xmm5
	xor	ebx,ecx
	add	edi,eax
	ror	eax,7
	movdqa	xmm7,xmm5
	xor	esi,ecx
	pslldq	xmm1,12
	paddd	xmm5,xmm5
	mov	ebp,edi
	add	edx,DWORD [24+esp]
	psrld	xmm7,31
	xor	eax,ebx
	rol	edi,5
	movdqa	xmm0,xmm1
	add	edx,esi
	and	ebp,eax
	xor	eax,ebx
	psrld	xmm1,30
	add	edx,edi
	ror	edi,7
	por	xmm5,xmm7
	xor	ebp,ebx
	mov	esi,edx
	add	ecx,DWORD [28+esp]
	pslld	xmm0,2
	xor	edi,eax
	rol	edx,5
	pxor	xmm5,xmm1
	movdqa	xmm1,[112+esp]
	add	ecx,ebp
	and	esi,edi
	pxor	xmm5,xmm0
	pshufd	xmm6,xmm2,238
	xor	edi,eax
	add	ecx,edx
	ror	edx,7
	xor	esi,eax
	mov	ebp,ecx
	punpcklqdq	xmm6,xmm3
	movdqa	xmm0,xmm5
	add	ebx,DWORD [32+esp]
	xor	edx,edi
	paddd	xmm1,xmm5
	movdqa	[96+esp],xmm2
	rol	ecx,5
	add	ebx,esi
	psrldq	xmm0,4
	and	ebp,edx
	xor	edx,edi
	pxor	xmm6,xmm2
	add	ebx,ecx
	ror	ecx,7
	pxor	xmm0,xmm4
	xor	ebp,edi
	mov	esi,ebx
	add	eax,DWORD [36+esp]
	pxor	xmm6,xmm0
	xor	ecx,edx
	rol	ebx,5
	movdqa	[16+esp],xmm1
	add	eax,ebp
	and	esi,ecx
	movdqa	xmm2,xmm6
	xor	ecx,edx
	add	eax,ebx
	ror	ebx,7
	movdqa	xmm0,xmm6
	xor	esi,edx
	pslldq	xmm2,12
	paddd	xmm6,xmm6
	mov	ebp,eax
	add	edi,DWORD [40+esp]
	psrld	xmm0,31
	xor	ebx,ecx
	rol	eax,5
	movdqa	xmm1,xmm2
	add	edi,esi
	and	ebp,ebx
	xor	ebx,ecx
	psrld	xmm2,30
	add	edi,eax
	ror	eax,7
	por	xmm6,xmm0
	xor	ebp,ecx
	movdqa	xmm0,[64+esp]
	mov	esi,edi
	add	edx,DWORD [44+esp]
	pslld	xmm1,2
	xor	eax,ebx
	rol	edi,5
	pxor	xmm6,xmm2
	movdqa	xmm2,[112+esp]
	add	edx,ebp
	and	esi,eax
	pxor	xmm6,xmm1
	pshufd	xmm7,xmm3,238
	xor	eax,ebx
	add	edx,edi
	ror	edi,7
	xor	esi,ebx
	mov	ebp,edx
	punpcklqdq	xmm7,xmm4
	movdqa	xmm1,xmm6
	add	ecx,DWORD [48+esp]
	xor	edi,eax
	paddd	xmm2,xmm6
	movdqa	[64+esp],xmm3
	rol	edx,5
	add	ecx,esi
	psrldq	xmm1,4
	and	ebp,edi
	xor	edi,eax
	pxor	xmm7,xmm3
	add	ecx,edx
	ror	edx,7
	pxor	xmm1,xmm5
	xor	ebp,eax
	mov	esi,ecx
	add	ebx,DWORD [52+esp]
	pxor	xmm7,xmm1
	xor	edx,edi
	rol	ecx,5
	movdqa	[32+esp],xmm2
	add	ebx,ebp
	and	esi,edx
	movdqa	xmm3,xmm7
	xor	edx,edi
	add	ebx,ecx
	ror	ecx,7
	movdqa	xmm1,xmm7
	xor	esi,edi
	pslldq	xmm3,12
	paddd	xmm7,xmm7
	mov	ebp,ebx
	add	eax,DWORD [56+esp]
	psrld	xmm1,31
	xor	ecx,edx
	rol	ebx,5
	movdqa	xmm2,xmm3
	add	eax,esi
	and	ebp,ecx
	xor	ecx,edx
	psrld	xmm3,30
	add	eax,ebx
	ror	ebx,7
	por	xmm7,xmm1
	xor	ebp,edx
	movdqa	xmm1,[80+esp]
	mov	esi,eax
	add	edi,DWORD [60+esp]
	pslld	xmm2,2
	xor	ebx,ecx
	rol	eax,5
	pxor	xmm7,xmm3
	movdqa	xmm3,[112+esp]
	add	edi,ebp
	and	esi,ebx
	pxor	xmm7,xmm2
	pshufd	xmm2,xmm6,238
	xor	ebx,ecx
	add	edi,eax
	ror	eax,7
	pxor	xmm0,xmm4
	punpcklqdq	xmm2,xmm7
	xor	esi,ecx
	mov	ebp,edi
	add	edx,DWORD [esp]
	pxor	xmm0,xmm1
	movdqa	[80+esp],xmm4
	xor	eax,ebx
	rol	edi,5
	movdqa	xmm4,xmm3
	add	edx,esi
	paddd	xmm3,xmm7
	and	ebp,eax
	pxor	xmm0,xmm2
	xor	eax,ebx
	add	edx,edi
	ror	edi,7
	xor	ebp,ebx
	movdqa	xmm2,xmm0
	movdqa	[48+esp],xmm3
	mov	esi,edx
	add	ecx,DWORD [4+esp]
	xor	edi,eax
	rol	edx,5
	pslld	xmm0,2
	add	ecx,ebp
	and	esi,edi
	psrld	xmm2,30
	xor	edi,eax
	add	ecx,edx
	ror	edx,7
	xor	esi,eax
	mov	ebp,ecx
	add	ebx,DWORD [8+esp]
	xor	edx,edi
	rol	ecx,5
	por	xmm0,xmm2
	add	ebx,esi
	and	ebp,edx
	movdqa	xmm2,[96+esp]
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [12+esp]
	xor	ebp,edi
	mov	esi,ebx
	pshufd	xmm3,xmm7,238
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [16+esp]
	pxor	xmm1,xmm5
	punpcklqdq	xmm3,xmm0
	xor	esi,ecx
	mov	ebp,eax
	rol	eax,5
	pxor	xmm1,xmm2
	movdqa	[96+esp],xmm5
	add	edi,esi
	xor	ebp,ecx
	movdqa	xmm5,xmm4
	ror	ebx,7
	paddd	xmm4,xmm0
	add	edi,eax
	pxor	xmm1,xmm3
	add	edx,DWORD [20+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	movdqa	xmm3,xmm1
	movdqa	[esp],xmm4
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	pslld	xmm1,2
	add	ecx,DWORD [24+esp]
	xor	esi,eax
	psrld	xmm3,30
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
	add	ecx,edx
	por	xmm1,xmm3
	add	ebx,DWORD [28+esp]
	xor	ebp,edi
	movdqa	xmm3,[64+esp]
	mov	esi,ecx
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	pshufd	xmm4,xmm0,238
	add	ebx,ecx
	add	eax,DWORD [32+esp]
	pxor	xmm2,xmm6
	punpcklqdq	xmm4,xmm1
	xor	esi,edx
	mov	ebp,ebx
	rol	ebx,5
	pxor	xmm2,xmm3
	movdqa	[64+esp],xmm6
	add	eax,esi
	xor	ebp,edx
	movdqa	xmm6,[128+esp]
	ror	ecx,7
	paddd	xmm5,xmm1
	add	eax,ebx
	pxor	xmm2,xmm4
	add	edi,DWORD [36+esp]
	xor	ebp,ecx
	mov	esi,eax
	rol	eax,5
	movdqa	xmm4,xmm2
	movdqa	[16+esp],xmm5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	pslld	xmm2,2
	add	edx,DWORD [40+esp]
	xor	esi,ebx
	psrld	xmm4,30
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
	add	edx,edi
	por	xmm2,xmm4
	add	ecx,DWORD [44+esp]
	xor	ebp,eax
	movdqa	xmm4,[80+esp]
	mov	esi,edx
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	pshufd	xmm5,xmm1,238
	add	ecx,edx
	add	ebx,DWORD [48+esp]
	pxor	xmm3,xmm7
	punpcklqdq	xmm5,xmm2
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	pxor	xmm3,xmm4
	movdqa	[80+esp],xmm7
	add	ebx,esi
	xor	ebp,edi
	movdqa	xmm7,xmm6
	ror	edx,7
	paddd	xmm6,xmm2
	add	ebx,ecx
	pxor	xmm3,xmm5
	add	eax,DWORD [52+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	movdqa	xmm5,xmm3
	movdqa	[32+esp],xmm6
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	add	eax,ebx
	pslld	xmm3,2
	add	edi,DWORD [56+esp]
	xor	esi,ecx
	psrld	xmm5,30
	mov	ebp,eax
	rol	eax,5
	add	edi,esi
	xor	ebp,ecx
	ror	ebx,7
	add	edi,eax
	por	xmm3,xmm5
	add	edx,DWORD [60+esp]
	xor	ebp,ebx
	movdqa	xmm5,[96+esp]
	mov	esi,edi
	rol	edi,5
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	pshufd	xmm6,xmm2,238
	add	edx,edi
	add	ecx,DWORD [esp]
	pxor	xmm4,xmm0
	punpcklqdq	xmm6,xmm3
	xor	esi,eax
	mov	ebp,edx
	rol	edx,5
	pxor	xmm4,xmm5
	movdqa	[96+esp],xmm0
	add	ecx,esi
	xor	ebp,eax
	movdqa	xmm0,xmm7
	ror	edi,7
	paddd	xmm7,xmm3
	add	ecx,edx
	pxor	xmm4,xmm6
	add	ebx,DWORD [4+esp]
	xor	ebp,edi
	mov	esi,ecx
	rol	ecx,5
	movdqa	xmm6,xmm4
	movdqa	[48+esp],xmm7
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	add	ebx,ecx
	pslld	xmm4,2
	add	eax,DWORD [8+esp]
	xor	esi,edx
	psrld	xmm6,30
	mov	ebp,ebx
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	add	eax,ebx
	por	xmm4,xmm6
	add	edi,DWORD [12+esp]
	xor	ebp,ecx
	movdqa	xmm6,[64+esp]
	mov	esi,eax
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	pshufd	xmm7,xmm3,238
	add	edi,eax
	add	edx,DWORD [16+esp]
	pxor	xmm5,xmm1
	punpcklqdq	xmm7,xmm4
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	pxor	xmm5,xmm6
	movdqa	[64+esp],xmm1
	add	edx,esi
	xor	ebp,ebx
	movdqa	xmm1,xmm0
	ror	eax,7
	paddd	xmm0,xmm4
	add	edx,edi
	pxor	xmm5,xmm7
	add	ecx,DWORD [20+esp]
	xor	ebp,eax
	mov	esi,edx
	rol	edx,5
	movdqa	xmm7,xmm5
	movdqa	[esp],xmm0
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	add	ecx,edx
	pslld	xmm5,2
	add	ebx,DWORD [24+esp]
	xor	esi,edi
	psrld	xmm7,30
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	por	xmm5,xmm7
	add	eax,DWORD [28+esp]
	movdqa	xmm7,[80+esp]
	ror	ecx,7
	mov	esi,ebx
	xor	ebp,edx
	rol	ebx,5
	pshufd	xmm0,xmm4,238
	add	eax,ebp
	xor	esi,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [32+esp]
	pxor	xmm6,xmm2
	punpcklqdq	xmm0,xmm5
	and	esi,ecx
	xor	ecx,edx
	ror	ebx,7
	pxor	xmm6,xmm7
	movdqa	[80+esp],xmm2
	mov	ebp,eax
	xor	esi,ecx
	rol	eax,5
	movdqa	xmm2,xmm1
	add	edi,esi
	paddd	xmm1,xmm5
	xor	ebp,ebx
	pxor	xmm6,xmm0
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [36+esp]
	and	ebp,ebx
	movdqa	xmm0,xmm6
	movdqa	[16+esp],xmm1
	xor	ebx,ecx
	ror	eax,7
	mov	esi,edi
	xor	ebp,ebx
	rol	edi,5
	pslld	xmm6,2
	add	edx,ebp
	xor	esi,eax
	psrld	xmm0,30
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [40+esp]
	and	esi,eax
	xor	eax,ebx
	ror	edi,7
	por	xmm6,xmm0
	mov	ebp,edx
	xor	esi,eax
	movdqa	xmm0,[96+esp]
	rol	edx,5
	add	ecx,esi
	xor	ebp,edi
	xor	edi,eax
	add	ecx,edx
	pshufd	xmm1,xmm5,238
	add	ebx,DWORD [44+esp]
	and	ebp,edi
	xor	edi,eax
	ror	edx,7
	mov	esi,ecx
	xor	ebp,edi
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [48+esp]
	pxor	xmm7,xmm3
	punpcklqdq	xmm1,xmm6
	and	esi,edx
	xor	edx,edi
	ror	ecx,7
	pxor	xmm7,xmm0
	movdqa	[96+esp],xmm3
	mov	ebp,ebx
	xor	esi,edx
	rol	ebx,5
	movdqa	xmm3,[144+esp]
	add	eax,esi
	paddd	xmm2,xmm6
	xor	ebp,ecx
	pxor	xmm7,xmm1
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [52+esp]
	and	ebp,ecx
	movdqa	xmm1,xmm7
	movdqa	[32+esp],xmm2
	xor	ecx,edx
	ror	ebx,7
	mov	esi,eax
	xor	ebp,ecx
	rol	eax,5
	pslld	xmm7,2
	add	edi,ebp
	xor	esi,ebx
	psrld	xmm1,30
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [56+esp]
	and	esi,ebx
	xor	ebx,ecx
	ror	eax,7
	por	xmm7,xmm1
	mov	ebp,edi
	xor	esi,ebx
	movdqa	xmm1,[64+esp]
	rol	edi,5
	add	edx,esi
	xor	ebp,eax
	xor	eax,ebx
	add	edx,edi
	pshufd	xmm2,xmm6,238
	add	ecx,DWORD [60+esp]
	and	ebp,eax
	xor	eax,ebx
	ror	edi,7
	mov	esi,edx
	xor	ebp,eax
	rol	edx,5
	add	ecx,ebp
	xor	esi,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [esp]
	pxor	xmm0,xmm4
	punpcklqdq	xmm2,xmm7
	and	esi,edi
	xor	edi,eax
	ror	edx,7
	pxor	xmm0,xmm1
	movdqa	[64+esp],xmm4
	mov	ebp,ecx
	xor	esi,edi
	rol	ecx,5
	movdqa	xmm4,xmm3
	add	ebx,esi
	paddd	xmm3,xmm7
	xor	ebp,edx
	pxor	xmm0,xmm2
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [4+esp]
	and	ebp,edx
	movdqa	xmm2,xmm0
	movdqa	[48+esp],xmm3
	xor	edx,edi
	ror	ecx,7
	mov	esi,ebx
	xor	ebp,edx
	rol	ebx,5
	pslld	xmm0,2
	add	eax,ebp
	xor	esi,ecx
	psrld	xmm2,30
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [8+esp]
	and	esi,ecx
	xor	ecx,edx
	ror	ebx,7
	por	xmm0,xmm2
	mov	ebp,eax
	xor	esi,ecx
	movdqa	xmm2,[80+esp]
	rol	eax,5
	add	edi,esi
	xor	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	pshufd	xmm3,xmm7,238
	add	edx,DWORD [12+esp]
	and	ebp,ebx
	xor	ebx,ecx
	ror	eax,7
	mov	esi,edi
	xor	ebp,ebx
	rol	edi,5
	add	edx,ebp
	xor	esi,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [16+esp]
	pxor	xmm1,xmm5
	punpcklqdq	xmm3,xmm0
	and	esi,eax
	xor	eax,ebx
	ror	edi,7
	pxor	xmm1,xmm2
	movdqa	[80+esp],xmm5
	mov	ebp,edx
	xor	esi,eax
	rol	edx,5
	movdqa	xmm5,xmm4
	add	ecx,esi
	paddd	xmm4,xmm0
	xor	ebp,edi
	pxor	xmm1,xmm3
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [20+esp]
	and	ebp,edi
	movdqa	xmm3,xmm1
	movdqa	[esp],xmm4
	xor	edi,eax
	ror	edx,7
	mov	esi,ecx
	xor	ebp,edi
	rol	ecx,5
	pslld	xmm1,2
	add	ebx,ebp
	xor	esi,edx
	psrld	xmm3,30
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [24+esp]
	and	esi,edx
	xor	edx,edi
	ror	ecx,7
	por	xmm1,xmm3
	mov	ebp,ebx
	xor	esi,edx
	movdqa	xmm3,[96+esp]
	rol	ebx,5
	add	eax,esi
	xor	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	pshufd	xmm4,xmm0,238
	add	edi,DWORD [28+esp]
	and	ebp,ecx
	xor	ecx,edx
	ror	ebx,7
	mov	esi,eax
	xor	ebp,ecx
	rol	eax,5
	add	edi,ebp
	xor	esi,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [32+esp]
	pxor	xmm2,xmm6
	punpcklqdq	xmm4,xmm1
	and	esi,ebx
	xor	ebx,ecx
	ror	eax,7
	pxor	xmm2,xmm3
	movdqa	[96+esp],xmm6
	mov	ebp,edi
	xor	esi,ebx
	rol	edi,5
	movdqa	xmm6,xmm5
	add	edx,esi
	paddd	xmm5,xmm1
	xor	ebp,eax
	pxor	xmm2,xmm4
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [36+esp]
	and	ebp,eax
	movdqa	xmm4,xmm2
	movdqa	[16+esp],xmm5
	xor	eax,ebx
	ror	edi,7
	mov	esi,edx
	xor	ebp,eax
	rol	edx,5
	pslld	xmm2,2
	add	ecx,ebp
	xor	esi,edi
	psrld	xmm4,30
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [40+esp]
	and	esi,edi
	xor	edi,eax
	ror	edx,7
	por	xmm2,xmm4
	mov	ebp,ecx
	xor	esi,edi
	movdqa	xmm4,[64+esp]
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	pshufd	xmm5,xmm1,238
	add	eax,DWORD [44+esp]
	and	ebp,edx
	xor	edx,edi
	ror	ecx,7
	mov	esi,ebx
	xor	ebp,edx
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	add	eax,ebx
	add	edi,DWORD [48+esp]
	pxor	xmm3,xmm7
	punpcklqdq	xmm5,xmm2
	xor	esi,ecx
	mov	ebp,eax
	rol	eax,5
	pxor	xmm3,xmm4
	movdqa	[64+esp],xmm7
	add	edi,esi
	xor	ebp,ecx
	movdqa	xmm7,xmm6
	ror	ebx,7
	paddd	xmm6,xmm2
	add	edi,eax
	pxor	xmm3,xmm5
	add	edx,DWORD [52+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	movdqa	xmm5,xmm3
	movdqa	[32+esp],xmm6
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	pslld	xmm3,2
	add	ecx,DWORD [56+esp]
	xor	esi,eax
	psrld	xmm5,30
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
	add	ecx,edx
	por	xmm3,xmm5
	add	ebx,DWORD [60+esp]
	xor	ebp,edi
	mov	esi,ecx
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [esp]
	xor	esi,edx
	mov	ebp,ebx
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	paddd	xmm7,xmm3
	add	eax,ebx
	add	edi,DWORD [4+esp]
	xor	ebp,ecx
	mov	esi,eax
	movdqa	[48+esp],xmm7
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [8+esp]
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [12+esp]
	xor	ebp,eax
	mov	esi,edx
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	add	ecx,edx
	mov	ebp,DWORD [196+esp]
	cmp	ebp,DWORD [200+esp]
	je	NEAR L$007done
	movdqa	xmm7,[160+esp]
	movdqa	xmm6,[176+esp]
	movdqu	xmm0,[ebp]
	movdqu	xmm1,[16+ebp]
	movdqu	xmm2,[32+ebp]
	movdqu	xmm3,[48+ebp]
	add	ebp,64
db	102,15,56,0,198
	mov	DWORD [196+esp],ebp
	movdqa	[96+esp],xmm7
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
db	102,15,56,0,206
	add	ebx,ecx
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	paddd	xmm0,xmm7
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	movdqa	[esp],xmm0
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	psubd	xmm0,xmm7
	rol	eax,5
	add	edi,esi
	xor	ebp,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
db	102,15,56,0,214
	add	ecx,edx
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	paddd	xmm1,xmm7
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	movdqa	[16+esp],xmm1
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	psubd	xmm1,xmm7
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
db	102,15,56,0,222
	add	edx,edi
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	paddd	xmm2,xmm7
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	movdqa	[32+esp],xmm2
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	psubd	xmm2,xmm7
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	add	eax,ebp
	ror	ecx,7
	add	eax,ebx
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	DWORD [8+ebp],ecx
	mov	ebx,ecx
	mov	DWORD [12+ebp],edx
	xor	ebx,edx
	mov	DWORD [16+ebp],edi
	mov	ebp,esi
	pshufd	xmm4,xmm0,238
	and	esi,ebx
	mov	ebx,ebp
	jmp	NEAR L$006loop
align	16
L$007done:
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	rol	eax,5
	add	edi,esi
	xor	ebp,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
	add	ecx,edx
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	add	eax,ebp
	ror	ecx,7
	add	eax,ebx
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	mov	esp,DWORD [204+esp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	DWORD [8+ebp],ecx
	mov	DWORD [12+ebp],edx
	mov	DWORD [16+ebp],edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__sha1_block_data_order_avx:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$008pic_point
L$008pic_point:
	pop	ebp
	lea	ebp,[(L$K_XX_XX-L$008pic_point)+ebp]
L$avx_shortcut:
	vzeroall
	vmovdqa	xmm7,[ebp]
	vmovdqa	xmm0,[16+ebp]
	vmovdqa	xmm1,[32+ebp]
	vmovdqa	xmm2,[48+ebp]
	vmovdqa	xmm6,[64+ebp]
	mov	edi,DWORD [20+esp]
	mov	ebp,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	esi,esp
	sub	esp,208
	and	esp,-64
	vmovdqa	[112+esp],xmm0
	vmovdqa	[128+esp],xmm1
	vmovdqa	[144+esp],xmm2
	shl	edx,6
	vmovdqa	[160+esp],xmm7
	add	edx,ebp
	vmovdqa	[176+esp],xmm6
	add	ebp,64
	mov	DWORD [192+esp],edi
	mov	DWORD [196+esp],ebp
	mov	DWORD [200+esp],edx
	mov	DWORD [204+esp],esi
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
	mov	edi,DWORD [16+edi]
	mov	esi,ebx
	vmovdqu	xmm0,[ebp-64]
	vmovdqu	xmm1,[ebp-48]
	vmovdqu	xmm2,[ebp-32]
	vmovdqu	xmm3,[ebp-16]
	vpshufb	xmm0,xmm0,xmm6
	vpshufb	xmm1,xmm1,xmm6
	vpshufb	xmm2,xmm2,xmm6
	vmovdqa	[96+esp],xmm7
	vpshufb	xmm3,xmm3,xmm6
	vpaddd	xmm4,xmm0,xmm7
	vpaddd	xmm5,xmm1,xmm7
	vpaddd	xmm6,xmm2,xmm7
	vmovdqa	[esp],xmm4
	mov	ebp,ecx
	vmovdqa	[16+esp],xmm5
	xor	ebp,edx
	vmovdqa	[32+esp],xmm6
	and	esi,ebp
	jmp	NEAR L$009loop
align	16
L$009loop:
	shrd	ebx,ebx,2
	xor	esi,edx
	vpalignr	xmm4,xmm1,xmm0,8
	mov	ebp,eax
	add	edi,DWORD [esp]
	vpaddd	xmm7,xmm7,xmm3
	vmovdqa	[64+esp],xmm0
	xor	ebx,ecx
	shld	eax,eax,5
	vpsrldq	xmm6,xmm3,4
	add	edi,esi
	and	ebp,ebx
	vpxor	xmm4,xmm4,xmm0
	xor	ebx,ecx
	add	edi,eax
	vpxor	xmm6,xmm6,xmm2
	shrd	eax,eax,7
	xor	ebp,ecx
	vmovdqa	[48+esp],xmm7
	mov	esi,edi
	add	edx,DWORD [4+esp]
	vpxor	xmm4,xmm4,xmm6
	xor	eax,ebx
	shld	edi,edi,5
	add	edx,ebp
	and	esi,eax
	vpsrld	xmm6,xmm4,31
	xor	eax,ebx
	add	edx,edi
	shrd	edi,edi,7
	xor	esi,ebx
	vpslldq	xmm0,xmm4,12
	vpaddd	xmm4,xmm4,xmm4
	mov	ebp,edx
	add	ecx,DWORD [8+esp]
	xor	edi,eax
	shld	edx,edx,5
	vpsrld	xmm7,xmm0,30
	vpor	xmm4,xmm4,xmm6
	add	ecx,esi
	and	ebp,edi
	xor	edi,eax
	add	ecx,edx
	vpslld	xmm0,xmm0,2
	shrd	edx,edx,7
	xor	ebp,eax
	vpxor	xmm4,xmm4,xmm7
	mov	esi,ecx
	add	ebx,DWORD [12+esp]
	xor	edx,edi
	shld	ecx,ecx,5
	vpxor	xmm4,xmm4,xmm0
	add	ebx,ebp
	and	esi,edx
	vmovdqa	xmm0,[96+esp]
	xor	edx,edi
	add	ebx,ecx
	shrd	ecx,ecx,7
	xor	esi,edi
	vpalignr	xmm5,xmm2,xmm1,8
	mov	ebp,ebx
	add	eax,DWORD [16+esp]
	vpaddd	xmm0,xmm0,xmm4
	vmovdqa	[80+esp],xmm1
	xor	ecx,edx
	shld	ebx,ebx,5
	vpsrldq	xmm7,xmm4,4
	add	eax,esi
	and	ebp,ecx
	vpxor	xmm5,xmm5,xmm1
	xor	ecx,edx
	add	eax,ebx
	vpxor	xmm7,xmm7,xmm3
	shrd	ebx,ebx,7
	xor	ebp,edx
	vmovdqa	[esp],xmm0
	mov	esi,eax
	add	edi,DWORD [20+esp]
	vpxor	xmm5,xmm5,xmm7
	xor	ebx,ecx
	shld	eax,eax,5
	add	edi,ebp
	and	esi,ebx
	vpsrld	xmm7,xmm5,31
	xor	ebx,ecx
	add	edi,eax
	shrd	eax,eax,7
	xor	esi,ecx
	vpslldq	xmm1,xmm5,12
	vpaddd	xmm5,xmm5,xmm5
	mov	ebp,edi
	add	edx,DWORD [24+esp]
	xor	eax,ebx
	shld	edi,edi,5
	vpsrld	xmm0,xmm1,30
	vpor	xmm5,xmm5,xmm7
	add	edx,esi
	and	ebp,eax
	xor	eax,ebx
	add	edx,edi
	vpslld	xmm1,xmm1,2
	shrd	edi,edi,7
	xor	ebp,ebx
	vpxor	xmm5,xmm5,xmm0
	mov	esi,edx
	add	ecx,DWORD [28+esp]
	xor	edi,eax
	shld	edx,edx,5
	vpxor	xmm5,xmm5,xmm1
	add	ecx,ebp
	and	esi,edi
	vmovdqa	xmm1,[112+esp]
	xor	edi,eax
	add	ecx,edx
	shrd	edx,edx,7
	xor	esi,eax
	vpalignr	xmm6,xmm3,xmm2,8
	mov	ebp,ecx
	add	ebx,DWORD [32+esp]
	vpaddd	xmm1,xmm1,xmm5
	vmovdqa	[96+esp],xmm2
	xor	edx,edi
	shld	ecx,ecx,5
	vpsrldq	xmm0,xmm5,4
	add	ebx,esi
	and	ebp,edx
	vpxor	xmm6,xmm6,xmm2
	xor	edx,edi
	add	ebx,ecx
	vpxor	xmm0,xmm0,xmm4
	shrd	ecx,ecx,7
	xor	ebp,edi
	vmovdqa	[16+esp],xmm1
	mov	esi,ebx
	add	eax,DWORD [36+esp]
	vpxor	xmm6,xmm6,xmm0
	xor	ecx,edx
	shld	ebx,ebx,5
	add	eax,ebp
	and	esi,ecx
	vpsrld	xmm0,xmm6,31
	xor	ecx,edx
	add	eax,ebx
	shrd	ebx,ebx,7
	xor	esi,edx
	vpslldq	xmm2,xmm6,12
	vpaddd	xmm6,xmm6,xmm6
	mov	ebp,eax
	add	edi,DWORD [40+esp]
	xor	ebx,ecx
	shld	eax,eax,5
	vpsrld	xmm1,xmm2,30
	vpor	xmm6,xmm6,xmm0
	add	edi,esi
	and	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	vpslld	xmm2,xmm2,2
	vmovdqa	xmm0,[64+esp]
	shrd	eax,eax,7
	xor	ebp,ecx
	vpxor	xmm6,xmm6,xmm1
	mov	esi,edi
	add	edx,DWORD [44+esp]
	xor	eax,ebx
	shld	edi,edi,5
	vpxor	xmm6,xmm6,xmm2
	add	edx,ebp
	and	esi,eax
	vmovdqa	xmm2,[112+esp]
	xor	eax,ebx
	add	edx,edi
	shrd	edi,edi,7
	xor	esi,ebx
	vpalignr	xmm7,xmm4,xmm3,8
	mov	ebp,edx
	add	ecx,DWORD [48+esp]
	vpaddd	xmm2,xmm2,xmm6
	vmovdqa	[64+esp],xmm3
	xor	edi,eax
	shld	edx,edx,5
	vpsrldq	xmm1,xmm6,4
	add	ecx,esi
	and	ebp,edi
	vpxor	xmm7,xmm7,xmm3
	xor	edi,eax
	add	ecx,edx
	vpxor	xmm1,xmm1,xmm5
	shrd	edx,edx,7
	xor	ebp,eax
	vmovdqa	[32+esp],xmm2
	mov	esi,ecx
	add	ebx,DWORD [52+esp]
	vpxor	xmm7,xmm7,xmm1
	xor	edx,edi
	shld	ecx,ecx,5
	add	ebx,ebp
	and	esi,edx
	vpsrld	xmm1,xmm7,31
	xor	edx,edi
	add	ebx,ecx
	shrd	ecx,ecx,7
	xor	esi,edi
	vpslldq	xmm3,xmm7,12
	vpaddd	xmm7,xmm7,xmm7
	mov	ebp,ebx
	add	eax,DWORD [56+esp]
	xor	ecx,edx
	shld	ebx,ebx,5
	vpsrld	xmm2,xmm3,30
	vpor	xmm7,xmm7,xmm1
	add	eax,esi
	and	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	vpslld	xmm3,xmm3,2
	vmovdqa	xmm1,[80+esp]
	shrd	ebx,ebx,7
	xor	ebp,edx
	vpxor	xmm7,xmm7,xmm2
	mov	esi,eax
	add	edi,DWORD [60+esp]
	xor	ebx,ecx
	shld	eax,eax,5
	vpxor	xmm7,xmm7,xmm3
	add	edi,ebp
	and	esi,ebx
	vmovdqa	xmm3,[112+esp]
	xor	ebx,ecx
	add	edi,eax
	vpalignr	xmm2,xmm7,xmm6,8
	vpxor	xmm0,xmm0,xmm4
	shrd	eax,eax,7
	xor	esi,ecx
	mov	ebp,edi
	add	edx,DWORD [esp]
	vpxor	xmm0,xmm0,xmm1
	vmovdqa	[80+esp],xmm4
	xor	eax,ebx
	shld	edi,edi,5
	vmovdqa	xmm4,xmm3
	vpaddd	xmm3,xmm3,xmm7
	add	edx,esi
	and	ebp,eax
	vpxor	xmm0,xmm0,xmm2
	xor	eax,ebx
	add	edx,edi
	shrd	edi,edi,7
	xor	ebp,ebx
	vpsrld	xmm2,xmm0,30
	vmovdqa	[48+esp],xmm3
	mov	esi,edx
	add	ecx,DWORD [4+esp]
	xor	edi,eax
	shld	edx,edx,5
	vpslld	xmm0,xmm0,2
	add	ecx,ebp
	and	esi,edi
	xor	edi,eax
	add	ecx,edx
	shrd	edx,edx,7
	xor	esi,eax
	mov	ebp,ecx
	add	ebx,DWORD [8+esp]
	vpor	xmm0,xmm0,xmm2
	xor	edx,edi
	shld	ecx,ecx,5
	vmovdqa	xmm2,[96+esp]
	add	ebx,esi
	and	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [12+esp]
	xor	ebp,edi
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	vpalignr	xmm3,xmm0,xmm7,8
	vpxor	xmm1,xmm1,xmm5
	add	edi,DWORD [16+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	vpxor	xmm1,xmm1,xmm2
	vmovdqa	[96+esp],xmm5
	add	edi,esi
	xor	ebp,ecx
	vmovdqa	xmm5,xmm4
	vpaddd	xmm4,xmm4,xmm0
	shrd	ebx,ebx,7
	add	edi,eax
	vpxor	xmm1,xmm1,xmm3
	add	edx,DWORD [20+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	vpsrld	xmm3,xmm1,30
	vmovdqa	[esp],xmm4
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpslld	xmm1,xmm1,2
	add	ecx,DWORD [24+esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpor	xmm1,xmm1,xmm3
	add	ebx,DWORD [28+esp]
	xor	ebp,edi
	vmovdqa	xmm3,[64+esp]
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vpalignr	xmm4,xmm1,xmm0,8
	vpxor	xmm2,xmm2,xmm6
	add	eax,DWORD [32+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	vpxor	xmm2,xmm2,xmm3
	vmovdqa	[64+esp],xmm6
	add	eax,esi
	xor	ebp,edx
	vmovdqa	xmm6,[128+esp]
	vpaddd	xmm5,xmm5,xmm1
	shrd	ecx,ecx,7
	add	eax,ebx
	vpxor	xmm2,xmm2,xmm4
	add	edi,DWORD [36+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	vpsrld	xmm4,xmm2,30
	vmovdqa	[16+esp],xmm5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	vpslld	xmm2,xmm2,2
	add	edx,DWORD [40+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpor	xmm2,xmm2,xmm4
	add	ecx,DWORD [44+esp]
	xor	ebp,eax
	vmovdqa	xmm4,[80+esp]
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpalignr	xmm5,xmm2,xmm1,8
	vpxor	xmm3,xmm3,xmm7
	add	ebx,DWORD [48+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	vpxor	xmm3,xmm3,xmm4
	vmovdqa	[80+esp],xmm7
	add	ebx,esi
	xor	ebp,edi
	vmovdqa	xmm7,xmm6
	vpaddd	xmm6,xmm6,xmm2
	shrd	edx,edx,7
	add	ebx,ecx
	vpxor	xmm3,xmm3,xmm5
	add	eax,DWORD [52+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	vpsrld	xmm5,xmm3,30
	vmovdqa	[32+esp],xmm6
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	vpslld	xmm3,xmm3,2
	add	edi,DWORD [56+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	vpor	xmm3,xmm3,xmm5
	add	edx,DWORD [60+esp]
	xor	ebp,ebx
	vmovdqa	xmm5,[96+esp]
	mov	esi,edi
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpalignr	xmm6,xmm3,xmm2,8
	vpxor	xmm4,xmm4,xmm0
	add	ecx,DWORD [esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	vpxor	xmm4,xmm4,xmm5
	vmovdqa	[96+esp],xmm0
	add	ecx,esi
	xor	ebp,eax
	vmovdqa	xmm0,xmm7
	vpaddd	xmm7,xmm7,xmm3
	shrd	edi,edi,7
	add	ecx,edx
	vpxor	xmm4,xmm4,xmm6
	add	ebx,DWORD [4+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	vpsrld	xmm6,xmm4,30
	vmovdqa	[48+esp],xmm7
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vpslld	xmm4,xmm4,2
	add	eax,DWORD [8+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	vpor	xmm4,xmm4,xmm6
	add	edi,DWORD [12+esp]
	xor	ebp,ecx
	vmovdqa	xmm6,[64+esp]
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	vpalignr	xmm7,xmm4,xmm3,8
	vpxor	xmm5,xmm5,xmm1
	add	edx,DWORD [16+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	vpxor	xmm5,xmm5,xmm6
	vmovdqa	[64+esp],xmm1
	add	edx,esi
	xor	ebp,ebx
	vmovdqa	xmm1,xmm0
	vpaddd	xmm0,xmm0,xmm4
	shrd	eax,eax,7
	add	edx,edi
	vpxor	xmm5,xmm5,xmm7
	add	ecx,DWORD [20+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	vpsrld	xmm7,xmm5,30
	vmovdqa	[esp],xmm0
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpslld	xmm5,xmm5,2
	add	ebx,DWORD [24+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vpor	xmm5,xmm5,xmm7
	add	eax,DWORD [28+esp]
	vmovdqa	xmm7,[80+esp]
	shrd	ecx,ecx,7
	mov	esi,ebx
	xor	ebp,edx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,ecx
	xor	ecx,edx
	add	eax,ebx
	vpalignr	xmm0,xmm5,xmm4,8
	vpxor	xmm6,xmm6,xmm2
	add	edi,DWORD [32+esp]
	and	esi,ecx
	xor	ecx,edx
	shrd	ebx,ebx,7
	vpxor	xmm6,xmm6,xmm7
	vmovdqa	[80+esp],xmm2
	mov	ebp,eax
	xor	esi,ecx
	vmovdqa	xmm2,xmm1
	vpaddd	xmm1,xmm1,xmm5
	shld	eax,eax,5
	add	edi,esi
	vpxor	xmm6,xmm6,xmm0
	xor	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [36+esp]
	vpsrld	xmm0,xmm6,30
	vmovdqa	[16+esp],xmm1
	and	ebp,ebx
	xor	ebx,ecx
	shrd	eax,eax,7
	mov	esi,edi
	vpslld	xmm6,xmm6,2
	xor	ebp,ebx
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [40+esp]
	and	esi,eax
	vpor	xmm6,xmm6,xmm0
	xor	eax,ebx
	shrd	edi,edi,7
	vmovdqa	xmm0,[96+esp]
	mov	ebp,edx
	xor	esi,eax
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [44+esp]
	and	ebp,edi
	xor	edi,eax
	shrd	edx,edx,7
	mov	esi,ecx
	xor	ebp,edi
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edx
	xor	edx,edi
	add	ebx,ecx
	vpalignr	xmm1,xmm6,xmm5,8
	vpxor	xmm7,xmm7,xmm3
	add	eax,DWORD [48+esp]
	and	esi,edx
	xor	edx,edi
	shrd	ecx,ecx,7
	vpxor	xmm7,xmm7,xmm0
	vmovdqa	[96+esp],xmm3
	mov	ebp,ebx
	xor	esi,edx
	vmovdqa	xmm3,[144+esp]
	vpaddd	xmm2,xmm2,xmm6
	shld	ebx,ebx,5
	add	eax,esi
	vpxor	xmm7,xmm7,xmm1
	xor	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [52+esp]
	vpsrld	xmm1,xmm7,30
	vmovdqa	[32+esp],xmm2
	and	ebp,ecx
	xor	ecx,edx
	shrd	ebx,ebx,7
	mov	esi,eax
	vpslld	xmm7,xmm7,2
	xor	ebp,ecx
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [56+esp]
	and	esi,ebx
	vpor	xmm7,xmm7,xmm1
	xor	ebx,ecx
	shrd	eax,eax,7
	vmovdqa	xmm1,[64+esp]
	mov	ebp,edi
	xor	esi,ebx
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [60+esp]
	and	ebp,eax
	xor	eax,ebx
	shrd	edi,edi,7
	mov	esi,edx
	xor	ebp,eax
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,edi
	xor	edi,eax
	add	ecx,edx
	vpalignr	xmm2,xmm7,xmm6,8
	vpxor	xmm0,xmm0,xmm4
	add	ebx,DWORD [esp]
	and	esi,edi
	xor	edi,eax
	shrd	edx,edx,7
	vpxor	xmm0,xmm0,xmm1
	vmovdqa	[64+esp],xmm4
	mov	ebp,ecx
	xor	esi,edi
	vmovdqa	xmm4,xmm3
	vpaddd	xmm3,xmm3,xmm7
	shld	ecx,ecx,5
	add	ebx,esi
	vpxor	xmm0,xmm0,xmm2
	xor	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [4+esp]
	vpsrld	xmm2,xmm0,30
	vmovdqa	[48+esp],xmm3
	and	ebp,edx
	xor	edx,edi
	shrd	ecx,ecx,7
	mov	esi,ebx
	vpslld	xmm0,xmm0,2
	xor	ebp,edx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [8+esp]
	and	esi,ecx
	vpor	xmm0,xmm0,xmm2
	xor	ecx,edx
	shrd	ebx,ebx,7
	vmovdqa	xmm2,[80+esp]
	mov	ebp,eax
	xor	esi,ecx
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [12+esp]
	and	ebp,ebx
	xor	ebx,ecx
	shrd	eax,eax,7
	mov	esi,edi
	xor	ebp,ebx
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,eax
	xor	eax,ebx
	add	edx,edi
	vpalignr	xmm3,xmm0,xmm7,8
	vpxor	xmm1,xmm1,xmm5
	add	ecx,DWORD [16+esp]
	and	esi,eax
	xor	eax,ebx
	shrd	edi,edi,7
	vpxor	xmm1,xmm1,xmm2
	vmovdqa	[80+esp],xmm5
	mov	ebp,edx
	xor	esi,eax
	vmovdqa	xmm5,xmm4
	vpaddd	xmm4,xmm4,xmm0
	shld	edx,edx,5
	add	ecx,esi
	vpxor	xmm1,xmm1,xmm3
	xor	ebp,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [20+esp]
	vpsrld	xmm3,xmm1,30
	vmovdqa	[esp],xmm4
	and	ebp,edi
	xor	edi,eax
	shrd	edx,edx,7
	mov	esi,ecx
	vpslld	xmm1,xmm1,2
	xor	ebp,edi
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [24+esp]
	and	esi,edx
	vpor	xmm1,xmm1,xmm3
	xor	edx,edi
	shrd	ecx,ecx,7
	vmovdqa	xmm3,[96+esp]
	mov	ebp,ebx
	xor	esi,edx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [28+esp]
	and	ebp,ecx
	xor	ecx,edx
	shrd	ebx,ebx,7
	mov	esi,eax
	xor	ebp,ecx
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ebx
	xor	ebx,ecx
	add	edi,eax
	vpalignr	xmm4,xmm1,xmm0,8
	vpxor	xmm2,xmm2,xmm6
	add	edx,DWORD [32+esp]
	and	esi,ebx
	xor	ebx,ecx
	shrd	eax,eax,7
	vpxor	xmm2,xmm2,xmm3
	vmovdqa	[96+esp],xmm6
	mov	ebp,edi
	xor	esi,ebx
	vmovdqa	xmm6,xmm5
	vpaddd	xmm5,xmm5,xmm1
	shld	edi,edi,5
	add	edx,esi
	vpxor	xmm2,xmm2,xmm4
	xor	ebp,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [36+esp]
	vpsrld	xmm4,xmm2,30
	vmovdqa	[16+esp],xmm5
	and	ebp,eax
	xor	eax,ebx
	shrd	edi,edi,7
	mov	esi,edx
	vpslld	xmm2,xmm2,2
	xor	ebp,eax
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [40+esp]
	and	esi,edi
	vpor	xmm2,xmm2,xmm4
	xor	edi,eax
	shrd	edx,edx,7
	vmovdqa	xmm4,[64+esp]
	mov	ebp,ecx
	xor	esi,edi
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [44+esp]
	and	ebp,edx
	xor	edx,edi
	shrd	ecx,ecx,7
	mov	esi,ebx
	xor	ebp,edx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	add	eax,ebx
	vpalignr	xmm5,xmm2,xmm1,8
	vpxor	xmm3,xmm3,xmm7
	add	edi,DWORD [48+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	vpxor	xmm3,xmm3,xmm4
	vmovdqa	[64+esp],xmm7
	add	edi,esi
	xor	ebp,ecx
	vmovdqa	xmm7,xmm6
	vpaddd	xmm6,xmm6,xmm2
	shrd	ebx,ebx,7
	add	edi,eax
	vpxor	xmm3,xmm3,xmm5
	add	edx,DWORD [52+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	vpsrld	xmm5,xmm3,30
	vmovdqa	[32+esp],xmm6
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpslld	xmm3,xmm3,2
	add	ecx,DWORD [56+esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpor	xmm3,xmm3,xmm5
	add	ebx,DWORD [60+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [esp]
	vpaddd	xmm7,xmm7,xmm3
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	vmovdqa	[48+esp],xmm7
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [4+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [8+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [12+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	mov	ebp,DWORD [196+esp]
	cmp	ebp,DWORD [200+esp]
	je	NEAR L$010done
	vmovdqa	xmm7,[160+esp]
	vmovdqa	xmm6,[176+esp]
	vmovdqu	xmm0,[ebp]
	vmovdqu	xmm1,[16+ebp]
	vmovdqu	xmm2,[32+ebp]
	vmovdqu	xmm3,[48+ebp]
	add	ebp,64
	vpshufb	xmm0,xmm0,xmm6
	mov	DWORD [196+esp],ebp
	vmovdqa	[96+esp],xmm7
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	vpshufb	xmm1,xmm1,xmm6
	mov	ebp,ecx
	shld	ecx,ecx,5
	vpaddd	xmm4,xmm0,xmm7
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vmovdqa	[esp],xmm4
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	vpshufb	xmm2,xmm2,xmm6
	mov	ebp,edx
	shld	edx,edx,5
	vpaddd	xmm5,xmm1,xmm7
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	vmovdqa	[16+esp],xmm5
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	vpshufb	xmm3,xmm3,xmm6
	mov	ebp,edi
	shld	edi,edi,5
	vpaddd	xmm6,xmm2,xmm7
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	vmovdqa	[32+esp],xmm6
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	shrd	ecx,ecx,7
	add	eax,ebx
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	ebx,ecx
	mov	DWORD [8+ebp],ecx
	xor	ebx,edx
	mov	DWORD [12+ebp],edx
	mov	DWORD [16+ebp],edi
	mov	ebp,esi
	and	esi,ebx
	mov	ebx,ebp
	jmp	NEAR L$009loop
align	16
L$010done:
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	shrd	ecx,ecx,7
	add	eax,ebx
	vzeroall
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	mov	esp,DWORD [204+esp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	DWORD [8+ebp],ecx
	mov	DWORD [12+ebp],edx
	mov	DWORD [16+ebp],edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$K_XX_XX:
dd	1518500249,1518500249,1518500249,1518500249
dd	1859775393,1859775393,1859775393,1859775393
dd	2400959708,2400959708,2400959708,2400959708
dd	3395469782,3395469782,3395469782,3395469782
dd	66051,67438087,134810123,202182159
db	15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
db	83,72,65,49,32,98,108,111,99,107,32,116,114,97,110,115
db	102,111,114,109,32,102,111,114,32,120,56,54,44,32,67,82
db	89,80,84,79,71,65,77,83,32,98,121,32,60,97,112,112
db	114,111,64,111,112,101,110,115,115,108,46,111,114,103,62,0
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/sha/sha256-586.asm                        0000664 0000000 0000000 00000337545 14746647661 0025576 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_sha256_block_data_order
align	16
_sha256_block_data_order:
L$_sha256_block_data_order_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [20+esp]
	mov	edi,DWORD [24+esp]
	mov	eax,DWORD [28+esp]
	mov	ebx,esp
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	ebp,[(L$001K256-L$000pic_point)+ebp]
	sub	esp,16
	and	esp,-64
	shl	eax,6
	add	eax,edi
	mov	DWORD [esp],esi
	mov	DWORD [4+esp],edi
	mov	DWORD [8+esp],eax
	mov	DWORD [12+esp],ebx
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [edx]
	mov	ebx,DWORD [4+edx]
	test	ecx,1048576
	jnz	NEAR L$002loop
	mov	edx,DWORD [8+edx]
	test	ecx,16777216
	jz	NEAR L$003no_xmm
	and	ecx,1073741824
	and	ebx,268435968
	test	edx,536870912
	jnz	NEAR L$004shaext
	or	ecx,ebx
	and	ecx,1342177280
	cmp	ecx,1342177280
	je	NEAR L$005AVX
	test	ebx,512
	jnz	NEAR L$006SSSE3
L$003no_xmm:
	sub	eax,edi
	cmp	eax,256
	jae	NEAR L$007unrolled
	jmp	NEAR L$002loop
align	16
L$002loop:
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	bswap	eax
	mov	edx,DWORD [12+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	mov	eax,DWORD [16+edi]
	mov	ebx,DWORD [20+edi]
	mov	ecx,DWORD [24+edi]
	bswap	eax
	mov	edx,DWORD [28+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	mov	eax,DWORD [32+edi]
	mov	ebx,DWORD [36+edi]
	mov	ecx,DWORD [40+edi]
	bswap	eax
	mov	edx,DWORD [44+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	mov	eax,DWORD [48+edi]
	mov	ebx,DWORD [52+edi]
	mov	ecx,DWORD [56+edi]
	bswap	eax
	mov	edx,DWORD [60+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	add	edi,64
	lea	esp,[esp-36]
	mov	DWORD [104+esp],edi
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [8+esp],ebx
	xor	ebx,ecx
	mov	DWORD [12+esp],ecx
	mov	DWORD [16+esp],edi
	mov	DWORD [esp],ebx
	mov	edx,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ebx
	mov	DWORD [28+esp],ecx
	mov	DWORD [32+esp],edi
align	16
L$00800_15:
	mov	ecx,edx
	mov	esi,DWORD [24+esp]
	ror	ecx,14
	mov	edi,DWORD [28+esp]
	xor	ecx,edx
	xor	esi,edi
	mov	ebx,DWORD [96+esp]
	ror	ecx,5
	and	esi,edx
	mov	DWORD [20+esp],edx
	xor	edx,ecx
	add	ebx,DWORD [32+esp]
	xor	esi,edi
	ror	edx,6
	mov	ecx,eax
	add	ebx,esi
	ror	ecx,9
	add	ebx,edx
	mov	edi,DWORD [8+esp]
	xor	ecx,eax
	mov	DWORD [4+esp],eax
	lea	esp,[esp-4]
	ror	ecx,11
	mov	esi,DWORD [ebp]
	xor	ecx,eax
	mov	edx,DWORD [20+esp]
	xor	eax,edi
	ror	ecx,2
	add	ebx,esi
	mov	DWORD [esp],eax
	add	edx,ebx
	and	eax,DWORD [4+esp]
	add	ebx,ecx
	xor	eax,edi
	add	ebp,4
	add	eax,ebx
	cmp	esi,3248222580
	jne	NEAR L$00800_15
	mov	ecx,DWORD [156+esp]
	jmp	NEAR L$00916_63
align	16
L$00916_63:
	mov	ebx,ecx
	mov	esi,DWORD [104+esp]
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [160+esp]
	shr	edi,10
	add	ebx,DWORD [124+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [24+esp]
	ror	ecx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	ecx,edx
	xor	esi,edi
	mov	DWORD [96+esp],ebx
	ror	ecx,5
	and	esi,edx
	mov	DWORD [20+esp],edx
	xor	edx,ecx
	add	ebx,DWORD [32+esp]
	xor	esi,edi
	ror	edx,6
	mov	ecx,eax
	add	ebx,esi
	ror	ecx,9
	add	ebx,edx
	mov	edi,DWORD [8+esp]
	xor	ecx,eax
	mov	DWORD [4+esp],eax
	lea	esp,[esp-4]
	ror	ecx,11
	mov	esi,DWORD [ebp]
	xor	ecx,eax
	mov	edx,DWORD [20+esp]
	xor	eax,edi
	ror	ecx,2
	add	ebx,esi
	mov	DWORD [esp],eax
	add	edx,ebx
	and	eax,DWORD [4+esp]
	add	ebx,ecx
	xor	eax,edi
	mov	ecx,DWORD [156+esp]
	add	ebp,4
	add	eax,ebx
	cmp	esi,3329325298
	jne	NEAR L$00916_63
	mov	esi,DWORD [356+esp]
	mov	ebx,DWORD [8+esp]
	mov	ecx,DWORD [16+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	eax,DWORD [24+esp]
	mov	ebx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	mov	edi,DWORD [360+esp]
	add	edx,DWORD [16+esi]
	add	eax,DWORD [20+esi]
	add	ebx,DWORD [24+esi]
	add	ecx,DWORD [28+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],eax
	mov	DWORD [24+esi],ebx
	mov	DWORD [28+esi],ecx
	lea	esp,[356+esp]
	sub	ebp,256
	cmp	edi,DWORD [8+esp]
	jb	NEAR L$002loop
	mov	esp,DWORD [12+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$001K256:
dd	1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298
dd	66051,67438087,134810123,202182159
db	83,72,65,50,53,54,32,98,108,111,99,107,32,116,114,97
db	110,115,102,111,114,109,32,102,111,114,32,120,56,54,44,32
db	67,82,89,80,84,79,71,65,77,83,32,98,121,32,60,97
db	112,112,114,111,64,111,112,101,110,115,115,108,46,111,114,103
db	62,0
align	16
L$007unrolled:
	lea	esp,[esp-96]
	mov	eax,DWORD [esi]
	mov	ebp,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	ebx,DWORD [12+esi]
	mov	DWORD [4+esp],ebp
	xor	ebp,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],ebx
	mov	edx,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],ebx
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	jmp	NEAR L$010grand_loop
align	16
L$010grand_loop:
	mov	ebx,DWORD [edi]
	mov	ecx,DWORD [4+edi]
	bswap	ebx
	mov	esi,DWORD [8+edi]
	bswap	ecx
	mov	DWORD [32+esp],ebx
	bswap	esi
	mov	DWORD [36+esp],ecx
	mov	DWORD [40+esp],esi
	mov	ebx,DWORD [12+edi]
	mov	ecx,DWORD [16+edi]
	bswap	ebx
	mov	esi,DWORD [20+edi]
	bswap	ecx
	mov	DWORD [44+esp],ebx
	bswap	esi
	mov	DWORD [48+esp],ecx
	mov	DWORD [52+esp],esi
	mov	ebx,DWORD [24+edi]
	mov	ecx,DWORD [28+edi]
	bswap	ebx
	mov	esi,DWORD [32+edi]
	bswap	ecx
	mov	DWORD [56+esp],ebx
	bswap	esi
	mov	DWORD [60+esp],ecx
	mov	DWORD [64+esp],esi
	mov	ebx,DWORD [36+edi]
	mov	ecx,DWORD [40+edi]
	bswap	ebx
	mov	esi,DWORD [44+edi]
	bswap	ecx
	mov	DWORD [68+esp],ebx
	bswap	esi
	mov	DWORD [72+esp],ecx
	mov	DWORD [76+esp],esi
	mov	ebx,DWORD [48+edi]
	mov	ecx,DWORD [52+edi]
	bswap	ebx
	mov	esi,DWORD [56+edi]
	bswap	ecx
	mov	DWORD [80+esp],ebx
	bswap	esi
	mov	DWORD [84+esp],ecx
	mov	DWORD [88+esp],esi
	mov	ebx,DWORD [60+edi]
	add	edi,64
	bswap	ebx
	mov	DWORD [100+esp],edi
	mov	DWORD [92+esp],ebx
	mov	ecx,edx
	mov	esi,DWORD [20+esp]
	ror	edx,14
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	ebx,DWORD [32+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1116352408+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	ebx,DWORD [36+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1899447441+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [12+esp]
	ror	edx,14
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	ebx,DWORD [40+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3049323471+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	ebx,DWORD [44+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3921009573+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [4+esp]
	ror	edx,14
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	ebx,DWORD [48+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[961987163+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [esp]
	ror	edx,14
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	ebx,DWORD [52+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1508970993+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [28+esp]
	ror	edx,14
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	ebx,DWORD [56+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2453635748+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	ebx,DWORD [60+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2870763221+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [20+esp]
	ror	edx,14
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	ebx,DWORD [64+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3624381080+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	ebx,DWORD [68+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[310598401+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [12+esp]
	ror	edx,14
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	ebx,DWORD [72+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[607225278+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	ebx,DWORD [76+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1426881987+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [4+esp]
	ror	edx,14
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	ebx,DWORD [80+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1925078388+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [esp]
	ror	edx,14
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	ebx,DWORD [84+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2162078206+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [28+esp]
	ror	edx,14
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	ebx,DWORD [88+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2614888103+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	ebx,DWORD [92+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3248222580+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [36+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [88+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [32+esp]
	shr	edi,10
	add	ebx,DWORD [68+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [32+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3835390401+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [40+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [92+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [36+esp]
	shr	edi,10
	add	ebx,DWORD [72+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [36+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[4022224774+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [44+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [32+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [40+esp]
	shr	edi,10
	add	ebx,DWORD [76+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [40+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[264347078+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [48+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [36+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [44+esp]
	shr	edi,10
	add	ebx,DWORD [80+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [44+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[604807628+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [52+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [40+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [48+esp]
	shr	edi,10
	add	ebx,DWORD [84+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [48+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[770255983+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [56+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [44+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [52+esp]
	shr	edi,10
	add	ebx,DWORD [88+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [52+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1249150122+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [60+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [48+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [56+esp]
	shr	edi,10
	add	ebx,DWORD [92+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [56+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1555081692+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [64+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [52+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [60+esp]
	shr	edi,10
	add	ebx,DWORD [32+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [60+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1996064986+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [68+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [56+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [64+esp]
	shr	edi,10
	add	ebx,DWORD [36+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [64+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2554220882+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [72+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [60+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [68+esp]
	shr	edi,10
	add	ebx,DWORD [40+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [68+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2821834349+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [76+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [64+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [72+esp]
	shr	edi,10
	add	ebx,DWORD [44+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [72+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2952996808+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [80+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [68+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [76+esp]
	shr	edi,10
	add	ebx,DWORD [48+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [76+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3210313671+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [84+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [72+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [80+esp]
	shr	edi,10
	add	ebx,DWORD [52+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [80+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3336571891+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [88+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [76+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [84+esp]
	shr	edi,10
	add	ebx,DWORD [56+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [84+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3584528711+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [92+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [80+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [88+esp]
	shr	edi,10
	add	ebx,DWORD [60+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [88+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[113926993+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [32+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [84+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [92+esp]
	shr	edi,10
	add	ebx,DWORD [64+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [92+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[338241895+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [36+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [88+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [32+esp]
	shr	edi,10
	add	ebx,DWORD [68+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [32+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[666307205+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [40+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [92+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [36+esp]
	shr	edi,10
	add	ebx,DWORD [72+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [36+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[773529912+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [44+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [32+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [40+esp]
	shr	edi,10
	add	ebx,DWORD [76+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [40+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1294757372+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [48+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [36+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [44+esp]
	shr	edi,10
	add	ebx,DWORD [80+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [44+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1396182291+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [52+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [40+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [48+esp]
	shr	edi,10
	add	ebx,DWORD [84+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [48+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1695183700+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [56+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [44+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [52+esp]
	shr	edi,10
	add	ebx,DWORD [88+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [52+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1986661051+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [60+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [48+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [56+esp]
	shr	edi,10
	add	ebx,DWORD [92+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [56+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2177026350+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [64+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [52+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [60+esp]
	shr	edi,10
	add	ebx,DWORD [32+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [60+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2456956037+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [68+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [56+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [64+esp]
	shr	edi,10
	add	ebx,DWORD [36+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [64+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2730485921+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [72+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [60+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [68+esp]
	shr	edi,10
	add	ebx,DWORD [40+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [68+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2820302411+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [76+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [64+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [72+esp]
	shr	edi,10
	add	ebx,DWORD [44+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [72+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3259730800+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [80+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [68+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [76+esp]
	shr	edi,10
	add	ebx,DWORD [48+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [76+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3345764771+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [84+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [72+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [80+esp]
	shr	edi,10
	add	ebx,DWORD [52+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [80+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3516065817+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [88+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [76+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [84+esp]
	shr	edi,10
	add	ebx,DWORD [56+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [84+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3600352804+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [92+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [80+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [88+esp]
	shr	edi,10
	add	ebx,DWORD [60+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [88+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[4094571909+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [32+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [84+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [92+esp]
	shr	edi,10
	add	ebx,DWORD [64+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [92+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[275423344+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [36+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [88+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [32+esp]
	shr	edi,10
	add	ebx,DWORD [68+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [32+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[430227734+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [40+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [92+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [36+esp]
	shr	edi,10
	add	ebx,DWORD [72+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [36+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[506948616+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [44+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [32+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [40+esp]
	shr	edi,10
	add	ebx,DWORD [76+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [40+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[659060556+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [48+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [36+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [44+esp]
	shr	edi,10
	add	ebx,DWORD [80+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [44+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[883997877+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [52+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [40+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [48+esp]
	shr	edi,10
	add	ebx,DWORD [84+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [48+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[958139571+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [56+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [44+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [52+esp]
	shr	edi,10
	add	ebx,DWORD [88+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [52+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1322822218+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [60+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [48+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [56+esp]
	shr	edi,10
	add	ebx,DWORD [92+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [56+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1537002063+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [64+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [52+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [60+esp]
	shr	edi,10
	add	ebx,DWORD [32+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [60+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1747873779+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [68+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [56+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [64+esp]
	shr	edi,10
	add	ebx,DWORD [36+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [64+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1955562222+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [72+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [60+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [68+esp]
	shr	edi,10
	add	ebx,DWORD [40+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [68+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2024104815+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [76+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [64+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [72+esp]
	shr	edi,10
	add	ebx,DWORD [44+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [72+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2227730452+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [80+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [68+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [76+esp]
	shr	edi,10
	add	ebx,DWORD [48+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [76+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2361852424+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [84+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [72+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [80+esp]
	shr	edi,10
	add	ebx,DWORD [52+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [80+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2428436474+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [88+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [76+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [84+esp]
	shr	edi,10
	add	ebx,DWORD [56+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [84+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2756734187+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [92+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [80+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [88+esp]
	shr	edi,10
	add	ebx,DWORD [60+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3204031479+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [32+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [84+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [92+esp]
	shr	edi,10
	add	ebx,DWORD [64+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3329325298+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [96+esp]
	xor	ebp,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebp,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebp
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ebx,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ebx,DWORD [24+esi]
	add	ecx,DWORD [28+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [24+esi],ebx
	mov	DWORD [28+esi],ecx
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ebx
	mov	DWORD [28+esp],ecx
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$010grand_loop
	mov	esp,DWORD [108+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$004shaext:
	sub	esp,32
	movdqu	xmm1,[esi]
	lea	ebp,[128+ebp]
	movdqu	xmm2,[16+esi]
	movdqa	xmm7,[128+ebp]
	pshufd	xmm0,xmm1,27
	pshufd	xmm1,xmm1,177
	pshufd	xmm2,xmm2,27
db	102,15,58,15,202,8
	punpcklqdq	xmm2,xmm0
	jmp	NEAR L$011loop_shaext
align	16
L$011loop_shaext:
	movdqu	xmm3,[edi]
	movdqu	xmm4,[16+edi]
	movdqu	xmm5,[32+edi]
db	102,15,56,0,223
	movdqu	xmm6,[48+edi]
	movdqa	[16+esp],xmm2
	movdqa	xmm0,[ebp-128]
	paddd	xmm0,xmm3
db	102,15,56,0,231
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	nop
	movdqa	[esp],xmm1
db	15,56,203,202
	movdqa	xmm0,[ebp-112]
	paddd	xmm0,xmm4
db	102,15,56,0,239
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	lea	edi,[64+edi]
db	15,56,204,220
db	15,56,203,202
	movdqa	xmm0,[ebp-96]
	paddd	xmm0,xmm5
db	102,15,56,0,247
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm6
db	102,15,58,15,253,4
	nop
	paddd	xmm3,xmm7
db	15,56,204,229
db	15,56,203,202
	movdqa	xmm0,[ebp-80]
	paddd	xmm0,xmm6
db	15,56,205,222
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm3
db	102,15,58,15,254,4
	nop
	paddd	xmm4,xmm7
db	15,56,204,238
db	15,56,203,202
	movdqa	xmm0,[ebp-64]
	paddd	xmm0,xmm3
db	15,56,205,227
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm4
db	102,15,58,15,251,4
	nop
	paddd	xmm5,xmm7
db	15,56,204,243
db	15,56,203,202
	movdqa	xmm0,[ebp-48]
	paddd	xmm0,xmm4
db	15,56,205,236
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm5
db	102,15,58,15,252,4
	nop
	paddd	xmm6,xmm7
db	15,56,204,220
db	15,56,203,202
	movdqa	xmm0,[ebp-32]
	paddd	xmm0,xmm5
db	15,56,205,245
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm6
db	102,15,58,15,253,4
	nop
	paddd	xmm3,xmm7
db	15,56,204,229
db	15,56,203,202
	movdqa	xmm0,[ebp-16]
	paddd	xmm0,xmm6
db	15,56,205,222
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm3
db	102,15,58,15,254,4
	nop
	paddd	xmm4,xmm7
db	15,56,204,238
db	15,56,203,202
	movdqa	xmm0,[ebp]
	paddd	xmm0,xmm3
db	15,56,205,227
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm4
db	102,15,58,15,251,4
	nop
	paddd	xmm5,xmm7
db	15,56,204,243
db	15,56,203,202
	movdqa	xmm0,[16+ebp]
	paddd	xmm0,xmm4
db	15,56,205,236
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm5
db	102,15,58,15,252,4
	nop
	paddd	xmm6,xmm7
db	15,56,204,220
db	15,56,203,202
	movdqa	xmm0,[32+ebp]
	paddd	xmm0,xmm5
db	15,56,205,245
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm6
db	102,15,58,15,253,4
	nop
	paddd	xmm3,xmm7
db	15,56,204,229
db	15,56,203,202
	movdqa	xmm0,[48+ebp]
	paddd	xmm0,xmm6
db	15,56,205,222
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm3
db	102,15,58,15,254,4
	nop
	paddd	xmm4,xmm7
db	15,56,204,238
db	15,56,203,202
	movdqa	xmm0,[64+ebp]
	paddd	xmm0,xmm3
db	15,56,205,227
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm4
db	102,15,58,15,251,4
	nop
	paddd	xmm5,xmm7
db	15,56,204,243
db	15,56,203,202
	movdqa	xmm0,[80+ebp]
	paddd	xmm0,xmm4
db	15,56,205,236
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm5
db	102,15,58,15,252,4
db	15,56,203,202
	paddd	xmm6,xmm7
	movdqa	xmm0,[96+ebp]
	paddd	xmm0,xmm5
db	15,56,203,209
	pshufd	xmm0,xmm0,14
db	15,56,205,245
	movdqa	xmm7,[128+ebp]
db	15,56,203,202
	movdqa	xmm0,[112+ebp]
	paddd	xmm0,xmm6
	nop
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	cmp	eax,edi
	nop
db	15,56,203,202
	paddd	xmm2,[16+esp]
	paddd	xmm1,[esp]
	jnz	NEAR L$011loop_shaext
	pshufd	xmm2,xmm2,177
	pshufd	xmm7,xmm1,27
	pshufd	xmm1,xmm1,177
	punpckhqdq	xmm1,xmm2
db	102,15,58,15,215,8
	mov	esp,DWORD [44+esp]
	movdqu	[esi],xmm1
	movdqu	[16+esi],xmm2
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$006SSSE3:
	lea	esp,[esp-96]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [4+esp],ebx
	xor	ebx,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edi
	mov	edx,DWORD [16+esi]
	mov	edi,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	movdqa	xmm7,[256+ebp]
	jmp	NEAR L$012grand_ssse3
align	16
L$012grand_ssse3:
	movdqu	xmm0,[edi]
	movdqu	xmm1,[16+edi]
	movdqu	xmm2,[32+edi]
	movdqu	xmm3,[48+edi]
	add	edi,64
db	102,15,56,0,199
	mov	DWORD [100+esp],edi
db	102,15,56,0,207
	movdqa	xmm4,[ebp]
db	102,15,56,0,215
	movdqa	xmm5,[16+ebp]
	paddd	xmm4,xmm0
db	102,15,56,0,223
	movdqa	xmm6,[32+ebp]
	paddd	xmm5,xmm1
	movdqa	xmm7,[48+ebp]
	movdqa	[32+esp],xmm4
	paddd	xmm6,xmm2
	movdqa	[48+esp],xmm5
	paddd	xmm7,xmm3
	movdqa	[64+esp],xmm6
	movdqa	[80+esp],xmm7
	jmp	NEAR L$013ssse3_00_47
align	16
L$013ssse3_00_47:
	add	ebp,64
	mov	ecx,edx
	movdqa	xmm4,xmm1
	ror	edx,14
	mov	esi,DWORD [20+esp]
	movdqa	xmm7,xmm3
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
db	102,15,58,15,224,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,250,4
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [4+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm0,xmm7
	mov	DWORD [esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm3,250
	xor	ecx,esi
	add	edx,DWORD [32+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [12+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm0,xmm4
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [36+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [8+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm0,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	pshufd	xmm7,xmm0,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [4+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[ebp]
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm0,xmm7
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	paddd	xmm6,xmm0
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	movdqa	[32+esp],xmm6
	mov	ecx,edx
	movdqa	xmm4,xmm2
	ror	edx,14
	mov	esi,DWORD [4+esp]
	movdqa	xmm7,xmm0
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
db	102,15,58,15,225,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,251,4
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [20+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm1,xmm7
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm0,250
	xor	ecx,esi
	add	edx,DWORD [48+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [28+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm1,xmm4
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [52+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [24+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm1,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	pshufd	xmm7,xmm1,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [20+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[16+ebp]
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm1,xmm7
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	paddd	xmm6,xmm1
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	movdqa	[48+esp],xmm6
	mov	ecx,edx
	movdqa	xmm4,xmm3
	ror	edx,14
	mov	esi,DWORD [20+esp]
	movdqa	xmm7,xmm1
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
db	102,15,58,15,226,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,248,4
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [4+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm2,xmm7
	mov	DWORD [esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm1,250
	xor	ecx,esi
	add	edx,DWORD [64+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [12+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm2,xmm4
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [68+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [8+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm2,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	pshufd	xmm7,xmm2,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [4+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[32+ebp]
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm2,xmm7
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	paddd	xmm6,xmm2
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	movdqa	[64+esp],xmm6
	mov	ecx,edx
	movdqa	xmm4,xmm0
	ror	edx,14
	mov	esi,DWORD [4+esp]
	movdqa	xmm7,xmm2
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
db	102,15,58,15,227,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,249,4
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [20+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm3,xmm7
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm2,250
	xor	ecx,esi
	add	edx,DWORD [80+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [28+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm3,xmm4
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [84+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [24+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm3,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	pshufd	xmm7,xmm3,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [20+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[48+ebp]
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm3,xmm7
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	paddd	xmm6,xmm3
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	movdqa	[80+esp],xmm6
	cmp	DWORD [64+ebp],66051
	jne	NEAR L$013ssse3_00_47
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [36+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [52+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [68+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [84+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	esi,DWORD [96+esp]
	xor	ebx,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebx
	xor	ebx,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ecx,DWORD [24+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [28+esp]
	mov	DWORD [24+esi],ecx
	add	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esi],edi
	mov	DWORD [28+esp],edi
	mov	edi,DWORD [100+esp]
	movdqa	xmm7,[64+ebp]
	sub	ebp,192
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$012grand_ssse3
	mov	esp,DWORD [108+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$005AVX:
	and	edx,264
	cmp	edx,264
	je	NEAR L$014AVX_BMI
	lea	esp,[esp-96]
	vzeroall
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [4+esp],ebx
	xor	ebx,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edi
	mov	edx,DWORD [16+esi]
	mov	edi,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	vmovdqa	xmm7,[256+ebp]
	jmp	NEAR L$015grand_avx
align	32
L$015grand_avx:
	vmovdqu	xmm0,[edi]
	vmovdqu	xmm1,[16+edi]
	vmovdqu	xmm2,[32+edi]
	vmovdqu	xmm3,[48+edi]
	add	edi,64
	vpshufb	xmm0,xmm0,xmm7
	mov	DWORD [100+esp],edi
	vpshufb	xmm1,xmm1,xmm7
	vpshufb	xmm2,xmm2,xmm7
	vpaddd	xmm4,xmm0,[ebp]
	vpshufb	xmm3,xmm3,xmm7
	vpaddd	xmm5,xmm1,[16+ebp]
	vpaddd	xmm6,xmm2,[32+ebp]
	vpaddd	xmm7,xmm3,[48+ebp]
	vmovdqa	[32+esp],xmm4
	vmovdqa	[48+esp],xmm5
	vmovdqa	[64+esp],xmm6
	vmovdqa	[80+esp],xmm7
	jmp	NEAR L$016avx_00_47
align	16
L$016avx_00_47:
	add	ebp,64
	vpalignr	xmm4,xmm1,xmm0,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	vpalignr	xmm7,xmm3,xmm2,4
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	vpaddd	xmm0,xmm0,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm3,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	vpaddd	xmm0,xmm0,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [36+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	vpaddd	xmm0,xmm0,xmm7
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	vpshufd	xmm7,xmm0,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	vpaddd	xmm0,xmm0,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	vpaddd	xmm6,xmm0,[ebp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	vmovdqa	[32+esp],xmm6
	vpalignr	xmm4,xmm2,xmm1,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	vpalignr	xmm7,xmm0,xmm3,4
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	vpaddd	xmm1,xmm1,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm0,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	vpaddd	xmm1,xmm1,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [52+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	vpaddd	xmm1,xmm1,xmm7
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	vpshufd	xmm7,xmm1,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	vpaddd	xmm1,xmm1,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	vpaddd	xmm6,xmm1,[16+ebp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	vmovdqa	[48+esp],xmm6
	vpalignr	xmm4,xmm3,xmm2,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	vpalignr	xmm7,xmm1,xmm0,4
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	vpaddd	xmm2,xmm2,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm1,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	vpaddd	xmm2,xmm2,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [68+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	vpaddd	xmm2,xmm2,xmm7
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	vpshufd	xmm7,xmm2,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	vpaddd	xmm2,xmm2,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	vpaddd	xmm6,xmm2,[32+ebp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	vmovdqa	[64+esp],xmm6
	vpalignr	xmm4,xmm0,xmm3,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	vpalignr	xmm7,xmm2,xmm1,4
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	vpaddd	xmm3,xmm3,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm2,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	vpaddd	xmm3,xmm3,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [84+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	vpaddd	xmm3,xmm3,xmm7
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	vpshufd	xmm7,xmm3,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	vpaddd	xmm3,xmm3,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	vpaddd	xmm6,xmm3,[48+ebp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	vmovdqa	[80+esp],xmm6
	cmp	DWORD [64+ebp],66051
	jne	NEAR L$016avx_00_47
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [36+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [52+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [68+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [84+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	esi,DWORD [96+esp]
	xor	ebx,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebx
	xor	ebx,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ecx,DWORD [24+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [28+esp]
	mov	DWORD [24+esi],ecx
	add	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esi],edi
	mov	DWORD [28+esp],edi
	mov	edi,DWORD [100+esp]
	vmovdqa	xmm7,[64+ebp]
	sub	ebp,192
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$015grand_avx
	mov	esp,DWORD [108+esp]
	vzeroall
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$014AVX_BMI:
	lea	esp,[esp-96]
	vzeroall
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [4+esp],ebx
	xor	ebx,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edi
	mov	edx,DWORD [16+esi]
	mov	edi,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	vmovdqa	xmm7,[256+ebp]
	jmp	NEAR L$017grand_avx_bmi
align	32
L$017grand_avx_bmi:
	vmovdqu	xmm0,[edi]
	vmovdqu	xmm1,[16+edi]
	vmovdqu	xmm2,[32+edi]
	vmovdqu	xmm3,[48+edi]
	add	edi,64
	vpshufb	xmm0,xmm0,xmm7
	mov	DWORD [100+esp],edi
	vpshufb	xmm1,xmm1,xmm7
	vpshufb	xmm2,xmm2,xmm7
	vpaddd	xmm4,xmm0,[ebp]
	vpshufb	xmm3,xmm3,xmm7
	vpaddd	xmm5,xmm1,[16+ebp]
	vpaddd	xmm6,xmm2,[32+ebp]
	vpaddd	xmm7,xmm3,[48+ebp]
	vmovdqa	[32+esp],xmm4
	vmovdqa	[48+esp],xmm5
	vmovdqa	[64+esp],xmm6
	vmovdqa	[80+esp],xmm7
	jmp	NEAR L$018avx_bmi_00_47
align	16
L$018avx_bmi_00_47:
	add	ebp,64
	vpalignr	xmm4,xmm1,xmm0,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	vpalignr	xmm7,xmm3,xmm2,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	vpaddd	xmm0,xmm0,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [32+esp]
	vpshufd	xmm7,xmm3,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [36+esp]
	vpaddd	xmm0,xmm0,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm0,xmm0,xmm7
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm0,80
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [40+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm0,xmm0,xmm7
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [44+esp]
	vpaddd	xmm6,xmm0,[ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[32+esp],xmm6
	vpalignr	xmm4,xmm2,xmm1,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	vpalignr	xmm7,xmm0,xmm3,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	vpaddd	xmm1,xmm1,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [48+esp]
	vpshufd	xmm7,xmm0,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [52+esp]
	vpaddd	xmm1,xmm1,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm1,xmm1,xmm7
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm1,80
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [56+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm1,xmm1,xmm7
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [60+esp]
	vpaddd	xmm6,xmm1,[16+ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[48+esp],xmm6
	vpalignr	xmm4,xmm3,xmm2,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	vpalignr	xmm7,xmm1,xmm0,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	vpaddd	xmm2,xmm2,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [64+esp]
	vpshufd	xmm7,xmm1,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [68+esp]
	vpaddd	xmm2,xmm2,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm2,xmm2,xmm7
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm2,80
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [72+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm2,xmm2,xmm7
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [76+esp]
	vpaddd	xmm6,xmm2,[32+ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[64+esp],xmm6
	vpalignr	xmm4,xmm0,xmm3,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	vpalignr	xmm7,xmm2,xmm1,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	vpaddd	xmm3,xmm3,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [80+esp]
	vpshufd	xmm7,xmm2,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [84+esp]
	vpaddd	xmm3,xmm3,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm3,xmm3,xmm7
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm3,80
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [88+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm3,xmm3,xmm7
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [92+esp]
	vpaddd	xmm6,xmm3,[48+ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[80+esp],xmm6
	cmp	DWORD [64+ebp],66051
	jne	NEAR L$018avx_bmi_00_47
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [36+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [44+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [52+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [60+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [68+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [76+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [84+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [92+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	mov	esi,DWORD [96+esp]
	xor	ebx,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebx
	xor	ebx,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ecx,DWORD [24+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [28+esp]
	mov	DWORD [24+esi],ecx
	add	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esi],edi
	mov	DWORD [28+esp],edi
	mov	edi,DWORD [100+esp]
	vmovdqa	xmm7,[64+ebp]
	sub	ebp,192
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$017grand_avx_bmi
	mov	esp,DWORD [108+esp]
	vzeroall
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                           node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/sha/sha512-586.asm                        0000664 0000000 0000000 00000130311 14746647661 0025547 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_sha512_block_data_order
align	16
_sha512_block_data_order:
L$_sha512_block_data_order_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [20+esp]
	mov	edi,DWORD [24+esp]
	mov	eax,DWORD [28+esp]
	mov	ebx,esp
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	ebp,[(L$001K512-L$000pic_point)+ebp]
	sub	esp,16
	and	esp,-64
	shl	eax,7
	add	eax,edi
	mov	DWORD [esp],esi
	mov	DWORD [4+esp],edi
	mov	DWORD [8+esp],eax
	mov	DWORD [12+esp],ebx
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [edx]
	test	ecx,67108864
	jz	NEAR L$002loop_x86
	mov	edx,DWORD [4+edx]
	movq	mm0,[esi]
	and	ecx,16777216
	movq	mm1,[8+esi]
	and	edx,512
	movq	mm2,[16+esi]
	or	ecx,edx
	movq	mm3,[24+esi]
	movq	mm4,[32+esi]
	movq	mm5,[40+esi]
	movq	mm6,[48+esi]
	movq	mm7,[56+esi]
	cmp	ecx,16777728
	je	NEAR L$003SSSE3
	sub	esp,80
	jmp	NEAR L$004loop_sse2
align	16
L$004loop_sse2:
	movq	[8+esp],mm1
	movq	[16+esp],mm2
	movq	[24+esp],mm3
	movq	[40+esp],mm5
	movq	[48+esp],mm6
	pxor	mm2,mm1
	movq	[56+esp],mm7
	movq	mm3,mm0
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	add	edi,8
	mov	edx,15
	bswap	eax
	bswap	ebx
	jmp	NEAR L$00500_14_sse2
align	16
L$00500_14_sse2:
	movd	mm1,eax
	mov	eax,DWORD [edi]
	movd	mm7,ebx
	mov	ebx,DWORD [4+edi]
	add	edi,8
	bswap	eax
	bswap	ebx
	punpckldq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	mm0,mm3
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm3,mm2
	movq	mm2,mm0
	add	ebp,8
	paddq	mm3,mm6
	movq	mm6,[48+esp]
	dec	edx
	jnz	NEAR L$00500_14_sse2
	movd	mm1,eax
	movd	mm7,ebx
	punpckldq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	mm0,mm3
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm7,[192+esp]
	paddq	mm3,mm2
	movq	mm2,mm0
	add	ebp,8
	paddq	mm3,mm6
	pxor	mm0,mm0
	mov	edx,32
	jmp	NEAR L$00616_79_sse2
align	16
L$00616_79_sse2:
	movq	mm5,[88+esp]
	movq	mm1,mm7
	psrlq	mm7,1
	movq	mm6,mm5
	psrlq	mm5,6
	psllq	mm1,56
	paddq	mm0,mm3
	movq	mm3,mm7
	psrlq	mm7,6
	pxor	mm3,mm1
	psllq	mm1,7
	pxor	mm3,mm7
	psrlq	mm7,1
	pxor	mm3,mm1
	movq	mm1,mm5
	psrlq	mm5,13
	pxor	mm7,mm3
	psllq	mm6,3
	pxor	mm1,mm5
	paddq	mm7,[200+esp]
	pxor	mm1,mm6
	psrlq	mm5,42
	paddq	mm7,[128+esp]
	pxor	mm1,mm5
	psllq	mm6,42
	movq	mm5,[40+esp]
	pxor	mm1,mm6
	movq	mm6,[48+esp]
	paddq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm7,[192+esp]
	paddq	mm2,mm6
	add	ebp,8
	movq	mm5,[88+esp]
	movq	mm1,mm7
	psrlq	mm7,1
	movq	mm6,mm5
	psrlq	mm5,6
	psllq	mm1,56
	paddq	mm2,mm3
	movq	mm3,mm7
	psrlq	mm7,6
	pxor	mm3,mm1
	psllq	mm1,7
	pxor	mm3,mm7
	psrlq	mm7,1
	pxor	mm3,mm1
	movq	mm1,mm5
	psrlq	mm5,13
	pxor	mm7,mm3
	psllq	mm6,3
	pxor	mm1,mm5
	paddq	mm7,[200+esp]
	pxor	mm1,mm6
	psrlq	mm5,42
	paddq	mm7,[128+esp]
	pxor	mm1,mm5
	psllq	mm6,42
	movq	mm5,[40+esp]
	pxor	mm1,mm6
	movq	mm6,[48+esp]
	paddq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm7,[192+esp]
	paddq	mm0,mm6
	add	ebp,8
	dec	edx
	jnz	NEAR L$00616_79_sse2
	paddq	mm0,mm3
	movq	mm1,[8+esp]
	movq	mm3,[24+esp]
	movq	mm5,[40+esp]
	movq	mm6,[48+esp]
	movq	mm7,[56+esp]
	pxor	mm2,mm1
	paddq	mm0,[esi]
	paddq	mm1,[8+esi]
	paddq	mm2,[16+esi]
	paddq	mm3,[24+esi]
	paddq	mm4,[32+esi]
	paddq	mm5,[40+esi]
	paddq	mm6,[48+esi]
	paddq	mm7,[56+esi]
	mov	eax,640
	movq	[esi],mm0
	movq	[8+esi],mm1
	movq	[16+esi],mm2
	movq	[24+esi],mm3
	movq	[32+esi],mm4
	movq	[40+esi],mm5
	movq	[48+esi],mm6
	movq	[56+esi],mm7
	lea	esp,[eax*1+esp]
	sub	ebp,eax
	cmp	edi,DWORD [88+esp]
	jb	NEAR L$004loop_sse2
	mov	esp,DWORD [92+esp]
	emms
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$003SSSE3:
	lea	edx,[esp-64]
	sub	esp,256
	movdqa	xmm1,[640+ebp]
	movdqu	xmm0,[edi]
db	102,15,56,0,193
	movdqa	xmm3,[ebp]
	movdqa	xmm2,xmm1
	movdqu	xmm1,[16+edi]
	paddq	xmm3,xmm0
db	102,15,56,0,202
	movdqa	[edx-128],xmm3
	movdqa	xmm4,[16+ebp]
	movdqa	xmm3,xmm2
	movdqu	xmm2,[32+edi]
	paddq	xmm4,xmm1
db	102,15,56,0,211
	movdqa	[edx-112],xmm4
	movdqa	xmm5,[32+ebp]
	movdqa	xmm4,xmm3
	movdqu	xmm3,[48+edi]
	paddq	xmm5,xmm2
db	102,15,56,0,220
	movdqa	[edx-96],xmm5
	movdqa	xmm6,[48+ebp]
	movdqa	xmm5,xmm4
	movdqu	xmm4,[64+edi]
	paddq	xmm6,xmm3
db	102,15,56,0,229
	movdqa	[edx-80],xmm6
	movdqa	xmm7,[64+ebp]
	movdqa	xmm6,xmm5
	movdqu	xmm5,[80+edi]
	paddq	xmm7,xmm4
db	102,15,56,0,238
	movdqa	[edx-64],xmm7
	movdqa	[edx],xmm0
	movdqa	xmm0,[80+ebp]
	movdqa	xmm7,xmm6
	movdqu	xmm6,[96+edi]
	paddq	xmm0,xmm5
db	102,15,56,0,247
	movdqa	[edx-48],xmm0
	movdqa	[16+edx],xmm1
	movdqa	xmm1,[96+ebp]
	movdqa	xmm0,xmm7
	movdqu	xmm7,[112+edi]
	paddq	xmm1,xmm6
db	102,15,56,0,248
	movdqa	[edx-32],xmm1
	movdqa	[32+edx],xmm2
	movdqa	xmm2,[112+ebp]
	movdqa	xmm0,[edx]
	paddq	xmm2,xmm7
	movdqa	[edx-16],xmm2
	nop
align	32
L$007loop_ssse3:
	movdqa	xmm2,[16+edx]
	movdqa	[48+edx],xmm3
	lea	ebp,[128+ebp]
	movq	[8+esp],mm1
	mov	ebx,edi
	movq	[16+esp],mm2
	lea	edi,[128+edi]
	movq	[24+esp],mm3
	cmp	edi,eax
	movq	[40+esp],mm5
	cmovb	ebx,edi
	movq	[48+esp],mm6
	mov	ecx,4
	pxor	mm2,mm1
	movq	[56+esp],mm7
	pxor	mm3,mm3
	jmp	NEAR L$00800_47_ssse3
align	32
L$00800_47_ssse3:
	movdqa	xmm3,xmm5
	movdqa	xmm1,xmm2
db	102,15,58,15,208,8
	movdqa	[edx],xmm4
db	102,15,58,15,220,8
	movdqa	xmm4,xmm2
	psrlq	xmm2,7
	paddq	xmm0,xmm3
	movdqa	xmm3,xmm4
	psrlq	xmm4,1
	psllq	xmm3,56
	pxor	xmm2,xmm4
	psrlq	xmm4,7
	pxor	xmm2,xmm3
	psllq	xmm3,7
	pxor	xmm2,xmm4
	movdqa	xmm4,xmm7
	pxor	xmm2,xmm3
	movdqa	xmm3,xmm7
	psrlq	xmm4,6
	paddq	xmm0,xmm2
	movdqa	xmm2,xmm7
	psrlq	xmm3,19
	psllq	xmm2,3
	pxor	xmm4,xmm3
	psrlq	xmm3,42
	pxor	xmm4,xmm2
	psllq	xmm2,42
	pxor	xmm4,xmm3
	movdqa	xmm3,[32+edx]
	pxor	xmm4,xmm2
	movdqa	xmm2,[ebp]
	movq	mm1,mm4
	paddq	xmm0,xmm4
	movq	mm7,[edx-128]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	paddq	xmm2,xmm0
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-120]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-128],xmm2
	movdqa	xmm4,xmm6
	movdqa	xmm2,xmm3
db	102,15,58,15,217,8
	movdqa	[16+edx],xmm5
db	102,15,58,15,229,8
	movdqa	xmm5,xmm3
	psrlq	xmm3,7
	paddq	xmm1,xmm4
	movdqa	xmm4,xmm5
	psrlq	xmm5,1
	psllq	xmm4,56
	pxor	xmm3,xmm5
	psrlq	xmm5,7
	pxor	xmm3,xmm4
	psllq	xmm4,7
	pxor	xmm3,xmm5
	movdqa	xmm5,xmm0
	pxor	xmm3,xmm4
	movdqa	xmm4,xmm0
	psrlq	xmm5,6
	paddq	xmm1,xmm3
	movdqa	xmm3,xmm0
	psrlq	xmm4,19
	psllq	xmm3,3
	pxor	xmm5,xmm4
	psrlq	xmm4,42
	pxor	xmm5,xmm3
	psllq	xmm3,42
	pxor	xmm5,xmm4
	movdqa	xmm4,[48+edx]
	pxor	xmm5,xmm3
	movdqa	xmm3,[16+ebp]
	movq	mm1,mm4
	paddq	xmm1,xmm5
	movq	mm7,[edx-112]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	paddq	xmm3,xmm1
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-104]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-112],xmm3
	movdqa	xmm5,xmm7
	movdqa	xmm3,xmm4
db	102,15,58,15,226,8
	movdqa	[32+edx],xmm6
db	102,15,58,15,238,8
	movdqa	xmm6,xmm4
	psrlq	xmm4,7
	paddq	xmm2,xmm5
	movdqa	xmm5,xmm6
	psrlq	xmm6,1
	psllq	xmm5,56
	pxor	xmm4,xmm6
	psrlq	xmm6,7
	pxor	xmm4,xmm5
	psllq	xmm5,7
	pxor	xmm4,xmm6
	movdqa	xmm6,xmm1
	pxor	xmm4,xmm5
	movdqa	xmm5,xmm1
	psrlq	xmm6,6
	paddq	xmm2,xmm4
	movdqa	xmm4,xmm1
	psrlq	xmm5,19
	psllq	xmm4,3
	pxor	xmm6,xmm5
	psrlq	xmm5,42
	pxor	xmm6,xmm4
	psllq	xmm4,42
	pxor	xmm6,xmm5
	movdqa	xmm5,[edx]
	pxor	xmm6,xmm4
	movdqa	xmm4,[32+ebp]
	movq	mm1,mm4
	paddq	xmm2,xmm6
	movq	mm7,[edx-96]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	paddq	xmm4,xmm2
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-88]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-96],xmm4
	movdqa	xmm6,xmm0
	movdqa	xmm4,xmm5
db	102,15,58,15,235,8
	movdqa	[48+edx],xmm7
db	102,15,58,15,247,8
	movdqa	xmm7,xmm5
	psrlq	xmm5,7
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm7
	psrlq	xmm7,1
	psllq	xmm6,56
	pxor	xmm5,xmm7
	psrlq	xmm7,7
	pxor	xmm5,xmm6
	psllq	xmm6,7
	pxor	xmm5,xmm7
	movdqa	xmm7,xmm2
	pxor	xmm5,xmm6
	movdqa	xmm6,xmm2
	psrlq	xmm7,6
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm2
	psrlq	xmm6,19
	psllq	xmm5,3
	pxor	xmm7,xmm6
	psrlq	xmm6,42
	pxor	xmm7,xmm5
	psllq	xmm5,42
	pxor	xmm7,xmm6
	movdqa	xmm6,[16+edx]
	pxor	xmm7,xmm5
	movdqa	xmm5,[48+ebp]
	movq	mm1,mm4
	paddq	xmm3,xmm7
	movq	mm7,[edx-80]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	paddq	xmm5,xmm3
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-72]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-80],xmm5
	movdqa	xmm7,xmm1
	movdqa	xmm5,xmm6
db	102,15,58,15,244,8
	movdqa	[edx],xmm0
db	102,15,58,15,248,8
	movdqa	xmm0,xmm6
	psrlq	xmm6,7
	paddq	xmm4,xmm7
	movdqa	xmm7,xmm0
	psrlq	xmm0,1
	psllq	xmm7,56
	pxor	xmm6,xmm0
	psrlq	xmm0,7
	pxor	xmm6,xmm7
	psllq	xmm7,7
	pxor	xmm6,xmm0
	movdqa	xmm0,xmm3
	pxor	xmm6,xmm7
	movdqa	xmm7,xmm3
	psrlq	xmm0,6
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm3
	psrlq	xmm7,19
	psllq	xmm6,3
	pxor	xmm0,xmm7
	psrlq	xmm7,42
	pxor	xmm0,xmm6
	psllq	xmm6,42
	pxor	xmm0,xmm7
	movdqa	xmm7,[32+edx]
	pxor	xmm0,xmm6
	movdqa	xmm6,[64+ebp]
	movq	mm1,mm4
	paddq	xmm4,xmm0
	movq	mm7,[edx-64]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	paddq	xmm6,xmm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-56]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-64],xmm6
	movdqa	xmm0,xmm2
	movdqa	xmm6,xmm7
db	102,15,58,15,253,8
	movdqa	[16+edx],xmm1
db	102,15,58,15,193,8
	movdqa	xmm1,xmm7
	psrlq	xmm7,7
	paddq	xmm5,xmm0
	movdqa	xmm0,xmm1
	psrlq	xmm1,1
	psllq	xmm0,56
	pxor	xmm7,xmm1
	psrlq	xmm1,7
	pxor	xmm7,xmm0
	psllq	xmm0,7
	pxor	xmm7,xmm1
	movdqa	xmm1,xmm4
	pxor	xmm7,xmm0
	movdqa	xmm0,xmm4
	psrlq	xmm1,6
	paddq	xmm5,xmm7
	movdqa	xmm7,xmm4
	psrlq	xmm0,19
	psllq	xmm7,3
	pxor	xmm1,xmm0
	psrlq	xmm0,42
	pxor	xmm1,xmm7
	psllq	xmm7,42
	pxor	xmm1,xmm0
	movdqa	xmm0,[48+edx]
	pxor	xmm1,xmm7
	movdqa	xmm7,[80+ebp]
	movq	mm1,mm4
	paddq	xmm5,xmm1
	movq	mm7,[edx-48]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	paddq	xmm7,xmm5
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-40]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-48],xmm7
	movdqa	xmm1,xmm3
	movdqa	xmm7,xmm0
db	102,15,58,15,198,8
	movdqa	[32+edx],xmm2
db	102,15,58,15,202,8
	movdqa	xmm2,xmm0
	psrlq	xmm0,7
	paddq	xmm6,xmm1
	movdqa	xmm1,xmm2
	psrlq	xmm2,1
	psllq	xmm1,56
	pxor	xmm0,xmm2
	psrlq	xmm2,7
	pxor	xmm0,xmm1
	psllq	xmm1,7
	pxor	xmm0,xmm2
	movdqa	xmm2,xmm5
	pxor	xmm0,xmm1
	movdqa	xmm1,xmm5
	psrlq	xmm2,6
	paddq	xmm6,xmm0
	movdqa	xmm0,xmm5
	psrlq	xmm1,19
	psllq	xmm0,3
	pxor	xmm2,xmm1
	psrlq	xmm1,42
	pxor	xmm2,xmm0
	psllq	xmm0,42
	pxor	xmm2,xmm1
	movdqa	xmm1,[edx]
	pxor	xmm2,xmm0
	movdqa	xmm0,[96+ebp]
	movq	mm1,mm4
	paddq	xmm6,xmm2
	movq	mm7,[edx-32]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	paddq	xmm0,xmm6
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-24]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-32],xmm0
	movdqa	xmm2,xmm4
	movdqa	xmm0,xmm1
db	102,15,58,15,207,8
	movdqa	[48+edx],xmm3
db	102,15,58,15,211,8
	movdqa	xmm3,xmm1
	psrlq	xmm1,7
	paddq	xmm7,xmm2
	movdqa	xmm2,xmm3
	psrlq	xmm3,1
	psllq	xmm2,56
	pxor	xmm1,xmm3
	psrlq	xmm3,7
	pxor	xmm1,xmm2
	psllq	xmm2,7
	pxor	xmm1,xmm3
	movdqa	xmm3,xmm6
	pxor	xmm1,xmm2
	movdqa	xmm2,xmm6
	psrlq	xmm3,6
	paddq	xmm7,xmm1
	movdqa	xmm1,xmm6
	psrlq	xmm2,19
	psllq	xmm1,3
	pxor	xmm3,xmm2
	psrlq	xmm2,42
	pxor	xmm3,xmm1
	psllq	xmm1,42
	pxor	xmm3,xmm2
	movdqa	xmm2,[16+edx]
	pxor	xmm3,xmm1
	movdqa	xmm1,[112+ebp]
	movq	mm1,mm4
	paddq	xmm7,xmm3
	movq	mm7,[edx-16]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	paddq	xmm1,xmm7
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-8]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-16],xmm1
	lea	ebp,[128+ebp]
	dec	ecx
	jnz	NEAR L$00800_47_ssse3
	movdqa	xmm1,[ebp]
	lea	ebp,[ebp-640]
	movdqu	xmm0,[ebx]
db	102,15,56,0,193
	movdqa	xmm3,[ebp]
	movdqa	xmm2,xmm1
	movdqu	xmm1,[16+ebx]
	paddq	xmm3,xmm0
db	102,15,56,0,202
	movq	mm1,mm4
	movq	mm7,[edx-128]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-120]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-128],xmm3
	movdqa	xmm4,[16+ebp]
	movdqa	xmm3,xmm2
	movdqu	xmm2,[32+ebx]
	paddq	xmm4,xmm1
db	102,15,56,0,211
	movq	mm1,mm4
	movq	mm7,[edx-112]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-104]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-112],xmm4
	movdqa	xmm5,[32+ebp]
	movdqa	xmm4,xmm3
	movdqu	xmm3,[48+ebx]
	paddq	xmm5,xmm2
db	102,15,56,0,220
	movq	mm1,mm4
	movq	mm7,[edx-96]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-88]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-96],xmm5
	movdqa	xmm6,[48+ebp]
	movdqa	xmm5,xmm4
	movdqu	xmm4,[64+ebx]
	paddq	xmm6,xmm3
db	102,15,56,0,229
	movq	mm1,mm4
	movq	mm7,[edx-80]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-72]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-80],xmm6
	movdqa	xmm7,[64+ebp]
	movdqa	xmm6,xmm5
	movdqu	xmm5,[80+ebx]
	paddq	xmm7,xmm4
db	102,15,56,0,238
	movq	mm1,mm4
	movq	mm7,[edx-64]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-56]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-64],xmm7
	movdqa	[edx],xmm0
	movdqa	xmm0,[80+ebp]
	movdqa	xmm7,xmm6
	movdqu	xmm6,[96+ebx]
	paddq	xmm0,xmm5
db	102,15,56,0,247
	movq	mm1,mm4
	movq	mm7,[edx-48]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-40]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-48],xmm0
	movdqa	[16+edx],xmm1
	movdqa	xmm1,[96+ebp]
	movdqa	xmm0,xmm7
	movdqu	xmm7,[112+ebx]
	paddq	xmm1,xmm6
db	102,15,56,0,248
	movq	mm1,mm4
	movq	mm7,[edx-32]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-24]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-32],xmm1
	movdqa	[32+edx],xmm2
	movdqa	xmm2,[112+ebp]
	movdqa	xmm0,[edx]
	paddq	xmm2,xmm7
	movq	mm1,mm4
	movq	mm7,[edx-16]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-8]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-16],xmm2
	movq	mm1,[8+esp]
	paddq	mm0,mm3
	movq	mm3,[24+esp]
	movq	mm7,[56+esp]
	pxor	mm2,mm1
	paddq	mm0,[esi]
	paddq	mm1,[8+esi]
	paddq	mm2,[16+esi]
	paddq	mm3,[24+esi]
	paddq	mm4,[32+esi]
	paddq	mm5,[40+esi]
	paddq	mm6,[48+esi]
	paddq	mm7,[56+esi]
	movq	[esi],mm0
	movq	[8+esi],mm1
	movq	[16+esi],mm2
	movq	[24+esi],mm3
	movq	[32+esi],mm4
	movq	[40+esi],mm5
	movq	[48+esi],mm6
	movq	[56+esi],mm7
	cmp	edi,eax
	jb	NEAR L$007loop_ssse3
	mov	esp,DWORD [76+edx]
	emms
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
L$002loop_x86:
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [16+edi]
	mov	ebx,DWORD [20+edi]
	mov	ecx,DWORD [24+edi]
	mov	edx,DWORD [28+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [32+edi]
	mov	ebx,DWORD [36+edi]
	mov	ecx,DWORD [40+edi]
	mov	edx,DWORD [44+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [48+edi]
	mov	ebx,DWORD [52+edi]
	mov	ecx,DWORD [56+edi]
	mov	edx,DWORD [60+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [64+edi]
	mov	ebx,DWORD [68+edi]
	mov	ecx,DWORD [72+edi]
	mov	edx,DWORD [76+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [80+edi]
	mov	ebx,DWORD [84+edi]
	mov	ecx,DWORD [88+edi]
	mov	edx,DWORD [92+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [96+edi]
	mov	ebx,DWORD [100+edi]
	mov	ecx,DWORD [104+edi]
	mov	edx,DWORD [108+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [112+edi]
	mov	ebx,DWORD [116+edi]
	mov	ecx,DWORD [120+edi]
	mov	edx,DWORD [124+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	add	edi,128
	sub	esp,72
	mov	DWORD [204+esp],edi
	lea	edi,[8+esp]
	mov	ecx,16
dd	2784229001
align	16
L$00900_15_x86:
	mov	ecx,DWORD [40+esp]
	mov	edx,DWORD [44+esp]
	mov	esi,ecx
	shr	ecx,9
	mov	edi,edx
	shr	edx,9
	mov	ebx,ecx
	shl	esi,14
	mov	eax,edx
	shl	edi,14
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	eax,ecx
	shl	esi,4
	xor	ebx,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,4
	xor	eax,edi
	shr	edx,4
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [48+esp]
	mov	edx,DWORD [52+esp]
	mov	esi,DWORD [56+esp]
	mov	edi,DWORD [60+esp]
	add	eax,DWORD [64+esp]
	adc	ebx,DWORD [68+esp]
	xor	ecx,esi
	xor	edx,edi
	and	ecx,DWORD [40+esp]
	and	edx,DWORD [44+esp]
	add	eax,DWORD [192+esp]
	adc	ebx,DWORD [196+esp]
	xor	ecx,esi
	xor	edx,edi
	mov	esi,DWORD [ebp]
	mov	edi,DWORD [4+ebp]
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [32+esp]
	mov	edx,DWORD [36+esp]
	add	eax,esi
	adc	ebx,edi
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	DWORD [32+esp],eax
	mov	DWORD [36+esp],ebx
	mov	esi,ecx
	shr	ecx,2
	mov	edi,edx
	shr	edx,2
	mov	ebx,ecx
	shl	esi,4
	mov	eax,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	ebx,ecx
	shl	esi,21
	xor	eax,edx
	shl	edi,21
	xor	eax,esi
	shr	ecx,21
	xor	ebx,edi
	shr	edx,21
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	edi,DWORD [20+esp]
	add	eax,DWORD [esp]
	adc	ebx,DWORD [4+esp]
	or	ecx,esi
	or	edx,edi
	and	ecx,DWORD [24+esp]
	and	edx,DWORD [28+esp]
	and	esi,DWORD [8+esp]
	and	edi,DWORD [12+esp]
	or	ecx,esi
	or	edx,edi
	add	eax,ecx
	adc	ebx,edx
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	dl,BYTE [ebp]
	sub	esp,8
	lea	ebp,[8+ebp]
	cmp	dl,148
	jne	NEAR L$00900_15_x86
align	16
L$01016_79_x86:
	mov	ecx,DWORD [312+esp]
	mov	edx,DWORD [316+esp]
	mov	esi,ecx
	shr	ecx,1
	mov	edi,edx
	shr	edx,1
	mov	eax,ecx
	shl	esi,24
	mov	ebx,edx
	shl	edi,24
	xor	ebx,esi
	shr	ecx,6
	xor	eax,edi
	shr	edx,6
	xor	eax,ecx
	shl	esi,7
	xor	ebx,edx
	shl	edi,1
	xor	ebx,esi
	shr	ecx,1
	xor	eax,edi
	shr	edx,1
	xor	eax,ecx
	shl	edi,6
	xor	ebx,edx
	xor	eax,edi
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	ecx,DWORD [208+esp]
	mov	edx,DWORD [212+esp]
	mov	esi,ecx
	shr	ecx,6
	mov	edi,edx
	shr	edx,6
	mov	eax,ecx
	shl	esi,3
	mov	ebx,edx
	shl	edi,3
	xor	eax,esi
	shr	ecx,13
	xor	ebx,edi
	shr	edx,13
	xor	eax,ecx
	shl	esi,10
	xor	ebx,edx
	shl	edi,10
	xor	ebx,esi
	shr	ecx,10
	xor	eax,edi
	shr	edx,10
	xor	ebx,ecx
	shl	edi,13
	xor	eax,edx
	xor	eax,edi
	mov	ecx,DWORD [320+esp]
	mov	edx,DWORD [324+esp]
	add	eax,DWORD [esp]
	adc	ebx,DWORD [4+esp]
	mov	esi,DWORD [248+esp]
	mov	edi,DWORD [252+esp]
	add	eax,ecx
	adc	ebx,edx
	add	eax,esi
	adc	ebx,edi
	mov	DWORD [192+esp],eax
	mov	DWORD [196+esp],ebx
	mov	ecx,DWORD [40+esp]
	mov	edx,DWORD [44+esp]
	mov	esi,ecx
	shr	ecx,9
	mov	edi,edx
	shr	edx,9
	mov	ebx,ecx
	shl	esi,14
	mov	eax,edx
	shl	edi,14
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	eax,ecx
	shl	esi,4
	xor	ebx,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,4
	xor	eax,edi
	shr	edx,4
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [48+esp]
	mov	edx,DWORD [52+esp]
	mov	esi,DWORD [56+esp]
	mov	edi,DWORD [60+esp]
	add	eax,DWORD [64+esp]
	adc	ebx,DWORD [68+esp]
	xor	ecx,esi
	xor	edx,edi
	and	ecx,DWORD [40+esp]
	and	edx,DWORD [44+esp]
	add	eax,DWORD [192+esp]
	adc	ebx,DWORD [196+esp]
	xor	ecx,esi
	xor	edx,edi
	mov	esi,DWORD [ebp]
	mov	edi,DWORD [4+ebp]
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [32+esp]
	mov	edx,DWORD [36+esp]
	add	eax,esi
	adc	ebx,edi
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	DWORD [32+esp],eax
	mov	DWORD [36+esp],ebx
	mov	esi,ecx
	shr	ecx,2
	mov	edi,edx
	shr	edx,2
	mov	ebx,ecx
	shl	esi,4
	mov	eax,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	ebx,ecx
	shl	esi,21
	xor	eax,edx
	shl	edi,21
	xor	eax,esi
	shr	ecx,21
	xor	ebx,edi
	shr	edx,21
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	edi,DWORD [20+esp]
	add	eax,DWORD [esp]
	adc	ebx,DWORD [4+esp]
	or	ecx,esi
	or	edx,edi
	and	ecx,DWORD [24+esp]
	and	edx,DWORD [28+esp]
	and	esi,DWORD [8+esp]
	and	edi,DWORD [12+esp]
	or	ecx,esi
	or	edx,edi
	add	eax,ecx
	adc	ebx,edx
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	dl,BYTE [ebp]
	sub	esp,8
	lea	ebp,[8+ebp]
	cmp	dl,23
	jne	NEAR L$01016_79_x86
	mov	esi,DWORD [840+esp]
	mov	edi,DWORD [844+esp]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	add	eax,DWORD [8+esp]
	adc	ebx,DWORD [12+esp]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	add	ecx,DWORD [16+esp]
	adc	edx,DWORD [20+esp]
	mov	DWORD [8+esi],ecx
	mov	DWORD [12+esi],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	add	eax,DWORD [24+esp]
	adc	ebx,DWORD [28+esp]
	mov	DWORD [16+esi],eax
	mov	DWORD [20+esi],ebx
	add	ecx,DWORD [32+esp]
	adc	edx,DWORD [36+esp]
	mov	DWORD [24+esi],ecx
	mov	DWORD [28+esi],edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	add	eax,DWORD [40+esp]
	adc	ebx,DWORD [44+esp]
	mov	DWORD [32+esi],eax
	mov	DWORD [36+esi],ebx
	add	ecx,DWORD [48+esp]
	adc	edx,DWORD [52+esp]
	mov	DWORD [40+esi],ecx
	mov	DWORD [44+esi],edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	add	eax,DWORD [56+esp]
	adc	ebx,DWORD [60+esp]
	mov	DWORD [48+esi],eax
	mov	DWORD [52+esi],ebx
	add	ecx,DWORD [64+esp]
	adc	edx,DWORD [68+esp]
	mov	DWORD [56+esi],ecx
	mov	DWORD [60+esi],edx
	add	esp,840
	sub	ebp,640
	cmp	edi,DWORD [8+esp]
	jb	NEAR L$002loop_x86
	mov	esp,DWORD [12+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$001K512:
dd	3609767458,1116352408
dd	602891725,1899447441
dd	3964484399,3049323471
dd	2173295548,3921009573
dd	4081628472,961987163
dd	3053834265,1508970993
dd	2937671579,2453635748
dd	3664609560,2870763221
dd	2734883394,3624381080
dd	1164996542,310598401
dd	1323610764,607225278
dd	3590304994,1426881987
dd	4068182383,1925078388
dd	991336113,2162078206
dd	633803317,2614888103
dd	3479774868,3248222580
dd	2666613458,3835390401
dd	944711139,4022224774
dd	2341262773,264347078
dd	2007800933,604807628
dd	1495990901,770255983
dd	1856431235,1249150122
dd	3175218132,1555081692
dd	2198950837,1996064986
dd	3999719339,2554220882
dd	766784016,2821834349
dd	2566594879,2952996808
dd	3203337956,3210313671
dd	1034457026,3336571891
dd	2466948901,3584528711
dd	3758326383,113926993
dd	168717936,338241895
dd	1188179964,666307205
dd	1546045734,773529912
dd	1522805485,1294757372
dd	2643833823,1396182291
dd	2343527390,1695183700
dd	1014477480,1986661051
dd	1206759142,2177026350
dd	344077627,2456956037
dd	1290863460,2730485921
dd	3158454273,2820302411
dd	3505952657,3259730800
dd	106217008,3345764771
dd	3606008344,3516065817
dd	1432725776,3600352804
dd	1467031594,4094571909
dd	851169720,275423344
dd	3100823752,430227734
dd	1363258195,506948616
dd	3750685593,659060556
dd	3785050280,883997877
dd	3318307427,958139571
dd	3812723403,1322822218
dd	2003034995,1537002063
dd	3602036899,1747873779
dd	1575990012,1955562222
dd	1125592928,2024104815
dd	2716904306,2227730452
dd	442776044,2361852424
dd	593698344,2428436474
dd	3733110249,2756734187
dd	2999351573,3204031479
dd	3815920427,3329325298
dd	3928383900,3391569614
dd	566280711,3515267271
dd	3454069534,3940187606
dd	4000239992,4118630271
dd	1914138554,116418474
dd	2731055270,174292421
dd	3203993006,289380356
dd	320620315,460393269
dd	587496836,685471733
dd	1086792851,852142971
dd	365543100,1017036298
dd	2618297676,1126000580
dd	3409855158,1288033470
dd	4234509866,1501505948
dd	987167468,1607167915
dd	1246189591,1816402316
dd	67438087,66051
dd	202182159,134810123
db	83,72,65,53,49,50,32,98,108,111,99,107,32,116,114,97
db	110,115,102,111,114,109,32,102,111,114,32,120,56,54,44,32
db	67,82,89,80,84,79,71,65,77,83,32,98,121,32,60,97
db	112,112,114,111,64,111,112,101,110,115,115,108,46,111,114,103
db	62,0
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/whrlpool/                                 0000775 0000000 0000000 00000000000 14746647661 0024616 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/whrlpool/wp-mmx.asm                       0000664 0000000 0000000 00000066114 14746647661 0026555 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_whirlpool_block_mmx
align	16
_whirlpool_block_mmx:
L$_whirlpool_block_mmx_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [20+esp]
	mov	edi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	mov	eax,esp
	sub	esp,148
	and	esp,-64
	lea	ebx,[128+esp]
	mov	DWORD [ebx],esi
	mov	DWORD [4+ebx],edi
	mov	DWORD [8+ebx],ebp
	mov	DWORD [16+ebx],eax
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	ebp,[(L$001table-L$000pic_point)+ebp]
	xor	ecx,ecx
	xor	edx,edx
	movq	mm0,[esi]
	movq	mm1,[8+esi]
	movq	mm2,[16+esi]
	movq	mm3,[24+esi]
	movq	mm4,[32+esi]
	movq	mm5,[40+esi]
	movq	mm6,[48+esi]
	movq	mm7,[56+esi]
L$002outerloop:
	movq	[esp],mm0
	movq	[8+esp],mm1
	movq	[16+esp],mm2
	movq	[24+esp],mm3
	movq	[32+esp],mm4
	movq	[40+esp],mm5
	movq	[48+esp],mm6
	movq	[56+esp],mm7
	pxor	mm0,[edi]
	pxor	mm1,[8+edi]
	pxor	mm2,[16+edi]
	pxor	mm3,[24+edi]
	pxor	mm4,[32+edi]
	pxor	mm5,[40+edi]
	pxor	mm6,[48+edi]
	pxor	mm7,[56+edi]
	movq	[64+esp],mm0
	movq	[72+esp],mm1
	movq	[80+esp],mm2
	movq	[88+esp],mm3
	movq	[96+esp],mm4
	movq	[104+esp],mm5
	movq	[112+esp],mm6
	movq	[120+esp],mm7
	xor	esi,esi
	mov	DWORD [12+ebx],esi
align	16
L$003round:
	movq	mm0,[4096+esi*8+ebp]
	mov	eax,DWORD [esp]
	mov	ebx,DWORD [4+esp]
	movzx	ecx,al
	movzx	edx,ah
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[esi*8+ebp]
	movq	mm1,[7+edi*8+ebp]
	mov	eax,DWORD [8+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	movq	mm2,[6+esi*8+ebp]
	movq	mm3,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	movq	mm4,[4+esi*8+ebp]
	movq	mm5,[3+edi*8+ebp]
	mov	ebx,DWORD [12+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	movq	mm6,[2+esi*8+ebp]
	movq	mm7,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[esi*8+ebp]
	pxor	mm2,[7+edi*8+ebp]
	mov	eax,DWORD [16+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[6+esi*8+ebp]
	pxor	mm4,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[4+esi*8+ebp]
	pxor	mm6,[3+edi*8+ebp]
	mov	ebx,DWORD [20+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[2+esi*8+ebp]
	pxor	mm0,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[esi*8+ebp]
	pxor	mm3,[7+edi*8+ebp]
	mov	eax,DWORD [24+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm4,[6+esi*8+ebp]
	pxor	mm5,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[4+esi*8+ebp]
	pxor	mm7,[3+edi*8+ebp]
	mov	ebx,DWORD [28+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[2+esi*8+ebp]
	pxor	mm1,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[esi*8+ebp]
	pxor	mm4,[7+edi*8+ebp]
	mov	eax,DWORD [32+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[6+esi*8+ebp]
	pxor	mm6,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[4+esi*8+ebp]
	pxor	mm0,[3+edi*8+ebp]
	mov	ebx,DWORD [36+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[2+esi*8+ebp]
	pxor	mm2,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[esi*8+ebp]
	pxor	mm5,[7+edi*8+ebp]
	mov	eax,DWORD [40+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[6+esi*8+ebp]
	pxor	mm7,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[4+esi*8+ebp]
	pxor	mm1,[3+edi*8+ebp]
	mov	ebx,DWORD [44+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[2+esi*8+ebp]
	pxor	mm3,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[esi*8+ebp]
	pxor	mm6,[7+edi*8+ebp]
	mov	eax,DWORD [48+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[6+esi*8+ebp]
	pxor	mm0,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[4+esi*8+ebp]
	pxor	mm2,[3+edi*8+ebp]
	mov	ebx,DWORD [52+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[2+esi*8+ebp]
	pxor	mm4,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm6,[esi*8+ebp]
	pxor	mm7,[7+edi*8+ebp]
	mov	eax,DWORD [56+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[6+esi*8+ebp]
	pxor	mm1,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm2,[4+esi*8+ebp]
	pxor	mm3,[3+edi*8+ebp]
	mov	ebx,DWORD [60+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[2+esi*8+ebp]
	pxor	mm5,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[esi*8+ebp]
	pxor	mm0,[7+edi*8+ebp]
	mov	eax,DWORD [64+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[6+esi*8+ebp]
	pxor	mm2,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[4+esi*8+ebp]
	pxor	mm4,[3+edi*8+ebp]
	mov	ebx,DWORD [68+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[2+esi*8+ebp]
	pxor	mm6,[1+edi*8+ebp]
	movq	[esp],mm0
	movq	[8+esp],mm1
	movq	[16+esp],mm2
	movq	[24+esp],mm3
	movq	[32+esp],mm4
	movq	[40+esp],mm5
	movq	[48+esp],mm6
	movq	[56+esp],mm7
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[esi*8+ebp]
	pxor	mm1,[7+edi*8+ebp]
	mov	eax,DWORD [72+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm2,[6+esi*8+ebp]
	pxor	mm3,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm4,[4+esi*8+ebp]
	pxor	mm5,[3+edi*8+ebp]
	mov	ebx,DWORD [76+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm6,[2+esi*8+ebp]
	pxor	mm7,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[esi*8+ebp]
	pxor	mm2,[7+edi*8+ebp]
	mov	eax,DWORD [80+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[6+esi*8+ebp]
	pxor	mm4,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[4+esi*8+ebp]
	pxor	mm6,[3+edi*8+ebp]
	mov	ebx,DWORD [84+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[2+esi*8+ebp]
	pxor	mm0,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[esi*8+ebp]
	pxor	mm3,[7+edi*8+ebp]
	mov	eax,DWORD [88+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm4,[6+esi*8+ebp]
	pxor	mm5,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[4+esi*8+ebp]
	pxor	mm7,[3+edi*8+ebp]
	mov	ebx,DWORD [92+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[2+esi*8+ebp]
	pxor	mm1,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[esi*8+ebp]
	pxor	mm4,[7+edi*8+ebp]
	mov	eax,DWORD [96+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[6+esi*8+ebp]
	pxor	mm6,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[4+esi*8+ebp]
	pxor	mm0,[3+edi*8+ebp]
	mov	ebx,DWORD [100+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[2+esi*8+ebp]
	pxor	mm2,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[esi*8+ebp]
	pxor	mm5,[7+edi*8+ebp]
	mov	eax,DWORD [104+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[6+esi*8+ebp]
	pxor	mm7,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[4+esi*8+ebp]
	pxor	mm1,[3+edi*8+ebp]
	mov	ebx,DWORD [108+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[2+esi*8+ebp]
	pxor	mm3,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[esi*8+ebp]
	pxor	mm6,[7+edi*8+ebp]
	mov	eax,DWORD [112+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[6+esi*8+ebp]
	pxor	mm0,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[4+esi*8+ebp]
	pxor	mm2,[3+edi*8+ebp]
	mov	ebx,DWORD [116+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[2+esi*8+ebp]
	pxor	mm4,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm6,[esi*8+ebp]
	pxor	mm7,[7+edi*8+ebp]
	mov	eax,DWORD [120+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[6+esi*8+ebp]
	pxor	mm1,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm2,[4+esi*8+ebp]
	pxor	mm3,[3+edi*8+ebp]
	mov	ebx,DWORD [124+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[2+esi*8+ebp]
	pxor	mm5,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[esi*8+ebp]
	pxor	mm0,[7+edi*8+ebp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[6+esi*8+ebp]
	pxor	mm2,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[4+esi*8+ebp]
	pxor	mm4,[3+edi*8+ebp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[2+esi*8+ebp]
	pxor	mm6,[1+edi*8+ebp]
	lea	ebx,[128+esp]
	mov	esi,DWORD [12+ebx]
	add	esi,1
	cmp	esi,10
	je	NEAR L$004roundsdone
	mov	DWORD [12+ebx],esi
	movq	[64+esp],mm0
	movq	[72+esp],mm1
	movq	[80+esp],mm2
	movq	[88+esp],mm3
	movq	[96+esp],mm4
	movq	[104+esp],mm5
	movq	[112+esp],mm6
	movq	[120+esp],mm7
	jmp	NEAR L$003round
align	16
L$004roundsdone:
	mov	esi,DWORD [ebx]
	mov	edi,DWORD [4+ebx]
	mov	eax,DWORD [8+ebx]
	pxor	mm0,[edi]
	pxor	mm1,[8+edi]
	pxor	mm2,[16+edi]
	pxor	mm3,[24+edi]
	pxor	mm4,[32+edi]
	pxor	mm5,[40+edi]
	pxor	mm6,[48+edi]
	pxor	mm7,[56+edi]
	pxor	mm0,[esi]
	pxor	mm1,[8+esi]
	pxor	mm2,[16+esi]
	pxor	mm3,[24+esi]
	pxor	mm4,[32+esi]
	pxor	mm5,[40+esi]
	pxor	mm6,[48+esi]
	pxor	mm7,[56+esi]
	movq	[esi],mm0
	movq	[8+esi],mm1
	movq	[16+esi],mm2
	movq	[24+esi],mm3
	movq	[32+esi],mm4
	movq	[40+esi],mm5
	movq	[48+esi],mm6
	movq	[56+esi],mm7
	lea	edi,[64+edi]
	sub	eax,1
	jz	NEAR L$005alldone
	mov	DWORD [4+ebx],edi
	mov	DWORD [8+ebx],eax
	jmp	NEAR L$002outerloop
L$005alldone:
	emms
	mov	esp,DWORD [16+ebx]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$001table:
db	24,24,96,24,192,120,48,216
db	24,24,96,24,192,120,48,216
db	35,35,140,35,5,175,70,38
db	35,35,140,35,5,175,70,38
db	198,198,63,198,126,249,145,184
db	198,198,63,198,126,249,145,184
db	232,232,135,232,19,111,205,251
db	232,232,135,232,19,111,205,251
db	135,135,38,135,76,161,19,203
db	135,135,38,135,76,161,19,203
db	184,184,218,184,169,98,109,17
db	184,184,218,184,169,98,109,17
db	1,1,4,1,8,5,2,9
db	1,1,4,1,8,5,2,9
db	79,79,33,79,66,110,158,13
db	79,79,33,79,66,110,158,13
db	54,54,216,54,173,238,108,155
db	54,54,216,54,173,238,108,155
db	166,166,162,166,89,4,81,255
db	166,166,162,166,89,4,81,255
db	210,210,111,210,222,189,185,12
db	210,210,111,210,222,189,185,12
db	245,245,243,245,251,6,247,14
db	245,245,243,245,251,6,247,14
db	121,121,249,121,239,128,242,150
db	121,121,249,121,239,128,242,150
db	111,111,161,111,95,206,222,48
db	111,111,161,111,95,206,222,48
db	145,145,126,145,252,239,63,109
db	145,145,126,145,252,239,63,109
db	82,82,85,82,170,7,164,248
db	82,82,85,82,170,7,164,248
db	96,96,157,96,39,253,192,71
db	96,96,157,96,39,253,192,71
db	188,188,202,188,137,118,101,53
db	188,188,202,188,137,118,101,53
db	155,155,86,155,172,205,43,55
db	155,155,86,155,172,205,43,55
db	142,142,2,142,4,140,1,138
db	142,142,2,142,4,140,1,138
db	163,163,182,163,113,21,91,210
db	163,163,182,163,113,21,91,210
db	12,12,48,12,96,60,24,108
db	12,12,48,12,96,60,24,108
db	123,123,241,123,255,138,246,132
db	123,123,241,123,255,138,246,132
db	53,53,212,53,181,225,106,128
db	53,53,212,53,181,225,106,128
db	29,29,116,29,232,105,58,245
db	29,29,116,29,232,105,58,245
db	224,224,167,224,83,71,221,179
db	224,224,167,224,83,71,221,179
db	215,215,123,215,246,172,179,33
db	215,215,123,215,246,172,179,33
db	194,194,47,194,94,237,153,156
db	194,194,47,194,94,237,153,156
db	46,46,184,46,109,150,92,67
db	46,46,184,46,109,150,92,67
db	75,75,49,75,98,122,150,41
db	75,75,49,75,98,122,150,41
db	254,254,223,254,163,33,225,93
db	254,254,223,254,163,33,225,93
db	87,87,65,87,130,22,174,213
db	87,87,65,87,130,22,174,213
db	21,21,84,21,168,65,42,189
db	21,21,84,21,168,65,42,189
db	119,119,193,119,159,182,238,232
db	119,119,193,119,159,182,238,232
db	55,55,220,55,165,235,110,146
db	55,55,220,55,165,235,110,146
db	229,229,179,229,123,86,215,158
db	229,229,179,229,123,86,215,158
db	159,159,70,159,140,217,35,19
db	159,159,70,159,140,217,35,19
db	240,240,231,240,211,23,253,35
db	240,240,231,240,211,23,253,35
db	74,74,53,74,106,127,148,32
db	74,74,53,74,106,127,148,32
db	218,218,79,218,158,149,169,68
db	218,218,79,218,158,149,169,68
db	88,88,125,88,250,37,176,162
db	88,88,125,88,250,37,176,162
db	201,201,3,201,6,202,143,207
db	201,201,3,201,6,202,143,207
db	41,41,164,41,85,141,82,124
db	41,41,164,41,85,141,82,124
db	10,10,40,10,80,34,20,90
db	10,10,40,10,80,34,20,90
db	177,177,254,177,225,79,127,80
db	177,177,254,177,225,79,127,80
db	160,160,186,160,105,26,93,201
db	160,160,186,160,105,26,93,201
db	107,107,177,107,127,218,214,20
db	107,107,177,107,127,218,214,20
db	133,133,46,133,92,171,23,217
db	133,133,46,133,92,171,23,217
db	189,189,206,189,129,115,103,60
db	189,189,206,189,129,115,103,60
db	93,93,105,93,210,52,186,143
db	93,93,105,93,210,52,186,143
db	16,16,64,16,128,80,32,144
db	16,16,64,16,128,80,32,144
db	244,244,247,244,243,3,245,7
db	244,244,247,244,243,3,245,7
db	203,203,11,203,22,192,139,221
db	203,203,11,203,22,192,139,221
db	62,62,248,62,237,198,124,211
db	62,62,248,62,237,198,124,211
db	5,5,20,5,40,17,10,45
db	5,5,20,5,40,17,10,45
db	103,103,129,103,31,230,206,120
db	103,103,129,103,31,230,206,120
db	228,228,183,228,115,83,213,151
db	228,228,183,228,115,83,213,151
db	39,39,156,39,37,187,78,2
db	39,39,156,39,37,187,78,2
db	65,65,25,65,50,88,130,115
db	65,65,25,65,50,88,130,115
db	139,139,22,139,44,157,11,167
db	139,139,22,139,44,157,11,167
db	167,167,166,167,81,1,83,246
db	167,167,166,167,81,1,83,246
db	125,125,233,125,207,148,250,178
db	125,125,233,125,207,148,250,178
db	149,149,110,149,220,251,55,73
db	149,149,110,149,220,251,55,73
db	216,216,71,216,142,159,173,86
db	216,216,71,216,142,159,173,86
db	251,251,203,251,139,48,235,112
db	251,251,203,251,139,48,235,112
db	238,238,159,238,35,113,193,205
db	238,238,159,238,35,113,193,205
db	124,124,237,124,199,145,248,187
db	124,124,237,124,199,145,248,187
db	102,102,133,102,23,227,204,113
db	102,102,133,102,23,227,204,113
db	221,221,83,221,166,142,167,123
db	221,221,83,221,166,142,167,123
db	23,23,92,23,184,75,46,175
db	23,23,92,23,184,75,46,175
db	71,71,1,71,2,70,142,69
db	71,71,1,71,2,70,142,69
db	158,158,66,158,132,220,33,26
db	158,158,66,158,132,220,33,26
db	202,202,15,202,30,197,137,212
db	202,202,15,202,30,197,137,212
db	45,45,180,45,117,153,90,88
db	45,45,180,45,117,153,90,88
db	191,191,198,191,145,121,99,46
db	191,191,198,191,145,121,99,46
db	7,7,28,7,56,27,14,63
db	7,7,28,7,56,27,14,63
db	173,173,142,173,1,35,71,172
db	173,173,142,173,1,35,71,172
db	90,90,117,90,234,47,180,176
db	90,90,117,90,234,47,180,176
db	131,131,54,131,108,181,27,239
db	131,131,54,131,108,181,27,239
db	51,51,204,51,133,255,102,182
db	51,51,204,51,133,255,102,182
db	99,99,145,99,63,242,198,92
db	99,99,145,99,63,242,198,92
db	2,2,8,2,16,10,4,18
db	2,2,8,2,16,10,4,18
db	170,170,146,170,57,56,73,147
db	170,170,146,170,57,56,73,147
db	113,113,217,113,175,168,226,222
db	113,113,217,113,175,168,226,222
db	200,200,7,200,14,207,141,198
db	200,200,7,200,14,207,141,198
db	25,25,100,25,200,125,50,209
db	25,25,100,25,200,125,50,209
db	73,73,57,73,114,112,146,59
db	73,73,57,73,114,112,146,59
db	217,217,67,217,134,154,175,95
db	217,217,67,217,134,154,175,95
db	242,242,239,242,195,29,249,49
db	242,242,239,242,195,29,249,49
db	227,227,171,227,75,72,219,168
db	227,227,171,227,75,72,219,168
db	91,91,113,91,226,42,182,185
db	91,91,113,91,226,42,182,185
db	136,136,26,136,52,146,13,188
db	136,136,26,136,52,146,13,188
db	154,154,82,154,164,200,41,62
db	154,154,82,154,164,200,41,62
db	38,38,152,38,45,190,76,11
db	38,38,152,38,45,190,76,11
db	50,50,200,50,141,250,100,191
db	50,50,200,50,141,250,100,191
db	176,176,250,176,233,74,125,89
db	176,176,250,176,233,74,125,89
db	233,233,131,233,27,106,207,242
db	233,233,131,233,27,106,207,242
db	15,15,60,15,120,51,30,119
db	15,15,60,15,120,51,30,119
db	213,213,115,213,230,166,183,51
db	213,213,115,213,230,166,183,51
db	128,128,58,128,116,186,29,244
db	128,128,58,128,116,186,29,244
db	190,190,194,190,153,124,97,39
db	190,190,194,190,153,124,97,39
db	205,205,19,205,38,222,135,235
db	205,205,19,205,38,222,135,235
db	52,52,208,52,189,228,104,137
db	52,52,208,52,189,228,104,137
db	72,72,61,72,122,117,144,50
db	72,72,61,72,122,117,144,50
db	255,255,219,255,171,36,227,84
db	255,255,219,255,171,36,227,84
db	122,122,245,122,247,143,244,141
db	122,122,245,122,247,143,244,141
db	144,144,122,144,244,234,61,100
db	144,144,122,144,244,234,61,100
db	95,95,97,95,194,62,190,157
db	95,95,97,95,194,62,190,157
db	32,32,128,32,29,160,64,61
db	32,32,128,32,29,160,64,61
db	104,104,189,104,103,213,208,15
db	104,104,189,104,103,213,208,15
db	26,26,104,26,208,114,52,202
db	26,26,104,26,208,114,52,202
db	174,174,130,174,25,44,65,183
db	174,174,130,174,25,44,65,183
db	180,180,234,180,201,94,117,125
db	180,180,234,180,201,94,117,125
db	84,84,77,84,154,25,168,206
db	84,84,77,84,154,25,168,206
db	147,147,118,147,236,229,59,127
db	147,147,118,147,236,229,59,127
db	34,34,136,34,13,170,68,47
db	34,34,136,34,13,170,68,47
db	100,100,141,100,7,233,200,99
db	100,100,141,100,7,233,200,99
db	241,241,227,241,219,18,255,42
db	241,241,227,241,219,18,255,42
db	115,115,209,115,191,162,230,204
db	115,115,209,115,191,162,230,204
db	18,18,72,18,144,90,36,130
db	18,18,72,18,144,90,36,130
db	64,64,29,64,58,93,128,122
db	64,64,29,64,58,93,128,122
db	8,8,32,8,64,40,16,72
db	8,8,32,8,64,40,16,72
db	195,195,43,195,86,232,155,149
db	195,195,43,195,86,232,155,149
db	236,236,151,236,51,123,197,223
db	236,236,151,236,51,123,197,223
db	219,219,75,219,150,144,171,77
db	219,219,75,219,150,144,171,77
db	161,161,190,161,97,31,95,192
db	161,161,190,161,97,31,95,192
db	141,141,14,141,28,131,7,145
db	141,141,14,141,28,131,7,145
db	61,61,244,61,245,201,122,200
db	61,61,244,61,245,201,122,200
db	151,151,102,151,204,241,51,91
db	151,151,102,151,204,241,51,91
db	0,0,0,0,0,0,0,0
db	0,0,0,0,0,0,0,0
db	207,207,27,207,54,212,131,249
db	207,207,27,207,54,212,131,249
db	43,43,172,43,69,135,86,110
db	43,43,172,43,69,135,86,110
db	118,118,197,118,151,179,236,225
db	118,118,197,118,151,179,236,225
db	130,130,50,130,100,176,25,230
db	130,130,50,130,100,176,25,230
db	214,214,127,214,254,169,177,40
db	214,214,127,214,254,169,177,40
db	27,27,108,27,216,119,54,195
db	27,27,108,27,216,119,54,195
db	181,181,238,181,193,91,119,116
db	181,181,238,181,193,91,119,116
db	175,175,134,175,17,41,67,190
db	175,175,134,175,17,41,67,190
db	106,106,181,106,119,223,212,29
db	106,106,181,106,119,223,212,29
db	80,80,93,80,186,13,160,234
db	80,80,93,80,186,13,160,234
db	69,69,9,69,18,76,138,87
db	69,69,9,69,18,76,138,87
db	243,243,235,243,203,24,251,56
db	243,243,235,243,203,24,251,56
db	48,48,192,48,157,240,96,173
db	48,48,192,48,157,240,96,173
db	239,239,155,239,43,116,195,196
db	239,239,155,239,43,116,195,196
db	63,63,252,63,229,195,126,218
db	63,63,252,63,229,195,126,218
db	85,85,73,85,146,28,170,199
db	85,85,73,85,146,28,170,199
db	162,162,178,162,121,16,89,219
db	162,162,178,162,121,16,89,219
db	234,234,143,234,3,101,201,233
db	234,234,143,234,3,101,201,233
db	101,101,137,101,15,236,202,106
db	101,101,137,101,15,236,202,106
db	186,186,210,186,185,104,105,3
db	186,186,210,186,185,104,105,3
db	47,47,188,47,101,147,94,74
db	47,47,188,47,101,147,94,74
db	192,192,39,192,78,231,157,142
db	192,192,39,192,78,231,157,142
db	222,222,95,222,190,129,161,96
db	222,222,95,222,190,129,161,96
db	28,28,112,28,224,108,56,252
db	28,28,112,28,224,108,56,252
db	253,253,211,253,187,46,231,70
db	253,253,211,253,187,46,231,70
db	77,77,41,77,82,100,154,31
db	77,77,41,77,82,100,154,31
db	146,146,114,146,228,224,57,118
db	146,146,114,146,228,224,57,118
db	117,117,201,117,143,188,234,250
db	117,117,201,117,143,188,234,250
db	6,6,24,6,48,30,12,54
db	6,6,24,6,48,30,12,54
db	138,138,18,138,36,152,9,174
db	138,138,18,138,36,152,9,174
db	178,178,242,178,249,64,121,75
db	178,178,242,178,249,64,121,75
db	230,230,191,230,99,89,209,133
db	230,230,191,230,99,89,209,133
db	14,14,56,14,112,54,28,126
db	14,14,56,14,112,54,28,126
db	31,31,124,31,248,99,62,231
db	31,31,124,31,248,99,62,231
db	98,98,149,98,55,247,196,85
db	98,98,149,98,55,247,196,85
db	212,212,119,212,238,163,181,58
db	212,212,119,212,238,163,181,58
db	168,168,154,168,41,50,77,129
db	168,168,154,168,41,50,77,129
db	150,150,98,150,196,244,49,82
db	150,150,98,150,196,244,49,82
db	249,249,195,249,155,58,239,98
db	249,249,195,249,155,58,239,98
db	197,197,51,197,102,246,151,163
db	197,197,51,197,102,246,151,163
db	37,37,148,37,53,177,74,16
db	37,37,148,37,53,177,74,16
db	89,89,121,89,242,32,178,171
db	89,89,121,89,242,32,178,171
db	132,132,42,132,84,174,21,208
db	132,132,42,132,84,174,21,208
db	114,114,213,114,183,167,228,197
db	114,114,213,114,183,167,228,197
db	57,57,228,57,213,221,114,236
db	57,57,228,57,213,221,114,236
db	76,76,45,76,90,97,152,22
db	76,76,45,76,90,97,152,22
db	94,94,101,94,202,59,188,148
db	94,94,101,94,202,59,188,148
db	120,120,253,120,231,133,240,159
db	120,120,253,120,231,133,240,159
db	56,56,224,56,221,216,112,229
db	56,56,224,56,221,216,112,229
db	140,140,10,140,20,134,5,152
db	140,140,10,140,20,134,5,152
db	209,209,99,209,198,178,191,23
db	209,209,99,209,198,178,191,23
db	165,165,174,165,65,11,87,228
db	165,165,174,165,65,11,87,228
db	226,226,175,226,67,77,217,161
db	226,226,175,226,67,77,217,161
db	97,97,153,97,47,248,194,78
db	97,97,153,97,47,248,194,78
db	179,179,246,179,241,69,123,66
db	179,179,246,179,241,69,123,66
db	33,33,132,33,21,165,66,52
db	33,33,132,33,21,165,66,52
db	156,156,74,156,148,214,37,8
db	156,156,74,156,148,214,37,8
db	30,30,120,30,240,102,60,238
db	30,30,120,30,240,102,60,238
db	67,67,17,67,34,82,134,97
db	67,67,17,67,34,82,134,97
db	199,199,59,199,118,252,147,177
db	199,199,59,199,118,252,147,177
db	252,252,215,252,179,43,229,79
db	252,252,215,252,179,43,229,79
db	4,4,16,4,32,20,8,36
db	4,4,16,4,32,20,8,36
db	81,81,89,81,178,8,162,227
db	81,81,89,81,178,8,162,227
db	153,153,94,153,188,199,47,37
db	153,153,94,153,188,199,47,37
db	109,109,169,109,79,196,218,34
db	109,109,169,109,79,196,218,34
db	13,13,52,13,104,57,26,101
db	13,13,52,13,104,57,26,101
db	250,250,207,250,131,53,233,121
db	250,250,207,250,131,53,233,121
db	223,223,91,223,182,132,163,105
db	223,223,91,223,182,132,163,105
db	126,126,229,126,215,155,252,169
db	126,126,229,126,215,155,252,169
db	36,36,144,36,61,180,72,25
db	36,36,144,36,61,180,72,25
db	59,59,236,59,197,215,118,254
db	59,59,236,59,197,215,118,254
db	171,171,150,171,49,61,75,154
db	171,171,150,171,49,61,75,154
db	206,206,31,206,62,209,129,240
db	206,206,31,206,62,209,129,240
db	17,17,68,17,136,85,34,153
db	17,17,68,17,136,85,34,153
db	143,143,6,143,12,137,3,131
db	143,143,6,143,12,137,3,131
db	78,78,37,78,74,107,156,4
db	78,78,37,78,74,107,156,4
db	183,183,230,183,209,81,115,102
db	183,183,230,183,209,81,115,102
db	235,235,139,235,11,96,203,224
db	235,235,139,235,11,96,203,224
db	60,60,240,60,253,204,120,193
db	60,60,240,60,253,204,120,193
db	129,129,62,129,124,191,31,253
db	129,129,62,129,124,191,31,253
db	148,148,106,148,212,254,53,64
db	148,148,106,148,212,254,53,64
db	247,247,251,247,235,12,243,28
db	247,247,251,247,235,12,243,28
db	185,185,222,185,161,103,111,24
db	185,185,222,185,161,103,111,24
db	19,19,76,19,152,95,38,139
db	19,19,76,19,152,95,38,139
db	44,44,176,44,125,156,88,81
db	44,44,176,44,125,156,88,81
db	211,211,107,211,214,184,187,5
db	211,211,107,211,214,184,187,5
db	231,231,187,231,107,92,211,140
db	231,231,187,231,107,92,211,140
db	110,110,165,110,87,203,220,57
db	110,110,165,110,87,203,220,57
db	196,196,55,196,110,243,149,170
db	196,196,55,196,110,243,149,170
db	3,3,12,3,24,15,6,27
db	3,3,12,3,24,15,6,27
db	86,86,69,86,138,19,172,220
db	86,86,69,86,138,19,172,220
db	68,68,13,68,26,73,136,94
db	68,68,13,68,26,73,136,94
db	127,127,225,127,223,158,254,160
db	127,127,225,127,223,158,254,160
db	169,169,158,169,33,55,79,136
db	169,169,158,169,33,55,79,136
db	42,42,168,42,77,130,84,103
db	42,42,168,42,77,130,84,103
db	187,187,214,187,177,109,107,10
db	187,187,214,187,177,109,107,10
db	193,193,35,193,70,226,159,135
db	193,193,35,193,70,226,159,135
db	83,83,81,83,162,2,166,241
db	83,83,81,83,162,2,166,241
db	220,220,87,220,174,139,165,114
db	220,220,87,220,174,139,165,114
db	11,11,44,11,88,39,22,83
db	11,11,44,11,88,39,22,83
db	157,157,78,157,156,211,39,1
db	157,157,78,157,156,211,39,1
db	108,108,173,108,71,193,216,43
db	108,108,173,108,71,193,216,43
db	49,49,196,49,149,245,98,164
db	49,49,196,49,149,245,98,164
db	116,116,205,116,135,185,232,243
db	116,116,205,116,135,185,232,243
db	246,246,255,246,227,9,241,21
db	246,246,255,246,227,9,241,21
db	70,70,5,70,10,67,140,76
db	70,70,5,70,10,67,140,76
db	172,172,138,172,9,38,69,165
db	172,172,138,172,9,38,69,165
db	137,137,30,137,60,151,15,181
db	137,137,30,137,60,151,15,181
db	20,20,80,20,160,68,40,180
db	20,20,80,20,160,68,40,180
db	225,225,163,225,91,66,223,186
db	225,225,163,225,91,66,223,186
db	22,22,88,22,176,78,44,166
db	22,22,88,22,176,78,44,166
db	58,58,232,58,205,210,116,247
db	58,58,232,58,205,210,116,247
db	105,105,185,105,111,208,210,6
db	105,105,185,105,111,208,210,6
db	9,9,36,9,72,45,18,65
db	9,9,36,9,72,45,18,65
db	112,112,221,112,167,173,224,215
db	112,112,221,112,167,173,224,215
db	182,182,226,182,217,84,113,111
db	182,182,226,182,217,84,113,111
db	208,208,103,208,206,183,189,30
db	208,208,103,208,206,183,189,30
db	237,237,147,237,59,126,199,214
db	237,237,147,237,59,126,199,214
db	204,204,23,204,46,219,133,226
db	204,204,23,204,46,219,133,226
db	66,66,21,66,42,87,132,104
db	66,66,21,66,42,87,132,104
db	152,152,90,152,180,194,45,44
db	152,152,90,152,180,194,45,44
db	164,164,170,164,73,14,85,237
db	164,164,170,164,73,14,85,237
db	40,40,160,40,93,136,80,117
db	40,40,160,40,93,136,80,117
db	92,92,109,92,218,49,184,134
db	92,92,109,92,218,49,184,134
db	248,248,199,248,147,63,237,107
db	248,248,199,248,147,63,237,107
db	134,134,34,134,68,164,17,194
db	134,134,34,134,68,164,17,194
db	24,35,198,232,135,184,1,79
db	54,166,210,245,121,111,145,82
db	96,188,155,142,163,12,123,53
db	29,224,215,194,46,75,254,87
db	21,119,55,229,159,240,74,218
db	88,201,41,10,177,160,107,133
db	189,93,16,244,203,62,5,103
db	228,39,65,139,167,125,149,216
db	251,238,124,102,221,23,71,158
db	202,45,191,7,173,90,131,51
                                                                                                                                                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/crypto/x86cpuid.asm                              0000664 0000000 0000000 00000017252 14746647661 0025133 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_OPENSSL_ia32_cpuid
align	16
_OPENSSL_ia32_cpuid:
L$_OPENSSL_ia32_cpuid_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	xor	edx,edx
	pushfd
	pop	eax
	mov	ecx,eax
	xor	eax,2097152
	push	eax
	popfd
	pushfd
	pop	eax
	xor	ecx,eax
	xor	eax,eax
	mov	esi,DWORD [20+esp]
	mov	DWORD [8+esi],eax
	bt	ecx,21
	jnc	NEAR L$000nocpuid
	cpuid
	mov	edi,eax
	xor	eax,eax
	cmp	ebx,1970169159
	setne	al
	mov	ebp,eax
	cmp	edx,1231384169
	setne	al
	or	ebp,eax
	cmp	ecx,1818588270
	setne	al
	or	ebp,eax
	jz	NEAR L$001intel
	cmp	ebx,1752462657
	setne	al
	mov	esi,eax
	cmp	edx,1769238117
	setne	al
	or	esi,eax
	cmp	ecx,1145913699
	setne	al
	or	esi,eax
	jnz	NEAR L$001intel
	mov	eax,2147483648
	cpuid
	cmp	eax,2147483649
	jb	NEAR L$001intel
	mov	esi,eax
	mov	eax,2147483649
	cpuid
	or	ebp,ecx
	and	ebp,2049
	cmp	esi,2147483656
	jb	NEAR L$001intel
	mov	eax,2147483656
	cpuid
	movzx	esi,cl
	inc	esi
	mov	eax,1
	xor	ecx,ecx
	cpuid
	bt	edx,28
	jnc	NEAR L$002generic
	shr	ebx,16
	and	ebx,255
	cmp	ebx,esi
	ja	NEAR L$002generic
	and	edx,4026531839
	jmp	NEAR L$002generic
L$001intel:
	cmp	edi,4
	mov	esi,-1
	jb	NEAR L$003nocacheinfo
	mov	eax,4
	mov	ecx,0
	cpuid
	mov	esi,eax
	shr	esi,14
	and	esi,4095
L$003nocacheinfo:
	mov	eax,1
	xor	ecx,ecx
	cpuid
	and	edx,3220176895
	cmp	ebp,0
	jne	NEAR L$004notintel
	or	edx,1073741824
	and	ah,15
	cmp	ah,15
	jne	NEAR L$004notintel
	or	edx,1048576
L$004notintel:
	bt	edx,28
	jnc	NEAR L$002generic
	and	edx,4026531839
	cmp	esi,0
	je	NEAR L$002generic
	or	edx,268435456
	shr	ebx,16
	cmp	bl,1
	ja	NEAR L$002generic
	and	edx,4026531839
L$002generic:
	and	ebp,2048
	and	ecx,4294965247
	mov	esi,edx
	or	ebp,ecx
	cmp	edi,7
	mov	edi,DWORD [20+esp]
	jb	NEAR L$005no_extended_info
	mov	eax,7
	xor	ecx,ecx
	cpuid
	mov	DWORD [8+edi],ebx
L$005no_extended_info:
	bt	ebp,27
	jnc	NEAR L$006clear_avx
	xor	ecx,ecx
db	15,1,208
	and	eax,6
	cmp	eax,6
	je	NEAR L$007done
	cmp	eax,2
	je	NEAR L$006clear_avx
L$008clear_xmm:
	and	ebp,4261412861
	and	esi,4278190079
L$006clear_avx:
	and	ebp,4026525695
	and	DWORD [8+edi],4294967263
L$007done:
	mov	eax,esi
	mov	edx,ebp
L$000nocpuid:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
;extern	_OPENSSL_ia32cap_P
global	_OPENSSL_rdtsc
align	16
_OPENSSL_rdtsc:
L$_OPENSSL_rdtsc_begin:
	xor	eax,eax
	xor	edx,edx
	lea	ecx,[_OPENSSL_ia32cap_P]
	bt	DWORD [ecx],4
	jnc	NEAR L$009notsc
	rdtsc
L$009notsc:
	ret
global	_OPENSSL_instrument_halt
align	16
_OPENSSL_instrument_halt:
L$_OPENSSL_instrument_halt_begin:
	lea	ecx,[_OPENSSL_ia32cap_P]
	bt	DWORD [ecx],4
	jnc	NEAR L$010nohalt
dd	2421723150
	and	eax,3
	jnz	NEAR L$010nohalt
	pushfd
	pop	eax
	bt	eax,9
	jnc	NEAR L$010nohalt
	rdtsc
	push	edx
	push	eax
	hlt
	rdtsc
	sub	eax,DWORD [esp]
	sbb	edx,DWORD [4+esp]
	add	esp,8
	ret
L$010nohalt:
	xor	eax,eax
	xor	edx,edx
	ret
global	_OPENSSL_far_spin
align	16
_OPENSSL_far_spin:
L$_OPENSSL_far_spin_begin:
	pushfd
	pop	eax
	bt	eax,9
	jnc	NEAR L$011nospin
	mov	eax,DWORD [4+esp]
	mov	ecx,DWORD [8+esp]
dd	2430111262
	xor	eax,eax
	mov	edx,DWORD [ecx]
	jmp	NEAR L$012spin
align	16
L$012spin:
	inc	eax
	cmp	edx,DWORD [ecx]
	je	NEAR L$012spin
dd	529567888
	ret
L$011nospin:
	xor	eax,eax
	xor	edx,edx
	ret
global	_OPENSSL_wipe_cpu
align	16
_OPENSSL_wipe_cpu:
L$_OPENSSL_wipe_cpu_begin:
	xor	eax,eax
	xor	edx,edx
	lea	ecx,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [ecx]
	bt	DWORD [ecx],1
	jnc	NEAR L$013no_x87
	and	ecx,83886080
	cmp	ecx,83886080
	jne	NEAR L$014no_sse2
	pxor	xmm0,xmm0
	pxor	xmm1,xmm1
	pxor	xmm2,xmm2
	pxor	xmm3,xmm3
	pxor	xmm4,xmm4
	pxor	xmm5,xmm5
	pxor	xmm6,xmm6
	pxor	xmm7,xmm7
L$014no_sse2:
dd	4007259865,4007259865,4007259865,4007259865,2430851995
L$013no_x87:
	lea	eax,[4+esp]
	ret
global	_OPENSSL_atomic_add
align	16
_OPENSSL_atomic_add:
L$_OPENSSL_atomic_add_begin:
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [8+esp]
	push	ebx
	nop
	mov	eax,DWORD [edx]
L$015spin:
	lea	ebx,[ecx*1+eax]
	nop
dd	447811568
	jne	NEAR L$015spin
	mov	eax,ebx
	pop	ebx
	ret
global	_OPENSSL_cleanse
align	16
_OPENSSL_cleanse:
L$_OPENSSL_cleanse_begin:
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [8+esp]
	xor	eax,eax
	cmp	ecx,7
	jae	NEAR L$016lot
	cmp	ecx,0
	je	NEAR L$017ret
L$018little:
	mov	BYTE [edx],al
	sub	ecx,1
	lea	edx,[1+edx]
	jnz	NEAR L$018little
L$017ret:
	ret
align	16
L$016lot:
	test	edx,3
	jz	NEAR L$019aligned
	mov	BYTE [edx],al
	lea	ecx,[ecx-1]
	lea	edx,[1+edx]
	jmp	NEAR L$016lot
L$019aligned:
	mov	DWORD [edx],eax
	lea	ecx,[ecx-4]
	test	ecx,-4
	lea	edx,[4+edx]
	jnz	NEAR L$019aligned
	cmp	ecx,0
	jne	NEAR L$018little
	ret
global	_CRYPTO_memcmp
align	16
_CRYPTO_memcmp:
L$_CRYPTO_memcmp_begin:
	push	esi
	push	edi
	mov	esi,DWORD [12+esp]
	mov	edi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	xor	eax,eax
	xor	edx,edx
	cmp	ecx,0
	je	NEAR L$020no_data
L$021loop:
	mov	dl,BYTE [esi]
	lea	esi,[1+esi]
	xor	dl,BYTE [edi]
	lea	edi,[1+edi]
	or	al,dl
	dec	ecx
	jnz	NEAR L$021loop
	neg	eax
	shr	eax,31
L$020no_data:
	pop	edi
	pop	esi
	ret
global	_OPENSSL_instrument_bus
align	16
_OPENSSL_instrument_bus:
L$_OPENSSL_instrument_bus_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	eax,0
	lea	edx,[_OPENSSL_ia32cap_P]
	bt	DWORD [edx],4
	jnc	NEAR L$022nogo
	bt	DWORD [edx],19
	jnc	NEAR L$022nogo
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	rdtsc
	mov	esi,eax
	mov	ebx,0
	clflush	[edi]
db	240
	add	DWORD [edi],ebx
	jmp	NEAR L$023loop
align	16
L$023loop:
	rdtsc
	mov	edx,eax
	sub	eax,esi
	mov	esi,edx
	mov	ebx,eax
	clflush	[edi]
db	240
	add	DWORD [edi],eax
	lea	edi,[4+edi]
	sub	ecx,1
	jnz	NEAR L$023loop
	mov	eax,DWORD [24+esp]
L$022nogo:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_OPENSSL_instrument_bus2
align	16
_OPENSSL_instrument_bus2:
L$_OPENSSL_instrument_bus2_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	eax,0
	lea	edx,[_OPENSSL_ia32cap_P]
	bt	DWORD [edx],4
	jnc	NEAR L$024nogo
	bt	DWORD [edx],19
	jnc	NEAR L$024nogo
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	rdtsc
	mov	esi,eax
	mov	ebx,0
	clflush	[edi]
db	240
	add	DWORD [edi],ebx
	rdtsc
	mov	edx,eax
	sub	eax,esi
	mov	esi,edx
	mov	ebx,eax
	jmp	NEAR L$025loop2
align	16
L$025loop2:
	clflush	[edi]
db	240
	add	DWORD [edi],eax
	sub	ebp,1
	jz	NEAR L$026done2
	rdtsc
	mov	edx,eax
	sub	eax,esi
	mov	esi,edx
	cmp	eax,ebx
	mov	ebx,eax
	mov	edx,0
	setne	dl
	sub	ecx,edx
	lea	edi,[edx*4+edi]
	jnz	NEAR L$025loop2
L$026done2:
	mov	eax,DWORD [24+esp]
	sub	eax,ecx
L$024nogo:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_OPENSSL_ia32_rdrand_bytes
align	16
_OPENSSL_ia32_rdrand_bytes:
L$_OPENSSL_ia32_rdrand_bytes_begin:
	push	edi
	push	ebx
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	ebx,DWORD [16+esp]
	cmp	ebx,0
	je	NEAR L$027done
	mov	ecx,8
L$028loop:
db	15,199,242
	jc	NEAR L$029break
	loop	L$028loop
	jmp	NEAR L$027done
align	16
L$029break:
	cmp	ebx,4
	jb	NEAR L$030tail
	mov	DWORD [edi],edx
	lea	edi,[4+edi]
	add	eax,4
	sub	ebx,4
	jz	NEAR L$027done
	mov	ecx,8
	jmp	NEAR L$028loop
align	16
L$030tail:
	mov	BYTE [edi],dl
	lea	edi,[1+edi]
	inc	eax
	shr	edx,8
	dec	ebx
	jnz	NEAR L$030tail
L$027done:
	xor	edx,edx
	pop	ebx
	pop	edi
	ret
global	_OPENSSL_ia32_rdseed_bytes
align	16
_OPENSSL_ia32_rdseed_bytes:
L$_OPENSSL_ia32_rdseed_bytes_begin:
	push	edi
	push	ebx
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	ebx,DWORD [16+esp]
	cmp	ebx,0
	je	NEAR L$031done
	mov	ecx,8
L$032loop:
db	15,199,250
	jc	NEAR L$033break
	loop	L$032loop
	jmp	NEAR L$031done
align	16
L$033break:
	cmp	ebx,4
	jb	NEAR L$034tail
	mov	DWORD [edi],edx
	lea	edi,[4+edi]
	add	eax,4
	sub	ebx,4
	jz	NEAR L$031done
	mov	ecx,8
	jmp	NEAR L$032loop
align	16
L$034tail:
	mov	BYTE [edi],dl
	lea	edi,[1+edi]
	inc	eax
	shr	edx,8
	dec	ebx
	jnz	NEAR L$034tail
L$031done:
	xor	edx,edx
	pop	ebx
	pop	edi
	ret
segment	.bss
common	_OPENSSL_ia32cap_P 16
segment	.CRT$XCU data align=4
extern	_OPENSSL_cpuid_setup
dd	_OPENSSL_cpuid_setup
                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/engines/                                         0000775 0000000 0000000 00000000000 14746647661 0023060 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/engines/e_padlock-x86.asm                        0000664 0000000 0000000 00000041535 14746647661 0026136 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_padlock_capability
align	16
_padlock_capability:
L$_padlock_capability_begin:
	push	ebx
	pushfd
	pop	eax
	mov	ecx,eax
	xor	eax,2097152
	push	eax
	popfd
	pushfd
	pop	eax
	xor	ecx,eax
	xor	eax,eax
	bt	ecx,21
	jnc	NEAR L$000noluck
	cpuid
	xor	eax,eax
	cmp	ebx,0x746e6543
	jne	NEAR L$001zhaoxin
	cmp	edx,0x48727561
	jne	NEAR L$000noluck
	cmp	ecx,0x736c7561
	jne	NEAR L$000noluck
	jmp	NEAR L$002zhaoxinEnd
L$001zhaoxin:
	cmp	ebx,0x68532020
	jne	NEAR L$000noluck
	cmp	edx,0x68676e61
	jne	NEAR L$000noluck
	cmp	ecx,0x20206961
	jne	NEAR L$000noluck
L$002zhaoxinEnd:
	mov	eax,3221225472
	cpuid
	mov	edx,eax
	xor	eax,eax
	cmp	edx,3221225473
	jb	NEAR L$000noluck
	mov	eax,1
	cpuid
	or	eax,15
	xor	ebx,ebx
	and	eax,4095
	cmp	eax,1791
	sete	bl
	mov	eax,3221225473
	push	ebx
	cpuid
	pop	ebx
	mov	eax,edx
	shl	ebx,4
	and	eax,4294967279
	or	eax,ebx
L$000noluck:
	pop	ebx
	ret
global	_padlock_key_bswap
align	16
_padlock_key_bswap:
L$_padlock_key_bswap_begin:
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [240+edx]
	inc	ecx
	shl	ecx,2
L$003bswap_loop:
	mov	eax,DWORD [edx]
	bswap	eax
	mov	DWORD [edx],eax
	lea	edx,[4+edx]
	sub	ecx,1
	jnz	NEAR L$003bswap_loop
	ret
global	_padlock_verify_context
align	16
_padlock_verify_context:
L$_padlock_verify_context_begin:
	mov	edx,DWORD [4+esp]
	lea	eax,[L$padlock_saved_context]
	pushfd
	call	__padlock_verify_ctx
L$004verify_pic_point:
	lea	esp,[4+esp]
	ret
align	16
__padlock_verify_ctx:
	bt	DWORD [4+esp],30
	jnc	NEAR L$005verified
	cmp	edx,DWORD [eax]
	je	NEAR L$005verified
	pushfd
	popfd
L$005verified:
	mov	DWORD [eax],edx
	ret
global	_padlock_reload_key
align	16
_padlock_reload_key:
L$_padlock_reload_key_begin:
	pushfd
	popfd
	ret
global	_padlock_aes_block
align	16
_padlock_aes_block:
L$_padlock_aes_block_begin:
	push	edi
	push	esi
	push	ebx
	mov	edi,DWORD [16+esp]
	mov	esi,DWORD [20+esp]
	mov	edx,DWORD [24+esp]
	mov	ecx,1
	lea	ebx,[32+edx]
	lea	edx,[16+edx]
db	243,15,167,200
	pop	ebx
	pop	esi
	pop	edi
	ret
global	_padlock_ecb_encrypt
align	16
_padlock_ecb_encrypt:
L$_padlock_ecb_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$006ecb_abort
	test	ecx,15
	jnz	NEAR L$006ecb_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$007ecb_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$008ecb_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$008ecb_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	cmp	ecx,ebx
	ja	NEAR L$009ecb_loop
	mov	eax,esi
	cmp	ebp,esp
	cmove	eax,edi
	add	eax,ecx
	neg	eax
	and	eax,4095
	cmp	eax,128
	mov	eax,-128
	cmovae	eax,ebx
	and	ebx,eax
	jz	NEAR L$010ecb_unaligned_tail
	jmp	NEAR L$009ecb_loop
align	16
L$009ecb_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$011ecb_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$011ecb_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,200
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$012ecb_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$012ecb_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jz	NEAR L$013ecb_break
	cmp	ecx,ebx
	jae	NEAR L$009ecb_loop
L$010ecb_unaligned_tail:
	xor	eax,eax
	cmp	esp,ebp
	cmove	eax,ecx
	sub	esp,eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$009ecb_loop
align	16
L$013ecb_break:
	cmp	esp,ebp
	je	NEAR L$014ecb_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$015ecb_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$015ecb_bzero
L$014ecb_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$016ecb_exit
align	16
L$008ecb_aligned:
	lea	ebp,[ecx*1+esi]
	neg	ebp
	and	ebp,4095
	xor	eax,eax
	cmp	ebp,128
	mov	ebp,127
	cmovae	ebp,eax
	and	ebp,ecx
	sub	ecx,ebp
	jz	NEAR L$017ecb_aligned_tail
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,200
	test	ebp,ebp
	jz	NEAR L$016ecb_exit
L$017ecb_aligned_tail:
	mov	ecx,ebp
	lea	ebp,[esp-24]
	mov	esp,ebp
	mov	eax,ebp
	sub	esp,ecx
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$009ecb_loop
L$016ecb_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$006ecb_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_cbc_encrypt
align	16
_padlock_cbc_encrypt:
L$_padlock_cbc_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$018cbc_abort
	test	ecx,15
	jnz	NEAR L$018cbc_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$019cbc_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$020cbc_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$020cbc_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	cmp	ecx,ebx
	ja	NEAR L$021cbc_loop
	mov	eax,esi
	cmp	ebp,esp
	cmove	eax,edi
	add	eax,ecx
	neg	eax
	and	eax,4095
	cmp	eax,64
	mov	eax,-64
	cmovae	eax,ebx
	and	ebx,eax
	jz	NEAR L$022cbc_unaligned_tail
	jmp	NEAR L$021cbc_loop
align	16
L$021cbc_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$023cbc_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$023cbc_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,208
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$024cbc_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$024cbc_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jz	NEAR L$025cbc_break
	cmp	ecx,ebx
	jae	NEAR L$021cbc_loop
L$022cbc_unaligned_tail:
	xor	eax,eax
	cmp	esp,ebp
	cmove	eax,ecx
	sub	esp,eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$021cbc_loop
align	16
L$025cbc_break:
	cmp	esp,ebp
	je	NEAR L$026cbc_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$027cbc_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$027cbc_bzero
L$026cbc_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$028cbc_exit
align	16
L$020cbc_aligned:
	lea	ebp,[ecx*1+esi]
	neg	ebp
	and	ebp,4095
	xor	eax,eax
	cmp	ebp,64
	mov	ebp,63
	cmovae	ebp,eax
	and	ebp,ecx
	sub	ecx,ebp
	jz	NEAR L$029cbc_aligned_tail
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,208
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	test	ebp,ebp
	jz	NEAR L$028cbc_exit
L$029cbc_aligned_tail:
	mov	ecx,ebp
	lea	ebp,[esp-24]
	mov	esp,ebp
	mov	eax,ebp
	sub	esp,ecx
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$021cbc_loop
L$028cbc_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$018cbc_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_cfb_encrypt
align	16
_padlock_cfb_encrypt:
L$_padlock_cfb_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$030cfb_abort
	test	ecx,15
	jnz	NEAR L$030cfb_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$031cfb_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$032cfb_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$032cfb_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	jmp	NEAR L$033cfb_loop
align	16
L$033cfb_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$034cfb_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$034cfb_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,224
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$035cfb_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$035cfb_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jnz	NEAR L$033cfb_loop
	cmp	esp,ebp
	je	NEAR L$036cfb_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$037cfb_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$037cfb_bzero
L$036cfb_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$038cfb_exit
align	16
L$032cfb_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,224
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
L$038cfb_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$030cfb_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_ofb_encrypt
align	16
_padlock_ofb_encrypt:
L$_padlock_ofb_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$039ofb_abort
	test	ecx,15
	jnz	NEAR L$039ofb_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$040ofb_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$041ofb_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$041ofb_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	jmp	NEAR L$042ofb_loop
align	16
L$042ofb_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$043ofb_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$043ofb_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,232
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$044ofb_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$044ofb_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jnz	NEAR L$042ofb_loop
	cmp	esp,ebp
	je	NEAR L$045ofb_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$046ofb_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$046ofb_bzero
L$045ofb_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$047ofb_exit
align	16
L$041ofb_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,232
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
L$047ofb_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$039ofb_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_ctr32_encrypt
align	16
_padlock_ctr32_encrypt:
L$_padlock_ctr32_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$048ctr32_abort
	test	ecx,15
	jnz	NEAR L$048ctr32_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$049ctr32_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	movq	mm0,[edx-16]
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	jmp	NEAR L$050ctr32_loop
align	16
L$050ctr32_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	mov	ecx,DWORD [edx-4]
	xor	edi,edi
	mov	eax,DWORD [edx-8]
L$051ctr32_prepare:
	mov	DWORD [12+edi*1+esp],ecx
	bswap	ecx
	movq	[edi*1+esp],mm0
	inc	ecx
	mov	DWORD [8+edi*1+esp],eax
	bswap	ecx
	lea	edi,[16+edi]
	cmp	edi,ebx
	jb	NEAR L$051ctr32_prepare
	mov	DWORD [edx-4],ecx
	lea	esi,[esp]
	lea	edi,[esp]
	mov	ecx,ebx
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,200
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	mov	esi,DWORD [4+ebp]
	xor	ecx,ecx
L$052ctr32_xor:
	movups	xmm1,[ecx*1+esi]
	lea	ecx,[16+ecx]
	pxor	xmm1,[ecx*1+esp-16]
	movups	[ecx*1+edi-16],xmm1
	cmp	ecx,ebx
	jb	NEAR L$052ctr32_xor
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jnz	NEAR L$050ctr32_loop
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$053ctr32_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$053ctr32_bzero
L$054ctr32_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	mov	eax,1
	lea	esp,[4+esp]
	emms
L$048ctr32_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_xstore
align	16
_padlock_xstore:
L$_padlock_xstore_begin:
	push	edi
	mov	edi,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
db	15,167,192
	pop	edi
	ret
align	16
__win32_segv_handler:
	mov	eax,1
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [12+esp]
	cmp	DWORD [edx],3221225477
	jne	NEAR L$055ret
	add	DWORD [184+ecx],4
	mov	eax,0
L$055ret:
	ret
%if	__NASM_VERSION_ID__ >= 0x02030000
safeseh	__win32_segv_handler
%endif
global	_padlock_sha1_oneshot
align	16
_padlock_sha1_oneshot:
L$_padlock_sha1_oneshot_begin:
	push	edi
	push	esi
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	push	__win32_segv_handler
db	100,255,48
db	100,137,32
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	mov	eax,DWORD [16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	mov	DWORD [16+esp],eax
	xor	eax,eax
db	243,15,166,200
	movaps	xmm0,[esp]
	mov	eax,DWORD [16+esp]
	mov	esp,edx
db	100,143,5,0,0,0,0
	lea	esp,[4+esp]
	mov	edi,DWORD [16+esp]
	movups	[edi],xmm0
	mov	DWORD [16+edi],eax
	pop	esi
	pop	edi
	ret
global	_padlock_sha1_blocks
align	16
_padlock_sha1_blocks:
L$_padlock_sha1_blocks_begin:
	push	edi
	push	esi
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	edx,esp
	mov	ecx,DWORD [20+esp]
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	mov	eax,DWORD [16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	mov	DWORD [16+esp],eax
	mov	eax,-1
db	243,15,166,200
	movaps	xmm0,[esp]
	mov	eax,DWORD [16+esp]
	mov	esp,edx
	mov	edi,DWORD [12+esp]
	movups	[edi],xmm0
	mov	DWORD [16+edi],eax
	pop	esi
	pop	edi
	ret
global	_padlock_sha256_oneshot
align	16
_padlock_sha256_oneshot:
L$_padlock_sha256_oneshot_begin:
	push	edi
	push	esi
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	push	__win32_segv_handler
db	100,255,48
db	100,137,32
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	movups	xmm1,[16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	movaps	[16+esp],xmm1
	xor	eax,eax
db	243,15,166,208
	movaps	xmm0,[esp]
	movaps	xmm1,[16+esp]
	mov	esp,edx
db	100,143,5,0,0,0,0
	lea	esp,[4+esp]
	mov	edi,DWORD [16+esp]
	movups	[edi],xmm0
	movups	[16+edi],xmm1
	pop	esi
	pop	edi
	ret
global	_padlock_sha256_blocks
align	16
_padlock_sha256_blocks:
L$_padlock_sha256_blocks_begin:
	push	edi
	push	esi
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	movups	xmm1,[16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	movaps	[16+esp],xmm1
	mov	eax,-1
db	243,15,166,208
	movaps	xmm0,[esp]
	movaps	xmm1,[16+esp]
	mov	esp,edx
	mov	edi,DWORD [12+esp]
	movups	[edi],xmm0
	movups	[16+edi],xmm1
	pop	esi
	pop	edi
	ret
global	_padlock_sha512_blocks
align	16
_padlock_sha512_blocks:
L$_padlock_sha512_blocks_begin:
	push	edi
	push	esi
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	movups	xmm1,[16+edi]
	movups	xmm2,[32+edi]
	movups	xmm3,[48+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	movaps	[16+esp],xmm1
	movaps	[32+esp],xmm2
	movaps	[48+esp],xmm3
db	243,15,166,224
	movaps	xmm0,[esp]
	movaps	xmm1,[16+esp]
	movaps	xmm2,[32+esp]
	movaps	xmm3,[48+esp]
	mov	esp,edx
	mov	edi,DWORD [12+esp]
	movups	[edi],xmm0
	movups	[16+edi],xmm1
	movups	[32+edi],xmm2
	movups	[48+edi],xmm3
	pop	esi
	pop	edi
	ret
db	86,73,65,32,80,97,100,108,111,99,107,32,120,56,54,32
db	109,111,100,117,108,101,44,32,67,82,89,80,84,79,71,65
db	77,83,32,98,121,32,60,97,112,112,114,111,64,111,112,101
db	110,115,115,108,46,111,114,103,62,0
align	16
section	.data align=4
align	4
L$padlock_saved_context:
dd	0
                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/                                         0000775 0000000 0000000 00000000000 14746647661 0023053 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/crypto/                                  0000775 0000000 0000000 00000000000 14746647661 0024373 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/crypto/bn_conf.h                         0000664 0000000 0000000 00000001505 14746647661 0026151 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /* WARNING: do not edit! */
/* Generated by makefile from include/crypto/bn_conf.h.in */
/*
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OSSL_CRYPTO_BN_CONF_H
# define OSSL_CRYPTO_BN_CONF_H
# pragma once

/*
 * The contents of this file are not used in the UEFI build, as
 * both 32-bit and 64-bit builds are supported from a single run
 * of the Configure script.
 */

/* Should we define BN_DIV2W here? */

/* Only one for the following should be defined */
#undef SIXTY_FOUR_BIT_LONG
#undef SIXTY_FOUR_BIT
#define THIRTY_TWO_BIT

#endif
                                                                                                                                                                                           node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/crypto/dso_conf.h                        0000664 0000000 0000000 00000001061 14746647661 0026334 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /* WARNING: do not edit! */
/* Generated by makefile from include/crypto/dso_conf.h.in */
/*
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OSSL_CRYPTO_DSO_CONF_H
# define OSSL_CRYPTO_DSO_CONF_H
# pragma once

# define DSO_WIN32
# define DSO_EXTENSION ".dll"
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/                                 0000775 0000000 0000000 00000000000 14746647661 0024536 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/asn1.h                           0000664 0000000 0000000 00000166762 14746647661 0025573 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/asn1.h.in
 *
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_ASN1_H
# define OPENSSL_ASN1_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_ASN1_H
# endif

# include <time.h>
# include <openssl/e_os2.h>
# include <openssl/opensslconf.h>
# include <openssl/bio.h>
# include <openssl/safestack.h>
# include <openssl/asn1err.h>
# include <openssl/symhacks.h>

# include <openssl/types.h>
# include <openssl/bn.h>

# ifdef OPENSSL_BUILD_SHLIBCRYPTO
#  undef OPENSSL_EXTERN
#  define OPENSSL_EXTERN OPENSSL_EXPORT
# endif

#ifdef  __cplusplus
extern "C" {
#endif

# define V_ASN1_UNIVERSAL                0x00
# define V_ASN1_APPLICATION              0x40
# define V_ASN1_CONTEXT_SPECIFIC         0x80
# define V_ASN1_PRIVATE                  0xc0

# define V_ASN1_CONSTRUCTED              0x20
# define V_ASN1_PRIMITIVE_TAG            0x1f
# define V_ASN1_PRIMATIVE_TAG /*compat*/ V_ASN1_PRIMITIVE_TAG

# define V_ASN1_APP_CHOOSE               -2/* let the recipient choose */
# define V_ASN1_OTHER                    -3/* used in ASN1_TYPE */
# define V_ASN1_ANY                      -4/* used in ASN1 template code */

# define V_ASN1_UNDEF                    -1
/* ASN.1 tag values */
# define V_ASN1_EOC                      0
# define V_ASN1_BOOLEAN                  1 /**/
# define V_ASN1_INTEGER                  2
# define V_ASN1_BIT_STRING               3
# define V_ASN1_OCTET_STRING             4
# define V_ASN1_NULL                     5
# define V_ASN1_OBJECT                   6
# define V_ASN1_OBJECT_DESCRIPTOR        7
# define V_ASN1_EXTERNAL                 8
# define V_ASN1_REAL                     9
# define V_ASN1_ENUMERATED               10
# define V_ASN1_UTF8STRING               12
# define V_ASN1_SEQUENCE                 16
# define V_ASN1_SET                      17
# define V_ASN1_NUMERICSTRING            18 /**/
# define V_ASN1_PRINTABLESTRING          19
# define V_ASN1_T61STRING                20
# define V_ASN1_TELETEXSTRING            20/* alias */
# define V_ASN1_VIDEOTEXSTRING           21 /**/
# define V_ASN1_IA5STRING                22
# define V_ASN1_UTCTIME                  23
# define V_ASN1_GENERALIZEDTIME          24 /**/
# define V_ASN1_GRAPHICSTRING            25 /**/
# define V_ASN1_ISO64STRING              26 /**/
# define V_ASN1_VISIBLESTRING            26/* alias */
# define V_ASN1_GENERALSTRING            27 /**/
# define V_ASN1_UNIVERSALSTRING          28 /**/
# define V_ASN1_BMPSTRING                30

/*
 * NB the constants below are used internally by ASN1_INTEGER
 * and ASN1_ENUMERATED to indicate the sign. They are *not* on
 * the wire tag values.
 */

# define V_ASN1_NEG                      0x100
# define V_ASN1_NEG_INTEGER              (2 | V_ASN1_NEG)
# define V_ASN1_NEG_ENUMERATED           (10 | V_ASN1_NEG)

/* For use with d2i_ASN1_type_bytes() */
# define B_ASN1_NUMERICSTRING    0x0001
# define B_ASN1_PRINTABLESTRING  0x0002
# define B_ASN1_T61STRING        0x0004
# define B_ASN1_TELETEXSTRING    0x0004
# define B_ASN1_VIDEOTEXSTRING   0x0008
# define B_ASN1_IA5STRING        0x0010
# define B_ASN1_GRAPHICSTRING    0x0020
# define B_ASN1_ISO64STRING      0x0040
# define B_ASN1_VISIBLESTRING    0x0040
# define B_ASN1_GENERALSTRING    0x0080
# define B_ASN1_UNIVERSALSTRING  0x0100
# define B_ASN1_OCTET_STRING     0x0200
# define B_ASN1_BIT_STRING       0x0400
# define B_ASN1_BMPSTRING        0x0800
# define B_ASN1_UNKNOWN          0x1000
# define B_ASN1_UTF8STRING       0x2000
# define B_ASN1_UTCTIME          0x4000
# define B_ASN1_GENERALIZEDTIME  0x8000
# define B_ASN1_SEQUENCE         0x10000
/* For use with ASN1_mbstring_copy() */
# define MBSTRING_FLAG           0x1000
# define MBSTRING_UTF8           (MBSTRING_FLAG)
# define MBSTRING_ASC            (MBSTRING_FLAG|1)
# define MBSTRING_BMP            (MBSTRING_FLAG|2)
# define MBSTRING_UNIV           (MBSTRING_FLAG|4)
# define SMIME_OLDMIME           0x400
# define SMIME_CRLFEOL           0x800
# define SMIME_STREAM            0x1000

/* Stacks for types not otherwise defined in this header */
SKM_DEFINE_STACK_OF_INTERNAL(X509_ALGOR, X509_ALGOR, X509_ALGOR)
#define sk_X509_ALGOR_num(sk) OPENSSL_sk_num(ossl_check_const_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_value(sk, idx) ((X509_ALGOR *)OPENSSL_sk_value(ossl_check_const_X509_ALGOR_sk_type(sk), (idx)))
#define sk_X509_ALGOR_new(cmp) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_new(ossl_check_X509_ALGOR_compfunc_type(cmp)))
#define sk_X509_ALGOR_new_null() ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_new_null())
#define sk_X509_ALGOR_new_reserve(cmp, n) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_new_reserve(ossl_check_X509_ALGOR_compfunc_type(cmp), (n)))
#define sk_X509_ALGOR_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_ALGOR_sk_type(sk), (n))
#define sk_X509_ALGOR_free(sk) OPENSSL_sk_free(ossl_check_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_zero(sk) OPENSSL_sk_zero(ossl_check_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_delete(sk, i) ((X509_ALGOR *)OPENSSL_sk_delete(ossl_check_X509_ALGOR_sk_type(sk), (i)))
#define sk_X509_ALGOR_delete_ptr(sk, ptr) ((X509_ALGOR *)OPENSSL_sk_delete_ptr(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr)))
#define sk_X509_ALGOR_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_pop(sk) ((X509_ALGOR *)OPENSSL_sk_pop(ossl_check_X509_ALGOR_sk_type(sk)))
#define sk_X509_ALGOR_shift(sk) ((X509_ALGOR *)OPENSSL_sk_shift(ossl_check_X509_ALGOR_sk_type(sk)))
#define sk_X509_ALGOR_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_ALGOR_sk_type(sk),ossl_check_X509_ALGOR_freefunc_type(freefunc))
#define sk_X509_ALGOR_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr), (idx))
#define sk_X509_ALGOR_set(sk, idx, ptr) ((X509_ALGOR *)OPENSSL_sk_set(ossl_check_X509_ALGOR_sk_type(sk), (idx), ossl_check_X509_ALGOR_type(ptr)))
#define sk_X509_ALGOR_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr), pnum)
#define sk_X509_ALGOR_sort(sk) OPENSSL_sk_sort(ossl_check_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_dup(sk) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_dup(ossl_check_const_X509_ALGOR_sk_type(sk)))
#define sk_X509_ALGOR_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_copyfunc_type(copyfunc), ossl_check_X509_ALGOR_freefunc_type(freefunc)))
#define sk_X509_ALGOR_set_cmp_func(sk, cmp) ((sk_X509_ALGOR_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_compfunc_type(cmp)))



# define ASN1_STRING_FLAG_BITS_LEFT 0x08/* Set if 0x07 has bits left value */
/*
 * This indicates that the ASN1_STRING is not a real value but just a place
 * holder for the location where indefinite length constructed data should be
 * inserted in the memory buffer
 */
# define ASN1_STRING_FLAG_NDEF 0x010

/*
 * This flag is used by the CMS code to indicate that a string is not
 * complete and is a place holder for content when it had all been accessed.
 * The flag will be reset when content has been written to it.
 */

# define ASN1_STRING_FLAG_CONT 0x020
/*
 * This flag is used by ASN1 code to indicate an ASN1_STRING is an MSTRING
 * type.
 */
# define ASN1_STRING_FLAG_MSTRING 0x040
/* String is embedded and only content should be freed */
# define ASN1_STRING_FLAG_EMBED 0x080
/* String should be parsed in RFC 5280's time format */
# define ASN1_STRING_FLAG_X509_TIME 0x100
/* This is the base type that holds just about everything :-) */
struct asn1_string_st {
    int length;
    int type;
    unsigned char *data;
    /*
     * The value of the following field depends on the type being held.  It
     * is mostly being used for BIT_STRING so if the input data has a
     * non-zero 'unused bits' value, it will be handled correctly
     */
    long flags;
};

/*
 * ASN1_ENCODING structure: this is used to save the received encoding of an
 * ASN1 type. This is useful to get round problems with invalid encodings
 * which can break signatures.
 */

typedef struct ASN1_ENCODING_st {
    unsigned char *enc;         /* DER encoding */
    long len;                   /* Length of encoding */
    int modified;               /* set to 1 if 'enc' is invalid */
} ASN1_ENCODING;

/* Used with ASN1 LONG type: if a long is set to this it is omitted */
# define ASN1_LONG_UNDEF 0x7fffffffL

# define STABLE_FLAGS_MALLOC     0x01
/*
 * A zero passed to ASN1_STRING_TABLE_new_add for the flags is interpreted
 * as "don't change" and STABLE_FLAGS_MALLOC is always set. By setting
 * STABLE_FLAGS_MALLOC only we can clear the existing value. Use the alias
 * STABLE_FLAGS_CLEAR to reflect this.
 */
# define STABLE_FLAGS_CLEAR      STABLE_FLAGS_MALLOC
# define STABLE_NO_MASK          0x02
# define DIRSTRING_TYPE  \
 (B_ASN1_PRINTABLESTRING|B_ASN1_T61STRING|B_ASN1_BMPSTRING|B_ASN1_UTF8STRING)
# define PKCS9STRING_TYPE (DIRSTRING_TYPE|B_ASN1_IA5STRING)

struct asn1_string_table_st {
    int nid;
    long minsize;
    long maxsize;
    unsigned long mask;
    unsigned long flags;
};

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_STRING_TABLE, ASN1_STRING_TABLE, ASN1_STRING_TABLE)
#define sk_ASN1_STRING_TABLE_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_value(sk, idx) ((ASN1_STRING_TABLE *)OPENSSL_sk_value(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk), (idx)))
#define sk_ASN1_STRING_TABLE_new(cmp) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_new(ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp)))
#define sk_ASN1_STRING_TABLE_new_null() ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_new_null())
#define sk_ASN1_STRING_TABLE_new_reserve(cmp, n) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp), (n)))
#define sk_ASN1_STRING_TABLE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_STRING_TABLE_sk_type(sk), (n))
#define sk_ASN1_STRING_TABLE_free(sk) OPENSSL_sk_free(ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_delete(sk, i) ((ASN1_STRING_TABLE *)OPENSSL_sk_delete(ossl_check_ASN1_STRING_TABLE_sk_type(sk), (i)))
#define sk_ASN1_STRING_TABLE_delete_ptr(sk, ptr) ((ASN1_STRING_TABLE *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr)))
#define sk_ASN1_STRING_TABLE_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_pop(sk) ((ASN1_STRING_TABLE *)OPENSSL_sk_pop(ossl_check_ASN1_STRING_TABLE_sk_type(sk)))
#define sk_ASN1_STRING_TABLE_shift(sk) ((ASN1_STRING_TABLE *)OPENSSL_sk_shift(ossl_check_ASN1_STRING_TABLE_sk_type(sk)))
#define sk_ASN1_STRING_TABLE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_STRING_TABLE_sk_type(sk),ossl_check_ASN1_STRING_TABLE_freefunc_type(freefunc))
#define sk_ASN1_STRING_TABLE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr), (idx))
#define sk_ASN1_STRING_TABLE_set(sk, idx, ptr) ((ASN1_STRING_TABLE *)OPENSSL_sk_set(ossl_check_ASN1_STRING_TABLE_sk_type(sk), (idx), ossl_check_ASN1_STRING_TABLE_type(ptr)))
#define sk_ASN1_STRING_TABLE_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr), pnum)
#define sk_ASN1_STRING_TABLE_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_dup(sk) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_dup(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk)))
#define sk_ASN1_STRING_TABLE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_copyfunc_type(copyfunc), ossl_check_ASN1_STRING_TABLE_freefunc_type(freefunc)))
#define sk_ASN1_STRING_TABLE_set_cmp_func(sk, cmp) ((sk_ASN1_STRING_TABLE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp)))


/* size limits: this stuff is taken straight from RFC2459 */

# define ub_name                         32768
# define ub_common_name                  64
# define ub_locality_name                128
# define ub_state_name                   128
# define ub_organization_name            64
# define ub_organization_unit_name       64
# define ub_title                        64
# define ub_email_address                128

/*
 * Declarations for template structures: for full definitions see asn1t.h
 */
typedef struct ASN1_TEMPLATE_st ASN1_TEMPLATE;
typedef struct ASN1_TLC_st ASN1_TLC;
/* This is just an opaque pointer */
typedef struct ASN1_VALUE_st ASN1_VALUE;

/* Declare ASN1 functions: the implement macro in in asn1t.h */

/*
 * The mysterious 'extern' that's passed to some macros is innocuous,
 * and is there to quiet pre-C99 compilers that may complain about empty
 * arguments in macro calls.
 */

# define DECLARE_ASN1_FUNCTIONS_attr(attr, type)                            \
    DECLARE_ASN1_FUNCTIONS_name_attr(attr, type, type)
# define DECLARE_ASN1_FUNCTIONS(type)                                       \
    DECLARE_ASN1_FUNCTIONS_attr(extern, type)

# define DECLARE_ASN1_ALLOC_FUNCTIONS_attr(attr, type)                      \
    DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, type)
# define DECLARE_ASN1_ALLOC_FUNCTIONS(type)                                 \
    DECLARE_ASN1_ALLOC_FUNCTIONS_attr(extern, type)

# define DECLARE_ASN1_FUNCTIONS_name_attr(attr, type, name)                 \
    DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, name)                \
    DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(attr, type, name)
# define DECLARE_ASN1_FUNCTIONS_name(type, name)                            \
    DECLARE_ASN1_FUNCTIONS_name_attr(extern, type, name)

# define DECLARE_ASN1_ENCODE_FUNCTIONS_attr(attr, type, itname, name)       \
    DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(attr, type, name)               \
    DECLARE_ASN1_ITEM_attr(attr, itname)
# define DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)                  \
    DECLARE_ASN1_ENCODE_FUNCTIONS_attr(extern, type, itname, name)

# define DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(attr, type, name)          \
    DECLARE_ASN1_ENCODE_FUNCTIONS_attr(attr, type, name, name)
# define DECLARE_ASN1_ENCODE_FUNCTIONS_name(type, name) \
    DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(extern, type, name)

# define DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(attr, type, name)          \
    attr type *d2i_##name(type **a, const unsigned char **in, long len);    \
    attr int i2d_##name(const type *a, unsigned char **out);
# define DECLARE_ASN1_ENCODE_FUNCTIONS_only(type, name)                     \
    DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(extern, type, name)

# define DECLARE_ASN1_NDEF_FUNCTION_attr(attr, name)                        \
    attr int i2d_##name##_NDEF(const name *a, unsigned char **out);
# define DECLARE_ASN1_NDEF_FUNCTION(name)                                   \
    DECLARE_ASN1_NDEF_FUNCTION_attr(extern, name)

# define DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, name)           \
    attr type *name##_new(void);                                            \
    attr void name##_free(type *a);
# define DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name)                      \
    DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(extern, type, name)

# define DECLARE_ASN1_DUP_FUNCTION_attr(attr, type)                         \
    DECLARE_ASN1_DUP_FUNCTION_name_attr(attr, type, type)
# define DECLARE_ASN1_DUP_FUNCTION(type)                                    \
    DECLARE_ASN1_DUP_FUNCTION_attr(extern, type)

# define DECLARE_ASN1_DUP_FUNCTION_name_attr(attr, type, name)              \
    attr type *name##_dup(const type *a);
# define DECLARE_ASN1_DUP_FUNCTION_name(type, name)                         \
    DECLARE_ASN1_DUP_FUNCTION_name_attr(extern, type, name)

# define DECLARE_ASN1_PRINT_FUNCTION_attr(attr, stname)                     \
    DECLARE_ASN1_PRINT_FUNCTION_fname_attr(attr, stname, stname)
# define DECLARE_ASN1_PRINT_FUNCTION(stname)                                \
    DECLARE_ASN1_PRINT_FUNCTION_attr(extern, stname)

# define DECLARE_ASN1_PRINT_FUNCTION_fname_attr(attr, stname, fname)        \
    attr int fname##_print_ctx(BIO *out, const stname *x, int indent,       \
                               const ASN1_PCTX *pctx);
# define DECLARE_ASN1_PRINT_FUNCTION_fname(stname, fname)                   \
    DECLARE_ASN1_PRINT_FUNCTION_fname_attr(extern, stname, fname)

# define D2I_OF(type) type *(*)(type **,const unsigned char **,long)
# define I2D_OF(type) int (*)(const type *,unsigned char **)

# define CHECKED_D2I_OF(type, d2i) \
    ((d2i_of_void*) (1 ? d2i : ((D2I_OF(type))0)))
# define CHECKED_I2D_OF(type, i2d) \
    ((i2d_of_void*) (1 ? i2d : ((I2D_OF(type))0)))
# define CHECKED_NEW_OF(type, xnew) \
    ((void *(*)(void)) (1 ? xnew : ((type *(*)(void))0)))
# define CHECKED_PTR_OF(type, p) \
    ((void*) (1 ? p : (type*)0))
# define CHECKED_PPTR_OF(type, p) \
    ((void**) (1 ? p : (type**)0))

# define TYPEDEF_D2I_OF(type) typedef type *d2i_of_##type(type **,const unsigned char **,long)
# define TYPEDEF_I2D_OF(type) typedef int i2d_of_##type(const type *,unsigned char **)
# define TYPEDEF_D2I2D_OF(type) TYPEDEF_D2I_OF(type); TYPEDEF_I2D_OF(type)

typedef void *d2i_of_void(void **, const unsigned char **, long);
typedef int i2d_of_void(const void *, unsigned char **);

/*-
 * The following macros and typedefs allow an ASN1_ITEM
 * to be embedded in a structure and referenced. Since
 * the ASN1_ITEM pointers need to be globally accessible
 * (possibly from shared libraries) they may exist in
 * different forms. On platforms that support it the
 * ASN1_ITEM structure itself will be globally exported.
 * Other platforms will export a function that returns
 * an ASN1_ITEM pointer.
 *
 * To handle both cases transparently the macros below
 * should be used instead of hard coding an ASN1_ITEM
 * pointer in a structure.
 *
 * The structure will look like this:
 *
 * typedef struct SOMETHING_st {
 *      ...
 *      ASN1_ITEM_EXP *iptr;
 *      ...
 * } SOMETHING;
 *
 * It would be initialised as e.g.:
 *
 * SOMETHING somevar = {...,ASN1_ITEM_ref(X509),...};
 *
 * and the actual pointer extracted with:
 *
 * const ASN1_ITEM *it = ASN1_ITEM_ptr(somevar.iptr);
 *
 * Finally an ASN1_ITEM pointer can be extracted from an
 * appropriate reference with: ASN1_ITEM_rptr(X509). This
 * would be used when a function takes an ASN1_ITEM * argument.
 *
 */


/*
 * Platforms that can't easily handle shared global variables are declared as
 * functions returning ASN1_ITEM pointers.
 */

/* ASN1_ITEM pointer exported type */
typedef const ASN1_ITEM *ASN1_ITEM_EXP (void);

/* Macro to obtain ASN1_ITEM pointer from exported type */
# define ASN1_ITEM_ptr(iptr) (iptr())

/* Macro to include ASN1_ITEM pointer from base type */
# define ASN1_ITEM_ref(iptr) (iptr##_it)

# define ASN1_ITEM_rptr(ref) (ref##_it())

# define DECLARE_ASN1_ITEM_attr(attr, name)                                 \
    attr const ASN1_ITEM * name##_it(void);
# define DECLARE_ASN1_ITEM(name)                                            \
    DECLARE_ASN1_ITEM_attr(extern, name)

/* Parameters used by ASN1_STRING_print_ex() */

/*
 * These determine which characters to escape: RFC2253 special characters,
 * control characters and MSB set characters
 */

# define ASN1_STRFLGS_ESC_2253           1
# define ASN1_STRFLGS_ESC_CTRL           2
# define ASN1_STRFLGS_ESC_MSB            4

/* Lower 8 bits are reserved as an output type specifier */
# define ASN1_DTFLGS_TYPE_MASK    0x0FUL
# define ASN1_DTFLGS_RFC822       0x00UL
# define ASN1_DTFLGS_ISO8601      0x01UL

/*
 * This flag determines how we do escaping: normally RC2253 backslash only,
 * set this to use backslash and quote.
 */

# define ASN1_STRFLGS_ESC_QUOTE          8

/* These three flags are internal use only. */

/* Character is a valid PrintableString character */
# define CHARTYPE_PRINTABLESTRING        0x10
/* Character needs escaping if it is the first character */
# define CHARTYPE_FIRST_ESC_2253         0x20
/* Character needs escaping if it is the last character */
# define CHARTYPE_LAST_ESC_2253          0x40

/*
 * NB the internal flags are safely reused below by flags handled at the top
 * level.
 */

/*
 * If this is set we convert all character strings to UTF8 first
 */

# define ASN1_STRFLGS_UTF8_CONVERT       0x10

/*
 * If this is set we don't attempt to interpret content: just assume all
 * strings are 1 byte per character. This will produce some pretty odd
 * looking output!
 */

# define ASN1_STRFLGS_IGNORE_TYPE        0x20

/* If this is set we include the string type in the output */
# define ASN1_STRFLGS_SHOW_TYPE          0x40

/*
 * This determines which strings to display and which to 'dump' (hex dump of
 * content octets or DER encoding). We can only dump non character strings or
 * everything. If we don't dump 'unknown' they are interpreted as character
 * strings with 1 octet per character and are subject to the usual escaping
 * options.
 */

# define ASN1_STRFLGS_DUMP_ALL           0x80
# define ASN1_STRFLGS_DUMP_UNKNOWN       0x100

/*
 * These determine what 'dumping' does, we can dump the content octets or the
 * DER encoding: both use the RFC2253 #XXXXX notation.
 */

# define ASN1_STRFLGS_DUMP_DER           0x200

/*
 * This flag specifies that RC2254 escaping shall be performed.
 */
#define ASN1_STRFLGS_ESC_2254           0x400

/*
 * All the string flags consistent with RFC2253, escaping control characters
 * isn't essential in RFC2253 but it is advisable anyway.
 */

# define ASN1_STRFLGS_RFC2253    (ASN1_STRFLGS_ESC_2253 | \
                                ASN1_STRFLGS_ESC_CTRL | \
                                ASN1_STRFLGS_ESC_MSB | \
                                ASN1_STRFLGS_UTF8_CONVERT | \
                                ASN1_STRFLGS_DUMP_UNKNOWN | \
                                ASN1_STRFLGS_DUMP_DER)


struct asn1_type_st {
    int type;
    union {
        char *ptr;
        ASN1_BOOLEAN boolean;
        ASN1_STRING *asn1_string;
        ASN1_OBJECT *object;
        ASN1_INTEGER *integer;
        ASN1_ENUMERATED *enumerated;
        ASN1_BIT_STRING *bit_string;
        ASN1_OCTET_STRING *octet_string;
        ASN1_PRINTABLESTRING *printablestring;
        ASN1_T61STRING *t61string;
        ASN1_IA5STRING *ia5string;
        ASN1_GENERALSTRING *generalstring;
        ASN1_BMPSTRING *bmpstring;
        ASN1_UNIVERSALSTRING *universalstring;
        ASN1_UTCTIME *utctime;
        ASN1_GENERALIZEDTIME *generalizedtime;
        ASN1_VISIBLESTRING *visiblestring;
        ASN1_UTF8STRING *utf8string;
        /*
         * set and sequence are left complete and still contain the set or
         * sequence bytes
         */
        ASN1_STRING *set;
        ASN1_STRING *sequence;
        ASN1_VALUE *asn1_value;
    } value;
};

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_TYPE, ASN1_TYPE, ASN1_TYPE)
#define sk_ASN1_TYPE_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_value(sk, idx) ((ASN1_TYPE *)OPENSSL_sk_value(ossl_check_const_ASN1_TYPE_sk_type(sk), (idx)))
#define sk_ASN1_TYPE_new(cmp) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_new(ossl_check_ASN1_TYPE_compfunc_type(cmp)))
#define sk_ASN1_TYPE_new_null() ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_new_null())
#define sk_ASN1_TYPE_new_reserve(cmp, n) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_TYPE_compfunc_type(cmp), (n)))
#define sk_ASN1_TYPE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_TYPE_sk_type(sk), (n))
#define sk_ASN1_TYPE_free(sk) OPENSSL_sk_free(ossl_check_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_delete(sk, i) ((ASN1_TYPE *)OPENSSL_sk_delete(ossl_check_ASN1_TYPE_sk_type(sk), (i)))
#define sk_ASN1_TYPE_delete_ptr(sk, ptr) ((ASN1_TYPE *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr)))
#define sk_ASN1_TYPE_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_pop(sk) ((ASN1_TYPE *)OPENSSL_sk_pop(ossl_check_ASN1_TYPE_sk_type(sk)))
#define sk_ASN1_TYPE_shift(sk) ((ASN1_TYPE *)OPENSSL_sk_shift(ossl_check_ASN1_TYPE_sk_type(sk)))
#define sk_ASN1_TYPE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_TYPE_sk_type(sk),ossl_check_ASN1_TYPE_freefunc_type(freefunc))
#define sk_ASN1_TYPE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr), (idx))
#define sk_ASN1_TYPE_set(sk, idx, ptr) ((ASN1_TYPE *)OPENSSL_sk_set(ossl_check_ASN1_TYPE_sk_type(sk), (idx), ossl_check_ASN1_TYPE_type(ptr)))
#define sk_ASN1_TYPE_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr), pnum)
#define sk_ASN1_TYPE_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_dup(sk) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_dup(ossl_check_const_ASN1_TYPE_sk_type(sk)))
#define sk_ASN1_TYPE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_copyfunc_type(copyfunc), ossl_check_ASN1_TYPE_freefunc_type(freefunc)))
#define sk_ASN1_TYPE_set_cmp_func(sk, cmp) ((sk_ASN1_TYPE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_compfunc_type(cmp)))


typedef STACK_OF(ASN1_TYPE) ASN1_SEQUENCE_ANY;

DECLARE_ASN1_ENCODE_FUNCTIONS_name(ASN1_SEQUENCE_ANY, ASN1_SEQUENCE_ANY)
DECLARE_ASN1_ENCODE_FUNCTIONS_name(ASN1_SEQUENCE_ANY, ASN1_SET_ANY)

/* This is used to contain a list of bit names */
typedef struct BIT_STRING_BITNAME_st {
    int bitnum;
    const char *lname;
    const char *sname;
} BIT_STRING_BITNAME;

# define B_ASN1_TIME \
                        B_ASN1_UTCTIME | \
                        B_ASN1_GENERALIZEDTIME

# define B_ASN1_PRINTABLE \
                        B_ASN1_NUMERICSTRING| \
                        B_ASN1_PRINTABLESTRING| \
                        B_ASN1_T61STRING| \
                        B_ASN1_IA5STRING| \
                        B_ASN1_BIT_STRING| \
                        B_ASN1_UNIVERSALSTRING|\
                        B_ASN1_BMPSTRING|\
                        B_ASN1_UTF8STRING|\
                        B_ASN1_SEQUENCE|\
                        B_ASN1_UNKNOWN

# define B_ASN1_DIRECTORYSTRING \
                        B_ASN1_PRINTABLESTRING| \
                        B_ASN1_TELETEXSTRING|\
                        B_ASN1_BMPSTRING|\
                        B_ASN1_UNIVERSALSTRING|\
                        B_ASN1_UTF8STRING

# define B_ASN1_DISPLAYTEXT \
                        B_ASN1_IA5STRING| \
                        B_ASN1_VISIBLESTRING| \
                        B_ASN1_BMPSTRING|\
                        B_ASN1_UTF8STRING

DECLARE_ASN1_ALLOC_FUNCTIONS_name(ASN1_TYPE, ASN1_TYPE)
DECLARE_ASN1_ENCODE_FUNCTIONS(ASN1_TYPE, ASN1_ANY, ASN1_TYPE)

int ASN1_TYPE_get(const ASN1_TYPE *a);
void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);

ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_OBJECT, ASN1_OBJECT, ASN1_OBJECT)
#define sk_ASN1_OBJECT_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_value(sk, idx) ((ASN1_OBJECT *)OPENSSL_sk_value(ossl_check_const_ASN1_OBJECT_sk_type(sk), (idx)))
#define sk_ASN1_OBJECT_new(cmp) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_new(ossl_check_ASN1_OBJECT_compfunc_type(cmp)))
#define sk_ASN1_OBJECT_new_null() ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_new_null())
#define sk_ASN1_OBJECT_new_reserve(cmp, n) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_OBJECT_compfunc_type(cmp), (n)))
#define sk_ASN1_OBJECT_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_OBJECT_sk_type(sk), (n))
#define sk_ASN1_OBJECT_free(sk) OPENSSL_sk_free(ossl_check_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_delete(sk, i) ((ASN1_OBJECT *)OPENSSL_sk_delete(ossl_check_ASN1_OBJECT_sk_type(sk), (i)))
#define sk_ASN1_OBJECT_delete_ptr(sk, ptr) ((ASN1_OBJECT *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr)))
#define sk_ASN1_OBJECT_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_pop(sk) ((ASN1_OBJECT *)OPENSSL_sk_pop(ossl_check_ASN1_OBJECT_sk_type(sk)))
#define sk_ASN1_OBJECT_shift(sk) ((ASN1_OBJECT *)OPENSSL_sk_shift(ossl_check_ASN1_OBJECT_sk_type(sk)))
#define sk_ASN1_OBJECT_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_OBJECT_sk_type(sk),ossl_check_ASN1_OBJECT_freefunc_type(freefunc))
#define sk_ASN1_OBJECT_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr), (idx))
#define sk_ASN1_OBJECT_set(sk, idx, ptr) ((ASN1_OBJECT *)OPENSSL_sk_set(ossl_check_ASN1_OBJECT_sk_type(sk), (idx), ossl_check_ASN1_OBJECT_type(ptr)))
#define sk_ASN1_OBJECT_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr), pnum)
#define sk_ASN1_OBJECT_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_dup(sk) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_dup(ossl_check_const_ASN1_OBJECT_sk_type(sk)))
#define sk_ASN1_OBJECT_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_copyfunc_type(copyfunc), ossl_check_ASN1_OBJECT_freefunc_type(freefunc)))
#define sk_ASN1_OBJECT_set_cmp_func(sk, cmp) ((sk_ASN1_OBJECT_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS(ASN1_OBJECT)

ASN1_STRING *ASN1_STRING_new(void);
void ASN1_STRING_free(ASN1_STRING *a);
void ASN1_STRING_clear_free(ASN1_STRING *a);
int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
DECLARE_ASN1_DUP_FUNCTION(ASN1_STRING)
ASN1_STRING *ASN1_STRING_type_new(int type);
int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
  /*
   * Since this is used to store all sorts of things, via macros, for now,
   * make its data void *
   */
int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
int ASN1_STRING_length(const ASN1_STRING *x);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void ASN1_STRING_length_set(ASN1_STRING *x, int n);
# endif
int ASN1_STRING_type(const ASN1_STRING *x);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 unsigned char *ASN1_STRING_data(ASN1_STRING *x);
# endif
const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x);

DECLARE_ASN1_FUNCTIONS(ASN1_BIT_STRING)
int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                          const unsigned char *flags, int flags_len);

int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                               BIT_STRING_BITNAME *tbl, int indent);
int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                            BIT_STRING_BITNAME *tbl);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_INTEGER, ASN1_INTEGER, ASN1_INTEGER)
#define sk_ASN1_INTEGER_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_value(sk, idx) ((ASN1_INTEGER *)OPENSSL_sk_value(ossl_check_const_ASN1_INTEGER_sk_type(sk), (idx)))
#define sk_ASN1_INTEGER_new(cmp) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_new(ossl_check_ASN1_INTEGER_compfunc_type(cmp)))
#define sk_ASN1_INTEGER_new_null() ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_new_null())
#define sk_ASN1_INTEGER_new_reserve(cmp, n) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_INTEGER_compfunc_type(cmp), (n)))
#define sk_ASN1_INTEGER_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_INTEGER_sk_type(sk), (n))
#define sk_ASN1_INTEGER_free(sk) OPENSSL_sk_free(ossl_check_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_delete(sk, i) ((ASN1_INTEGER *)OPENSSL_sk_delete(ossl_check_ASN1_INTEGER_sk_type(sk), (i)))
#define sk_ASN1_INTEGER_delete_ptr(sk, ptr) ((ASN1_INTEGER *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr)))
#define sk_ASN1_INTEGER_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_pop(sk) ((ASN1_INTEGER *)OPENSSL_sk_pop(ossl_check_ASN1_INTEGER_sk_type(sk)))
#define sk_ASN1_INTEGER_shift(sk) ((ASN1_INTEGER *)OPENSSL_sk_shift(ossl_check_ASN1_INTEGER_sk_type(sk)))
#define sk_ASN1_INTEGER_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_INTEGER_sk_type(sk),ossl_check_ASN1_INTEGER_freefunc_type(freefunc))
#define sk_ASN1_INTEGER_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr), (idx))
#define sk_ASN1_INTEGER_set(sk, idx, ptr) ((ASN1_INTEGER *)OPENSSL_sk_set(ossl_check_ASN1_INTEGER_sk_type(sk), (idx), ossl_check_ASN1_INTEGER_type(ptr)))
#define sk_ASN1_INTEGER_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr), pnum)
#define sk_ASN1_INTEGER_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_dup(sk) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_dup(ossl_check_const_ASN1_INTEGER_sk_type(sk)))
#define sk_ASN1_INTEGER_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_copyfunc_type(copyfunc), ossl_check_ASN1_INTEGER_freefunc_type(freefunc)))
#define sk_ASN1_INTEGER_set_cmp_func(sk, cmp) ((sk_ASN1_INTEGER_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_compfunc_type(cmp)))



DECLARE_ASN1_FUNCTIONS(ASN1_INTEGER)
ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                long length);
DECLARE_ASN1_DUP_FUNCTION(ASN1_INTEGER)
int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);

DECLARE_ASN1_FUNCTIONS(ASN1_ENUMERATED)

int ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                               int offset_day, long offset_sec);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);

int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                               time_t t);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                               time_t t, int offset_day,
                                               long offset_sec);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);

int ASN1_TIME_diff(int *pday, int *psec,
                   const ASN1_TIME *from, const ASN1_TIME *to);

DECLARE_ASN1_FUNCTIONS(ASN1_OCTET_STRING)
DECLARE_ASN1_DUP_FUNCTION(ASN1_OCTET_STRING)
int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                          const ASN1_OCTET_STRING *b);
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
                          int len);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_UTF8STRING, ASN1_UTF8STRING, ASN1_UTF8STRING)
#define sk_ASN1_UTF8STRING_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_value(sk, idx) ((ASN1_UTF8STRING *)OPENSSL_sk_value(ossl_check_const_ASN1_UTF8STRING_sk_type(sk), (idx)))
#define sk_ASN1_UTF8STRING_new(cmp) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_new(ossl_check_ASN1_UTF8STRING_compfunc_type(cmp)))
#define sk_ASN1_UTF8STRING_new_null() ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_new_null())
#define sk_ASN1_UTF8STRING_new_reserve(cmp, n) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_UTF8STRING_compfunc_type(cmp), (n)))
#define sk_ASN1_UTF8STRING_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_UTF8STRING_sk_type(sk), (n))
#define sk_ASN1_UTF8STRING_free(sk) OPENSSL_sk_free(ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_delete(sk, i) ((ASN1_UTF8STRING *)OPENSSL_sk_delete(ossl_check_ASN1_UTF8STRING_sk_type(sk), (i)))
#define sk_ASN1_UTF8STRING_delete_ptr(sk, ptr) ((ASN1_UTF8STRING *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr)))
#define sk_ASN1_UTF8STRING_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_pop(sk) ((ASN1_UTF8STRING *)OPENSSL_sk_pop(ossl_check_ASN1_UTF8STRING_sk_type(sk)))
#define sk_ASN1_UTF8STRING_shift(sk) ((ASN1_UTF8STRING *)OPENSSL_sk_shift(ossl_check_ASN1_UTF8STRING_sk_type(sk)))
#define sk_ASN1_UTF8STRING_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_UTF8STRING_sk_type(sk),ossl_check_ASN1_UTF8STRING_freefunc_type(freefunc))
#define sk_ASN1_UTF8STRING_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr), (idx))
#define sk_ASN1_UTF8STRING_set(sk, idx, ptr) ((ASN1_UTF8STRING *)OPENSSL_sk_set(ossl_check_ASN1_UTF8STRING_sk_type(sk), (idx), ossl_check_ASN1_UTF8STRING_type(ptr)))
#define sk_ASN1_UTF8STRING_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr), pnum)
#define sk_ASN1_UTF8STRING_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_dup(sk) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_dup(ossl_check_const_ASN1_UTF8STRING_sk_type(sk)))
#define sk_ASN1_UTF8STRING_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_copyfunc_type(copyfunc), ossl_check_ASN1_UTF8STRING_freefunc_type(freefunc)))
#define sk_ASN1_UTF8STRING_set_cmp_func(sk, cmp) ((sk_ASN1_UTF8STRING_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS(ASN1_VISIBLESTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_UNIVERSALSTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_UTF8STRING)
DECLARE_ASN1_FUNCTIONS(ASN1_NULL)
DECLARE_ASN1_FUNCTIONS(ASN1_BMPSTRING)

int UTF8_getc(const unsigned char *str, int len, unsigned long *val);
int UTF8_putc(unsigned char *str, int len, unsigned long value);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_GENERALSTRING, ASN1_GENERALSTRING, ASN1_GENERALSTRING)
#define sk_ASN1_GENERALSTRING_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_value(sk, idx) ((ASN1_GENERALSTRING *)OPENSSL_sk_value(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk), (idx)))
#define sk_ASN1_GENERALSTRING_new(cmp) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_new(ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp)))
#define sk_ASN1_GENERALSTRING_new_null() ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_new_null())
#define sk_ASN1_GENERALSTRING_new_reserve(cmp, n) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp), (n)))
#define sk_ASN1_GENERALSTRING_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_GENERALSTRING_sk_type(sk), (n))
#define sk_ASN1_GENERALSTRING_free(sk) OPENSSL_sk_free(ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_delete(sk, i) ((ASN1_GENERALSTRING *)OPENSSL_sk_delete(ossl_check_ASN1_GENERALSTRING_sk_type(sk), (i)))
#define sk_ASN1_GENERALSTRING_delete_ptr(sk, ptr) ((ASN1_GENERALSTRING *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr)))
#define sk_ASN1_GENERALSTRING_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_pop(sk) ((ASN1_GENERALSTRING *)OPENSSL_sk_pop(ossl_check_ASN1_GENERALSTRING_sk_type(sk)))
#define sk_ASN1_GENERALSTRING_shift(sk) ((ASN1_GENERALSTRING *)OPENSSL_sk_shift(ossl_check_ASN1_GENERALSTRING_sk_type(sk)))
#define sk_ASN1_GENERALSTRING_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_GENERALSTRING_sk_type(sk),ossl_check_ASN1_GENERALSTRING_freefunc_type(freefunc))
#define sk_ASN1_GENERALSTRING_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr), (idx))
#define sk_ASN1_GENERALSTRING_set(sk, idx, ptr) ((ASN1_GENERALSTRING *)OPENSSL_sk_set(ossl_check_ASN1_GENERALSTRING_sk_type(sk), (idx), ossl_check_ASN1_GENERALSTRING_type(ptr)))
#define sk_ASN1_GENERALSTRING_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr), pnum)
#define sk_ASN1_GENERALSTRING_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_dup(sk) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_dup(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk)))
#define sk_ASN1_GENERALSTRING_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_copyfunc_type(copyfunc), ossl_check_ASN1_GENERALSTRING_freefunc_type(freefunc)))
#define sk_ASN1_GENERALSTRING_set_cmp_func(sk, cmp) ((sk_ASN1_GENERALSTRING_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, ASN1_PRINTABLE)

DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, DIRECTORYSTRING)
DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, DISPLAYTEXT)
DECLARE_ASN1_FUNCTIONS(ASN1_PRINTABLESTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_T61STRING)
DECLARE_ASN1_FUNCTIONS(ASN1_IA5STRING)
DECLARE_ASN1_FUNCTIONS(ASN1_GENERALSTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_UTCTIME)
DECLARE_ASN1_FUNCTIONS(ASN1_GENERALIZEDTIME)
DECLARE_ASN1_FUNCTIONS(ASN1_TIME)

DECLARE_ASN1_DUP_FUNCTION(ASN1_TIME)
DECLARE_ASN1_DUP_FUNCTION(ASN1_UTCTIME)
DECLARE_ASN1_DUP_FUNCTION(ASN1_GENERALIZEDTIME)

DECLARE_ASN1_ITEM(ASN1_OCTET_STRING_NDEF)

ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                         int offset_day, long offset_sec);
int ASN1_TIME_check(const ASN1_TIME *t);
ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                   ASN1_GENERALIZEDTIME **out);
int ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
int ASN1_TIME_normalize(ASN1_TIME *s);
int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);

int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);

int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                const char *sn, const char *ln);

int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);

int ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
long ASN1_INTEGER_get(const ASN1_INTEGER *a);
ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);

int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);


int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);

/* General */
/* given a string, return the correct type, max is the maximum length */
int ASN1_PRINTABLE_type(const unsigned char *s, int max);

unsigned long ASN1_tag2bit(int tag);

/* SPECIALS */
int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                    int *pclass, long omax);
int ASN1_check_infinite_end(unsigned char **p, long len);
int ASN1_const_check_infinite_end(const unsigned char **p, long len);
void ASN1_put_object(unsigned char **pp, int constructed, int length,
                     int tag, int xclass);
int ASN1_put_eoc(unsigned char **pp);
int ASN1_object_size(int constructed, int length, int tag);

/* Used to implement other functions */
void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, const void *x);

# define ASN1_dup_of(type,i2d,d2i,x) \
    ((type*)ASN1_dup(CHECKED_I2D_OF(type, i2d), \
                     CHECKED_D2I_OF(type, d2i), \
                     CHECKED_PTR_OF(const type, x)))

void *ASN1_item_dup(const ASN1_ITEM *it, const void *x);
int ASN1_item_sign_ex(const ASN1_ITEM *it, X509_ALGOR *algor1,
                      X509_ALGOR *algor2, ASN1_BIT_STRING *signature,
                      const void *data, const ASN1_OCTET_STRING *id,
                      EVP_PKEY *pkey, const EVP_MD *md, OSSL_LIB_CTX *libctx,
                      const char *propq);
int ASN1_item_verify_ex(const ASN1_ITEM *it, const X509_ALGOR *alg,
                        const ASN1_BIT_STRING *signature, const void *data,
                        const ASN1_OCTET_STRING *id, EVP_PKEY *pkey,
                        OSSL_LIB_CTX *libctx, const char *propq);

/* ASN1 alloc/free macros for when a type is only used internally */

# define M_ASN1_new_of(type) (type *)ASN1_item_new(ASN1_ITEM_rptr(type))
# define M_ASN1_free_of(x, type) \
                ASN1_item_free(CHECKED_PTR_OF(type, x), ASN1_ITEM_rptr(type))

# ifndef OPENSSL_NO_STDIO
void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);

#  define ASN1_d2i_fp_of(type,xnew,d2i,in,x) \
    ((type*)ASN1_d2i_fp(CHECKED_NEW_OF(type, xnew), \
                        CHECKED_D2I_OF(type, d2i), \
                        in, \
                        CHECKED_PPTR_OF(type, x)))

void *ASN1_item_d2i_fp_ex(const ASN1_ITEM *it, FILE *in, void *x,
                          OSSL_LIB_CTX *libctx, const char *propq);
void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, const void *x);

#  define ASN1_i2d_fp_of(type,i2d,out,x) \
    (ASN1_i2d_fp(CHECKED_I2D_OF(type, i2d), \
                 out, \
                 CHECKED_PTR_OF(const type, x)))

int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, const void *x);
int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
# endif

int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);

void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);

#  define ASN1_d2i_bio_of(type,xnew,d2i,in,x) \
    ((type*)ASN1_d2i_bio( CHECKED_NEW_OF(type, xnew), \
                          CHECKED_D2I_OF(type, d2i), \
                          in, \
                          CHECKED_PPTR_OF(type, x)))

void *ASN1_item_d2i_bio_ex(const ASN1_ITEM *it, BIO *in, void *pval,
                           OSSL_LIB_CTX *libctx, const char *propq);
void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *pval);
int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, const void *x);

#  define ASN1_i2d_bio_of(type,i2d,out,x) \
    (ASN1_i2d_bio(CHECKED_I2D_OF(type, i2d), \
                  out, \
                  CHECKED_PTR_OF(const type, x)))

int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, const void *x);
BIO *ASN1_item_i2d_mem_bio(const ASN1_ITEM *it, const ASN1_VALUE *val);
int ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
int ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm);
int ASN1_TIME_print_ex(BIO *bp, const ASN1_TIME *tm, unsigned long flags);
int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                  unsigned char *buf, int off);
int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                    int dump);
const char *ASN1_tag2str(int tag);

/* Used to load and write Netscape format cert */

int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);

int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
                                  unsigned char *data, int len);
int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                  unsigned char *data, int max_len);

void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);

ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it,
                            ASN1_OCTET_STRING **oct);

void ASN1_STRING_set_default_mask(unsigned long mask);
int ASN1_STRING_set_default_mask_asc(const char *p);
unsigned long ASN1_STRING_get_default_mask(void);
int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                       int inform, unsigned long mask);
int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask,
                        long minsize, long maxsize);

ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                    const unsigned char *in, int inlen,
                                    int inform, int nid);
ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid);
int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
void ASN1_STRING_TABLE_cleanup(void);

/* ASN1 template functions */

/* Old API compatible functions */
ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it);
ASN1_VALUE *ASN1_item_new_ex(const ASN1_ITEM *it, OSSL_LIB_CTX *libctx,
                             const char *propq);
void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
ASN1_VALUE *ASN1_item_d2i_ex(ASN1_VALUE **val, const unsigned char **in,
                             long len, const ASN1_ITEM *it,
                             OSSL_LIB_CTX *libctx, const char *propq);
ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
                          long len, const ASN1_ITEM *it);
int ASN1_item_i2d(const ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
int ASN1_item_ndef_i2d(const ASN1_VALUE *val, unsigned char **out,
                       const ASN1_ITEM *it);

void ASN1_add_oid_module(void);
void ASN1_add_stable_module(void);

ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf);
ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
int ASN1_str2mask(const char *str, unsigned long *pmask);

/* ASN1 Print flags */

/* Indicate missing OPTIONAL fields */
# define ASN1_PCTX_FLAGS_SHOW_ABSENT             0x001
/* Mark start and end of SEQUENCE */
# define ASN1_PCTX_FLAGS_SHOW_SEQUENCE           0x002
/* Mark start and end of SEQUENCE/SET OF */
# define ASN1_PCTX_FLAGS_SHOW_SSOF               0x004
/* Show the ASN1 type of primitives */
# define ASN1_PCTX_FLAGS_SHOW_TYPE               0x008
/* Don't show ASN1 type of ANY */
# define ASN1_PCTX_FLAGS_NO_ANY_TYPE             0x010
/* Don't show ASN1 type of MSTRINGs */
# define ASN1_PCTX_FLAGS_NO_MSTRING_TYPE         0x020
/* Don't show field names in SEQUENCE */
# define ASN1_PCTX_FLAGS_NO_FIELD_NAME           0x040
/* Show structure names of each SEQUENCE field */
# define ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME  0x080
/* Don't show structure name even at top level */
# define ASN1_PCTX_FLAGS_NO_STRUCT_NAME          0x100

int ASN1_item_print(BIO *out, const ASN1_VALUE *ifld, int indent,
                    const ASN1_ITEM *it, const ASN1_PCTX *pctx);
ASN1_PCTX *ASN1_PCTX_new(void);
void ASN1_PCTX_free(ASN1_PCTX *p);
unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);

ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
void ASN1_SCTX_free(ASN1_SCTX *p);
const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p);
const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p);
unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p);
void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
void *ASN1_SCTX_get_app_data(ASN1_SCTX *p);

const BIO_METHOD *BIO_f_asn1(void);

/* cannot constify val because of CMS_stream() */
BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);

int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                        const ASN1_ITEM *it);
int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                              const char *hdr, const ASN1_ITEM *it);
/* cannot constify val because of CMS_dataFinal() */
int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                     int ctype_nid, int econt_nid,
                     STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it);
int SMIME_write_ASN1_ex(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                        int ctype_nid, int econt_nid,
                        STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it,
                        OSSL_LIB_CTX *libctx, const char *propq);
ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
ASN1_VALUE *SMIME_read_ASN1_ex(BIO *bio, int flags, BIO **bcont,
                               const ASN1_ITEM *it, ASN1_VALUE **x,
                               OSSL_LIB_CTX *libctx, const char *propq);
int SMIME_crlf_copy(BIO *in, BIO *out, int flags);
int SMIME_text(BIO *in, BIO *out);

const ASN1_ITEM *ASN1_ITEM_lookup(const char *name);
const ASN1_ITEM *ASN1_ITEM_get(size_t i);

/* Legacy compatibility */
# define DECLARE_ASN1_FUNCTIONS_fname(type, itname, name) \
         DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
         DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)
# define DECLARE_ASN1_FUNCTIONS_const(type) DECLARE_ASN1_FUNCTIONS(type)
# define DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name) \
         DECLARE_ASN1_ENCODE_FUNCTIONS(type, name)
# define I2D_OF_const(type) I2D_OF(type)
# define ASN1_dup_of_const(type,i2d,d2i,x) ASN1_dup_of(type,i2d,d2i,x)
# define ASN1_i2d_fp_of_const(type,i2d,out,x) ASN1_i2d_fp_of(type,i2d,out,x)
# define ASN1_i2d_bio_of_const(type,i2d,out,x) ASN1_i2d_bio_of(type,i2d,out,x)

# ifdef  __cplusplus
}
# endif
#endif
              node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/asn1t.h                          0000664 0000000 0000000 00000106141 14746647661 0025740 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/asn1t.h.in
 *
 * Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_ASN1T_H
# define OPENSSL_ASN1T_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_ASN1T_H
# endif

# include <stddef.h>
# include <openssl/e_os2.h>
# include <openssl/asn1.h>

# ifdef OPENSSL_BUILD_SHLIBCRYPTO
#  undef OPENSSL_EXTERN
#  define OPENSSL_EXTERN OPENSSL_EXPORT
# endif

/* ASN1 template defines, structures and functions */

#ifdef  __cplusplus
extern "C" {
#endif

/*-
 * These are the possible values for the itype field of the
 * ASN1_ITEM structure and determine how it is interpreted.
 *
 * For PRIMITIVE types the underlying type
 * determines the behaviour if items is NULL.
 *
 * Otherwise templates must contain a single
 * template and the type is treated in the
 * same way as the type specified in the template.
 *
 * For SEQUENCE types the templates field points
 * to the members, the size field is the
 * structure size.
 *
 * For CHOICE types the templates field points
 * to each possible member (typically a union)
 * and the 'size' field is the offset of the
 * selector.
 *
 * The 'funcs' field is used for application-specific
 * data and functions.
 *
 * The EXTERN type uses a new style d2i/i2d.
 * The new style should be used where possible
 * because it avoids things like the d2i IMPLICIT
 * hack.
 *
 * MSTRING is a multiple string type, it is used
 * for a CHOICE of character strings where the
 * actual strings all occupy an ASN1_STRING
 * structure. In this case the 'utype' field
 * has a special meaning, it is used as a mask
 * of acceptable types using the B_ASN1 constants.
 *
 * NDEF_SEQUENCE is the same as SEQUENCE except
 * that it will use indefinite length constructed
 * encoding if requested.
 *
 */

# define ASN1_ITYPE_PRIMITIVE            0x0
# define ASN1_ITYPE_SEQUENCE             0x1
# define ASN1_ITYPE_CHOICE               0x2
/* unused value                          0x3 */
# define ASN1_ITYPE_EXTERN               0x4
# define ASN1_ITYPE_MSTRING              0x5
# define ASN1_ITYPE_NDEF_SEQUENCE        0x6

/* Macro to obtain ASN1_ADB pointer from a type (only used internally) */
# define ASN1_ADB_ptr(iptr) ((const ASN1_ADB *)((iptr)()))

/* Macros for start and end of ASN1_ITEM definition */

# define ASN1_ITEM_start(itname) \
        const ASN1_ITEM * itname##_it(void) \
        { \
                static const ASN1_ITEM local_it = {

# define static_ASN1_ITEM_start(itname) \
        static ASN1_ITEM_start(itname)

# define ASN1_ITEM_end(itname) \
                }; \
        return &local_it; \
        }

/* Macros to aid ASN1 template writing */

# define ASN1_ITEM_TEMPLATE(tname) \
        static const ASN1_TEMPLATE tname##_item_tt

# define ASN1_ITEM_TEMPLATE_END(tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_PRIMITIVE,\
                -1,\
                &tname##_item_tt,\
                0,\
                NULL,\
                0,\
                #tname \
        ASN1_ITEM_end(tname)
# define static_ASN1_ITEM_TEMPLATE_END(tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_PRIMITIVE,\
                -1,\
                &tname##_item_tt,\
                0,\
                NULL,\
                0,\
                #tname \
        ASN1_ITEM_end(tname)

/* This is a ASN1 type which just embeds a template */

/*-
 * This pair helps declare a SEQUENCE. We can do:
 *
 *      ASN1_SEQUENCE(stname) = {
 *              ... SEQUENCE components ...
 *      } ASN1_SEQUENCE_END(stname)
 *
 *      This will produce an ASN1_ITEM called stname_it
 *      for a structure called stname.
 *
 *      If you want the same structure but a different
 *      name then use:
 *
 *      ASN1_SEQUENCE(itname) = {
 *              ... SEQUENCE components ...
 *      } ASN1_SEQUENCE_END_name(stname, itname)
 *
 *      This will create an item called itname_it using
 *      a structure called stname.
 */

# define ASN1_SEQUENCE(tname) \
        static const ASN1_TEMPLATE tname##_seq_tt[]

# define ASN1_SEQUENCE_END(stname) ASN1_SEQUENCE_END_name(stname, stname)

# define static_ASN1_SEQUENCE_END(stname) static_ASN1_SEQUENCE_END_name(stname, stname)

# define ASN1_SEQUENCE_END_name(stname, tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #tname \
        ASN1_ITEM_end(tname)

# define static_ASN1_SEQUENCE_END_name(stname, tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define ASN1_NDEF_SEQUENCE(tname) \
        ASN1_SEQUENCE(tname)

# define ASN1_NDEF_SEQUENCE_cb(tname, cb) \
        ASN1_SEQUENCE_cb(tname, cb)

# define ASN1_SEQUENCE_cb(tname, cb) \
        static const ASN1_AUX tname##_aux = {NULL, 0, 0, 0, cb, 0, NULL}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_const_cb(tname, const_cb) \
        static const ASN1_AUX tname##_aux = \
            {NULL, ASN1_AFLG_CONST_CB, 0, 0, NULL, 0, const_cb}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_cb_const_cb(tname, cb, const_cb) \
        static const ASN1_AUX tname##_aux = \
            {NULL, ASN1_AFLG_CONST_CB, 0, 0, cb, 0, const_cb}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_ref(tname, cb) \
        static const ASN1_AUX tname##_aux = {NULL, ASN1_AFLG_REFCOUNT, offsetof(tname, references), offsetof(tname, lock), cb, 0, NULL}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_enc(tname, enc, cb) \
        static const ASN1_AUX tname##_aux = {NULL, ASN1_AFLG_ENCODING, 0, 0, cb, offsetof(tname, enc), NULL}; \
        ASN1_SEQUENCE(tname)

# define ASN1_NDEF_SEQUENCE_END(tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_NDEF_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(tname),\
                #tname \
        ASN1_ITEM_end(tname)
# define static_ASN1_NDEF_SEQUENCE_END(tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_NDEF_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(tname),\
                #tname \
        ASN1_ITEM_end(tname)


# define ASN1_SEQUENCE_END_enc(stname, tname) ASN1_SEQUENCE_END_ref(stname, tname)

# define ASN1_SEQUENCE_END_cb(stname, tname) ASN1_SEQUENCE_END_ref(stname, tname)
# define static_ASN1_SEQUENCE_END_cb(stname, tname) static_ASN1_SEQUENCE_END_ref(stname, tname)

# define ASN1_SEQUENCE_END_ref(stname, tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #tname \
        ASN1_ITEM_end(tname)
# define static_ASN1_SEQUENCE_END_ref(stname, tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define ASN1_NDEF_SEQUENCE_END_cb(stname, tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_NDEF_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

/*-
 * This pair helps declare a CHOICE type. We can do:
 *
 *      ASN1_CHOICE(chname) = {
 *              ... CHOICE options ...
 *      ASN1_CHOICE_END(chname)
 *
 *      This will produce an ASN1_ITEM called chname_it
 *      for a structure called chname. The structure
 *      definition must look like this:
 *      typedef struct {
 *              int type;
 *              union {
 *                      ASN1_SOMETHING *opt1;
 *                      ASN1_SOMEOTHER *opt2;
 *              } value;
 *      } chname;
 *
 *      the name of the selector must be 'type'.
 *      to use an alternative selector name use the
 *      ASN1_CHOICE_END_selector() version.
 */

# define ASN1_CHOICE(tname) \
        static const ASN1_TEMPLATE tname##_ch_tt[]

# define ASN1_CHOICE_cb(tname, cb) \
        static const ASN1_AUX tname##_aux = {NULL, 0, 0, 0, cb, 0, NULL}; \
        ASN1_CHOICE(tname)

# define ASN1_CHOICE_END(stname) ASN1_CHOICE_END_name(stname, stname)

# define static_ASN1_CHOICE_END(stname) static_ASN1_CHOICE_END_name(stname, stname)

# define ASN1_CHOICE_END_name(stname, tname) ASN1_CHOICE_END_selector(stname, tname, type)

# define static_ASN1_CHOICE_END_name(stname, tname) static_ASN1_CHOICE_END_selector(stname, tname, type)

# define ASN1_CHOICE_END_selector(stname, tname, selname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define static_ASN1_CHOICE_END_selector(stname, tname, selname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define ASN1_CHOICE_END_cb(stname, tname, selname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

/* This helps with the template wrapper form of ASN1_ITEM */

# define ASN1_EX_TEMPLATE_TYPE(flags, tag, name, type) { \
        (flags), (tag), 0,\
        #name, ASN1_ITEM_ref(type) }

/* These help with SEQUENCE or CHOICE components */

/* used to declare other types */

# define ASN1_EX_TYPE(flags, tag, stname, field, type) { \
        (flags), (tag), offsetof(stname, field),\
        #field, ASN1_ITEM_ref(type) }

/* implicit and explicit helper macros */

# define ASN1_IMP_EX(stname, field, type, tag, ex) \
         ASN1_EX_TYPE(ASN1_TFLG_IMPLICIT | (ex), tag, stname, field, type)

# define ASN1_EXP_EX(stname, field, type, tag, ex) \
         ASN1_EX_TYPE(ASN1_TFLG_EXPLICIT | (ex), tag, stname, field, type)

/* Any defined by macros: the field used is in the table itself */

# define ASN1_ADB_OBJECT(tblname) { ASN1_TFLG_ADB_OID, -1, 0, #tblname, tblname##_adb }
# define ASN1_ADB_INTEGER(tblname) { ASN1_TFLG_ADB_INT, -1, 0, #tblname, tblname##_adb }

/* Plain simple type */
# define ASN1_SIMPLE(stname, field, type) ASN1_EX_TYPE(0,0, stname, field, type)
/* Embedded simple type */
# define ASN1_EMBED(stname, field, type) ASN1_EX_TYPE(ASN1_TFLG_EMBED,0, stname, field, type)

/* OPTIONAL simple type */
# define ASN1_OPT(stname, field, type) ASN1_EX_TYPE(ASN1_TFLG_OPTIONAL, 0, stname, field, type)
# define ASN1_OPT_EMBED(stname, field, type) ASN1_EX_TYPE(ASN1_TFLG_OPTIONAL|ASN1_TFLG_EMBED, 0, stname, field, type)

/* IMPLICIT tagged simple type */
# define ASN1_IMP(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, 0)
# define ASN1_IMP_EMBED(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_EMBED)

/* IMPLICIT tagged OPTIONAL simple type */
# define ASN1_IMP_OPT(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL)
# define ASN1_IMP_OPT_EMBED(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL|ASN1_TFLG_EMBED)

/* Same as above but EXPLICIT */

# define ASN1_EXP(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, 0)
# define ASN1_EXP_EMBED(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_EMBED)
# define ASN1_EXP_OPT(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL)
# define ASN1_EXP_OPT_EMBED(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL|ASN1_TFLG_EMBED)

/* SEQUENCE OF type */
# define ASN1_SEQUENCE_OF(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, stname, field, type)

/* OPTIONAL SEQUENCE OF */
# define ASN1_SEQUENCE_OF_OPT(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SEQUENCE_OF|ASN1_TFLG_OPTIONAL, 0, stname, field, type)

/* Same as above but for SET OF */

# define ASN1_SET_OF(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SET_OF, 0, stname, field, type)

# define ASN1_SET_OF_OPT(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SET_OF|ASN1_TFLG_OPTIONAL, 0, stname, field, type)

/* Finally compound types of SEQUENCE, SET, IMPLICIT, EXPLICIT and OPTIONAL */

# define ASN1_IMP_SET_OF(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF)

# define ASN1_EXP_SET_OF(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF)

# define ASN1_IMP_SET_OF_OPT(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF|ASN1_TFLG_OPTIONAL)

# define ASN1_EXP_SET_OF_OPT(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF|ASN1_TFLG_OPTIONAL)

# define ASN1_IMP_SEQUENCE_OF(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF)

# define ASN1_IMP_SEQUENCE_OF_OPT(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF|ASN1_TFLG_OPTIONAL)

# define ASN1_EXP_SEQUENCE_OF(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF)

# define ASN1_EXP_SEQUENCE_OF_OPT(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF|ASN1_TFLG_OPTIONAL)

/* EXPLICIT using indefinite length constructed form */
# define ASN1_NDEF_EXP(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_NDEF)

/* EXPLICIT OPTIONAL using indefinite length constructed form */
# define ASN1_NDEF_EXP_OPT(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL|ASN1_TFLG_NDEF)

/* Macros for the ASN1_ADB structure */

# define ASN1_ADB(name) \
        static const ASN1_ADB_TABLE name##_adbtbl[]

# define ASN1_ADB_END(name, flags, field, adb_cb, def, none) \
        ;\
        static const ASN1_ITEM *name##_adb(void) \
        { \
        static const ASN1_ADB internal_adb = \
                {\
                flags,\
                offsetof(name, field),\
                adb_cb,\
                name##_adbtbl,\
                sizeof(name##_adbtbl) / sizeof(ASN1_ADB_TABLE),\
                def,\
                none\
                }; \
                return (const ASN1_ITEM *) &internal_adb; \
        } \
        void dummy_function(void)

# define ADB_ENTRY(val, template) {val, template}

# define ASN1_ADB_TEMPLATE(name) \
        static const ASN1_TEMPLATE name##_tt

/*
 * This is the ASN1 template structure that defines a wrapper round the
 * actual type. It determines the actual position of the field in the value
 * structure, various flags such as OPTIONAL and the field name.
 */

struct ASN1_TEMPLATE_st {
    unsigned long flags;        /* Various flags */
    long tag;                   /* tag, not used if no tagging */
    unsigned long offset;       /* Offset of this field in structure */
    const char *field_name;     /* Field name */
    ASN1_ITEM_EXP *item;        /* Relevant ASN1_ITEM or ASN1_ADB */
};

/* Macro to extract ASN1_ITEM and ASN1_ADB pointer from ASN1_TEMPLATE */

# define ASN1_TEMPLATE_item(t) (t->item_ptr)
# define ASN1_TEMPLATE_adb(t) (t->item_ptr)

typedef struct ASN1_ADB_TABLE_st ASN1_ADB_TABLE;
typedef struct ASN1_ADB_st ASN1_ADB;

struct ASN1_ADB_st {
    unsigned long flags;        /* Various flags */
    unsigned long offset;       /* Offset of selector field */
    int (*adb_cb)(long *psel);  /* Application callback */
    const ASN1_ADB_TABLE *tbl;  /* Table of possible types */
    long tblcount;              /* Number of entries in tbl */
    const ASN1_TEMPLATE *default_tt; /* Type to use if no match */
    const ASN1_TEMPLATE *null_tt; /* Type to use if selector is NULL */
};

struct ASN1_ADB_TABLE_st {
    long value;                 /* NID for an object or value for an int */
    const ASN1_TEMPLATE tt;     /* item for this value */
};

/* template flags */

/* Field is optional */
# define ASN1_TFLG_OPTIONAL      (0x1)

/* Field is a SET OF */
# define ASN1_TFLG_SET_OF        (0x1 << 1)

/* Field is a SEQUENCE OF */
# define ASN1_TFLG_SEQUENCE_OF   (0x2 << 1)

/*
 * Special case: this refers to a SET OF that will be sorted into DER order
 * when encoded *and* the corresponding STACK will be modified to match the
 * new order.
 */
# define ASN1_TFLG_SET_ORDER     (0x3 << 1)

/* Mask for SET OF or SEQUENCE OF */
# define ASN1_TFLG_SK_MASK       (0x3 << 1)

/*
 * These flags mean the tag should be taken from the tag field. If EXPLICIT
 * then the underlying type is used for the inner tag.
 */

/* IMPLICIT tagging */
# define ASN1_TFLG_IMPTAG        (0x1 << 3)

/* EXPLICIT tagging, inner tag from underlying type */
# define ASN1_TFLG_EXPTAG        (0x2 << 3)

# define ASN1_TFLG_TAG_MASK      (0x3 << 3)

/* context specific IMPLICIT */
# define ASN1_TFLG_IMPLICIT      (ASN1_TFLG_IMPTAG|ASN1_TFLG_CONTEXT)

/* context specific EXPLICIT */
# define ASN1_TFLG_EXPLICIT      (ASN1_TFLG_EXPTAG|ASN1_TFLG_CONTEXT)

/*
 * If tagging is in force these determine the type of tag to use. Otherwise
 * the tag is determined by the underlying type. These values reflect the
 * actual octet format.
 */

/* Universal tag */
# define ASN1_TFLG_UNIVERSAL     (0x0<<6)
/* Application tag */
# define ASN1_TFLG_APPLICATION   (0x1<<6)
/* Context specific tag */
# define ASN1_TFLG_CONTEXT       (0x2<<6)
/* Private tag */
# define ASN1_TFLG_PRIVATE       (0x3<<6)

# define ASN1_TFLG_TAG_CLASS     (0x3<<6)

/*
 * These are for ANY DEFINED BY type. In this case the 'item' field points to
 * an ASN1_ADB structure which contains a table of values to decode the
 * relevant type
 */

# define ASN1_TFLG_ADB_MASK      (0x3<<8)

# define ASN1_TFLG_ADB_OID       (0x1<<8)

# define ASN1_TFLG_ADB_INT       (0x1<<9)

/*
 * This flag when present in a SEQUENCE OF, SET OF or EXPLICIT causes
 * indefinite length constructed encoding to be used if required.
 */

# define ASN1_TFLG_NDEF          (0x1<<11)

/* Field is embedded and not a pointer */
# define ASN1_TFLG_EMBED         (0x1 << 12)

/* This is the actual ASN1 item itself */

struct ASN1_ITEM_st {
    char itype;                 /* The item type, primitive, SEQUENCE, CHOICE
                                 * or extern */
    long utype;                 /* underlying type */
    const ASN1_TEMPLATE *templates; /* If SEQUENCE or CHOICE this contains
                                     * the contents */
    long tcount;                /* Number of templates if SEQUENCE or CHOICE */
    const void *funcs;          /* further data and type-specific functions */
    /* funcs can be ASN1_PRIMITIVE_FUNCS*, ASN1_EXTERN_FUNCS*, or ASN1_AUX* */
    long size;                  /* Structure size (usually) */
    const char *sname;          /* Structure name */
};

/*
 * Cache for ASN1 tag and length, so we don't keep re-reading it for things
 * like CHOICE
 */

struct ASN1_TLC_st {
    char valid;                 /* Values below are valid */
    int ret;                    /* return value */
    long plen;                  /* length */
    int ptag;                   /* class value */
    int pclass;                 /* class value */
    int hdrlen;                 /* header length */
};

/* Typedefs for ASN1 function pointers */
typedef int ASN1_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                        const ASN1_ITEM *it, int tag, int aclass, char opt,
                        ASN1_TLC *ctx);

typedef int ASN1_ex_d2i_ex(ASN1_VALUE **pval, const unsigned char **in, long len,
                           const ASN1_ITEM *it, int tag, int aclass, char opt,
                           ASN1_TLC *ctx, OSSL_LIB_CTX *libctx,
                           const char *propq);
typedef int ASN1_ex_i2d(const ASN1_VALUE **pval, unsigned char **out,
                        const ASN1_ITEM *it, int tag, int aclass);
typedef int ASN1_ex_new_func(ASN1_VALUE **pval, const ASN1_ITEM *it);
typedef int ASN1_ex_new_ex_func(ASN1_VALUE **pval, const ASN1_ITEM *it,
                                OSSL_LIB_CTX *libctx, const char *propq);
typedef void ASN1_ex_free_func(ASN1_VALUE **pval, const ASN1_ITEM *it);

typedef int ASN1_ex_print_func(BIO *out, const ASN1_VALUE **pval,
                               int indent, const char *fname,
                               const ASN1_PCTX *pctx);

typedef int ASN1_primitive_i2c(const ASN1_VALUE **pval, unsigned char *cont,
                               int *putype, const ASN1_ITEM *it);
typedef int ASN1_primitive_c2i(ASN1_VALUE **pval, const unsigned char *cont,
                               int len, int utype, char *free_cont,
                               const ASN1_ITEM *it);
typedef int ASN1_primitive_print(BIO *out, const ASN1_VALUE **pval,
                                 const ASN1_ITEM *it, int indent,
                                 const ASN1_PCTX *pctx);

typedef struct ASN1_EXTERN_FUNCS_st {
    void *app_data;
    ASN1_ex_new_func *asn1_ex_new;
    ASN1_ex_free_func *asn1_ex_free;
    ASN1_ex_free_func *asn1_ex_clear;
    ASN1_ex_d2i *asn1_ex_d2i;
    ASN1_ex_i2d *asn1_ex_i2d;
    ASN1_ex_print_func *asn1_ex_print;
    ASN1_ex_new_ex_func *asn1_ex_new_ex;
    ASN1_ex_d2i_ex *asn1_ex_d2i_ex;
} ASN1_EXTERN_FUNCS;

typedef struct ASN1_PRIMITIVE_FUNCS_st {
    void *app_data;
    unsigned long flags;
    ASN1_ex_new_func *prim_new;
    ASN1_ex_free_func *prim_free;
    ASN1_ex_free_func *prim_clear;
    ASN1_primitive_c2i *prim_c2i;
    ASN1_primitive_i2c *prim_i2c;
    ASN1_primitive_print *prim_print;
} ASN1_PRIMITIVE_FUNCS;

/*
 * This is the ASN1_AUX structure: it handles various miscellaneous
 * requirements. For example the use of reference counts and an informational
 * callback. The "informational callback" is called at various points during
 * the ASN1 encoding and decoding. It can be used to provide minor
 * customisation of the structures used. This is most useful where the
 * supplied routines *almost* do the right thing but need some extra help at
 * a few points. If the callback returns zero then it is assumed a fatal
 * error has occurred and the main operation should be abandoned. If major
 * changes in the default behaviour are required then an external type is
 * more appropriate.
 * For the operations ASN1_OP_I2D_PRE, ASN1_OP_I2D_POST, ASN1_OP_PRINT_PRE, and
 * ASN1_OP_PRINT_POST, meanwhile a variant of the callback with const parameter
 * 'in' is provided to make clear statically that its input is not modified. If
 * and only if this variant is in use the flag ASN1_AFLG_CONST_CB must be set.
 */

typedef int ASN1_aux_cb(int operation, ASN1_VALUE **in, const ASN1_ITEM *it,
                        void *exarg);
typedef int ASN1_aux_const_cb(int operation, const ASN1_VALUE **in,
                              const ASN1_ITEM *it, void *exarg);

typedef struct ASN1_AUX_st {
    void *app_data;
    int flags;
    int ref_offset;             /* Offset of reference value */
    int ref_lock;               /* Offset of lock value */
    ASN1_aux_cb *asn1_cb;
    int enc_offset;             /* Offset of ASN1_ENCODING structure */
    ASN1_aux_const_cb *asn1_const_cb; /* for ASN1_OP_I2D_ and ASN1_OP_PRINT_ */
} ASN1_AUX;

/* For print related callbacks exarg points to this structure */
typedef struct ASN1_PRINT_ARG_st {
    BIO *out;
    int indent;
    const ASN1_PCTX *pctx;
} ASN1_PRINT_ARG;

/* For streaming related callbacks exarg points to this structure */
typedef struct ASN1_STREAM_ARG_st {
    /* BIO to stream through */
    BIO *out;
    /* BIO with filters appended */
    BIO *ndef_bio;
    /* Streaming I/O boundary */
    unsigned char **boundary;
} ASN1_STREAM_ARG;

/* Flags in ASN1_AUX */

/* Use a reference count */
# define ASN1_AFLG_REFCOUNT      1
/* Save the encoding of structure (useful for signatures) */
# define ASN1_AFLG_ENCODING      2
/* The Sequence length is invalid */
# define ASN1_AFLG_BROKEN        4
/* Use the new asn1_const_cb */
# define ASN1_AFLG_CONST_CB      8

/* operation values for asn1_cb */

# define ASN1_OP_NEW_PRE         0
# define ASN1_OP_NEW_POST        1
# define ASN1_OP_FREE_PRE        2
# define ASN1_OP_FREE_POST       3
# define ASN1_OP_D2I_PRE         4
# define ASN1_OP_D2I_POST        5
# define ASN1_OP_I2D_PRE         6
# define ASN1_OP_I2D_POST        7
# define ASN1_OP_PRINT_PRE       8
# define ASN1_OP_PRINT_POST      9
# define ASN1_OP_STREAM_PRE      10
# define ASN1_OP_STREAM_POST     11
# define ASN1_OP_DETACHED_PRE    12
# define ASN1_OP_DETACHED_POST   13
# define ASN1_OP_DUP_PRE         14
# define ASN1_OP_DUP_POST        15
# define ASN1_OP_GET0_LIBCTX     16
# define ASN1_OP_GET0_PROPQ      17

/* Macro to implement a primitive type */
# define IMPLEMENT_ASN1_TYPE(stname) IMPLEMENT_ASN1_TYPE_ex(stname, stname, 0)
# define IMPLEMENT_ASN1_TYPE_ex(itname, vname, ex) \
                                ASN1_ITEM_start(itname) \
                                        ASN1_ITYPE_PRIMITIVE, V_##vname, NULL, 0, NULL, ex, #itname \
                                ASN1_ITEM_end(itname)

/* Macro to implement a multi string type */
# define IMPLEMENT_ASN1_MSTRING(itname, mask) \
                                ASN1_ITEM_start(itname) \
                                        ASN1_ITYPE_MSTRING, mask, NULL, 0, NULL, sizeof(ASN1_STRING), #itname \
                                ASN1_ITEM_end(itname)

# define IMPLEMENT_EXTERN_ASN1(sname, tag, fptrs) \
        ASN1_ITEM_start(sname) \
                ASN1_ITYPE_EXTERN, \
                tag, \
                NULL, \
                0, \
                &fptrs, \
                0, \
                #sname \
        ASN1_ITEM_end(sname)

/* Macro to implement standard functions in terms of ASN1_ITEM structures */

# define IMPLEMENT_ASN1_FUNCTIONS(stname) IMPLEMENT_ASN1_FUNCTIONS_fname(stname, stname, stname)

# define IMPLEMENT_ASN1_FUNCTIONS_name(stname, itname) IMPLEMENT_ASN1_FUNCTIONS_fname(stname, itname, itname)

# define IMPLEMENT_ASN1_FUNCTIONS_ENCODE_name(stname, itname) \
                        IMPLEMENT_ASN1_FUNCTIONS_ENCODE_fname(stname, itname, itname)

# define IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(stname) \
                IMPLEMENT_ASN1_ALLOC_FUNCTIONS_pfname(static, stname, stname, stname)

# define IMPLEMENT_ASN1_ALLOC_FUNCTIONS(stname) \
                IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, stname, stname)

# define IMPLEMENT_ASN1_ALLOC_FUNCTIONS_pfname(pre, stname, itname, fname) \
        pre stname *fname##_new(void) \
        { \
                return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
        } \
        pre void fname##_free(stname *a) \
        { \
                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
        }

# define IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname) \
        stname *fname##_new(void) \
        { \
                return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
        } \
        void fname##_free(stname *a) \
        { \
                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
        }

# define IMPLEMENT_ASN1_FUNCTIONS_fname(stname, itname, fname) \
        IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
        IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname)

# define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
        stname *d2i_##fname(stname **a, const unsigned char **in, long len) \
        { \
                return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
        } \
        int i2d_##fname(const stname *a, unsigned char **out) \
        { \
                return ASN1_item_i2d((const ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
        }

# define IMPLEMENT_ASN1_NDEF_FUNCTION(stname) \
        int i2d_##stname##_NDEF(const stname *a, unsigned char **out) \
        { \
                return ASN1_item_ndef_i2d((const ASN1_VALUE *)a, out, ASN1_ITEM_rptr(stname));\
        }

# define IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(stname) \
        static stname *d2i_##stname(stname **a, \
                                   const unsigned char **in, long len) \
        { \
                return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, \
                                               ASN1_ITEM_rptr(stname)); \
        } \
        static int i2d_##stname(const stname *a, unsigned char **out) \
        { \
                return ASN1_item_i2d((const ASN1_VALUE *)a, out, \
                                     ASN1_ITEM_rptr(stname)); \
        }

# define IMPLEMENT_ASN1_DUP_FUNCTION(stname) \
        stname * stname##_dup(const stname *x) \
        { \
        return ASN1_item_dup(ASN1_ITEM_rptr(stname), x); \
        }

# define IMPLEMENT_ASN1_PRINT_FUNCTION(stname) \
        IMPLEMENT_ASN1_PRINT_FUNCTION_fname(stname, stname, stname)

# define IMPLEMENT_ASN1_PRINT_FUNCTION_fname(stname, itname, fname) \
        int fname##_print_ctx(BIO *out, const stname *x, int indent, \
                                                const ASN1_PCTX *pctx) \
        { \
                return ASN1_item_print(out, (const ASN1_VALUE *)x, indent, \
                        ASN1_ITEM_rptr(itname), pctx); \
        }

/* external definitions for primitive types */

DECLARE_ASN1_ITEM(ASN1_BOOLEAN)
DECLARE_ASN1_ITEM(ASN1_TBOOLEAN)
DECLARE_ASN1_ITEM(ASN1_FBOOLEAN)
DECLARE_ASN1_ITEM(ASN1_SEQUENCE)
DECLARE_ASN1_ITEM(CBIGNUM)
DECLARE_ASN1_ITEM(BIGNUM)
DECLARE_ASN1_ITEM(INT32)
DECLARE_ASN1_ITEM(ZINT32)
DECLARE_ASN1_ITEM(UINT32)
DECLARE_ASN1_ITEM(ZUINT32)
DECLARE_ASN1_ITEM(INT64)
DECLARE_ASN1_ITEM(ZINT64)
DECLARE_ASN1_ITEM(UINT64)
DECLARE_ASN1_ITEM(ZUINT64)

# ifndef OPENSSL_NO_DEPRECATED_3_0
/*
 * LONG and ZLONG are strongly discouraged for use as stored data, as the
 * underlying C type (long) differs in size depending on the architecture.
 * They are designed with 32-bit longs in mind.
 */
DECLARE_ASN1_ITEM(LONG)
DECLARE_ASN1_ITEM(ZLONG)
# endif

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_VALUE, ASN1_VALUE, ASN1_VALUE)
#define sk_ASN1_VALUE_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_value(sk, idx) ((ASN1_VALUE *)OPENSSL_sk_value(ossl_check_const_ASN1_VALUE_sk_type(sk), (idx)))
#define sk_ASN1_VALUE_new(cmp) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_new(ossl_check_ASN1_VALUE_compfunc_type(cmp)))
#define sk_ASN1_VALUE_new_null() ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_new_null())
#define sk_ASN1_VALUE_new_reserve(cmp, n) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_VALUE_compfunc_type(cmp), (n)))
#define sk_ASN1_VALUE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_VALUE_sk_type(sk), (n))
#define sk_ASN1_VALUE_free(sk) OPENSSL_sk_free(ossl_check_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_delete(sk, i) ((ASN1_VALUE *)OPENSSL_sk_delete(ossl_check_ASN1_VALUE_sk_type(sk), (i)))
#define sk_ASN1_VALUE_delete_ptr(sk, ptr) ((ASN1_VALUE *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr)))
#define sk_ASN1_VALUE_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_pop(sk) ((ASN1_VALUE *)OPENSSL_sk_pop(ossl_check_ASN1_VALUE_sk_type(sk)))
#define sk_ASN1_VALUE_shift(sk) ((ASN1_VALUE *)OPENSSL_sk_shift(ossl_check_ASN1_VALUE_sk_type(sk)))
#define sk_ASN1_VALUE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_VALUE_sk_type(sk),ossl_check_ASN1_VALUE_freefunc_type(freefunc))
#define sk_ASN1_VALUE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr), (idx))
#define sk_ASN1_VALUE_set(sk, idx, ptr) ((ASN1_VALUE *)OPENSSL_sk_set(ossl_check_ASN1_VALUE_sk_type(sk), (idx), ossl_check_ASN1_VALUE_type(ptr)))
#define sk_ASN1_VALUE_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr), pnum)
#define sk_ASN1_VALUE_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_dup(sk) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_dup(ossl_check_const_ASN1_VALUE_sk_type(sk)))
#define sk_ASN1_VALUE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_copyfunc_type(copyfunc), ossl_check_ASN1_VALUE_freefunc_type(freefunc)))
#define sk_ASN1_VALUE_set_cmp_func(sk, cmp) ((sk_ASN1_VALUE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_compfunc_type(cmp)))



/* Functions used internally by the ASN1 code */

int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);

int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                     const ASN1_ITEM *it, int tag, int aclass, char opt,
                     ASN1_TLC *ctx);

int ASN1_item_ex_i2d(const ASN1_VALUE **pval, unsigned char **out,
                     const ASN1_ITEM *it, int tag, int aclass);

/* Legacy compatibility */
# define IMPLEMENT_ASN1_FUNCTIONS_const(name) IMPLEMENT_ASN1_FUNCTIONS(name)
# define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(stname, itname, fname) \
         IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname)

#ifdef  __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/bio.h                            0000664 0000000 0000000 00000115644 14746647661 0025473 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/bio.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */


#ifndef OPENSSL_BIO_H
# define OPENSSL_BIO_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_BIO_H
# endif

# include <openssl/e_os2.h>

# ifndef OPENSSL_NO_STDIO
#  include <stdio.h>
# endif
# include <stdarg.h>

# include <openssl/crypto.h>
# include <openssl/bioerr.h>
# include <openssl/core.h>

#ifdef  __cplusplus
extern "C" {
#endif

/* There are the classes of BIOs */
# define BIO_TYPE_DESCRIPTOR     0x0100 /* socket, fd, connect or accept */
# define BIO_TYPE_FILTER         0x0200
# define BIO_TYPE_SOURCE_SINK    0x0400

/* These are the 'types' of BIOs */
# define BIO_TYPE_NONE             0
# define BIO_TYPE_MEM            ( 1|BIO_TYPE_SOURCE_SINK)
# define BIO_TYPE_FILE           ( 2|BIO_TYPE_SOURCE_SINK)

# define BIO_TYPE_FD             ( 4|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_SOCKET         ( 5|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_NULL           ( 6|BIO_TYPE_SOURCE_SINK)
# define BIO_TYPE_SSL            ( 7|BIO_TYPE_FILTER)
# define BIO_TYPE_MD             ( 8|BIO_TYPE_FILTER)
# define BIO_TYPE_BUFFER         ( 9|BIO_TYPE_FILTER)
# define BIO_TYPE_CIPHER         (10|BIO_TYPE_FILTER)
# define BIO_TYPE_BASE64         (11|BIO_TYPE_FILTER)
# define BIO_TYPE_CONNECT        (12|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_ACCEPT         (13|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)

# define BIO_TYPE_NBIO_TEST      (16|BIO_TYPE_FILTER)/* server proxy BIO */
# define BIO_TYPE_NULL_FILTER    (17|BIO_TYPE_FILTER)
# define BIO_TYPE_BIO            (19|BIO_TYPE_SOURCE_SINK)/* half a BIO pair */
# define BIO_TYPE_LINEBUFFER     (20|BIO_TYPE_FILTER)
# define BIO_TYPE_DGRAM          (21|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_ASN1           (22|BIO_TYPE_FILTER)
# define BIO_TYPE_COMP           (23|BIO_TYPE_FILTER)
# ifndef OPENSSL_NO_SCTP
#  define BIO_TYPE_DGRAM_SCTP    (24|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# endif
# define BIO_TYPE_CORE_TO_PROV   (25|BIO_TYPE_SOURCE_SINK)

#define BIO_TYPE_START           128

/*
 * BIO_FILENAME_READ|BIO_CLOSE to open or close on free.
 * BIO_set_fp(in,stdin,BIO_NOCLOSE);
 */
# define BIO_NOCLOSE             0x00
# define BIO_CLOSE               0x01

/*
 * These are used in the following macros and are passed to BIO_ctrl()
 */
# define BIO_CTRL_RESET          1/* opt - rewind/zero etc */
# define BIO_CTRL_EOF            2/* opt - are we at the eof */
# define BIO_CTRL_INFO           3/* opt - extra tit-bits */
# define BIO_CTRL_SET            4/* man - set the 'IO' type */
# define BIO_CTRL_GET            5/* man - get the 'IO' type */
# define BIO_CTRL_PUSH           6/* opt - internal, used to signify change */
# define BIO_CTRL_POP            7/* opt - internal, used to signify change */
# define BIO_CTRL_GET_CLOSE      8/* man - set the 'close' on free */
# define BIO_CTRL_SET_CLOSE      9/* man - set the 'close' on free */
# define BIO_CTRL_PENDING        10/* opt - is their more data buffered */
# define BIO_CTRL_FLUSH          11/* opt - 'flush' buffered output */
# define BIO_CTRL_DUP            12/* man - extra stuff for 'duped' BIO */
# define BIO_CTRL_WPENDING       13/* opt - number of bytes still to write */
# define BIO_CTRL_SET_CALLBACK   14/* opt - set callback function */
# define BIO_CTRL_GET_CALLBACK   15/* opt - set callback function */

# define BIO_CTRL_PEEK           29/* BIO_f_buffer special */
# define BIO_CTRL_SET_FILENAME   30/* BIO_s_file special */

/* dgram BIO stuff */
# define BIO_CTRL_DGRAM_CONNECT       31/* BIO dgram special */
# define BIO_CTRL_DGRAM_SET_CONNECTED 32/* allow for an externally connected
                                         * socket to be passed in */
# define BIO_CTRL_DGRAM_SET_RECV_TIMEOUT 33/* setsockopt, essentially */
# define BIO_CTRL_DGRAM_GET_RECV_TIMEOUT 34/* getsockopt, essentially */
# define BIO_CTRL_DGRAM_SET_SEND_TIMEOUT 35/* setsockopt, essentially */
# define BIO_CTRL_DGRAM_GET_SEND_TIMEOUT 36/* getsockopt, essentially */

# define BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP 37/* flag whether the last */
# define BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP 38/* I/O operation timed out */

/* #ifdef IP_MTU_DISCOVER */
# define BIO_CTRL_DGRAM_MTU_DISCOVER       39/* set DF bit on egress packets */
/* #endif */

# define BIO_CTRL_DGRAM_QUERY_MTU          40/* as kernel for current MTU */
# define BIO_CTRL_DGRAM_GET_FALLBACK_MTU   47
# define BIO_CTRL_DGRAM_GET_MTU            41/* get cached value for MTU */
# define BIO_CTRL_DGRAM_SET_MTU            42/* set cached value for MTU.
                                              * want to use this if asking
                                              * the kernel fails */

# define BIO_CTRL_DGRAM_MTU_EXCEEDED       43/* check whether the MTU was
                                              * exceed in the previous write
                                              * operation */

# define BIO_CTRL_DGRAM_GET_PEER           46
# define BIO_CTRL_DGRAM_SET_PEER           44/* Destination for the data */

# define BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT   45/* Next DTLS handshake timeout
                                              * to adjust socket timeouts */
# define BIO_CTRL_DGRAM_SET_DONT_FRAG      48

# define BIO_CTRL_DGRAM_GET_MTU_OVERHEAD   49

/* Deliberately outside of OPENSSL_NO_SCTP - used in bss_dgram.c */
#  define BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE    50
# ifndef OPENSSL_NO_SCTP
/* SCTP stuff */
#  define BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY                51
#  define BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY               52
#  define BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD               53
#  define BIO_CTRL_DGRAM_SCTP_GET_SNDINFO         60
#  define BIO_CTRL_DGRAM_SCTP_SET_SNDINFO         61
#  define BIO_CTRL_DGRAM_SCTP_GET_RCVINFO         62
#  define BIO_CTRL_DGRAM_SCTP_SET_RCVINFO         63
#  define BIO_CTRL_DGRAM_SCTP_GET_PRINFO                  64
#  define BIO_CTRL_DGRAM_SCTP_SET_PRINFO                  65
#  define BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN               70
# endif

# define BIO_CTRL_DGRAM_SET_PEEK_MODE      71

/*
 * internal BIO:
 * # define BIO_CTRL_SET_KTLS_SEND                 72
 * # define BIO_CTRL_SET_KTLS_SEND_CTRL_MSG        74
 * # define BIO_CTRL_CLEAR_KTLS_CTRL_MSG           75
 */

# define BIO_CTRL_GET_KTLS_SEND                 73
# define BIO_CTRL_GET_KTLS_RECV                 76

# define BIO_CTRL_DGRAM_SCTP_WAIT_FOR_DRY       77
# define BIO_CTRL_DGRAM_SCTP_MSG_WAITING        78

/* BIO_f_prefix controls */
# define BIO_CTRL_SET_PREFIX                    79
# define BIO_CTRL_SET_INDENT                    80
# define BIO_CTRL_GET_INDENT                    81

# ifndef OPENSSL_NO_KTLS
#  define BIO_get_ktls_send(b)         \
     (BIO_ctrl(b, BIO_CTRL_GET_KTLS_SEND, 0, NULL) > 0)
#  define BIO_get_ktls_recv(b)         \
     (BIO_ctrl(b, BIO_CTRL_GET_KTLS_RECV, 0, NULL) > 0)
# else
#  define BIO_get_ktls_send(b)  (0)
#  define BIO_get_ktls_recv(b)  (0)
# endif

/* modifiers */
# define BIO_FP_READ             0x02
# define BIO_FP_WRITE            0x04
# define BIO_FP_APPEND           0x08
# define BIO_FP_TEXT             0x10

# define BIO_FLAGS_READ          0x01
# define BIO_FLAGS_WRITE         0x02
# define BIO_FLAGS_IO_SPECIAL    0x04
# define BIO_FLAGS_RWS (BIO_FLAGS_READ|BIO_FLAGS_WRITE|BIO_FLAGS_IO_SPECIAL)
# define BIO_FLAGS_SHOULD_RETRY  0x08
# ifndef OPENSSL_NO_DEPRECATED_3_0
/* This #define was replaced by an internal constant and should not be used. */
#  define BIO_FLAGS_UPLINK       0
# endif

# define BIO_FLAGS_BASE64_NO_NL  0x100

/*
 * This is used with memory BIOs:
 * BIO_FLAGS_MEM_RDONLY means we shouldn't free up or change the data in any way;
 * BIO_FLAGS_NONCLEAR_RST means we shouldn't clear data on reset.
 */
# define BIO_FLAGS_MEM_RDONLY    0x200
# define BIO_FLAGS_NONCLEAR_RST  0x400
# define BIO_FLAGS_IN_EOF        0x800

/* the BIO FLAGS values 0x1000 to 0x4000 are reserved for internal KTLS flags */

typedef union bio_addr_st BIO_ADDR;
typedef struct bio_addrinfo_st BIO_ADDRINFO;

int BIO_get_new_index(void);
void BIO_set_flags(BIO *b, int flags);
int BIO_test_flags(const BIO *b, int flags);
void BIO_clear_flags(BIO *b, int flags);

# define BIO_get_flags(b) BIO_test_flags(b, ~(0x0))
# define BIO_set_retry_special(b) \
                BIO_set_flags(b, (BIO_FLAGS_IO_SPECIAL|BIO_FLAGS_SHOULD_RETRY))
# define BIO_set_retry_read(b) \
                BIO_set_flags(b, (BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY))
# define BIO_set_retry_write(b) \
                BIO_set_flags(b, (BIO_FLAGS_WRITE|BIO_FLAGS_SHOULD_RETRY))

/* These are normally used internally in BIOs */
# define BIO_clear_retry_flags(b) \
                BIO_clear_flags(b, (BIO_FLAGS_RWS|BIO_FLAGS_SHOULD_RETRY))
# define BIO_get_retry_flags(b) \
                BIO_test_flags(b, (BIO_FLAGS_RWS|BIO_FLAGS_SHOULD_RETRY))

/* These should be used by the application to tell why we should retry */
# define BIO_should_read(a)              BIO_test_flags(a, BIO_FLAGS_READ)
# define BIO_should_write(a)             BIO_test_flags(a, BIO_FLAGS_WRITE)
# define BIO_should_io_special(a)        BIO_test_flags(a, BIO_FLAGS_IO_SPECIAL)
# define BIO_retry_type(a)               BIO_test_flags(a, BIO_FLAGS_RWS)
# define BIO_should_retry(a)             BIO_test_flags(a, BIO_FLAGS_SHOULD_RETRY)

/*
 * The next three are used in conjunction with the BIO_should_io_special()
 * condition.  After this returns true, BIO *BIO_get_retry_BIO(BIO *bio, int
 * *reason); will walk the BIO stack and return the 'reason' for the special
 * and the offending BIO. Given a BIO, BIO_get_retry_reason(bio) will return
 * the code.
 */
/*
 * Returned from the SSL bio when the certificate retrieval code had an error
 */
# define BIO_RR_SSL_X509_LOOKUP          0x01
/* Returned from the connect BIO when a connect would have blocked */
# define BIO_RR_CONNECT                  0x02
/* Returned from the accept BIO when an accept would have blocked */
# define BIO_RR_ACCEPT                   0x03

/* These are passed by the BIO callback */
# define BIO_CB_FREE     0x01
# define BIO_CB_READ     0x02
# define BIO_CB_WRITE    0x03
# define BIO_CB_PUTS     0x04
# define BIO_CB_GETS     0x05
# define BIO_CB_CTRL     0x06

/*
 * The callback is called before and after the underling operation, The
 * BIO_CB_RETURN flag indicates if it is after the call
 */
# define BIO_CB_RETURN   0x80
# define BIO_CB_return(a) ((a)|BIO_CB_RETURN)
# define BIO_cb_pre(a)   (!((a)&BIO_CB_RETURN))
# define BIO_cb_post(a)  ((a)&BIO_CB_RETURN)

# ifndef OPENSSL_NO_DEPRECATED_3_0
typedef long (*BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,
                                long argl, long ret);
OSSL_DEPRECATEDIN_3_0 BIO_callback_fn BIO_get_callback(const BIO *b);
OSSL_DEPRECATEDIN_3_0 void BIO_set_callback(BIO *b, BIO_callback_fn callback);
OSSL_DEPRECATEDIN_3_0 long BIO_debug_callback(BIO *bio, int cmd,
                                               const char *argp, int argi,
                                               long argl, long ret);
# endif

typedef long (*BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,
                                   size_t len, int argi,
                                   long argl, int ret, size_t *processed);
BIO_callback_fn_ex BIO_get_callback_ex(const BIO *b);
void BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);
long BIO_debug_callback_ex(BIO *bio, int oper, const char *argp, size_t len,
                           int argi, long argl, int ret, size_t *processed);

char *BIO_get_callback_arg(const BIO *b);
void BIO_set_callback_arg(BIO *b, char *arg);

typedef struct bio_method_st BIO_METHOD;

const char *BIO_method_name(const BIO *b);
int BIO_method_type(const BIO *b);

typedef int BIO_info_cb(BIO *, int, int);
typedef BIO_info_cb bio_info_cb;  /* backward compatibility */

SKM_DEFINE_STACK_OF_INTERNAL(BIO, BIO, BIO)
#define sk_BIO_num(sk) OPENSSL_sk_num(ossl_check_const_BIO_sk_type(sk))
#define sk_BIO_value(sk, idx) ((BIO *)OPENSSL_sk_value(ossl_check_const_BIO_sk_type(sk), (idx)))
#define sk_BIO_new(cmp) ((STACK_OF(BIO) *)OPENSSL_sk_new(ossl_check_BIO_compfunc_type(cmp)))
#define sk_BIO_new_null() ((STACK_OF(BIO) *)OPENSSL_sk_new_null())
#define sk_BIO_new_reserve(cmp, n) ((STACK_OF(BIO) *)OPENSSL_sk_new_reserve(ossl_check_BIO_compfunc_type(cmp), (n)))
#define sk_BIO_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_BIO_sk_type(sk), (n))
#define sk_BIO_free(sk) OPENSSL_sk_free(ossl_check_BIO_sk_type(sk))
#define sk_BIO_zero(sk) OPENSSL_sk_zero(ossl_check_BIO_sk_type(sk))
#define sk_BIO_delete(sk, i) ((BIO *)OPENSSL_sk_delete(ossl_check_BIO_sk_type(sk), (i)))
#define sk_BIO_delete_ptr(sk, ptr) ((BIO *)OPENSSL_sk_delete_ptr(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr)))
#define sk_BIO_push(sk, ptr) OPENSSL_sk_push(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_pop(sk) ((BIO *)OPENSSL_sk_pop(ossl_check_BIO_sk_type(sk)))
#define sk_BIO_shift(sk) ((BIO *)OPENSSL_sk_shift(ossl_check_BIO_sk_type(sk)))
#define sk_BIO_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_BIO_sk_type(sk),ossl_check_BIO_freefunc_type(freefunc))
#define sk_BIO_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr), (idx))
#define sk_BIO_set(sk, idx, ptr) ((BIO *)OPENSSL_sk_set(ossl_check_BIO_sk_type(sk), (idx), ossl_check_BIO_type(ptr)))
#define sk_BIO_find(sk, ptr) OPENSSL_sk_find(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr), pnum)
#define sk_BIO_sort(sk) OPENSSL_sk_sort(ossl_check_BIO_sk_type(sk))
#define sk_BIO_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_BIO_sk_type(sk))
#define sk_BIO_dup(sk) ((STACK_OF(BIO) *)OPENSSL_sk_dup(ossl_check_const_BIO_sk_type(sk)))
#define sk_BIO_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(BIO) *)OPENSSL_sk_deep_copy(ossl_check_const_BIO_sk_type(sk), ossl_check_BIO_copyfunc_type(copyfunc), ossl_check_BIO_freefunc_type(freefunc)))
#define sk_BIO_set_cmp_func(sk, cmp) ((sk_BIO_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_BIO_sk_type(sk), ossl_check_BIO_compfunc_type(cmp)))



/* Prefix and suffix callback in ASN1 BIO */
typedef int asn1_ps_func (BIO *b, unsigned char **pbuf, int *plen,
                          void *parg);

typedef void (*BIO_dgram_sctp_notification_handler_fn) (BIO *b,
                                                        void *context,
                                                        void *buf);
# ifndef OPENSSL_NO_SCTP
/* SCTP parameter structs */
struct bio_dgram_sctp_sndinfo {
    uint16_t snd_sid;
    uint16_t snd_flags;
    uint32_t snd_ppid;
    uint32_t snd_context;
};

struct bio_dgram_sctp_rcvinfo {
    uint16_t rcv_sid;
    uint16_t rcv_ssn;
    uint16_t rcv_flags;
    uint32_t rcv_ppid;
    uint32_t rcv_tsn;
    uint32_t rcv_cumtsn;
    uint32_t rcv_context;
};

struct bio_dgram_sctp_prinfo {
    uint16_t pr_policy;
    uint32_t pr_value;
};
# endif

/*
 * #define BIO_CONN_get_param_hostname BIO_ctrl
 */

# define BIO_C_SET_CONNECT                       100
# define BIO_C_DO_STATE_MACHINE                  101
# define BIO_C_SET_NBIO                          102
/* # define BIO_C_SET_PROXY_PARAM                   103 */
# define BIO_C_SET_FD                            104
# define BIO_C_GET_FD                            105
# define BIO_C_SET_FILE_PTR                      106
# define BIO_C_GET_FILE_PTR                      107
# define BIO_C_SET_FILENAME                      108
# define BIO_C_SET_SSL                           109
# define BIO_C_GET_SSL                           110
# define BIO_C_SET_MD                            111
# define BIO_C_GET_MD                            112
# define BIO_C_GET_CIPHER_STATUS                 113
# define BIO_C_SET_BUF_MEM                       114
# define BIO_C_GET_BUF_MEM_PTR                   115
# define BIO_C_GET_BUFF_NUM_LINES                116
# define BIO_C_SET_BUFF_SIZE                     117
# define BIO_C_SET_ACCEPT                        118
# define BIO_C_SSL_MODE                          119
# define BIO_C_GET_MD_CTX                        120
/* # define BIO_C_GET_PROXY_PARAM                   121 */
# define BIO_C_SET_BUFF_READ_DATA                122/* data to read first */
# define BIO_C_GET_CONNECT                       123
# define BIO_C_GET_ACCEPT                        124
# define BIO_C_SET_SSL_RENEGOTIATE_BYTES         125
# define BIO_C_GET_SSL_NUM_RENEGOTIATES          126
# define BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT       127
# define BIO_C_FILE_SEEK                         128
# define BIO_C_GET_CIPHER_CTX                    129
# define BIO_C_SET_BUF_MEM_EOF_RETURN            130/* return end of input
                                                     * value */
# define BIO_C_SET_BIND_MODE                     131
# define BIO_C_GET_BIND_MODE                     132
# define BIO_C_FILE_TELL                         133
# define BIO_C_GET_SOCKS                         134
# define BIO_C_SET_SOCKS                         135

# define BIO_C_SET_WRITE_BUF_SIZE                136/* for BIO_s_bio */
# define BIO_C_GET_WRITE_BUF_SIZE                137
# define BIO_C_MAKE_BIO_PAIR                     138
# define BIO_C_DESTROY_BIO_PAIR                  139
# define BIO_C_GET_WRITE_GUARANTEE               140
# define BIO_C_GET_READ_REQUEST                  141
# define BIO_C_SHUTDOWN_WR                       142
# define BIO_C_NREAD0                            143
# define BIO_C_NREAD                             144
# define BIO_C_NWRITE0                           145
# define BIO_C_NWRITE                            146
# define BIO_C_RESET_READ_REQUEST                147
# define BIO_C_SET_MD_CTX                        148

# define BIO_C_SET_PREFIX                        149
# define BIO_C_GET_PREFIX                        150
# define BIO_C_SET_SUFFIX                        151
# define BIO_C_GET_SUFFIX                        152

# define BIO_C_SET_EX_ARG                        153
# define BIO_C_GET_EX_ARG                        154

# define BIO_C_SET_CONNECT_MODE                  155

# define BIO_set_app_data(s,arg)         BIO_set_ex_data(s,0,arg)
# define BIO_get_app_data(s)             BIO_get_ex_data(s,0)

# define BIO_set_nbio(b,n)             BIO_ctrl(b,BIO_C_SET_NBIO,(n),NULL)

# ifndef OPENSSL_NO_SOCK
/* IP families we support, for BIO_s_connect() and BIO_s_accept() */
/* Note: the underlying operating system may not support some of them */
#  define BIO_FAMILY_IPV4                         4
#  define BIO_FAMILY_IPV6                         6
#  define BIO_FAMILY_IPANY                        256

/* BIO_s_connect() */
#  define BIO_set_conn_hostname(b,name) BIO_ctrl(b,BIO_C_SET_CONNECT,0, \
                                                 (char *)(name))
#  define BIO_set_conn_port(b,port)     BIO_ctrl(b,BIO_C_SET_CONNECT,1, \
                                                 (char *)(port))
#  define BIO_set_conn_address(b,addr)  BIO_ctrl(b,BIO_C_SET_CONNECT,2, \
                                                 (char *)(addr))
#  define BIO_set_conn_ip_family(b,f)   BIO_int_ctrl(b,BIO_C_SET_CONNECT,3,f)
#  define BIO_get_conn_hostname(b)      ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,0))
#  define BIO_get_conn_port(b)          ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,1))
#  define BIO_get_conn_address(b)       ((const BIO_ADDR *)BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,2))
#  define BIO_get_conn_ip_family(b)     BIO_ctrl(b,BIO_C_GET_CONNECT,3,NULL)
#  define BIO_set_conn_mode(b,n)        BIO_ctrl(b,BIO_C_SET_CONNECT_MODE,(n),NULL)

/* BIO_s_accept() */
#  define BIO_set_accept_name(b,name)   BIO_ctrl(b,BIO_C_SET_ACCEPT,0, \
                                                 (char *)(name))
#  define BIO_set_accept_port(b,port)   BIO_ctrl(b,BIO_C_SET_ACCEPT,1, \
                                                 (char *)(port))
#  define BIO_get_accept_name(b)        ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,0))
#  define BIO_get_accept_port(b)        ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,1))
#  define BIO_get_peer_name(b)          ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,2))
#  define BIO_get_peer_port(b)          ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,3))
/* #define BIO_set_nbio(b,n)    BIO_ctrl(b,BIO_C_SET_NBIO,(n),NULL) */
#  define BIO_set_nbio_accept(b,n)      BIO_ctrl(b,BIO_C_SET_ACCEPT,2,(n)?(void *)"a":NULL)
#  define BIO_set_accept_bios(b,bio)    BIO_ctrl(b,BIO_C_SET_ACCEPT,3, \
                                                 (char *)(bio))
#  define BIO_set_accept_ip_family(b,f) BIO_int_ctrl(b,BIO_C_SET_ACCEPT,4,f)
#  define BIO_get_accept_ip_family(b)   BIO_ctrl(b,BIO_C_GET_ACCEPT,4,NULL)

/* Aliases kept for backward compatibility */
#  define BIO_BIND_NORMAL                 0
#  define BIO_BIND_REUSEADDR              BIO_SOCK_REUSEADDR
#  define BIO_BIND_REUSEADDR_IF_UNUSED    BIO_SOCK_REUSEADDR
#  define BIO_set_bind_mode(b,mode) BIO_ctrl(b,BIO_C_SET_BIND_MODE,mode,NULL)
#  define BIO_get_bind_mode(b)    BIO_ctrl(b,BIO_C_GET_BIND_MODE,0,NULL)
# endif /* OPENSSL_NO_SOCK */

# define BIO_do_connect(b)       BIO_do_handshake(b)
# define BIO_do_accept(b)        BIO_do_handshake(b)

# define BIO_do_handshake(b)     BIO_ctrl(b,BIO_C_DO_STATE_MACHINE,0,NULL)

/* BIO_s_datagram(), BIO_s_fd(), BIO_s_socket(), BIO_s_accept() and BIO_s_connect() */
# define BIO_set_fd(b,fd,c)      BIO_int_ctrl(b,BIO_C_SET_FD,c,fd)
# define BIO_get_fd(b,c)         BIO_ctrl(b,BIO_C_GET_FD,0,(char *)(c))

/* BIO_s_file() */
# define BIO_set_fp(b,fp,c)      BIO_ctrl(b,BIO_C_SET_FILE_PTR,c,(char *)(fp))
# define BIO_get_fp(b,fpp)       BIO_ctrl(b,BIO_C_GET_FILE_PTR,0,(char *)(fpp))

/* BIO_s_fd() and BIO_s_file() */
# define BIO_seek(b,ofs) (int)BIO_ctrl(b,BIO_C_FILE_SEEK,ofs,NULL)
# define BIO_tell(b)     (int)BIO_ctrl(b,BIO_C_FILE_TELL,0,NULL)

/*
 * name is cast to lose const, but might be better to route through a
 * function so we can do it safely
 */
# ifdef CONST_STRICT
/*
 * If you are wondering why this isn't defined, its because CONST_STRICT is
 * purely a compile-time kludge to allow const to be checked.
 */
int BIO_read_filename(BIO *b, const char *name);
# else
#  define BIO_read_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_READ,(char *)(name))
# endif
# define BIO_write_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_WRITE,name)
# define BIO_append_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_APPEND,name)
# define BIO_rw_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_READ|BIO_FP_WRITE,name)

/*
 * WARNING WARNING, this ups the reference count on the read bio of the SSL
 * structure.  This is because the ssl read BIO is now pointed to by the
 * next_bio field in the bio.  So when you free the BIO, make sure you are
 * doing a BIO_free_all() to catch the underlying BIO.
 */
# define BIO_set_ssl(b,ssl,c)    BIO_ctrl(b,BIO_C_SET_SSL,c,(char *)(ssl))
# define BIO_get_ssl(b,sslp)     BIO_ctrl(b,BIO_C_GET_SSL,0,(char *)(sslp))
# define BIO_set_ssl_mode(b,client)      BIO_ctrl(b,BIO_C_SSL_MODE,client,NULL)
# define BIO_set_ssl_renegotiate_bytes(b,num) \
        BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_BYTES,num,NULL)
# define BIO_get_num_renegotiates(b) \
        BIO_ctrl(b,BIO_C_GET_SSL_NUM_RENEGOTIATES,0,NULL)
# define BIO_set_ssl_renegotiate_timeout(b,seconds) \
        BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT,seconds,NULL)

/* defined in evp.h */
/* #define BIO_set_md(b,md)     BIO_ctrl(b,BIO_C_SET_MD,1,(char *)(md)) */

# define BIO_get_mem_data(b,pp)  BIO_ctrl(b,BIO_CTRL_INFO,0,(char *)(pp))
# define BIO_set_mem_buf(b,bm,c) BIO_ctrl(b,BIO_C_SET_BUF_MEM,c,(char *)(bm))
# define BIO_get_mem_ptr(b,pp)   BIO_ctrl(b,BIO_C_GET_BUF_MEM_PTR,0, \
                                          (char *)(pp))
# define BIO_set_mem_eof_return(b,v) \
                                BIO_ctrl(b,BIO_C_SET_BUF_MEM_EOF_RETURN,v,NULL)

/* For the BIO_f_buffer() type */
# define BIO_get_buffer_num_lines(b)     BIO_ctrl(b,BIO_C_GET_BUFF_NUM_LINES,0,NULL)
# define BIO_set_buffer_size(b,size)     BIO_ctrl(b,BIO_C_SET_BUFF_SIZE,size,NULL)
# define BIO_set_read_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,0)
# define BIO_set_write_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,1)
# define BIO_set_buffer_read_data(b,buf,num) BIO_ctrl(b,BIO_C_SET_BUFF_READ_DATA,num,buf)

/* Don't use the next one unless you know what you are doing :-) */
# define BIO_dup_state(b,ret)    BIO_ctrl(b,BIO_CTRL_DUP,0,(char *)(ret))

# define BIO_reset(b)            (int)BIO_ctrl(b,BIO_CTRL_RESET,0,NULL)
# define BIO_eof(b)              (int)BIO_ctrl(b,BIO_CTRL_EOF,0,NULL)
# define BIO_set_close(b,c)      (int)BIO_ctrl(b,BIO_CTRL_SET_CLOSE,(c),NULL)
# define BIO_get_close(b)        (int)BIO_ctrl(b,BIO_CTRL_GET_CLOSE,0,NULL)
# define BIO_pending(b)          (int)BIO_ctrl(b,BIO_CTRL_PENDING,0,NULL)
# define BIO_wpending(b)         (int)BIO_ctrl(b,BIO_CTRL_WPENDING,0,NULL)
/* ...pending macros have inappropriate return type */
size_t BIO_ctrl_pending(BIO *b);
size_t BIO_ctrl_wpending(BIO *b);
# define BIO_flush(b)            (int)BIO_ctrl(b,BIO_CTRL_FLUSH,0,NULL)
# define BIO_get_info_callback(b,cbp) (int)BIO_ctrl(b,BIO_CTRL_GET_CALLBACK,0, \
                                                   cbp)
# define BIO_set_info_callback(b,cb) (int)BIO_callback_ctrl(b,BIO_CTRL_SET_CALLBACK,cb)

/* For the BIO_f_buffer() type */
# define BIO_buffer_get_num_lines(b) BIO_ctrl(b,BIO_CTRL_GET,0,NULL)
# define BIO_buffer_peek(b,s,l) BIO_ctrl(b,BIO_CTRL_PEEK,(l),(s))

/* For BIO_s_bio() */
# define BIO_set_write_buf_size(b,size) (int)BIO_ctrl(b,BIO_C_SET_WRITE_BUF_SIZE,size,NULL)
# define BIO_get_write_buf_size(b,size) (size_t)BIO_ctrl(b,BIO_C_GET_WRITE_BUF_SIZE,size,NULL)
# define BIO_make_bio_pair(b1,b2)   (int)BIO_ctrl(b1,BIO_C_MAKE_BIO_PAIR,0,b2)
# define BIO_destroy_bio_pair(b)    (int)BIO_ctrl(b,BIO_C_DESTROY_BIO_PAIR,0,NULL)
# define BIO_shutdown_wr(b) (int)BIO_ctrl(b, BIO_C_SHUTDOWN_WR, 0, NULL)
/* macros with inappropriate type -- but ...pending macros use int too: */
# define BIO_get_write_guarantee(b) (int)BIO_ctrl(b,BIO_C_GET_WRITE_GUARANTEE,0,NULL)
# define BIO_get_read_request(b)    (int)BIO_ctrl(b,BIO_C_GET_READ_REQUEST,0,NULL)
size_t BIO_ctrl_get_write_guarantee(BIO *b);
size_t BIO_ctrl_get_read_request(BIO *b);
int BIO_ctrl_reset_read_request(BIO *b);

/* ctrl macros for dgram */
# define BIO_ctrl_dgram_connect(b,peer)  \
                     (int)BIO_ctrl(b,BIO_CTRL_DGRAM_CONNECT,0, (char *)(peer))
# define BIO_ctrl_set_connected(b,peer) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_SET_CONNECTED, 0, (char *)(peer))
# define BIO_dgram_recv_timedout(b) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP, 0, NULL)
# define BIO_dgram_send_timedout(b) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP, 0, NULL)
# define BIO_dgram_get_peer(b,peer) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_PEER, 0, (char *)(peer))
# define BIO_dgram_set_peer(b,peer) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_SET_PEER, 0, (char *)(peer))
# define BIO_dgram_get_mtu_overhead(b) \
         (unsigned int)BIO_ctrl((b), BIO_CTRL_DGRAM_GET_MTU_OVERHEAD, 0, NULL)

/* ctrl macros for BIO_f_prefix */
# define BIO_set_prefix(b,p) BIO_ctrl((b), BIO_CTRL_SET_PREFIX, 0, (void *)(p))
# define BIO_set_indent(b,i) BIO_ctrl((b), BIO_CTRL_SET_INDENT, (i), NULL)
# define BIO_get_indent(b) BIO_ctrl((b), BIO_CTRL_GET_INDENT, 0, NULL)

#define BIO_get_ex_new_index(l, p, newf, dupf, freef) \
    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, l, p, newf, dupf, freef)
int BIO_set_ex_data(BIO *bio, int idx, void *data);
void *BIO_get_ex_data(const BIO *bio, int idx);
uint64_t BIO_number_read(BIO *bio);
uint64_t BIO_number_written(BIO *bio);

/* For BIO_f_asn1() */
int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
                        asn1_ps_func *prefix_free);
int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
                        asn1_ps_func **pprefix_free);
int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
                        asn1_ps_func *suffix_free);
int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
                        asn1_ps_func **psuffix_free);

const BIO_METHOD *BIO_s_file(void);
BIO *BIO_new_file(const char *filename, const char *mode);
BIO *BIO_new_from_core_bio(OSSL_LIB_CTX *libctx, OSSL_CORE_BIO *corebio);
# ifndef OPENSSL_NO_STDIO
BIO *BIO_new_fp(FILE *stream, int close_flag);
# endif
BIO *BIO_new_ex(OSSL_LIB_CTX *libctx, const BIO_METHOD *method);
BIO *BIO_new(const BIO_METHOD *type);
int BIO_free(BIO *a);
void BIO_set_data(BIO *a, void *ptr);
void *BIO_get_data(BIO *a);
void BIO_set_init(BIO *a, int init);
int BIO_get_init(BIO *a);
void BIO_set_shutdown(BIO *a, int shut);
int BIO_get_shutdown(BIO *a);
void BIO_vfree(BIO *a);
int BIO_up_ref(BIO *a);
int BIO_read(BIO *b, void *data, int dlen);
int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
int BIO_gets(BIO *bp, char *buf, int size);
int BIO_get_line(BIO *bio, char *buf, int size);
int BIO_write(BIO *b, const void *data, int dlen);
int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);
int BIO_puts(BIO *bp, const char *buf);
int BIO_indent(BIO *b, int indent, int max);
long BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);
long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
void *BIO_ptr_ctrl(BIO *bp, int cmd, long larg);
long BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);
BIO *BIO_push(BIO *b, BIO *append);
BIO *BIO_pop(BIO *b);
void BIO_free_all(BIO *a);
BIO *BIO_find_type(BIO *b, int bio_type);
BIO *BIO_next(BIO *b);
void BIO_set_next(BIO *b, BIO *next);
BIO *BIO_get_retry_BIO(BIO *bio, int *reason);
int BIO_get_retry_reason(BIO *bio);
void BIO_set_retry_reason(BIO *bio, int reason);
BIO *BIO_dup_chain(BIO *in);

int BIO_nread0(BIO *bio, char **buf);
int BIO_nread(BIO *bio, char **buf, int num);
int BIO_nwrite0(BIO *bio, char **buf);
int BIO_nwrite(BIO *bio, char **buf, int num);

const BIO_METHOD *BIO_s_mem(void);
const BIO_METHOD *BIO_s_secmem(void);
BIO *BIO_new_mem_buf(const void *buf, int len);
# ifndef OPENSSL_NO_SOCK
const BIO_METHOD *BIO_s_socket(void);
const BIO_METHOD *BIO_s_connect(void);
const BIO_METHOD *BIO_s_accept(void);
# endif
const BIO_METHOD *BIO_s_fd(void);
const BIO_METHOD *BIO_s_log(void);
const BIO_METHOD *BIO_s_bio(void);
const BIO_METHOD *BIO_s_null(void);
const BIO_METHOD *BIO_f_null(void);
const BIO_METHOD *BIO_f_buffer(void);
const BIO_METHOD *BIO_f_readbuffer(void);
const BIO_METHOD *BIO_f_linebuffer(void);
const BIO_METHOD *BIO_f_nbio_test(void);
const BIO_METHOD *BIO_f_prefix(void);
const BIO_METHOD *BIO_s_core(void);
# ifndef OPENSSL_NO_DGRAM
const BIO_METHOD *BIO_s_datagram(void);
int BIO_dgram_non_fatal_error(int error);
BIO *BIO_new_dgram(int fd, int close_flag);
#  ifndef OPENSSL_NO_SCTP
const BIO_METHOD *BIO_s_datagram_sctp(void);
BIO *BIO_new_dgram_sctp(int fd, int close_flag);
int BIO_dgram_is_sctp(BIO *bio);
int BIO_dgram_sctp_notification_cb(BIO *b,
                BIO_dgram_sctp_notification_handler_fn handle_notifications,
                void *context);
int BIO_dgram_sctp_wait_for_dry(BIO *b);
int BIO_dgram_sctp_msg_waiting(BIO *b);
#  endif
# endif

# ifndef OPENSSL_NO_SOCK
int BIO_sock_should_retry(int i);
int BIO_sock_non_fatal_error(int error);
int BIO_socket_wait(int fd, int for_read, time_t max_time);
# endif
int BIO_wait(BIO *bio, time_t max_time, unsigned int nap_milliseconds);
int BIO_do_connect_retry(BIO *bio, int timeout, int nap_milliseconds);

int BIO_fd_should_retry(int i);
int BIO_fd_non_fatal_error(int error);
int BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
                void *u, const void *s, int len);
int BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
                       void *u, const void *s, int len, int indent);
int BIO_dump(BIO *b, const void *bytes, int len);
int BIO_dump_indent(BIO *b, const void *bytes, int len, int indent);
# ifndef OPENSSL_NO_STDIO
int BIO_dump_fp(FILE *fp, const void *s, int len);
int BIO_dump_indent_fp(FILE *fp, const void *s, int len, int indent);
# endif
int BIO_hex_string(BIO *out, int indent, int width, const void *data,
                   int datalen);

# ifndef OPENSSL_NO_SOCK
BIO_ADDR *BIO_ADDR_new(void);
int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
                     const void *where, size_t wherelen, unsigned short port);
void BIO_ADDR_free(BIO_ADDR *);
void BIO_ADDR_clear(BIO_ADDR *ap);
int BIO_ADDR_family(const BIO_ADDR *ap);
int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l);
unsigned short BIO_ADDR_rawport(const BIO_ADDR *ap);
char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric);
char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric);
char *BIO_ADDR_path_string(const BIO_ADDR *ap);

const BIO_ADDRINFO *BIO_ADDRINFO_next(const BIO_ADDRINFO *bai);
int BIO_ADDRINFO_family(const BIO_ADDRINFO *bai);
int BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai);
int BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai);
const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai);
void BIO_ADDRINFO_free(BIO_ADDRINFO *bai);

enum BIO_hostserv_priorities {
    BIO_PARSE_PRIO_HOST, BIO_PARSE_PRIO_SERV
};
int BIO_parse_hostserv(const char *hostserv, char **host, char **service,
                       enum BIO_hostserv_priorities hostserv_prio);
enum BIO_lookup_type {
    BIO_LOOKUP_CLIENT, BIO_LOOKUP_SERVER
};
int BIO_lookup(const char *host, const char *service,
               enum BIO_lookup_type lookup_type,
               int family, int socktype, BIO_ADDRINFO **res);
int BIO_lookup_ex(const char *host, const char *service,
                  int lookup_type, int family, int socktype, int protocol,
                  BIO_ADDRINFO **res);
int BIO_sock_error(int sock);
int BIO_socket_ioctl(int fd, long type, void *arg);
int BIO_socket_nbio(int fd, int mode);
int BIO_sock_init(void);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define BIO_sock_cleanup() while(0) continue
# endif
int BIO_set_tcp_ndelay(int sock, int turn_on);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 struct hostent *BIO_gethostbyname(const char *name);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_port(const char *str, unsigned short *port_ptr);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_host_ip(const char *str, unsigned char *ip);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_accept_socket(char *host_port, int mode);
OSSL_DEPRECATEDIN_1_1_0 int BIO_accept(int sock, char **ip_port);
# endif

union BIO_sock_info_u {
    BIO_ADDR *addr;
};
enum BIO_sock_info_type {
    BIO_SOCK_INFO_ADDRESS
};
int BIO_sock_info(int sock,
                  enum BIO_sock_info_type type, union BIO_sock_info_u *info);

#  define BIO_SOCK_REUSEADDR    0x01
#  define BIO_SOCK_V6_ONLY      0x02
#  define BIO_SOCK_KEEPALIVE    0x04
#  define BIO_SOCK_NONBLOCK     0x08
#  define BIO_SOCK_NODELAY      0x10

int BIO_socket(int domain, int socktype, int protocol, int options);
int BIO_connect(int sock, const BIO_ADDR *addr, int options);
int BIO_bind(int sock, const BIO_ADDR *addr, int options);
int BIO_listen(int sock, const BIO_ADDR *addr, int options);
int BIO_accept_ex(int accept_sock, BIO_ADDR *addr, int options);
int BIO_closesocket(int sock);

BIO *BIO_new_socket(int sock, int close_flag);
BIO *BIO_new_connect(const char *host_port);
BIO *BIO_new_accept(const char *host_port);
# endif /* OPENSSL_NO_SOCK*/

BIO *BIO_new_fd(int fd, int close_flag);

int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
                     BIO **bio2, size_t writebuf2);
/*
 * If successful, returns 1 and in *bio1, *bio2 two BIO pair endpoints.
 * Otherwise returns 0 and sets *bio1 and *bio2 to NULL. Size 0 uses default
 * value.
 */

void BIO_copy_next_retry(BIO *b);

/*
 * long BIO_ghbn_ctrl(int cmd,int iarg,char *parg);
 */

# define ossl_bio__attr__(x)
# if defined(__GNUC__) && defined(__STDC_VERSION__) \
    && !defined(__MINGW32__) && !defined(__MINGW64__) \
    && !defined(__APPLE__)
    /*
     * Because we support the 'z' modifier, which made its appearance in C99,
     * we can't use __attribute__ with pre C99 dialects.
     */
#  if __STDC_VERSION__ >= 199901L
#   undef ossl_bio__attr__
#   define ossl_bio__attr__ __attribute__
#   if __GNUC__*10 + __GNUC_MINOR__ >= 44
#    define ossl_bio__printf__ __gnu_printf__
#   else
#    define ossl_bio__printf__ __printf__
#   endif
#  endif
# endif
int BIO_printf(BIO *bio, const char *format, ...)
ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 3)));
int BIO_vprintf(BIO *bio, const char *format, va_list args)
ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 0)));
int BIO_snprintf(char *buf, size_t n, const char *format, ...)
ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 4)));
int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 0)));
# undef ossl_bio__attr__
# undef ossl_bio__printf__


BIO_METHOD *BIO_meth_new(int type, const char *name);
void BIO_meth_free(BIO_METHOD *biom);
int (*BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int);
int (*BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
                                                size_t *);
int BIO_meth_set_write(BIO_METHOD *biom,
                       int (*write) (BIO *, const char *, int));
int BIO_meth_set_write_ex(BIO_METHOD *biom,
                       int (*bwrite) (BIO *, const char *, size_t, size_t *));
int (*BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int);
int (*BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *);
int BIO_meth_set_read(BIO_METHOD *biom,
                      int (*read) (BIO *, char *, int));
int BIO_meth_set_read_ex(BIO_METHOD *biom,
                         int (*bread) (BIO *, char *, size_t, size_t *));
int (*BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *);
int BIO_meth_set_puts(BIO_METHOD *biom,
                      int (*puts) (BIO *, const char *));
int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
int BIO_meth_set_gets(BIO_METHOD *biom,
                      int (*ossl_gets) (BIO *, char *, int));
long (*BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *);
int BIO_meth_set_ctrl(BIO_METHOD *biom,
                      long (*ctrl) (BIO *, int, long, void *));
int (*BIO_meth_get_create(const BIO_METHOD *bion)) (BIO *);
int BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *));
int (*BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *);
int BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *));
long (*BIO_meth_get_callback_ctrl(const BIO_METHOD *biom))
                                 (BIO *, int, BIO_info_cb *);
int BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
                               long (*callback_ctrl) (BIO *, int,
                                                      BIO_info_cb *));

# ifdef  __cplusplus
}
# endif
#endif
                                                                                            node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/cmp.h                            0000664 0000000 0000000 00000120243 14746647661 0025470 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/cmp.h.in
 *
 * Copyright 2007-2023 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright Nokia 2007-2019
 * Copyright Siemens AG 2015-2019
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_CMP_H
# define OPENSSL_CMP_H

# include <openssl/opensslconf.h>
# ifndef OPENSSL_NO_CMP

#  include <openssl/crmf.h>
#  include <openssl/cmperr.h>
#  include <openssl/cmp_util.h>
#  include <openssl/http.h>

/* explicit #includes not strictly needed since implied by the above: */
#  include <openssl/types.h>
#  include <openssl/safestack.h>
#  include <openssl/x509.h>
#  include <openssl/x509v3.h>

#  ifdef __cplusplus
extern "C" {
#  endif

#  define OSSL_CMP_PVNO 2

/*-
 *   PKIFailureInfo ::= BIT STRING {
 *   -- since we can fail in more than one way!
 *   -- More codes may be added in the future if/when required.
 *       badAlg              (0),
 *       -- unrecognized or unsupported Algorithm Identifier
 *       badMessageCheck     (1),
 *       -- integrity check failed (e.g., signature did not verify)
 *       badRequest          (2),
 *       -- transaction not permitted or supported
 *       badTime             (3),
 *       -- messageTime was not sufficiently close to the system time,
 *       -- as defined by local policy
 *       badCertId           (4),
 *       -- no certificate could be found matching the provided criteria
 *       badDataFormat       (5),
 *       -- the data submitted has the wrong format
 *       wrongAuthority      (6),
 *       -- the authority indicated in the request is different from the
 *       -- one creating the response token
 *       incorrectData       (7),
 *       -- the requester's data is incorrect (for notary services)
 *       missingTimeStamp    (8),
 *       -- when the timestamp is missing but should be there
 *       -- (by policy)
 *       badPOP              (9),
 *       -- the proof-of-possession failed
 *       certRevoked         (10),
 *          -- the certificate has already been revoked
 *       certConfirmed       (11),
 *          -- the certificate has already been confirmed
 *       wrongIntegrity      (12),
 *          -- invalid integrity, password based instead of signature or
 *          -- vice versa
 *       badRecipientNonce   (13),
 *          -- invalid recipient nonce, either missing or wrong value
 *       timeNotAvailable    (14),
 *          -- the TSA's time source is not available
 *       unacceptedPolicy    (15),
 *          -- the requested TSA policy is not supported by the TSA.
 *       unacceptedExtension (16),
 *          -- the requested extension is not supported by the TSA.
 *       addInfoNotAvailable (17),
 *          -- the additional information requested could not be
 *          -- understood or is not available
 *       badSenderNonce      (18),
 *          -- invalid sender nonce, either missing or wrong size
 *       badCertTemplate     (19),
 *          -- invalid cert. template or missing mandatory information
 *       signerNotTrusted    (20),
 *          -- signer of the message unknown or not trusted
 *       transactionIdInUse  (21),
 *          -- the transaction identifier is already in use
 *       unsupportedVersion  (22),
 *          -- the version of the message is not supported
 *       notAuthorized       (23),
 *          -- the sender was not authorized to make the preceding
 *          -- request or perform the preceding action
 *       systemUnavail       (24),
 *       -- the request cannot be handled due to system unavailability
 *       systemFailure       (25),
 *       -- the request cannot be handled due to system failure
 *       duplicateCertReq    (26)
 *       -- certificate cannot be issued because a duplicate
 *       -- certificate already exists
 *   }
 */
#  define OSSL_CMP_PKIFAILUREINFO_badAlg 0
#  define OSSL_CMP_PKIFAILUREINFO_badMessageCheck 1
#  define OSSL_CMP_PKIFAILUREINFO_badRequest 2
#  define OSSL_CMP_PKIFAILUREINFO_badTime 3
#  define OSSL_CMP_PKIFAILUREINFO_badCertId 4
#  define OSSL_CMP_PKIFAILUREINFO_badDataFormat 5
#  define OSSL_CMP_PKIFAILUREINFO_wrongAuthority 6
#  define OSSL_CMP_PKIFAILUREINFO_incorrectData 7
#  define OSSL_CMP_PKIFAILUREINFO_missingTimeStamp 8
#  define OSSL_CMP_PKIFAILUREINFO_badPOP 9
#  define OSSL_CMP_PKIFAILUREINFO_certRevoked 10
#  define OSSL_CMP_PKIFAILUREINFO_certConfirmed 11
#  define OSSL_CMP_PKIFAILUREINFO_wrongIntegrity 12
#  define OSSL_CMP_PKIFAILUREINFO_badRecipientNonce 13
#  define OSSL_CMP_PKIFAILUREINFO_timeNotAvailable 14
#  define OSSL_CMP_PKIFAILUREINFO_unacceptedPolicy 15
#  define OSSL_CMP_PKIFAILUREINFO_unacceptedExtension 16
#  define OSSL_CMP_PKIFAILUREINFO_addInfoNotAvailable 17
#  define OSSL_CMP_PKIFAILUREINFO_badSenderNonce 18
#  define OSSL_CMP_PKIFAILUREINFO_badCertTemplate 19
#  define OSSL_CMP_PKIFAILUREINFO_signerNotTrusted 20
#  define OSSL_CMP_PKIFAILUREINFO_transactionIdInUse 21
#  define OSSL_CMP_PKIFAILUREINFO_unsupportedVersion 22
#  define OSSL_CMP_PKIFAILUREINFO_notAuthorized 23
#  define OSSL_CMP_PKIFAILUREINFO_systemUnavail 24
#  define OSSL_CMP_PKIFAILUREINFO_systemFailure 25
#  define OSSL_CMP_PKIFAILUREINFO_duplicateCertReq 26
#  define OSSL_CMP_PKIFAILUREINFO_MAX 26
#  define OSSL_CMP_PKIFAILUREINFO_MAX_BIT_PATTERN \
    ((1 << (OSSL_CMP_PKIFAILUREINFO_MAX + 1)) - 1)
#  if OSSL_CMP_PKIFAILUREINFO_MAX_BIT_PATTERN > INT_MAX
#   error CMP_PKIFAILUREINFO_MAX bit pattern does not fit in type int
#  endif

typedef ASN1_BIT_STRING OSSL_CMP_PKIFAILUREINFO;

#  define OSSL_CMP_CTX_FAILINFO_badAlg (1 << 0)
#  define OSSL_CMP_CTX_FAILINFO_badMessageCheck (1 << 1)
#  define OSSL_CMP_CTX_FAILINFO_badRequest (1 << 2)
#  define OSSL_CMP_CTX_FAILINFO_badTime (1 << 3)
#  define OSSL_CMP_CTX_FAILINFO_badCertId (1 << 4)
#  define OSSL_CMP_CTX_FAILINFO_badDataFormat (1 << 5)
#  define OSSL_CMP_CTX_FAILINFO_wrongAuthority (1 << 6)
#  define OSSL_CMP_CTX_FAILINFO_incorrectData (1 << 7)
#  define OSSL_CMP_CTX_FAILINFO_missingTimeStamp (1 << 8)
#  define OSSL_CMP_CTX_FAILINFO_badPOP (1 << 9)
#  define OSSL_CMP_CTX_FAILINFO_certRevoked (1 << 10)
#  define OSSL_CMP_CTX_FAILINFO_certConfirmed (1 << 11)
#  define OSSL_CMP_CTX_FAILINFO_wrongIntegrity (1 << 12)
#  define OSSL_CMP_CTX_FAILINFO_badRecipientNonce (1 << 13)
#  define OSSL_CMP_CTX_FAILINFO_timeNotAvailable (1 << 14)
#  define OSSL_CMP_CTX_FAILINFO_unacceptedPolicy (1 << 15)
#  define OSSL_CMP_CTX_FAILINFO_unacceptedExtension (1 << 16)
#  define OSSL_CMP_CTX_FAILINFO_addInfoNotAvailable (1 << 17)
#  define OSSL_CMP_CTX_FAILINFO_badSenderNonce (1 << 18)
#  define OSSL_CMP_CTX_FAILINFO_badCertTemplate (1 << 19)
#  define OSSL_CMP_CTX_FAILINFO_signerNotTrusted (1 << 20)
#  define OSSL_CMP_CTX_FAILINFO_transactionIdInUse (1 << 21)
#  define OSSL_CMP_CTX_FAILINFO_unsupportedVersion (1 << 22)
#  define OSSL_CMP_CTX_FAILINFO_notAuthorized (1 << 23)
#  define OSSL_CMP_CTX_FAILINFO_systemUnavail (1 << 24)
#  define OSSL_CMP_CTX_FAILINFO_systemFailure (1 << 25)
#  define OSSL_CMP_CTX_FAILINFO_duplicateCertReq (1 << 26)

/*-
 *   PKIStatus ::= INTEGER {
 *       accepted                (0),
 *       -- you got exactly what you asked for
 *       grantedWithMods        (1),
 *       -- you got something like what you asked for; the
 *       -- requester is responsible for ascertaining the differences
 *       rejection              (2),
 *       -- you don't get it, more information elsewhere in the message
 *       waiting                (3),
 *       -- the request body part has not yet been processed; expect to
 *       -- hear more later (note: proper handling of this status
 *       -- response MAY use the polling req/rep PKIMessages specified
 *       -- in Section 5.3.22; alternatively, polling in the underlying
 *       -- transport layer MAY have some utility in this regard)
 *       revocationWarning      (4),
 *       -- this message contains a warning that a revocation is
 *       -- imminent
 *       revocationNotification (5),
 *       -- notification that a revocation has occurred
 *       keyUpdateWarning       (6)
 *       -- update already done for the oldCertId specified in
 *       -- CertReqMsg
 *   }
 */
#  define OSSL_CMP_PKISTATUS_request                -3
#  define OSSL_CMP_PKISTATUS_trans                  -2
#  define OSSL_CMP_PKISTATUS_unspecified            -1
#  define OSSL_CMP_PKISTATUS_accepted               0
#  define OSSL_CMP_PKISTATUS_grantedWithMods        1
#  define OSSL_CMP_PKISTATUS_rejection              2
#  define OSSL_CMP_PKISTATUS_waiting                3
#  define OSSL_CMP_PKISTATUS_revocationWarning      4
#  define OSSL_CMP_PKISTATUS_revocationNotification 5
#  define OSSL_CMP_PKISTATUS_keyUpdateWarning       6

typedef ASN1_INTEGER OSSL_CMP_PKISTATUS;
DECLARE_ASN1_ITEM(OSSL_CMP_PKISTATUS)

#  define OSSL_CMP_CERTORENCCERT_CERTIFICATE 0
#  define OSSL_CMP_CERTORENCCERT_ENCRYPTEDCERT 1

/* data type declarations */
typedef struct ossl_cmp_ctx_st OSSL_CMP_CTX;
typedef struct ossl_cmp_pkiheader_st OSSL_CMP_PKIHEADER;
DECLARE_ASN1_FUNCTIONS(OSSL_CMP_PKIHEADER)
typedef struct ossl_cmp_msg_st OSSL_CMP_MSG;
DECLARE_ASN1_DUP_FUNCTION(OSSL_CMP_MSG)
DECLARE_ASN1_ENCODE_FUNCTIONS(OSSL_CMP_MSG, OSSL_CMP_MSG, OSSL_CMP_MSG)
typedef struct ossl_cmp_certstatus_st OSSL_CMP_CERTSTATUS;
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_CERTSTATUS, OSSL_CMP_CERTSTATUS, OSSL_CMP_CERTSTATUS)
#define sk_OSSL_CMP_CERTSTATUS_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_value(sk, idx) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk), (idx)))
#define sk_OSSL_CMP_CERTSTATUS_new(cmp) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp)))
#define sk_OSSL_CMP_CERTSTATUS_new_null() ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_CERTSTATUS_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_CERTSTATUS_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (n))
#define sk_OSSL_CMP_CERTSTATUS_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_delete(sk, i) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (i)))
#define sk_OSSL_CMP_CERTSTATUS_delete_ptr(sk, ptr) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr)))
#define sk_OSSL_CMP_CERTSTATUS_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_pop(sk) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define sk_OSSL_CMP_CERTSTATUS_shift(sk) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define sk_OSSL_CMP_CERTSTATUS_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk),ossl_check_OSSL_CMP_CERTSTATUS_freefunc_type(freefunc))
#define sk_OSSL_CMP_CERTSTATUS_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr), (idx))
#define sk_OSSL_CMP_CERTSTATUS_set(sk, idx, ptr) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_set(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (idx), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr)))
#define sk_OSSL_CMP_CERTSTATUS_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr), pnum)
#define sk_OSSL_CMP_CERTSTATUS_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_dup(sk) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define sk_OSSL_CMP_CERTSTATUS_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_CERTSTATUS_freefunc_type(freefunc)))
#define sk_OSSL_CMP_CERTSTATUS_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_CERTSTATUS_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp)))

typedef struct ossl_cmp_itav_st OSSL_CMP_ITAV;
DECLARE_ASN1_DUP_FUNCTION(OSSL_CMP_ITAV)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_ITAV, OSSL_CMP_ITAV, OSSL_CMP_ITAV)
#define sk_OSSL_CMP_ITAV_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_value(sk, idx) ((OSSL_CMP_ITAV *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk), (idx)))
#define sk_OSSL_CMP_ITAV_new(cmp) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp)))
#define sk_OSSL_CMP_ITAV_new_null() ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_ITAV_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_ITAV_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_ITAV_sk_type(sk), (n))
#define sk_OSSL_CMP_ITAV_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_delete(sk, i) ((OSSL_CMP_ITAV *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_ITAV_sk_type(sk), (i)))
#define sk_OSSL_CMP_ITAV_delete_ptr(sk, ptr) ((OSSL_CMP_ITAV *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr)))
#define sk_OSSL_CMP_ITAV_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_pop(sk) ((OSSL_CMP_ITAV *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_ITAV_sk_type(sk)))
#define sk_OSSL_CMP_ITAV_shift(sk) ((OSSL_CMP_ITAV *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_ITAV_sk_type(sk)))
#define sk_OSSL_CMP_ITAV_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_ITAV_sk_type(sk),ossl_check_OSSL_CMP_ITAV_freefunc_type(freefunc))
#define sk_OSSL_CMP_ITAV_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr), (idx))
#define sk_OSSL_CMP_ITAV_set(sk, idx, ptr) ((OSSL_CMP_ITAV *)OPENSSL_sk_set(ossl_check_OSSL_CMP_ITAV_sk_type(sk), (idx), ossl_check_OSSL_CMP_ITAV_type(ptr)))
#define sk_OSSL_CMP_ITAV_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr), pnum)
#define sk_OSSL_CMP_ITAV_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_dup(sk) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk)))
#define sk_OSSL_CMP_ITAV_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_ITAV_freefunc_type(freefunc)))
#define sk_OSSL_CMP_ITAV_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_ITAV_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp)))

typedef struct ossl_cmp_revrepcontent_st OSSL_CMP_REVREPCONTENT;
typedef struct ossl_cmp_pkisi_st OSSL_CMP_PKISI;
DECLARE_ASN1_FUNCTIONS(OSSL_CMP_PKISI)
DECLARE_ASN1_DUP_FUNCTION(OSSL_CMP_PKISI)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_PKISI, OSSL_CMP_PKISI, OSSL_CMP_PKISI)
#define sk_OSSL_CMP_PKISI_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_value(sk, idx) ((OSSL_CMP_PKISI *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk), (idx)))
#define sk_OSSL_CMP_PKISI_new(cmp) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp)))
#define sk_OSSL_CMP_PKISI_new_null() ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_PKISI_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_PKISI_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_PKISI_sk_type(sk), (n))
#define sk_OSSL_CMP_PKISI_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_delete(sk, i) ((OSSL_CMP_PKISI *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_PKISI_sk_type(sk), (i)))
#define sk_OSSL_CMP_PKISI_delete_ptr(sk, ptr) ((OSSL_CMP_PKISI *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr)))
#define sk_OSSL_CMP_PKISI_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_pop(sk) ((OSSL_CMP_PKISI *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_PKISI_sk_type(sk)))
#define sk_OSSL_CMP_PKISI_shift(sk) ((OSSL_CMP_PKISI *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_PKISI_sk_type(sk)))
#define sk_OSSL_CMP_PKISI_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_PKISI_sk_type(sk),ossl_check_OSSL_CMP_PKISI_freefunc_type(freefunc))
#define sk_OSSL_CMP_PKISI_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr), (idx))
#define sk_OSSL_CMP_PKISI_set(sk, idx, ptr) ((OSSL_CMP_PKISI *)OPENSSL_sk_set(ossl_check_OSSL_CMP_PKISI_sk_type(sk), (idx), ossl_check_OSSL_CMP_PKISI_type(ptr)))
#define sk_OSSL_CMP_PKISI_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr), pnum)
#define sk_OSSL_CMP_PKISI_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_dup(sk) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk)))
#define sk_OSSL_CMP_PKISI_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_PKISI_freefunc_type(freefunc)))
#define sk_OSSL_CMP_PKISI_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_PKISI_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp)))

typedef struct ossl_cmp_certrepmessage_st OSSL_CMP_CERTREPMESSAGE;
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_CERTREPMESSAGE, OSSL_CMP_CERTREPMESSAGE, OSSL_CMP_CERTREPMESSAGE)
#define sk_OSSL_CMP_CERTREPMESSAGE_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_value(sk, idx) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (idx)))
#define sk_OSSL_CMP_CERTREPMESSAGE_new(cmp) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp)))
#define sk_OSSL_CMP_CERTREPMESSAGE_new_null() ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_CERTREPMESSAGE_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_CERTREPMESSAGE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (n))
#define sk_OSSL_CMP_CERTREPMESSAGE_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_delete(sk, i) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (i)))
#define sk_OSSL_CMP_CERTREPMESSAGE_delete_ptr(sk, ptr) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr)))
#define sk_OSSL_CMP_CERTREPMESSAGE_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_pop(sk) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define sk_OSSL_CMP_CERTREPMESSAGE_shift(sk) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define sk_OSSL_CMP_CERTREPMESSAGE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk),ossl_check_OSSL_CMP_CERTREPMESSAGE_freefunc_type(freefunc))
#define sk_OSSL_CMP_CERTREPMESSAGE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr), (idx))
#define sk_OSSL_CMP_CERTREPMESSAGE_set(sk, idx, ptr) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_set(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (idx), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr)))
#define sk_OSSL_CMP_CERTREPMESSAGE_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr), pnum)
#define sk_OSSL_CMP_CERTREPMESSAGE_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_dup(sk) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define sk_OSSL_CMP_CERTREPMESSAGE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_CERTREPMESSAGE_freefunc_type(freefunc)))
#define sk_OSSL_CMP_CERTREPMESSAGE_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_CERTREPMESSAGE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp)))

typedef struct ossl_cmp_pollrep_st OSSL_CMP_POLLREP;
typedef STACK_OF(OSSL_CMP_POLLREP) OSSL_CMP_POLLREPCONTENT;
typedef struct ossl_cmp_certresponse_st OSSL_CMP_CERTRESPONSE;
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_CERTRESPONSE, OSSL_CMP_CERTRESPONSE, OSSL_CMP_CERTRESPONSE)
#define sk_OSSL_CMP_CERTRESPONSE_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_value(sk, idx) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk), (idx)))
#define sk_OSSL_CMP_CERTRESPONSE_new(cmp) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp)))
#define sk_OSSL_CMP_CERTRESPONSE_new_null() ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_CERTRESPONSE_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_CERTRESPONSE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (n))
#define sk_OSSL_CMP_CERTRESPONSE_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_delete(sk, i) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (i)))
#define sk_OSSL_CMP_CERTRESPONSE_delete_ptr(sk, ptr) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr)))
#define sk_OSSL_CMP_CERTRESPONSE_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_pop(sk) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define sk_OSSL_CMP_CERTRESPONSE_shift(sk) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define sk_OSSL_CMP_CERTRESPONSE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk),ossl_check_OSSL_CMP_CERTRESPONSE_freefunc_type(freefunc))
#define sk_OSSL_CMP_CERTRESPONSE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr), (idx))
#define sk_OSSL_CMP_CERTRESPONSE_set(sk, idx, ptr) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_set(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (idx), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr)))
#define sk_OSSL_CMP_CERTRESPONSE_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr), pnum)
#define sk_OSSL_CMP_CERTRESPONSE_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_dup(sk) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define sk_OSSL_CMP_CERTRESPONSE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_CERTRESPONSE_freefunc_type(freefunc)))
#define sk_OSSL_CMP_CERTRESPONSE_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_CERTRESPONSE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp)))

typedef STACK_OF(ASN1_UTF8STRING) OSSL_CMP_PKIFREETEXT;

/*
 * function DECLARATIONS
 */

/* from cmp_asn.c */
OSSL_CMP_ITAV *OSSL_CMP_ITAV_create(ASN1_OBJECT *type, ASN1_TYPE *value);
void OSSL_CMP_ITAV_set0(OSSL_CMP_ITAV *itav, ASN1_OBJECT *type,
                        ASN1_TYPE *value);
ASN1_OBJECT *OSSL_CMP_ITAV_get0_type(const OSSL_CMP_ITAV *itav);
ASN1_TYPE *OSSL_CMP_ITAV_get0_value(const OSSL_CMP_ITAV *itav);
int OSSL_CMP_ITAV_push0_stack_item(STACK_OF(OSSL_CMP_ITAV) **itav_sk_p,
                                   OSSL_CMP_ITAV *itav);
void OSSL_CMP_ITAV_free(OSSL_CMP_ITAV *itav);
void OSSL_CMP_MSG_free(OSSL_CMP_MSG *msg);

/* from cmp_ctx.c */
OSSL_CMP_CTX *OSSL_CMP_CTX_new(OSSL_LIB_CTX *libctx, const char *propq);
void OSSL_CMP_CTX_free(OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_reinit(OSSL_CMP_CTX *ctx);
/* CMP general options: */
#  define OSSL_CMP_OPT_LOG_VERBOSITY 0
/* CMP transfer options: */
#  define OSSL_CMP_OPT_KEEP_ALIVE 10
#  define OSSL_CMP_OPT_MSG_TIMEOUT 11
#  define OSSL_CMP_OPT_TOTAL_TIMEOUT 12
/* CMP request options: */
#  define OSSL_CMP_OPT_VALIDITY_DAYS 20
#  define OSSL_CMP_OPT_SUBJECTALTNAME_NODEFAULT 21
#  define OSSL_CMP_OPT_SUBJECTALTNAME_CRITICAL 22
#  define OSSL_CMP_OPT_POLICIES_CRITICAL 23
#  define OSSL_CMP_OPT_POPO_METHOD 24
#  define OSSL_CMP_OPT_IMPLICIT_CONFIRM 25
#  define OSSL_CMP_OPT_DISABLE_CONFIRM 26
#  define OSSL_CMP_OPT_REVOCATION_REASON 27
/* CMP protection options: */
#  define OSSL_CMP_OPT_UNPROTECTED_SEND 30
#  define OSSL_CMP_OPT_UNPROTECTED_ERRORS 31
#  define OSSL_CMP_OPT_OWF_ALGNID 32
#  define OSSL_CMP_OPT_MAC_ALGNID 33
#  define OSSL_CMP_OPT_DIGEST_ALGNID 34
#  define OSSL_CMP_OPT_IGNORE_KEYUSAGE 35
#  define OSSL_CMP_OPT_PERMIT_TA_IN_EXTRACERTS_FOR_IR 36
int OSSL_CMP_CTX_set_option(OSSL_CMP_CTX *ctx, int opt, int val);
int OSSL_CMP_CTX_get_option(const OSSL_CMP_CTX *ctx, int opt);
/* CMP-specific callback for logging and outputting the error queue: */
int OSSL_CMP_CTX_set_log_cb(OSSL_CMP_CTX *ctx, OSSL_CMP_log_cb_t cb);
#  define OSSL_CMP_CTX_set_log_verbosity(ctx, level) \
    OSSL_CMP_CTX_set_option(ctx, OSSL_CMP_OPT_LOG_VERBOSITY, level)
void OSSL_CMP_CTX_print_errors(const OSSL_CMP_CTX *ctx);
/* message transfer: */
int OSSL_CMP_CTX_set1_serverPath(OSSL_CMP_CTX *ctx, const char *path);
int OSSL_CMP_CTX_set1_server(OSSL_CMP_CTX *ctx, const char *address);
int OSSL_CMP_CTX_set_serverPort(OSSL_CMP_CTX *ctx, int port);
int OSSL_CMP_CTX_set1_proxy(OSSL_CMP_CTX *ctx, const char *name);
int OSSL_CMP_CTX_set1_no_proxy(OSSL_CMP_CTX *ctx, const char *names);
int OSSL_CMP_CTX_set_http_cb(OSSL_CMP_CTX *ctx, OSSL_HTTP_bio_cb_t cb);
int OSSL_CMP_CTX_set_http_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
void *OSSL_CMP_CTX_get_http_cb_arg(const OSSL_CMP_CTX *ctx);
typedef OSSL_CMP_MSG *(*OSSL_CMP_transfer_cb_t) (OSSL_CMP_CTX *ctx,
                                                 const OSSL_CMP_MSG *req);
int OSSL_CMP_CTX_set_transfer_cb(OSSL_CMP_CTX *ctx, OSSL_CMP_transfer_cb_t cb);
int OSSL_CMP_CTX_set_transfer_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
void *OSSL_CMP_CTX_get_transfer_cb_arg(const OSSL_CMP_CTX *ctx);
/* server authentication: */
int OSSL_CMP_CTX_set1_srvCert(OSSL_CMP_CTX *ctx, X509 *cert);
int OSSL_CMP_CTX_set1_expected_sender(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_set0_trustedStore(OSSL_CMP_CTX *ctx, X509_STORE *store);
X509_STORE *OSSL_CMP_CTX_get0_trustedStore(const OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_set1_untrusted(OSSL_CMP_CTX *ctx, STACK_OF(X509) *certs);
STACK_OF(X509) *OSSL_CMP_CTX_get0_untrusted(const OSSL_CMP_CTX *ctx);
/* client authentication: */
int OSSL_CMP_CTX_set1_cert(OSSL_CMP_CTX *ctx, X509 *cert);
int OSSL_CMP_CTX_build_cert_chain(OSSL_CMP_CTX *ctx, X509_STORE *own_trusted,
                                  STACK_OF(X509) *candidates);
int OSSL_CMP_CTX_set1_pkey(OSSL_CMP_CTX *ctx, EVP_PKEY *pkey);
int OSSL_CMP_CTX_set1_referenceValue(OSSL_CMP_CTX *ctx,
                                     const unsigned char *ref, int len);
int OSSL_CMP_CTX_set1_secretValue(OSSL_CMP_CTX *ctx,
                                  const unsigned char *sec, int len);
/* CMP message header and extra certificates: */
int OSSL_CMP_CTX_set1_recipient(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_push0_geninfo_ITAV(OSSL_CMP_CTX *ctx, OSSL_CMP_ITAV *itav);
int OSSL_CMP_CTX_reset_geninfo_ITAVs(OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_set1_extraCertsOut(OSSL_CMP_CTX *ctx,
                                    STACK_OF(X509) *extraCertsOut);
/* certificate template: */
int OSSL_CMP_CTX_set0_newPkey(OSSL_CMP_CTX *ctx, int priv, EVP_PKEY *pkey);
EVP_PKEY *OSSL_CMP_CTX_get0_newPkey(const OSSL_CMP_CTX *ctx, int priv);
int OSSL_CMP_CTX_set1_issuer(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_set1_subjectName(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_push1_subjectAltName(OSSL_CMP_CTX *ctx,
                                      const GENERAL_NAME *name);
int OSSL_CMP_CTX_set0_reqExtensions(OSSL_CMP_CTX *ctx, X509_EXTENSIONS *exts);
int OSSL_CMP_CTX_reqExtensions_have_SAN(OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_push0_policy(OSSL_CMP_CTX *ctx, POLICYINFO *pinfo);
int OSSL_CMP_CTX_set1_oldCert(OSSL_CMP_CTX *ctx, X509 *cert);
int OSSL_CMP_CTX_set1_p10CSR(OSSL_CMP_CTX *ctx, const X509_REQ *csr);
/* misc body contents: */
int OSSL_CMP_CTX_push0_genm_ITAV(OSSL_CMP_CTX *ctx, OSSL_CMP_ITAV *itav);
/* certificate confirmation: */
typedef int (*OSSL_CMP_certConf_cb_t) (OSSL_CMP_CTX *ctx, X509 *cert,
                                       int fail_info, const char **txt);
int OSSL_CMP_certConf_cb(OSSL_CMP_CTX *ctx, X509 *cert, int fail_info,
                         const char **text);
int OSSL_CMP_CTX_set_certConf_cb(OSSL_CMP_CTX *ctx, OSSL_CMP_certConf_cb_t cb);
int OSSL_CMP_CTX_set_certConf_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
void *OSSL_CMP_CTX_get_certConf_cb_arg(const OSSL_CMP_CTX *ctx);
/* result fetching: */
int OSSL_CMP_CTX_get_status(const OSSL_CMP_CTX *ctx);
OSSL_CMP_PKIFREETEXT *OSSL_CMP_CTX_get0_statusString(const OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_get_failInfoCode(const OSSL_CMP_CTX *ctx);
#  define OSSL_CMP_PKISI_BUFLEN 1024
X509 *OSSL_CMP_CTX_get0_newCert(const OSSL_CMP_CTX *ctx);
STACK_OF(X509) *OSSL_CMP_CTX_get1_newChain(const OSSL_CMP_CTX *ctx);
STACK_OF(X509) *OSSL_CMP_CTX_get1_caPubs(const OSSL_CMP_CTX *ctx);
STACK_OF(X509) *OSSL_CMP_CTX_get1_extraCertsIn(const OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_set1_transactionID(OSSL_CMP_CTX *ctx,
                                    const ASN1_OCTET_STRING *id);
int OSSL_CMP_CTX_set1_senderNonce(OSSL_CMP_CTX *ctx,
                                  const ASN1_OCTET_STRING *nonce);

/* from cmp_status.c */
char *OSSL_CMP_CTX_snprint_PKIStatus(const OSSL_CMP_CTX *ctx, char *buf,
                                     size_t bufsize);
char *OSSL_CMP_snprint_PKIStatusInfo(const OSSL_CMP_PKISI *statusInfo,
                                     char *buf, size_t bufsize);
OSSL_CMP_PKISI *
OSSL_CMP_STATUSINFO_new(int status, int fail_info, const char *text);

/* from cmp_hdr.c */
ASN1_OCTET_STRING *OSSL_CMP_HDR_get0_transactionID(const
                                                   OSSL_CMP_PKIHEADER *hdr);
ASN1_OCTET_STRING *OSSL_CMP_HDR_get0_recipNonce(const OSSL_CMP_PKIHEADER *hdr);

/* from cmp_msg.c */
OSSL_CMP_PKIHEADER *OSSL_CMP_MSG_get0_header(const OSSL_CMP_MSG *msg);
int OSSL_CMP_MSG_get_bodytype(const OSSL_CMP_MSG *msg);
int OSSL_CMP_MSG_update_transactionID(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
int OSSL_CMP_MSG_update_recipNonce(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
OSSL_CRMF_MSG *OSSL_CMP_CTX_setup_CRM(OSSL_CMP_CTX *ctx, int for_KUR, int rid);
OSSL_CMP_MSG *OSSL_CMP_MSG_read(const char *file, OSSL_LIB_CTX *libctx,
                                const char *propq);
int OSSL_CMP_MSG_write(const char *file, const OSSL_CMP_MSG *msg);
OSSL_CMP_MSG *d2i_OSSL_CMP_MSG_bio(BIO *bio, OSSL_CMP_MSG **msg);
int i2d_OSSL_CMP_MSG_bio(BIO *bio, const OSSL_CMP_MSG *msg);

/* from cmp_vfy.c */
int OSSL_CMP_validate_msg(OSSL_CMP_CTX *ctx, const OSSL_CMP_MSG *msg);
int OSSL_CMP_validate_cert_path(const OSSL_CMP_CTX *ctx,
                                X509_STORE *trusted_store, X509 *cert);

/* from cmp_http.c */
OSSL_CMP_MSG *OSSL_CMP_MSG_http_perform(OSSL_CMP_CTX *ctx,
                                        const OSSL_CMP_MSG *req);

/* from cmp_server.c */
typedef struct ossl_cmp_srv_ctx_st OSSL_CMP_SRV_CTX;
OSSL_CMP_MSG *OSSL_CMP_SRV_process_request(OSSL_CMP_SRV_CTX *srv_ctx,
                                           const OSSL_CMP_MSG *req);
OSSL_CMP_MSG * OSSL_CMP_CTX_server_perform(OSSL_CMP_CTX *client_ctx,
                                           const OSSL_CMP_MSG *req);
OSSL_CMP_SRV_CTX *OSSL_CMP_SRV_CTX_new(OSSL_LIB_CTX *libctx, const char *propq);
void OSSL_CMP_SRV_CTX_free(OSSL_CMP_SRV_CTX *srv_ctx);
typedef OSSL_CMP_PKISI *(*OSSL_CMP_SRV_cert_request_cb_t)
    (OSSL_CMP_SRV_CTX *srv_ctx, const OSSL_CMP_MSG *req, int certReqId,
     const OSSL_CRMF_MSG *crm, const X509_REQ *p10cr,
     X509 **certOut, STACK_OF(X509) **chainOut, STACK_OF(X509) **caPubs);
typedef OSSL_CMP_PKISI *(*OSSL_CMP_SRV_rr_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                                const OSSL_CMP_MSG *req,
                                                const X509_NAME *issuer,
                                                const ASN1_INTEGER *serial);
typedef int (*OSSL_CMP_SRV_genm_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                      const OSSL_CMP_MSG *req,
                                      const STACK_OF(OSSL_CMP_ITAV) *in,
                                      STACK_OF(OSSL_CMP_ITAV) **out);
typedef void (*OSSL_CMP_SRV_error_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                        const OSSL_CMP_MSG *req,
                                        const OSSL_CMP_PKISI *statusInfo,
                                        const ASN1_INTEGER *errorCode,
                                        const OSSL_CMP_PKIFREETEXT *errDetails);
typedef int (*OSSL_CMP_SRV_certConf_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                          const OSSL_CMP_MSG *req,
                                          int certReqId,
                                          const ASN1_OCTET_STRING *certHash,
                                          const OSSL_CMP_PKISI *si);
typedef int (*OSSL_CMP_SRV_pollReq_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                         const OSSL_CMP_MSG *req, int certReqId,
                                         OSSL_CMP_MSG **certReq,
                                         int64_t *check_after);
int OSSL_CMP_SRV_CTX_init(OSSL_CMP_SRV_CTX *srv_ctx, void *custom_ctx,
                          OSSL_CMP_SRV_cert_request_cb_t process_cert_request,
                          OSSL_CMP_SRV_rr_cb_t process_rr,
                          OSSL_CMP_SRV_genm_cb_t process_genm,
                          OSSL_CMP_SRV_error_cb_t process_error,
                          OSSL_CMP_SRV_certConf_cb_t process_certConf,
                          OSSL_CMP_SRV_pollReq_cb_t process_pollReq);
OSSL_CMP_CTX *OSSL_CMP_SRV_CTX_get0_cmp_ctx(const OSSL_CMP_SRV_CTX *srv_ctx);
void *OSSL_CMP_SRV_CTX_get0_custom_ctx(const OSSL_CMP_SRV_CTX *srv_ctx);
int OSSL_CMP_SRV_CTX_set_send_unprotected_errors(OSSL_CMP_SRV_CTX *srv_ctx,
                                                 int val);
int OSSL_CMP_SRV_CTX_set_accept_unprotected(OSSL_CMP_SRV_CTX *srv_ctx, int val);
int OSSL_CMP_SRV_CTX_set_accept_raverified(OSSL_CMP_SRV_CTX *srv_ctx, int val);
int OSSL_CMP_SRV_CTX_set_grant_implicit_confirm(OSSL_CMP_SRV_CTX *srv_ctx,
                                                int val);

/* from cmp_client.c */
X509 *OSSL_CMP_exec_certreq(OSSL_CMP_CTX *ctx, int req_type,
                            const OSSL_CRMF_MSG *crm);
#  define OSSL_CMP_IR    0
#  define OSSL_CMP_CR    2
#  define OSSL_CMP_P10CR 4
#  define OSSL_CMP_KUR   7
#  define OSSL_CMP_exec_IR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_IR, NULL)
#  define OSSL_CMP_exec_CR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_CR, NULL)
#  define OSSL_CMP_exec_P10CR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_P10CR, NULL)
#  define OSSL_CMP_exec_KUR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_KUR, NULL)
int OSSL_CMP_try_certreq(OSSL_CMP_CTX *ctx, int req_type,
                         const OSSL_CRMF_MSG *crm, int *checkAfter);
int OSSL_CMP_exec_RR_ses(OSSL_CMP_CTX *ctx);
STACK_OF(OSSL_CMP_ITAV) *OSSL_CMP_exec_GENM_ses(OSSL_CMP_CTX *ctx);

#  ifdef  __cplusplus
}
#  endif
# endif /* !defined(OPENSSL_NO_CMP) */
#endif /* !defined(OPENSSL_CMP_H) */
                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/cms.h                            0000664 0000000 0000000 00000102441 14746647661 0025473 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/cms.h.in
 *
 * Copyright 2008-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_CMS_H
# define OPENSSL_CMS_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_CMS_H
# endif

# include <openssl/opensslconf.h>

# ifndef OPENSSL_NO_CMS
# include <openssl/x509.h>
# include <openssl/x509v3.h>
# include <openssl/cmserr.h>
# ifdef __cplusplus
extern "C" {
# endif

typedef struct CMS_ContentInfo_st CMS_ContentInfo;
typedef struct CMS_SignerInfo_st CMS_SignerInfo;
typedef struct CMS_CertificateChoices CMS_CertificateChoices;
typedef struct CMS_RevocationInfoChoice_st CMS_RevocationInfoChoice;
typedef struct CMS_RecipientInfo_st CMS_RecipientInfo;
typedef struct CMS_ReceiptRequest_st CMS_ReceiptRequest;
typedef struct CMS_Receipt_st CMS_Receipt;
typedef struct CMS_RecipientEncryptedKey_st CMS_RecipientEncryptedKey;
typedef struct CMS_OtherKeyAttribute_st CMS_OtherKeyAttribute;

SKM_DEFINE_STACK_OF_INTERNAL(CMS_SignerInfo, CMS_SignerInfo, CMS_SignerInfo)
#define sk_CMS_SignerInfo_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_value(sk, idx) ((CMS_SignerInfo *)OPENSSL_sk_value(ossl_check_const_CMS_SignerInfo_sk_type(sk), (idx)))
#define sk_CMS_SignerInfo_new(cmp) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_new(ossl_check_CMS_SignerInfo_compfunc_type(cmp)))
#define sk_CMS_SignerInfo_new_null() ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_new_null())
#define sk_CMS_SignerInfo_new_reserve(cmp, n) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_new_reserve(ossl_check_CMS_SignerInfo_compfunc_type(cmp), (n)))
#define sk_CMS_SignerInfo_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_SignerInfo_sk_type(sk), (n))
#define sk_CMS_SignerInfo_free(sk) OPENSSL_sk_free(ossl_check_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_delete(sk, i) ((CMS_SignerInfo *)OPENSSL_sk_delete(ossl_check_CMS_SignerInfo_sk_type(sk), (i)))
#define sk_CMS_SignerInfo_delete_ptr(sk, ptr) ((CMS_SignerInfo *)OPENSSL_sk_delete_ptr(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr)))
#define sk_CMS_SignerInfo_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_pop(sk) ((CMS_SignerInfo *)OPENSSL_sk_pop(ossl_check_CMS_SignerInfo_sk_type(sk)))
#define sk_CMS_SignerInfo_shift(sk) ((CMS_SignerInfo *)OPENSSL_sk_shift(ossl_check_CMS_SignerInfo_sk_type(sk)))
#define sk_CMS_SignerInfo_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_SignerInfo_sk_type(sk),ossl_check_CMS_SignerInfo_freefunc_type(freefunc))
#define sk_CMS_SignerInfo_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr), (idx))
#define sk_CMS_SignerInfo_set(sk, idx, ptr) ((CMS_SignerInfo *)OPENSSL_sk_set(ossl_check_CMS_SignerInfo_sk_type(sk), (idx), ossl_check_CMS_SignerInfo_type(ptr)))
#define sk_CMS_SignerInfo_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr), pnum)
#define sk_CMS_SignerInfo_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_dup(sk) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_dup(ossl_check_const_CMS_SignerInfo_sk_type(sk)))
#define sk_CMS_SignerInfo_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_copyfunc_type(copyfunc), ossl_check_CMS_SignerInfo_freefunc_type(freefunc)))
#define sk_CMS_SignerInfo_set_cmp_func(sk, cmp) ((sk_CMS_SignerInfo_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(CMS_RecipientEncryptedKey, CMS_RecipientEncryptedKey, CMS_RecipientEncryptedKey)
#define sk_CMS_RecipientEncryptedKey_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_value(sk, idx) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_value(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk), (idx)))
#define sk_CMS_RecipientEncryptedKey_new(cmp) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_new(ossl_check_CMS_RecipientEncryptedKey_compfunc_type(cmp)))
#define sk_CMS_RecipientEncryptedKey_new_null() ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_new_null())
#define sk_CMS_RecipientEncryptedKey_new_reserve(cmp, n) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_new_reserve(ossl_check_CMS_RecipientEncryptedKey_compfunc_type(cmp), (n)))
#define sk_CMS_RecipientEncryptedKey_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), (n))
#define sk_CMS_RecipientEncryptedKey_free(sk) OPENSSL_sk_free(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_delete(sk, i) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_delete(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), (i)))
#define sk_CMS_RecipientEncryptedKey_delete_ptr(sk, ptr) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_delete_ptr(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr)))
#define sk_CMS_RecipientEncryptedKey_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_pop(sk) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_pop(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk)))
#define sk_CMS_RecipientEncryptedKey_shift(sk) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_shift(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk)))
#define sk_CMS_RecipientEncryptedKey_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk),ossl_check_CMS_RecipientEncryptedKey_freefunc_type(freefunc))
#define sk_CMS_RecipientEncryptedKey_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr), (idx))
#define sk_CMS_RecipientEncryptedKey_set(sk, idx, ptr) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_set(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), (idx), ossl_check_CMS_RecipientEncryptedKey_type(ptr)))
#define sk_CMS_RecipientEncryptedKey_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr), pnum)
#define sk_CMS_RecipientEncryptedKey_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_dup(sk) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_dup(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk)))
#define sk_CMS_RecipientEncryptedKey_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_copyfunc_type(copyfunc), ossl_check_CMS_RecipientEncryptedKey_freefunc_type(freefunc)))
#define sk_CMS_RecipientEncryptedKey_set_cmp_func(sk, cmp) ((sk_CMS_RecipientEncryptedKey_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(CMS_RecipientInfo, CMS_RecipientInfo, CMS_RecipientInfo)
#define sk_CMS_RecipientInfo_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_value(sk, idx) ((CMS_RecipientInfo *)OPENSSL_sk_value(ossl_check_const_CMS_RecipientInfo_sk_type(sk), (idx)))
#define sk_CMS_RecipientInfo_new(cmp) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_new(ossl_check_CMS_RecipientInfo_compfunc_type(cmp)))
#define sk_CMS_RecipientInfo_new_null() ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_new_null())
#define sk_CMS_RecipientInfo_new_reserve(cmp, n) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_new_reserve(ossl_check_CMS_RecipientInfo_compfunc_type(cmp), (n)))
#define sk_CMS_RecipientInfo_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_RecipientInfo_sk_type(sk), (n))
#define sk_CMS_RecipientInfo_free(sk) OPENSSL_sk_free(ossl_check_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_delete(sk, i) ((CMS_RecipientInfo *)OPENSSL_sk_delete(ossl_check_CMS_RecipientInfo_sk_type(sk), (i)))
#define sk_CMS_RecipientInfo_delete_ptr(sk, ptr) ((CMS_RecipientInfo *)OPENSSL_sk_delete_ptr(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr)))
#define sk_CMS_RecipientInfo_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_pop(sk) ((CMS_RecipientInfo *)OPENSSL_sk_pop(ossl_check_CMS_RecipientInfo_sk_type(sk)))
#define sk_CMS_RecipientInfo_shift(sk) ((CMS_RecipientInfo *)OPENSSL_sk_shift(ossl_check_CMS_RecipientInfo_sk_type(sk)))
#define sk_CMS_RecipientInfo_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_RecipientInfo_sk_type(sk),ossl_check_CMS_RecipientInfo_freefunc_type(freefunc))
#define sk_CMS_RecipientInfo_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr), (idx))
#define sk_CMS_RecipientInfo_set(sk, idx, ptr) ((CMS_RecipientInfo *)OPENSSL_sk_set(ossl_check_CMS_RecipientInfo_sk_type(sk), (idx), ossl_check_CMS_RecipientInfo_type(ptr)))
#define sk_CMS_RecipientInfo_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr), pnum)
#define sk_CMS_RecipientInfo_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_dup(sk) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_dup(ossl_check_const_CMS_RecipientInfo_sk_type(sk)))
#define sk_CMS_RecipientInfo_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_copyfunc_type(copyfunc), ossl_check_CMS_RecipientInfo_freefunc_type(freefunc)))
#define sk_CMS_RecipientInfo_set_cmp_func(sk, cmp) ((sk_CMS_RecipientInfo_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(CMS_RevocationInfoChoice, CMS_RevocationInfoChoice, CMS_RevocationInfoChoice)
#define sk_CMS_RevocationInfoChoice_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_value(sk, idx) ((CMS_RevocationInfoChoice *)OPENSSL_sk_value(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk), (idx)))
#define sk_CMS_RevocationInfoChoice_new(cmp) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_new(ossl_check_CMS_RevocationInfoChoice_compfunc_type(cmp)))
#define sk_CMS_RevocationInfoChoice_new_null() ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_new_null())
#define sk_CMS_RevocationInfoChoice_new_reserve(cmp, n) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_new_reserve(ossl_check_CMS_RevocationInfoChoice_compfunc_type(cmp), (n)))
#define sk_CMS_RevocationInfoChoice_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), (n))
#define sk_CMS_RevocationInfoChoice_free(sk) OPENSSL_sk_free(ossl_check_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_delete(sk, i) ((CMS_RevocationInfoChoice *)OPENSSL_sk_delete(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), (i)))
#define sk_CMS_RevocationInfoChoice_delete_ptr(sk, ptr) ((CMS_RevocationInfoChoice *)OPENSSL_sk_delete_ptr(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr)))
#define sk_CMS_RevocationInfoChoice_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_pop(sk) ((CMS_RevocationInfoChoice *)OPENSSL_sk_pop(ossl_check_CMS_RevocationInfoChoice_sk_type(sk)))
#define sk_CMS_RevocationInfoChoice_shift(sk) ((CMS_RevocationInfoChoice *)OPENSSL_sk_shift(ossl_check_CMS_RevocationInfoChoice_sk_type(sk)))
#define sk_CMS_RevocationInfoChoice_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_RevocationInfoChoice_sk_type(sk),ossl_check_CMS_RevocationInfoChoice_freefunc_type(freefunc))
#define sk_CMS_RevocationInfoChoice_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr), (idx))
#define sk_CMS_RevocationInfoChoice_set(sk, idx, ptr) ((CMS_RevocationInfoChoice *)OPENSSL_sk_set(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), (idx), ossl_check_CMS_RevocationInfoChoice_type(ptr)))
#define sk_CMS_RevocationInfoChoice_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr), pnum)
#define sk_CMS_RevocationInfoChoice_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_dup(sk) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_dup(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk)))
#define sk_CMS_RevocationInfoChoice_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_copyfunc_type(copyfunc), ossl_check_CMS_RevocationInfoChoice_freefunc_type(freefunc)))
#define sk_CMS_RevocationInfoChoice_set_cmp_func(sk, cmp) ((sk_CMS_RevocationInfoChoice_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS(CMS_ContentInfo)
DECLARE_ASN1_FUNCTIONS(CMS_ReceiptRequest)
DECLARE_ASN1_PRINT_FUNCTION(CMS_ContentInfo)

CMS_ContentInfo *CMS_ContentInfo_new_ex(OSSL_LIB_CTX *libctx, const char *propq);

# define CMS_SIGNERINFO_ISSUER_SERIAL    0
# define CMS_SIGNERINFO_KEYIDENTIFIER    1

# define CMS_RECIPINFO_NONE              -1
# define CMS_RECIPINFO_TRANS             0
# define CMS_RECIPINFO_AGREE             1
# define CMS_RECIPINFO_KEK               2
# define CMS_RECIPINFO_PASS              3
# define CMS_RECIPINFO_OTHER             4

/* S/MIME related flags */

# define CMS_TEXT                        0x1
# define CMS_NOCERTS                     0x2
# define CMS_NO_CONTENT_VERIFY           0x4
# define CMS_NO_ATTR_VERIFY              0x8
# define CMS_NOSIGS                      \
                        (CMS_NO_CONTENT_VERIFY|CMS_NO_ATTR_VERIFY)
# define CMS_NOINTERN                    0x10
# define CMS_NO_SIGNER_CERT_VERIFY       0x20
# define CMS_NOVERIFY                    0x20
# define CMS_DETACHED                    0x40
# define CMS_BINARY                      0x80
# define CMS_NOATTR                      0x100
# define CMS_NOSMIMECAP                  0x200
# define CMS_NOOLDMIMETYPE               0x400
# define CMS_CRLFEOL                     0x800
# define CMS_STREAM                      0x1000
# define CMS_NOCRL                       0x2000
# define CMS_PARTIAL                     0x4000
# define CMS_REUSE_DIGEST                0x8000
# define CMS_USE_KEYID                   0x10000
# define CMS_DEBUG_DECRYPT               0x20000
# define CMS_KEY_PARAM                   0x40000
# define CMS_ASCIICRLF                   0x80000
# define CMS_CADES                       0x100000
# define CMS_USE_ORIGINATOR_KEYID        0x200000

const ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms);

BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont);
int CMS_dataFinal(CMS_ContentInfo *cms, BIO *bio);

ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms);
int CMS_is_detached(CMS_ContentInfo *cms);
int CMS_set_detached(CMS_ContentInfo *cms, int detached);

# ifdef OPENSSL_PEM_H
DECLARE_PEM_rw(CMS, CMS_ContentInfo)
# endif
int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms);
CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms);
int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms);

BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms);
int i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags);
int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
                             int flags);
CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont);
CMS_ContentInfo *SMIME_read_CMS_ex(BIO *bio, int flags, BIO **bcont, CMS_ContentInfo **ci);
int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags);

int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,
              unsigned int flags);

CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
                          STACK_OF(X509) *certs, BIO *data,
                          unsigned int flags);
CMS_ContentInfo *CMS_sign_ex(X509 *signcert, EVP_PKEY *pkey,
                             STACK_OF(X509) *certs, BIO *data,
                             unsigned int flags, OSSL_LIB_CTX *ctx,
                             const char *propq);

CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
                                  X509 *signcert, EVP_PKEY *pkey,
                                  STACK_OF(X509) *certs, unsigned int flags);

int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags);
CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags);
CMS_ContentInfo *CMS_data_create_ex(BIO *in, unsigned int flags,
                                    OSSL_LIB_CTX *ctx, const char *propq);

int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                      unsigned int flags);
CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
                                   unsigned int flags);
CMS_ContentInfo *CMS_digest_create_ex(BIO *in, const EVP_MD *md,
                                      unsigned int flags, OSSL_LIB_CTX *ctx,
                                      const char *propq);

int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
                              const unsigned char *key, size_t keylen,
                              BIO *dcont, BIO *out, unsigned int flags);

CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
                                           const unsigned char *key,
                                           size_t keylen, unsigned int flags);
CMS_ContentInfo *CMS_EncryptedData_encrypt_ex(BIO *in, const EVP_CIPHER *cipher,
                                              const unsigned char *key,
                                              size_t keylen, unsigned int flags,
                                              OSSL_LIB_CTX *ctx,
                                              const char *propq);

int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
                               const unsigned char *key, size_t keylen);

int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
               X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags);

int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
                       STACK_OF(X509) *certs,
                       X509_STORE *store, unsigned int flags);

STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms);

CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in,
                             const EVP_CIPHER *cipher, unsigned int flags);
CMS_ContentInfo *CMS_encrypt_ex(STACK_OF(X509) *certs, BIO *in,
                                const EVP_CIPHER *cipher, unsigned int flags,
                                OSSL_LIB_CTX *ctx, const char *propq);

int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,
                BIO *dcont, BIO *out, unsigned int flags);

int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert);
int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo *cms, EVP_PKEY *pk,
                                   X509 *cert, X509 *peer);
int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
                         unsigned char *key, size_t keylen,
                         const unsigned char *id, size_t idlen);
int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
                              unsigned char *pass, ossl_ssize_t passlen);

STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms);
int CMS_RecipientInfo_type(CMS_RecipientInfo *ri);
EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);
CMS_ContentInfo *CMS_AuthEnvelopedData_create(const EVP_CIPHER *cipher);
CMS_ContentInfo *
CMS_AuthEnvelopedData_create_ex(const EVP_CIPHER *cipher, OSSL_LIB_CTX *ctx,
                                const char *propq);
CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher);
CMS_ContentInfo *CMS_EnvelopedData_create_ex(const EVP_CIPHER *cipher,
                                             OSSL_LIB_CTX *ctx,
                                             const char *propq);

CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
                                           X509 *recip, unsigned int flags);
CMS_RecipientInfo *CMS_add1_recipient(CMS_ContentInfo *cms, X509 *recip,
     EVP_PKEY *originatorPrivKey, X509 * originator, unsigned int flags);
int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);
int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);
int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
                                     EVP_PKEY **pk, X509 **recip,
                                     X509_ALGOR **palg);
int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
                                          ASN1_OCTET_STRING **keyid,
                                          X509_NAME **issuer,
                                          ASN1_INTEGER **sno);

CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
                                          unsigned char *key, size_t keylen,
                                          unsigned char *id, size_t idlen,
                                          ASN1_GENERALIZEDTIME *date,
                                          ASN1_OBJECT *otherTypeId,
                                          ASN1_TYPE *otherType);

int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
                                    X509_ALGOR **palg,
                                    ASN1_OCTET_STRING **pid,
                                    ASN1_GENERALIZEDTIME **pdate,
                                    ASN1_OBJECT **potherid,
                                    ASN1_TYPE **pothertype);

int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
                               unsigned char *key, size_t keylen);

int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
                                   const unsigned char *id, size_t idlen);

int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
                                    unsigned char *pass,
                                    ossl_ssize_t passlen);

CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,
                                               int iter, int wrap_nid,
                                               int pbe_nid,
                                               unsigned char *pass,
                                               ossl_ssize_t passlen,
                                               const EVP_CIPHER *kekciph);

int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
int CMS_RecipientInfo_encrypt(const CMS_ContentInfo *cms, CMS_RecipientInfo *ri);

int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                   unsigned int flags);
CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags);

int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid);
const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms);

CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms);
int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert);
int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert);
STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms);

CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms);
int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl);
int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);
STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms);

int CMS_SignedData_init(CMS_ContentInfo *cms);
CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
                                X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
                                unsigned int flags);
EVP_PKEY_CTX *CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si);
EVP_MD_CTX *CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si);
STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms);

void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer);
int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
                                  ASN1_OCTET_STRING **keyid,
                                  X509_NAME **issuer, ASN1_INTEGER **sno);
int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert);
int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                           unsigned int flags);
void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
                              X509 **signer, X509_ALGOR **pdig,
                              X509_ALGOR **psig);
ASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si);
int CMS_SignerInfo_sign(CMS_SignerInfo *si);
int CMS_SignerInfo_verify(CMS_SignerInfo *si);
int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain);

int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs);
int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
                            int algnid, int keysize);
int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap);

int CMS_signed_get_attr_count(const CMS_SignerInfo *si);
int CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                               int lastpos);
int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
                               int lastpos);
X509_ATTRIBUTE *CMS_signed_get_attr(const CMS_SignerInfo *si, int loc);
X509_ATTRIBUTE *CMS_signed_delete_attr(CMS_SignerInfo *si, int loc);
int CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                const ASN1_OBJECT *obj, int type,
                                const void *bytes, int len);
int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
                                int nid, int type,
                                const void *bytes, int len);
int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
                                const char *attrname, int type,
                                const void *bytes, int len);
void *CMS_signed_get0_data_by_OBJ(const CMS_SignerInfo *si,
                                  const ASN1_OBJECT *oid,
                                  int lastpos, int type);

int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si);
int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                 int lastpos);
int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
                                 const ASN1_OBJECT *obj, int lastpos);
X509_ATTRIBUTE *CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc);
X509_ATTRIBUTE *CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc);
int CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                  const ASN1_OBJECT *obj, int type,
                                  const void *bytes, int len);
int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
                                  int nid, int type,
                                  const void *bytes, int len);
int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
                                  const char *attrname, int type,
                                  const void *bytes, int len);
void *CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
                                    int lastpos, int type);

int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);
CMS_ReceiptRequest *CMS_ReceiptRequest_create0(
    unsigned char *id, int idlen, int allorfirst,
    STACK_OF(GENERAL_NAMES) *receiptList,
    STACK_OF(GENERAL_NAMES) *receiptsTo);
CMS_ReceiptRequest *CMS_ReceiptRequest_create0_ex(
    unsigned char *id, int idlen, int allorfirst,
    STACK_OF(GENERAL_NAMES) *receiptList,
    STACK_OF(GENERAL_NAMES) *receiptsTo,
    OSSL_LIB_CTX *ctx);

int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);
void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
                                    ASN1_STRING **pcid,
                                    int *pallorfirst,
                                    STACK_OF(GENERAL_NAMES) **plist,
                                    STACK_OF(GENERAL_NAMES) **prto);
int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
                                    X509_ALGOR **palg,
                                    ASN1_OCTET_STRING **pukm);
STACK_OF(CMS_RecipientEncryptedKey)
*CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri);

int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
                                        X509_ALGOR **pubalg,
                                        ASN1_BIT_STRING **pubkey,
                                        ASN1_OCTET_STRING **keyid,
                                        X509_NAME **issuer,
                                        ASN1_INTEGER **sno);

int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert);

int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
                                      ASN1_OCTET_STRING **keyid,
                                      ASN1_GENERALIZEDTIME **tm,
                                      CMS_OtherKeyAttribute **other,
                                      X509_NAME **issuer, ASN1_INTEGER **sno);
int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
                                       X509 *cert);
int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk);
int CMS_RecipientInfo_kari_set0_pkey_and_peer(CMS_RecipientInfo *ri, EVP_PKEY *pk, X509 *peer);
EVP_CIPHER_CTX *CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri);
int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
                                   CMS_RecipientInfo *ri,
                                   CMS_RecipientEncryptedKey *rek);

int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
                          ASN1_OCTET_STRING *ukm, int keylen);

/* Backward compatibility for spelling errors. */
# define CMS_R_UNKNOWN_DIGEST_ALGORITM CMS_R_UNKNOWN_DIGEST_ALGORITHM
# define CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE \
    CMS_R_UNSUPPORTED_RECIPIENTINFO_TYPE

#  ifdef  __cplusplus
}
#  endif
# endif
#endif
                                                                                                                                                                                                                               node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/conf.h                           0000664 0000000 0000000 00000024365 14746647661 0025646 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/conf.h.in
 *
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef  OPENSSL_CONF_H
# define OPENSSL_CONF_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_CONF_H
# endif

# include <openssl/bio.h>
# include <openssl/lhash.h>
# include <openssl/safestack.h>
# include <openssl/e_os2.h>
# include <openssl/types.h>
# include <openssl/conferr.h>

#ifdef  __cplusplus
extern "C" {
#endif

typedef struct {
    char *section;
    char *name;
    char *value;
} CONF_VALUE;

SKM_DEFINE_STACK_OF_INTERNAL(CONF_VALUE, CONF_VALUE, CONF_VALUE)
#define sk_CONF_VALUE_num(sk) OPENSSL_sk_num(ossl_check_const_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_value(sk, idx) ((CONF_VALUE *)OPENSSL_sk_value(ossl_check_const_CONF_VALUE_sk_type(sk), (idx)))
#define sk_CONF_VALUE_new(cmp) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_new(ossl_check_CONF_VALUE_compfunc_type(cmp)))
#define sk_CONF_VALUE_new_null() ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_new_null())
#define sk_CONF_VALUE_new_reserve(cmp, n) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_new_reserve(ossl_check_CONF_VALUE_compfunc_type(cmp), (n)))
#define sk_CONF_VALUE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CONF_VALUE_sk_type(sk), (n))
#define sk_CONF_VALUE_free(sk) OPENSSL_sk_free(ossl_check_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_zero(sk) OPENSSL_sk_zero(ossl_check_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_delete(sk, i) ((CONF_VALUE *)OPENSSL_sk_delete(ossl_check_CONF_VALUE_sk_type(sk), (i)))
#define sk_CONF_VALUE_delete_ptr(sk, ptr) ((CONF_VALUE *)OPENSSL_sk_delete_ptr(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr)))
#define sk_CONF_VALUE_push(sk, ptr) OPENSSL_sk_push(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_pop(sk) ((CONF_VALUE *)OPENSSL_sk_pop(ossl_check_CONF_VALUE_sk_type(sk)))
#define sk_CONF_VALUE_shift(sk) ((CONF_VALUE *)OPENSSL_sk_shift(ossl_check_CONF_VALUE_sk_type(sk)))
#define sk_CONF_VALUE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CONF_VALUE_sk_type(sk),ossl_check_CONF_VALUE_freefunc_type(freefunc))
#define sk_CONF_VALUE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr), (idx))
#define sk_CONF_VALUE_set(sk, idx, ptr) ((CONF_VALUE *)OPENSSL_sk_set(ossl_check_CONF_VALUE_sk_type(sk), (idx), ossl_check_CONF_VALUE_type(ptr)))
#define sk_CONF_VALUE_find(sk, ptr) OPENSSL_sk_find(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr), pnum)
#define sk_CONF_VALUE_sort(sk) OPENSSL_sk_sort(ossl_check_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_dup(sk) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_dup(ossl_check_const_CONF_VALUE_sk_type(sk)))
#define sk_CONF_VALUE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_deep_copy(ossl_check_const_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_copyfunc_type(copyfunc), ossl_check_CONF_VALUE_freefunc_type(freefunc)))
#define sk_CONF_VALUE_set_cmp_func(sk, cmp) ((sk_CONF_VALUE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_compfunc_type(cmp)))
DEFINE_LHASH_OF_INTERNAL(CONF_VALUE);
#define lh_CONF_VALUE_new(hfn, cmp) ((LHASH_OF(CONF_VALUE) *)OPENSSL_LH_new(ossl_check_CONF_VALUE_lh_hashfunc_type(hfn), ossl_check_CONF_VALUE_lh_compfunc_type(cmp)))
#define lh_CONF_VALUE_free(lh) OPENSSL_LH_free(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_flush(lh) OPENSSL_LH_flush(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_insert(lh, ptr) ((CONF_VALUE *)OPENSSL_LH_insert(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_CONF_VALUE_lh_plain_type(ptr)))
#define lh_CONF_VALUE_delete(lh, ptr) ((CONF_VALUE *)OPENSSL_LH_delete(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_const_CONF_VALUE_lh_plain_type(ptr)))
#define lh_CONF_VALUE_retrieve(lh, ptr) ((CONF_VALUE *)OPENSSL_LH_retrieve(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_const_CONF_VALUE_lh_plain_type(ptr)))
#define lh_CONF_VALUE_error(lh) OPENSSL_LH_error(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_num_items(lh) OPENSSL_LH_num_items(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_node_stats_bio(lh, out) OPENSSL_LH_node_stats_bio(ossl_check_const_CONF_VALUE_lh_type(lh), out)
#define lh_CONF_VALUE_node_usage_stats_bio(lh, out) OPENSSL_LH_node_usage_stats_bio(ossl_check_const_CONF_VALUE_lh_type(lh), out)
#define lh_CONF_VALUE_stats_bio(lh, out) OPENSSL_LH_stats_bio(ossl_check_const_CONF_VALUE_lh_type(lh), out)
#define lh_CONF_VALUE_get_down_load(lh) OPENSSL_LH_get_down_load(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_set_down_load(lh, dl) OPENSSL_LH_set_down_load(ossl_check_CONF_VALUE_lh_type(lh), dl)
#define lh_CONF_VALUE_doall(lh, dfn) OPENSSL_LH_doall(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_CONF_VALUE_lh_doallfunc_type(dfn))


struct conf_st;
struct conf_method_st;
typedef struct conf_method_st CONF_METHOD;

# ifndef OPENSSL_NO_DEPRECATED_3_0
#  include <openssl/conftypes.h>
# endif

/* Module definitions */
typedef struct conf_imodule_st CONF_IMODULE;
typedef struct conf_module_st CONF_MODULE;

STACK_OF(CONF_MODULE);
STACK_OF(CONF_IMODULE);

/* DSO module function typedefs */
typedef int conf_init_func (CONF_IMODULE *md, const CONF *cnf);
typedef void conf_finish_func (CONF_IMODULE *md);

# define CONF_MFLAGS_IGNORE_ERRORS       0x1
# define CONF_MFLAGS_IGNORE_RETURN_CODES 0x2
# define CONF_MFLAGS_SILENT              0x4
# define CONF_MFLAGS_NO_DSO              0x8
# define CONF_MFLAGS_IGNORE_MISSING_FILE 0x10
# define CONF_MFLAGS_DEFAULT_SECTION     0x20

int CONF_set_default_method(CONF_METHOD *meth);
void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash);
LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
                                long *eline);
# ifndef OPENSSL_NO_STDIO
LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
                                   long *eline);
# endif
LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
                                    long *eline);
STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
                                       const char *section);
char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
                      const char *name);
long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
                     const char *name);
void CONF_free(LHASH_OF(CONF_VALUE) *conf);
#ifndef OPENSSL_NO_STDIO
int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);
#endif
int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);
#ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void OPENSSL_config(const char *config_name);
#endif

#ifndef OPENSSL_NO_DEPRECATED_1_1_0
# define OPENSSL_no_config() \
    OPENSSL_init_crypto(OPENSSL_INIT_NO_LOAD_CONFIG, NULL)
#endif

/*
 * New conf code.  The semantics are different from the functions above. If
 * that wasn't the case, the above functions would have been replaced
 */

CONF *NCONF_new_ex(OSSL_LIB_CTX *libctx, CONF_METHOD *meth);
OSSL_LIB_CTX *NCONF_get0_libctx(const CONF *conf);
CONF *NCONF_new(CONF_METHOD *meth);
CONF_METHOD *NCONF_default(void);
#ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 CONF_METHOD *NCONF_WIN32(void);
#endif
void NCONF_free(CONF *conf);
void NCONF_free_data(CONF *conf);

int NCONF_load(CONF *conf, const char *file, long *eline);
# ifndef OPENSSL_NO_STDIO
int NCONF_load_fp(CONF *conf, FILE *fp, long *eline);
# endif
int NCONF_load_bio(CONF *conf, BIO *bp, long *eline);
STACK_OF(OPENSSL_CSTRING) *NCONF_get_section_names(const CONF *conf);
STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf,
                                        const char *section);
char *NCONF_get_string(const CONF *conf, const char *group, const char *name);
int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
                       long *result);
#ifndef OPENSSL_NO_STDIO
int NCONF_dump_fp(const CONF *conf, FILE *out);
#endif
int NCONF_dump_bio(const CONF *conf, BIO *out);

#define NCONF_get_number(c,g,n,r) NCONF_get_number_e(c,g,n,r)

/* Module functions */

int CONF_modules_load(const CONF *cnf, const char *appname,
                      unsigned long flags);
int CONF_modules_load_file_ex(OSSL_LIB_CTX *libctx, const char *filename,
                              const char *appname, unsigned long flags);
int CONF_modules_load_file(const char *filename, const char *appname,
                           unsigned long flags);
void CONF_modules_unload(int all);
void CONF_modules_finish(void);
#ifndef OPENSSL_NO_DEPRECATED_1_1_0
# define CONF_modules_free() while(0) continue
#endif
int CONF_module_add(const char *name, conf_init_func *ifunc,
                    conf_finish_func *ffunc);

const char *CONF_imodule_get_name(const CONF_IMODULE *md);
const char *CONF_imodule_get_value(const CONF_IMODULE *md);
void *CONF_imodule_get_usr_data(const CONF_IMODULE *md);
void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data);
CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md);
unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md);
void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags);
void *CONF_module_get_usr_data(CONF_MODULE *pmod);
void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);

char *CONF_get1_default_config_file(void);

int CONF_parse_list(const char *list, int sep, int nospc,
                    int (*list_cb) (const char *elem, int len, void *usr),
                    void *arg);

void OPENSSL_load_builtin_modules(void);


# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                                                                                                                                                           node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/configuration.h                  0000664 0000000 0000000 00000006030 14746647661 0027555 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/configuration.h.in
 *
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_CONFIGURATION_H
# define OPENSSL_CONFIGURATION_H
# pragma once

# ifdef  __cplusplus
extern "C" {
# endif

# ifdef OPENSSL_ALGORITHM_DEFINES
#  error OPENSSL_ALGORITHM_DEFINES no longer supported
# endif

/*
 * OpenSSL was configured with the following options:
 */

# ifndef OPENSSL_SYS_WIN32
#  define OPENSSL_SYS_WIN32 1
# endif
# define OPENSSL_CONFIGURED_API 30000
# ifndef OPENSSL_RAND_SEED_OS
#  define OPENSSL_RAND_SEED_OS
# endif
# ifndef OPENSSL_THREADS
#  define OPENSSL_THREADS
# endif
# ifndef OPENSSL_NO_AFALGENG
#  define OPENSSL_NO_AFALGENG
# endif
# ifndef OPENSSL_NO_ASAN
#  define OPENSSL_NO_ASAN
# endif
# ifndef OPENSSL_NO_COMP
#  define OPENSSL_NO_COMP
# endif
# ifndef OPENSSL_NO_CRYPTO_MDEBUG
#  define OPENSSL_NO_CRYPTO_MDEBUG
# endif
# ifndef OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE
#  define OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE
# endif
# ifndef OPENSSL_NO_DEVCRYPTOENG
#  define OPENSSL_NO_DEVCRYPTOENG
# endif
# ifndef OPENSSL_NO_EC_NISTP_64_GCC_128
#  define OPENSSL_NO_EC_NISTP_64_GCC_128
# endif
# ifndef OPENSSL_NO_EGD
#  define OPENSSL_NO_EGD
# endif
# ifndef OPENSSL_NO_EXTERNAL_TESTS
#  define OPENSSL_NO_EXTERNAL_TESTS
# endif
# ifndef OPENSSL_NO_FUZZ_AFL
#  define OPENSSL_NO_FUZZ_AFL
# endif
# ifndef OPENSSL_NO_FUZZ_LIBFUZZER
#  define OPENSSL_NO_FUZZ_LIBFUZZER
# endif
# ifndef OPENSSL_NO_KTLS
#  define OPENSSL_NO_KTLS
# endif
# ifndef OPENSSL_NO_LOADERENG
#  define OPENSSL_NO_LOADERENG
# endif
# ifndef OPENSSL_NO_MD2
#  define OPENSSL_NO_MD2
# endif
# ifndef OPENSSL_NO_MSAN
#  define OPENSSL_NO_MSAN
# endif
# ifndef OPENSSL_NO_RC5
#  define OPENSSL_NO_RC5
# endif
# ifndef OPENSSL_NO_SCTP
#  define OPENSSL_NO_SCTP
# endif
# ifndef OPENSSL_NO_SSL3
#  define OPENSSL_NO_SSL3
# endif
# ifndef OPENSSL_NO_SSL3_METHOD
#  define OPENSSL_NO_SSL3_METHOD
# endif
# ifndef OPENSSL_NO_TRACE
#  define OPENSSL_NO_TRACE
# endif
# ifndef OPENSSL_NO_UBSAN
#  define OPENSSL_NO_UBSAN
# endif
# ifndef OPENSSL_NO_UNIT_TEST
#  define OPENSSL_NO_UNIT_TEST
# endif
# ifndef OPENSSL_NO_UPLINK
#  define OPENSSL_NO_UPLINK
# endif
# ifndef OPENSSL_NO_WEAK_SSL_CIPHERS
#  define OPENSSL_NO_WEAK_SSL_CIPHERS
# endif
# ifndef OPENSSL_NO_DYNAMIC_ENGINE
#  define OPENSSL_NO_DYNAMIC_ENGINE
# endif


/* Generate 80386 code? */
# undef I386_ONLY

/*
 * The following are cipher-specific, but are part of the public API.
 */
# if !defined(OPENSSL_SYS_UEFI)
#  define BN_LLONG
/* Only one for the following should be defined */
#  undef SIXTY_FOUR_BIT_LONG
#  undef SIXTY_FOUR_BIT
#  define THIRTY_TWO_BIT
# endif

# define RC4_INT unsigned int

# ifdef  __cplusplus
}
# endif

#endif                          /* OPENSSL_CONFIGURATION_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/crmf.h                           0000664 0000000 0000000 00000034464 14746647661 0025651 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*-
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/crmf.h.in
 *
 * Copyright 2007-2021 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright Nokia 2007-2019
 * Copyright Siemens AG 2015-2019
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 *
 * CRMF (RFC 4211) implementation by M. Peylo, M. Viljanen, and D. von Oheimb.
 */



#ifndef OPENSSL_CRMF_H
# define OPENSSL_CRMF_H

# include <openssl/opensslconf.h>

# ifndef OPENSSL_NO_CRMF
#  include <openssl/opensslv.h>
#  include <openssl/safestack.h>
#  include <openssl/crmferr.h>
#  include <openssl/x509v3.h> /* for GENERAL_NAME etc. */

/* explicit #includes not strictly needed since implied by the above: */
#  include <openssl/types.h>
#  include <openssl/x509.h>

#  ifdef __cplusplus
extern "C" {
#  endif

#  define OSSL_CRMF_POPOPRIVKEY_THISMESSAGE          0
#  define OSSL_CRMF_POPOPRIVKEY_SUBSEQUENTMESSAGE    1
#  define OSSL_CRMF_POPOPRIVKEY_DHMAC                2
#  define OSSL_CRMF_POPOPRIVKEY_AGREEMAC             3
#  define OSSL_CRMF_POPOPRIVKEY_ENCRYPTEDKEY         4

#  define OSSL_CRMF_SUBSEQUENTMESSAGE_ENCRCERT       0
#  define OSSL_CRMF_SUBSEQUENTMESSAGE_CHALLENGERESP  1

typedef struct ossl_crmf_encryptedvalue_st OSSL_CRMF_ENCRYPTEDVALUE;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_ENCRYPTEDVALUE)
typedef struct ossl_crmf_msg_st OSSL_CRMF_MSG;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_MSG)
DECLARE_ASN1_DUP_FUNCTION(OSSL_CRMF_MSG)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CRMF_MSG, OSSL_CRMF_MSG, OSSL_CRMF_MSG)
#define sk_OSSL_CRMF_MSG_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_value(sk, idx) ((OSSL_CRMF_MSG *)OPENSSL_sk_value(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk), (idx)))
#define sk_OSSL_CRMF_MSG_new(cmp) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_new(ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp)))
#define sk_OSSL_CRMF_MSG_new_null() ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_new_null())
#define sk_OSSL_CRMF_MSG_new_reserve(cmp, n) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp), (n)))
#define sk_OSSL_CRMF_MSG_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CRMF_MSG_sk_type(sk), (n))
#define sk_OSSL_CRMF_MSG_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_delete(sk, i) ((OSSL_CRMF_MSG *)OPENSSL_sk_delete(ossl_check_OSSL_CRMF_MSG_sk_type(sk), (i)))
#define sk_OSSL_CRMF_MSG_delete_ptr(sk, ptr) ((OSSL_CRMF_MSG *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr)))
#define sk_OSSL_CRMF_MSG_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_pop(sk) ((OSSL_CRMF_MSG *)OPENSSL_sk_pop(ossl_check_OSSL_CRMF_MSG_sk_type(sk)))
#define sk_OSSL_CRMF_MSG_shift(sk) ((OSSL_CRMF_MSG *)OPENSSL_sk_shift(ossl_check_OSSL_CRMF_MSG_sk_type(sk)))
#define sk_OSSL_CRMF_MSG_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CRMF_MSG_sk_type(sk),ossl_check_OSSL_CRMF_MSG_freefunc_type(freefunc))
#define sk_OSSL_CRMF_MSG_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr), (idx))
#define sk_OSSL_CRMF_MSG_set(sk, idx, ptr) ((OSSL_CRMF_MSG *)OPENSSL_sk_set(ossl_check_OSSL_CRMF_MSG_sk_type(sk), (idx), ossl_check_OSSL_CRMF_MSG_type(ptr)))
#define sk_OSSL_CRMF_MSG_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr), pnum)
#define sk_OSSL_CRMF_MSG_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_dup(sk) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk)))
#define sk_OSSL_CRMF_MSG_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_copyfunc_type(copyfunc), ossl_check_OSSL_CRMF_MSG_freefunc_type(freefunc)))
#define sk_OSSL_CRMF_MSG_set_cmp_func(sk, cmp) ((sk_OSSL_CRMF_MSG_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp)))

typedef struct ossl_crmf_attributetypeandvalue_st OSSL_CRMF_ATTRIBUTETYPEANDVALUE;
typedef struct ossl_crmf_pbmparameter_st OSSL_CRMF_PBMPARAMETER;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_PBMPARAMETER)
typedef struct ossl_crmf_poposigningkey_st OSSL_CRMF_POPOSIGNINGKEY;
typedef struct ossl_crmf_certrequest_st OSSL_CRMF_CERTREQUEST;
typedef struct ossl_crmf_certid_st OSSL_CRMF_CERTID;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_CERTID)
DECLARE_ASN1_DUP_FUNCTION(OSSL_CRMF_CERTID)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CRMF_CERTID, OSSL_CRMF_CERTID, OSSL_CRMF_CERTID)
#define sk_OSSL_CRMF_CERTID_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_value(sk, idx) ((OSSL_CRMF_CERTID *)OPENSSL_sk_value(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk), (idx)))
#define sk_OSSL_CRMF_CERTID_new(cmp) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_new(ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp)))
#define sk_OSSL_CRMF_CERTID_new_null() ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_new_null())
#define sk_OSSL_CRMF_CERTID_new_reserve(cmp, n) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp), (n)))
#define sk_OSSL_CRMF_CERTID_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (n))
#define sk_OSSL_CRMF_CERTID_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_delete(sk, i) ((OSSL_CRMF_CERTID *)OPENSSL_sk_delete(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (i)))
#define sk_OSSL_CRMF_CERTID_delete_ptr(sk, ptr) ((OSSL_CRMF_CERTID *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr)))
#define sk_OSSL_CRMF_CERTID_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_pop(sk) ((OSSL_CRMF_CERTID *)OPENSSL_sk_pop(ossl_check_OSSL_CRMF_CERTID_sk_type(sk)))
#define sk_OSSL_CRMF_CERTID_shift(sk) ((OSSL_CRMF_CERTID *)OPENSSL_sk_shift(ossl_check_OSSL_CRMF_CERTID_sk_type(sk)))
#define sk_OSSL_CRMF_CERTID_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CRMF_CERTID_sk_type(sk),ossl_check_OSSL_CRMF_CERTID_freefunc_type(freefunc))
#define sk_OSSL_CRMF_CERTID_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr), (idx))
#define sk_OSSL_CRMF_CERTID_set(sk, idx, ptr) ((OSSL_CRMF_CERTID *)OPENSSL_sk_set(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (idx), ossl_check_OSSL_CRMF_CERTID_type(ptr)))
#define sk_OSSL_CRMF_CERTID_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr), pnum)
#define sk_OSSL_CRMF_CERTID_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_dup(sk) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk)))
#define sk_OSSL_CRMF_CERTID_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_copyfunc_type(copyfunc), ossl_check_OSSL_CRMF_CERTID_freefunc_type(freefunc)))
#define sk_OSSL_CRMF_CERTID_set_cmp_func(sk, cmp) ((sk_OSSL_CRMF_CERTID_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp)))


typedef struct ossl_crmf_pkipublicationinfo_st OSSL_CRMF_PKIPUBLICATIONINFO;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_PKIPUBLICATIONINFO)
typedef struct ossl_crmf_singlepubinfo_st OSSL_CRMF_SINGLEPUBINFO;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_SINGLEPUBINFO)
typedef struct ossl_crmf_certtemplate_st OSSL_CRMF_CERTTEMPLATE;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_CERTTEMPLATE)
typedef STACK_OF(OSSL_CRMF_MSG) OSSL_CRMF_MSGS;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_MSGS)

typedef struct ossl_crmf_optionalvalidity_st OSSL_CRMF_OPTIONALVALIDITY;

/* crmf_pbm.c */
OSSL_CRMF_PBMPARAMETER *OSSL_CRMF_pbmp_new(OSSL_LIB_CTX *libctx, size_t slen,
                                           int owfnid, size_t itercnt,
                                           int macnid);
int OSSL_CRMF_pbm_new(OSSL_LIB_CTX *libctx, const char *propq,
                      const OSSL_CRMF_PBMPARAMETER *pbmp,
                      const unsigned char *msg, size_t msglen,
                      const unsigned char *sec, size_t seclen,
                      unsigned char **mac, size_t *maclen);

/* crmf_lib.c */
int OSSL_CRMF_MSG_set1_regCtrl_regToken(OSSL_CRMF_MSG *msg,
                                        const ASN1_UTF8STRING *tok);
ASN1_UTF8STRING
*OSSL_CRMF_MSG_get0_regCtrl_regToken(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regCtrl_authenticator(OSSL_CRMF_MSG *msg,
                                             const ASN1_UTF8STRING *auth);
ASN1_UTF8STRING
*OSSL_CRMF_MSG_get0_regCtrl_authenticator(const OSSL_CRMF_MSG *msg);
int
OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo(OSSL_CRMF_PKIPUBLICATIONINFO *pi,
                                                     OSSL_CRMF_SINGLEPUBINFO *spi);
#  define OSSL_CRMF_PUB_METHOD_DONTCARE 0
#  define OSSL_CRMF_PUB_METHOD_X500     1
#  define OSSL_CRMF_PUB_METHOD_WEB      2
#  define OSSL_CRMF_PUB_METHOD_LDAP     3
int OSSL_CRMF_MSG_set0_SinglePubInfo(OSSL_CRMF_SINGLEPUBINFO *spi,
                                     int method, GENERAL_NAME *nm);
#  define OSSL_CRMF_PUB_ACTION_DONTPUBLISH   0
#  define OSSL_CRMF_PUB_ACTION_PLEASEPUBLISH 1
int OSSL_CRMF_MSG_set_PKIPublicationInfo_action(OSSL_CRMF_PKIPUBLICATIONINFO *pi,
                                                int action);
int OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo(OSSL_CRMF_MSG *msg,
                                                  const OSSL_CRMF_PKIPUBLICATIONINFO *pi);
OSSL_CRMF_PKIPUBLICATIONINFO
*OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey(OSSL_CRMF_MSG *msg,
                                               const X509_PUBKEY *pubkey);
X509_PUBKEY
*OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regCtrl_oldCertID(OSSL_CRMF_MSG *msg,
                                         const OSSL_CRMF_CERTID *cid);
OSSL_CRMF_CERTID
*OSSL_CRMF_MSG_get0_regCtrl_oldCertID(const OSSL_CRMF_MSG *msg);
OSSL_CRMF_CERTID *OSSL_CRMF_CERTID_gen(const X509_NAME *issuer,
                                       const ASN1_INTEGER *serial);

int OSSL_CRMF_MSG_set1_regInfo_utf8Pairs(OSSL_CRMF_MSG *msg,
                                         const ASN1_UTF8STRING *utf8pairs);
ASN1_UTF8STRING
*OSSL_CRMF_MSG_get0_regInfo_utf8Pairs(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regInfo_certReq(OSSL_CRMF_MSG *msg,
                                       const OSSL_CRMF_CERTREQUEST *cr);
OSSL_CRMF_CERTREQUEST
*OSSL_CRMF_MSG_get0_regInfo_certReq(const OSSL_CRMF_MSG *msg);

int OSSL_CRMF_MSG_set0_validity(OSSL_CRMF_MSG *crm,
                                ASN1_TIME *notBefore, ASN1_TIME *notAfter);
int OSSL_CRMF_MSG_set_certReqId(OSSL_CRMF_MSG *crm, int rid);
int OSSL_CRMF_MSG_get_certReqId(const OSSL_CRMF_MSG *crm);
int OSSL_CRMF_MSG_set0_extensions(OSSL_CRMF_MSG *crm, X509_EXTENSIONS *exts);

int OSSL_CRMF_MSG_push0_extension(OSSL_CRMF_MSG *crm, X509_EXTENSION *ext);
#  define OSSL_CRMF_POPO_NONE       -1
#  define OSSL_CRMF_POPO_RAVERIFIED 0
#  define OSSL_CRMF_POPO_SIGNATURE  1
#  define OSSL_CRMF_POPO_KEYENC     2
#  define OSSL_CRMF_POPO_KEYAGREE   3
int OSSL_CRMF_MSG_create_popo(int meth, OSSL_CRMF_MSG *crm,
                              EVP_PKEY *pkey, const EVP_MD *digest,
                              OSSL_LIB_CTX *libctx, const char *propq);
int OSSL_CRMF_MSGS_verify_popo(const OSSL_CRMF_MSGS *reqs,
                               int rid, int acceptRAVerified,
                               OSSL_LIB_CTX *libctx, const char *propq);
OSSL_CRMF_CERTTEMPLATE *OSSL_CRMF_MSG_get0_tmpl(const OSSL_CRMF_MSG *crm);
const ASN1_INTEGER
*OSSL_CRMF_CERTTEMPLATE_get0_serialNumber(const OSSL_CRMF_CERTTEMPLATE *tmpl);
const X509_NAME
*OSSL_CRMF_CERTTEMPLATE_get0_subject(const OSSL_CRMF_CERTTEMPLATE *tmpl);
const X509_NAME
*OSSL_CRMF_CERTTEMPLATE_get0_issuer(const OSSL_CRMF_CERTTEMPLATE *tmpl);
X509_EXTENSIONS
*OSSL_CRMF_CERTTEMPLATE_get0_extensions(const OSSL_CRMF_CERTTEMPLATE *tmpl);
const X509_NAME
*OSSL_CRMF_CERTID_get0_issuer(const OSSL_CRMF_CERTID *cid);
const ASN1_INTEGER
*OSSL_CRMF_CERTID_get0_serialNumber(const OSSL_CRMF_CERTID *cid);
int OSSL_CRMF_CERTTEMPLATE_fill(OSSL_CRMF_CERTTEMPLATE *tmpl,
                                EVP_PKEY *pubkey,
                                const X509_NAME *subject,
                                const X509_NAME *issuer,
                                const ASN1_INTEGER *serial);
X509
*OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert(const OSSL_CRMF_ENCRYPTEDVALUE *ecert,
                                       OSSL_LIB_CTX *libctx, const char *propq,
                                       EVP_PKEY *pkey);

#  ifdef __cplusplus
}
#  endif
# endif /* !defined(OPENSSL_NO_CRMF) */
#endif /* !defined(OPENSSL_CRMF_H) */
                                                                                                                                                                                                            node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/crypto.h                         0000664 0000000 0000000 00000056611 14746647661 0026240 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/crypto.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_CRYPTO_H
# define OPENSSL_CRYPTO_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_CRYPTO_H
# endif

# include <stdlib.h>
# include <time.h>

# include <openssl/e_os2.h>

# ifndef OPENSSL_NO_STDIO
#  include <stdio.h>
# endif

# include <openssl/safestack.h>
# include <openssl/opensslv.h>
# include <openssl/types.h>
# include <openssl/opensslconf.h>
# include <openssl/cryptoerr.h>
# include <openssl/core.h>

# ifdef CHARSET_EBCDIC
#  include <openssl/ebcdic.h>
# endif

/*
 * Resolve problems on some operating systems with symbol names that clash
 * one way or another
 */
# include <openssl/symhacks.h>

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  include <openssl/opensslv.h>
# endif

#ifdef  __cplusplus
extern "C" {
#endif

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define SSLeay                  OpenSSL_version_num
#  define SSLeay_version          OpenSSL_version
#  define SSLEAY_VERSION_NUMBER   OPENSSL_VERSION_NUMBER
#  define SSLEAY_VERSION          OPENSSL_VERSION
#  define SSLEAY_CFLAGS           OPENSSL_CFLAGS
#  define SSLEAY_BUILT_ON         OPENSSL_BUILT_ON
#  define SSLEAY_PLATFORM         OPENSSL_PLATFORM
#  define SSLEAY_DIR              OPENSSL_DIR

/*
 * Old type for allocating dynamic locks. No longer used. Use the new thread
 * API instead.
 */
typedef struct {
    int dummy;
} CRYPTO_dynlock;

# endif /* OPENSSL_NO_DEPRECATED_1_1_0 */

typedef void CRYPTO_RWLOCK;

CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void);
__owur int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
__owur int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);

int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);
int CRYPTO_atomic_or(uint64_t *val, uint64_t op, uint64_t *ret,
                     CRYPTO_RWLOCK *lock);
int CRYPTO_atomic_load(uint64_t *val, uint64_t *ret, CRYPTO_RWLOCK *lock);

/* No longer needed, so this is a no-op */
#define OPENSSL_malloc_init() while(0) continue

# define OPENSSL_malloc(num) \
        CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_zalloc(num) \
        CRYPTO_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_realloc(addr, num) \
        CRYPTO_realloc(addr, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_clear_realloc(addr, old_num, num) \
        CRYPTO_clear_realloc(addr, old_num, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_clear_free(addr, num) \
        CRYPTO_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_free(addr) \
        CRYPTO_free(addr, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_memdup(str, s) \
        CRYPTO_memdup((str), s, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_strdup(str) \
        CRYPTO_strdup(str, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_strndup(str, n) \
        CRYPTO_strndup(str, n, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_malloc(num) \
        CRYPTO_secure_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_zalloc(num) \
        CRYPTO_secure_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_free(addr) \
        CRYPTO_secure_free(addr, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_clear_free(addr, num) \
        CRYPTO_secure_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_actual_size(ptr) \
        CRYPTO_secure_actual_size(ptr)

size_t OPENSSL_strlcpy(char *dst, const char *src, size_t siz);
size_t OPENSSL_strlcat(char *dst, const char *src, size_t siz);
size_t OPENSSL_strnlen(const char *str, size_t maxlen);
int OPENSSL_buf2hexstr_ex(char *str, size_t str_n, size_t *strlength,
                          const unsigned char *buf, size_t buflen,
                          const char sep);
char *OPENSSL_buf2hexstr(const unsigned char *buf, long buflen);
int OPENSSL_hexstr2buf_ex(unsigned char *buf, size_t buf_n, size_t *buflen,
                          const char *str, const char sep);
unsigned char *OPENSSL_hexstr2buf(const char *str, long *buflen);
int OPENSSL_hexchar2int(unsigned char c);
int OPENSSL_strcasecmp(const char *s1, const char *s2);
int OPENSSL_strncasecmp(const char *s1, const char *s2, size_t n);

# define OPENSSL_MALLOC_MAX_NELEMS(type)  (((1U<<(sizeof(int)*8-1))-1)/sizeof(type))

/*
 * These functions return the values of OPENSSL_VERSION_MAJOR,
 * OPENSSL_VERSION_MINOR, OPENSSL_VERSION_PATCH, OPENSSL_VERSION_PRE_RELEASE
 * and OPENSSL_VERSION_BUILD_METADATA, respectively.
 */
unsigned int OPENSSL_version_major(void);
unsigned int OPENSSL_version_minor(void);
unsigned int OPENSSL_version_patch(void);
const char *OPENSSL_version_pre_release(void);
const char *OPENSSL_version_build_metadata(void);

unsigned long OpenSSL_version_num(void);
const char *OpenSSL_version(int type);
# define OPENSSL_VERSION                0
# define OPENSSL_CFLAGS                 1
# define OPENSSL_BUILT_ON               2
# define OPENSSL_PLATFORM               3
# define OPENSSL_DIR                    4
# define OPENSSL_ENGINES_DIR            5
# define OPENSSL_VERSION_STRING         6
# define OPENSSL_FULL_VERSION_STRING    7
# define OPENSSL_MODULES_DIR            8
# define OPENSSL_CPU_INFO               9

const char *OPENSSL_info(int type);
/*
 * The series starts at 1001 to avoid confusion with the OpenSSL_version
 * types.
 */
# define OPENSSL_INFO_CONFIG_DIR                1001
# define OPENSSL_INFO_ENGINES_DIR               1002
# define OPENSSL_INFO_MODULES_DIR               1003
# define OPENSSL_INFO_DSO_EXTENSION             1004
# define OPENSSL_INFO_DIR_FILENAME_SEPARATOR    1005
# define OPENSSL_INFO_LIST_SEPARATOR            1006
# define OPENSSL_INFO_SEED_SOURCE               1007
# define OPENSSL_INFO_CPU_SETTINGS              1008

int OPENSSL_issetugid(void);

struct crypto_ex_data_st {
    OSSL_LIB_CTX *ctx;
    STACK_OF(void) *sk;
};

SKM_DEFINE_STACK_OF_INTERNAL(void, void, void)
#define sk_void_num(sk) OPENSSL_sk_num(ossl_check_const_void_sk_type(sk))
#define sk_void_value(sk, idx) ((void *)OPENSSL_sk_value(ossl_check_const_void_sk_type(sk), (idx)))
#define sk_void_new(cmp) ((STACK_OF(void) *)OPENSSL_sk_new(ossl_check_void_compfunc_type(cmp)))
#define sk_void_new_null() ((STACK_OF(void) *)OPENSSL_sk_new_null())
#define sk_void_new_reserve(cmp, n) ((STACK_OF(void) *)OPENSSL_sk_new_reserve(ossl_check_void_compfunc_type(cmp), (n)))
#define sk_void_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_void_sk_type(sk), (n))
#define sk_void_free(sk) OPENSSL_sk_free(ossl_check_void_sk_type(sk))
#define sk_void_zero(sk) OPENSSL_sk_zero(ossl_check_void_sk_type(sk))
#define sk_void_delete(sk, i) ((void *)OPENSSL_sk_delete(ossl_check_void_sk_type(sk), (i)))
#define sk_void_delete_ptr(sk, ptr) ((void *)OPENSSL_sk_delete_ptr(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr)))
#define sk_void_push(sk, ptr) OPENSSL_sk_push(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_pop(sk) ((void *)OPENSSL_sk_pop(ossl_check_void_sk_type(sk)))
#define sk_void_shift(sk) ((void *)OPENSSL_sk_shift(ossl_check_void_sk_type(sk)))
#define sk_void_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_void_sk_type(sk),ossl_check_void_freefunc_type(freefunc))
#define sk_void_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr), (idx))
#define sk_void_set(sk, idx, ptr) ((void *)OPENSSL_sk_set(ossl_check_void_sk_type(sk), (idx), ossl_check_void_type(ptr)))
#define sk_void_find(sk, ptr) OPENSSL_sk_find(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr), pnum)
#define sk_void_sort(sk) OPENSSL_sk_sort(ossl_check_void_sk_type(sk))
#define sk_void_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_void_sk_type(sk))
#define sk_void_dup(sk) ((STACK_OF(void) *)OPENSSL_sk_dup(ossl_check_const_void_sk_type(sk)))
#define sk_void_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(void) *)OPENSSL_sk_deep_copy(ossl_check_const_void_sk_type(sk), ossl_check_void_copyfunc_type(copyfunc), ossl_check_void_freefunc_type(freefunc)))
#define sk_void_set_cmp_func(sk, cmp) ((sk_void_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_void_sk_type(sk), ossl_check_void_compfunc_type(cmp)))



/*
 * Per class, we have a STACK of function pointers.
 */
# define CRYPTO_EX_INDEX_SSL              0
# define CRYPTO_EX_INDEX_SSL_CTX          1
# define CRYPTO_EX_INDEX_SSL_SESSION      2
# define CRYPTO_EX_INDEX_X509             3
# define CRYPTO_EX_INDEX_X509_STORE       4
# define CRYPTO_EX_INDEX_X509_STORE_CTX   5
# define CRYPTO_EX_INDEX_DH               6
# define CRYPTO_EX_INDEX_DSA              7
# define CRYPTO_EX_INDEX_EC_KEY           8
# define CRYPTO_EX_INDEX_RSA              9
# define CRYPTO_EX_INDEX_ENGINE          10
# define CRYPTO_EX_INDEX_UI              11
# define CRYPTO_EX_INDEX_BIO             12
# define CRYPTO_EX_INDEX_APP             13
# define CRYPTO_EX_INDEX_UI_METHOD       14
# define CRYPTO_EX_INDEX_RAND_DRBG       15
# define CRYPTO_EX_INDEX_DRBG            CRYPTO_EX_INDEX_RAND_DRBG
# define CRYPTO_EX_INDEX_OSSL_LIB_CTX    16
# define CRYPTO_EX_INDEX_EVP_PKEY        17
# define CRYPTO_EX_INDEX__COUNT          18

typedef void CRYPTO_EX_new (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                           int idx, long argl, void *argp);
typedef void CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                             int idx, long argl, void *argp);
typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
                           void **from_d, int idx, long argl, void *argp);
__owur int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
                                   CRYPTO_EX_new *new_func,
                                   CRYPTO_EX_dup *dup_func,
                                   CRYPTO_EX_free *free_func);
/* No longer use an index. */
int CRYPTO_free_ex_index(int class_index, int idx);

/*
 * Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a
 * given class (invokes whatever per-class callbacks are applicable)
 */
int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
                       const CRYPTO_EX_DATA *from);

void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);

/* Allocate a single item in the CRYPTO_EX_DATA variable */
int CRYPTO_alloc_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad,
                         int idx);

/*
 * Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular
 * index (relative to the class type involved)
 */
int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
/*
 * This function cleans up all "ex_data" state. It mustn't be called under
 * potential race-conditions.
 */
# define CRYPTO_cleanup_all_ex_data() while(0) continue

/*
 * The old locking functions have been removed completely without compatibility
 * macros. This is because the old functions either could not properly report
 * errors, or the returned error values were not clearly documented.
 * Replacing the locking functions with no-ops would cause race condition
 * issues in the affected applications. It is far better for them to fail at
 * compile time.
 * On the other hand, the locking callbacks are no longer used.  Consequently,
 * the callback management functions can be safely replaced with no-op macros.
 */
#  define CRYPTO_num_locks()            (1)
#  define CRYPTO_set_locking_callback(func)
#  define CRYPTO_get_locking_callback()         (NULL)
#  define CRYPTO_set_add_lock_callback(func)
#  define CRYPTO_get_add_lock_callback()        (NULL)

/*
 * These defines where used in combination with the old locking callbacks,
 * they are not called anymore, but old code that's not called might still
 * use them.
 */
#  define CRYPTO_LOCK             1
#  define CRYPTO_UNLOCK           2
#  define CRYPTO_READ             4
#  define CRYPTO_WRITE            8

/* This structure is no longer used */
typedef struct crypto_threadid_st {
    int dummy;
} CRYPTO_THREADID;
/* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
#  define CRYPTO_THREADID_set_numeric(id, val)
#  define CRYPTO_THREADID_set_pointer(id, ptr)
#  define CRYPTO_THREADID_set_callback(threadid_func)   (0)
#  define CRYPTO_THREADID_get_callback()                (NULL)
#  define CRYPTO_THREADID_current(id)
#  define CRYPTO_THREADID_cmp(a, b)                     (-1)
#  define CRYPTO_THREADID_cpy(dest, src)
#  define CRYPTO_THREADID_hash(id)                      (0UL)

#  ifndef OPENSSL_NO_DEPRECATED_1_0_0
#   define CRYPTO_set_id_callback(func)
#   define CRYPTO_get_id_callback()                     (NULL)
#   define CRYPTO_thread_id()                           (0UL)
#  endif /* OPENSSL_NO_DEPRECATED_1_0_0 */

#  define CRYPTO_set_dynlock_create_callback(dyn_create_function)
#  define CRYPTO_set_dynlock_lock_callback(dyn_lock_function)
#  define CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function)
#  define CRYPTO_get_dynlock_create_callback()          (NULL)
#  define CRYPTO_get_dynlock_lock_callback()            (NULL)
#  define CRYPTO_get_dynlock_destroy_callback()         (NULL)
# endif /* OPENSSL_NO_DEPRECATED_1_1_0 */

typedef void *(*CRYPTO_malloc_fn)(size_t num, const char *file, int line);
typedef void *(*CRYPTO_realloc_fn)(void *addr, size_t num, const char *file,
                                   int line);
typedef void (*CRYPTO_free_fn)(void *addr, const char *file, int line);
int CRYPTO_set_mem_functions(CRYPTO_malloc_fn malloc_fn,
                             CRYPTO_realloc_fn realloc_fn,
                             CRYPTO_free_fn free_fn);
void CRYPTO_get_mem_functions(CRYPTO_malloc_fn *malloc_fn,
                              CRYPTO_realloc_fn *realloc_fn,
                              CRYPTO_free_fn *free_fn);

void *CRYPTO_malloc(size_t num, const char *file, int line);
void *CRYPTO_zalloc(size_t num, const char *file, int line);
void *CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
char *CRYPTO_strdup(const char *str, const char *file, int line);
char *CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
void CRYPTO_free(void *ptr, const char *file, int line);
void CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
void *CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
void *CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
                           const char *file, int line);

int CRYPTO_secure_malloc_init(size_t sz, size_t minsize);
int CRYPTO_secure_malloc_done(void);
void *CRYPTO_secure_malloc(size_t num, const char *file, int line);
void *CRYPTO_secure_zalloc(size_t num, const char *file, int line);
void CRYPTO_secure_free(void *ptr, const char *file, int line);
void CRYPTO_secure_clear_free(void *ptr, size_t num,
                              const char *file, int line);
int CRYPTO_secure_allocated(const void *ptr);
int CRYPTO_secure_malloc_initialized(void);
size_t CRYPTO_secure_actual_size(void *ptr);
size_t CRYPTO_secure_used(void);

void OPENSSL_cleanse(void *ptr, size_t len);

# ifndef OPENSSL_NO_CRYPTO_MDEBUG
/*
 * The following can be used to detect memory leaks in the library. If
 * used, it turns on malloc checking
 */
# define CRYPTO_MEM_CHECK_OFF     0x0   /* Control only */
# define CRYPTO_MEM_CHECK_ON      0x1   /* Control and mode bit */
# define CRYPTO_MEM_CHECK_ENABLE  0x2   /* Control and mode bit */
# define CRYPTO_MEM_CHECK_DISABLE 0x3   /* Control only */

void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
#  ifndef OPENSSL_NO_DEPRECATED_3_0
#    define OPENSSL_mem_debug_push(info) \
         CRYPTO_mem_debug_push(info, OPENSSL_FILE, OPENSSL_LINE)
#    define OPENSSL_mem_debug_pop() \
         CRYPTO_mem_debug_pop()
#  endif
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int CRYPTO_set_mem_debug(int flag);
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_ctrl(int mode);
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_debug_push(const char *info,
                                                const char *file, int line);
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_debug_pop(void);
OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_malloc(void *addr, size_t num,
                                                   int flag,
                                                   const char *file, int line);
OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_realloc(void *addr1, void *addr2,
                                                    size_t num, int flag,
                                                    const char *file, int line);
OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_free(void *addr, int flag,
                                                 const char *file, int line);
OSSL_DEPRECATEDIN_3_0
int CRYPTO_mem_leaks_cb(int (*cb)(const char *str, size_t len, void *u),
                        void *u);
#  endif
#  ifndef OPENSSL_NO_STDIO
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_leaks_fp(FILE *);
#  endif
#  endif
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_leaks(BIO *bio);
# endif
# endif /* OPENSSL_NO_CRYPTO_MDEBUG */

/* die if we have to */
ossl_noreturn void OPENSSL_die(const char *assertion, const char *file, int line);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define OpenSSLDie(f,l,a) OPENSSL_die((a),(f),(l))
# endif
# define OPENSSL_assert(e) \
    (void)((e) ? 0 : (OPENSSL_die("assertion failed: " #e, OPENSSL_FILE, OPENSSL_LINE), 1))

int OPENSSL_isservice(void);

void OPENSSL_init(void);
# ifdef OPENSSL_SYS_UNIX
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void OPENSSL_fork_prepare(void);
OSSL_DEPRECATEDIN_3_0 void OPENSSL_fork_parent(void);
OSSL_DEPRECATEDIN_3_0 void OPENSSL_fork_child(void);
#  endif
# endif

struct tm *OPENSSL_gmtime(const time_t *timer, struct tm *result);
int OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec);
int OPENSSL_gmtime_diff(int *pday, int *psec,
                        const struct tm *from, const struct tm *to);

/*
 * CRYPTO_memcmp returns zero iff the |len| bytes at |a| and |b| are equal.
 * It takes an amount of time dependent on |len|, but independent of the
 * contents of |a| and |b|. Unlike memcmp, it cannot be used to put elements
 * into a defined order as the return value when a != b is undefined, other
 * than to be non-zero.
 */
int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);

/* Standard initialisation options */
# define OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS 0x00000001L
# define OPENSSL_INIT_LOAD_CRYPTO_STRINGS    0x00000002L
# define OPENSSL_INIT_ADD_ALL_CIPHERS        0x00000004L
# define OPENSSL_INIT_ADD_ALL_DIGESTS        0x00000008L
# define OPENSSL_INIT_NO_ADD_ALL_CIPHERS     0x00000010L
# define OPENSSL_INIT_NO_ADD_ALL_DIGESTS     0x00000020L
# define OPENSSL_INIT_LOAD_CONFIG            0x00000040L
# define OPENSSL_INIT_NO_LOAD_CONFIG         0x00000080L
# define OPENSSL_INIT_ASYNC                  0x00000100L
# define OPENSSL_INIT_ENGINE_RDRAND          0x00000200L
# define OPENSSL_INIT_ENGINE_DYNAMIC         0x00000400L
# define OPENSSL_INIT_ENGINE_OPENSSL         0x00000800L
# define OPENSSL_INIT_ENGINE_CRYPTODEV       0x00001000L
# define OPENSSL_INIT_ENGINE_CAPI            0x00002000L
# define OPENSSL_INIT_ENGINE_PADLOCK         0x00004000L
# define OPENSSL_INIT_ENGINE_AFALG           0x00008000L
/* FREE:                                     0x00010000L */
# define OPENSSL_INIT_ATFORK                 0x00020000L
/* OPENSSL_INIT_BASE_ONLY                    0x00040000L */
# define OPENSSL_INIT_NO_ATEXIT              0x00080000L
/* OPENSSL_INIT flag range 0x03f00000 reserved for OPENSSL_init_ssl() */
/* FREE: 0x04000000L */
/* FREE: 0x08000000L */
/* FREE: 0x10000000L */
/* FREE: 0x20000000L */
/* FREE: 0x40000000L */
/* FREE: 0x80000000L */
/* Max OPENSSL_INIT flag value is 0x80000000 */

/* openssl and dasync not counted as builtin */
# define OPENSSL_INIT_ENGINE_ALL_BUILTIN \
    (OPENSSL_INIT_ENGINE_RDRAND | OPENSSL_INIT_ENGINE_DYNAMIC \
    | OPENSSL_INIT_ENGINE_CRYPTODEV | OPENSSL_INIT_ENGINE_CAPI | \
    OPENSSL_INIT_ENGINE_PADLOCK)

/* Library initialisation functions */
void OPENSSL_cleanup(void);
int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
int OPENSSL_atexit(void (*handler)(void));
void OPENSSL_thread_stop(void);
void OPENSSL_thread_stop_ex(OSSL_LIB_CTX *ctx);

/* Low-level control of initialization */
OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void);
# ifndef OPENSSL_NO_STDIO
int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
                                     const char *config_filename);
void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
                                        unsigned long flags);
int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
                                    const char *config_appname);
# endif
void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings);

# if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG)
#  if defined(_WIN32)
#   if defined(BASETYPES) || defined(_WINDEF_H)
/* application has to include <windows.h> in order to use this */
typedef DWORD CRYPTO_THREAD_LOCAL;
typedef DWORD CRYPTO_THREAD_ID;

typedef LONG CRYPTO_ONCE;
#    define CRYPTO_ONCE_STATIC_INIT 0
#   endif
#  else
#   if defined(__TANDEM) && defined(_SPT_MODEL_)
#    define  SPT_THREAD_SIGNAL 1
#    define  SPT_THREAD_AWARE 1
#    include <spthread.h>
#   else
#    include <pthread.h>
#   endif
typedef pthread_once_t CRYPTO_ONCE;
typedef pthread_key_t CRYPTO_THREAD_LOCAL;
typedef pthread_t CRYPTO_THREAD_ID;

#   define CRYPTO_ONCE_STATIC_INIT PTHREAD_ONCE_INIT
#  endif
# endif

# if !defined(CRYPTO_ONCE_STATIC_INIT)
typedef unsigned int CRYPTO_ONCE;
typedef unsigned int CRYPTO_THREAD_LOCAL;
typedef unsigned int CRYPTO_THREAD_ID;
#  define CRYPTO_ONCE_STATIC_INIT 0
# endif

int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));

int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *));
void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key);
int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val);
int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key);

CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void);
int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b);

OSSL_LIB_CTX *OSSL_LIB_CTX_new(void);
OSSL_LIB_CTX *OSSL_LIB_CTX_new_from_dispatch(const OSSL_CORE_HANDLE *handle,
                                             const OSSL_DISPATCH *in);
OSSL_LIB_CTX *OSSL_LIB_CTX_new_child(const OSSL_CORE_HANDLE *handle,
                                     const OSSL_DISPATCH *in);
int OSSL_LIB_CTX_load_config(OSSL_LIB_CTX *ctx, const char *config_file);
void OSSL_LIB_CTX_free(OSSL_LIB_CTX *);
OSSL_LIB_CTX *OSSL_LIB_CTX_get0_global_default(void);
OSSL_LIB_CTX *OSSL_LIB_CTX_set0_default(OSSL_LIB_CTX *libctx);

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                       node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/ct.h                             0000664 0000000 0000000 00000054355 14746647661 0025331 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/ct.h.in
 *
 * Copyright 2016-2020 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_CT_H
# define OPENSSL_CT_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_CT_H
# endif

# include <openssl/opensslconf.h>

# ifndef OPENSSL_NO_CT
# include <openssl/types.h>
# include <openssl/safestack.h>
# include <openssl/x509.h>
# include <openssl/cterr.h>
# ifdef  __cplusplus
extern "C" {
# endif


/* Minimum RSA key size, from RFC6962 */
# define SCT_MIN_RSA_BITS 2048

/* All hashes are SHA256 in v1 of Certificate Transparency */
# define CT_V1_HASHLEN SHA256_DIGEST_LENGTH

SKM_DEFINE_STACK_OF_INTERNAL(SCT, SCT, SCT)
#define sk_SCT_num(sk) OPENSSL_sk_num(ossl_check_const_SCT_sk_type(sk))
#define sk_SCT_value(sk, idx) ((SCT *)OPENSSL_sk_value(ossl_check_const_SCT_sk_type(sk), (idx)))
#define sk_SCT_new(cmp) ((STACK_OF(SCT) *)OPENSSL_sk_new(ossl_check_SCT_compfunc_type(cmp)))
#define sk_SCT_new_null() ((STACK_OF(SCT) *)OPENSSL_sk_new_null())
#define sk_SCT_new_reserve(cmp, n) ((STACK_OF(SCT) *)OPENSSL_sk_new_reserve(ossl_check_SCT_compfunc_type(cmp), (n)))
#define sk_SCT_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_SCT_sk_type(sk), (n))
#define sk_SCT_free(sk) OPENSSL_sk_free(ossl_check_SCT_sk_type(sk))
#define sk_SCT_zero(sk) OPENSSL_sk_zero(ossl_check_SCT_sk_type(sk))
#define sk_SCT_delete(sk, i) ((SCT *)OPENSSL_sk_delete(ossl_check_SCT_sk_type(sk), (i)))
#define sk_SCT_delete_ptr(sk, ptr) ((SCT *)OPENSSL_sk_delete_ptr(ossl_check_SCT_sk_type(sk), ossl_check_SCT_type(ptr)))
#define sk_SCT_push(sk, ptr) OPENSSL_sk_push(ossl_check_SCT_sk_type(sk), ossl_check_SCT_type(ptr))
#define sk_SCT_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_SCT_sk_type(sk), ossl_check_SCT_type(ptr))
#define sk_SCT_pop(sk) ((SCT *)OPENSSL_sk_pop(ossl_check_SCT_sk_type(sk)))
#define sk_SCT_shift(sk) ((SCT *)OPENSSL_sk_shift(ossl_check_SCT_sk_type(sk)))
#define sk_SCT_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_SCT_sk_type(sk),ossl_check_SCT_freefunc_type(freefunc))
#define sk_SCT_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_SCT_sk_type(sk), ossl_check_SCT_type(ptr), (idx))
#define sk_SCT_set(sk, idx, ptr) ((SCT *)OPENSSL_sk_set(ossl_check_SCT_sk_type(sk), (idx), ossl_check_SCT_type(ptr)))
#define sk_SCT_find(sk, ptr) OPENSSL_sk_find(ossl_check_SCT_sk_type(sk), ossl_check_SCT_type(ptr))
#define sk_SCT_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_SCT_sk_type(sk), ossl_check_SCT_type(ptr))
#define sk_SCT_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_SCT_sk_type(sk), ossl_check_SCT_type(ptr), pnum)
#define sk_SCT_sort(sk) OPENSSL_sk_sort(ossl_check_SCT_sk_type(sk))
#define sk_SCT_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_SCT_sk_type(sk))
#define sk_SCT_dup(sk) ((STACK_OF(SCT) *)OPENSSL_sk_dup(ossl_check_const_SCT_sk_type(sk)))
#define sk_SCT_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(SCT) *)OPENSSL_sk_deep_copy(ossl_check_const_SCT_sk_type(sk), ossl_check_SCT_copyfunc_type(copyfunc), ossl_check_SCT_freefunc_type(freefunc)))
#define sk_SCT_set_cmp_func(sk, cmp) ((sk_SCT_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_SCT_sk_type(sk), ossl_check_SCT_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(CTLOG, CTLOG, CTLOG)
#define sk_CTLOG_num(sk) OPENSSL_sk_num(ossl_check_const_CTLOG_sk_type(sk))
#define sk_CTLOG_value(sk, idx) ((CTLOG *)OPENSSL_sk_value(ossl_check_const_CTLOG_sk_type(sk), (idx)))
#define sk_CTLOG_new(cmp) ((STACK_OF(CTLOG) *)OPENSSL_sk_new(ossl_check_CTLOG_compfunc_type(cmp)))
#define sk_CTLOG_new_null() ((STACK_OF(CTLOG) *)OPENSSL_sk_new_null())
#define sk_CTLOG_new_reserve(cmp, n) ((STACK_OF(CTLOG) *)OPENSSL_sk_new_reserve(ossl_check_CTLOG_compfunc_type(cmp), (n)))
#define sk_CTLOG_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CTLOG_sk_type(sk), (n))
#define sk_CTLOG_free(sk) OPENSSL_sk_free(ossl_check_CTLOG_sk_type(sk))
#define sk_CTLOG_zero(sk) OPENSSL_sk_zero(ossl_check_CTLOG_sk_type(sk))
#define sk_CTLOG_delete(sk, i) ((CTLOG *)OPENSSL_sk_delete(ossl_check_CTLOG_sk_type(sk), (i)))
#define sk_CTLOG_delete_ptr(sk, ptr) ((CTLOG *)OPENSSL_sk_delete_ptr(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_type(ptr)))
#define sk_CTLOG_push(sk, ptr) OPENSSL_sk_push(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_type(ptr))
#define sk_CTLOG_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_type(ptr))
#define sk_CTLOG_pop(sk) ((CTLOG *)OPENSSL_sk_pop(ossl_check_CTLOG_sk_type(sk)))
#define sk_CTLOG_shift(sk) ((CTLOG *)OPENSSL_sk_shift(ossl_check_CTLOG_sk_type(sk)))
#define sk_CTLOG_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CTLOG_sk_type(sk),ossl_check_CTLOG_freefunc_type(freefunc))
#define sk_CTLOG_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_type(ptr), (idx))
#define sk_CTLOG_set(sk, idx, ptr) ((CTLOG *)OPENSSL_sk_set(ossl_check_CTLOG_sk_type(sk), (idx), ossl_check_CTLOG_type(ptr)))
#define sk_CTLOG_find(sk, ptr) OPENSSL_sk_find(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_type(ptr))
#define sk_CTLOG_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_type(ptr))
#define sk_CTLOG_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_type(ptr), pnum)
#define sk_CTLOG_sort(sk) OPENSSL_sk_sort(ossl_check_CTLOG_sk_type(sk))
#define sk_CTLOG_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CTLOG_sk_type(sk))
#define sk_CTLOG_dup(sk) ((STACK_OF(CTLOG) *)OPENSSL_sk_dup(ossl_check_const_CTLOG_sk_type(sk)))
#define sk_CTLOG_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CTLOG) *)OPENSSL_sk_deep_copy(ossl_check_const_CTLOG_sk_type(sk), ossl_check_CTLOG_copyfunc_type(copyfunc), ossl_check_CTLOG_freefunc_type(freefunc)))
#define sk_CTLOG_set_cmp_func(sk, cmp) ((sk_CTLOG_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CTLOG_sk_type(sk), ossl_check_CTLOG_compfunc_type(cmp)))



typedef enum {
    CT_LOG_ENTRY_TYPE_NOT_SET = -1,
    CT_LOG_ENTRY_TYPE_X509 = 0,
    CT_LOG_ENTRY_TYPE_PRECERT = 1
} ct_log_entry_type_t;

typedef enum {
    SCT_VERSION_NOT_SET = -1,
    SCT_VERSION_V1 = 0
} sct_version_t;

typedef enum {
    SCT_SOURCE_UNKNOWN,
    SCT_SOURCE_TLS_EXTENSION,
    SCT_SOURCE_X509V3_EXTENSION,
    SCT_SOURCE_OCSP_STAPLED_RESPONSE
} sct_source_t;

typedef enum {
    SCT_VALIDATION_STATUS_NOT_SET,
    SCT_VALIDATION_STATUS_UNKNOWN_LOG,
    SCT_VALIDATION_STATUS_VALID,
    SCT_VALIDATION_STATUS_INVALID,
    SCT_VALIDATION_STATUS_UNVERIFIED,
    SCT_VALIDATION_STATUS_UNKNOWN_VERSION
} sct_validation_status_t;

/******************************************
 * CT policy evaluation context functions *
 ******************************************/

/*
 * Creates a new, empty policy evaluation context associated with the given
 * library context and property query string.
 * The caller is responsible for calling CT_POLICY_EVAL_CTX_free when finished
 * with the CT_POLICY_EVAL_CTX.
 */
CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new_ex(OSSL_LIB_CTX *libctx,
                                              const char *propq);
                                                       
/*
 * The same as CT_POLICY_EVAL_CTX_new_ex() but the default library
 * context and property query string is used.
 */
CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void);

/* Deletes a policy evaluation context and anything it owns. */
void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx);

/* Gets the peer certificate that the SCTs are for */
X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx);

/*
 * Sets the certificate associated with the received SCTs.
 * Increments the reference count of cert.
 * Returns 1 on success, 0 otherwise.
 */
int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert);

/* Gets the issuer of the aforementioned certificate */
X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx);

/*
 * Sets the issuer of the certificate associated with the received SCTs.
 * Increments the reference count of issuer.
 * Returns 1 on success, 0 otherwise.
 */
int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer);

/* Gets the CT logs that are trusted sources of SCTs */
const CTLOG_STORE *CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx);

/* Sets the log store that is in use. It must outlive the CT_POLICY_EVAL_CTX. */
void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
                                               CTLOG_STORE *log_store);

/*
 * Gets the time, in milliseconds since the Unix epoch, that will be used as the
 * current time when checking whether an SCT was issued in the future.
 * Such SCTs will fail validation, as required by RFC6962.
 */
uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);

/*
 * Sets the time to evaluate SCTs against, in milliseconds since the Unix epoch.
 * If an SCT's timestamp is after this time, it will be interpreted as having
 * been issued in the future. RFC6962 states that "TLS clients MUST reject SCTs
 * whose timestamp is in the future", so an SCT will not validate in this case.
 */
void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);

/*****************
 * SCT functions *
 *****************/

/*
 * Creates a new, blank SCT.
 * The caller is responsible for calling SCT_free when finished with the SCT.
 */
SCT *SCT_new(void);

/*
 * Creates a new SCT from some base64-encoded strings.
 * The caller is responsible for calling SCT_free when finished with the SCT.
 */
SCT *SCT_new_from_base64(unsigned char version,
                         const char *logid_base64,
                         ct_log_entry_type_t entry_type,
                         uint64_t timestamp,
                         const char *extensions_base64,
                         const char *signature_base64);

/*
 * Frees the SCT and the underlying data structures.
 */
void SCT_free(SCT *sct);

/*
 * Free a stack of SCTs, and the underlying SCTs themselves.
 * Intended to be compatible with X509V3_EXT_FREE.
 */
void SCT_LIST_free(STACK_OF(SCT) *a);

/*
 * Returns the version of the SCT.
 */
sct_version_t SCT_get_version(const SCT *sct);

/*
 * Set the version of an SCT.
 * Returns 1 on success, 0 if the version is unrecognized.
 */
__owur int SCT_set_version(SCT *sct, sct_version_t version);

/*
 * Returns the log entry type of the SCT.
 */
ct_log_entry_type_t SCT_get_log_entry_type(const SCT *sct);

/*
 * Set the log entry type of an SCT.
 * Returns 1 on success, 0 otherwise.
 */
__owur int SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type);

/*
 * Gets the ID of the log that an SCT came from.
 * Ownership of the log ID remains with the SCT.
 * Returns the length of the log ID.
 */
size_t SCT_get0_log_id(const SCT *sct, unsigned char **log_id);

/*
 * Set the log ID of an SCT to point directly to the *log_id specified.
 * The SCT takes ownership of the specified pointer.
 * Returns 1 on success, 0 otherwise.
 */
__owur int SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len);

/*
 * Set the log ID of an SCT.
 * This makes a copy of the log_id.
 * Returns 1 on success, 0 otherwise.
 */
__owur int SCT_set1_log_id(SCT *sct, const unsigned char *log_id,
                           size_t log_id_len);

/*
 * Returns the timestamp for the SCT (epoch time in milliseconds).
 */
uint64_t SCT_get_timestamp(const SCT *sct);

/*
 * Set the timestamp of an SCT (epoch time in milliseconds).
 */
void SCT_set_timestamp(SCT *sct, uint64_t timestamp);

/*
 * Return the NID for the signature used by the SCT.
 * For CT v1, this will be either NID_sha256WithRSAEncryption or
 * NID_ecdsa_with_SHA256 (or NID_undef if incorrect/unset).
 */
int SCT_get_signature_nid(const SCT *sct);

/*
 * Set the signature type of an SCT
 * For CT v1, this should be either NID_sha256WithRSAEncryption or
 * NID_ecdsa_with_SHA256.
 * Returns 1 on success, 0 otherwise.
 */
__owur int SCT_set_signature_nid(SCT *sct, int nid);

/*
 * Set *ext to point to the extension data for the SCT. ext must not be NULL.
 * The SCT retains ownership of this pointer.
 * Returns length of the data pointed to.
 */
size_t SCT_get0_extensions(const SCT *sct, unsigned char **ext);

/*
 * Set the extensions of an SCT to point directly to the *ext specified.
 * The SCT takes ownership of the specified pointer.
 */
void SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len);

/*
 * Set the extensions of an SCT.
 * This takes a copy of the ext.
 * Returns 1 on success, 0 otherwise.
 */
__owur int SCT_set1_extensions(SCT *sct, const unsigned char *ext,
                               size_t ext_len);

/*
 * Set *sig to point to the signature for the SCT. sig must not be NULL.
 * The SCT retains ownership of this pointer.
 * Returns length of the data pointed to.
 */
size_t SCT_get0_signature(const SCT *sct, unsigned char **sig);

/*
 * Set the signature of an SCT to point directly to the *sig specified.
 * The SCT takes ownership of the specified pointer.
 */
void SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len);

/*
 * Set the signature of an SCT to be a copy of the *sig specified.
 * Returns 1 on success, 0 otherwise.
 */
__owur int SCT_set1_signature(SCT *sct, const unsigned char *sig,
                              size_t sig_len);

/*
 * The origin of this SCT, e.g. TLS extension, OCSP response, etc.
 */
sct_source_t SCT_get_source(const SCT *sct);

/*
 * Set the origin of this SCT, e.g. TLS extension, OCSP response, etc.
 * Returns 1 on success, 0 otherwise.
 */
__owur int SCT_set_source(SCT *sct, sct_source_t source);

/*
 * Returns a text string describing the validation status of |sct|.
 */
const char *SCT_validation_status_string(const SCT *sct);

/*
 * Pretty-prints an |sct| to |out|.
 * It will be indented by the number of spaces specified by |indent|.
 * If |logs| is not NULL, it will be used to lookup the CT log that the SCT came
 * from, so that the log name can be printed.
 */
void SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);

/*
 * Pretty-prints an |sct_list| to |out|.
 * It will be indented by the number of spaces specified by |indent|.
 * SCTs will be delimited by |separator|.
 * If |logs| is not NULL, it will be used to lookup the CT log that each SCT
 * came from, so that the log names can be printed.
 */
void SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
                    const char *separator, const CTLOG_STORE *logs);

/*
 * Gets the last result of validating this SCT.
 * If it has not been validated yet, returns SCT_VALIDATION_STATUS_NOT_SET.
 */
sct_validation_status_t SCT_get_validation_status(const SCT *sct);

/*
 * Validates the given SCT with the provided context.
 * Sets the "validation_status" field of the SCT.
 * Returns 1 if the SCT is valid and the signature verifies.
 * Returns 0 if the SCT is invalid or could not be verified.
 * Returns -1 if an error occurs.
 */
__owur int SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);

/*
 * Validates the given list of SCTs with the provided context.
 * Sets the "validation_status" field of each SCT.
 * Returns 1 if there are no invalid SCTs and all signatures verify.
 * Returns 0 if at least one SCT is invalid or could not be verified.
 * Returns a negative integer if an error occurs.
 */
__owur int SCT_LIST_validate(const STACK_OF(SCT) *scts,
                             CT_POLICY_EVAL_CTX *ctx);


/*********************************
 * SCT parsing and serialization *
 *********************************/

/*
 * Serialize (to TLS format) a stack of SCTs and return the length.
 * "a" must not be NULL.
 * If "pp" is NULL, just return the length of what would have been serialized.
 * If "pp" is not NULL and "*pp" is null, function will allocate a new pointer
 * for data that caller is responsible for freeing (only if function returns
 * successfully).
 * If "pp" is NULL and "*pp" is not NULL, caller is responsible for ensuring
 * that "*pp" is large enough to accept all of the serialized data.
 * Returns < 0 on error, >= 0 indicating bytes written (or would have been)
 * on success.
 */
__owur int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);

/*
 * Convert TLS format SCT list to a stack of SCTs.
 * If "a" or "*a" is NULL, a new stack will be created that the caller is
 * responsible for freeing (by calling SCT_LIST_free).
 * "**pp" and "*pp" must not be NULL.
 * Upon success, "*pp" will point to after the last bytes read, and a stack
 * will be returned.
 * Upon failure, a NULL pointer will be returned, and the position of "*pp" is
 * not defined.
 */
STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                            size_t len);

/*
 * Serialize (to DER format) a stack of SCTs and return the length.
 * "a" must not be NULL.
 * If "pp" is NULL, just returns the length of what would have been serialized.
 * If "pp" is not NULL and "*pp" is null, function will allocate a new pointer
 * for data that caller is responsible for freeing (only if function returns
 * successfully).
 * If "pp" is NULL and "*pp" is not NULL, caller is responsible for ensuring
 * that "*pp" is large enough to accept all of the serialized data.
 * Returns < 0 on error, >= 0 indicating bytes written (or would have been)
 * on success.
 */
__owur int i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);

/*
 * Parses an SCT list in DER format and returns it.
 * If "a" or "*a" is NULL, a new stack will be created that the caller is
 * responsible for freeing (by calling SCT_LIST_free).
 * "**pp" and "*pp" must not be NULL.
 * Upon success, "*pp" will point to after the last bytes read, and a stack
 * will be returned.
 * Upon failure, a NULL pointer will be returned, and the position of "*pp" is
 * not defined.
 */
STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                            long len);

/*
 * Serialize (to TLS format) an |sct| and write it to |out|.
 * If |out| is null, no SCT will be output but the length will still be returned.
 * If |out| points to a null pointer, a string will be allocated to hold the
 * TLS-format SCT. It is the responsibility of the caller to free it.
 * If |out| points to an allocated string, the TLS-format SCT will be written
 * to it.
 * The length of the SCT in TLS format will be returned.
 */
__owur int i2o_SCT(const SCT *sct, unsigned char **out);

/*
 * Parses an SCT in TLS format and returns it.
 * If |psct| is not null, it will end up pointing to the parsed SCT. If it
 * already points to a non-null pointer, the pointer will be free'd.
 * |in| should be a pointer to a string containing the TLS-format SCT.
 * |in| will be advanced to the end of the SCT if parsing succeeds.
 * |len| should be the length of the SCT in |in|.
 * Returns NULL if an error occurs.
 * If the SCT is an unsupported version, only the SCT's 'sct' and 'sct_len'
 * fields will be populated (with |in| and |len| respectively).
 */
SCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len);

/********************
 * CT log functions *
 ********************/

/*
 * Creates a new CT log instance with the given |public_key| and |name| and
 * associates it with the give library context |libctx| and property query
 * string |propq|.
 * Takes ownership of |public_key| but copies |name|.
 * Returns NULL if malloc fails or if |public_key| cannot be converted to DER.
 * Should be deleted by the caller using CTLOG_free when no longer needed.
 */
CTLOG *CTLOG_new_ex(EVP_PKEY *public_key, const char *name, OSSL_LIB_CTX *libctx,
                    const char *propq);

/*
 * The same as CTLOG_new_ex except that the default library context and
 * property query string are used.
 */
CTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name);

/*
 * Creates a new CTLOG instance with the base64-encoded SubjectPublicKeyInfo DER
 * in |pkey_base64| and associated with the given library context |libctx| and
 * property query string |propq|. The |name| is a string to help users identify
 * this log.
 * Returns 1 on success, 0 on failure.
 * Should be deleted by the caller using CTLOG_free when no longer needed.
 */
int CTLOG_new_from_base64_ex(CTLOG **ct_log, const char *pkey_base64,
                             const char *name, OSSL_LIB_CTX *libctx,
                             const char *propq);

/*
 * The same as CTLOG_new_from_base64_ex() except that the default
 * library context and property query string are used.
 * Returns 1 on success, 0 on failure.
 */
int CTLOG_new_from_base64(CTLOG ** ct_log,
                          const char *pkey_base64, const char *name);

/*
 * Deletes a CT log instance and its fields.
 */
void CTLOG_free(CTLOG *log);

/* Gets the name of the CT log */
const char *CTLOG_get0_name(const CTLOG *log);
/* Gets the ID of the CT log */
void CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
                       size_t *log_id_len);
/* Gets the public key of the CT log */
EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log);

/**************************
 * CT log store functions *
 **************************/

/*
 * Creates a new CT log store and associates it with the given libctx and
 * property query string.
 * Should be deleted by the caller using CTLOG_STORE_free when no longer needed.
 */
CTLOG_STORE *CTLOG_STORE_new_ex(OSSL_LIB_CTX *libctx, const char *propq);

/*
 * Same as CTLOG_STORE_new_ex except that the default libctx and
 * property query string are used.
 * Should be deleted by the caller using CTLOG_STORE_free when no longer needed.
 */
CTLOG_STORE *CTLOG_STORE_new(void);

/*
 * Deletes a CT log store and all of the CT log instances held within.
 */
void CTLOG_STORE_free(CTLOG_STORE *store);

/*
 * Finds a CT log in the store based on its log ID.
 * Returns the CT log, or NULL if no match is found.
 */
const CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
                                        const uint8_t *log_id,
                                        size_t log_id_len);

/*
 * Loads a CT log list into a |store| from a |file|.
 * Returns 1 if loading is successful, or 0 otherwise.
 */
__owur int CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);

/*
 * Loads the default CT log list into a |store|.
 * Returns 1 if loading is successful, or 0 otherwise.
 */
__owur int CTLOG_STORE_load_default_file(CTLOG_STORE *store);

#  ifdef  __cplusplus
}
#  endif
# endif
#endif
                                                                                                                                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/err.h                            0000664 0000000 0000000 00000052732 14746647661 0025510 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_ERR_H
# define OPENSSL_ERR_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_ERR_H
# endif

# include <openssl/e_os2.h>

# ifndef OPENSSL_NO_STDIO
#  include <stdio.h>
#  include <stdlib.h>
# endif

# include <openssl/types.h>
# include <openssl/bio.h>
# include <openssl/lhash.h>
# include <openssl/cryptoerr_legacy.h>

#ifdef  __cplusplus
extern "C" {
#endif

# ifndef OPENSSL_NO_DEPRECATED_3_0
#  ifndef OPENSSL_NO_FILENAMES
#   define ERR_PUT_error(l,f,r,fn,ln)      ERR_put_error(l,f,r,fn,ln)
#  else
#   define ERR_PUT_error(l,f,r,fn,ln)      ERR_put_error(l,f,r,NULL,0)
#  endif
# endif

# include <limits.h>
# include <errno.h>

# define ERR_TXT_MALLOCED        0x01
# define ERR_TXT_STRING          0x02

# if !defined(OPENSSL_NO_DEPRECATED_3_0) || defined(OSSL_FORCE_ERR_STATE)
#  define ERR_FLAG_MARK           0x01
#  define ERR_FLAG_CLEAR          0x02

#  define ERR_NUM_ERRORS  16
struct err_state_st {
    int err_flags[ERR_NUM_ERRORS];
    int err_marks[ERR_NUM_ERRORS];
    unsigned long err_buffer[ERR_NUM_ERRORS];
    char *err_data[ERR_NUM_ERRORS];
    size_t err_data_size[ERR_NUM_ERRORS];
    int err_data_flags[ERR_NUM_ERRORS];
    char *err_file[ERR_NUM_ERRORS];
    int err_line[ERR_NUM_ERRORS];
    char *err_func[ERR_NUM_ERRORS];
    int top, bottom;
};
# endif

/* library */
# define ERR_LIB_NONE            1
# define ERR_LIB_SYS             2
# define ERR_LIB_BN              3
# define ERR_LIB_RSA             4
# define ERR_LIB_DH              5
# define ERR_LIB_EVP             6
# define ERR_LIB_BUF             7
# define ERR_LIB_OBJ             8
# define ERR_LIB_PEM             9
# define ERR_LIB_DSA             10
# define ERR_LIB_X509            11
/* #define ERR_LIB_METH         12 */
# define ERR_LIB_ASN1            13
# define ERR_LIB_CONF            14
# define ERR_LIB_CRYPTO          15
# define ERR_LIB_EC              16
# define ERR_LIB_SSL             20
/* #define ERR_LIB_SSL23        21 */
/* #define ERR_LIB_SSL2         22 */
/* #define ERR_LIB_SSL3         23 */
/* #define ERR_LIB_RSAREF       30 */
/* #define ERR_LIB_PROXY        31 */
# define ERR_LIB_BIO             32
# define ERR_LIB_PKCS7           33
# define ERR_LIB_X509V3          34
# define ERR_LIB_PKCS12          35
# define ERR_LIB_RAND            36
# define ERR_LIB_DSO             37
# define ERR_LIB_ENGINE          38
# define ERR_LIB_OCSP            39
# define ERR_LIB_UI              40
# define ERR_LIB_COMP            41
# define ERR_LIB_ECDSA           42
# define ERR_LIB_ECDH            43
# define ERR_LIB_OSSL_STORE      44
# define ERR_LIB_FIPS            45
# define ERR_LIB_CMS             46
# define ERR_LIB_TS              47
# define ERR_LIB_HMAC            48
/* # define ERR_LIB_JPAKE       49 */
# define ERR_LIB_CT              50
# define ERR_LIB_ASYNC           51
# define ERR_LIB_KDF             52
# define ERR_LIB_SM2             53
# define ERR_LIB_ESS             54
# define ERR_LIB_PROP            55
# define ERR_LIB_CRMF            56
# define ERR_LIB_PROV            57
# define ERR_LIB_CMP             58
# define ERR_LIB_OSSL_ENCODER    59
# define ERR_LIB_OSSL_DECODER    60
# define ERR_LIB_HTTP            61

# define ERR_LIB_USER            128

# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define ASN1err(f, r) ERR_raise_data(ERR_LIB_ASN1, (r), NULL)
#  define ASYNCerr(f, r) ERR_raise_data(ERR_LIB_ASYNC, (r), NULL)
#  define BIOerr(f, r) ERR_raise_data(ERR_LIB_BIO, (r), NULL)
#  define BNerr(f, r)  ERR_raise_data(ERR_LIB_BN, (r), NULL)
#  define BUFerr(f, r) ERR_raise_data(ERR_LIB_BUF, (r), NULL)
#  define CMPerr(f, r) ERR_raise_data(ERR_LIB_CMP, (r), NULL)
#  define CMSerr(f, r) ERR_raise_data(ERR_LIB_CMS, (r), NULL)
#  define COMPerr(f, r) ERR_raise_data(ERR_LIB_COMP, (r), NULL)
#  define CONFerr(f, r) ERR_raise_data(ERR_LIB_CONF, (r), NULL)
#  define CRMFerr(f, r) ERR_raise_data(ERR_LIB_CRMF, (r), NULL)
#  define CRYPTOerr(f, r) ERR_raise_data(ERR_LIB_CRYPTO, (r), NULL)
#  define CTerr(f, r) ERR_raise_data(ERR_LIB_CT, (r), NULL)
#  define DHerr(f, r)  ERR_raise_data(ERR_LIB_DH, (r), NULL)
#  define DSAerr(f, r) ERR_raise_data(ERR_LIB_DSA, (r), NULL)
#  define DSOerr(f, r) ERR_raise_data(ERR_LIB_DSO, (r), NULL)
#  define ECDHerr(f, r) ERR_raise_data(ERR_LIB_ECDH, (r), NULL)
#  define ECDSAerr(f, r) ERR_raise_data(ERR_LIB_ECDSA, (r), NULL)
#  define ECerr(f, r)  ERR_raise_data(ERR_LIB_EC, (r), NULL)
#  define ENGINEerr(f, r) ERR_raise_data(ERR_LIB_ENGINE, (r), NULL)
#  define ESSerr(f, r) ERR_raise_data(ERR_LIB_ESS, (r), NULL)
#  define EVPerr(f, r) ERR_raise_data(ERR_LIB_EVP, (r), NULL)
#  define FIPSerr(f, r) ERR_raise_data(ERR_LIB_FIPS, (r), NULL)
#  define HMACerr(f, r) ERR_raise_data(ERR_LIB_HMAC, (r), NULL)
#  define HTTPerr(f, r) ERR_raise_data(ERR_LIB_HTTP, (r), NULL)
#  define KDFerr(f, r) ERR_raise_data(ERR_LIB_KDF, (r), NULL)
#  define OBJerr(f, r) ERR_raise_data(ERR_LIB_OBJ, (r), NULL)
#  define OCSPerr(f, r) ERR_raise_data(ERR_LIB_OCSP, (r), NULL)
#  define OSSL_STOREerr(f, r) ERR_raise_data(ERR_LIB_OSSL_STORE, (r), NULL)
#  define PEMerr(f, r) ERR_raise_data(ERR_LIB_PEM, (r), NULL)
#  define PKCS12err(f, r) ERR_raise_data(ERR_LIB_PKCS12, (r), NULL)
#  define PKCS7err(f, r) ERR_raise_data(ERR_LIB_PKCS7, (r), NULL)
#  define PROPerr(f, r) ERR_raise_data(ERR_LIB_PROP, (r), NULL)
#  define PROVerr(f, r) ERR_raise_data(ERR_LIB_PROV, (r), NULL)
#  define RANDerr(f, r) ERR_raise_data(ERR_LIB_RAND, (r), NULL)
#  define RSAerr(f, r) ERR_raise_data(ERR_LIB_RSA, (r), NULL)
#  define KDFerr(f, r) ERR_raise_data(ERR_LIB_KDF, (r), NULL)
#  define SM2err(f, r) ERR_raise_data(ERR_LIB_SM2, (r), NULL)
#  define SSLerr(f, r) ERR_raise_data(ERR_LIB_SSL, (r), NULL)
#  define SYSerr(f, r) ERR_raise_data(ERR_LIB_SYS, (r), NULL)
#  define TSerr(f, r) ERR_raise_data(ERR_LIB_TS, (r), NULL)
#  define UIerr(f, r) ERR_raise_data(ERR_LIB_UI, (r), NULL)
#  define X509V3err(f, r) ERR_raise_data(ERR_LIB_X509V3, (r), NULL)
#  define X509err(f, r) ERR_raise_data(ERR_LIB_X509, (r), NULL)
# endif

/*-
 * The error code packs differently depending on if it records a system
 * error or an OpenSSL error.
 *
 * A system error packs like this (we follow POSIX and only allow positive
 * numbers that fit in an |int|):
 *
 * +-+-------------------------------------------------------------+
 * |1|                     system error number                     |
 * +-+-------------------------------------------------------------+
 *
 * An OpenSSL error packs like this:
 *
 * <---------------------------- 32 bits -------------------------->
 *    <--- 8 bits ---><------------------ 23 bits ----------------->
 * +-+---------------+---------------------------------------------+
 * |0|    library    |                    reason                   |
 * +-+---------------+---------------------------------------------+
 *
 * A few of the reason bits are reserved as flags with special meaning:
 *
 *                    <5 bits-<>--------- 19 bits ----------------->
 *                   +-------+-+-----------------------------------+
 *                   | rflags| |          reason                   |
 *                   +-------+-+-----------------------------------+
 *                            ^
 *                            |
 *                           ERR_RFLAG_FATAL = ERR_R_FATAL
 *
 * The reason flags are part of the overall reason code for practical
 * reasons, as they provide an easy way to place different types of
 * reason codes in different numeric ranges.
 *
 * The currently known reason flags are:
 *
 * ERR_RFLAG_FATAL      Flags that the reason code is considered fatal.
 *                      For backward compatibility reasons, this flag
 *                      is also the code for ERR_R_FATAL (that reason
 *                      code served the dual purpose of flag and reason
 *                      code in one in pre-3.0 OpenSSL).
 * ERR_RFLAG_COMMON     Flags that the reason code is common to all
 *                      libraries.  All ERR_R_ macros must use this flag,
 *                      and no other _R_ macro is allowed to use it.
 */

/* Macros to help decode recorded system errors */
# define ERR_SYSTEM_FLAG                ((unsigned int)INT_MAX + 1)
# define ERR_SYSTEM_MASK                ((unsigned int)INT_MAX)

/*
 * Macros to help decode recorded OpenSSL errors
 * As expressed above, RFLAGS and REASON overlap by one bit to allow
 * ERR_R_FATAL to use ERR_RFLAG_FATAL as its reason code.
 */
# define ERR_LIB_OFFSET                 23L
# define ERR_LIB_MASK                   0xFF
# define ERR_RFLAGS_OFFSET              18L
# define ERR_RFLAGS_MASK                0x1F
# define ERR_REASON_MASK                0X7FFFFF

/*
 * Reason flags are defined pre-shifted to easily combine with the reason
 * number.
 */
# define ERR_RFLAG_FATAL                (0x1 << ERR_RFLAGS_OFFSET)
# define ERR_RFLAG_COMMON               (0x2 << ERR_RFLAGS_OFFSET)

# define ERR_SYSTEM_ERROR(errcode)      (((errcode) & ERR_SYSTEM_FLAG) != 0)

static ossl_unused ossl_inline int ERR_GET_LIB(unsigned long errcode)
{
    if (ERR_SYSTEM_ERROR(errcode))
        return ERR_LIB_SYS;
    return (errcode >> ERR_LIB_OFFSET) & ERR_LIB_MASK;
}

static ossl_unused ossl_inline int ERR_GET_RFLAGS(unsigned long errcode)
{
    if (ERR_SYSTEM_ERROR(errcode))
        return 0;
    return errcode & (ERR_RFLAGS_MASK << ERR_RFLAGS_OFFSET);
}

static ossl_unused ossl_inline int ERR_GET_REASON(unsigned long errcode)
{
    if (ERR_SYSTEM_ERROR(errcode))
        return errcode & ERR_SYSTEM_MASK;
    return errcode & ERR_REASON_MASK;
}

static ossl_unused ossl_inline int ERR_FATAL_ERROR(unsigned long errcode)
{
    return (ERR_GET_RFLAGS(errcode) & ERR_RFLAG_FATAL) != 0;
}

static ossl_unused ossl_inline int ERR_COMMON_ERROR(unsigned long errcode)
{
    return (ERR_GET_RFLAGS(errcode) & ERR_RFLAG_COMMON) != 0;
}

/*
 * ERR_PACK is a helper macro to properly pack OpenSSL error codes and may
 * only be used for that purpose.  System errors are packed internally.
 * ERR_PACK takes reason flags and reason code combined in |reason|.
 * ERR_PACK ignores |func|, that parameter is just legacy from pre-3.0 OpenSSL.
 */
# define ERR_PACK(lib,func,reason)                                      \
    ( (((unsigned long)(lib)    & ERR_LIB_MASK   ) << ERR_LIB_OFFSET) | \
      (((unsigned long)(reason) & ERR_REASON_MASK)) )

# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define SYS_F_FOPEN             0
#  define SYS_F_CONNECT           0
#  define SYS_F_GETSERVBYNAME     0
#  define SYS_F_SOCKET            0
#  define SYS_F_IOCTLSOCKET       0
#  define SYS_F_BIND              0
#  define SYS_F_LISTEN            0
#  define SYS_F_ACCEPT            0
#  define SYS_F_WSASTARTUP        0
#  define SYS_F_OPENDIR           0
#  define SYS_F_FREAD             0
#  define SYS_F_GETADDRINFO       0
#  define SYS_F_GETNAMEINFO       0
#  define SYS_F_SETSOCKOPT        0
#  define SYS_F_GETSOCKOPT        0
#  define SYS_F_GETSOCKNAME       0
#  define SYS_F_GETHOSTBYNAME     0
#  define SYS_F_FFLUSH            0
#  define SYS_F_OPEN              0
#  define SYS_F_CLOSE             0
#  define SYS_F_IOCTL             0
#  define SYS_F_STAT              0
#  define SYS_F_FCNTL             0
#  define SYS_F_FSTAT             0
#  define SYS_F_SENDFILE          0
# endif

/*
 * All ERR_R_ codes must be combined with ERR_RFLAG_COMMON.
 */

/* "we came from here" global reason codes, range 1..255 */
# define ERR_R_SYS_LIB          (ERR_LIB_SYS/* 2 */ | ERR_RFLAG_COMMON)
# define ERR_R_BN_LIB           (ERR_LIB_BN/* 3 */ | ERR_RFLAG_COMMON)
# define ERR_R_RSA_LIB          (ERR_LIB_RSA/* 4 */ | ERR_RFLAG_COMMON)
# define ERR_R_DH_LIB           (ERR_LIB_DH/* 5 */ | ERR_RFLAG_COMMON)
# define ERR_R_EVP_LIB          (ERR_LIB_EVP/* 6 */ | ERR_RFLAG_COMMON)
# define ERR_R_BUF_LIB          (ERR_LIB_BUF/* 7 */ | ERR_RFLAG_COMMON)
# define ERR_R_OBJ_LIB          (ERR_LIB_OBJ/* 8 */ | ERR_RFLAG_COMMON)
# define ERR_R_PEM_LIB          (ERR_LIB_PEM/* 9 */ | ERR_RFLAG_COMMON)
# define ERR_R_DSA_LIB          (ERR_LIB_DSA/* 10 */ | ERR_RFLAG_COMMON)
# define ERR_R_X509_LIB         (ERR_LIB_X509/* 11 */ | ERR_RFLAG_COMMON)
# define ERR_R_ASN1_LIB         (ERR_LIB_ASN1/* 13 */ | ERR_RFLAG_COMMON)
# define ERR_R_CONF_LIB         (ERR_LIB_CONF/* 14 */ | ERR_RFLAG_COMMON)
# define ERR_R_CRYPTO_LIB       (ERR_LIB_CRYPTO/* 15 */ | ERR_RFLAG_COMMON)
# define ERR_R_EC_LIB           (ERR_LIB_EC/* 16 */ | ERR_RFLAG_COMMON)
# define ERR_R_SSL_LIB          (ERR_LIB_SSL/* 20 */ | ERR_RFLAG_COMMON)
# define ERR_R_BIO_LIB          (ERR_LIB_BIO/* 32 */ | ERR_RFLAG_COMMON)
# define ERR_R_PKCS7_LIB        (ERR_LIB_PKCS7/* 33 */ | ERR_RFLAG_COMMON)
# define ERR_R_X509V3_LIB       (ERR_LIB_X509V3/* 34 */ | ERR_RFLAG_COMMON)
# define ERR_R_PKCS12_LIB       (ERR_LIB_PKCS12/* 35 */ | ERR_RFLAG_COMMON)
# define ERR_R_RAND_LIB         (ERR_LIB_RAND/* 36 */ | ERR_RFLAG_COMMON)
# define ERR_R_DSO_LIB          (ERR_LIB_DSO/* 37 */ | ERR_RFLAG_COMMON)
# define ERR_R_ENGINE_LIB       (ERR_LIB_ENGINE/* 38 */ | ERR_RFLAG_COMMON)
# define ERR_R_UI_LIB           (ERR_LIB_UI/* 40 */ | ERR_RFLAG_COMMON)
# define ERR_R_ECDSA_LIB        (ERR_LIB_ECDSA/* 42 */ | ERR_RFLAG_COMMON)
# define ERR_R_OSSL_STORE_LIB   (ERR_LIB_OSSL_STORE/* 44 */ | ERR_RFLAG_COMMON)
# define ERR_R_CMS_LIB          (ERR_LIB_CMS/* 46 */ | ERR_RFLAG_COMMON)
# define ERR_R_TS_LIB           (ERR_LIB_TS/* 47 */ | ERR_RFLAG_COMMON)
# define ERR_R_CT_LIB           (ERR_LIB_CT/* 50 */ | ERR_RFLAG_COMMON)
# define ERR_R_PROV_LIB         (ERR_LIB_PROV/* 57 */ | ERR_RFLAG_COMMON)
# define ERR_R_ESS_LIB          (ERR_LIB_ESS/* 54 */ | ERR_RFLAG_COMMON)
# define ERR_R_CMP_LIB          (ERR_LIB_CMP/* 58 */ | ERR_RFLAG_COMMON)
# define ERR_R_OSSL_ENCODER_LIB (ERR_LIB_OSSL_ENCODER/* 59 */ | ERR_RFLAG_COMMON)
# define ERR_R_OSSL_DECODER_LIB (ERR_LIB_OSSL_DECODER/* 60 */ | ERR_RFLAG_COMMON)

/* Other common error codes, range 256..2^ERR_RFLAGS_OFFSET-1 */
# define ERR_R_FATAL                             (ERR_RFLAG_FATAL|ERR_RFLAG_COMMON)
# define ERR_R_MALLOC_FAILURE                    (256|ERR_R_FATAL)
# define ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED       (257|ERR_R_FATAL)
# define ERR_R_PASSED_NULL_PARAMETER             (258|ERR_R_FATAL)
# define ERR_R_INTERNAL_ERROR                    (259|ERR_R_FATAL)
# define ERR_R_DISABLED                          (260|ERR_R_FATAL)
# define ERR_R_INIT_FAIL                         (261|ERR_R_FATAL)
# define ERR_R_PASSED_INVALID_ARGUMENT           (262|ERR_RFLAG_COMMON)
# define ERR_R_OPERATION_FAIL                    (263|ERR_R_FATAL)
# define ERR_R_INVALID_PROVIDER_FUNCTIONS        (264|ERR_R_FATAL)
# define ERR_R_INTERRUPTED_OR_CANCELLED          (265|ERR_RFLAG_COMMON)
# define ERR_R_NESTED_ASN1_ERROR                 (266|ERR_RFLAG_COMMON)
# define ERR_R_MISSING_ASN1_EOS                  (267|ERR_RFLAG_COMMON)
# define ERR_R_UNSUPPORTED                       (268|ERR_RFLAG_COMMON)
# define ERR_R_FETCH_FAILED                      (269|ERR_RFLAG_COMMON)
# define ERR_R_INVALID_PROPERTY_DEFINITION       (270|ERR_RFLAG_COMMON)
# define ERR_R_UNABLE_TO_GET_READ_LOCK           (271|ERR_R_FATAL)
# define ERR_R_UNABLE_TO_GET_WRITE_LOCK          (272|ERR_R_FATAL)

typedef struct ERR_string_data_st {
    unsigned long error;
    const char *string;
} ERR_STRING_DATA;

DEFINE_LHASH_OF_INTERNAL(ERR_STRING_DATA);
#define lh_ERR_STRING_DATA_new(hfn, cmp) ((LHASH_OF(ERR_STRING_DATA) *)OPENSSL_LH_new(ossl_check_ERR_STRING_DATA_lh_hashfunc_type(hfn), ossl_check_ERR_STRING_DATA_lh_compfunc_type(cmp)))
#define lh_ERR_STRING_DATA_free(lh) OPENSSL_LH_free(ossl_check_ERR_STRING_DATA_lh_type(lh))
#define lh_ERR_STRING_DATA_flush(lh) OPENSSL_LH_flush(ossl_check_ERR_STRING_DATA_lh_type(lh))
#define lh_ERR_STRING_DATA_insert(lh, ptr) ((ERR_STRING_DATA *)OPENSSL_LH_insert(ossl_check_ERR_STRING_DATA_lh_type(lh), ossl_check_ERR_STRING_DATA_lh_plain_type(ptr)))
#define lh_ERR_STRING_DATA_delete(lh, ptr) ((ERR_STRING_DATA *)OPENSSL_LH_delete(ossl_check_ERR_STRING_DATA_lh_type(lh), ossl_check_const_ERR_STRING_DATA_lh_plain_type(ptr)))
#define lh_ERR_STRING_DATA_retrieve(lh, ptr) ((ERR_STRING_DATA *)OPENSSL_LH_retrieve(ossl_check_ERR_STRING_DATA_lh_type(lh), ossl_check_const_ERR_STRING_DATA_lh_plain_type(ptr)))
#define lh_ERR_STRING_DATA_error(lh) OPENSSL_LH_error(ossl_check_ERR_STRING_DATA_lh_type(lh))
#define lh_ERR_STRING_DATA_num_items(lh) OPENSSL_LH_num_items(ossl_check_ERR_STRING_DATA_lh_type(lh))
#define lh_ERR_STRING_DATA_node_stats_bio(lh, out) OPENSSL_LH_node_stats_bio(ossl_check_const_ERR_STRING_DATA_lh_type(lh), out)
#define lh_ERR_STRING_DATA_node_usage_stats_bio(lh, out) OPENSSL_LH_node_usage_stats_bio(ossl_check_const_ERR_STRING_DATA_lh_type(lh), out)
#define lh_ERR_STRING_DATA_stats_bio(lh, out) OPENSSL_LH_stats_bio(ossl_check_const_ERR_STRING_DATA_lh_type(lh), out)
#define lh_ERR_STRING_DATA_get_down_load(lh) OPENSSL_LH_get_down_load(ossl_check_ERR_STRING_DATA_lh_type(lh))
#define lh_ERR_STRING_DATA_set_down_load(lh, dl) OPENSSL_LH_set_down_load(ossl_check_ERR_STRING_DATA_lh_type(lh), dl)
#define lh_ERR_STRING_DATA_doall(lh, dfn) OPENSSL_LH_doall(ossl_check_ERR_STRING_DATA_lh_type(lh), ossl_check_ERR_STRING_DATA_lh_doallfunc_type(dfn))


/* 12 lines and some on an 80 column terminal */
#define ERR_MAX_DATA_SIZE       1024

/* Building blocks */
void ERR_new(void);
void ERR_set_debug(const char *file, int line, const char *func);
void ERR_set_error(int lib, int reason, const char *fmt, ...);
void ERR_vset_error(int lib, int reason, const char *fmt, va_list args);

/* Main error raising functions */
# define ERR_raise(lib, reason) ERR_raise_data((lib),(reason),NULL)
# define ERR_raise_data                                         \
    (ERR_new(),                                                 \
     ERR_set_debug(OPENSSL_FILE,OPENSSL_LINE,OPENSSL_FUNC),     \
     ERR_set_error)

# ifndef OPENSSL_NO_DEPRECATED_3_0
/* Backward compatibility */
#  define ERR_put_error(lib, func, reason, file, line)          \
    (ERR_new(),                                                 \
     ERR_set_debug((file), (line), OPENSSL_FUNC),               \
     ERR_set_error((lib), (reason), NULL))
# endif

void ERR_set_error_data(char *data, int flags);

unsigned long ERR_get_error(void);
unsigned long ERR_get_error_all(const char **file, int *line,
                                const char **func,
                                const char **data, int *flags);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_get_error_line(const char **file, int *line);
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_get_error_line_data(const char **file, int *line,
                                      const char **data, int *flags);
#endif
unsigned long ERR_peek_error(void);
unsigned long ERR_peek_error_line(const char **file, int *line);
unsigned long ERR_peek_error_func(const char **func);
unsigned long ERR_peek_error_data(const char **data, int *flags);
unsigned long ERR_peek_error_all(const char **file, int *line,
                                 const char **func,
                                 const char **data, int *flags);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_peek_error_line_data(const char **file, int *line,
                                       const char **data, int *flags);
# endif
unsigned long ERR_peek_last_error(void);
unsigned long ERR_peek_last_error_line(const char **file, int *line);
unsigned long ERR_peek_last_error_func(const char **func);
unsigned long ERR_peek_last_error_data(const char **data, int *flags);
unsigned long ERR_peek_last_error_all(const char **file, int *line,
                                      const char **func,
                                      const char **data, int *flags);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
unsigned long ERR_peek_last_error_line_data(const char **file, int *line,
                                            const char **data, int *flags);
# endif

void ERR_clear_error(void);

char *ERR_error_string(unsigned long e, char *buf);
void ERR_error_string_n(unsigned long e, char *buf, size_t len);
const char *ERR_lib_error_string(unsigned long e);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 const char *ERR_func_error_string(unsigned long e);
# endif
const char *ERR_reason_error_string(unsigned long e);

void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
                         void *u);
# ifndef OPENSSL_NO_STDIO
void ERR_print_errors_fp(FILE *fp);
# endif
void ERR_print_errors(BIO *bp);

void ERR_add_error_data(int num, ...);
void ERR_add_error_vdata(int num, va_list args);
void ERR_add_error_txt(const char *sepr, const char *txt);
void ERR_add_error_mem_bio(const char *sep, BIO *bio);

int ERR_load_strings(int lib, ERR_STRING_DATA *str);
int ERR_load_strings_const(const ERR_STRING_DATA *str);
int ERR_unload_strings(int lib, ERR_STRING_DATA *str);

#ifndef OPENSSL_NO_DEPRECATED_1_1_0
# define ERR_load_crypto_strings() \
    OPENSSL_init_crypto(OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL)
# define ERR_free_strings() while(0) continue
#endif
#ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void ERR_remove_thread_state(void *);
#endif
#ifndef OPENSSL_NO_DEPRECATED_1_0_0
OSSL_DEPRECATEDIN_1_0_0 void ERR_remove_state(unsigned long pid);
#endif
#ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 ERR_STATE *ERR_get_state(void);
#endif

int ERR_get_next_error_library(void);

int ERR_set_mark(void);
int ERR_pop_to_mark(void);
int ERR_clear_last_mark(void);

#ifdef  __cplusplus
}
#endif

#endif
                                      node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/ess.h                            0000664 0000000 0000000 00000021410 14746647661 0025477 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/ess.h.in
 *
 * Copyright 2019-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_ESS_H
# define OPENSSL_ESS_H
# pragma once

# include <openssl/opensslconf.h>

# include <openssl/safestack.h>
# include <openssl/x509.h>
# include <openssl/esserr.h>

# ifdef  __cplusplus
extern "C" {
# endif


typedef struct ESS_issuer_serial ESS_ISSUER_SERIAL;
typedef struct ESS_cert_id ESS_CERT_ID;
typedef struct ESS_signing_cert ESS_SIGNING_CERT;

SKM_DEFINE_STACK_OF_INTERNAL(ESS_CERT_ID, ESS_CERT_ID, ESS_CERT_ID)
#define sk_ESS_CERT_ID_num(sk) OPENSSL_sk_num(ossl_check_const_ESS_CERT_ID_sk_type(sk))
#define sk_ESS_CERT_ID_value(sk, idx) ((ESS_CERT_ID *)OPENSSL_sk_value(ossl_check_const_ESS_CERT_ID_sk_type(sk), (idx)))
#define sk_ESS_CERT_ID_new(cmp) ((STACK_OF(ESS_CERT_ID) *)OPENSSL_sk_new(ossl_check_ESS_CERT_ID_compfunc_type(cmp)))
#define sk_ESS_CERT_ID_new_null() ((STACK_OF(ESS_CERT_ID) *)OPENSSL_sk_new_null())
#define sk_ESS_CERT_ID_new_reserve(cmp, n) ((STACK_OF(ESS_CERT_ID) *)OPENSSL_sk_new_reserve(ossl_check_ESS_CERT_ID_compfunc_type(cmp), (n)))
#define sk_ESS_CERT_ID_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ESS_CERT_ID_sk_type(sk), (n))
#define sk_ESS_CERT_ID_free(sk) OPENSSL_sk_free(ossl_check_ESS_CERT_ID_sk_type(sk))
#define sk_ESS_CERT_ID_zero(sk) OPENSSL_sk_zero(ossl_check_ESS_CERT_ID_sk_type(sk))
#define sk_ESS_CERT_ID_delete(sk, i) ((ESS_CERT_ID *)OPENSSL_sk_delete(ossl_check_ESS_CERT_ID_sk_type(sk), (i)))
#define sk_ESS_CERT_ID_delete_ptr(sk, ptr) ((ESS_CERT_ID *)OPENSSL_sk_delete_ptr(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_type(ptr)))
#define sk_ESS_CERT_ID_push(sk, ptr) OPENSSL_sk_push(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_type(ptr))
#define sk_ESS_CERT_ID_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_type(ptr))
#define sk_ESS_CERT_ID_pop(sk) ((ESS_CERT_ID *)OPENSSL_sk_pop(ossl_check_ESS_CERT_ID_sk_type(sk)))
#define sk_ESS_CERT_ID_shift(sk) ((ESS_CERT_ID *)OPENSSL_sk_shift(ossl_check_ESS_CERT_ID_sk_type(sk)))
#define sk_ESS_CERT_ID_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ESS_CERT_ID_sk_type(sk),ossl_check_ESS_CERT_ID_freefunc_type(freefunc))
#define sk_ESS_CERT_ID_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_type(ptr), (idx))
#define sk_ESS_CERT_ID_set(sk, idx, ptr) ((ESS_CERT_ID *)OPENSSL_sk_set(ossl_check_ESS_CERT_ID_sk_type(sk), (idx), ossl_check_ESS_CERT_ID_type(ptr)))
#define sk_ESS_CERT_ID_find(sk, ptr) OPENSSL_sk_find(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_type(ptr))
#define sk_ESS_CERT_ID_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_type(ptr))
#define sk_ESS_CERT_ID_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_type(ptr), pnum)
#define sk_ESS_CERT_ID_sort(sk) OPENSSL_sk_sort(ossl_check_ESS_CERT_ID_sk_type(sk))
#define sk_ESS_CERT_ID_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ESS_CERT_ID_sk_type(sk))
#define sk_ESS_CERT_ID_dup(sk) ((STACK_OF(ESS_CERT_ID) *)OPENSSL_sk_dup(ossl_check_const_ESS_CERT_ID_sk_type(sk)))
#define sk_ESS_CERT_ID_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ESS_CERT_ID) *)OPENSSL_sk_deep_copy(ossl_check_const_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_copyfunc_type(copyfunc), ossl_check_ESS_CERT_ID_freefunc_type(freefunc)))
#define sk_ESS_CERT_ID_set_cmp_func(sk, cmp) ((sk_ESS_CERT_ID_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ESS_CERT_ID_sk_type(sk), ossl_check_ESS_CERT_ID_compfunc_type(cmp)))



typedef struct ESS_signing_cert_v2_st ESS_SIGNING_CERT_V2;
typedef struct ESS_cert_id_v2_st ESS_CERT_ID_V2;

SKM_DEFINE_STACK_OF_INTERNAL(ESS_CERT_ID_V2, ESS_CERT_ID_V2, ESS_CERT_ID_V2)
#define sk_ESS_CERT_ID_V2_num(sk) OPENSSL_sk_num(ossl_check_const_ESS_CERT_ID_V2_sk_type(sk))
#define sk_ESS_CERT_ID_V2_value(sk, idx) ((ESS_CERT_ID_V2 *)OPENSSL_sk_value(ossl_check_const_ESS_CERT_ID_V2_sk_type(sk), (idx)))
#define sk_ESS_CERT_ID_V2_new(cmp) ((STACK_OF(ESS_CERT_ID_V2) *)OPENSSL_sk_new(ossl_check_ESS_CERT_ID_V2_compfunc_type(cmp)))
#define sk_ESS_CERT_ID_V2_new_null() ((STACK_OF(ESS_CERT_ID_V2) *)OPENSSL_sk_new_null())
#define sk_ESS_CERT_ID_V2_new_reserve(cmp, n) ((STACK_OF(ESS_CERT_ID_V2) *)OPENSSL_sk_new_reserve(ossl_check_ESS_CERT_ID_V2_compfunc_type(cmp), (n)))
#define sk_ESS_CERT_ID_V2_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ESS_CERT_ID_V2_sk_type(sk), (n))
#define sk_ESS_CERT_ID_V2_free(sk) OPENSSL_sk_free(ossl_check_ESS_CERT_ID_V2_sk_type(sk))
#define sk_ESS_CERT_ID_V2_zero(sk) OPENSSL_sk_zero(ossl_check_ESS_CERT_ID_V2_sk_type(sk))
#define sk_ESS_CERT_ID_V2_delete(sk, i) ((ESS_CERT_ID_V2 *)OPENSSL_sk_delete(ossl_check_ESS_CERT_ID_V2_sk_type(sk), (i)))
#define sk_ESS_CERT_ID_V2_delete_ptr(sk, ptr) ((ESS_CERT_ID_V2 *)OPENSSL_sk_delete_ptr(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_type(ptr)))
#define sk_ESS_CERT_ID_V2_push(sk, ptr) OPENSSL_sk_push(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_type(ptr))
#define sk_ESS_CERT_ID_V2_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_type(ptr))
#define sk_ESS_CERT_ID_V2_pop(sk) ((ESS_CERT_ID_V2 *)OPENSSL_sk_pop(ossl_check_ESS_CERT_ID_V2_sk_type(sk)))
#define sk_ESS_CERT_ID_V2_shift(sk) ((ESS_CERT_ID_V2 *)OPENSSL_sk_shift(ossl_check_ESS_CERT_ID_V2_sk_type(sk)))
#define sk_ESS_CERT_ID_V2_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ESS_CERT_ID_V2_sk_type(sk),ossl_check_ESS_CERT_ID_V2_freefunc_type(freefunc))
#define sk_ESS_CERT_ID_V2_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_type(ptr), (idx))
#define sk_ESS_CERT_ID_V2_set(sk, idx, ptr) ((ESS_CERT_ID_V2 *)OPENSSL_sk_set(ossl_check_ESS_CERT_ID_V2_sk_type(sk), (idx), ossl_check_ESS_CERT_ID_V2_type(ptr)))
#define sk_ESS_CERT_ID_V2_find(sk, ptr) OPENSSL_sk_find(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_type(ptr))
#define sk_ESS_CERT_ID_V2_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_type(ptr))
#define sk_ESS_CERT_ID_V2_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_type(ptr), pnum)
#define sk_ESS_CERT_ID_V2_sort(sk) OPENSSL_sk_sort(ossl_check_ESS_CERT_ID_V2_sk_type(sk))
#define sk_ESS_CERT_ID_V2_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ESS_CERT_ID_V2_sk_type(sk))
#define sk_ESS_CERT_ID_V2_dup(sk) ((STACK_OF(ESS_CERT_ID_V2) *)OPENSSL_sk_dup(ossl_check_const_ESS_CERT_ID_V2_sk_type(sk)))
#define sk_ESS_CERT_ID_V2_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ESS_CERT_ID_V2) *)OPENSSL_sk_deep_copy(ossl_check_const_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_copyfunc_type(copyfunc), ossl_check_ESS_CERT_ID_V2_freefunc_type(freefunc)))
#define sk_ESS_CERT_ID_V2_set_cmp_func(sk, cmp) ((sk_ESS_CERT_ID_V2_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ESS_CERT_ID_V2_sk_type(sk), ossl_check_ESS_CERT_ID_V2_compfunc_type(cmp)))


DECLARE_ASN1_ALLOC_FUNCTIONS(ESS_ISSUER_SERIAL)
DECLARE_ASN1_ENCODE_FUNCTIONS_only(ESS_ISSUER_SERIAL, ESS_ISSUER_SERIAL)
DECLARE_ASN1_DUP_FUNCTION(ESS_ISSUER_SERIAL)

DECLARE_ASN1_ALLOC_FUNCTIONS(ESS_CERT_ID)
DECLARE_ASN1_ENCODE_FUNCTIONS_only(ESS_CERT_ID, ESS_CERT_ID)
DECLARE_ASN1_DUP_FUNCTION(ESS_CERT_ID)

DECLARE_ASN1_FUNCTIONS(ESS_SIGNING_CERT)
DECLARE_ASN1_DUP_FUNCTION(ESS_SIGNING_CERT)

DECLARE_ASN1_ALLOC_FUNCTIONS(ESS_CERT_ID_V2)
DECLARE_ASN1_ENCODE_FUNCTIONS_only(ESS_CERT_ID_V2, ESS_CERT_ID_V2)
DECLARE_ASN1_DUP_FUNCTION(ESS_CERT_ID_V2)

DECLARE_ASN1_FUNCTIONS(ESS_SIGNING_CERT_V2)
DECLARE_ASN1_DUP_FUNCTION(ESS_SIGNING_CERT_V2)

ESS_SIGNING_CERT *OSSL_ESS_signing_cert_new_init(const X509 *signcert,
                                                 const STACK_OF(X509) *certs,
                                                 int set_issuer_serial);
ESS_SIGNING_CERT_V2 *OSSL_ESS_signing_cert_v2_new_init(const EVP_MD *hash_alg,
                                                       const X509 *signcert,
                                                       const
                                                       STACK_OF(X509) *certs,
                                                       int set_issuer_serial);
int OSSL_ESS_check_signing_certs(const ESS_SIGNING_CERT *ss,
                                 const ESS_SIGNING_CERT_V2 *ssv2,
                                 const STACK_OF(X509) *chain,
                                 int require_signing_cert);

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/fipskey.h                        0000664 0000000 0000000 00000001762 14746647661 0026367 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/fipskey.h.in
 *
 * Copyright 2020-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_FIPSKEY_H
# define OPENSSL_FIPSKEY_H
# pragma once

# ifdef  __cplusplus
extern "C" {
# endif

/*
 * The FIPS validation HMAC key, usable as an array initializer.
 */
#define FIPS_KEY_ELEMENTS \
    0xf4, 0x55, 0x66, 0x50, 0xac, 0x31, 0xd3, 0x54, 0x61, 0x61, 0x0b, 0xac, 0x4e, 0xd8, 0x1b, 0x1a, 0x18, 0x1b, 0x2d, 0x8a, 0x43, 0xea, 0x28, 0x54, 0xcb, 0xae, 0x22, 0xca, 0x74, 0x56, 0x08, 0x13

/*
 * The FIPS validation key, as a string.
 */
#define FIPS_KEY_STRING "f4556650ac31d35461610bac4ed81b1a181b2d8a43ea2854cbae22ca74560813"

# ifdef  __cplusplus
}
# endif

#endif
              node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/lhash.h                          0000664 0000000 0000000 00000033355 14746647661 0026017 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



/*
 * Header for dynamic hash table routines Author - Eric Young
 */

#ifndef OPENSSL_LHASH_H
# define OPENSSL_LHASH_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_LHASH_H
# endif

# include <openssl/e_os2.h>
# include <openssl/bio.h>

#ifdef  __cplusplus
extern "C" {
#endif

typedef struct lhash_node_st OPENSSL_LH_NODE;
typedef int (*OPENSSL_LH_COMPFUNC) (const void *, const void *);
typedef unsigned long (*OPENSSL_LH_HASHFUNC) (const void *);
typedef void (*OPENSSL_LH_DOALL_FUNC) (void *);
typedef void (*OPENSSL_LH_DOALL_FUNCARG) (void *, void *);
typedef struct lhash_st OPENSSL_LHASH;

/*
 * Macros for declaring and implementing type-safe wrappers for LHASH
 * callbacks. This way, callbacks can be provided to LHASH structures without
 * function pointer casting and the macro-defined callbacks provide
 * per-variable casting before deferring to the underlying type-specific
 * callbacks. NB: It is possible to place a "static" in front of both the
 * DECLARE and IMPLEMENT macros if the functions are strictly internal.
 */

/* First: "hash" functions */
# define DECLARE_LHASH_HASH_FN(name, o_type) \
        unsigned long name##_LHASH_HASH(const void *);
# define IMPLEMENT_LHASH_HASH_FN(name, o_type) \
        unsigned long name##_LHASH_HASH(const void *arg) { \
                const o_type *a = arg; \
                return name##_hash(a); }
# define LHASH_HASH_FN(name) name##_LHASH_HASH

/* Second: "compare" functions */
# define DECLARE_LHASH_COMP_FN(name, o_type) \
        int name##_LHASH_COMP(const void *, const void *);
# define IMPLEMENT_LHASH_COMP_FN(name, o_type) \
        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
                const o_type *a = arg1;             \
                const o_type *b = arg2; \
                return name##_cmp(a,b); }
# define LHASH_COMP_FN(name) name##_LHASH_COMP

/* Fourth: "doall_arg" functions */
# define DECLARE_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
        void name##_LHASH_DOALL_ARG(void *, void *);
# define IMPLEMENT_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
        void name##_LHASH_DOALL_ARG(void *arg1, void *arg2) { \
                o_type *a = arg1; \
                a_type *b = arg2; \
                name##_doall_arg(a, b); }
# define LHASH_DOALL_ARG_FN(name) name##_LHASH_DOALL_ARG


# define LH_LOAD_MULT    256

int OPENSSL_LH_error(OPENSSL_LHASH *lh);
OPENSSL_LHASH *OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c);
void OPENSSL_LH_free(OPENSSL_LHASH *lh);
void OPENSSL_LH_flush(OPENSSL_LHASH *lh);
void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data);
void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data);
void *OPENSSL_LH_retrieve(OPENSSL_LHASH *lh, const void *data);
void OPENSSL_LH_doall(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNC func);
void OPENSSL_LH_doall_arg(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNCARG func, void *arg);
unsigned long OPENSSL_LH_strhash(const char *c);
unsigned long OPENSSL_LH_num_items(const OPENSSL_LHASH *lh);
unsigned long OPENSSL_LH_get_down_load(const OPENSSL_LHASH *lh);
void OPENSSL_LH_set_down_load(OPENSSL_LHASH *lh, unsigned long down_load);

# ifndef OPENSSL_NO_STDIO
void OPENSSL_LH_stats(const OPENSSL_LHASH *lh, FILE *fp);
void OPENSSL_LH_node_stats(const OPENSSL_LHASH *lh, FILE *fp);
void OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH *lh, FILE *fp);
# endif
void OPENSSL_LH_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define _LHASH OPENSSL_LHASH
#  define LHASH_NODE OPENSSL_LH_NODE
#  define lh_error OPENSSL_LH_error
#  define lh_new OPENSSL_LH_new
#  define lh_free OPENSSL_LH_free
#  define lh_insert OPENSSL_LH_insert
#  define lh_delete OPENSSL_LH_delete
#  define lh_retrieve OPENSSL_LH_retrieve
#  define lh_doall OPENSSL_LH_doall
#  define lh_doall_arg OPENSSL_LH_doall_arg
#  define lh_strhash OPENSSL_LH_strhash
#  define lh_num_items OPENSSL_LH_num_items
#  ifndef OPENSSL_NO_STDIO
#   define lh_stats OPENSSL_LH_stats
#   define lh_node_stats OPENSSL_LH_node_stats
#   define lh_node_usage_stats OPENSSL_LH_node_usage_stats
#  endif
#  define lh_stats_bio OPENSSL_LH_stats_bio
#  define lh_node_stats_bio OPENSSL_LH_node_stats_bio
#  define lh_node_usage_stats_bio OPENSSL_LH_node_usage_stats_bio
# endif

/* Type checking... */

# define LHASH_OF(type) struct lhash_st_##type

/* Helper macro for internal use */
# define DEFINE_LHASH_OF_INTERNAL(type) \
    LHASH_OF(type) { union lh_##type##_dummy { void* d1; unsigned long d2; int d3; } dummy; }; \
    typedef int (*lh_##type##_compfunc)(const type *a, const type *b); \
    typedef unsigned long (*lh_##type##_hashfunc)(const type *a); \
    typedef void (*lh_##type##_doallfunc)(type *a); \
    static ossl_unused ossl_inline type *ossl_check_##type##_lh_plain_type(type *ptr) \
    { \
        return ptr; \
    } \
    static ossl_unused ossl_inline const type *ossl_check_const_##type##_lh_plain_type(const type *ptr) \
    { \
        return ptr; \
    } \
    static ossl_unused ossl_inline const OPENSSL_LHASH *ossl_check_const_##type##_lh_type(const LHASH_OF(type) *lh) \
    { \
        return (const OPENSSL_LHASH *)lh; \
    } \
    static ossl_unused ossl_inline OPENSSL_LHASH *ossl_check_##type##_lh_type(LHASH_OF(type) *lh) \
    { \
        return (OPENSSL_LHASH *)lh; \
    } \
    static ossl_unused ossl_inline OPENSSL_LH_COMPFUNC ossl_check_##type##_lh_compfunc_type(lh_##type##_compfunc cmp) \
    { \
        return (OPENSSL_LH_COMPFUNC)cmp; \
    } \
    static ossl_unused ossl_inline OPENSSL_LH_HASHFUNC ossl_check_##type##_lh_hashfunc_type(lh_##type##_hashfunc hfn) \
    { \
        return (OPENSSL_LH_HASHFUNC)hfn; \
    } \
    static ossl_unused ossl_inline OPENSSL_LH_DOALL_FUNC ossl_check_##type##_lh_doallfunc_type(lh_##type##_doallfunc dfn) \
    { \
        return (OPENSSL_LH_DOALL_FUNC)dfn; \
    } \
    LHASH_OF(type)

# define DEFINE_LHASH_OF(type) \
    LHASH_OF(type) { union lh_##type##_dummy { void* d1; unsigned long d2; int d3; } dummy; }; \
    static ossl_unused ossl_inline LHASH_OF(type) *lh_##type##_new(unsigned long (*hfn)(const type *), \
                                                                   int (*cfn)(const type *, const type *)) \
    { \
        return (LHASH_OF(type) *) \
            OPENSSL_LH_new((OPENSSL_LH_HASHFUNC)hfn, (OPENSSL_LH_COMPFUNC)cfn); \
    } \
    static ossl_unused ossl_inline void lh_##type##_free(LHASH_OF(type) *lh) \
    { \
        OPENSSL_LH_free((OPENSSL_LHASH *)lh); \
    } \
    static ossl_unused ossl_inline void lh_##type##_flush(LHASH_OF(type) *lh) \
    { \
        OPENSSL_LH_flush((OPENSSL_LHASH *)lh); \
    } \
    static ossl_unused ossl_inline type *lh_##type##_insert(LHASH_OF(type) *lh, type *d) \
    { \
        return (type *)OPENSSL_LH_insert((OPENSSL_LHASH *)lh, d); \
    } \
    static ossl_unused ossl_inline type *lh_##type##_delete(LHASH_OF(type) *lh, const type *d) \
    { \
        return (type *)OPENSSL_LH_delete((OPENSSL_LHASH *)lh, d); \
    } \
    static ossl_unused ossl_inline type *lh_##type##_retrieve(LHASH_OF(type) *lh, const type *d) \
    { \
        return (type *)OPENSSL_LH_retrieve((OPENSSL_LHASH *)lh, d); \
    } \
    static ossl_unused ossl_inline int lh_##type##_error(LHASH_OF(type) *lh) \
    { \
        return OPENSSL_LH_error((OPENSSL_LHASH *)lh); \
    } \
    static ossl_unused ossl_inline unsigned long lh_##type##_num_items(LHASH_OF(type) *lh) \
    { \
        return OPENSSL_LH_num_items((OPENSSL_LHASH *)lh); \
    } \
    static ossl_unused ossl_inline void lh_##type##_node_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
    { \
        OPENSSL_LH_node_stats_bio((const OPENSSL_LHASH *)lh, out); \
    } \
    static ossl_unused ossl_inline void lh_##type##_node_usage_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
    { \
        OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH *)lh, out); \
    } \
    static ossl_unused ossl_inline void lh_##type##_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
    { \
        OPENSSL_LH_stats_bio((const OPENSSL_LHASH *)lh, out); \
    } \
    static ossl_unused ossl_inline unsigned long lh_##type##_get_down_load(LHASH_OF(type) *lh) \
    { \
        return OPENSSL_LH_get_down_load((OPENSSL_LHASH *)lh); \
    } \
    static ossl_unused ossl_inline void lh_##type##_set_down_load(LHASH_OF(type) *lh, unsigned long dl) \
    { \
        OPENSSL_LH_set_down_load((OPENSSL_LHASH *)lh, dl); \
    } \
    static ossl_unused ossl_inline void lh_##type##_doall(LHASH_OF(type) *lh, \
                                                          void (*doall)(type *)) \
    { \
        OPENSSL_LH_doall((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNC)doall); \
    } \
    static ossl_unused ossl_inline void lh_##type##_doall_arg(LHASH_OF(type) *lh, \
                                                              void (*doallarg)(type *, void *), \
                                                              void *arg) \
    { \
        OPENSSL_LH_doall_arg((OPENSSL_LHASH *)lh, \
                             (OPENSSL_LH_DOALL_FUNCARG)doallarg, arg); \
    } \
    LHASH_OF(type)

#define IMPLEMENT_LHASH_DOALL_ARG_CONST(type, argtype) \
    int_implement_lhash_doall(type, argtype, const type)

#define IMPLEMENT_LHASH_DOALL_ARG(type, argtype) \
    int_implement_lhash_doall(type, argtype, type)

#define int_implement_lhash_doall(type, argtype, cbargtype) \
    static ossl_unused ossl_inline void \
        lh_##type##_doall_##argtype(LHASH_OF(type) *lh, \
                                   void (*fn)(cbargtype *, argtype *), \
                                   argtype *arg) \
    { \
        OPENSSL_LH_doall_arg((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNCARG)fn, (void *)arg); \
    } \
    LHASH_OF(type)

DEFINE_LHASH_OF_INTERNAL(OPENSSL_STRING);
#define lh_OPENSSL_STRING_new(hfn, cmp) ((LHASH_OF(OPENSSL_STRING) *)OPENSSL_LH_new(ossl_check_OPENSSL_STRING_lh_hashfunc_type(hfn), ossl_check_OPENSSL_STRING_lh_compfunc_type(cmp)))
#define lh_OPENSSL_STRING_free(lh) OPENSSL_LH_free(ossl_check_OPENSSL_STRING_lh_type(lh))
#define lh_OPENSSL_STRING_flush(lh) OPENSSL_LH_flush(ossl_check_OPENSSL_STRING_lh_type(lh))
#define lh_OPENSSL_STRING_insert(lh, ptr) ((OPENSSL_STRING *)OPENSSL_LH_insert(ossl_check_OPENSSL_STRING_lh_type(lh), ossl_check_OPENSSL_STRING_lh_plain_type(ptr)))
#define lh_OPENSSL_STRING_delete(lh, ptr) ((OPENSSL_STRING *)OPENSSL_LH_delete(ossl_check_OPENSSL_STRING_lh_type(lh), ossl_check_const_OPENSSL_STRING_lh_plain_type(ptr)))
#define lh_OPENSSL_STRING_retrieve(lh, ptr) ((OPENSSL_STRING *)OPENSSL_LH_retrieve(ossl_check_OPENSSL_STRING_lh_type(lh), ossl_check_const_OPENSSL_STRING_lh_plain_type(ptr)))
#define lh_OPENSSL_STRING_error(lh) OPENSSL_LH_error(ossl_check_OPENSSL_STRING_lh_type(lh))
#define lh_OPENSSL_STRING_num_items(lh) OPENSSL_LH_num_items(ossl_check_OPENSSL_STRING_lh_type(lh))
#define lh_OPENSSL_STRING_node_stats_bio(lh, out) OPENSSL_LH_node_stats_bio(ossl_check_const_OPENSSL_STRING_lh_type(lh), out)
#define lh_OPENSSL_STRING_node_usage_stats_bio(lh, out) OPENSSL_LH_node_usage_stats_bio(ossl_check_const_OPENSSL_STRING_lh_type(lh), out)
#define lh_OPENSSL_STRING_stats_bio(lh, out) OPENSSL_LH_stats_bio(ossl_check_const_OPENSSL_STRING_lh_type(lh), out)
#define lh_OPENSSL_STRING_get_down_load(lh) OPENSSL_LH_get_down_load(ossl_check_OPENSSL_STRING_lh_type(lh))
#define lh_OPENSSL_STRING_set_down_load(lh, dl) OPENSSL_LH_set_down_load(ossl_check_OPENSSL_STRING_lh_type(lh), dl)
#define lh_OPENSSL_STRING_doall(lh, dfn) OPENSSL_LH_doall(ossl_check_OPENSSL_STRING_lh_type(lh), ossl_check_OPENSSL_STRING_lh_doallfunc_type(dfn))
DEFINE_LHASH_OF_INTERNAL(OPENSSL_CSTRING);
#define lh_OPENSSL_CSTRING_new(hfn, cmp) ((LHASH_OF(OPENSSL_CSTRING) *)OPENSSL_LH_new(ossl_check_OPENSSL_CSTRING_lh_hashfunc_type(hfn), ossl_check_OPENSSL_CSTRING_lh_compfunc_type(cmp)))
#define lh_OPENSSL_CSTRING_free(lh) OPENSSL_LH_free(ossl_check_OPENSSL_CSTRING_lh_type(lh))
#define lh_OPENSSL_CSTRING_flush(lh) OPENSSL_LH_flush(ossl_check_OPENSSL_CSTRING_lh_type(lh))
#define lh_OPENSSL_CSTRING_insert(lh, ptr) ((OPENSSL_CSTRING *)OPENSSL_LH_insert(ossl_check_OPENSSL_CSTRING_lh_type(lh), ossl_check_OPENSSL_CSTRING_lh_plain_type(ptr)))
#define lh_OPENSSL_CSTRING_delete(lh, ptr) ((OPENSSL_CSTRING *)OPENSSL_LH_delete(ossl_check_OPENSSL_CSTRING_lh_type(lh), ossl_check_const_OPENSSL_CSTRING_lh_plain_type(ptr)))
#define lh_OPENSSL_CSTRING_retrieve(lh, ptr) ((OPENSSL_CSTRING *)OPENSSL_LH_retrieve(ossl_check_OPENSSL_CSTRING_lh_type(lh), ossl_check_const_OPENSSL_CSTRING_lh_plain_type(ptr)))
#define lh_OPENSSL_CSTRING_error(lh) OPENSSL_LH_error(ossl_check_OPENSSL_CSTRING_lh_type(lh))
#define lh_OPENSSL_CSTRING_num_items(lh) OPENSSL_LH_num_items(ossl_check_OPENSSL_CSTRING_lh_type(lh))
#define lh_OPENSSL_CSTRING_node_stats_bio(lh, out) OPENSSL_LH_node_stats_bio(ossl_check_const_OPENSSL_CSTRING_lh_type(lh), out)
#define lh_OPENSSL_CSTRING_node_usage_stats_bio(lh, out) OPENSSL_LH_node_usage_stats_bio(ossl_check_const_OPENSSL_CSTRING_lh_type(lh), out)
#define lh_OPENSSL_CSTRING_stats_bio(lh, out) OPENSSL_LH_stats_bio(ossl_check_const_OPENSSL_CSTRING_lh_type(lh), out)
#define lh_OPENSSL_CSTRING_get_down_load(lh) OPENSSL_LH_get_down_load(ossl_check_OPENSSL_CSTRING_lh_type(lh))
#define lh_OPENSSL_CSTRING_set_down_load(lh, dl) OPENSSL_LH_set_down_load(ossl_check_OPENSSL_CSTRING_lh_type(lh), dl)
#define lh_OPENSSL_CSTRING_doall(lh, dfn) OPENSSL_LH_doall(ossl_check_OPENSSL_CSTRING_lh_type(lh), ossl_check_OPENSSL_CSTRING_lh_doallfunc_type(dfn))


#ifdef  __cplusplus
}
#endif

#endif
                                                                                                                                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/ocsp.h                           0000664 0000000 0000000 00000071250 14746647661 0025660 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/ocsp.h.in
 *
 * Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_OCSP_H
# define OPENSSL_OCSP_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_OCSP_H
# endif

# include <openssl/opensslconf.h>
# include <openssl/http.h>
# include <openssl/asn1.h>

/*
 * These definitions are outside the OPENSSL_NO_OCSP guard because although for
 * historical reasons they have OCSP_* names, they can actually be used
 * independently of OCSP. E.g. see RFC5280
 */
/*-
 *   CRLReason ::= ENUMERATED {
 *        unspecified             (0),
 *        keyCompromise           (1),
 *        cACompromise            (2),
 *        affiliationChanged      (3),
 *        superseded              (4),
 *        cessationOfOperation    (5),
 *        certificateHold         (6),
 *        -- value 7 is not used
 *        removeFromCRL           (8),
 *        privilegeWithdrawn      (9),
 *        aACompromise           (10) }
 */
# define OCSP_REVOKED_STATUS_NOSTATUS                -1
# define OCSP_REVOKED_STATUS_UNSPECIFIED             0
# define OCSP_REVOKED_STATUS_KEYCOMPROMISE           1
# define OCSP_REVOKED_STATUS_CACOMPROMISE            2
# define OCSP_REVOKED_STATUS_AFFILIATIONCHANGED      3
# define OCSP_REVOKED_STATUS_SUPERSEDED              4
# define OCSP_REVOKED_STATUS_CESSATIONOFOPERATION    5
# define OCSP_REVOKED_STATUS_CERTIFICATEHOLD         6
# define OCSP_REVOKED_STATUS_REMOVEFROMCRL           8
# define OCSP_REVOKED_STATUS_PRIVILEGEWITHDRAWN      9
# define OCSP_REVOKED_STATUS_AACOMPROMISE            10


# ifndef OPENSSL_NO_OCSP

#  include <openssl/x509.h>
#  include <openssl/x509v3.h>
#  include <openssl/safestack.h>
#  include <openssl/ocsperr.h>

#  ifdef __cplusplus
extern "C" {
#  endif

/* Various flags and values */

#  define OCSP_DEFAULT_NONCE_LENGTH       16

#  define OCSP_NOCERTS                    0x1
#  define OCSP_NOINTERN                   0x2
#  define OCSP_NOSIGS                     0x4
#  define OCSP_NOCHAIN                    0x8
#  define OCSP_NOVERIFY                   0x10
#  define OCSP_NOEXPLICIT                 0x20
#  define OCSP_NOCASIGN                   0x40
#  define OCSP_NODELEGATED                0x80
#  define OCSP_NOCHECKS                   0x100
#  define OCSP_TRUSTOTHER                 0x200
#  define OCSP_RESPID_KEY                 0x400
#  define OCSP_NOTIME                     0x800
#  define OCSP_PARTIAL_CHAIN              0x1000

typedef struct ocsp_cert_id_st OCSP_CERTID;
typedef struct ocsp_one_request_st OCSP_ONEREQ;
typedef struct ocsp_req_info_st OCSP_REQINFO;
typedef struct ocsp_signature_st OCSP_SIGNATURE;
typedef struct ocsp_request_st OCSP_REQUEST;

SKM_DEFINE_STACK_OF_INTERNAL(OCSP_CERTID, OCSP_CERTID, OCSP_CERTID)
#define sk_OCSP_CERTID_num(sk) OPENSSL_sk_num(ossl_check_const_OCSP_CERTID_sk_type(sk))
#define sk_OCSP_CERTID_value(sk, idx) ((OCSP_CERTID *)OPENSSL_sk_value(ossl_check_const_OCSP_CERTID_sk_type(sk), (idx)))
#define sk_OCSP_CERTID_new(cmp) ((STACK_OF(OCSP_CERTID) *)OPENSSL_sk_new(ossl_check_OCSP_CERTID_compfunc_type(cmp)))
#define sk_OCSP_CERTID_new_null() ((STACK_OF(OCSP_CERTID) *)OPENSSL_sk_new_null())
#define sk_OCSP_CERTID_new_reserve(cmp, n) ((STACK_OF(OCSP_CERTID) *)OPENSSL_sk_new_reserve(ossl_check_OCSP_CERTID_compfunc_type(cmp), (n)))
#define sk_OCSP_CERTID_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OCSP_CERTID_sk_type(sk), (n))
#define sk_OCSP_CERTID_free(sk) OPENSSL_sk_free(ossl_check_OCSP_CERTID_sk_type(sk))
#define sk_OCSP_CERTID_zero(sk) OPENSSL_sk_zero(ossl_check_OCSP_CERTID_sk_type(sk))
#define sk_OCSP_CERTID_delete(sk, i) ((OCSP_CERTID *)OPENSSL_sk_delete(ossl_check_OCSP_CERTID_sk_type(sk), (i)))
#define sk_OCSP_CERTID_delete_ptr(sk, ptr) ((OCSP_CERTID *)OPENSSL_sk_delete_ptr(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_type(ptr)))
#define sk_OCSP_CERTID_push(sk, ptr) OPENSSL_sk_push(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_type(ptr))
#define sk_OCSP_CERTID_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_type(ptr))
#define sk_OCSP_CERTID_pop(sk) ((OCSP_CERTID *)OPENSSL_sk_pop(ossl_check_OCSP_CERTID_sk_type(sk)))
#define sk_OCSP_CERTID_shift(sk) ((OCSP_CERTID *)OPENSSL_sk_shift(ossl_check_OCSP_CERTID_sk_type(sk)))
#define sk_OCSP_CERTID_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OCSP_CERTID_sk_type(sk),ossl_check_OCSP_CERTID_freefunc_type(freefunc))
#define sk_OCSP_CERTID_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_type(ptr), (idx))
#define sk_OCSP_CERTID_set(sk, idx, ptr) ((OCSP_CERTID *)OPENSSL_sk_set(ossl_check_OCSP_CERTID_sk_type(sk), (idx), ossl_check_OCSP_CERTID_type(ptr)))
#define sk_OCSP_CERTID_find(sk, ptr) OPENSSL_sk_find(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_type(ptr))
#define sk_OCSP_CERTID_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_type(ptr))
#define sk_OCSP_CERTID_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_type(ptr), pnum)
#define sk_OCSP_CERTID_sort(sk) OPENSSL_sk_sort(ossl_check_OCSP_CERTID_sk_type(sk))
#define sk_OCSP_CERTID_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OCSP_CERTID_sk_type(sk))
#define sk_OCSP_CERTID_dup(sk) ((STACK_OF(OCSP_CERTID) *)OPENSSL_sk_dup(ossl_check_const_OCSP_CERTID_sk_type(sk)))
#define sk_OCSP_CERTID_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OCSP_CERTID) *)OPENSSL_sk_deep_copy(ossl_check_const_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_copyfunc_type(copyfunc), ossl_check_OCSP_CERTID_freefunc_type(freefunc)))
#define sk_OCSP_CERTID_set_cmp_func(sk, cmp) ((sk_OCSP_CERTID_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OCSP_CERTID_sk_type(sk), ossl_check_OCSP_CERTID_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(OCSP_ONEREQ, OCSP_ONEREQ, OCSP_ONEREQ)
#define sk_OCSP_ONEREQ_num(sk) OPENSSL_sk_num(ossl_check_const_OCSP_ONEREQ_sk_type(sk))
#define sk_OCSP_ONEREQ_value(sk, idx) ((OCSP_ONEREQ *)OPENSSL_sk_value(ossl_check_const_OCSP_ONEREQ_sk_type(sk), (idx)))
#define sk_OCSP_ONEREQ_new(cmp) ((STACK_OF(OCSP_ONEREQ) *)OPENSSL_sk_new(ossl_check_OCSP_ONEREQ_compfunc_type(cmp)))
#define sk_OCSP_ONEREQ_new_null() ((STACK_OF(OCSP_ONEREQ) *)OPENSSL_sk_new_null())
#define sk_OCSP_ONEREQ_new_reserve(cmp, n) ((STACK_OF(OCSP_ONEREQ) *)OPENSSL_sk_new_reserve(ossl_check_OCSP_ONEREQ_compfunc_type(cmp), (n)))
#define sk_OCSP_ONEREQ_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OCSP_ONEREQ_sk_type(sk), (n))
#define sk_OCSP_ONEREQ_free(sk) OPENSSL_sk_free(ossl_check_OCSP_ONEREQ_sk_type(sk))
#define sk_OCSP_ONEREQ_zero(sk) OPENSSL_sk_zero(ossl_check_OCSP_ONEREQ_sk_type(sk))
#define sk_OCSP_ONEREQ_delete(sk, i) ((OCSP_ONEREQ *)OPENSSL_sk_delete(ossl_check_OCSP_ONEREQ_sk_type(sk), (i)))
#define sk_OCSP_ONEREQ_delete_ptr(sk, ptr) ((OCSP_ONEREQ *)OPENSSL_sk_delete_ptr(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_type(ptr)))
#define sk_OCSP_ONEREQ_push(sk, ptr) OPENSSL_sk_push(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_type(ptr))
#define sk_OCSP_ONEREQ_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_type(ptr))
#define sk_OCSP_ONEREQ_pop(sk) ((OCSP_ONEREQ *)OPENSSL_sk_pop(ossl_check_OCSP_ONEREQ_sk_type(sk)))
#define sk_OCSP_ONEREQ_shift(sk) ((OCSP_ONEREQ *)OPENSSL_sk_shift(ossl_check_OCSP_ONEREQ_sk_type(sk)))
#define sk_OCSP_ONEREQ_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OCSP_ONEREQ_sk_type(sk),ossl_check_OCSP_ONEREQ_freefunc_type(freefunc))
#define sk_OCSP_ONEREQ_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_type(ptr), (idx))
#define sk_OCSP_ONEREQ_set(sk, idx, ptr) ((OCSP_ONEREQ *)OPENSSL_sk_set(ossl_check_OCSP_ONEREQ_sk_type(sk), (idx), ossl_check_OCSP_ONEREQ_type(ptr)))
#define sk_OCSP_ONEREQ_find(sk, ptr) OPENSSL_sk_find(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_type(ptr))
#define sk_OCSP_ONEREQ_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_type(ptr))
#define sk_OCSP_ONEREQ_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_type(ptr), pnum)
#define sk_OCSP_ONEREQ_sort(sk) OPENSSL_sk_sort(ossl_check_OCSP_ONEREQ_sk_type(sk))
#define sk_OCSP_ONEREQ_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OCSP_ONEREQ_sk_type(sk))
#define sk_OCSP_ONEREQ_dup(sk) ((STACK_OF(OCSP_ONEREQ) *)OPENSSL_sk_dup(ossl_check_const_OCSP_ONEREQ_sk_type(sk)))
#define sk_OCSP_ONEREQ_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OCSP_ONEREQ) *)OPENSSL_sk_deep_copy(ossl_check_const_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_copyfunc_type(copyfunc), ossl_check_OCSP_ONEREQ_freefunc_type(freefunc)))
#define sk_OCSP_ONEREQ_set_cmp_func(sk, cmp) ((sk_OCSP_ONEREQ_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_check_OCSP_ONEREQ_compfunc_type(cmp)))


#  define OCSP_RESPONSE_STATUS_SUCCESSFUL           0
#  define OCSP_RESPONSE_STATUS_MALFORMEDREQUEST     1
#  define OCSP_RESPONSE_STATUS_INTERNALERROR        2
#  define OCSP_RESPONSE_STATUS_TRYLATER             3
#  define OCSP_RESPONSE_STATUS_SIGREQUIRED          5
#  define OCSP_RESPONSE_STATUS_UNAUTHORIZED         6

typedef struct ocsp_resp_bytes_st OCSP_RESPBYTES;

#  define V_OCSP_RESPID_NAME 0
#  define V_OCSP_RESPID_KEY  1

SKM_DEFINE_STACK_OF_INTERNAL(OCSP_RESPID, OCSP_RESPID, OCSP_RESPID)
#define sk_OCSP_RESPID_num(sk) OPENSSL_sk_num(ossl_check_const_OCSP_RESPID_sk_type(sk))
#define sk_OCSP_RESPID_value(sk, idx) ((OCSP_RESPID *)OPENSSL_sk_value(ossl_check_const_OCSP_RESPID_sk_type(sk), (idx)))
#define sk_OCSP_RESPID_new(cmp) ((STACK_OF(OCSP_RESPID) *)OPENSSL_sk_new(ossl_check_OCSP_RESPID_compfunc_type(cmp)))
#define sk_OCSP_RESPID_new_null() ((STACK_OF(OCSP_RESPID) *)OPENSSL_sk_new_null())
#define sk_OCSP_RESPID_new_reserve(cmp, n) ((STACK_OF(OCSP_RESPID) *)OPENSSL_sk_new_reserve(ossl_check_OCSP_RESPID_compfunc_type(cmp), (n)))
#define sk_OCSP_RESPID_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OCSP_RESPID_sk_type(sk), (n))
#define sk_OCSP_RESPID_free(sk) OPENSSL_sk_free(ossl_check_OCSP_RESPID_sk_type(sk))
#define sk_OCSP_RESPID_zero(sk) OPENSSL_sk_zero(ossl_check_OCSP_RESPID_sk_type(sk))
#define sk_OCSP_RESPID_delete(sk, i) ((OCSP_RESPID *)OPENSSL_sk_delete(ossl_check_OCSP_RESPID_sk_type(sk), (i)))
#define sk_OCSP_RESPID_delete_ptr(sk, ptr) ((OCSP_RESPID *)OPENSSL_sk_delete_ptr(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_type(ptr)))
#define sk_OCSP_RESPID_push(sk, ptr) OPENSSL_sk_push(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_type(ptr))
#define sk_OCSP_RESPID_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_type(ptr))
#define sk_OCSP_RESPID_pop(sk) ((OCSP_RESPID *)OPENSSL_sk_pop(ossl_check_OCSP_RESPID_sk_type(sk)))
#define sk_OCSP_RESPID_shift(sk) ((OCSP_RESPID *)OPENSSL_sk_shift(ossl_check_OCSP_RESPID_sk_type(sk)))
#define sk_OCSP_RESPID_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OCSP_RESPID_sk_type(sk),ossl_check_OCSP_RESPID_freefunc_type(freefunc))
#define sk_OCSP_RESPID_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_type(ptr), (idx))
#define sk_OCSP_RESPID_set(sk, idx, ptr) ((OCSP_RESPID *)OPENSSL_sk_set(ossl_check_OCSP_RESPID_sk_type(sk), (idx), ossl_check_OCSP_RESPID_type(ptr)))
#define sk_OCSP_RESPID_find(sk, ptr) OPENSSL_sk_find(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_type(ptr))
#define sk_OCSP_RESPID_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_type(ptr))
#define sk_OCSP_RESPID_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_type(ptr), pnum)
#define sk_OCSP_RESPID_sort(sk) OPENSSL_sk_sort(ossl_check_OCSP_RESPID_sk_type(sk))
#define sk_OCSP_RESPID_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OCSP_RESPID_sk_type(sk))
#define sk_OCSP_RESPID_dup(sk) ((STACK_OF(OCSP_RESPID) *)OPENSSL_sk_dup(ossl_check_const_OCSP_RESPID_sk_type(sk)))
#define sk_OCSP_RESPID_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OCSP_RESPID) *)OPENSSL_sk_deep_copy(ossl_check_const_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_copyfunc_type(copyfunc), ossl_check_OCSP_RESPID_freefunc_type(freefunc)))
#define sk_OCSP_RESPID_set_cmp_func(sk, cmp) ((sk_OCSP_RESPID_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OCSP_RESPID_sk_type(sk), ossl_check_OCSP_RESPID_compfunc_type(cmp)))


typedef struct ocsp_revoked_info_st OCSP_REVOKEDINFO;

#  define V_OCSP_CERTSTATUS_GOOD    0
#  define V_OCSP_CERTSTATUS_REVOKED 1
#  define V_OCSP_CERTSTATUS_UNKNOWN 2

typedef struct ocsp_cert_status_st OCSP_CERTSTATUS;
typedef struct ocsp_single_response_st OCSP_SINGLERESP;

SKM_DEFINE_STACK_OF_INTERNAL(OCSP_SINGLERESP, OCSP_SINGLERESP, OCSP_SINGLERESP)
#define sk_OCSP_SINGLERESP_num(sk) OPENSSL_sk_num(ossl_check_const_OCSP_SINGLERESP_sk_type(sk))
#define sk_OCSP_SINGLERESP_value(sk, idx) ((OCSP_SINGLERESP *)OPENSSL_sk_value(ossl_check_const_OCSP_SINGLERESP_sk_type(sk), (idx)))
#define sk_OCSP_SINGLERESP_new(cmp) ((STACK_OF(OCSP_SINGLERESP) *)OPENSSL_sk_new(ossl_check_OCSP_SINGLERESP_compfunc_type(cmp)))
#define sk_OCSP_SINGLERESP_new_null() ((STACK_OF(OCSP_SINGLERESP) *)OPENSSL_sk_new_null())
#define sk_OCSP_SINGLERESP_new_reserve(cmp, n) ((STACK_OF(OCSP_SINGLERESP) *)OPENSSL_sk_new_reserve(ossl_check_OCSP_SINGLERESP_compfunc_type(cmp), (n)))
#define sk_OCSP_SINGLERESP_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OCSP_SINGLERESP_sk_type(sk), (n))
#define sk_OCSP_SINGLERESP_free(sk) OPENSSL_sk_free(ossl_check_OCSP_SINGLERESP_sk_type(sk))
#define sk_OCSP_SINGLERESP_zero(sk) OPENSSL_sk_zero(ossl_check_OCSP_SINGLERESP_sk_type(sk))
#define sk_OCSP_SINGLERESP_delete(sk, i) ((OCSP_SINGLERESP *)OPENSSL_sk_delete(ossl_check_OCSP_SINGLERESP_sk_type(sk), (i)))
#define sk_OCSP_SINGLERESP_delete_ptr(sk, ptr) ((OCSP_SINGLERESP *)OPENSSL_sk_delete_ptr(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_type(ptr)))
#define sk_OCSP_SINGLERESP_push(sk, ptr) OPENSSL_sk_push(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_type(ptr))
#define sk_OCSP_SINGLERESP_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_type(ptr))
#define sk_OCSP_SINGLERESP_pop(sk) ((OCSP_SINGLERESP *)OPENSSL_sk_pop(ossl_check_OCSP_SINGLERESP_sk_type(sk)))
#define sk_OCSP_SINGLERESP_shift(sk) ((OCSP_SINGLERESP *)OPENSSL_sk_shift(ossl_check_OCSP_SINGLERESP_sk_type(sk)))
#define sk_OCSP_SINGLERESP_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OCSP_SINGLERESP_sk_type(sk),ossl_check_OCSP_SINGLERESP_freefunc_type(freefunc))
#define sk_OCSP_SINGLERESP_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_type(ptr), (idx))
#define sk_OCSP_SINGLERESP_set(sk, idx, ptr) ((OCSP_SINGLERESP *)OPENSSL_sk_set(ossl_check_OCSP_SINGLERESP_sk_type(sk), (idx), ossl_check_OCSP_SINGLERESP_type(ptr)))
#define sk_OCSP_SINGLERESP_find(sk, ptr) OPENSSL_sk_find(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_type(ptr))
#define sk_OCSP_SINGLERESP_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_type(ptr))
#define sk_OCSP_SINGLERESP_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_type(ptr), pnum)
#define sk_OCSP_SINGLERESP_sort(sk) OPENSSL_sk_sort(ossl_check_OCSP_SINGLERESP_sk_type(sk))
#define sk_OCSP_SINGLERESP_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OCSP_SINGLERESP_sk_type(sk))
#define sk_OCSP_SINGLERESP_dup(sk) ((STACK_OF(OCSP_SINGLERESP) *)OPENSSL_sk_dup(ossl_check_const_OCSP_SINGLERESP_sk_type(sk)))
#define sk_OCSP_SINGLERESP_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OCSP_SINGLERESP) *)OPENSSL_sk_deep_copy(ossl_check_const_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_copyfunc_type(copyfunc), ossl_check_OCSP_SINGLERESP_freefunc_type(freefunc)))
#define sk_OCSP_SINGLERESP_set_cmp_func(sk, cmp) ((sk_OCSP_SINGLERESP_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_check_OCSP_SINGLERESP_compfunc_type(cmp)))


typedef struct ocsp_response_data_st OCSP_RESPDATA;

typedef struct ocsp_basic_response_st OCSP_BASICRESP;

typedef struct ocsp_crl_id_st OCSP_CRLID;
typedef struct ocsp_service_locator_st OCSP_SERVICELOC;

#  define PEM_STRING_OCSP_REQUEST "OCSP REQUEST"
#  define PEM_STRING_OCSP_RESPONSE "OCSP RESPONSE"

#  define d2i_OCSP_REQUEST_bio(bp,p) ASN1_d2i_bio_of(OCSP_REQUEST,OCSP_REQUEST_new,d2i_OCSP_REQUEST,bp,p)

#  define d2i_OCSP_RESPONSE_bio(bp,p) ASN1_d2i_bio_of(OCSP_RESPONSE,OCSP_RESPONSE_new,d2i_OCSP_RESPONSE,bp,p)

#  define PEM_read_bio_OCSP_REQUEST(bp,x,cb) (OCSP_REQUEST *)PEM_ASN1_read_bio( \
     (char *(*)())d2i_OCSP_REQUEST,PEM_STRING_OCSP_REQUEST, \
     bp,(char **)(x),cb,NULL)

#  define PEM_read_bio_OCSP_RESPONSE(bp,x,cb) (OCSP_RESPONSE *)PEM_ASN1_read_bio(\
     (char *(*)())d2i_OCSP_RESPONSE,PEM_STRING_OCSP_RESPONSE, \
     bp,(char **)(x),cb,NULL)

#  define PEM_write_bio_OCSP_REQUEST(bp,o) \
    PEM_ASN1_write_bio((int (*)())i2d_OCSP_REQUEST,PEM_STRING_OCSP_REQUEST,\
                        bp,(char *)(o), NULL,NULL,0,NULL,NULL)

#  define PEM_write_bio_OCSP_RESPONSE(bp,o) \
    PEM_ASN1_write_bio((int (*)())i2d_OCSP_RESPONSE,PEM_STRING_OCSP_RESPONSE,\
                        bp,(char *)(o), NULL,NULL,0,NULL,NULL)

#  define i2d_OCSP_RESPONSE_bio(bp,o) ASN1_i2d_bio_of(OCSP_RESPONSE,i2d_OCSP_RESPONSE,bp,o)

#  define i2d_OCSP_REQUEST_bio(bp,o) ASN1_i2d_bio_of(OCSP_REQUEST,i2d_OCSP_REQUEST,bp,o)

#  define ASN1_BIT_STRING_digest(data,type,md,len) \
        ASN1_item_digest(ASN1_ITEM_rptr(ASN1_BIT_STRING),type,data,md,len)

#  define OCSP_CERTSTATUS_dup(cs)\
                (OCSP_CERTSTATUS*)ASN1_dup((i2d_of_void *)i2d_OCSP_CERTSTATUS,\
                (d2i_of_void *)d2i_OCSP_CERTSTATUS,(char *)(cs))

DECLARE_ASN1_DUP_FUNCTION(OCSP_CERTID)

OSSL_HTTP_REQ_CTX *OCSP_sendreq_new(BIO *io, const char *path,
                                    const OCSP_REQUEST *req, int buf_size);
OCSP_RESPONSE *OCSP_sendreq_bio(BIO *b, const char *path, OCSP_REQUEST *req);

#  ifndef OPENSSL_NO_DEPRECATED_3_0
typedef OSSL_HTTP_REQ_CTX OCSP_REQ_CTX;
#   define OCSP_REQ_CTX_new(io, buf_size) \
        OSSL_HTTP_REQ_CTX_new(io, io, buf_size)
#   define OCSP_REQ_CTX_free OSSL_HTTP_REQ_CTX_free
#   define OCSP_REQ_CTX_http(rctx, op, path) \
        (OSSL_HTTP_REQ_CTX_set_expected(rctx, NULL, 1 /* asn1 */, 0, 0) && \
         OSSL_HTTP_REQ_CTX_set_request_line(rctx, strcmp(op, "POST") == 0, \
                                            NULL, NULL, path))
#   define OCSP_REQ_CTX_add1_header OSSL_HTTP_REQ_CTX_add1_header
#   define OCSP_REQ_CTX_i2d(r, it, req) \
        OSSL_HTTP_REQ_CTX_set1_req(r, "application/ocsp-request", it, req)
#   define OCSP_REQ_CTX_set1_req(r, req) \
        OCSP_REQ_CTX_i2d(r, ASN1_ITEM_rptr(OCSP_REQUEST), (ASN1_VALUE *)(req))
#   define OCSP_REQ_CTX_nbio OSSL_HTTP_REQ_CTX_nbio
#   define OCSP_REQ_CTX_nbio_d2i OSSL_HTTP_REQ_CTX_nbio_d2i
#   define OCSP_sendreq_nbio(p, r) \
        OSSL_HTTP_REQ_CTX_nbio_d2i(r, (ASN1_VALUE **)(p), \
                                   ASN1_ITEM_rptr(OCSP_RESPONSE))
#   define OCSP_REQ_CTX_get0_mem_bio OSSL_HTTP_REQ_CTX_get0_mem_bio
#   define OCSP_set_max_response_length OSSL_HTTP_REQ_CTX_set_max_response_length
#  endif

OCSP_CERTID *OCSP_cert_to_id(const EVP_MD *dgst, const X509 *subject,
                             const X509 *issuer);

OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,
                              const X509_NAME *issuerName,
                              const ASN1_BIT_STRING *issuerKey,
                              const ASN1_INTEGER *serialNumber);

OCSP_ONEREQ *OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid);

int OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len);
int OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len);
int OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs);
int OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req);

int OCSP_request_set1_name(OCSP_REQUEST *req, const X509_NAME *nm);
int OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert);

int OCSP_request_sign(OCSP_REQUEST *req,
                      X509 *signer,
                      EVP_PKEY *key,
                      const EVP_MD *dgst,
                      STACK_OF(X509) *certs, unsigned long flags);

int OCSP_response_status(OCSP_RESPONSE *resp);
OCSP_BASICRESP *OCSP_response_get1_basic(OCSP_RESPONSE *resp);

const ASN1_OCTET_STRING *OCSP_resp_get0_signature(const OCSP_BASICRESP *bs);
const X509_ALGOR *OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP *bs);
const OCSP_RESPDATA *OCSP_resp_get0_respdata(const OCSP_BASICRESP *bs);
int OCSP_resp_get0_signer(OCSP_BASICRESP *bs, X509 **signer,
                          STACK_OF(X509) *extra_certs);

int OCSP_resp_count(OCSP_BASICRESP *bs);
OCSP_SINGLERESP *OCSP_resp_get0(OCSP_BASICRESP *bs, int idx);
const ASN1_GENERALIZEDTIME *OCSP_resp_get0_produced_at(const OCSP_BASICRESP* bs);
const STACK_OF(X509) *OCSP_resp_get0_certs(const OCSP_BASICRESP *bs);
int OCSP_resp_get0_id(const OCSP_BASICRESP *bs,
                      const ASN1_OCTET_STRING **pid,
                      const X509_NAME **pname);
int OCSP_resp_get1_id(const OCSP_BASICRESP *bs,
                      ASN1_OCTET_STRING **pid,
                      X509_NAME **pname);

int OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last);
int OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
                            ASN1_GENERALIZEDTIME **revtime,
                            ASN1_GENERALIZEDTIME **thisupd,
                            ASN1_GENERALIZEDTIME **nextupd);
int OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
                          int *reason,
                          ASN1_GENERALIZEDTIME **revtime,
                          ASN1_GENERALIZEDTIME **thisupd,
                          ASN1_GENERALIZEDTIME **nextupd);
int OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,
                        ASN1_GENERALIZEDTIME *nextupd, long sec, long maxsec);

int OCSP_request_verify(OCSP_REQUEST *req, STACK_OF(X509) *certs,
                        X509_STORE *store, unsigned long flags);

#  define OCSP_parse_url(url, host, port, path, ssl) \
    OSSL_HTTP_parse_url(url, ssl, NULL, host, port, NULL, path, NULL, NULL)

int OCSP_id_issuer_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);
int OCSP_id_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);

int OCSP_request_onereq_count(OCSP_REQUEST *req);
OCSP_ONEREQ *OCSP_request_onereq_get0(OCSP_REQUEST *req, int i);
OCSP_CERTID *OCSP_onereq_get0_id(OCSP_ONEREQ *one);
int OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
                      ASN1_OCTET_STRING **pikeyHash,
                      ASN1_INTEGER **pserial, OCSP_CERTID *cid);
int OCSP_request_is_signed(OCSP_REQUEST *req);
OCSP_RESPONSE *OCSP_response_create(int status, OCSP_BASICRESP *bs);
OCSP_SINGLERESP *OCSP_basic_add1_status(OCSP_BASICRESP *rsp,
                                        OCSP_CERTID *cid,
                                        int status, int reason,
                                        ASN1_TIME *revtime,
                                        ASN1_TIME *thisupd,
                                        ASN1_TIME *nextupd);
int OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert);
int OCSP_basic_sign(OCSP_BASICRESP *brsp,
                    X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,
                    STACK_OF(X509) *certs, unsigned long flags);
int OCSP_basic_sign_ctx(OCSP_BASICRESP *brsp,
                        X509 *signer, EVP_MD_CTX *ctx,
                        STACK_OF(X509) *certs, unsigned long flags);
int OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert);
int OCSP_RESPID_set_by_key_ex(OCSP_RESPID *respid, X509 *cert,
                              OSSL_LIB_CTX *libctx, const char *propq);
int OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert);
int OCSP_RESPID_match_ex(OCSP_RESPID *respid, X509 *cert, OSSL_LIB_CTX *libctx,
                         const char *propq);
int OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert);

X509_EXTENSION *OCSP_crlID_new(const char *url, long *n, char *tim);

X509_EXTENSION *OCSP_accept_responses_new(char **oids);

X509_EXTENSION *OCSP_archive_cutoff_new(char *tim);

X509_EXTENSION *OCSP_url_svcloc_new(const X509_NAME *issuer, const char **urls);

int OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x);
int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos);
int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, const ASN1_OBJECT *obj,
                                int lastpos);
int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos);
X509_EXTENSION *OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc);
X509_EXTENSION *OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc);
void *OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit,
                                int *idx);
int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,
                              unsigned long flags);
int OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc);

int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x);
int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos);
int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, const ASN1_OBJECT *obj, int lastpos);
int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos);
X509_EXTENSION *OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc);
X509_EXTENSION *OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc);
void *OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx);
int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,
                             unsigned long flags);
int OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc);

int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x);
int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos);
int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, const ASN1_OBJECT *obj,
                                  int lastpos);
int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit,
                                       int lastpos);
X509_EXTENSION *OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc);
X509_EXTENSION *OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc);
void *OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit,
                                  int *idx);
int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value,
                                int crit, unsigned long flags);
int OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc);

int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x);
int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos);
int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, const ASN1_OBJECT *obj,
                                   int lastpos);
int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit,
                                        int lastpos);
X509_EXTENSION *OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc);
X509_EXTENSION *OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc);
void *OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit,
                                   int *idx);
int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value,
                                 int crit, unsigned long flags);
int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc);
const OCSP_CERTID *OCSP_SINGLERESP_get0_id(const OCSP_SINGLERESP *x);

DECLARE_ASN1_FUNCTIONS(OCSP_SINGLERESP)
DECLARE_ASN1_FUNCTIONS(OCSP_CERTSTATUS)
DECLARE_ASN1_FUNCTIONS(OCSP_REVOKEDINFO)
DECLARE_ASN1_FUNCTIONS(OCSP_BASICRESP)
DECLARE_ASN1_FUNCTIONS(OCSP_RESPDATA)
DECLARE_ASN1_FUNCTIONS(OCSP_RESPID)
DECLARE_ASN1_FUNCTIONS(OCSP_RESPONSE)
DECLARE_ASN1_FUNCTIONS(OCSP_RESPBYTES)
DECLARE_ASN1_FUNCTIONS(OCSP_ONEREQ)
DECLARE_ASN1_FUNCTIONS(OCSP_CERTID)
DECLARE_ASN1_FUNCTIONS(OCSP_REQUEST)
DECLARE_ASN1_FUNCTIONS(OCSP_SIGNATURE)
DECLARE_ASN1_FUNCTIONS(OCSP_REQINFO)
DECLARE_ASN1_FUNCTIONS(OCSP_CRLID)
DECLARE_ASN1_FUNCTIONS(OCSP_SERVICELOC)

const char *OCSP_response_status_str(long s);
const char *OCSP_cert_status_str(long s);
const char *OCSP_crl_reason_str(long s);

int OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *a, unsigned long flags);
int OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE *o, unsigned long flags);

int OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,
                      X509_STORE *st, unsigned long flags);


#  ifdef  __cplusplus
}
#  endif
# endif /* !defined(OPENSSL_NO_OCSP) */
#endif
                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/opensslv.h                       0000664 0000000 0000000 00000006206 14746647661 0026564 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/opensslv.h.in
 *
 * Copyright 1999-2020 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_OPENSSLV_H
# define OPENSSL_OPENSSLV_H
# pragma once

# ifdef  __cplusplus
extern "C" {
# endif

/*
 * SECTION 1: VERSION DATA.  These will change for each release
 */

/*
 * Base version macros
 *
 * These macros express version number MAJOR.MINOR.PATCH exactly
 */
# define OPENSSL_VERSION_MAJOR  3
# define OPENSSL_VERSION_MINOR  0
# define OPENSSL_VERSION_PATCH  15

/*
 * Additional version information
 *
 * These are also part of the new version scheme, but aren't part
 * of the version number itself.
 */

/* Could be: #define OPENSSL_VERSION_PRE_RELEASE "-alpha.1" */
# define OPENSSL_VERSION_PRE_RELEASE ""
/* Could be: #define OPENSSL_VERSION_BUILD_METADATA "+fips" */
/* Could be: #define OPENSSL_VERSION_BUILD_METADATA "+vendor.1" */
# define OPENSSL_VERSION_BUILD_METADATA "+quic"

/*
 * Note: The OpenSSL Project will never define OPENSSL_VERSION_BUILD_METADATA
 * to be anything but the empty string.  Its use is entirely reserved for
 * others
 */

/*
 * Shared library version
 *
 * This is strictly to express ABI version, which may or may not
 * be related to the API version expressed with the macros above.
 * This is defined in free form.
 */
# define OPENSSL_SHLIB_VERSION 81.3

/*
 * SECTION 2: USEFUL MACROS
 */

/* For checking general API compatibility when preprocessing */
# define OPENSSL_VERSION_PREREQ(maj,min)                                \
    ((OPENSSL_VERSION_MAJOR << 16) + OPENSSL_VERSION_MINOR >= ((maj) << 16) + (min))

/*
 * Macros to get the version in easily digested string form, both the short
 * "MAJOR.MINOR.PATCH" variant (where MAJOR, MINOR and PATCH are replaced
 * with the values from the corresponding OPENSSL_VERSION_ macros) and the
 * longer variant with OPENSSL_VERSION_PRE_RELEASE_STR and
 * OPENSSL_VERSION_BUILD_METADATA_STR appended.
 */
# define OPENSSL_VERSION_STR "3.0.15"
# define OPENSSL_FULL_VERSION_STR "3.0.15+quic"

/*
 * SECTION 3: ADDITIONAL METADATA
 *
 * These strings are defined separately to allow them to be parsable.
 */
# define OPENSSL_RELEASE_DATE "3 Sep 2024"

/*
 * SECTION 4: BACKWARD COMPATIBILITY
 */

# define OPENSSL_VERSION_TEXT "OpenSSL 3.0.15+quic 3 Sep 2024"

/* Synthesize OPENSSL_VERSION_NUMBER with the layout 0xMNN00PPSL */
# ifdef OPENSSL_VERSION_PRE_RELEASE
#  define _OPENSSL_VERSION_PRE_RELEASE 0x0L
# else
#  define _OPENSSL_VERSION_PRE_RELEASE 0xfL
# endif
# define OPENSSL_VERSION_NUMBER          \
    ( (OPENSSL_VERSION_MAJOR<<28)        \
      |(OPENSSL_VERSION_MINOR<<20)       \
      |(OPENSSL_VERSION_PATCH<<4)        \
      |_OPENSSL_VERSION_PRE_RELEASE )

# ifdef  __cplusplus
}
# endif

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_OPENSSLV_H
# endif

#endif                          /* OPENSSL_OPENSSLV_H */
                                                                                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/pkcs12.h                         0000664 0000000 0000000 00000045564 14746647661 0026030 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/pkcs12.h.in
 *
 * Copyright 1999-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_PKCS12_H
# define OPENSSL_PKCS12_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_PKCS12_H
# endif

# include <openssl/bio.h>
# include <openssl/core.h>
# include <openssl/x509.h>
# include <openssl/pkcs12err.h>

#ifdef __cplusplus
extern "C" {
#endif

# define PKCS12_KEY_ID   1
# define PKCS12_IV_ID    2
# define PKCS12_MAC_ID   3

/* Default iteration count */
# ifndef PKCS12_DEFAULT_ITER
#  define PKCS12_DEFAULT_ITER     PKCS5_DEFAULT_ITER
# endif

# define PKCS12_MAC_KEY_LENGTH 20

# define PKCS12_SALT_LEN 8

/* It's not clear if these are actually needed... */
# define PKCS12_key_gen PKCS12_key_gen_utf8
# define PKCS12_add_friendlyname PKCS12_add_friendlyname_utf8

/* MS key usage constants */

# define KEY_EX  0x10
# define KEY_SIG 0x80

typedef struct PKCS12_MAC_DATA_st PKCS12_MAC_DATA;

typedef struct PKCS12_st PKCS12;

typedef struct PKCS12_SAFEBAG_st PKCS12_SAFEBAG;

SKM_DEFINE_STACK_OF_INTERNAL(PKCS12_SAFEBAG, PKCS12_SAFEBAG, PKCS12_SAFEBAG)
#define sk_PKCS12_SAFEBAG_num(sk) OPENSSL_sk_num(ossl_check_const_PKCS12_SAFEBAG_sk_type(sk))
#define sk_PKCS12_SAFEBAG_value(sk, idx) ((PKCS12_SAFEBAG *)OPENSSL_sk_value(ossl_check_const_PKCS12_SAFEBAG_sk_type(sk), (idx)))
#define sk_PKCS12_SAFEBAG_new(cmp) ((STACK_OF(PKCS12_SAFEBAG) *)OPENSSL_sk_new(ossl_check_PKCS12_SAFEBAG_compfunc_type(cmp)))
#define sk_PKCS12_SAFEBAG_new_null() ((STACK_OF(PKCS12_SAFEBAG) *)OPENSSL_sk_new_null())
#define sk_PKCS12_SAFEBAG_new_reserve(cmp, n) ((STACK_OF(PKCS12_SAFEBAG) *)OPENSSL_sk_new_reserve(ossl_check_PKCS12_SAFEBAG_compfunc_type(cmp), (n)))
#define sk_PKCS12_SAFEBAG_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_PKCS12_SAFEBAG_sk_type(sk), (n))
#define sk_PKCS12_SAFEBAG_free(sk) OPENSSL_sk_free(ossl_check_PKCS12_SAFEBAG_sk_type(sk))
#define sk_PKCS12_SAFEBAG_zero(sk) OPENSSL_sk_zero(ossl_check_PKCS12_SAFEBAG_sk_type(sk))
#define sk_PKCS12_SAFEBAG_delete(sk, i) ((PKCS12_SAFEBAG *)OPENSSL_sk_delete(ossl_check_PKCS12_SAFEBAG_sk_type(sk), (i)))
#define sk_PKCS12_SAFEBAG_delete_ptr(sk, ptr) ((PKCS12_SAFEBAG *)OPENSSL_sk_delete_ptr(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_type(ptr)))
#define sk_PKCS12_SAFEBAG_push(sk, ptr) OPENSSL_sk_push(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_type(ptr))
#define sk_PKCS12_SAFEBAG_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_type(ptr))
#define sk_PKCS12_SAFEBAG_pop(sk) ((PKCS12_SAFEBAG *)OPENSSL_sk_pop(ossl_check_PKCS12_SAFEBAG_sk_type(sk)))
#define sk_PKCS12_SAFEBAG_shift(sk) ((PKCS12_SAFEBAG *)OPENSSL_sk_shift(ossl_check_PKCS12_SAFEBAG_sk_type(sk)))
#define sk_PKCS12_SAFEBAG_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_PKCS12_SAFEBAG_sk_type(sk),ossl_check_PKCS12_SAFEBAG_freefunc_type(freefunc))
#define sk_PKCS12_SAFEBAG_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_type(ptr), (idx))
#define sk_PKCS12_SAFEBAG_set(sk, idx, ptr) ((PKCS12_SAFEBAG *)OPENSSL_sk_set(ossl_check_PKCS12_SAFEBAG_sk_type(sk), (idx), ossl_check_PKCS12_SAFEBAG_type(ptr)))
#define sk_PKCS12_SAFEBAG_find(sk, ptr) OPENSSL_sk_find(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_type(ptr))
#define sk_PKCS12_SAFEBAG_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_type(ptr))
#define sk_PKCS12_SAFEBAG_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_type(ptr), pnum)
#define sk_PKCS12_SAFEBAG_sort(sk) OPENSSL_sk_sort(ossl_check_PKCS12_SAFEBAG_sk_type(sk))
#define sk_PKCS12_SAFEBAG_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_PKCS12_SAFEBAG_sk_type(sk))
#define sk_PKCS12_SAFEBAG_dup(sk) ((STACK_OF(PKCS12_SAFEBAG) *)OPENSSL_sk_dup(ossl_check_const_PKCS12_SAFEBAG_sk_type(sk)))
#define sk_PKCS12_SAFEBAG_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(PKCS12_SAFEBAG) *)OPENSSL_sk_deep_copy(ossl_check_const_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_copyfunc_type(copyfunc), ossl_check_PKCS12_SAFEBAG_freefunc_type(freefunc)))
#define sk_PKCS12_SAFEBAG_set_cmp_func(sk, cmp) ((sk_PKCS12_SAFEBAG_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_check_PKCS12_SAFEBAG_compfunc_type(cmp)))


typedef struct pkcs12_bag_st PKCS12_BAGS;

# define PKCS12_ERROR    0
# define PKCS12_OK       1

/* Compatibility macros */

#ifndef OPENSSL_NO_DEPRECATED_1_1_0

# define M_PKCS12_bag_type PKCS12_bag_type
# define M_PKCS12_cert_bag_type PKCS12_cert_bag_type
# define M_PKCS12_crl_bag_type PKCS12_cert_bag_type

# define PKCS12_certbag2x509 PKCS12_SAFEBAG_get1_cert
# define PKCS12_certbag2scrl PKCS12_SAFEBAG_get1_crl
# define PKCS12_bag_type PKCS12_SAFEBAG_get_nid
# define PKCS12_cert_bag_type PKCS12_SAFEBAG_get_bag_nid
# define PKCS12_x5092certbag PKCS12_SAFEBAG_create_cert
# define PKCS12_x509crl2certbag PKCS12_SAFEBAG_create_crl
# define PKCS12_MAKE_KEYBAG PKCS12_SAFEBAG_create0_p8inf
# define PKCS12_MAKE_SHKEYBAG PKCS12_SAFEBAG_create_pkcs8_encrypt

#endif
#ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 ASN1_TYPE *PKCS12_get_attr(const PKCS12_SAFEBAG *bag,
                                                   int attr_nid);
#endif

ASN1_TYPE *PKCS8_get_attr(PKCS8_PRIV_KEY_INFO *p8, int attr_nid);
int PKCS12_mac_present(const PKCS12 *p12);
void PKCS12_get0_mac(const ASN1_OCTET_STRING **pmac,
                     const X509_ALGOR **pmacalg,
                     const ASN1_OCTET_STRING **psalt,
                     const ASN1_INTEGER **piter,
                     const PKCS12 *p12);

const ASN1_TYPE *PKCS12_SAFEBAG_get0_attr(const PKCS12_SAFEBAG *bag,
                                          int attr_nid);
const ASN1_OBJECT *PKCS12_SAFEBAG_get0_type(const PKCS12_SAFEBAG *bag);
int PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG *bag);
int PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG *bag);
const ASN1_TYPE *PKCS12_SAFEBAG_get0_bag_obj(const PKCS12_SAFEBAG *bag);
const ASN1_OBJECT *PKCS12_SAFEBAG_get0_bag_type(const PKCS12_SAFEBAG *bag);

X509 *PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG *bag);
X509_CRL *PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG *bag);
const STACK_OF(PKCS12_SAFEBAG) *
PKCS12_SAFEBAG_get0_safes(const PKCS12_SAFEBAG *bag);
const PKCS8_PRIV_KEY_INFO *PKCS12_SAFEBAG_get0_p8inf(const PKCS12_SAFEBAG *bag);
const X509_SIG *PKCS12_SAFEBAG_get0_pkcs8(const PKCS12_SAFEBAG *bag);

PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_cert(X509 *x509);
PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_crl(X509_CRL *crl);
PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_secret(int type, int vtype, const unsigned char *value, int len);
PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO *p8);
PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_pkcs8(X509_SIG *p8);
PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid,
                                                    const char *pass,
                                                    int passlen,
                                                    unsigned char *salt,
                                                    int saltlen, int iter,
                                                    PKCS8_PRIV_KEY_INFO *p8inf);
PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_pkcs8_encrypt_ex(int pbe_nid,
                                                       const char *pass,
                                                       int passlen,
                                                       unsigned char *salt,
                                                       int saltlen, int iter,
                                                       PKCS8_PRIV_KEY_INFO *p8inf,
                                                       OSSL_LIB_CTX *ctx,
                                                       const char *propq);

PKCS12_SAFEBAG *PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it,
                                         int nid1, int nid2);
PKCS8_PRIV_KEY_INFO *PKCS8_decrypt(const X509_SIG *p8, const char *pass,
                                   int passlen);
PKCS8_PRIV_KEY_INFO *PKCS8_decrypt_ex(const X509_SIG *p8, const char *pass,
                                      int passlen, OSSL_LIB_CTX *ctx,
                                      const char *propq);
PKCS8_PRIV_KEY_INFO *PKCS12_decrypt_skey(const PKCS12_SAFEBAG *bag,
                                         const char *pass, int passlen);
PKCS8_PRIV_KEY_INFO *PKCS12_decrypt_skey_ex(const PKCS12_SAFEBAG *bag,
                                            const char *pass, int passlen,
                                            OSSL_LIB_CTX *ctx,
                                            const char *propq);
X509_SIG *PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,
                        const char *pass, int passlen, unsigned char *salt,
                        int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8);
X509_SIG *PKCS8_encrypt_ex(int pbe_nid, const EVP_CIPHER *cipher,
                           const char *pass, int passlen, unsigned char *salt,
                           int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8,
                           OSSL_LIB_CTX *ctx, const char *propq);
X509_SIG *PKCS8_set0_pbe(const char *pass, int passlen,
                        PKCS8_PRIV_KEY_INFO *p8inf, X509_ALGOR *pbe);
X509_SIG *PKCS8_set0_pbe_ex(const char *pass, int passlen,
                            PKCS8_PRIV_KEY_INFO *p8inf, X509_ALGOR *pbe,
                            OSSL_LIB_CTX *ctx, const char *propq);
PKCS7 *PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk);
STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7data(PKCS7 *p7);
PKCS7 *PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
                             unsigned char *salt, int saltlen, int iter,
                             STACK_OF(PKCS12_SAFEBAG) *bags);
PKCS7 *PKCS12_pack_p7encdata_ex(int pbe_nid, const char *pass, int passlen,
                                unsigned char *salt, int saltlen, int iter,
                                STACK_OF(PKCS12_SAFEBAG) *bags,
                                OSSL_LIB_CTX *ctx, const char *propq);

STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass,
                                                  int passlen);

int PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes);
STACK_OF(PKCS7) *PKCS12_unpack_authsafes(const PKCS12 *p12);

int PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
                          int namelen);
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
                                int namelen);
int PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG *bag, const char *name,
                                 int namelen);
int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name,
                           int namelen);
int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
                                const unsigned char *name, int namelen);
int PKCS12_add1_attr_by_NID(PKCS12_SAFEBAG *bag, int nid, int type,
                            const unsigned char *bytes, int len);
int PKCS12_add1_attr_by_txt(PKCS12_SAFEBAG *bag, const char *attrname, int type,
                            const unsigned char *bytes, int len);
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage);
ASN1_TYPE *PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) *attrs,
                               int attr_nid);
char *PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag);
const STACK_OF(X509_ATTRIBUTE) *
PKCS12_SAFEBAG_get0_attrs(const PKCS12_SAFEBAG *bag);
unsigned char *PKCS12_pbe_crypt(const X509_ALGOR *algor,
                                const char *pass, int passlen,
                                const unsigned char *in, int inlen,
                                unsigned char **data, int *datalen,
                                int en_de);
unsigned char *PKCS12_pbe_crypt_ex(const X509_ALGOR *algor,
                                   const char *pass, int passlen,
                                   const unsigned char *in, int inlen,
                                   unsigned char **data, int *datalen,
                                   int en_de, OSSL_LIB_CTX *libctx,
                                   const char *propq);
void *PKCS12_item_decrypt_d2i(const X509_ALGOR *algor, const ASN1_ITEM *it,
                              const char *pass, int passlen,
                              const ASN1_OCTET_STRING *oct, int zbuf);
void *PKCS12_item_decrypt_d2i_ex(const X509_ALGOR *algor, const ASN1_ITEM *it,
                                 const char *pass, int passlen,
                                 const ASN1_OCTET_STRING *oct, int zbuf,
                                 OSSL_LIB_CTX *libctx, 
                                 const char *propq);
ASN1_OCTET_STRING *PKCS12_item_i2d_encrypt(X509_ALGOR *algor,
                                           const ASN1_ITEM *it,
                                           const char *pass, int passlen,
                                           void *obj, int zbuf);
ASN1_OCTET_STRING *PKCS12_item_i2d_encrypt_ex(X509_ALGOR *algor,
                                              const ASN1_ITEM *it,
                                              const char *pass, int passlen,
                                              void *obj, int zbuf,
                                              OSSL_LIB_CTX *ctx,
                                              const char *propq);
PKCS12 *PKCS12_init(int mode);
PKCS12 *PKCS12_init_ex(int mode, OSSL_LIB_CTX *ctx, const char *propq);

int PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
                       int saltlen, int id, int iter, int n,
                       unsigned char *out, const EVP_MD *md_type);
int PKCS12_key_gen_asc_ex(const char *pass, int passlen, unsigned char *salt,
                          int saltlen, int id, int iter, int n,
                          unsigned char *out, const EVP_MD *md_type,
                          OSSL_LIB_CTX *ctx, const char *propq);
int PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
                       int saltlen, int id, int iter, int n,
                       unsigned char *out, const EVP_MD *md_type);
int PKCS12_key_gen_uni_ex(unsigned char *pass, int passlen, unsigned char *salt,
                          int saltlen, int id, int iter, int n,
                          unsigned char *out, const EVP_MD *md_type,
                          OSSL_LIB_CTX *ctx, const char *propq);
int PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt,
                        int saltlen, int id, int iter, int n,
                        unsigned char *out, const EVP_MD *md_type);
int PKCS12_key_gen_utf8_ex(const char *pass, int passlen, unsigned char *salt,
                           int saltlen, int id, int iter, int n,
                           unsigned char *out, const EVP_MD *md_type,
                           OSSL_LIB_CTX *ctx, const char *propq);

int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                        ASN1_TYPE *param, const EVP_CIPHER *cipher,
                        const EVP_MD *md_type, int en_de);
int PKCS12_PBE_keyivgen_ex(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                           ASN1_TYPE *param, const EVP_CIPHER *cipher,
                           const EVP_MD *md_type, int en_de,
                           OSSL_LIB_CTX *libctx, const char *propq);
int PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
                   unsigned char *mac, unsigned int *maclen);
int PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen);
int PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
                   unsigned char *salt, int saltlen, int iter,
                   const EVP_MD *md_type);
int PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt,
                     int saltlen, const EVP_MD *md_type);
unsigned char *OPENSSL_asc2uni(const char *asc, int asclen,
                               unsigned char **uni, int *unilen);
char *OPENSSL_uni2asc(const unsigned char *uni, int unilen);
unsigned char *OPENSSL_utf82uni(const char *asc, int asclen,
                                unsigned char **uni, int *unilen);
char *OPENSSL_uni2utf8(const unsigned char *uni, int unilen);

DECLARE_ASN1_FUNCTIONS(PKCS12)
DECLARE_ASN1_FUNCTIONS(PKCS12_MAC_DATA)
DECLARE_ASN1_FUNCTIONS(PKCS12_SAFEBAG)
DECLARE_ASN1_FUNCTIONS(PKCS12_BAGS)

DECLARE_ASN1_ITEM(PKCS12_SAFEBAGS)
DECLARE_ASN1_ITEM(PKCS12_AUTHSAFES)

void PKCS12_PBE_add(void);
int PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
                 STACK_OF(X509) **ca);
PKCS12 *PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey,
                      X509 *cert, STACK_OF(X509) *ca, int nid_key, int nid_cert,
                      int iter, int mac_iter, int keytype);
PKCS12 *PKCS12_create_ex(const char *pass, const char *name, EVP_PKEY *pkey,
                         X509 *cert, STACK_OF(X509) *ca, int nid_key, int nid_cert,
                         int iter, int mac_iter, int keytype,
                         OSSL_LIB_CTX *ctx, const char *propq);

PKCS12_SAFEBAG *PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) **pbags, X509 *cert);
PKCS12_SAFEBAG *PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) **pbags,
                               EVP_PKEY *key, int key_usage, int iter,
                               int key_nid, const char *pass);
PKCS12_SAFEBAG *PKCS12_add_key_ex(STACK_OF(PKCS12_SAFEBAG) **pbags,
                                  EVP_PKEY *key, int key_usage, int iter,
                                  int key_nid, const char *pass,
                                  OSSL_LIB_CTX *ctx, const char *propq);

PKCS12_SAFEBAG *PKCS12_add_secret(STACK_OF(PKCS12_SAFEBAG) **pbags,
                                  int nid_type, const unsigned char *value, int len);
int PKCS12_add_safe(STACK_OF(PKCS7) **psafes, STACK_OF(PKCS12_SAFEBAG) *bags,
                    int safe_nid, int iter, const char *pass);
int PKCS12_add_safe_ex(STACK_OF(PKCS7) **psafes, STACK_OF(PKCS12_SAFEBAG) *bags,
                       int safe_nid, int iter, const char *pass,
                       OSSL_LIB_CTX *ctx, const char *propq);

PKCS12 *PKCS12_add_safes(STACK_OF(PKCS7) *safes, int p7_nid);
PKCS12 *PKCS12_add_safes_ex(STACK_OF(PKCS7) *safes, int p7_nid,
                            OSSL_LIB_CTX *ctx, const char *propq);

int i2d_PKCS12_bio(BIO *bp, const PKCS12 *p12);
# ifndef OPENSSL_NO_STDIO
int i2d_PKCS12_fp(FILE *fp, const PKCS12 *p12);
# endif
PKCS12 *d2i_PKCS12_bio(BIO *bp, PKCS12 **p12);
# ifndef OPENSSL_NO_STDIO
PKCS12 *d2i_PKCS12_fp(FILE *fp, PKCS12 **p12);
# endif
int PKCS12_newpass(PKCS12 *p12, const char *oldpass, const char *newpass);

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                            node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/pkcs7.h                          0000664 0000000 0000000 00000053626 14746647661 0025752 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/pkcs7.h.in
 *
 * Copyright 1995-2023 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_PKCS7_H
# define OPENSSL_PKCS7_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_PKCS7_H
# endif

# include <openssl/asn1.h>
# include <openssl/bio.h>
# include <openssl/e_os2.h>

# include <openssl/symhacks.h>
# include <openssl/types.h>
# include <openssl/pkcs7err.h>

#ifdef  __cplusplus
extern "C" {
#endif


/*-
Encryption_ID           DES-CBC
Digest_ID               MD5
Digest_Encryption_ID    rsaEncryption
Key_Encryption_ID       rsaEncryption
*/

typedef struct PKCS7_CTX_st {
    OSSL_LIB_CTX *libctx;
    char *propq;
} PKCS7_CTX;

typedef struct pkcs7_issuer_and_serial_st {
    X509_NAME *issuer;
    ASN1_INTEGER *serial;
} PKCS7_ISSUER_AND_SERIAL;

typedef struct pkcs7_signer_info_st {
    ASN1_INTEGER *version;      /* version 1 */
    PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    X509_ALGOR *digest_alg;
    STACK_OF(X509_ATTRIBUTE) *auth_attr; /* [ 0 ] */
    X509_ALGOR *digest_enc_alg; /* confusing name, actually used for signing */
    ASN1_OCTET_STRING *enc_digest; /* confusing name, actually signature */
    STACK_OF(X509_ATTRIBUTE) *unauth_attr; /* [ 1 ] */
    /* The private key to sign with */
    EVP_PKEY *pkey;
    const PKCS7_CTX *ctx;
} PKCS7_SIGNER_INFO;
SKM_DEFINE_STACK_OF_INTERNAL(PKCS7_SIGNER_INFO, PKCS7_SIGNER_INFO, PKCS7_SIGNER_INFO)
#define sk_PKCS7_SIGNER_INFO_num(sk) OPENSSL_sk_num(ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk))
#define sk_PKCS7_SIGNER_INFO_value(sk, idx) ((PKCS7_SIGNER_INFO *)OPENSSL_sk_value(ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk), (idx)))
#define sk_PKCS7_SIGNER_INFO_new(cmp) ((STACK_OF(PKCS7_SIGNER_INFO) *)OPENSSL_sk_new(ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp)))
#define sk_PKCS7_SIGNER_INFO_new_null() ((STACK_OF(PKCS7_SIGNER_INFO) *)OPENSSL_sk_new_null())
#define sk_PKCS7_SIGNER_INFO_new_reserve(cmp, n) ((STACK_OF(PKCS7_SIGNER_INFO) *)OPENSSL_sk_new_reserve(ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp), (n)))
#define sk_PKCS7_SIGNER_INFO_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), (n))
#define sk_PKCS7_SIGNER_INFO_free(sk) OPENSSL_sk_free(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk))
#define sk_PKCS7_SIGNER_INFO_zero(sk) OPENSSL_sk_zero(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk))
#define sk_PKCS7_SIGNER_INFO_delete(sk, i) ((PKCS7_SIGNER_INFO *)OPENSSL_sk_delete(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), (i)))
#define sk_PKCS7_SIGNER_INFO_delete_ptr(sk, ptr) ((PKCS7_SIGNER_INFO *)OPENSSL_sk_delete_ptr(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_type(ptr)))
#define sk_PKCS7_SIGNER_INFO_push(sk, ptr) OPENSSL_sk_push(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define sk_PKCS7_SIGNER_INFO_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define sk_PKCS7_SIGNER_INFO_pop(sk) ((PKCS7_SIGNER_INFO *)OPENSSL_sk_pop(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk)))
#define sk_PKCS7_SIGNER_INFO_shift(sk) ((PKCS7_SIGNER_INFO *)OPENSSL_sk_shift(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk)))
#define sk_PKCS7_SIGNER_INFO_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk),ossl_check_PKCS7_SIGNER_INFO_freefunc_type(freefunc))
#define sk_PKCS7_SIGNER_INFO_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_type(ptr), (idx))
#define sk_PKCS7_SIGNER_INFO_set(sk, idx, ptr) ((PKCS7_SIGNER_INFO *)OPENSSL_sk_set(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), (idx), ossl_check_PKCS7_SIGNER_INFO_type(ptr)))
#define sk_PKCS7_SIGNER_INFO_find(sk, ptr) OPENSSL_sk_find(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define sk_PKCS7_SIGNER_INFO_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define sk_PKCS7_SIGNER_INFO_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_type(ptr), pnum)
#define sk_PKCS7_SIGNER_INFO_sort(sk) OPENSSL_sk_sort(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk))
#define sk_PKCS7_SIGNER_INFO_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk))
#define sk_PKCS7_SIGNER_INFO_dup(sk) ((STACK_OF(PKCS7_SIGNER_INFO) *)OPENSSL_sk_dup(ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk)))
#define sk_PKCS7_SIGNER_INFO_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(PKCS7_SIGNER_INFO) *)OPENSSL_sk_deep_copy(ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_copyfunc_type(copyfunc), ossl_check_PKCS7_SIGNER_INFO_freefunc_type(freefunc)))
#define sk_PKCS7_SIGNER_INFO_set_cmp_func(sk, cmp) ((sk_PKCS7_SIGNER_INFO_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp)))


typedef struct pkcs7_recip_info_st {
    ASN1_INTEGER *version;      /* version 0 */
    PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    X509_ALGOR *key_enc_algor;
    ASN1_OCTET_STRING *enc_key;
    X509 *cert;                 /* get the pub-key from this */
    const PKCS7_CTX *ctx;
} PKCS7_RECIP_INFO;
SKM_DEFINE_STACK_OF_INTERNAL(PKCS7_RECIP_INFO, PKCS7_RECIP_INFO, PKCS7_RECIP_INFO)
#define sk_PKCS7_RECIP_INFO_num(sk) OPENSSL_sk_num(ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk))
#define sk_PKCS7_RECIP_INFO_value(sk, idx) ((PKCS7_RECIP_INFO *)OPENSSL_sk_value(ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk), (idx)))
#define sk_PKCS7_RECIP_INFO_new(cmp) ((STACK_OF(PKCS7_RECIP_INFO) *)OPENSSL_sk_new(ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp)))
#define sk_PKCS7_RECIP_INFO_new_null() ((STACK_OF(PKCS7_RECIP_INFO) *)OPENSSL_sk_new_null())
#define sk_PKCS7_RECIP_INFO_new_reserve(cmp, n) ((STACK_OF(PKCS7_RECIP_INFO) *)OPENSSL_sk_new_reserve(ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp), (n)))
#define sk_PKCS7_RECIP_INFO_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), (n))
#define sk_PKCS7_RECIP_INFO_free(sk) OPENSSL_sk_free(ossl_check_PKCS7_RECIP_INFO_sk_type(sk))
#define sk_PKCS7_RECIP_INFO_zero(sk) OPENSSL_sk_zero(ossl_check_PKCS7_RECIP_INFO_sk_type(sk))
#define sk_PKCS7_RECIP_INFO_delete(sk, i) ((PKCS7_RECIP_INFO *)OPENSSL_sk_delete(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), (i)))
#define sk_PKCS7_RECIP_INFO_delete_ptr(sk, ptr) ((PKCS7_RECIP_INFO *)OPENSSL_sk_delete_ptr(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_type(ptr)))
#define sk_PKCS7_RECIP_INFO_push(sk, ptr) OPENSSL_sk_push(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define sk_PKCS7_RECIP_INFO_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define sk_PKCS7_RECIP_INFO_pop(sk) ((PKCS7_RECIP_INFO *)OPENSSL_sk_pop(ossl_check_PKCS7_RECIP_INFO_sk_type(sk)))
#define sk_PKCS7_RECIP_INFO_shift(sk) ((PKCS7_RECIP_INFO *)OPENSSL_sk_shift(ossl_check_PKCS7_RECIP_INFO_sk_type(sk)))
#define sk_PKCS7_RECIP_INFO_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_PKCS7_RECIP_INFO_sk_type(sk),ossl_check_PKCS7_RECIP_INFO_freefunc_type(freefunc))
#define sk_PKCS7_RECIP_INFO_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_type(ptr), (idx))
#define sk_PKCS7_RECIP_INFO_set(sk, idx, ptr) ((PKCS7_RECIP_INFO *)OPENSSL_sk_set(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), (idx), ossl_check_PKCS7_RECIP_INFO_type(ptr)))
#define sk_PKCS7_RECIP_INFO_find(sk, ptr) OPENSSL_sk_find(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define sk_PKCS7_RECIP_INFO_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define sk_PKCS7_RECIP_INFO_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_type(ptr), pnum)
#define sk_PKCS7_RECIP_INFO_sort(sk) OPENSSL_sk_sort(ossl_check_PKCS7_RECIP_INFO_sk_type(sk))
#define sk_PKCS7_RECIP_INFO_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk))
#define sk_PKCS7_RECIP_INFO_dup(sk) ((STACK_OF(PKCS7_RECIP_INFO) *)OPENSSL_sk_dup(ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk)))
#define sk_PKCS7_RECIP_INFO_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(PKCS7_RECIP_INFO) *)OPENSSL_sk_deep_copy(ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_copyfunc_type(copyfunc), ossl_check_PKCS7_RECIP_INFO_freefunc_type(freefunc)))
#define sk_PKCS7_RECIP_INFO_set_cmp_func(sk, cmp) ((sk_PKCS7_RECIP_INFO_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp)))



typedef struct pkcs7_signed_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info;
    struct pkcs7_st *contents;
} PKCS7_SIGNED;
/*
 * The above structure is very very similar to PKCS7_SIGN_ENVELOPE. How about
 * merging the two
 */

typedef struct pkcs7_enc_content_st {
    ASN1_OBJECT *content_type;
    X509_ALGOR *algorithm;
    ASN1_OCTET_STRING *enc_data; /* [ 0 ] */
    const EVP_CIPHER *cipher;
    const PKCS7_CTX *ctx;
} PKCS7_ENC_CONTENT;

typedef struct pkcs7_enveloped_st {
    ASN1_INTEGER *version;      /* version 0 */
    STACK_OF(PKCS7_RECIP_INFO) *recipientinfo;
    PKCS7_ENC_CONTENT *enc_data;
} PKCS7_ENVELOPE;

typedef struct pkcs7_signedandenveloped_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info;
    PKCS7_ENC_CONTENT *enc_data;
    STACK_OF(PKCS7_RECIP_INFO) *recipientinfo;
} PKCS7_SIGN_ENVELOPE;

typedef struct pkcs7_digest_st {
    ASN1_INTEGER *version;      /* version 0 */
    X509_ALGOR *md;             /* md used */
    struct pkcs7_st *contents;
    ASN1_OCTET_STRING *digest;
} PKCS7_DIGEST;

typedef struct pkcs7_encrypted_st {
    ASN1_INTEGER *version;      /* version 0 */
    PKCS7_ENC_CONTENT *enc_data;
} PKCS7_ENCRYPT;

typedef struct pkcs7_st {
    /*
     * The following is non NULL if it contains ASN1 encoding of this
     * structure
     */
    unsigned char *asn1;
    long length;
# define PKCS7_S_HEADER  0
# define PKCS7_S_BODY    1
# define PKCS7_S_TAIL    2
    int state;                  /* used during processing */
    int detached;
    ASN1_OBJECT *type;
    /* content as defined by the type */
    /*
     * all encryption/message digests are applied to the 'contents', leaving
     * out the 'type' field.
     */
    union {
        char *ptr;
        /* NID_pkcs7_data */
        ASN1_OCTET_STRING *data;
        /* NID_pkcs7_signed */
        PKCS7_SIGNED *sign;
        /* NID_pkcs7_enveloped */
        PKCS7_ENVELOPE *enveloped;
        /* NID_pkcs7_signedAndEnveloped */
        PKCS7_SIGN_ENVELOPE *signed_and_enveloped;
        /* NID_pkcs7_digest */
        PKCS7_DIGEST *digest;
        /* NID_pkcs7_encrypted */
        PKCS7_ENCRYPT *encrypted;
        /* Anything else */
        ASN1_TYPE *other;
    } d;
    PKCS7_CTX ctx;
} PKCS7;
SKM_DEFINE_STACK_OF_INTERNAL(PKCS7, PKCS7, PKCS7)
#define sk_PKCS7_num(sk) OPENSSL_sk_num(ossl_check_const_PKCS7_sk_type(sk))
#define sk_PKCS7_value(sk, idx) ((PKCS7 *)OPENSSL_sk_value(ossl_check_const_PKCS7_sk_type(sk), (idx)))
#define sk_PKCS7_new(cmp) ((STACK_OF(PKCS7) *)OPENSSL_sk_new(ossl_check_PKCS7_compfunc_type(cmp)))
#define sk_PKCS7_new_null() ((STACK_OF(PKCS7) *)OPENSSL_sk_new_null())
#define sk_PKCS7_new_reserve(cmp, n) ((STACK_OF(PKCS7) *)OPENSSL_sk_new_reserve(ossl_check_PKCS7_compfunc_type(cmp), (n)))
#define sk_PKCS7_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_PKCS7_sk_type(sk), (n))
#define sk_PKCS7_free(sk) OPENSSL_sk_free(ossl_check_PKCS7_sk_type(sk))
#define sk_PKCS7_zero(sk) OPENSSL_sk_zero(ossl_check_PKCS7_sk_type(sk))
#define sk_PKCS7_delete(sk, i) ((PKCS7 *)OPENSSL_sk_delete(ossl_check_PKCS7_sk_type(sk), (i)))
#define sk_PKCS7_delete_ptr(sk, ptr) ((PKCS7 *)OPENSSL_sk_delete_ptr(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_type(ptr)))
#define sk_PKCS7_push(sk, ptr) OPENSSL_sk_push(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_type(ptr))
#define sk_PKCS7_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_type(ptr))
#define sk_PKCS7_pop(sk) ((PKCS7 *)OPENSSL_sk_pop(ossl_check_PKCS7_sk_type(sk)))
#define sk_PKCS7_shift(sk) ((PKCS7 *)OPENSSL_sk_shift(ossl_check_PKCS7_sk_type(sk)))
#define sk_PKCS7_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_PKCS7_sk_type(sk),ossl_check_PKCS7_freefunc_type(freefunc))
#define sk_PKCS7_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_type(ptr), (idx))
#define sk_PKCS7_set(sk, idx, ptr) ((PKCS7 *)OPENSSL_sk_set(ossl_check_PKCS7_sk_type(sk), (idx), ossl_check_PKCS7_type(ptr)))
#define sk_PKCS7_find(sk, ptr) OPENSSL_sk_find(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_type(ptr))
#define sk_PKCS7_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_type(ptr))
#define sk_PKCS7_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_type(ptr), pnum)
#define sk_PKCS7_sort(sk) OPENSSL_sk_sort(ossl_check_PKCS7_sk_type(sk))
#define sk_PKCS7_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_PKCS7_sk_type(sk))
#define sk_PKCS7_dup(sk) ((STACK_OF(PKCS7) *)OPENSSL_sk_dup(ossl_check_const_PKCS7_sk_type(sk)))
#define sk_PKCS7_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(PKCS7) *)OPENSSL_sk_deep_copy(ossl_check_const_PKCS7_sk_type(sk), ossl_check_PKCS7_copyfunc_type(copyfunc), ossl_check_PKCS7_freefunc_type(freefunc)))
#define sk_PKCS7_set_cmp_func(sk, cmp) ((sk_PKCS7_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_PKCS7_sk_type(sk), ossl_check_PKCS7_compfunc_type(cmp)))



# define PKCS7_OP_SET_DETACHED_SIGNATURE 1
# define PKCS7_OP_GET_DETACHED_SIGNATURE 2

# define PKCS7_get_signed_attributes(si) ((si)->auth_attr)
# define PKCS7_get_attributes(si)        ((si)->unauth_attr)

# define PKCS7_type_is_signed(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_signed)
# define PKCS7_type_is_encrypted(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_encrypted)
# define PKCS7_type_is_enveloped(a) (OBJ_obj2nid((a)->type) == NID_pkcs7_enveloped)
# define PKCS7_type_is_signedAndEnveloped(a) \
                (OBJ_obj2nid((a)->type) == NID_pkcs7_signedAndEnveloped)
# define PKCS7_type_is_data(a)   (OBJ_obj2nid((a)->type) == NID_pkcs7_data)
# define PKCS7_type_is_digest(a)   (OBJ_obj2nid((a)->type) == NID_pkcs7_digest)

# define PKCS7_set_detached(p,v) \
                PKCS7_ctrl(p,PKCS7_OP_SET_DETACHED_SIGNATURE,v,NULL)
# define PKCS7_get_detached(p) \
                PKCS7_ctrl(p,PKCS7_OP_GET_DETACHED_SIGNATURE,0,NULL)

# define PKCS7_is_detached(p7) (PKCS7_type_is_signed(p7) && PKCS7_get_detached(p7))

/* S/MIME related flags */

# define PKCS7_TEXT              0x1
# define PKCS7_NOCERTS           0x2
# define PKCS7_NOSIGS            0x4
# define PKCS7_NOCHAIN           0x8
# define PKCS7_NOINTERN          0x10
# define PKCS7_NOVERIFY          0x20
# define PKCS7_DETACHED          0x40
# define PKCS7_BINARY            0x80
# define PKCS7_NOATTR            0x100
# define PKCS7_NOSMIMECAP        0x200
# define PKCS7_NOOLDMIMETYPE     0x400
# define PKCS7_CRLFEOL           0x800
# define PKCS7_STREAM            0x1000
# define PKCS7_NOCRL             0x2000
# define PKCS7_PARTIAL           0x4000
# define PKCS7_REUSE_DIGEST      0x8000
# define PKCS7_NO_DUAL_CONTENT   0x10000

/* Flags: for compatibility with older code */

# define SMIME_TEXT      PKCS7_TEXT
# define SMIME_NOCERTS   PKCS7_NOCERTS
# define SMIME_NOSIGS    PKCS7_NOSIGS
# define SMIME_NOCHAIN   PKCS7_NOCHAIN
# define SMIME_NOINTERN  PKCS7_NOINTERN
# define SMIME_NOVERIFY  PKCS7_NOVERIFY
# define SMIME_DETACHED  PKCS7_DETACHED
# define SMIME_BINARY    PKCS7_BINARY
# define SMIME_NOATTR    PKCS7_NOATTR

/* CRLF ASCII canonicalisation */
# define SMIME_ASCIICRLF         0x80000

DECLARE_ASN1_FUNCTIONS(PKCS7_ISSUER_AND_SERIAL)

int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
                                   const EVP_MD *type, unsigned char *md,
                                   unsigned int *len);
# ifndef OPENSSL_NO_STDIO
PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 **p7);
int i2d_PKCS7_fp(FILE *fp, const PKCS7 *p7);
# endif
DECLARE_ASN1_DUP_FUNCTION(PKCS7)
PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 **p7);
int i2d_PKCS7_bio(BIO *bp, const PKCS7 *p7);
int i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
int PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);

DECLARE_ASN1_FUNCTIONS(PKCS7_SIGNER_INFO)
DECLARE_ASN1_FUNCTIONS(PKCS7_RECIP_INFO)
DECLARE_ASN1_FUNCTIONS(PKCS7_SIGNED)
DECLARE_ASN1_FUNCTIONS(PKCS7_ENC_CONTENT)
DECLARE_ASN1_FUNCTIONS(PKCS7_ENVELOPE)
DECLARE_ASN1_FUNCTIONS(PKCS7_SIGN_ENVELOPE)
DECLARE_ASN1_FUNCTIONS(PKCS7_DIGEST)
DECLARE_ASN1_FUNCTIONS(PKCS7_ENCRYPT)
DECLARE_ASN1_FUNCTIONS(PKCS7)
PKCS7 *PKCS7_new_ex(OSSL_LIB_CTX *libctx, const char *propq);

DECLARE_ASN1_ITEM(PKCS7_ATTR_SIGN)
DECLARE_ASN1_ITEM(PKCS7_ATTR_VERIFY)

DECLARE_ASN1_NDEF_FUNCTION(PKCS7)
DECLARE_ASN1_PRINT_FUNCTION(PKCS7)

long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg);

int PKCS7_type_is_other(PKCS7 *p7);
int PKCS7_set_type(PKCS7 *p7, int type);
int PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other);
int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data);
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,
                          const EVP_MD *dgst);
int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si);
int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
int PKCS7_add_certificate(PKCS7 *p7, X509 *x509);
int PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509);
int PKCS7_content_new(PKCS7 *p7, int nid);
int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx,
                     BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si);
int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,
                          X509 *x509);

BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio);
int PKCS7_dataFinal(PKCS7 *p7, BIO *bio);
BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);

PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509,
                                       EVP_PKEY *pkey, const EVP_MD *dgst);
X509 *PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
int PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md);
STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7);

PKCS7_RECIP_INFO *PKCS7_add_recipient(PKCS7 *p7, X509 *x509);
void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk,
                                 X509_ALGOR **pdig, X509_ALGOR **psig);
void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc);
int PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri);
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509);
int PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher);
int PKCS7_stream(unsigned char ***boundary, PKCS7 *p7);

PKCS7_ISSUER_AND_SERIAL *PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx);
ASN1_OCTET_STRING *PKCS7_get_octet_string(PKCS7 *p7);
ASN1_OCTET_STRING *PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) *sk);
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int type,
                               void *data);
int PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
                        void *value);
ASN1_TYPE *PKCS7_get_attribute(const PKCS7_SIGNER_INFO *si, int nid);
ASN1_TYPE *PKCS7_get_signed_attribute(const PKCS7_SIGNER_INFO *si, int nid);
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,
                                STACK_OF(X509_ATTRIBUTE) *sk);
int PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,
                         STACK_OF(X509_ATTRIBUTE) *sk);

PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
                  BIO *data, int flags);
PKCS7 *PKCS7_sign_ex(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
                     BIO *data, int flags, OSSL_LIB_CTX *libctx,
                     const char *propq);

PKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7,
                                         X509 *signcert, EVP_PKEY *pkey,
                                         const EVP_MD *md, int flags);

int PKCS7_final(PKCS7 *p7, BIO *data, int flags);
int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
                 BIO *indata, BIO *out, int flags);
STACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs,
                                   int flags);
PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
                     int flags);
PKCS7 *PKCS7_encrypt_ex(STACK_OF(X509) *certs, BIO *in,
                        const EVP_CIPHER *cipher, int flags,
                        OSSL_LIB_CTX *libctx, const char *propq);
int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data,
                  int flags);

int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,
                              STACK_OF(X509_ALGOR) *cap);
STACK_OF(X509_ALGOR) *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si);
int PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg);

int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid);
int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t);
int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,
                             const unsigned char *md, int mdlen);

int SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags);
PKCS7 *SMIME_read_PKCS7_ex(BIO *bio, BIO **bcont, PKCS7 **p7);
PKCS7 *SMIME_read_PKCS7(BIO *bio, BIO **bcont);

BIO *BIO_new_PKCS7(BIO *out, PKCS7 *p7);

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                          node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/safestack.h                      0000664 0000000 0000000 00000044007 14746647661 0026660 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/safestack.h.in
 *
 * Copyright 1999-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_SAFESTACK_H
# define OPENSSL_SAFESTACK_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_SAFESTACK_H
# endif

# include <openssl/stack.h>
# include <openssl/e_os2.h>

#ifdef __cplusplus
extern "C" {
#endif

# define STACK_OF(type) struct stack_st_##type

/* Helper macro for internal use */
# define SKM_DEFINE_STACK_OF_INTERNAL(t1, t2, t3) \
    STACK_OF(t1); \
    typedef int (*sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
    typedef void (*sk_##t1##_freefunc)(t3 *a); \
    typedef t3 * (*sk_##t1##_copyfunc)(const t3 *a); \
    static ossl_unused ossl_inline t2 *ossl_check_##t1##_type(t2 *ptr) \
    { \
        return ptr; \
    } \
    static ossl_unused ossl_inline const OPENSSL_STACK *ossl_check_const_##t1##_sk_type(const STACK_OF(t1) *sk) \
    { \
        return (const OPENSSL_STACK *)sk; \
    } \
    static ossl_unused ossl_inline OPENSSL_STACK *ossl_check_##t1##_sk_type(STACK_OF(t1) *sk) \
    { \
        return (OPENSSL_STACK *)sk; \
    } \
    static ossl_unused ossl_inline OPENSSL_sk_compfunc ossl_check_##t1##_compfunc_type(sk_##t1##_compfunc cmp) \
    { \
        return (OPENSSL_sk_compfunc)cmp; \
    } \
    static ossl_unused ossl_inline OPENSSL_sk_copyfunc ossl_check_##t1##_copyfunc_type(sk_##t1##_copyfunc cpy) \
    { \
        return (OPENSSL_sk_copyfunc)cpy; \
    } \
    static ossl_unused ossl_inline OPENSSL_sk_freefunc ossl_check_##t1##_freefunc_type(sk_##t1##_freefunc fr) \
    { \
        return (OPENSSL_sk_freefunc)fr; \
    }

# define SKM_DEFINE_STACK_OF(t1, t2, t3) \
    STACK_OF(t1); \
    typedef int (*sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
    typedef void (*sk_##t1##_freefunc)(t3 *a); \
    typedef t3 * (*sk_##t1##_copyfunc)(const t3 *a); \
    static ossl_unused ossl_inline int sk_##t1##_num(const STACK_OF(t1) *sk) \
    { \
        return OPENSSL_sk_num((const OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline t2 *sk_##t1##_value(const STACK_OF(t1) *sk, int idx) \
    { \
        return (t2 *)OPENSSL_sk_value((const OPENSSL_STACK *)sk, idx); \
    } \
    static ossl_unused ossl_inline STACK_OF(t1) *sk_##t1##_new(sk_##t1##_compfunc compare) \
    { \
        return (STACK_OF(t1) *)OPENSSL_sk_new((OPENSSL_sk_compfunc)compare); \
    } \
    static ossl_unused ossl_inline STACK_OF(t1) *sk_##t1##_new_null(void) \
    { \
        return (STACK_OF(t1) *)OPENSSL_sk_new_null(); \
    } \
    static ossl_unused ossl_inline STACK_OF(t1) *sk_##t1##_new_reserve(sk_##t1##_compfunc compare, int n) \
    { \
        return (STACK_OF(t1) *)OPENSSL_sk_new_reserve((OPENSSL_sk_compfunc)compare, n); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_reserve(STACK_OF(t1) *sk, int n) \
    { \
        return OPENSSL_sk_reserve((OPENSSL_STACK *)sk, n); \
    } \
    static ossl_unused ossl_inline void sk_##t1##_free(STACK_OF(t1) *sk) \
    { \
        OPENSSL_sk_free((OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline void sk_##t1##_zero(STACK_OF(t1) *sk) \
    { \
        OPENSSL_sk_zero((OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline t2 *sk_##t1##_delete(STACK_OF(t1) *sk, int i) \
    { \
        return (t2 *)OPENSSL_sk_delete((OPENSSL_STACK *)sk, i); \
    } \
    static ossl_unused ossl_inline t2 *sk_##t1##_delete_ptr(STACK_OF(t1) *sk, t2 *ptr) \
    { \
        return (t2 *)OPENSSL_sk_delete_ptr((OPENSSL_STACK *)sk, \
                                           (const void *)ptr); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_push(STACK_OF(t1) *sk, t2 *ptr) \
    { \
        return OPENSSL_sk_push((OPENSSL_STACK *)sk, (const void *)ptr); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_unshift(STACK_OF(t1) *sk, t2 *ptr) \
    { \
        return OPENSSL_sk_unshift((OPENSSL_STACK *)sk, (const void *)ptr); \
    } \
    static ossl_unused ossl_inline t2 *sk_##t1##_pop(STACK_OF(t1) *sk) \
    { \
        return (t2 *)OPENSSL_sk_pop((OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline t2 *sk_##t1##_shift(STACK_OF(t1) *sk) \
    { \
        return (t2 *)OPENSSL_sk_shift((OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline void sk_##t1##_pop_free(STACK_OF(t1) *sk, sk_##t1##_freefunc freefunc) \
    { \
        OPENSSL_sk_pop_free((OPENSSL_STACK *)sk, (OPENSSL_sk_freefunc)freefunc); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_insert(STACK_OF(t1) *sk, t2 *ptr, int idx) \
    { \
        return OPENSSL_sk_insert((OPENSSL_STACK *)sk, (const void *)ptr, idx); \
    } \
    static ossl_unused ossl_inline t2 *sk_##t1##_set(STACK_OF(t1) *sk, int idx, t2 *ptr) \
    { \
        return (t2 *)OPENSSL_sk_set((OPENSSL_STACK *)sk, idx, (const void *)ptr); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_find(STACK_OF(t1) *sk, t2 *ptr) \
    { \
        return OPENSSL_sk_find((OPENSSL_STACK *)sk, (const void *)ptr); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_find_ex(STACK_OF(t1) *sk, t2 *ptr) \
    { \
        return OPENSSL_sk_find_ex((OPENSSL_STACK *)sk, (const void *)ptr); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_find_all(STACK_OF(t1) *sk, t2 *ptr, int *pnum) \
    { \
        return OPENSSL_sk_find_all((OPENSSL_STACK *)sk, (const void *)ptr, pnum); \
    } \
    static ossl_unused ossl_inline void sk_##t1##_sort(STACK_OF(t1) *sk) \
    { \
        OPENSSL_sk_sort((OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline int sk_##t1##_is_sorted(const STACK_OF(t1) *sk) \
    { \
        return OPENSSL_sk_is_sorted((const OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline STACK_OF(t1) * sk_##t1##_dup(const STACK_OF(t1) *sk) \
    { \
        return (STACK_OF(t1) *)OPENSSL_sk_dup((const OPENSSL_STACK *)sk); \
    } \
    static ossl_unused ossl_inline STACK_OF(t1) *sk_##t1##_deep_copy(const STACK_OF(t1) *sk, \
                                                    sk_##t1##_copyfunc copyfunc, \
                                                    sk_##t1##_freefunc freefunc) \
    { \
        return (STACK_OF(t1) *)OPENSSL_sk_deep_copy((const OPENSSL_STACK *)sk, \
                                            (OPENSSL_sk_copyfunc)copyfunc, \
                                            (OPENSSL_sk_freefunc)freefunc); \
    } \
    static ossl_unused ossl_inline sk_##t1##_compfunc sk_##t1##_set_cmp_func(STACK_OF(t1) *sk, sk_##t1##_compfunc compare) \
    { \
        return (sk_##t1##_compfunc)OPENSSL_sk_set_cmp_func((OPENSSL_STACK *)sk, (OPENSSL_sk_compfunc)compare); \
    }

# define DEFINE_STACK_OF(t) SKM_DEFINE_STACK_OF(t, t, t)
# define DEFINE_STACK_OF_CONST(t) SKM_DEFINE_STACK_OF(t, const t, t)
# define DEFINE_SPECIAL_STACK_OF(t1, t2) SKM_DEFINE_STACK_OF(t1, t2, t2)
# define DEFINE_SPECIAL_STACK_OF_CONST(t1, t2) \
            SKM_DEFINE_STACK_OF(t1, const t2, t2)

/*-
 * Strings are special: normally an lhash entry will point to a single
 * (somewhat) mutable object. In the case of strings:
 *
 * a) Instead of a single char, there is an array of chars, NUL-terminated.
 * b) The string may have be immutable.
 *
 * So, they need their own declarations. Especially important for
 * type-checking tools, such as Deputy.
 *
 * In practice, however, it appears to be hard to have a const
 * string. For now, I'm settling for dealing with the fact it is a
 * string at all.
 */
typedef char *OPENSSL_STRING;
typedef const char *OPENSSL_CSTRING;

/*-
 * Confusingly, LHASH_OF(STRING) deals with char ** throughout, but
 * STACK_OF(STRING) is really more like STACK_OF(char), only, as mentioned
 * above, instead of a single char each entry is a NUL-terminated array of
 * chars. So, we have to implement STRING specially for STACK_OF. This is
 * dealt with in the autogenerated macros below.
 */
SKM_DEFINE_STACK_OF_INTERNAL(OPENSSL_STRING, char, char)
#define sk_OPENSSL_STRING_num(sk) OPENSSL_sk_num(ossl_check_const_OPENSSL_STRING_sk_type(sk))
#define sk_OPENSSL_STRING_value(sk, idx) ((char *)OPENSSL_sk_value(ossl_check_const_OPENSSL_STRING_sk_type(sk), (idx)))
#define sk_OPENSSL_STRING_new(cmp) ((STACK_OF(OPENSSL_STRING) *)OPENSSL_sk_new(ossl_check_OPENSSL_STRING_compfunc_type(cmp)))
#define sk_OPENSSL_STRING_new_null() ((STACK_OF(OPENSSL_STRING) *)OPENSSL_sk_new_null())
#define sk_OPENSSL_STRING_new_reserve(cmp, n) ((STACK_OF(OPENSSL_STRING) *)OPENSSL_sk_new_reserve(ossl_check_OPENSSL_STRING_compfunc_type(cmp), (n)))
#define sk_OPENSSL_STRING_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OPENSSL_STRING_sk_type(sk), (n))
#define sk_OPENSSL_STRING_free(sk) OPENSSL_sk_free(ossl_check_OPENSSL_STRING_sk_type(sk))
#define sk_OPENSSL_STRING_zero(sk) OPENSSL_sk_zero(ossl_check_OPENSSL_STRING_sk_type(sk))
#define sk_OPENSSL_STRING_delete(sk, i) ((char *)OPENSSL_sk_delete(ossl_check_OPENSSL_STRING_sk_type(sk), (i)))
#define sk_OPENSSL_STRING_delete_ptr(sk, ptr) ((char *)OPENSSL_sk_delete_ptr(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_type(ptr)))
#define sk_OPENSSL_STRING_push(sk, ptr) OPENSSL_sk_push(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_type(ptr))
#define sk_OPENSSL_STRING_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_type(ptr))
#define sk_OPENSSL_STRING_pop(sk) ((char *)OPENSSL_sk_pop(ossl_check_OPENSSL_STRING_sk_type(sk)))
#define sk_OPENSSL_STRING_shift(sk) ((char *)OPENSSL_sk_shift(ossl_check_OPENSSL_STRING_sk_type(sk)))
#define sk_OPENSSL_STRING_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OPENSSL_STRING_sk_type(sk),ossl_check_OPENSSL_STRING_freefunc_type(freefunc))
#define sk_OPENSSL_STRING_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_type(ptr), (idx))
#define sk_OPENSSL_STRING_set(sk, idx, ptr) ((char *)OPENSSL_sk_set(ossl_check_OPENSSL_STRING_sk_type(sk), (idx), ossl_check_OPENSSL_STRING_type(ptr)))
#define sk_OPENSSL_STRING_find(sk, ptr) OPENSSL_sk_find(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_type(ptr))
#define sk_OPENSSL_STRING_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_type(ptr))
#define sk_OPENSSL_STRING_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_type(ptr), pnum)
#define sk_OPENSSL_STRING_sort(sk) OPENSSL_sk_sort(ossl_check_OPENSSL_STRING_sk_type(sk))
#define sk_OPENSSL_STRING_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OPENSSL_STRING_sk_type(sk))
#define sk_OPENSSL_STRING_dup(sk) ((STACK_OF(OPENSSL_STRING) *)OPENSSL_sk_dup(ossl_check_const_OPENSSL_STRING_sk_type(sk)))
#define sk_OPENSSL_STRING_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OPENSSL_STRING) *)OPENSSL_sk_deep_copy(ossl_check_const_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_copyfunc_type(copyfunc), ossl_check_OPENSSL_STRING_freefunc_type(freefunc)))
#define sk_OPENSSL_STRING_set_cmp_func(sk, cmp) ((sk_OPENSSL_STRING_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OPENSSL_STRING_sk_type(sk), ossl_check_OPENSSL_STRING_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(OPENSSL_CSTRING, const char, char)
#define sk_OPENSSL_CSTRING_num(sk) OPENSSL_sk_num(ossl_check_const_OPENSSL_CSTRING_sk_type(sk))
#define sk_OPENSSL_CSTRING_value(sk, idx) ((const char *)OPENSSL_sk_value(ossl_check_const_OPENSSL_CSTRING_sk_type(sk), (idx)))
#define sk_OPENSSL_CSTRING_new(cmp) ((STACK_OF(OPENSSL_CSTRING) *)OPENSSL_sk_new(ossl_check_OPENSSL_CSTRING_compfunc_type(cmp)))
#define sk_OPENSSL_CSTRING_new_null() ((STACK_OF(OPENSSL_CSTRING) *)OPENSSL_sk_new_null())
#define sk_OPENSSL_CSTRING_new_reserve(cmp, n) ((STACK_OF(OPENSSL_CSTRING) *)OPENSSL_sk_new_reserve(ossl_check_OPENSSL_CSTRING_compfunc_type(cmp), (n)))
#define sk_OPENSSL_CSTRING_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OPENSSL_CSTRING_sk_type(sk), (n))
#define sk_OPENSSL_CSTRING_free(sk) OPENSSL_sk_free(ossl_check_OPENSSL_CSTRING_sk_type(sk))
#define sk_OPENSSL_CSTRING_zero(sk) OPENSSL_sk_zero(ossl_check_OPENSSL_CSTRING_sk_type(sk))
#define sk_OPENSSL_CSTRING_delete(sk, i) ((const char *)OPENSSL_sk_delete(ossl_check_OPENSSL_CSTRING_sk_type(sk), (i)))
#define sk_OPENSSL_CSTRING_delete_ptr(sk, ptr) ((const char *)OPENSSL_sk_delete_ptr(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_type(ptr)))
#define sk_OPENSSL_CSTRING_push(sk, ptr) OPENSSL_sk_push(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_type(ptr))
#define sk_OPENSSL_CSTRING_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_type(ptr))
#define sk_OPENSSL_CSTRING_pop(sk) ((const char *)OPENSSL_sk_pop(ossl_check_OPENSSL_CSTRING_sk_type(sk)))
#define sk_OPENSSL_CSTRING_shift(sk) ((const char *)OPENSSL_sk_shift(ossl_check_OPENSSL_CSTRING_sk_type(sk)))
#define sk_OPENSSL_CSTRING_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OPENSSL_CSTRING_sk_type(sk),ossl_check_OPENSSL_CSTRING_freefunc_type(freefunc))
#define sk_OPENSSL_CSTRING_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_type(ptr), (idx))
#define sk_OPENSSL_CSTRING_set(sk, idx, ptr) ((const char *)OPENSSL_sk_set(ossl_check_OPENSSL_CSTRING_sk_type(sk), (idx), ossl_check_OPENSSL_CSTRING_type(ptr)))
#define sk_OPENSSL_CSTRING_find(sk, ptr) OPENSSL_sk_find(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_type(ptr))
#define sk_OPENSSL_CSTRING_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_type(ptr))
#define sk_OPENSSL_CSTRING_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_type(ptr), pnum)
#define sk_OPENSSL_CSTRING_sort(sk) OPENSSL_sk_sort(ossl_check_OPENSSL_CSTRING_sk_type(sk))
#define sk_OPENSSL_CSTRING_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OPENSSL_CSTRING_sk_type(sk))
#define sk_OPENSSL_CSTRING_dup(sk) ((STACK_OF(OPENSSL_CSTRING) *)OPENSSL_sk_dup(ossl_check_const_OPENSSL_CSTRING_sk_type(sk)))
#define sk_OPENSSL_CSTRING_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OPENSSL_CSTRING) *)OPENSSL_sk_deep_copy(ossl_check_const_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_copyfunc_type(copyfunc), ossl_check_OPENSSL_CSTRING_freefunc_type(freefunc)))
#define sk_OPENSSL_CSTRING_set_cmp_func(sk, cmp) ((sk_OPENSSL_CSTRING_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OPENSSL_CSTRING_sk_type(sk), ossl_check_OPENSSL_CSTRING_compfunc_type(cmp)))


#if !defined(OPENSSL_NO_DEPRECATED_3_0)
/*
 * This is not used by OpenSSL.  A block of bytes,  NOT nul-terminated.
 * These should also be distinguished from "normal" stacks.
 */
typedef void *OPENSSL_BLOCK;
SKM_DEFINE_STACK_OF_INTERNAL(OPENSSL_BLOCK, void, void)
#define sk_OPENSSL_BLOCK_num(sk) OPENSSL_sk_num(ossl_check_const_OPENSSL_BLOCK_sk_type(sk))
#define sk_OPENSSL_BLOCK_value(sk, idx) ((void *)OPENSSL_sk_value(ossl_check_const_OPENSSL_BLOCK_sk_type(sk), (idx)))
#define sk_OPENSSL_BLOCK_new(cmp) ((STACK_OF(OPENSSL_BLOCK) *)OPENSSL_sk_new(ossl_check_OPENSSL_BLOCK_compfunc_type(cmp)))
#define sk_OPENSSL_BLOCK_new_null() ((STACK_OF(OPENSSL_BLOCK) *)OPENSSL_sk_new_null())
#define sk_OPENSSL_BLOCK_new_reserve(cmp, n) ((STACK_OF(OPENSSL_BLOCK) *)OPENSSL_sk_new_reserve(ossl_check_OPENSSL_BLOCK_compfunc_type(cmp), (n)))
#define sk_OPENSSL_BLOCK_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OPENSSL_BLOCK_sk_type(sk), (n))
#define sk_OPENSSL_BLOCK_free(sk) OPENSSL_sk_free(ossl_check_OPENSSL_BLOCK_sk_type(sk))
#define sk_OPENSSL_BLOCK_zero(sk) OPENSSL_sk_zero(ossl_check_OPENSSL_BLOCK_sk_type(sk))
#define sk_OPENSSL_BLOCK_delete(sk, i) ((void *)OPENSSL_sk_delete(ossl_check_OPENSSL_BLOCK_sk_type(sk), (i)))
#define sk_OPENSSL_BLOCK_delete_ptr(sk, ptr) ((void *)OPENSSL_sk_delete_ptr(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_type(ptr)))
#define sk_OPENSSL_BLOCK_push(sk, ptr) OPENSSL_sk_push(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_type(ptr))
#define sk_OPENSSL_BLOCK_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_type(ptr))
#define sk_OPENSSL_BLOCK_pop(sk) ((void *)OPENSSL_sk_pop(ossl_check_OPENSSL_BLOCK_sk_type(sk)))
#define sk_OPENSSL_BLOCK_shift(sk) ((void *)OPENSSL_sk_shift(ossl_check_OPENSSL_BLOCK_sk_type(sk)))
#define sk_OPENSSL_BLOCK_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OPENSSL_BLOCK_sk_type(sk),ossl_check_OPENSSL_BLOCK_freefunc_type(freefunc))
#define sk_OPENSSL_BLOCK_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_type(ptr), (idx))
#define sk_OPENSSL_BLOCK_set(sk, idx, ptr) ((void *)OPENSSL_sk_set(ossl_check_OPENSSL_BLOCK_sk_type(sk), (idx), ossl_check_OPENSSL_BLOCK_type(ptr)))
#define sk_OPENSSL_BLOCK_find(sk, ptr) OPENSSL_sk_find(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_type(ptr))
#define sk_OPENSSL_BLOCK_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_type(ptr))
#define sk_OPENSSL_BLOCK_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_type(ptr), pnum)
#define sk_OPENSSL_BLOCK_sort(sk) OPENSSL_sk_sort(ossl_check_OPENSSL_BLOCK_sk_type(sk))
#define sk_OPENSSL_BLOCK_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OPENSSL_BLOCK_sk_type(sk))
#define sk_OPENSSL_BLOCK_dup(sk) ((STACK_OF(OPENSSL_BLOCK) *)OPENSSL_sk_dup(ossl_check_const_OPENSSL_BLOCK_sk_type(sk)))
#define sk_OPENSSL_BLOCK_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OPENSSL_BLOCK) *)OPENSSL_sk_deep_copy(ossl_check_const_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_copyfunc_type(copyfunc), ossl_check_OPENSSL_BLOCK_freefunc_type(freefunc)))
#define sk_OPENSSL_BLOCK_set_cmp_func(sk, cmp) ((sk_OPENSSL_BLOCK_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OPENSSL_BLOCK_sk_type(sk), ossl_check_OPENSSL_BLOCK_compfunc_type(cmp)))

#endif

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/srp.h                            0000664 0000000 0000000 00000036177 14746647661 0025531 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/srp.h.in
 *
 * Copyright 2004-2021 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2004, EdelKey Project. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 *
 * Originally written by Christophe Renou and Peter Sylvester,
 * for the EdelKey project.
 */



#ifndef OPENSSL_SRP_H
# define OPENSSL_SRP_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_SRP_H
# endif

#include <openssl/opensslconf.h>

#ifndef OPENSSL_NO_SRP
# include <stdio.h>
# include <string.h>
# include <openssl/safestack.h>
# include <openssl/bn.h>
# include <openssl/crypto.h>

# ifdef  __cplusplus
extern "C" {
# endif

# ifndef OPENSSL_NO_DEPRECATED_3_0

typedef struct SRP_gN_cache_st {
    char *b64_bn;
    BIGNUM *bn;
} SRP_gN_cache;
SKM_DEFINE_STACK_OF_INTERNAL(SRP_gN_cache, SRP_gN_cache, SRP_gN_cache)
#define sk_SRP_gN_cache_num(sk) OPENSSL_sk_num(ossl_check_const_SRP_gN_cache_sk_type(sk))
#define sk_SRP_gN_cache_value(sk, idx) ((SRP_gN_cache *)OPENSSL_sk_value(ossl_check_const_SRP_gN_cache_sk_type(sk), (idx)))
#define sk_SRP_gN_cache_new(cmp) ((STACK_OF(SRP_gN_cache) *)OPENSSL_sk_new(ossl_check_SRP_gN_cache_compfunc_type(cmp)))
#define sk_SRP_gN_cache_new_null() ((STACK_OF(SRP_gN_cache) *)OPENSSL_sk_new_null())
#define sk_SRP_gN_cache_new_reserve(cmp, n) ((STACK_OF(SRP_gN_cache) *)OPENSSL_sk_new_reserve(ossl_check_SRP_gN_cache_compfunc_type(cmp), (n)))
#define sk_SRP_gN_cache_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_SRP_gN_cache_sk_type(sk), (n))
#define sk_SRP_gN_cache_free(sk) OPENSSL_sk_free(ossl_check_SRP_gN_cache_sk_type(sk))
#define sk_SRP_gN_cache_zero(sk) OPENSSL_sk_zero(ossl_check_SRP_gN_cache_sk_type(sk))
#define sk_SRP_gN_cache_delete(sk, i) ((SRP_gN_cache *)OPENSSL_sk_delete(ossl_check_SRP_gN_cache_sk_type(sk), (i)))
#define sk_SRP_gN_cache_delete_ptr(sk, ptr) ((SRP_gN_cache *)OPENSSL_sk_delete_ptr(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_type(ptr)))
#define sk_SRP_gN_cache_push(sk, ptr) OPENSSL_sk_push(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_type(ptr))
#define sk_SRP_gN_cache_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_type(ptr))
#define sk_SRP_gN_cache_pop(sk) ((SRP_gN_cache *)OPENSSL_sk_pop(ossl_check_SRP_gN_cache_sk_type(sk)))
#define sk_SRP_gN_cache_shift(sk) ((SRP_gN_cache *)OPENSSL_sk_shift(ossl_check_SRP_gN_cache_sk_type(sk)))
#define sk_SRP_gN_cache_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_SRP_gN_cache_sk_type(sk),ossl_check_SRP_gN_cache_freefunc_type(freefunc))
#define sk_SRP_gN_cache_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_type(ptr), (idx))
#define sk_SRP_gN_cache_set(sk, idx, ptr) ((SRP_gN_cache *)OPENSSL_sk_set(ossl_check_SRP_gN_cache_sk_type(sk), (idx), ossl_check_SRP_gN_cache_type(ptr)))
#define sk_SRP_gN_cache_find(sk, ptr) OPENSSL_sk_find(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_type(ptr))
#define sk_SRP_gN_cache_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_type(ptr))
#define sk_SRP_gN_cache_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_type(ptr), pnum)
#define sk_SRP_gN_cache_sort(sk) OPENSSL_sk_sort(ossl_check_SRP_gN_cache_sk_type(sk))
#define sk_SRP_gN_cache_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_SRP_gN_cache_sk_type(sk))
#define sk_SRP_gN_cache_dup(sk) ((STACK_OF(SRP_gN_cache) *)OPENSSL_sk_dup(ossl_check_const_SRP_gN_cache_sk_type(sk)))
#define sk_SRP_gN_cache_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(SRP_gN_cache) *)OPENSSL_sk_deep_copy(ossl_check_const_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_copyfunc_type(copyfunc), ossl_check_SRP_gN_cache_freefunc_type(freefunc)))
#define sk_SRP_gN_cache_set_cmp_func(sk, cmp) ((sk_SRP_gN_cache_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_SRP_gN_cache_sk_type(sk), ossl_check_SRP_gN_cache_compfunc_type(cmp)))



typedef struct SRP_user_pwd_st {
    /* Owned by us. */
    char *id;
    BIGNUM *s;
    BIGNUM *v;
    /* Not owned by us. */
    const BIGNUM *g;
    const BIGNUM *N;
    /* Owned by us. */
    char *info;
} SRP_user_pwd;
SKM_DEFINE_STACK_OF_INTERNAL(SRP_user_pwd, SRP_user_pwd, SRP_user_pwd)
#define sk_SRP_user_pwd_num(sk) OPENSSL_sk_num(ossl_check_const_SRP_user_pwd_sk_type(sk))
#define sk_SRP_user_pwd_value(sk, idx) ((SRP_user_pwd *)OPENSSL_sk_value(ossl_check_const_SRP_user_pwd_sk_type(sk), (idx)))
#define sk_SRP_user_pwd_new(cmp) ((STACK_OF(SRP_user_pwd) *)OPENSSL_sk_new(ossl_check_SRP_user_pwd_compfunc_type(cmp)))
#define sk_SRP_user_pwd_new_null() ((STACK_OF(SRP_user_pwd) *)OPENSSL_sk_new_null())
#define sk_SRP_user_pwd_new_reserve(cmp, n) ((STACK_OF(SRP_user_pwd) *)OPENSSL_sk_new_reserve(ossl_check_SRP_user_pwd_compfunc_type(cmp), (n)))
#define sk_SRP_user_pwd_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_SRP_user_pwd_sk_type(sk), (n))
#define sk_SRP_user_pwd_free(sk) OPENSSL_sk_free(ossl_check_SRP_user_pwd_sk_type(sk))
#define sk_SRP_user_pwd_zero(sk) OPENSSL_sk_zero(ossl_check_SRP_user_pwd_sk_type(sk))
#define sk_SRP_user_pwd_delete(sk, i) ((SRP_user_pwd *)OPENSSL_sk_delete(ossl_check_SRP_user_pwd_sk_type(sk), (i)))
#define sk_SRP_user_pwd_delete_ptr(sk, ptr) ((SRP_user_pwd *)OPENSSL_sk_delete_ptr(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_type(ptr)))
#define sk_SRP_user_pwd_push(sk, ptr) OPENSSL_sk_push(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_type(ptr))
#define sk_SRP_user_pwd_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_type(ptr))
#define sk_SRP_user_pwd_pop(sk) ((SRP_user_pwd *)OPENSSL_sk_pop(ossl_check_SRP_user_pwd_sk_type(sk)))
#define sk_SRP_user_pwd_shift(sk) ((SRP_user_pwd *)OPENSSL_sk_shift(ossl_check_SRP_user_pwd_sk_type(sk)))
#define sk_SRP_user_pwd_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_SRP_user_pwd_sk_type(sk),ossl_check_SRP_user_pwd_freefunc_type(freefunc))
#define sk_SRP_user_pwd_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_type(ptr), (idx))
#define sk_SRP_user_pwd_set(sk, idx, ptr) ((SRP_user_pwd *)OPENSSL_sk_set(ossl_check_SRP_user_pwd_sk_type(sk), (idx), ossl_check_SRP_user_pwd_type(ptr)))
#define sk_SRP_user_pwd_find(sk, ptr) OPENSSL_sk_find(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_type(ptr))
#define sk_SRP_user_pwd_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_type(ptr))
#define sk_SRP_user_pwd_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_type(ptr), pnum)
#define sk_SRP_user_pwd_sort(sk) OPENSSL_sk_sort(ossl_check_SRP_user_pwd_sk_type(sk))
#define sk_SRP_user_pwd_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_SRP_user_pwd_sk_type(sk))
#define sk_SRP_user_pwd_dup(sk) ((STACK_OF(SRP_user_pwd) *)OPENSSL_sk_dup(ossl_check_const_SRP_user_pwd_sk_type(sk)))
#define sk_SRP_user_pwd_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(SRP_user_pwd) *)OPENSSL_sk_deep_copy(ossl_check_const_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_copyfunc_type(copyfunc), ossl_check_SRP_user_pwd_freefunc_type(freefunc)))
#define sk_SRP_user_pwd_set_cmp_func(sk, cmp) ((sk_SRP_user_pwd_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_SRP_user_pwd_sk_type(sk), ossl_check_SRP_user_pwd_compfunc_type(cmp)))


OSSL_DEPRECATEDIN_3_0
SRP_user_pwd *SRP_user_pwd_new(void);
OSSL_DEPRECATEDIN_3_0
void SRP_user_pwd_free(SRP_user_pwd *user_pwd);

OSSL_DEPRECATEDIN_3_0
void SRP_user_pwd_set_gN(SRP_user_pwd *user_pwd, const BIGNUM *g,
                         const BIGNUM *N);
OSSL_DEPRECATEDIN_3_0
int SRP_user_pwd_set1_ids(SRP_user_pwd *user_pwd, const char *id,
                          const char *info);
OSSL_DEPRECATEDIN_3_0
int SRP_user_pwd_set0_sv(SRP_user_pwd *user_pwd, BIGNUM *s, BIGNUM *v);

typedef struct SRP_VBASE_st {
    STACK_OF(SRP_user_pwd) *users_pwd;
    STACK_OF(SRP_gN_cache) *gN_cache;
/* to simulate a user */
    char *seed_key;
    const BIGNUM *default_g;
    const BIGNUM *default_N;
} SRP_VBASE;

/*
 * Internal structure storing N and g pair
 */
typedef struct SRP_gN_st {
    char *id;
    const BIGNUM *g;
    const BIGNUM *N;
} SRP_gN;
SKM_DEFINE_STACK_OF_INTERNAL(SRP_gN, SRP_gN, SRP_gN)
#define sk_SRP_gN_num(sk) OPENSSL_sk_num(ossl_check_const_SRP_gN_sk_type(sk))
#define sk_SRP_gN_value(sk, idx) ((SRP_gN *)OPENSSL_sk_value(ossl_check_const_SRP_gN_sk_type(sk), (idx)))
#define sk_SRP_gN_new(cmp) ((STACK_OF(SRP_gN) *)OPENSSL_sk_new(ossl_check_SRP_gN_compfunc_type(cmp)))
#define sk_SRP_gN_new_null() ((STACK_OF(SRP_gN) *)OPENSSL_sk_new_null())
#define sk_SRP_gN_new_reserve(cmp, n) ((STACK_OF(SRP_gN) *)OPENSSL_sk_new_reserve(ossl_check_SRP_gN_compfunc_type(cmp), (n)))
#define sk_SRP_gN_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_SRP_gN_sk_type(sk), (n))
#define sk_SRP_gN_free(sk) OPENSSL_sk_free(ossl_check_SRP_gN_sk_type(sk))
#define sk_SRP_gN_zero(sk) OPENSSL_sk_zero(ossl_check_SRP_gN_sk_type(sk))
#define sk_SRP_gN_delete(sk, i) ((SRP_gN *)OPENSSL_sk_delete(ossl_check_SRP_gN_sk_type(sk), (i)))
#define sk_SRP_gN_delete_ptr(sk, ptr) ((SRP_gN *)OPENSSL_sk_delete_ptr(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_type(ptr)))
#define sk_SRP_gN_push(sk, ptr) OPENSSL_sk_push(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_type(ptr))
#define sk_SRP_gN_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_type(ptr))
#define sk_SRP_gN_pop(sk) ((SRP_gN *)OPENSSL_sk_pop(ossl_check_SRP_gN_sk_type(sk)))
#define sk_SRP_gN_shift(sk) ((SRP_gN *)OPENSSL_sk_shift(ossl_check_SRP_gN_sk_type(sk)))
#define sk_SRP_gN_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_SRP_gN_sk_type(sk),ossl_check_SRP_gN_freefunc_type(freefunc))
#define sk_SRP_gN_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_type(ptr), (idx))
#define sk_SRP_gN_set(sk, idx, ptr) ((SRP_gN *)OPENSSL_sk_set(ossl_check_SRP_gN_sk_type(sk), (idx), ossl_check_SRP_gN_type(ptr)))
#define sk_SRP_gN_find(sk, ptr) OPENSSL_sk_find(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_type(ptr))
#define sk_SRP_gN_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_type(ptr))
#define sk_SRP_gN_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_type(ptr), pnum)
#define sk_SRP_gN_sort(sk) OPENSSL_sk_sort(ossl_check_SRP_gN_sk_type(sk))
#define sk_SRP_gN_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_SRP_gN_sk_type(sk))
#define sk_SRP_gN_dup(sk) ((STACK_OF(SRP_gN) *)OPENSSL_sk_dup(ossl_check_const_SRP_gN_sk_type(sk)))
#define sk_SRP_gN_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(SRP_gN) *)OPENSSL_sk_deep_copy(ossl_check_const_SRP_gN_sk_type(sk), ossl_check_SRP_gN_copyfunc_type(copyfunc), ossl_check_SRP_gN_freefunc_type(freefunc)))
#define sk_SRP_gN_set_cmp_func(sk, cmp) ((sk_SRP_gN_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_SRP_gN_sk_type(sk), ossl_check_SRP_gN_compfunc_type(cmp)))



OSSL_DEPRECATEDIN_3_0
SRP_VBASE *SRP_VBASE_new(char *seed_key);
OSSL_DEPRECATEDIN_3_0
void SRP_VBASE_free(SRP_VBASE *vb);
OSSL_DEPRECATEDIN_3_0
int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);

OSSL_DEPRECATEDIN_3_0
int SRP_VBASE_add0_user(SRP_VBASE *vb, SRP_user_pwd *user_pwd);

/* NOTE: unlike in SRP_VBASE_get_by_user, caller owns the returned pointer.*/
OSSL_DEPRECATEDIN_3_0
SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);

OSSL_DEPRECATEDIN_3_0
char *SRP_create_verifier_ex(const char *user, const char *pass, char **salt,
                             char **verifier, const char *N, const char *g,
                             OSSL_LIB_CTX *libctx, const char *propq);
OSSL_DEPRECATEDIN_3_0
char *SRP_create_verifier(const char *user, const char *pass, char **salt,
                          char **verifier, const char *N, const char *g);
OSSL_DEPRECATEDIN_3_0
int SRP_create_verifier_BN_ex(const char *user, const char *pass, BIGNUM **salt,
                              BIGNUM **verifier, const BIGNUM *N,
                              const BIGNUM *g, OSSL_LIB_CTX *libctx,
                              const char *propq);
OSSL_DEPRECATEDIN_3_0
int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,
                           BIGNUM **verifier, const BIGNUM *N,
                           const BIGNUM *g);

#  define SRP_NO_ERROR 0
#  define SRP_ERR_VBASE_INCOMPLETE_FILE 1
#  define SRP_ERR_VBASE_BN_LIB 2
#  define SRP_ERR_OPEN_FILE 3
#  define SRP_ERR_MEMORY 4

#  define DB_srptype      0
#  define DB_srpverifier  1
#  define DB_srpsalt      2
#  define DB_srpid        3
#  define DB_srpgN        4
#  define DB_srpinfo      5
#  undef  DB_NUMBER
#  define DB_NUMBER       6

#  define DB_SRP_INDEX    'I'
#  define DB_SRP_VALID    'V'
#  define DB_SRP_REVOKED  'R'
#  define DB_SRP_MODIF    'v'

/* see srp.c */
OSSL_DEPRECATEDIN_3_0
char *SRP_check_known_gN_param(const BIGNUM *g, const BIGNUM *N);
OSSL_DEPRECATEDIN_3_0
SRP_gN *SRP_get_default_gN(const char *id);

/* server side .... */
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u,
                            const BIGNUM *b, const BIGNUM *N);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_B_ex(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g,
                      const BIGNUM *v, OSSL_LIB_CTX *libctx, const char *propq);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_B(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g,
                   const BIGNUM *v);

OSSL_DEPRECATEDIN_3_0
int SRP_Verify_A_mod_N(const BIGNUM *A, const BIGNUM *N);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_u_ex(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N,
                      OSSL_LIB_CTX *libctx, const char *propq);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_u(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N);

/* client side .... */

OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_x_ex(const BIGNUM *s, const char *user, const char *pass,
                      OSSL_LIB_CTX *libctx, const char *propq);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_x(const BIGNUM *s, const char *user, const char *pass);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_A(const BIGNUM *a, const BIGNUM *N, const BIGNUM *g);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_client_key_ex(const BIGNUM *N, const BIGNUM *B, const BIGNUM *g,
                            const BIGNUM *x, const BIGNUM *a, const BIGNUM *u,
                            OSSL_LIB_CTX *libctx, const char *propq);
OSSL_DEPRECATEDIN_3_0
BIGNUM *SRP_Calc_client_key(const BIGNUM *N, const BIGNUM *B, const BIGNUM *g,
                            const BIGNUM *x, const BIGNUM *a, const BIGNUM *u);
OSSL_DEPRECATEDIN_3_0
int SRP_Verify_B_mod_N(const BIGNUM *B, const BIGNUM *N);

#  define SRP_MINIMAL_N 1024

# endif /* OPENSSL_NO_DEPRECATED_3_0 */

/* This method ignores the configured seed and fails for an unknown user. */
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0
SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);
# endif

# ifdef  __cplusplus
}
# endif
# endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/ssl.h                            0000664 0000000 0000000 00000371453 14746647661 0025525 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/ssl.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
 * Copyright 2005 Nokia. All rights reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_SSL_H
# define OPENSSL_SSL_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_SSL_H
# endif

# include <openssl/e_os2.h>
# include <openssl/opensslconf.h>
# include <openssl/comp.h>
# include <openssl/bio.h>
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  include <openssl/x509.h>
#  include <openssl/crypto.h>
#  include <openssl/buffer.h>
# endif
# include <openssl/lhash.h>
# include <openssl/pem.h>
# include <openssl/hmac.h>
# include <openssl/async.h>

# include <openssl/safestack.h>
# include <openssl/symhacks.h>
# include <openssl/ct.h>
# include <openssl/sslerr.h>
# include <openssl/prov_ssl.h>

#ifdef  __cplusplus
extern "C" {
#endif

/* OpenSSL version number for ASN.1 encoding of the session information */
/*-
 * Version 0 - initial version
 * Version 1 - added the optional peer certificate
 */
# define SSL_SESSION_ASN1_VERSION 0x0001

# define SSL_MAX_SSL_SESSION_ID_LENGTH           32
# define SSL_MAX_SID_CTX_LENGTH                  32

# define SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES     (512/8)
# define SSL_MAX_KEY_ARG_LENGTH                  8
/* SSL_MAX_MASTER_KEY_LENGTH is defined in prov_ssl.h */

/* The maximum number of encrypt/decrypt pipelines we can support */
# define SSL_MAX_PIPELINES  32

/* text strings for the ciphers */

/* These are used to specify which ciphers to use and not to use */

# define SSL_TXT_LOW             "LOW"
# define SSL_TXT_MEDIUM          "MEDIUM"
# define SSL_TXT_HIGH            "HIGH"
# define SSL_TXT_FIPS            "FIPS"

# define SSL_TXT_aNULL           "aNULL"
# define SSL_TXT_eNULL           "eNULL"
# define SSL_TXT_NULL            "NULL"

# define SSL_TXT_kRSA            "kRSA"
# define SSL_TXT_kDHr            "kDHr"/* this cipher class has been removed */
# define SSL_TXT_kDHd            "kDHd"/* this cipher class has been removed */
# define SSL_TXT_kDH             "kDH"/* this cipher class has been removed */
# define SSL_TXT_kEDH            "kEDH"/* alias for kDHE */
# define SSL_TXT_kDHE            "kDHE"
# define SSL_TXT_kECDHr          "kECDHr"/* this cipher class has been removed */
# define SSL_TXT_kECDHe          "kECDHe"/* this cipher class has been removed */
# define SSL_TXT_kECDH           "kECDH"/* this cipher class has been removed */
# define SSL_TXT_kEECDH          "kEECDH"/* alias for kECDHE */
# define SSL_TXT_kECDHE          "kECDHE"
# define SSL_TXT_kPSK            "kPSK"
# define SSL_TXT_kRSAPSK         "kRSAPSK"
# define SSL_TXT_kECDHEPSK       "kECDHEPSK"
# define SSL_TXT_kDHEPSK         "kDHEPSK"
# define SSL_TXT_kGOST           "kGOST"
# define SSL_TXT_kGOST18         "kGOST18"
# define SSL_TXT_kSRP            "kSRP"

# define SSL_TXT_aRSA            "aRSA"
# define SSL_TXT_aDSS            "aDSS"
# define SSL_TXT_aDH             "aDH"/* this cipher class has been removed */
# define SSL_TXT_aECDH           "aECDH"/* this cipher class has been removed */
# define SSL_TXT_aECDSA          "aECDSA"
# define SSL_TXT_aPSK            "aPSK"
# define SSL_TXT_aGOST94         "aGOST94"
# define SSL_TXT_aGOST01         "aGOST01"
# define SSL_TXT_aGOST12         "aGOST12"
# define SSL_TXT_aGOST           "aGOST"
# define SSL_TXT_aSRP            "aSRP"

# define SSL_TXT_DSS             "DSS"
# define SSL_TXT_DH              "DH"
# define SSL_TXT_DHE             "DHE"/* same as "kDHE:-ADH" */
# define SSL_TXT_EDH             "EDH"/* alias for DHE */
# define SSL_TXT_ADH             "ADH"
# define SSL_TXT_RSA             "RSA"
# define SSL_TXT_ECDH            "ECDH"
# define SSL_TXT_EECDH           "EECDH"/* alias for ECDHE" */
# define SSL_TXT_ECDHE           "ECDHE"/* same as "kECDHE:-AECDH" */
# define SSL_TXT_AECDH           "AECDH"
# define SSL_TXT_ECDSA           "ECDSA"
# define SSL_TXT_PSK             "PSK"
# define SSL_TXT_SRP             "SRP"

# define SSL_TXT_DES             "DES"
# define SSL_TXT_3DES            "3DES"
# define SSL_TXT_RC4             "RC4"
# define SSL_TXT_RC2             "RC2"
# define SSL_TXT_IDEA            "IDEA"
# define SSL_TXT_SEED            "SEED"
# define SSL_TXT_AES128          "AES128"
# define SSL_TXT_AES256          "AES256"
# define SSL_TXT_AES             "AES"
# define SSL_TXT_AES_GCM         "AESGCM"
# define SSL_TXT_AES_CCM         "AESCCM"
# define SSL_TXT_AES_CCM_8       "AESCCM8"
# define SSL_TXT_CAMELLIA128     "CAMELLIA128"
# define SSL_TXT_CAMELLIA256     "CAMELLIA256"
# define SSL_TXT_CAMELLIA        "CAMELLIA"
# define SSL_TXT_CHACHA20        "CHACHA20"
# define SSL_TXT_GOST            "GOST89"
# define SSL_TXT_ARIA            "ARIA"
# define SSL_TXT_ARIA_GCM        "ARIAGCM"
# define SSL_TXT_ARIA128         "ARIA128"
# define SSL_TXT_ARIA256         "ARIA256"
# define SSL_TXT_GOST2012_GOST8912_GOST8912 "GOST2012-GOST8912-GOST8912"
# define SSL_TXT_CBC             "CBC"

# define SSL_TXT_MD5             "MD5"
# define SSL_TXT_SHA1            "SHA1"
# define SSL_TXT_SHA             "SHA"/* same as "SHA1" */
# define SSL_TXT_GOST94          "GOST94"
# define SSL_TXT_GOST89MAC       "GOST89MAC"
# define SSL_TXT_GOST12          "GOST12"
# define SSL_TXT_GOST89MAC12     "GOST89MAC12"
# define SSL_TXT_SHA256          "SHA256"
# define SSL_TXT_SHA384          "SHA384"

# define SSL_TXT_SSLV3           "SSLv3"
# define SSL_TXT_TLSV1           "TLSv1"
# define SSL_TXT_TLSV1_1         "TLSv1.1"
# define SSL_TXT_TLSV1_2         "TLSv1.2"

# define SSL_TXT_ALL             "ALL"

/*-
 * COMPLEMENTOF* definitions. These identifiers are used to (de-select)
 * ciphers normally not being used.
 * Example: "RC4" will activate all ciphers using RC4 including ciphers
 * without authentication, which would normally disabled by DEFAULT (due
 * the "!ADH" being part of default). Therefore "RC4:!COMPLEMENTOFDEFAULT"
 * will make sure that it is also disabled in the specific selection.
 * COMPLEMENTOF* identifiers are portable between version, as adjustments
 * to the default cipher setup will also be included here.
 *
 * COMPLEMENTOFDEFAULT does not experience the same special treatment that
 * DEFAULT gets, as only selection is being done and no sorting as needed
 * for DEFAULT.
 */
# define SSL_TXT_CMPALL          "COMPLEMENTOFALL"
# define SSL_TXT_CMPDEF          "COMPLEMENTOFDEFAULT"

/*
 * The following cipher list is used by default. It also is substituted when
 * an application-defined cipher list string starts with 'DEFAULT'.
 * This applies to ciphersuites for TLSv1.2 and below.
 * DEPRECATED IN 3.0.0, in favor of OSSL_default_cipher_list()
 * Update both macro and function simultaneously
 */
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define SSL_DEFAULT_CIPHER_LIST "ALL:!COMPLEMENTOFDEFAULT:!eNULL"
/*
 * This is the default set of TLSv1.3 ciphersuites
 * DEPRECATED IN 3.0.0, in favor of OSSL_default_ciphersuites()
 * Update both macro and function simultaneously
 */
#  define TLS_DEFAULT_CIPHERSUITES "TLS_AES_256_GCM_SHA384:" \
                                   "TLS_CHACHA20_POLY1305_SHA256:" \
                                   "TLS_AES_128_GCM_SHA256"
# endif
/*
 * As of OpenSSL 1.0.0, ssl_create_cipher_list() in ssl/ssl_ciph.c always
 * starts with a reasonable order, and all we have to do for DEFAULT is
 * throwing out anonymous and unencrypted ciphersuites! (The latter are not
 * actually enabled by ALL, but "ALL:RSA" would enable some of them.)
 */

/* Used in SSL_set_shutdown()/SSL_get_shutdown(); */
# define SSL_SENT_SHUTDOWN       1
# define SSL_RECEIVED_SHUTDOWN   2

#ifdef __cplusplus
}
#endif

#ifdef  __cplusplus
extern "C" {
#endif

# define SSL_FILETYPE_ASN1       X509_FILETYPE_ASN1
# define SSL_FILETYPE_PEM        X509_FILETYPE_PEM

/*
 * This is needed to stop compilers complaining about the 'struct ssl_st *'
 * function parameters used to prototype callbacks in SSL_CTX.
 */
typedef struct ssl_st *ssl_crock_st;
typedef struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT;
typedef struct ssl_method_st SSL_METHOD;
typedef struct ssl_cipher_st SSL_CIPHER;
typedef struct ssl_session_st SSL_SESSION;
typedef struct tls_sigalgs_st TLS_SIGALGS;
typedef struct ssl_conf_ctx_st SSL_CONF_CTX;
typedef struct ssl_comp_st SSL_COMP;

STACK_OF(SSL_CIPHER);
STACK_OF(SSL_COMP);

/* SRTP protection profiles for use with the use_srtp extension (RFC 5764)*/
typedef struct srtp_protection_profile_st {
    const char *name;
    unsigned long id;
} SRTP_PROTECTION_PROFILE;
SKM_DEFINE_STACK_OF_INTERNAL(SRTP_PROTECTION_PROFILE, SRTP_PROTECTION_PROFILE, SRTP_PROTECTION_PROFILE)
#define sk_SRTP_PROTECTION_PROFILE_num(sk) OPENSSL_sk_num(ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define sk_SRTP_PROTECTION_PROFILE_value(sk, idx) ((SRTP_PROTECTION_PROFILE *)OPENSSL_sk_value(ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk), (idx)))
#define sk_SRTP_PROTECTION_PROFILE_new(cmp) ((STACK_OF(SRTP_PROTECTION_PROFILE) *)OPENSSL_sk_new(ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp)))
#define sk_SRTP_PROTECTION_PROFILE_new_null() ((STACK_OF(SRTP_PROTECTION_PROFILE) *)OPENSSL_sk_new_null())
#define sk_SRTP_PROTECTION_PROFILE_new_reserve(cmp, n) ((STACK_OF(SRTP_PROTECTION_PROFILE) *)OPENSSL_sk_new_reserve(ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp), (n)))
#define sk_SRTP_PROTECTION_PROFILE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), (n))
#define sk_SRTP_PROTECTION_PROFILE_free(sk) OPENSSL_sk_free(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define sk_SRTP_PROTECTION_PROFILE_zero(sk) OPENSSL_sk_zero(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define sk_SRTP_PROTECTION_PROFILE_delete(sk, i) ((SRTP_PROTECTION_PROFILE *)OPENSSL_sk_delete(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), (i)))
#define sk_SRTP_PROTECTION_PROFILE_delete_ptr(sk, ptr) ((SRTP_PROTECTION_PROFILE *)OPENSSL_sk_delete_ptr(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr)))
#define sk_SRTP_PROTECTION_PROFILE_push(sk, ptr) OPENSSL_sk_push(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define sk_SRTP_PROTECTION_PROFILE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define sk_SRTP_PROTECTION_PROFILE_pop(sk) ((SRTP_PROTECTION_PROFILE *)OPENSSL_sk_pop(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk)))
#define sk_SRTP_PROTECTION_PROFILE_shift(sk) ((SRTP_PROTECTION_PROFILE *)OPENSSL_sk_shift(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk)))
#define sk_SRTP_PROTECTION_PROFILE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk),ossl_check_SRTP_PROTECTION_PROFILE_freefunc_type(freefunc))
#define sk_SRTP_PROTECTION_PROFILE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr), (idx))
#define sk_SRTP_PROTECTION_PROFILE_set(sk, idx, ptr) ((SRTP_PROTECTION_PROFILE *)OPENSSL_sk_set(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), (idx), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr)))
#define sk_SRTP_PROTECTION_PROFILE_find(sk, ptr) OPENSSL_sk_find(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define sk_SRTP_PROTECTION_PROFILE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define sk_SRTP_PROTECTION_PROFILE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_type(ptr), pnum)
#define sk_SRTP_PROTECTION_PROFILE_sort(sk) OPENSSL_sk_sort(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define sk_SRTP_PROTECTION_PROFILE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define sk_SRTP_PROTECTION_PROFILE_dup(sk) ((STACK_OF(SRTP_PROTECTION_PROFILE) *)OPENSSL_sk_dup(ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk)))
#define sk_SRTP_PROTECTION_PROFILE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(SRTP_PROTECTION_PROFILE) *)OPENSSL_sk_deep_copy(ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_copyfunc_type(copyfunc), ossl_check_SRTP_PROTECTION_PROFILE_freefunc_type(freefunc)))
#define sk_SRTP_PROTECTION_PROFILE_set_cmp_func(sk, cmp) ((sk_SRTP_PROTECTION_PROFILE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp)))



typedef int (*tls_session_ticket_ext_cb_fn)(SSL *s, const unsigned char *data,
                                            int len, void *arg);
typedef int (*tls_session_secret_cb_fn)(SSL *s, void *secret, int *secret_len,
                                        STACK_OF(SSL_CIPHER) *peer_ciphers,
                                        const SSL_CIPHER **cipher, void *arg);

/* Extension context codes */
/* This extension is only allowed in TLS */
#define SSL_EXT_TLS_ONLY                        0x0001
/* This extension is only allowed in DTLS */
#define SSL_EXT_DTLS_ONLY                       0x0002
/* Some extensions may be allowed in DTLS but we don't implement them for it */
#define SSL_EXT_TLS_IMPLEMENTATION_ONLY         0x0004
/* Most extensions are not defined for SSLv3 but EXT_TYPE_renegotiate is */
#define SSL_EXT_SSL3_ALLOWED                    0x0008
/* Extension is only defined for TLS1.2 and below */
#define SSL_EXT_TLS1_2_AND_BELOW_ONLY           0x0010
/* Extension is only defined for TLS1.3 and above */
#define SSL_EXT_TLS1_3_ONLY                     0x0020
/* Ignore this extension during parsing if we are resuming */
#define SSL_EXT_IGNORE_ON_RESUMPTION            0x0040
#define SSL_EXT_CLIENT_HELLO                    0x0080
/* Really means TLS1.2 or below */
#define SSL_EXT_TLS1_2_SERVER_HELLO             0x0100
#define SSL_EXT_TLS1_3_SERVER_HELLO             0x0200
#define SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x0400
#define SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST      0x0800
#define SSL_EXT_TLS1_3_CERTIFICATE              0x1000
#define SSL_EXT_TLS1_3_NEW_SESSION_TICKET       0x2000
#define SSL_EXT_TLS1_3_CERTIFICATE_REQUEST      0x4000

/* Typedefs for handling custom extensions */

typedef int (*custom_ext_add_cb)(SSL *s, unsigned int ext_type,
                                 const unsigned char **out, size_t *outlen,
                                 int *al, void *add_arg);

typedef void (*custom_ext_free_cb)(SSL *s, unsigned int ext_type,
                                   const unsigned char *out, void *add_arg);

typedef int (*custom_ext_parse_cb)(SSL *s, unsigned int ext_type,
                                   const unsigned char *in, size_t inlen,
                                   int *al, void *parse_arg);


typedef int (*SSL_custom_ext_add_cb_ex)(SSL *s, unsigned int ext_type,
                                        unsigned int context,
                                        const unsigned char **out,
                                        size_t *outlen, X509 *x,
                                        size_t chainidx,
                                        int *al, void *add_arg);

typedef void (*SSL_custom_ext_free_cb_ex)(SSL *s, unsigned int ext_type,
                                          unsigned int context,
                                          const unsigned char *out,
                                          void *add_arg);

typedef int (*SSL_custom_ext_parse_cb_ex)(SSL *s, unsigned int ext_type,
                                          unsigned int context,
                                          const unsigned char *in,
                                          size_t inlen, X509 *x,
                                          size_t chainidx,
                                          int *al, void *parse_arg);

/* Typedef for verification callback */
typedef int (*SSL_verify_cb)(int preverify_ok, X509_STORE_CTX *x509_ctx);

/* Typedef for SSL async callback */
typedef int (*SSL_async_callback_fn)(SSL *s, void *arg);

#define SSL_OP_BIT(n)  ((uint64_t)1 << (uint64_t)n)

/*
 * SSL/TLS connection options.
 */
    /* Disable Extended master secret */
# define SSL_OP_NO_EXTENDED_MASTER_SECRET                SSL_OP_BIT(0)
    /* Cleanse plaintext copies of data delivered to the application */
# define SSL_OP_CLEANSE_PLAINTEXT                        SSL_OP_BIT(1)
    /* Allow initial connection to servers that don't support RI */
# define SSL_OP_LEGACY_SERVER_CONNECT                    SSL_OP_BIT(2)
    /* Enable support for Kernel TLS */
# define SSL_OP_ENABLE_KTLS                              SSL_OP_BIT(3)
# define SSL_OP_TLSEXT_PADDING                           SSL_OP_BIT(4)
# define SSL_OP_SAFARI_ECDHE_ECDSA_BUG                   SSL_OP_BIT(6)
# define SSL_OP_IGNORE_UNEXPECTED_EOF                    SSL_OP_BIT(7)
# define SSL_OP_ALLOW_CLIENT_RENEGOTIATION               SSL_OP_BIT(8)
# define SSL_OP_DISABLE_TLSEXT_CA_NAMES                  SSL_OP_BIT(9)
    /* In TLSv1.3 allow a non-(ec)dhe based kex_mode */
# define SSL_OP_ALLOW_NO_DHE_KEX                         SSL_OP_BIT(10)
    /*
     * Disable SSL 3.0/TLS 1.0 CBC vulnerability workaround that was added
     * in OpenSSL 0.9.6d.  Usually (depending on the application protocol)
     * the workaround is not needed.  Unfortunately some broken SSL/TLS
     * implementations cannot handle it at all, which is why we include it
     * in SSL_OP_ALL. Added in 0.9.6e
     */
# define SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS              SSL_OP_BIT(11)
    /* DTLS options */
# define SSL_OP_NO_QUERY_MTU                             SSL_OP_BIT(12)
    /* Turn on Cookie Exchange (on relevant for servers) */
# define SSL_OP_COOKIE_EXCHANGE                          SSL_OP_BIT(13)
    /* Don't use RFC4507 ticket extension */
# define SSL_OP_NO_TICKET                                SSL_OP_BIT(14)
# ifndef OPENSSL_NO_DTLS1_METHOD
    /*
     * Use Cisco's version identifier of DTLS_BAD_VER
     * (only with deprecated DTLSv1_client_method())
     */
#  define SSL_OP_CISCO_ANYCONNECT                        SSL_OP_BIT(15)
# endif
    /* As server, disallow session resumption on renegotiation */
# define SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION   SSL_OP_BIT(16)
    /* Don't use compression even if supported */
# define SSL_OP_NO_COMPRESSION                           SSL_OP_BIT(17)
    /* Permit unsafe legacy renegotiation */
# define SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION        SSL_OP_BIT(18)
    /* Disable encrypt-then-mac */
# define SSL_OP_NO_ENCRYPT_THEN_MAC                      SSL_OP_BIT(19)
    /*
     * Enable TLSv1.3 Compatibility mode. This is on by default. A future
     * version of OpenSSL may have this disabled by default.
     */
# define SSL_OP_ENABLE_MIDDLEBOX_COMPAT                  SSL_OP_BIT(20)
    /*
     * Prioritize Chacha20Poly1305 when client does.
     * Modifies SSL_OP_CIPHER_SERVER_PREFERENCE
     */
# define SSL_OP_PRIORITIZE_CHACHA                        SSL_OP_BIT(21)
    /*
     * Set on servers to choose the cipher according to server's preferences.
     */
# define SSL_OP_CIPHER_SERVER_PREFERENCE                 SSL_OP_BIT(22)
    /*
     * If set, a server will allow a client to issue a SSLv3.0 version
     * number as latest version supported in the premaster secret, even when
     * TLSv1.0 (version 3.1) was announced in the client hello. Normally
     * this is forbidden to prevent version rollback attacks.
     */
# define SSL_OP_TLS_ROLLBACK_BUG                         SSL_OP_BIT(23)
    /*
     * Switches off automatic TLSv1.3 anti-replay protection for early data.
     * This is a server-side option only (no effect on the client).
     */
# define SSL_OP_NO_ANTI_REPLAY                           SSL_OP_BIT(24)
# define SSL_OP_NO_SSLv3                                 SSL_OP_BIT(25)
# define SSL_OP_NO_TLSv1                                 SSL_OP_BIT(26)
# define SSL_OP_NO_TLSv1_2                               SSL_OP_BIT(27)
# define SSL_OP_NO_TLSv1_1                               SSL_OP_BIT(28)
# define SSL_OP_NO_TLSv1_3                               SSL_OP_BIT(29)
# define SSL_OP_NO_DTLSv1                                SSL_OP_BIT(26)
# define SSL_OP_NO_DTLSv1_2                              SSL_OP_BIT(27)
    /* Disallow all renegotiation */
# define SSL_OP_NO_RENEGOTIATION                         SSL_OP_BIT(30)
    /*
     * Make server add server-hello extension from early version of
     * cryptopro draft, when GOST ciphersuite is negotiated. Required for
     * interoperability with CryptoPro CSP 3.x
     */
# define SSL_OP_CRYPTOPRO_TLSEXT_BUG                     SSL_OP_BIT(31)

/*
 * Option "collections."
 */
# define SSL_OP_NO_SSL_MASK \
        ( SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1 \
          | SSL_OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_3 )
# define SSL_OP_NO_DTLS_MASK \
        ( SSL_OP_NO_DTLSv1 | SSL_OP_NO_DTLSv1_2 )

/* Various bug workarounds that should be rather harmless. */
# define SSL_OP_ALL \
        ( SSL_OP_CRYPTOPRO_TLSEXT_BUG | SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS \
          | SSL_OP_TLSEXT_PADDING | SSL_OP_SAFARI_ECDHE_ECDSA_BUG )

/*
 * OBSOLETE OPTIONS retained for compatibility
 */

# define SSL_OP_MICROSOFT_SESS_ID_BUG                    0x0
# define SSL_OP_NETSCAPE_CHALLENGE_BUG                   0x0
# define SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG         0x0
# define SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG              0x0
# define SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER               0x0
# define SSL_OP_MSIE_SSLV2_RSA_PADDING                   0x0
# define SSL_OP_SSLEAY_080_CLIENT_DH_BUG                 0x0
# define SSL_OP_TLS_D5_BUG                               0x0
# define SSL_OP_TLS_BLOCK_PADDING_BUG                    0x0
# define SSL_OP_SINGLE_ECDH_USE                          0x0
# define SSL_OP_SINGLE_DH_USE                            0x0
# define SSL_OP_EPHEMERAL_RSA                            0x0
# define SSL_OP_NO_SSLv2                                 0x0
# define SSL_OP_PKCS1_CHECK_1                            0x0
# define SSL_OP_PKCS1_CHECK_2                            0x0
# define SSL_OP_NETSCAPE_CA_DN_BUG                       0x0
# define SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG          0x0

/*
 * Allow SSL_write(..., n) to return r with 0 < r < n (i.e. report success
 * when just a single record has been written):
 */
# define SSL_MODE_ENABLE_PARTIAL_WRITE       0x00000001U
/*
 * Make it possible to retry SSL_write() with changed buffer location (buffer
 * contents must stay the same!); this is not the default to avoid the
 * misconception that non-blocking SSL_write() behaves like non-blocking
 * write():
 */
# define SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER 0x00000002U
/*
 * Never bother the application with retries if the transport is blocking:
 */
# define SSL_MODE_AUTO_RETRY 0x00000004U
/* Don't attempt to automatically build certificate chain */
# define SSL_MODE_NO_AUTO_CHAIN 0x00000008U
/*
 * Save RAM by releasing read and write buffers when they're empty. (SSL3 and
 * TLS only.) Released buffers are freed.
 */
# define SSL_MODE_RELEASE_BUFFERS 0x00000010U
/*
 * Send the current time in the Random fields of the ClientHello and
 * ServerHello records for compatibility with hypothetical implementations
 * that require it.
 */
# define SSL_MODE_SEND_CLIENTHELLO_TIME 0x00000020U
# define SSL_MODE_SEND_SERVERHELLO_TIME 0x00000040U
/*
 * Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications
 * that reconnect with a downgraded protocol version; see
 * draft-ietf-tls-downgrade-scsv-00 for details. DO NOT ENABLE THIS if your
 * application attempts a normal handshake. Only use this in explicit
 * fallback retries, following the guidance in
 * draft-ietf-tls-downgrade-scsv-00.
 */
# define SSL_MODE_SEND_FALLBACK_SCSV 0x00000080U
/*
 * Support Asynchronous operation
 */
# define SSL_MODE_ASYNC 0x00000100U

/*
 * When using DTLS/SCTP, include the terminating zero in the label
 * used for computing the endpoint-pair shared secret. Required for
 * interoperability with implementations having this bug like these
 * older version of OpenSSL:
 * - OpenSSL 1.0.0 series
 * - OpenSSL 1.0.1 series
 * - OpenSSL 1.0.2 series
 * - OpenSSL 1.1.0 series
 * - OpenSSL 1.1.1 and 1.1.1a
 */
# define SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG 0x00000400U

/* Cert related flags */
/*
 * Many implementations ignore some aspects of the TLS standards such as
 * enforcing certificate chain algorithms. When this is set we enforce them.
 */
# define SSL_CERT_FLAG_TLS_STRICT                0x00000001U

/* Suite B modes, takes same values as certificate verify flags */
# define SSL_CERT_FLAG_SUITEB_128_LOS_ONLY       0x10000
/* Suite B 192 bit only mode */
# define SSL_CERT_FLAG_SUITEB_192_LOS            0x20000
/* Suite B 128 bit mode allowing 192 bit algorithms */
# define SSL_CERT_FLAG_SUITEB_128_LOS            0x30000

/* Perform all sorts of protocol violations for testing purposes */
# define SSL_CERT_FLAG_BROKEN_PROTOCOL           0x10000000

/* Flags for building certificate chains */
/* Treat any existing certificates as untrusted CAs */
# define SSL_BUILD_CHAIN_FLAG_UNTRUSTED          0x1
/* Don't include root CA in chain */
# define SSL_BUILD_CHAIN_FLAG_NO_ROOT            0x2
/* Just check certificates already there */
# define SSL_BUILD_CHAIN_FLAG_CHECK              0x4
/* Ignore verification errors */
# define SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR       0x8
/* Clear verification errors from queue */
# define SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR        0x10

/* Flags returned by SSL_check_chain */
/* Certificate can be used with this session */
# define CERT_PKEY_VALID         0x1
/* Certificate can also be used for signing */
# define CERT_PKEY_SIGN          0x2
/* EE certificate signing algorithm OK */
# define CERT_PKEY_EE_SIGNATURE  0x10
/* CA signature algorithms OK */
# define CERT_PKEY_CA_SIGNATURE  0x20
/* EE certificate parameters OK */
# define CERT_PKEY_EE_PARAM      0x40
/* CA certificate parameters OK */
# define CERT_PKEY_CA_PARAM      0x80
/* Signing explicitly allowed as opposed to SHA1 fallback */
# define CERT_PKEY_EXPLICIT_SIGN 0x100
/* Client CA issuer names match (always set for server cert) */
# define CERT_PKEY_ISSUER_NAME   0x200
/* Cert type matches client types (always set for server cert) */
# define CERT_PKEY_CERT_TYPE     0x400
/* Cert chain suitable to Suite B */
# define CERT_PKEY_SUITEB        0x800

# define SSL_CONF_FLAG_CMDLINE           0x1
# define SSL_CONF_FLAG_FILE              0x2
# define SSL_CONF_FLAG_CLIENT            0x4
# define SSL_CONF_FLAG_SERVER            0x8
# define SSL_CONF_FLAG_SHOW_ERRORS       0x10
# define SSL_CONF_FLAG_CERTIFICATE       0x20
# define SSL_CONF_FLAG_REQUIRE_PRIVATE   0x40
/* Configuration value types */
# define SSL_CONF_TYPE_UNKNOWN           0x0
# define SSL_CONF_TYPE_STRING            0x1
# define SSL_CONF_TYPE_FILE              0x2
# define SSL_CONF_TYPE_DIR               0x3
# define SSL_CONF_TYPE_NONE              0x4
# define SSL_CONF_TYPE_STORE             0x5

/* Maximum length of the application-controlled segment of a a TLSv1.3 cookie */
# define SSL_COOKIE_LENGTH                       4096

/*
 * Note: SSL[_CTX]_set_{options,mode} use |= op on the previous value, they
 * cannot be used to clear bits.
 */

uint64_t SSL_CTX_get_options(const SSL_CTX *ctx);
uint64_t SSL_get_options(const SSL *s);
uint64_t SSL_CTX_clear_options(SSL_CTX *ctx, uint64_t op);
uint64_t SSL_clear_options(SSL *s, uint64_t op);
uint64_t SSL_CTX_set_options(SSL_CTX *ctx, uint64_t op);
uint64_t SSL_set_options(SSL *s, uint64_t op);

# define SSL_CTX_set_mode(ctx,op) \
        SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,(op),NULL)
# define SSL_CTX_clear_mode(ctx,op) \
        SSL_CTX_ctrl((ctx),SSL_CTRL_CLEAR_MODE,(op),NULL)
# define SSL_CTX_get_mode(ctx) \
        SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,0,NULL)
# define SSL_clear_mode(ssl,op) \
        SSL_ctrl((ssl),SSL_CTRL_CLEAR_MODE,(op),NULL)
# define SSL_set_mode(ssl,op) \
        SSL_ctrl((ssl),SSL_CTRL_MODE,(op),NULL)
# define SSL_get_mode(ssl) \
        SSL_ctrl((ssl),SSL_CTRL_MODE,0,NULL)
# define SSL_set_mtu(ssl, mtu) \
        SSL_ctrl((ssl),SSL_CTRL_SET_MTU,(mtu),NULL)
# define DTLS_set_link_mtu(ssl, mtu) \
        SSL_ctrl((ssl),DTLS_CTRL_SET_LINK_MTU,(mtu),NULL)
# define DTLS_get_link_min_mtu(ssl) \
        SSL_ctrl((ssl),DTLS_CTRL_GET_LINK_MIN_MTU,0,NULL)

# define SSL_get_secure_renegotiation_support(ssl) \
        SSL_ctrl((ssl), SSL_CTRL_GET_RI_SUPPORT, 0, NULL)

# define SSL_CTX_set_cert_flags(ctx,op) \
        SSL_CTX_ctrl((ctx),SSL_CTRL_CERT_FLAGS,(op),NULL)
# define SSL_set_cert_flags(s,op) \
        SSL_ctrl((s),SSL_CTRL_CERT_FLAGS,(op),NULL)
# define SSL_CTX_clear_cert_flags(ctx,op) \
        SSL_CTX_ctrl((ctx),SSL_CTRL_CLEAR_CERT_FLAGS,(op),NULL)
# define SSL_clear_cert_flags(s,op) \
        SSL_ctrl((s),SSL_CTRL_CLEAR_CERT_FLAGS,(op),NULL)

void SSL_CTX_set_msg_callback(SSL_CTX *ctx,
                              void (*cb) (int write_p, int version,
                                          int content_type, const void *buf,
                                          size_t len, SSL *ssl, void *arg));
void SSL_set_msg_callback(SSL *ssl,
                          void (*cb) (int write_p, int version,
                                      int content_type, const void *buf,
                                      size_t len, SSL *ssl, void *arg));
# define SSL_CTX_set_msg_callback_arg(ctx, arg) SSL_CTX_ctrl((ctx), SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))
# define SSL_set_msg_callback_arg(ssl, arg) SSL_ctrl((ssl), SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))

# define SSL_get_extms_support(s) \
        SSL_ctrl((s),SSL_CTRL_GET_EXTMS_SUPPORT,0,NULL)

# ifndef OPENSSL_NO_SRP
/* see tls_srp.c */
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 __owur int SSL_SRP_CTX_init(SSL *s);
OSSL_DEPRECATEDIN_3_0 __owur int SSL_CTX_SRP_CTX_init(SSL_CTX *ctx);
OSSL_DEPRECATEDIN_3_0 int SSL_SRP_CTX_free(SSL *ctx);
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_SRP_CTX_free(SSL_CTX *ctx);
OSSL_DEPRECATEDIN_3_0 __owur int SSL_srp_server_param_with_username(SSL *s,
                                                                    int *ad);
OSSL_DEPRECATEDIN_3_0 __owur int SRP_Calc_A_param(SSL *s);
#  endif
# endif

/* 100k max cert list */
# define SSL_MAX_CERT_LIST_DEFAULT (1024*100)

# define SSL_SESSION_CACHE_MAX_SIZE_DEFAULT      (1024*20)

/*
 * This callback type is used inside SSL_CTX, SSL, and in the functions that
 * set them. It is used to override the generation of SSL/TLS session IDs in
 * a server. Return value should be zero on an error, non-zero to proceed.
 * Also, callbacks should themselves check if the id they generate is unique
 * otherwise the SSL handshake will fail with an error - callbacks can do
 * this using the 'ssl' value they're passed by;
 * SSL_has_matching_session_id(ssl, id, *id_len) The length value passed in
 * is set at the maximum size the session ID can be. In SSLv3/TLSv1 it is 32
 * bytes. The callback can alter this length to be less if desired. It is
 * also an error for the callback to set the size to zero.
 */
typedef int (*GEN_SESSION_CB) (SSL *ssl, unsigned char *id,
                               unsigned int *id_len);

# define SSL_SESS_CACHE_OFF                      0x0000
# define SSL_SESS_CACHE_CLIENT                   0x0001
# define SSL_SESS_CACHE_SERVER                   0x0002
# define SSL_SESS_CACHE_BOTH     (SSL_SESS_CACHE_CLIENT|SSL_SESS_CACHE_SERVER)
# define SSL_SESS_CACHE_NO_AUTO_CLEAR            0x0080
/* enough comments already ... see SSL_CTX_set_session_cache_mode(3) */
# define SSL_SESS_CACHE_NO_INTERNAL_LOOKUP       0x0100
# define SSL_SESS_CACHE_NO_INTERNAL_STORE        0x0200
# define SSL_SESS_CACHE_NO_INTERNAL \
        (SSL_SESS_CACHE_NO_INTERNAL_LOOKUP|SSL_SESS_CACHE_NO_INTERNAL_STORE)
# define SSL_SESS_CACHE_UPDATE_TIME              0x0400

LHASH_OF(SSL_SESSION) *SSL_CTX_sessions(SSL_CTX *ctx);
# define SSL_CTX_sess_number(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_NUMBER,0,NULL)
# define SSL_CTX_sess_connect(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT,0,NULL)
# define SSL_CTX_sess_connect_good(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT_GOOD,0,NULL)
# define SSL_CTX_sess_connect_renegotiate(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CONNECT_RENEGOTIATE,0,NULL)
# define SSL_CTX_sess_accept(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT,0,NULL)
# define SSL_CTX_sess_accept_renegotiate(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT_RENEGOTIATE,0,NULL)
# define SSL_CTX_sess_accept_good(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_ACCEPT_GOOD,0,NULL)
# define SSL_CTX_sess_hits(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_HIT,0,NULL)
# define SSL_CTX_sess_cb_hits(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CB_HIT,0,NULL)
# define SSL_CTX_sess_misses(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_MISSES,0,NULL)
# define SSL_CTX_sess_timeouts(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_TIMEOUTS,0,NULL)
# define SSL_CTX_sess_cache_full(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CACHE_FULL,0,NULL)

void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,
                             int (*new_session_cb) (struct ssl_st *ssl,
                                                    SSL_SESSION *sess));
int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
                                              SSL_SESSION *sess);
void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,
                                void (*remove_session_cb) (struct ssl_ctx_st
                                                           *ctx,
                                                           SSL_SESSION *sess));
void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)) (struct ssl_ctx_st *ctx,
                                                  SSL_SESSION *sess);
void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
                             SSL_SESSION *(*get_session_cb) (struct ssl_st
                                                             *ssl,
                                                             const unsigned char
                                                             *data, int len,
                                                             int *copy));
SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
                                                       const unsigned char *data,
                                                       int len, int *copy);
void SSL_CTX_set_info_callback(SSL_CTX *ctx,
                               void (*cb) (const SSL *ssl, int type, int val));
void (*SSL_CTX_get_info_callback(SSL_CTX *ctx)) (const SSL *ssl, int type,
                                                 int val);
void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,
                                int (*client_cert_cb) (SSL *ssl, X509 **x509,
                                                       EVP_PKEY **pkey));
int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx)) (SSL *ssl, X509 **x509,
                                                 EVP_PKEY **pkey);
# ifndef OPENSSL_NO_ENGINE
__owur int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e);
# endif
void SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,
                                    int (*app_gen_cookie_cb) (SSL *ssl,
                                                              unsigned char
                                                              *cookie,
                                                              unsigned int
                                                              *cookie_len));
void SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,
                                  int (*app_verify_cookie_cb) (SSL *ssl,
                                                               const unsigned
                                                               char *cookie,
                                                               unsigned int
                                                               cookie_len));

void SSL_CTX_set_stateless_cookie_generate_cb(
    SSL_CTX *ctx,
    int (*gen_stateless_cookie_cb) (SSL *ssl,
                                    unsigned char *cookie,
                                    size_t *cookie_len));
void SSL_CTX_set_stateless_cookie_verify_cb(
    SSL_CTX *ctx,
    int (*verify_stateless_cookie_cb) (SSL *ssl,
                                       const unsigned char *cookie,
                                       size_t cookie_len));
# ifndef OPENSSL_NO_NEXTPROTONEG

typedef int (*SSL_CTX_npn_advertised_cb_func)(SSL *ssl,
                                              const unsigned char **out,
                                              unsigned int *outlen,
                                              void *arg);
void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *s,
                                           SSL_CTX_npn_advertised_cb_func cb,
                                           void *arg);
#  define SSL_CTX_set_npn_advertised_cb SSL_CTX_set_next_protos_advertised_cb

typedef int (*SSL_CTX_npn_select_cb_func)(SSL *s,
                                          unsigned char **out,
                                          unsigned char *outlen,
                                          const unsigned char *in,
                                          unsigned int inlen,
                                          void *arg);
void SSL_CTX_set_next_proto_select_cb(SSL_CTX *s,
                                      SSL_CTX_npn_select_cb_func cb,
                                      void *arg);
#  define SSL_CTX_set_npn_select_cb SSL_CTX_set_next_proto_select_cb

void SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,
                                    unsigned *len);
#  define SSL_get0_npn_negotiated SSL_get0_next_proto_negotiated
# endif

__owur int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
                                 const unsigned char *in, unsigned int inlen,
                                 const unsigned char *client,
                                 unsigned int client_len);

# define OPENSSL_NPN_UNSUPPORTED 0
# define OPENSSL_NPN_NEGOTIATED  1
# define OPENSSL_NPN_NO_OVERLAP  2

__owur int SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,
                                   unsigned int protos_len);
__owur int SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,
                               unsigned int protos_len);
typedef int (*SSL_CTX_alpn_select_cb_func)(SSL *ssl,
                                           const unsigned char **out,
                                           unsigned char *outlen,
                                           const unsigned char *in,
                                           unsigned int inlen,
                                           void *arg);
void SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,
                                SSL_CTX_alpn_select_cb_func cb,
                                void *arg);
void SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
                            unsigned int *len);

# ifndef OPENSSL_NO_PSK
/*
 * the maximum length of the buffer given to callbacks containing the
 * resulting identity/psk
 */
#  define PSK_MAX_IDENTITY_LEN 256
#  define PSK_MAX_PSK_LEN 512
typedef unsigned int (*SSL_psk_client_cb_func)(SSL *ssl,
                                               const char *hint,
                                               char *identity,
                                               unsigned int max_identity_len,
                                               unsigned char *psk,
                                               unsigned int max_psk_len);
void SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, SSL_psk_client_cb_func cb);
void SSL_set_psk_client_callback(SSL *ssl, SSL_psk_client_cb_func cb);

typedef unsigned int (*SSL_psk_server_cb_func)(SSL *ssl,
                                               const char *identity,
                                               unsigned char *psk,
                                               unsigned int max_psk_len);
void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, SSL_psk_server_cb_func cb);
void SSL_set_psk_server_callback(SSL *ssl, SSL_psk_server_cb_func cb);

__owur int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint);
__owur int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint);
const char *SSL_get_psk_identity_hint(const SSL *s);
const char *SSL_get_psk_identity(const SSL *s);
# endif

typedef int (*SSL_psk_find_session_cb_func)(SSL *ssl,
                                            const unsigned char *identity,
                                            size_t identity_len,
                                            SSL_SESSION **sess);
typedef int (*SSL_psk_use_session_cb_func)(SSL *ssl, const EVP_MD *md,
                                           const unsigned char **id,
                                           size_t *idlen,
                                           SSL_SESSION **sess);

void SSL_set_psk_find_session_callback(SSL *s, SSL_psk_find_session_cb_func cb);
void SSL_CTX_set_psk_find_session_callback(SSL_CTX *ctx,
                                           SSL_psk_find_session_cb_func cb);
void SSL_set_psk_use_session_callback(SSL *s, SSL_psk_use_session_cb_func cb);
void SSL_CTX_set_psk_use_session_callback(SSL_CTX *ctx,
                                          SSL_psk_use_session_cb_func cb);

/* Register callbacks to handle custom TLS Extensions for client or server. */

__owur int SSL_CTX_has_client_custom_ext(const SSL_CTX *ctx,
                                         unsigned int ext_type);

__owur int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx,
                                         unsigned int ext_type,
                                         custom_ext_add_cb add_cb,
                                         custom_ext_free_cb free_cb,
                                         void *add_arg,
                                         custom_ext_parse_cb parse_cb,
                                         void *parse_arg);

__owur int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx,
                                         unsigned int ext_type,
                                         custom_ext_add_cb add_cb,
                                         custom_ext_free_cb free_cb,
                                         void *add_arg,
                                         custom_ext_parse_cb parse_cb,
                                         void *parse_arg);

__owur int SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                  unsigned int context,
                                  SSL_custom_ext_add_cb_ex add_cb,
                                  SSL_custom_ext_free_cb_ex free_cb,
                                  void *add_arg,
                                  SSL_custom_ext_parse_cb_ex parse_cb,
                                  void *parse_arg);

__owur int SSL_extension_supported(unsigned int ext_type);

# define SSL_NOTHING            1
# define SSL_WRITING            2
# define SSL_READING            3
# define SSL_X509_LOOKUP        4
# define SSL_ASYNC_PAUSED       5
# define SSL_ASYNC_NO_JOBS      6
# define SSL_CLIENT_HELLO_CB    7
# define SSL_RETRY_VERIFY       8

/* These will only be used when doing non-blocking IO */
# define SSL_want_nothing(s)         (SSL_want(s) == SSL_NOTHING)
# define SSL_want_read(s)            (SSL_want(s) == SSL_READING)
# define SSL_want_write(s)           (SSL_want(s) == SSL_WRITING)
# define SSL_want_x509_lookup(s)     (SSL_want(s) == SSL_X509_LOOKUP)
# define SSL_want_retry_verify(s)    (SSL_want(s) == SSL_RETRY_VERIFY)
# define SSL_want_async(s)           (SSL_want(s) == SSL_ASYNC_PAUSED)
# define SSL_want_async_job(s)       (SSL_want(s) == SSL_ASYNC_NO_JOBS)
# define SSL_want_client_hello_cb(s) (SSL_want(s) == SSL_CLIENT_HELLO_CB)

# define SSL_MAC_FLAG_READ_MAC_STREAM 1
# define SSL_MAC_FLAG_WRITE_MAC_STREAM 2
# define SSL_MAC_FLAG_READ_MAC_TLSTREE 4
# define SSL_MAC_FLAG_WRITE_MAC_TLSTREE 8

/*
 * A callback for logging out TLS key material. This callback should log out
 * |line| followed by a newline.
 */
typedef void (*SSL_CTX_keylog_cb_func)(const SSL *ssl, const char *line);

/*
 * SSL_CTX_set_keylog_callback configures a callback to log key material. This
 * is intended for debugging use with tools like Wireshark. The cb function
 * should log line followed by a newline.
 */
void SSL_CTX_set_keylog_callback(SSL_CTX *ctx, SSL_CTX_keylog_cb_func cb);

/*
 * SSL_CTX_get_keylog_callback returns the callback configured by
 * SSL_CTX_set_keylog_callback.
 */
SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX *ctx);

int SSL_CTX_set_max_early_data(SSL_CTX *ctx, uint32_t max_early_data);
uint32_t SSL_CTX_get_max_early_data(const SSL_CTX *ctx);
int SSL_set_max_early_data(SSL *s, uint32_t max_early_data);
uint32_t SSL_get_max_early_data(const SSL *s);
int SSL_CTX_set_recv_max_early_data(SSL_CTX *ctx, uint32_t recv_max_early_data);
uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX *ctx);
int SSL_set_recv_max_early_data(SSL *s, uint32_t recv_max_early_data);
uint32_t SSL_get_recv_max_early_data(const SSL *s);

#ifdef __cplusplus
}
#endif

# include <openssl/ssl2.h>
# include <openssl/ssl3.h>
# include <openssl/tls1.h>      /* This is mostly sslv3 with a few tweaks */
# include <openssl/dtls1.h>     /* Datagram TLS */
# include <openssl/srtp.h>      /* Support for the use_srtp extension */

#ifdef  __cplusplus
extern "C" {
#endif

/*
 * These need to be after the above set of includes due to a compiler bug
 * in VisualStudio 2015
 */
SKM_DEFINE_STACK_OF_INTERNAL(SSL_CIPHER, const SSL_CIPHER, SSL_CIPHER)
#define sk_SSL_CIPHER_num(sk) OPENSSL_sk_num(ossl_check_const_SSL_CIPHER_sk_type(sk))
#define sk_SSL_CIPHER_value(sk, idx) ((const SSL_CIPHER *)OPENSSL_sk_value(ossl_check_const_SSL_CIPHER_sk_type(sk), (idx)))
#define sk_SSL_CIPHER_new(cmp) ((STACK_OF(SSL_CIPHER) *)OPENSSL_sk_new(ossl_check_SSL_CIPHER_compfunc_type(cmp)))
#define sk_SSL_CIPHER_new_null() ((STACK_OF(SSL_CIPHER) *)OPENSSL_sk_new_null())
#define sk_SSL_CIPHER_new_reserve(cmp, n) ((STACK_OF(SSL_CIPHER) *)OPENSSL_sk_new_reserve(ossl_check_SSL_CIPHER_compfunc_type(cmp), (n)))
#define sk_SSL_CIPHER_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_SSL_CIPHER_sk_type(sk), (n))
#define sk_SSL_CIPHER_free(sk) OPENSSL_sk_free(ossl_check_SSL_CIPHER_sk_type(sk))
#define sk_SSL_CIPHER_zero(sk) OPENSSL_sk_zero(ossl_check_SSL_CIPHER_sk_type(sk))
#define sk_SSL_CIPHER_delete(sk, i) ((const SSL_CIPHER *)OPENSSL_sk_delete(ossl_check_SSL_CIPHER_sk_type(sk), (i)))
#define sk_SSL_CIPHER_delete_ptr(sk, ptr) ((const SSL_CIPHER *)OPENSSL_sk_delete_ptr(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_type(ptr)))
#define sk_SSL_CIPHER_push(sk, ptr) OPENSSL_sk_push(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_type(ptr))
#define sk_SSL_CIPHER_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_type(ptr))
#define sk_SSL_CIPHER_pop(sk) ((const SSL_CIPHER *)OPENSSL_sk_pop(ossl_check_SSL_CIPHER_sk_type(sk)))
#define sk_SSL_CIPHER_shift(sk) ((const SSL_CIPHER *)OPENSSL_sk_shift(ossl_check_SSL_CIPHER_sk_type(sk)))
#define sk_SSL_CIPHER_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_SSL_CIPHER_sk_type(sk),ossl_check_SSL_CIPHER_freefunc_type(freefunc))
#define sk_SSL_CIPHER_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_type(ptr), (idx))
#define sk_SSL_CIPHER_set(sk, idx, ptr) ((const SSL_CIPHER *)OPENSSL_sk_set(ossl_check_SSL_CIPHER_sk_type(sk), (idx), ossl_check_SSL_CIPHER_type(ptr)))
#define sk_SSL_CIPHER_find(sk, ptr) OPENSSL_sk_find(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_type(ptr))
#define sk_SSL_CIPHER_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_type(ptr))
#define sk_SSL_CIPHER_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_type(ptr), pnum)
#define sk_SSL_CIPHER_sort(sk) OPENSSL_sk_sort(ossl_check_SSL_CIPHER_sk_type(sk))
#define sk_SSL_CIPHER_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_SSL_CIPHER_sk_type(sk))
#define sk_SSL_CIPHER_dup(sk) ((STACK_OF(SSL_CIPHER) *)OPENSSL_sk_dup(ossl_check_const_SSL_CIPHER_sk_type(sk)))
#define sk_SSL_CIPHER_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(SSL_CIPHER) *)OPENSSL_sk_deep_copy(ossl_check_const_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_copyfunc_type(copyfunc), ossl_check_SSL_CIPHER_freefunc_type(freefunc)))
#define sk_SSL_CIPHER_set_cmp_func(sk, cmp) ((sk_SSL_CIPHER_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_SSL_CIPHER_sk_type(sk), ossl_check_SSL_CIPHER_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(SSL_COMP, SSL_COMP, SSL_COMP)
#define sk_SSL_COMP_num(sk) OPENSSL_sk_num(ossl_check_const_SSL_COMP_sk_type(sk))
#define sk_SSL_COMP_value(sk, idx) ((SSL_COMP *)OPENSSL_sk_value(ossl_check_const_SSL_COMP_sk_type(sk), (idx)))
#define sk_SSL_COMP_new(cmp) ((STACK_OF(SSL_COMP) *)OPENSSL_sk_new(ossl_check_SSL_COMP_compfunc_type(cmp)))
#define sk_SSL_COMP_new_null() ((STACK_OF(SSL_COMP) *)OPENSSL_sk_new_null())
#define sk_SSL_COMP_new_reserve(cmp, n) ((STACK_OF(SSL_COMP) *)OPENSSL_sk_new_reserve(ossl_check_SSL_COMP_compfunc_type(cmp), (n)))
#define sk_SSL_COMP_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_SSL_COMP_sk_type(sk), (n))
#define sk_SSL_COMP_free(sk) OPENSSL_sk_free(ossl_check_SSL_COMP_sk_type(sk))
#define sk_SSL_COMP_zero(sk) OPENSSL_sk_zero(ossl_check_SSL_COMP_sk_type(sk))
#define sk_SSL_COMP_delete(sk, i) ((SSL_COMP *)OPENSSL_sk_delete(ossl_check_SSL_COMP_sk_type(sk), (i)))
#define sk_SSL_COMP_delete_ptr(sk, ptr) ((SSL_COMP *)OPENSSL_sk_delete_ptr(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_type(ptr)))
#define sk_SSL_COMP_push(sk, ptr) OPENSSL_sk_push(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_type(ptr))
#define sk_SSL_COMP_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_type(ptr))
#define sk_SSL_COMP_pop(sk) ((SSL_COMP *)OPENSSL_sk_pop(ossl_check_SSL_COMP_sk_type(sk)))
#define sk_SSL_COMP_shift(sk) ((SSL_COMP *)OPENSSL_sk_shift(ossl_check_SSL_COMP_sk_type(sk)))
#define sk_SSL_COMP_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_SSL_COMP_sk_type(sk),ossl_check_SSL_COMP_freefunc_type(freefunc))
#define sk_SSL_COMP_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_type(ptr), (idx))
#define sk_SSL_COMP_set(sk, idx, ptr) ((SSL_COMP *)OPENSSL_sk_set(ossl_check_SSL_COMP_sk_type(sk), (idx), ossl_check_SSL_COMP_type(ptr)))
#define sk_SSL_COMP_find(sk, ptr) OPENSSL_sk_find(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_type(ptr))
#define sk_SSL_COMP_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_type(ptr))
#define sk_SSL_COMP_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_type(ptr), pnum)
#define sk_SSL_COMP_sort(sk) OPENSSL_sk_sort(ossl_check_SSL_COMP_sk_type(sk))
#define sk_SSL_COMP_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_SSL_COMP_sk_type(sk))
#define sk_SSL_COMP_dup(sk) ((STACK_OF(SSL_COMP) *)OPENSSL_sk_dup(ossl_check_const_SSL_COMP_sk_type(sk)))
#define sk_SSL_COMP_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(SSL_COMP) *)OPENSSL_sk_deep_copy(ossl_check_const_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_copyfunc_type(copyfunc), ossl_check_SSL_COMP_freefunc_type(freefunc)))
#define sk_SSL_COMP_set_cmp_func(sk, cmp) ((sk_SSL_COMP_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_SSL_COMP_sk_type(sk), ossl_check_SSL_COMP_compfunc_type(cmp)))


/* compatibility */
# define SSL_set_app_data(s,arg)         (SSL_set_ex_data(s,0,(char *)(arg)))
# define SSL_get_app_data(s)             (SSL_get_ex_data(s,0))
# define SSL_SESSION_set_app_data(s,a)   (SSL_SESSION_set_ex_data(s,0, \
                                                                  (char *)(a)))
# define SSL_SESSION_get_app_data(s)     (SSL_SESSION_get_ex_data(s,0))
# define SSL_CTX_get_app_data(ctx)       (SSL_CTX_get_ex_data(ctx,0))
# define SSL_CTX_set_app_data(ctx,arg)   (SSL_CTX_set_ex_data(ctx,0, \
                                                              (char *)(arg)))
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void SSL_set_debug(SSL *s, int debug);
# endif

/* TLSv1.3 KeyUpdate message types */
/* -1 used so that this is an invalid value for the on-the-wire protocol */
#define SSL_KEY_UPDATE_NONE             -1
/* Values as defined for the on-the-wire protocol */
#define SSL_KEY_UPDATE_NOT_REQUESTED     0
#define SSL_KEY_UPDATE_REQUESTED         1

/*
 * The valid handshake states (one for each type message sent and one for each
 * type of message received). There are also two "special" states:
 * TLS = TLS or DTLS state
 * DTLS = DTLS specific state
 * CR/SR = Client Read/Server Read
 * CW/SW = Client Write/Server Write
 *
 * The "special" states are:
 * TLS_ST_BEFORE = No handshake has been initiated yet
 * TLS_ST_OK = A handshake has been successfully completed
 */
typedef enum {
    TLS_ST_BEFORE,
    TLS_ST_OK,
    DTLS_ST_CR_HELLO_VERIFY_REQUEST,
    TLS_ST_CR_SRVR_HELLO,
    TLS_ST_CR_CERT,
    TLS_ST_CR_CERT_STATUS,
    TLS_ST_CR_KEY_EXCH,
    TLS_ST_CR_CERT_REQ,
    TLS_ST_CR_SRVR_DONE,
    TLS_ST_CR_SESSION_TICKET,
    TLS_ST_CR_CHANGE,
    TLS_ST_CR_FINISHED,
    TLS_ST_CW_CLNT_HELLO,
    TLS_ST_CW_CERT,
    TLS_ST_CW_KEY_EXCH,
    TLS_ST_CW_CERT_VRFY,
    TLS_ST_CW_CHANGE,
    TLS_ST_CW_NEXT_PROTO,
    TLS_ST_CW_FINISHED,
    TLS_ST_SW_HELLO_REQ,
    TLS_ST_SR_CLNT_HELLO,
    DTLS_ST_SW_HELLO_VERIFY_REQUEST,
    TLS_ST_SW_SRVR_HELLO,
    TLS_ST_SW_CERT,
    TLS_ST_SW_KEY_EXCH,
    TLS_ST_SW_CERT_REQ,
    TLS_ST_SW_SRVR_DONE,
    TLS_ST_SR_CERT,
    TLS_ST_SR_KEY_EXCH,
    TLS_ST_SR_CERT_VRFY,
    TLS_ST_SR_NEXT_PROTO,
    TLS_ST_SR_CHANGE,
    TLS_ST_SR_FINISHED,
    TLS_ST_SW_SESSION_TICKET,
    TLS_ST_SW_CERT_STATUS,
    TLS_ST_SW_CHANGE,
    TLS_ST_SW_FINISHED,
    TLS_ST_SW_ENCRYPTED_EXTENSIONS,
    TLS_ST_CR_ENCRYPTED_EXTENSIONS,
    TLS_ST_CR_CERT_VRFY,
    TLS_ST_SW_CERT_VRFY,
    TLS_ST_CR_HELLO_REQ,
    TLS_ST_SW_KEY_UPDATE,
    TLS_ST_CW_KEY_UPDATE,
    TLS_ST_SR_KEY_UPDATE,
    TLS_ST_CR_KEY_UPDATE,
    TLS_ST_EARLY_DATA,
    TLS_ST_PENDING_EARLY_DATA_END,
    TLS_ST_CW_END_OF_EARLY_DATA,
    TLS_ST_SR_END_OF_EARLY_DATA
} OSSL_HANDSHAKE_STATE;

/*
 * Most of the following state values are no longer used and are defined to be
 * the closest equivalent value in the current state machine code. Not all
 * defines have an equivalent and are set to a dummy value (-1). SSL_ST_CONNECT
 * and SSL_ST_ACCEPT are still in use in the definition of SSL_CB_ACCEPT_LOOP,
 * SSL_CB_ACCEPT_EXIT, SSL_CB_CONNECT_LOOP and SSL_CB_CONNECT_EXIT.
 */

# define SSL_ST_CONNECT                  0x1000
# define SSL_ST_ACCEPT                   0x2000

# define SSL_ST_MASK                     0x0FFF

# define SSL_CB_LOOP                     0x01
# define SSL_CB_EXIT                     0x02
# define SSL_CB_READ                     0x04
# define SSL_CB_WRITE                    0x08
# define SSL_CB_ALERT                    0x4000/* used in callback */
# define SSL_CB_READ_ALERT               (SSL_CB_ALERT|SSL_CB_READ)
# define SSL_CB_WRITE_ALERT              (SSL_CB_ALERT|SSL_CB_WRITE)
# define SSL_CB_ACCEPT_LOOP              (SSL_ST_ACCEPT|SSL_CB_LOOP)
# define SSL_CB_ACCEPT_EXIT              (SSL_ST_ACCEPT|SSL_CB_EXIT)
# define SSL_CB_CONNECT_LOOP             (SSL_ST_CONNECT|SSL_CB_LOOP)
# define SSL_CB_CONNECT_EXIT             (SSL_ST_CONNECT|SSL_CB_EXIT)
# define SSL_CB_HANDSHAKE_START          0x10
# define SSL_CB_HANDSHAKE_DONE           0x20

/* Is the SSL_connection established? */
# define SSL_in_connect_init(a)          (SSL_in_init(a) && !SSL_is_server(a))
# define SSL_in_accept_init(a)           (SSL_in_init(a) && SSL_is_server(a))
int SSL_in_init(const SSL *s);
int SSL_in_before(const SSL *s);
int SSL_is_init_finished(const SSL *s);

/*
 * The following 3 states are kept in ssl->rlayer.rstate when reads fail, you
 * should not need these
 */
# define SSL_ST_READ_HEADER                      0xF0
# define SSL_ST_READ_BODY                        0xF1
# define SSL_ST_READ_DONE                        0xF2

/*-
 * Obtain latest Finished message
 *   -- that we sent (SSL_get_finished)
 *   -- that we expected from peer (SSL_get_peer_finished).
 * Returns length (0 == no Finished so far), copies up to 'count' bytes.
 */
size_t SSL_get_finished(const SSL *s, void *buf, size_t count);
size_t SSL_get_peer_finished(const SSL *s, void *buf, size_t count);

/*
 * use either SSL_VERIFY_NONE or SSL_VERIFY_PEER, the last 3 options are
 * 'ored' with SSL_VERIFY_PEER if they are desired
 */
# define SSL_VERIFY_NONE                 0x00
# define SSL_VERIFY_PEER                 0x01
# define SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02
# define SSL_VERIFY_CLIENT_ONCE          0x04
# define SSL_VERIFY_POST_HANDSHAKE       0x08

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define OpenSSL_add_ssl_algorithms()   SSL_library_init()
#  define SSLeay_add_ssl_algorithms()    SSL_library_init()
# endif

/* More backward compatibility */
# define SSL_get_cipher(s) \
                SSL_CIPHER_get_name(SSL_get_current_cipher(s))
# define SSL_get_cipher_bits(s,np) \
                SSL_CIPHER_get_bits(SSL_get_current_cipher(s),np)
# define SSL_get_cipher_version(s) \
                SSL_CIPHER_get_version(SSL_get_current_cipher(s))
# define SSL_get_cipher_name(s) \
                SSL_CIPHER_get_name(SSL_get_current_cipher(s))
# define SSL_get_time(a)         SSL_SESSION_get_time(a)
# define SSL_set_time(a,b)       SSL_SESSION_set_time((a),(b))
# define SSL_get_timeout(a)      SSL_SESSION_get_timeout(a)
# define SSL_set_timeout(a,b)    SSL_SESSION_set_timeout((a),(b))

# define d2i_SSL_SESSION_bio(bp,s_id) ASN1_d2i_bio_of(SSL_SESSION,SSL_SESSION_new,d2i_SSL_SESSION,bp,s_id)
# define i2d_SSL_SESSION_bio(bp,s_id) ASN1_i2d_bio_of(SSL_SESSION,i2d_SSL_SESSION,bp,s_id)

DECLARE_PEM_rw(SSL_SESSION, SSL_SESSION)
# define SSL_AD_REASON_OFFSET            1000/* offset to get SSL_R_... value
                                              * from SSL_AD_... */
/* These alert types are for SSLv3 and TLSv1 */
# define SSL_AD_CLOSE_NOTIFY             SSL3_AD_CLOSE_NOTIFY
/* fatal */
# define SSL_AD_UNEXPECTED_MESSAGE       SSL3_AD_UNEXPECTED_MESSAGE
/* fatal */
# define SSL_AD_BAD_RECORD_MAC           SSL3_AD_BAD_RECORD_MAC
# define SSL_AD_DECRYPTION_FAILED        TLS1_AD_DECRYPTION_FAILED
# define SSL_AD_RECORD_OVERFLOW          TLS1_AD_RECORD_OVERFLOW
/* fatal */
# define SSL_AD_DECOMPRESSION_FAILURE    SSL3_AD_DECOMPRESSION_FAILURE
/* fatal */
# define SSL_AD_HANDSHAKE_FAILURE        SSL3_AD_HANDSHAKE_FAILURE
/* Not for TLS */
# define SSL_AD_NO_CERTIFICATE           SSL3_AD_NO_CERTIFICATE
# define SSL_AD_BAD_CERTIFICATE          SSL3_AD_BAD_CERTIFICATE
# define SSL_AD_UNSUPPORTED_CERTIFICATE  SSL3_AD_UNSUPPORTED_CERTIFICATE
# define SSL_AD_CERTIFICATE_REVOKED      SSL3_AD_CERTIFICATE_REVOKED
# define SSL_AD_CERTIFICATE_EXPIRED      SSL3_AD_CERTIFICATE_EXPIRED
# define SSL_AD_CERTIFICATE_UNKNOWN      SSL3_AD_CERTIFICATE_UNKNOWN
/* fatal */
# define SSL_AD_ILLEGAL_PARAMETER        SSL3_AD_ILLEGAL_PARAMETER
/* fatal */
# define SSL_AD_UNKNOWN_CA               TLS1_AD_UNKNOWN_CA
/* fatal */
# define SSL_AD_ACCESS_DENIED            TLS1_AD_ACCESS_DENIED
/* fatal */
# define SSL_AD_DECODE_ERROR             TLS1_AD_DECODE_ERROR
# define SSL_AD_DECRYPT_ERROR            TLS1_AD_DECRYPT_ERROR
/* fatal */
# define SSL_AD_EXPORT_RESTRICTION       TLS1_AD_EXPORT_RESTRICTION
/* fatal */
# define SSL_AD_PROTOCOL_VERSION         TLS1_AD_PROTOCOL_VERSION
/* fatal */
# define SSL_AD_INSUFFICIENT_SECURITY    TLS1_AD_INSUFFICIENT_SECURITY
/* fatal */
# define SSL_AD_INTERNAL_ERROR           TLS1_AD_INTERNAL_ERROR
# define SSL_AD_USER_CANCELLED           TLS1_AD_USER_CANCELLED
# define SSL_AD_NO_RENEGOTIATION         TLS1_AD_NO_RENEGOTIATION
# define SSL_AD_MISSING_EXTENSION        TLS13_AD_MISSING_EXTENSION
# define SSL_AD_CERTIFICATE_REQUIRED     TLS13_AD_CERTIFICATE_REQUIRED
# define SSL_AD_UNSUPPORTED_EXTENSION    TLS1_AD_UNSUPPORTED_EXTENSION
# define SSL_AD_CERTIFICATE_UNOBTAINABLE TLS1_AD_CERTIFICATE_UNOBTAINABLE
# define SSL_AD_UNRECOGNIZED_NAME        TLS1_AD_UNRECOGNIZED_NAME
# define SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
# define SSL_AD_BAD_CERTIFICATE_HASH_VALUE TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
/* fatal */
# define SSL_AD_UNKNOWN_PSK_IDENTITY     TLS1_AD_UNKNOWN_PSK_IDENTITY
/* fatal */
# define SSL_AD_INAPPROPRIATE_FALLBACK   TLS1_AD_INAPPROPRIATE_FALLBACK
# define SSL_AD_NO_APPLICATION_PROTOCOL  TLS1_AD_NO_APPLICATION_PROTOCOL
# define SSL_ERROR_NONE                  0
# define SSL_ERROR_SSL                   1
# define SSL_ERROR_WANT_READ             2
# define SSL_ERROR_WANT_WRITE            3
# define SSL_ERROR_WANT_X509_LOOKUP      4
# define SSL_ERROR_SYSCALL               5/* look at error stack/return
                                           * value/errno */
# define SSL_ERROR_ZERO_RETURN           6
# define SSL_ERROR_WANT_CONNECT          7
# define SSL_ERROR_WANT_ACCEPT           8
# define SSL_ERROR_WANT_ASYNC            9
# define SSL_ERROR_WANT_ASYNC_JOB       10
# define SSL_ERROR_WANT_CLIENT_HELLO_CB 11
# define SSL_ERROR_WANT_RETRY_VERIFY    12

# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define SSL_CTRL_SET_TMP_DH                    3
#  define SSL_CTRL_SET_TMP_ECDH                  4
#  define SSL_CTRL_SET_TMP_DH_CB                 6
# endif

# define SSL_CTRL_GET_CLIENT_CERT_REQUEST        9
# define SSL_CTRL_GET_NUM_RENEGOTIATIONS         10
# define SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS       11
# define SSL_CTRL_GET_TOTAL_RENEGOTIATIONS       12
# define SSL_CTRL_GET_FLAGS                      13
# define SSL_CTRL_EXTRA_CHAIN_CERT               14
# define SSL_CTRL_SET_MSG_CALLBACK               15
# define SSL_CTRL_SET_MSG_CALLBACK_ARG           16
/* only applies to datagram connections */
# define SSL_CTRL_SET_MTU                17
/* Stats */
# define SSL_CTRL_SESS_NUMBER                    20
# define SSL_CTRL_SESS_CONNECT                   21
# define SSL_CTRL_SESS_CONNECT_GOOD              22
# define SSL_CTRL_SESS_CONNECT_RENEGOTIATE       23
# define SSL_CTRL_SESS_ACCEPT                    24
# define SSL_CTRL_SESS_ACCEPT_GOOD               25
# define SSL_CTRL_SESS_ACCEPT_RENEGOTIATE        26
# define SSL_CTRL_SESS_HIT                       27
# define SSL_CTRL_SESS_CB_HIT                    28
# define SSL_CTRL_SESS_MISSES                    29
# define SSL_CTRL_SESS_TIMEOUTS                  30
# define SSL_CTRL_SESS_CACHE_FULL                31
# define SSL_CTRL_MODE                           33
# define SSL_CTRL_GET_READ_AHEAD                 40
# define SSL_CTRL_SET_READ_AHEAD                 41
# define SSL_CTRL_SET_SESS_CACHE_SIZE            42
# define SSL_CTRL_GET_SESS_CACHE_SIZE            43
# define SSL_CTRL_SET_SESS_CACHE_MODE            44
# define SSL_CTRL_GET_SESS_CACHE_MODE            45
# define SSL_CTRL_GET_MAX_CERT_LIST              50
# define SSL_CTRL_SET_MAX_CERT_LIST              51
# define SSL_CTRL_SET_MAX_SEND_FRAGMENT          52
/* see tls1.h for macros based on these */
# define SSL_CTRL_SET_TLSEXT_SERVERNAME_CB       53
# define SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG      54
# define SSL_CTRL_SET_TLSEXT_HOSTNAME            55
# define SSL_CTRL_SET_TLSEXT_DEBUG_CB            56
# define SSL_CTRL_SET_TLSEXT_DEBUG_ARG           57
# define SSL_CTRL_GET_TLSEXT_TICKET_KEYS         58
# define SSL_CTRL_SET_TLSEXT_TICKET_KEYS         59
/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT    60 */
/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB 61 */
/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG 62 */
# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB       63
# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG   64
# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE     65
# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS     66
# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS     67
# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS      68
# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS      69
# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP        70
# define SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP        71
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB      72
# endif
# define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB    75
# define SSL_CTRL_SET_SRP_VERIFY_PARAM_CB                76
# define SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB             77
# define SSL_CTRL_SET_SRP_ARG            78
# define SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79
# define SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80
# define SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81
# define DTLS_CTRL_GET_TIMEOUT           73
# define DTLS_CTRL_HANDLE_TIMEOUT        74
# define SSL_CTRL_GET_RI_SUPPORT                 76
# define SSL_CTRL_CLEAR_MODE                     78
# define SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB      79
# define SSL_CTRL_GET_EXTRA_CHAIN_CERTS          82
# define SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS        83
# define SSL_CTRL_CHAIN                          88
# define SSL_CTRL_CHAIN_CERT                     89
# define SSL_CTRL_GET_GROUPS                     90
# define SSL_CTRL_SET_GROUPS                     91
# define SSL_CTRL_SET_GROUPS_LIST                92
# define SSL_CTRL_GET_SHARED_GROUP               93
# define SSL_CTRL_SET_SIGALGS                    97
# define SSL_CTRL_SET_SIGALGS_LIST               98
# define SSL_CTRL_CERT_FLAGS                     99
# define SSL_CTRL_CLEAR_CERT_FLAGS               100
# define SSL_CTRL_SET_CLIENT_SIGALGS             101
# define SSL_CTRL_SET_CLIENT_SIGALGS_LIST        102
# define SSL_CTRL_GET_CLIENT_CERT_TYPES          103
# define SSL_CTRL_SET_CLIENT_CERT_TYPES          104
# define SSL_CTRL_BUILD_CERT_CHAIN               105
# define SSL_CTRL_SET_VERIFY_CERT_STORE          106
# define SSL_CTRL_SET_CHAIN_CERT_STORE           107
# define SSL_CTRL_GET_PEER_SIGNATURE_NID         108
# define SSL_CTRL_GET_PEER_TMP_KEY               109
# define SSL_CTRL_GET_RAW_CIPHERLIST             110
# define SSL_CTRL_GET_EC_POINT_FORMATS           111
# define SSL_CTRL_GET_CHAIN_CERTS                115
# define SSL_CTRL_SELECT_CURRENT_CERT            116
# define SSL_CTRL_SET_CURRENT_CERT               117
# define SSL_CTRL_SET_DH_AUTO                    118
# define DTLS_CTRL_SET_LINK_MTU                  120
# define DTLS_CTRL_GET_LINK_MIN_MTU              121
# define SSL_CTRL_GET_EXTMS_SUPPORT              122
# define SSL_CTRL_SET_MIN_PROTO_VERSION          123
# define SSL_CTRL_SET_MAX_PROTO_VERSION          124
# define SSL_CTRL_SET_SPLIT_SEND_FRAGMENT        125
# define SSL_CTRL_SET_MAX_PIPELINES              126
# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE     127
# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB       128
# define SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG   129
# define SSL_CTRL_GET_MIN_PROTO_VERSION          130
# define SSL_CTRL_GET_MAX_PROTO_VERSION          131
# define SSL_CTRL_GET_SIGNATURE_NID              132
# define SSL_CTRL_GET_TMP_KEY                    133
# define SSL_CTRL_GET_NEGOTIATED_GROUP           134
# define SSL_CTRL_SET_RETRY_VERIFY               136
# define SSL_CTRL_GET_VERIFY_CERT_STORE          137
# define SSL_CTRL_GET_CHAIN_CERT_STORE           138
# define SSL_CERT_SET_FIRST                      1
# define SSL_CERT_SET_NEXT                       2
# define SSL_CERT_SET_SERVER                     3
# define DTLSv1_get_timeout(ssl, arg) \
        SSL_ctrl(ssl,DTLS_CTRL_GET_TIMEOUT,0, (void *)(arg))
# define DTLSv1_handle_timeout(ssl) \
        SSL_ctrl(ssl,DTLS_CTRL_HANDLE_TIMEOUT,0, NULL)
# define SSL_num_renegotiations(ssl) \
        SSL_ctrl((ssl),SSL_CTRL_GET_NUM_RENEGOTIATIONS,0,NULL)
# define SSL_clear_num_renegotiations(ssl) \
        SSL_ctrl((ssl),SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS,0,NULL)
# define SSL_total_renegotiations(ssl) \
        SSL_ctrl((ssl),SSL_CTRL_GET_TOTAL_RENEGOTIATIONS,0,NULL)
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define SSL_CTX_set_tmp_dh(ctx,dh) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TMP_DH,0,(char *)(dh))
# endif
# define SSL_CTX_set_dh_auto(ctx, onoff) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_DH_AUTO,onoff,NULL)
# define SSL_set_dh_auto(s, onoff) \
        SSL_ctrl(s,SSL_CTRL_SET_DH_AUTO,onoff,NULL)
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define SSL_set_tmp_dh(ssl,dh) \
        SSL_ctrl(ssl,SSL_CTRL_SET_TMP_DH,0,(char *)(dh))
# endif
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define SSL_CTX_set_tmp_ecdh(ctx,ecdh) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_TMP_ECDH,0,(char *)(ecdh))
#  define SSL_set_tmp_ecdh(ssl,ecdh) \
        SSL_ctrl(ssl,SSL_CTRL_SET_TMP_ECDH,0,(char *)(ecdh))
# endif
# define SSL_CTX_add_extra_chain_cert(ctx,x509) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_EXTRA_CHAIN_CERT,0,(char *)(x509))
# define SSL_CTX_get_extra_chain_certs(ctx,px509) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_EXTRA_CHAIN_CERTS,0,px509)
# define SSL_CTX_get_extra_chain_certs_only(ctx,px509) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_EXTRA_CHAIN_CERTS,1,px509)
# define SSL_CTX_clear_extra_chain_certs(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS,0,NULL)
# define SSL_CTX_set0_chain(ctx,sk) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN,0,(char *)(sk))
# define SSL_CTX_set1_chain(ctx,sk) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN,1,(char *)(sk))
# define SSL_CTX_add0_chain_cert(ctx,x509) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN_CERT,0,(char *)(x509))
# define SSL_CTX_add1_chain_cert(ctx,x509) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_CHAIN_CERT,1,(char *)(x509))
# define SSL_CTX_get0_chain_certs(ctx,px509) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_CHAIN_CERTS,0,px509)
# define SSL_CTX_clear_chain_certs(ctx) \
        SSL_CTX_set0_chain(ctx,NULL)
# define SSL_CTX_build_cert_chain(ctx, flags) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)
# define SSL_CTX_select_current_cert(ctx,x509) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SELECT_CURRENT_CERT,0,(char *)(x509))
# define SSL_CTX_set_current_cert(ctx, op) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CURRENT_CERT, op, NULL)
# define SSL_CTX_set0_verify_cert_store(ctx,st) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_VERIFY_CERT_STORE,0,(char *)(st))
# define SSL_CTX_set1_verify_cert_store(ctx,st) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_VERIFY_CERT_STORE,1,(char *)(st))
# define SSL_CTX_get0_verify_cert_store(ctx,st) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_VERIFY_CERT_STORE,0,(char *)(st))
# define SSL_CTX_set0_chain_cert_store(ctx,st) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CHAIN_CERT_STORE,0,(char *)(st))
# define SSL_CTX_set1_chain_cert_store(ctx,st) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CHAIN_CERT_STORE,1,(char *)(st))
# define SSL_CTX_get0_chain_cert_store(ctx,st) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_CHAIN_CERT_STORE,0,(char *)(st))
# define SSL_set0_chain(s,sk) \
        SSL_ctrl(s,SSL_CTRL_CHAIN,0,(char *)(sk))
# define SSL_set1_chain(s,sk) \
        SSL_ctrl(s,SSL_CTRL_CHAIN,1,(char *)(sk))
# define SSL_add0_chain_cert(s,x509) \
        SSL_ctrl(s,SSL_CTRL_CHAIN_CERT,0,(char *)(x509))
# define SSL_add1_chain_cert(s,x509) \
        SSL_ctrl(s,SSL_CTRL_CHAIN_CERT,1,(char *)(x509))
# define SSL_get0_chain_certs(s,px509) \
        SSL_ctrl(s,SSL_CTRL_GET_CHAIN_CERTS,0,px509)
# define SSL_clear_chain_certs(s) \
        SSL_set0_chain(s,NULL)
# define SSL_build_cert_chain(s, flags) \
        SSL_ctrl(s,SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)
# define SSL_select_current_cert(s,x509) \
        SSL_ctrl(s,SSL_CTRL_SELECT_CURRENT_CERT,0,(char *)(x509))
# define SSL_set_current_cert(s,op) \
        SSL_ctrl(s,SSL_CTRL_SET_CURRENT_CERT, op, NULL)
# define SSL_set0_verify_cert_store(s,st) \
        SSL_ctrl(s,SSL_CTRL_SET_VERIFY_CERT_STORE,0,(char *)(st))
# define SSL_set1_verify_cert_store(s,st) \
        SSL_ctrl(s,SSL_CTRL_SET_VERIFY_CERT_STORE,1,(char *)(st))
#define SSL_get0_verify_cert_store(s,st) \
        SSL_ctrl(s,SSL_CTRL_GET_VERIFY_CERT_STORE,0,(char *)(st))
# define SSL_set0_chain_cert_store(s,st) \
        SSL_ctrl(s,SSL_CTRL_SET_CHAIN_CERT_STORE,0,(char *)(st))
# define SSL_set1_chain_cert_store(s,st) \
        SSL_ctrl(s,SSL_CTRL_SET_CHAIN_CERT_STORE,1,(char *)(st))
#define SSL_get0_chain_cert_store(s,st) \
        SSL_ctrl(s,SSL_CTRL_GET_CHAIN_CERT_STORE,0,(char *)(st))

# define SSL_get1_groups(s, glist) \
        SSL_ctrl(s,SSL_CTRL_GET_GROUPS,0,(int*)(glist))
# define SSL_CTX_set1_groups(ctx, glist, glistlen) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_GROUPS,glistlen,(int *)(glist))
# define SSL_CTX_set1_groups_list(ctx, s) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_GROUPS_LIST,0,(char *)(s))
# define SSL_set1_groups(s, glist, glistlen) \
        SSL_ctrl(s,SSL_CTRL_SET_GROUPS,glistlen,(char *)(glist))
# define SSL_set1_groups_list(s, str) \
        SSL_ctrl(s,SSL_CTRL_SET_GROUPS_LIST,0,(char *)(str))
# define SSL_get_shared_group(s, n) \
        SSL_ctrl(s,SSL_CTRL_GET_SHARED_GROUP,n,NULL)
# define SSL_get_negotiated_group(s) \
        SSL_ctrl(s,SSL_CTRL_GET_NEGOTIATED_GROUP,0,NULL)
# define SSL_CTX_set1_sigalgs(ctx, slist, slistlen) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SIGALGS,slistlen,(int *)(slist))
# define SSL_CTX_set1_sigalgs_list(ctx, s) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)(s))
# define SSL_set1_sigalgs(s, slist, slistlen) \
        SSL_ctrl(s,SSL_CTRL_SET_SIGALGS,slistlen,(int *)(slist))
# define SSL_set1_sigalgs_list(s, str) \
        SSL_ctrl(s,SSL_CTRL_SET_SIGALGS_LIST,0,(char *)(str))
# define SSL_CTX_set1_client_sigalgs(ctx, slist, slistlen) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CLIENT_SIGALGS,slistlen,(int *)(slist))
# define SSL_CTX_set1_client_sigalgs_list(ctx, s) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CLIENT_SIGALGS_LIST,0,(char *)(s))
# define SSL_set1_client_sigalgs(s, slist, slistlen) \
        SSL_ctrl(s,SSL_CTRL_SET_CLIENT_SIGALGS,slistlen,(int *)(slist))
# define SSL_set1_client_sigalgs_list(s, str) \
        SSL_ctrl(s,SSL_CTRL_SET_CLIENT_SIGALGS_LIST,0,(char *)(str))
# define SSL_get0_certificate_types(s, clist) \
        SSL_ctrl(s, SSL_CTRL_GET_CLIENT_CERT_TYPES, 0, (char *)(clist))
# define SSL_CTX_set1_client_certificate_types(ctx, clist, clistlen) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_CLIENT_CERT_TYPES,clistlen, \
                     (char *)(clist))
# define SSL_set1_client_certificate_types(s, clist, clistlen) \
        SSL_ctrl(s,SSL_CTRL_SET_CLIENT_CERT_TYPES,clistlen,(char *)(clist))
# define SSL_get_signature_nid(s, pn) \
        SSL_ctrl(s,SSL_CTRL_GET_SIGNATURE_NID,0,pn)
# define SSL_get_peer_signature_nid(s, pn) \
        SSL_ctrl(s,SSL_CTRL_GET_PEER_SIGNATURE_NID,0,pn)
# define SSL_get_peer_tmp_key(s, pk) \
        SSL_ctrl(s,SSL_CTRL_GET_PEER_TMP_KEY,0,pk)
# define SSL_get_tmp_key(s, pk) \
        SSL_ctrl(s,SSL_CTRL_GET_TMP_KEY,0,pk)
# define SSL_get0_raw_cipherlist(s, plst) \
        SSL_ctrl(s,SSL_CTRL_GET_RAW_CIPHERLIST,0,plst)
# define SSL_get0_ec_point_formats(s, plst) \
        SSL_ctrl(s,SSL_CTRL_GET_EC_POINT_FORMATS,0,plst)
# define SSL_CTX_set_min_proto_version(ctx, version) \
        SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)
# define SSL_CTX_set_max_proto_version(ctx, version) \
        SSL_CTX_ctrl(ctx, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)
# define SSL_CTX_get_min_proto_version(ctx) \
        SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)
# define SSL_CTX_get_max_proto_version(ctx) \
        SSL_CTX_ctrl(ctx, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)
# define SSL_set_min_proto_version(s, version) \
        SSL_ctrl(s, SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)
# define SSL_set_max_proto_version(s, version) \
        SSL_ctrl(s, SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)
# define SSL_get_min_proto_version(s) \
        SSL_ctrl(s, SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)
# define SSL_get_max_proto_version(s) \
        SSL_ctrl(s, SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)

const char *SSL_group_to_name(SSL *s, int id);

/* Backwards compatibility, original 1.1.0 names */
# define SSL_CTRL_GET_SERVER_TMP_KEY \
         SSL_CTRL_GET_PEER_TMP_KEY
# define SSL_get_server_tmp_key(s, pk) \
         SSL_get_peer_tmp_key(s, pk)

int SSL_set0_tmp_dh_pkey(SSL *s, EVP_PKEY *dhpkey);
int SSL_CTX_set0_tmp_dh_pkey(SSL_CTX *ctx, EVP_PKEY *dhpkey);

/*
 * The following symbol names are old and obsolete. They are kept
 * for compatibility reasons only and should not be used anymore.
 */
# define SSL_CTRL_GET_CURVES           SSL_CTRL_GET_GROUPS
# define SSL_CTRL_SET_CURVES           SSL_CTRL_SET_GROUPS
# define SSL_CTRL_SET_CURVES_LIST      SSL_CTRL_SET_GROUPS_LIST
# define SSL_CTRL_GET_SHARED_CURVE     SSL_CTRL_GET_SHARED_GROUP

# define SSL_get1_curves               SSL_get1_groups
# define SSL_CTX_set1_curves           SSL_CTX_set1_groups
# define SSL_CTX_set1_curves_list      SSL_CTX_set1_groups_list
# define SSL_set1_curves               SSL_set1_groups
# define SSL_set1_curves_list          SSL_set1_groups_list
# define SSL_get_shared_curve          SSL_get_shared_group


# ifndef OPENSSL_NO_DEPRECATED_1_1_0
/* Provide some compatibility macros for removed functionality. */
#  define SSL_CTX_need_tmp_RSA(ctx)                0
#  define SSL_CTX_set_tmp_rsa(ctx,rsa)             1
#  define SSL_need_tmp_RSA(ssl)                    0
#  define SSL_set_tmp_rsa(ssl,rsa)                 1
#  define SSL_CTX_set_ecdh_auto(dummy, onoff)      ((onoff) != 0)
#  define SSL_set_ecdh_auto(dummy, onoff)          ((onoff) != 0)
/*
 * We "pretend" to call the callback to avoid warnings about unused static
 * functions.
 */
#  define SSL_CTX_set_tmp_rsa_callback(ctx, cb)    while(0) (cb)(NULL, 0, 0)
#  define SSL_set_tmp_rsa_callback(ssl, cb)        while(0) (cb)(NULL, 0, 0)
# endif
__owur const BIO_METHOD *BIO_f_ssl(void);
__owur BIO *BIO_new_ssl(SSL_CTX *ctx, int client);
__owur BIO *BIO_new_ssl_connect(SSL_CTX *ctx);
__owur BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
__owur int BIO_ssl_copy_session_id(BIO *to, BIO *from);
void BIO_ssl_shutdown(BIO *ssl_bio);

__owur int SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);
__owur SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);
__owur SSL_CTX *SSL_CTX_new_ex(OSSL_LIB_CTX *libctx, const char *propq,
                               const SSL_METHOD *meth);
int SSL_CTX_up_ref(SSL_CTX *ctx);
void SSL_CTX_free(SSL_CTX *);
__owur long SSL_CTX_set_timeout(SSL_CTX *ctx, long t);
__owur long SSL_CTX_get_timeout(const SSL_CTX *ctx);
__owur X509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *);
void SSL_CTX_set_cert_store(SSL_CTX *, X509_STORE *);
void SSL_CTX_set1_cert_store(SSL_CTX *, X509_STORE *);
__owur int SSL_want(const SSL *s);
__owur int SSL_clear(SSL *s);

void SSL_CTX_flush_sessions(SSL_CTX *ctx, long tm);

__owur const SSL_CIPHER *SSL_get_current_cipher(const SSL *s);
__owur const SSL_CIPHER *SSL_get_pending_cipher(const SSL *s);
__owur int SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits);
__owur const char *SSL_CIPHER_get_version(const SSL_CIPHER *c);
__owur const char *SSL_CIPHER_get_name(const SSL_CIPHER *c);
__owur const char *SSL_CIPHER_standard_name(const SSL_CIPHER *c);
__owur const char *OPENSSL_cipher_name(const char *rfc_name);
__owur uint32_t SSL_CIPHER_get_id(const SSL_CIPHER *c);
__owur uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER *c);
__owur int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c);
__owur int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c);
__owur const EVP_MD *SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c);
__owur int SSL_CIPHER_is_aead(const SSL_CIPHER *c);

__owur int SSL_get_fd(const SSL *s);
__owur int SSL_get_rfd(const SSL *s);
__owur int SSL_get_wfd(const SSL *s);
__owur const char *SSL_get_cipher_list(const SSL *s, int n);
__owur char *SSL_get_shared_ciphers(const SSL *s, char *buf, int size);
__owur int SSL_get_read_ahead(const SSL *s);
__owur int SSL_pending(const SSL *s);
__owur int SSL_has_pending(const SSL *s);
# ifndef OPENSSL_NO_SOCK
__owur int SSL_set_fd(SSL *s, int fd);
__owur int SSL_set_rfd(SSL *s, int fd);
__owur int SSL_set_wfd(SSL *s, int fd);
# endif
void SSL_set0_rbio(SSL *s, BIO *rbio);
void SSL_set0_wbio(SSL *s, BIO *wbio);
void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio);
__owur BIO *SSL_get_rbio(const SSL *s);
__owur BIO *SSL_get_wbio(const SSL *s);
__owur int SSL_set_cipher_list(SSL *s, const char *str);
__owur int SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str);
__owur int SSL_set_ciphersuites(SSL *s, const char *str);
void SSL_set_read_ahead(SSL *s, int yes);
__owur int SSL_get_verify_mode(const SSL *s);
__owur int SSL_get_verify_depth(const SSL *s);
__owur SSL_verify_cb SSL_get_verify_callback(const SSL *s);
void SSL_set_verify(SSL *s, int mode, SSL_verify_cb callback);
void SSL_set_verify_depth(SSL *s, int depth);
void SSL_set_cert_cb(SSL *s, int (*cb) (SSL *ssl, void *arg), void *arg);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 __owur int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
OSSL_DEPRECATEDIN_3_0
__owur int SSL_use_RSAPrivateKey_ASN1(SSL *ssl,
                                      const unsigned char *d, long len);
# endif
__owur int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
__owur int SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, const unsigned char *d,
                                   long len);
__owur int SSL_use_certificate(SSL *ssl, X509 *x);
__owur int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);
__owur int SSL_use_cert_and_key(SSL *ssl, X509 *x509, EVP_PKEY *privatekey,
                                STACK_OF(X509) *chain, int override);


/* serverinfo file format versions */
# define SSL_SERVERINFOV1   1
# define SSL_SERVERINFOV2   2

/* Set serverinfo data for the current active cert. */
__owur int SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,
                                  size_t serverinfo_length);
__owur int SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,
                                     const unsigned char *serverinfo,
                                     size_t serverinfo_length);
__owur int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file);

#ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
#endif

__owur int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
__owur int SSL_use_certificate_file(SSL *ssl, const char *file, int type);

#ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file,
                                          int type);
#endif
__owur int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file,
                                       int type);
__owur int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file,
                                        int type);
/* PEM type */
__owur int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);
__owur int SSL_use_certificate_chain_file(SSL *ssl, const char *file);
__owur STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file);
__owur STACK_OF(X509_NAME)
*SSL_load_client_CA_file_ex(const char *file, OSSL_LIB_CTX *libctx,
                            const char *propq);
__owur int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
                                               const char *file);
int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
                                       const char *dir);
int SSL_add_store_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
                                       const char *uri);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define SSL_load_error_strings() \
    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS \
                     | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL)
# endif

__owur const char *SSL_state_string(const SSL *s);
__owur const char *SSL_rstate_string(const SSL *s);
__owur const char *SSL_state_string_long(const SSL *s);
__owur const char *SSL_rstate_string_long(const SSL *s);
__owur long SSL_SESSION_get_time(const SSL_SESSION *s);
__owur long SSL_SESSION_set_time(SSL_SESSION *s, long t);
__owur long SSL_SESSION_get_timeout(const SSL_SESSION *s);
__owur long SSL_SESSION_set_timeout(SSL_SESSION *s, long t);
__owur int SSL_SESSION_get_protocol_version(const SSL_SESSION *s);
__owur int SSL_SESSION_set_protocol_version(SSL_SESSION *s, int version);

__owur const char *SSL_SESSION_get0_hostname(const SSL_SESSION *s);
__owur int SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname);
void SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,
                                    const unsigned char **alpn,
                                    size_t *len);
__owur int SSL_SESSION_set1_alpn_selected(SSL_SESSION *s,
                                          const unsigned char *alpn,
                                          size_t len);
__owur const SSL_CIPHER *SSL_SESSION_get0_cipher(const SSL_SESSION *s);
__owur int SSL_SESSION_set_cipher(SSL_SESSION *s, const SSL_CIPHER *cipher);
__owur int SSL_SESSION_has_ticket(const SSL_SESSION *s);
__owur unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION *s);
void SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,
                             size_t *len);
__owur uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION *s);
__owur int SSL_SESSION_set_max_early_data(SSL_SESSION *s,
                                          uint32_t max_early_data);
__owur int SSL_copy_session_id(SSL *to, const SSL *from);
__owur X509 *SSL_SESSION_get0_peer(SSL_SESSION *s);
__owur int SSL_SESSION_set1_id_context(SSL_SESSION *s,
                                       const unsigned char *sid_ctx,
                                       unsigned int sid_ctx_len);
__owur int SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
                               unsigned int sid_len);
__owur int SSL_SESSION_is_resumable(const SSL_SESSION *s);

__owur SSL_SESSION *SSL_SESSION_new(void);
__owur SSL_SESSION *SSL_SESSION_dup(const SSL_SESSION *src);
const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,
                                        unsigned int *len);
const unsigned char *SSL_SESSION_get0_id_context(const SSL_SESSION *s,
                                                 unsigned int *len);
__owur unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s);
# ifndef OPENSSL_NO_STDIO
int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses);
# endif
int SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
int SSL_SESSION_up_ref(SSL_SESSION *ses);
void SSL_SESSION_free(SSL_SESSION *ses);
__owur int i2d_SSL_SESSION(const SSL_SESSION *in, unsigned char **pp);
__owur int SSL_set_session(SSL *to, SSL_SESSION *session);
int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *session);
int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *session);
__owur int SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb);
__owur int SSL_set_generate_session_id(SSL *s, GEN_SESSION_CB cb);
__owur int SSL_has_matching_session_id(const SSL *s,
                                       const unsigned char *id,
                                       unsigned int id_len);
SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
                             long length);

# ifdef OPENSSL_X509_H
__owur X509 *SSL_get0_peer_certificate(const SSL *s);
__owur X509 *SSL_get1_peer_certificate(const SSL *s);
/* Deprecated in 3.0.0 */
#  ifndef OPENSSL_NO_DEPRECATED_3_0
#   define SSL_get_peer_certificate SSL_get1_peer_certificate
#  endif
# endif

__owur STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *s);

__owur int SSL_CTX_get_verify_mode(const SSL_CTX *ctx);
__owur int SSL_CTX_get_verify_depth(const SSL_CTX *ctx);
__owur SSL_verify_cb SSL_CTX_get_verify_callback(const SSL_CTX *ctx);
void SSL_CTX_set_verify(SSL_CTX *ctx, int mode, SSL_verify_cb callback);
void SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);
void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,
                                      int (*cb) (X509_STORE_CTX *, void *),
                                      void *arg);
void SSL_CTX_set_cert_cb(SSL_CTX *c, int (*cb) (SSL *ssl, void *arg),
                         void *arg);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,
                                          long len);
# endif
__owur int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
__owur int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx,
                                       const unsigned char *d, long len);
__owur int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
__owur int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len,
                                        const unsigned char *d);
__owur int SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
                                    STACK_OF(X509) *chain, int override);

void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);
pem_password_cb *SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx);
void *SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx);
void SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb);
void SSL_set_default_passwd_cb_userdata(SSL *s, void *u);
pem_password_cb *SSL_get_default_passwd_cb(SSL *s);
void *SSL_get_default_passwd_cb_userdata(SSL *s);

__owur int SSL_CTX_check_private_key(const SSL_CTX *ctx);
__owur int SSL_check_private_key(const SSL *ctx);

__owur int SSL_CTX_set_session_id_context(SSL_CTX *ctx,
                                          const unsigned char *sid_ctx,
                                          unsigned int sid_ctx_len);

SSL *SSL_new(SSL_CTX *ctx);
int SSL_up_ref(SSL *s);
int SSL_is_dtls(const SSL *s);
__owur int SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,
                                      unsigned int sid_ctx_len);

__owur int SSL_CTX_set_purpose(SSL_CTX *ctx, int purpose);
__owur int SSL_set_purpose(SSL *ssl, int purpose);
__owur int SSL_CTX_set_trust(SSL_CTX *ctx, int trust);
__owur int SSL_set_trust(SSL *ssl, int trust);

__owur int SSL_set1_host(SSL *s, const char *hostname);
__owur int SSL_add1_host(SSL *s, const char *hostname);
__owur const char *SSL_get0_peername(SSL *s);
void SSL_set_hostflags(SSL *s, unsigned int flags);

__owur int SSL_CTX_dane_enable(SSL_CTX *ctx);
__owur int SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md,
                                  uint8_t mtype, uint8_t ord);
__owur int SSL_dane_enable(SSL *s, const char *basedomain);
__owur int SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,
                             uint8_t mtype, const unsigned char *data, size_t dlen);
__owur int SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki);
__owur int SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
                              uint8_t *mtype, const unsigned char **data,
                              size_t *dlen);
/*
 * Bridge opacity barrier between libcrypt and libssl, also needed to support
 * offline testing in test/danetest.c
 */
SSL_DANE *SSL_get0_dane(SSL *ssl);
/*
 * DANE flags
 */
unsigned long SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags);
unsigned long SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags);
unsigned long SSL_dane_set_flags(SSL *ssl, unsigned long flags);
unsigned long SSL_dane_clear_flags(SSL *ssl, unsigned long flags);

__owur int SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm);
__owur int SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm);

__owur X509_VERIFY_PARAM *SSL_CTX_get0_param(SSL_CTX *ctx);
__owur X509_VERIFY_PARAM *SSL_get0_param(SSL *ssl);

# ifndef OPENSSL_NO_SRP
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name);
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password);
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength);
OSSL_DEPRECATEDIN_3_0
int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx,
                                        char *(*cb) (SSL *, void *));
OSSL_DEPRECATEDIN_3_0
int SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx,
                                          int (*cb) (SSL *, void *));
OSSL_DEPRECATEDIN_3_0
int SSL_CTX_set_srp_username_callback(SSL_CTX *ctx,
                                      int (*cb) (SSL *, int *, void *));
OSSL_DEPRECATEDIN_3_0 int SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg);

OSSL_DEPRECATEDIN_3_0
int SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,
                             BIGNUM *sa, BIGNUM *v, char *info);
OSSL_DEPRECATEDIN_3_0
int SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,
                                const char *grp);

OSSL_DEPRECATEDIN_3_0 __owur BIGNUM *SSL_get_srp_g(SSL *s);
OSSL_DEPRECATEDIN_3_0 __owur BIGNUM *SSL_get_srp_N(SSL *s);

OSSL_DEPRECATEDIN_3_0 __owur char *SSL_get_srp_username(SSL *s);
OSSL_DEPRECATEDIN_3_0 __owur char *SSL_get_srp_userinfo(SSL *s);
#  endif
# endif

/*
 * ClientHello callback and helpers.
 */

# define SSL_CLIENT_HELLO_SUCCESS 1
# define SSL_CLIENT_HELLO_ERROR   0
# define SSL_CLIENT_HELLO_RETRY   (-1)

typedef int (*SSL_client_hello_cb_fn) (SSL *s, int *al, void *arg);
void SSL_CTX_set_client_hello_cb(SSL_CTX *c, SSL_client_hello_cb_fn cb,
                                 void *arg);
int SSL_client_hello_isv2(SSL *s);
unsigned int SSL_client_hello_get0_legacy_version(SSL *s);
size_t SSL_client_hello_get0_random(SSL *s, const unsigned char **out);
size_t SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out);
size_t SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out);
size_t SSL_client_hello_get0_compression_methods(SSL *s,
                                                 const unsigned char **out);
int SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen);
int SSL_client_hello_get0_ext(SSL *s, unsigned int type,
                              const unsigned char **out, size_t *outlen);

void SSL_certs_clear(SSL *s);
void SSL_free(SSL *ssl);
# ifdef OSSL_ASYNC_FD
/*
 * Windows application developer has to include windows.h to use these.
 */
__owur int SSL_waiting_for_async(SSL *s);
__owur int SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fds, size_t *numfds);
__owur int SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd,
                                     size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                     size_t *numdelfds);
__owur int SSL_CTX_set_async_callback(SSL_CTX *ctx, SSL_async_callback_fn callback);
__owur int SSL_CTX_set_async_callback_arg(SSL_CTX *ctx, void *arg);
__owur int SSL_set_async_callback(SSL *s, SSL_async_callback_fn callback);
__owur int SSL_set_async_callback_arg(SSL *s, void *arg);
__owur int SSL_get_async_status(SSL *s, int *status);

# endif
__owur int SSL_accept(SSL *ssl);
__owur int SSL_stateless(SSL *s);
__owur int SSL_connect(SSL *ssl);
__owur int SSL_read(SSL *ssl, void *buf, int num);
__owur int SSL_read_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);

# define SSL_READ_EARLY_DATA_ERROR   0
# define SSL_READ_EARLY_DATA_SUCCESS 1
# define SSL_READ_EARLY_DATA_FINISH  2

__owur int SSL_read_early_data(SSL *s, void *buf, size_t num,
                               size_t *readbytes);
__owur int SSL_peek(SSL *ssl, void *buf, int num);
__owur int SSL_peek_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);
__owur ossl_ssize_t SSL_sendfile(SSL *s, int fd, off_t offset, size_t size,
                                 int flags);
__owur int SSL_write(SSL *ssl, const void *buf, int num);
__owur int SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written);
__owur int SSL_write_early_data(SSL *s, const void *buf, size_t num,
                                size_t *written);
long SSL_ctrl(SSL *ssl, int cmd, long larg, void *parg);
long SSL_callback_ctrl(SSL *, int, void (*)(void));
long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg);
long SSL_CTX_callback_ctrl(SSL_CTX *, int, void (*)(void));

# define SSL_EARLY_DATA_NOT_SENT    0
# define SSL_EARLY_DATA_REJECTED    1
# define SSL_EARLY_DATA_ACCEPTED    2

__owur int SSL_get_early_data_status(const SSL *s);

__owur int SSL_get_error(const SSL *s, int ret_code);
__owur const char *SSL_get_version(const SSL *s);

/* This sets the 'default' SSL version that SSL_new() will create */
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
__owur int SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth);
# endif

# ifndef OPENSSL_NO_SSL3_METHOD
#  ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *SSLv3_method(void); /* SSLv3 */
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *SSLv3_server_method(void);
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *SSLv3_client_method(void);
#  endif
# endif

#define SSLv23_method           TLS_method
#define SSLv23_server_method    TLS_server_method
#define SSLv23_client_method    TLS_client_method

/* Negotiate highest available SSL/TLS version */
__owur const SSL_METHOD *TLS_method(void);
__owur const SSL_METHOD *TLS_server_method(void);
__owur const SSL_METHOD *TLS_client_method(void);

# ifndef OPENSSL_NO_TLS1_METHOD
#  ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_method(void); /* TLSv1.0 */
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_server_method(void);
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_client_method(void);
#  endif
# endif

# ifndef OPENSSL_NO_TLS1_1_METHOD
#  ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_1_method(void); /* TLSv1.1 */
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_1_server_method(void);
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_1_client_method(void);
#  endif
# endif

# ifndef OPENSSL_NO_TLS1_2_METHOD
#  ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_2_method(void); /* TLSv1.2 */
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_2_server_method(void);
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *TLSv1_2_client_method(void);
#  endif
# endif

# ifndef OPENSSL_NO_DTLS1_METHOD
#  ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *DTLSv1_method(void); /* DTLSv1.0 */
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *DTLSv1_server_method(void);
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *DTLSv1_client_method(void);
#  endif
# endif

# ifndef OPENSSL_NO_DTLS1_2_METHOD
/* DTLSv1.2 */
#  ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *DTLSv1_2_method(void);
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *DTLSv1_2_server_method(void);
OSSL_DEPRECATEDIN_1_1_0 __owur const SSL_METHOD *DTLSv1_2_client_method(void);
#  endif
# endif

__owur const SSL_METHOD *DTLS_method(void); /* DTLS 1.0 and 1.2 */
__owur const SSL_METHOD *DTLS_server_method(void); /* DTLS 1.0 and 1.2 */
__owur const SSL_METHOD *DTLS_client_method(void); /* DTLS 1.0 and 1.2 */

__owur size_t DTLS_get_data_mtu(const SSL *s);

__owur STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *s);
__owur STACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx);
__owur STACK_OF(SSL_CIPHER) *SSL_get_client_ciphers(const SSL *s);
__owur STACK_OF(SSL_CIPHER) *SSL_get1_supported_ciphers(SSL *s);

__owur int SSL_do_handshake(SSL *s);
int SSL_key_update(SSL *s, int updatetype);
int SSL_get_key_update_type(const SSL *s);
int SSL_renegotiate(SSL *s);
int SSL_renegotiate_abbreviated(SSL *s);
__owur int SSL_renegotiate_pending(const SSL *s);
int SSL_new_session_ticket(SSL *s);
int SSL_shutdown(SSL *s);
__owur int SSL_verify_client_post_handshake(SSL *s);
void SSL_CTX_set_post_handshake_auth(SSL_CTX *ctx, int val);
void SSL_set_post_handshake_auth(SSL *s, int val);

__owur const SSL_METHOD *SSL_CTX_get_ssl_method(const SSL_CTX *ctx);
__owur const SSL_METHOD *SSL_get_ssl_method(const SSL *s);
__owur int SSL_set_ssl_method(SSL *s, const SSL_METHOD *method);
__owur const char *SSL_alert_type_string_long(int value);
__owur const char *SSL_alert_type_string(int value);
__owur const char *SSL_alert_desc_string_long(int value);
__owur const char *SSL_alert_desc_string(int value);

void SSL_set0_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
void SSL_CTX_set0_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
__owur const STACK_OF(X509_NAME) *SSL_get0_CA_list(const SSL *s);
__owur const STACK_OF(X509_NAME) *SSL_CTX_get0_CA_list(const SSL_CTX *ctx);
__owur int SSL_add1_to_CA_list(SSL *ssl, const X509 *x);
__owur int SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x);
__owur const STACK_OF(X509_NAME) *SSL_get0_peer_CA_list(const SSL *s);

void SSL_set_client_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
__owur STACK_OF(X509_NAME) *SSL_get_client_CA_list(const SSL *s);
__owur STACK_OF(X509_NAME) *SSL_CTX_get_client_CA_list(const SSL_CTX *s);
__owur int SSL_add_client_CA(SSL *ssl, X509 *x);
__owur int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);

void SSL_set_connect_state(SSL *s);
void SSL_set_accept_state(SSL *s);

__owur long SSL_get_default_timeout(const SSL *s);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define SSL_library_init() OPENSSL_init_ssl(0, NULL)
# endif

__owur char *SSL_CIPHER_description(const SSL_CIPHER *, char *buf, int size);
__owur STACK_OF(X509_NAME) *SSL_dup_CA_list(const STACK_OF(X509_NAME) *sk);

__owur SSL *SSL_dup(SSL *ssl);

__owur X509 *SSL_get_certificate(const SSL *ssl);
/*
 * EVP_PKEY
 */
struct evp_pkey_st *SSL_get_privatekey(const SSL *ssl);

__owur X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx);
__owur EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx);

void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);
__owur int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);
void SSL_set_quiet_shutdown(SSL *ssl, int mode);
__owur int SSL_get_quiet_shutdown(const SSL *ssl);
void SSL_set_shutdown(SSL *ssl, int mode);
__owur int SSL_get_shutdown(const SSL *ssl);
__owur int SSL_version(const SSL *ssl);
__owur int SSL_client_version(const SSL *s);
__owur int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
__owur int SSL_CTX_set_default_verify_dir(SSL_CTX *ctx);
__owur int SSL_CTX_set_default_verify_file(SSL_CTX *ctx);
__owur int SSL_CTX_set_default_verify_store(SSL_CTX *ctx);
__owur int SSL_CTX_load_verify_file(SSL_CTX *ctx, const char *CAfile);
__owur int SSL_CTX_load_verify_dir(SSL_CTX *ctx, const char *CApath);
__owur int SSL_CTX_load_verify_store(SSL_CTX *ctx, const char *CAstore);
__owur int SSL_CTX_load_verify_locations(SSL_CTX *ctx,
                                                        const char *CAfile,
                                                        const char *CApath);
# define SSL_get0_session SSL_get_session/* just peek at pointer */
__owur SSL_SESSION *SSL_get_session(const SSL *ssl);
__owur SSL_SESSION *SSL_get1_session(SSL *ssl); /* obtain a reference count */
__owur SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);
SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
void SSL_set_info_callback(SSL *ssl,
                           void (*cb) (const SSL *ssl, int type, int val));
void (*SSL_get_info_callback(const SSL *ssl)) (const SSL *ssl, int type,
                                               int val);
__owur OSSL_HANDSHAKE_STATE SSL_get_state(const SSL *ssl);

void SSL_set_verify_result(SSL *ssl, long v);
__owur long SSL_get_verify_result(const SSL *ssl);
__owur STACK_OF(X509) *SSL_get0_verified_chain(const SSL *s);

__owur size_t SSL_get_client_random(const SSL *ssl, unsigned char *out,
                                    size_t outlen);
__owur size_t SSL_get_server_random(const SSL *ssl, unsigned char *out,
                                    size_t outlen);
__owur size_t SSL_SESSION_get_master_key(const SSL_SESSION *sess,
                                         unsigned char *out, size_t outlen);
__owur int SSL_SESSION_set1_master_key(SSL_SESSION *sess,
                                       const unsigned char *in, size_t len);
uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION *sess);

#define SSL_get_ex_new_index(l, p, newf, dupf, freef) \
    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, l, p, newf, dupf, freef)
__owur int SSL_set_ex_data(SSL *ssl, int idx, void *data);
void *SSL_get_ex_data(const SSL *ssl, int idx);
#define SSL_SESSION_get_ex_new_index(l, p, newf, dupf, freef) \
    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_SESSION, l, p, newf, dupf, freef)
__owur int SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data);
void *SSL_SESSION_get_ex_data(const SSL_SESSION *ss, int idx);
#define SSL_CTX_get_ex_new_index(l, p, newf, dupf, freef) \
    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_CTX, l, p, newf, dupf, freef)
__owur int SSL_CTX_set_ex_data(SSL_CTX *ssl, int idx, void *data);
void *SSL_CTX_get_ex_data(const SSL_CTX *ssl, int idx);

__owur int SSL_get_ex_data_X509_STORE_CTX_idx(void);

# define SSL_CTX_sess_set_cache_size(ctx,t) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SESS_CACHE_SIZE,t,NULL)
# define SSL_CTX_sess_get_cache_size(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_SESS_CACHE_SIZE,0,NULL)
# define SSL_CTX_set_session_cache_mode(ctx,m) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SESS_CACHE_MODE,m,NULL)
# define SSL_CTX_get_session_cache_mode(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_SESS_CACHE_MODE,0,NULL)

# define SSL_CTX_get_default_read_ahead(ctx) SSL_CTX_get_read_ahead(ctx)
# define SSL_CTX_set_default_read_ahead(ctx,m) SSL_CTX_set_read_ahead(ctx,m)
# define SSL_CTX_get_read_ahead(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_READ_AHEAD,0,NULL)
# define SSL_CTX_set_read_ahead(ctx,m) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_READ_AHEAD,m,NULL)
# define SSL_CTX_get_max_cert_list(ctx) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
# define SSL_CTX_set_max_cert_list(ctx,m) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)
# define SSL_get_max_cert_list(ssl) \
        SSL_ctrl(ssl,SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
# define SSL_set_max_cert_list(ssl,m) \
        SSL_ctrl(ssl,SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)

# define SSL_CTX_set_max_send_fragment(ctx,m) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
# define SSL_set_max_send_fragment(ssl,m) \
        SSL_ctrl(ssl,SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
# define SSL_CTX_set_split_send_fragment(ctx,m) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)
# define SSL_set_split_send_fragment(ssl,m) \
        SSL_ctrl(ssl,SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)
# define SSL_CTX_set_max_pipelines(ctx,m) \
        SSL_CTX_ctrl(ctx,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)
# define SSL_set_max_pipelines(ssl,m) \
        SSL_ctrl(ssl,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)
# define SSL_set_retry_verify(ssl) \
        (SSL_ctrl(ssl,SSL_CTRL_SET_RETRY_VERIFY,0,NULL) > 0)

void SSL_CTX_set_default_read_buffer_len(SSL_CTX *ctx, size_t len);
void SSL_set_default_read_buffer_len(SSL *s, size_t len);

# ifndef OPENSSL_NO_DH
#  ifndef OPENSSL_NO_DEPRECATED_3_0
/* NB: the |keylength| is only applicable when is_export is true */
OSSL_DEPRECATEDIN_3_0
void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
                                 DH *(*dh) (SSL *ssl, int is_export,
                                            int keylength));
OSSL_DEPRECATEDIN_3_0
void SSL_set_tmp_dh_callback(SSL *ssl,
                             DH *(*dh) (SSL *ssl, int is_export,
                                        int keylength));
#  endif
# endif

__owur const COMP_METHOD *SSL_get_current_compression(const SSL *s);
__owur const COMP_METHOD *SSL_get_current_expansion(const SSL *s);
__owur const char *SSL_COMP_get_name(const COMP_METHOD *comp);
__owur const char *SSL_COMP_get0_name(const SSL_COMP *comp);
__owur int SSL_COMP_get_id(const SSL_COMP *comp);
STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void);
__owur STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
                                                             *meths);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define SSL_COMP_free_compression_methods() while(0) continue
# endif
__owur int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);

const SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr);
int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);
int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c);
int SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,
                             int isv2format, STACK_OF(SSL_CIPHER) **sk,
                             STACK_OF(SSL_CIPHER) **scsvs);

/* TLS extensions functions */
__owur int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len);

__owur int SSL_set_session_ticket_ext_cb(SSL *s,
                                         tls_session_ticket_ext_cb_fn cb,
                                         void *arg);

/* Pre-shared secret session resumption functions */
__owur int SSL_set_session_secret_cb(SSL *s,
                                     tls_session_secret_cb_fn session_secret_cb,
                                     void *arg);

void SSL_CTX_set_not_resumable_session_callback(SSL_CTX *ctx,
                                                int (*cb) (SSL *ssl,
                                                           int
                                                           is_forward_secure));

void SSL_set_not_resumable_session_callback(SSL *ssl,
                                            int (*cb) (SSL *ssl,
                                                       int is_forward_secure));

void SSL_CTX_set_record_padding_callback(SSL_CTX *ctx,
                                         size_t (*cb) (SSL *ssl, int type,
                                                       size_t len, void *arg));
void SSL_CTX_set_record_padding_callback_arg(SSL_CTX *ctx, void *arg);
void *SSL_CTX_get_record_padding_callback_arg(const SSL_CTX *ctx);
int SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size);

int SSL_set_record_padding_callback(SSL *ssl,
                                    size_t (*cb) (SSL *ssl, int type,
                                                  size_t len, void *arg));
void SSL_set_record_padding_callback_arg(SSL *ssl, void *arg);
void *SSL_get_record_padding_callback_arg(const SSL *ssl);
int SSL_set_block_padding(SSL *ssl, size_t block_size);

int SSL_set_num_tickets(SSL *s, size_t num_tickets);
size_t SSL_get_num_tickets(const SSL *s);
int SSL_CTX_set_num_tickets(SSL_CTX *ctx, size_t num_tickets);
size_t SSL_CTX_get_num_tickets(const SSL_CTX *ctx);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define SSL_cache_hit(s) SSL_session_reused(s)
# endif

__owur int SSL_session_reused(const SSL *s);
__owur int SSL_is_server(const SSL *s);

__owur __owur SSL_CONF_CTX *SSL_CONF_CTX_new(void);
int SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx);
void SSL_CONF_CTX_free(SSL_CONF_CTX *cctx);
unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags);
__owur unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx,
                                             unsigned int flags);
__owur int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre);

void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl);
void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx);

__owur int SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value);
__owur int SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv);
__owur int SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd);

void SSL_add_ssl_module(void);
int SSL_config(SSL *s, const char *name);
int SSL_CTX_config(SSL_CTX *ctx, const char *name);

# ifndef OPENSSL_NO_SSL_TRACE
void SSL_trace(int write_p, int version, int content_type,
               const void *buf, size_t len, SSL *ssl, void *arg);
# endif

# ifndef OPENSSL_NO_SOCK
int DTLSv1_listen(SSL *s, BIO_ADDR *client);
# endif

# ifndef OPENSSL_NO_CT

/*
 * A callback for verifying that the received SCTs are sufficient.
 * Expected to return 1 if they are sufficient, otherwise 0.
 * May return a negative integer if an error occurs.
 * A connection should be aborted if the SCTs are deemed insufficient.
 */
typedef int (*ssl_ct_validation_cb)(const CT_POLICY_EVAL_CTX *ctx,
                                    const STACK_OF(SCT) *scts, void *arg);

/*
 * Sets a |callback| that is invoked upon receipt of ServerHelloDone to validate
 * the received SCTs.
 * If the callback returns a non-positive result, the connection is terminated.
 * Call this function before beginning a handshake.
 * If a NULL |callback| is provided, SCT validation is disabled.
 * |arg| is arbitrary userdata that will be passed to the callback whenever it
 * is invoked. Ownership of |arg| remains with the caller.
 *
 * NOTE: A side-effect of setting a CT callback is that an OCSP stapled response
 *       will be requested.
 */
int SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,
                                   void *arg);
int SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,
                                       ssl_ct_validation_cb callback,
                                       void *arg);
#define SSL_disable_ct(s) \
        ((void) SSL_set_validation_callback((s), NULL, NULL))
#define SSL_CTX_disable_ct(ctx) \
        ((void) SSL_CTX_set_validation_callback((ctx), NULL, NULL))

/*
 * The validation type enumerates the available behaviours of the built-in SSL
 * CT validation callback selected via SSL_enable_ct() and SSL_CTX_enable_ct().
 * The underlying callback is a static function in libssl.
 */
enum {
    SSL_CT_VALIDATION_PERMISSIVE = 0,
    SSL_CT_VALIDATION_STRICT
};

/*
 * Enable CT by setting up a callback that implements one of the built-in
 * validation variants.  The SSL_CT_VALIDATION_PERMISSIVE variant always
 * continues the handshake, the application can make appropriate decisions at
 * handshake completion.  The SSL_CT_VALIDATION_STRICT variant requires at
 * least one valid SCT, or else handshake termination will be requested.  The
 * handshake may continue anyway if SSL_VERIFY_NONE is in effect.
 */
int SSL_enable_ct(SSL *s, int validation_mode);
int SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode);

/*
 * Report whether a non-NULL callback is enabled.
 */
int SSL_ct_is_enabled(const SSL *s);
int SSL_CTX_ct_is_enabled(const SSL_CTX *ctx);

/* Gets the SCTs received from a connection */
const STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s);

/*
 * Loads the CT log list from the default location.
 * If a CTLOG_STORE has previously been set using SSL_CTX_set_ctlog_store,
 * the log information loaded from this file will be appended to the
 * CTLOG_STORE.
 * Returns 1 on success, 0 otherwise.
 */
int SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx);

/*
 * Loads the CT log list from the specified file path.
 * If a CTLOG_STORE has previously been set using SSL_CTX_set_ctlog_store,
 * the log information loaded from this file will be appended to the
 * CTLOG_STORE.
 * Returns 1 on success, 0 otherwise.
 */
int SSL_CTX_set_ctlog_list_file(SSL_CTX *ctx, const char *path);

/*
 * Sets the CT log list used by all SSL connections created from this SSL_CTX.
 * Ownership of the CTLOG_STORE is transferred to the SSL_CTX.
 */
void SSL_CTX_set0_ctlog_store(SSL_CTX *ctx, CTLOG_STORE *logs);

/*
 * Gets the CT log list used by all SSL connections created from this SSL_CTX.
 * This will be NULL unless one of the following functions has been called:
 * - SSL_CTX_set_default_ctlog_list_file
 * - SSL_CTX_set_ctlog_list_file
 * - SSL_CTX_set_ctlog_store
 */
const CTLOG_STORE *SSL_CTX_get0_ctlog_store(const SSL_CTX *ctx);

# endif /* OPENSSL_NO_CT */

/* What the "other" parameter contains in security callback */
/* Mask for type */
# define SSL_SECOP_OTHER_TYPE    0xffff0000
# define SSL_SECOP_OTHER_NONE    0
# define SSL_SECOP_OTHER_CIPHER  (1 << 16)
# define SSL_SECOP_OTHER_CURVE   (2 << 16)
# define SSL_SECOP_OTHER_DH      (3 << 16)
# define SSL_SECOP_OTHER_PKEY    (4 << 16)
# define SSL_SECOP_OTHER_SIGALG  (5 << 16)
# define SSL_SECOP_OTHER_CERT    (6 << 16)

/* Indicated operation refers to peer key or certificate */
# define SSL_SECOP_PEER          0x1000

/* Values for "op" parameter in security callback */

/* Called to filter ciphers */
/* Ciphers client supports */
# define SSL_SECOP_CIPHER_SUPPORTED      (1 | SSL_SECOP_OTHER_CIPHER)
/* Cipher shared by client/server */
# define SSL_SECOP_CIPHER_SHARED         (2 | SSL_SECOP_OTHER_CIPHER)
/* Sanity check of cipher server selects */
# define SSL_SECOP_CIPHER_CHECK          (3 | SSL_SECOP_OTHER_CIPHER)
/* Curves supported by client */
# define SSL_SECOP_CURVE_SUPPORTED       (4 | SSL_SECOP_OTHER_CURVE)
/* Curves shared by client/server */
# define SSL_SECOP_CURVE_SHARED          (5 | SSL_SECOP_OTHER_CURVE)
/* Sanity check of curve server selects */
# define SSL_SECOP_CURVE_CHECK           (6 | SSL_SECOP_OTHER_CURVE)
/* Temporary DH key */
# define SSL_SECOP_TMP_DH                (7 | SSL_SECOP_OTHER_PKEY)
/* SSL/TLS version */
# define SSL_SECOP_VERSION               (9 | SSL_SECOP_OTHER_NONE)
/* Session tickets */
# define SSL_SECOP_TICKET                (10 | SSL_SECOP_OTHER_NONE)
/* Supported signature algorithms sent to peer */
# define SSL_SECOP_SIGALG_SUPPORTED      (11 | SSL_SECOP_OTHER_SIGALG)
/* Shared signature algorithm */
# define SSL_SECOP_SIGALG_SHARED         (12 | SSL_SECOP_OTHER_SIGALG)
/* Sanity check signature algorithm allowed */
# define SSL_SECOP_SIGALG_CHECK          (13 | SSL_SECOP_OTHER_SIGALG)
/* Used to get mask of supported public key signature algorithms */
# define SSL_SECOP_SIGALG_MASK           (14 | SSL_SECOP_OTHER_SIGALG)
/* Use to see if compression is allowed */
# define SSL_SECOP_COMPRESSION           (15 | SSL_SECOP_OTHER_NONE)
/* EE key in certificate */
# define SSL_SECOP_EE_KEY                (16 | SSL_SECOP_OTHER_CERT)
/* CA key in certificate */
# define SSL_SECOP_CA_KEY                (17 | SSL_SECOP_OTHER_CERT)
/* CA digest algorithm in certificate */
# define SSL_SECOP_CA_MD                 (18 | SSL_SECOP_OTHER_CERT)
/* Peer EE key in certificate */
# define SSL_SECOP_PEER_EE_KEY           (SSL_SECOP_EE_KEY | SSL_SECOP_PEER)
/* Peer CA key in certificate */
# define SSL_SECOP_PEER_CA_KEY           (SSL_SECOP_CA_KEY | SSL_SECOP_PEER)
/* Peer CA digest algorithm in certificate */
# define SSL_SECOP_PEER_CA_MD            (SSL_SECOP_CA_MD | SSL_SECOP_PEER)

void SSL_set_security_level(SSL *s, int level);
__owur int SSL_get_security_level(const SSL *s);
void SSL_set_security_callback(SSL *s,
                               int (*cb) (const SSL *s, const SSL_CTX *ctx,
                                          int op, int bits, int nid,
                                          void *other, void *ex));
int (*SSL_get_security_callback(const SSL *s)) (const SSL *s,
                                                const SSL_CTX *ctx, int op,
                                                int bits, int nid, void *other,
                                                void *ex);
void SSL_set0_security_ex_data(SSL *s, void *ex);
__owur void *SSL_get0_security_ex_data(const SSL *s);

void SSL_CTX_set_security_level(SSL_CTX *ctx, int level);
__owur int SSL_CTX_get_security_level(const SSL_CTX *ctx);
void SSL_CTX_set_security_callback(SSL_CTX *ctx,
                                   int (*cb) (const SSL *s, const SSL_CTX *ctx,
                                              int op, int bits, int nid,
                                              void *other, void *ex));
int (*SSL_CTX_get_security_callback(const SSL_CTX *ctx)) (const SSL *s,
                                                          const SSL_CTX *ctx,
                                                          int op, int bits,
                                                          int nid,
                                                          void *other,
                                                          void *ex);
void SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex);
__owur void *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx);

/* OPENSSL_INIT flag 0x010000 reserved for internal use */
# define OPENSSL_INIT_NO_LOAD_SSL_STRINGS    0x00100000L
# define OPENSSL_INIT_LOAD_SSL_STRINGS       0x00200000L

# define OPENSSL_INIT_SSL_DEFAULT \
        (OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS)

int OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);

# ifndef OPENSSL_NO_UNIT_TEST
__owur const struct openssl_ssl_test_functions *SSL_test_functions(void);
# endif

__owur int SSL_free_buffers(SSL *ssl);
__owur int SSL_alloc_buffers(SSL *ssl);

/* Status codes passed to the decrypt session ticket callback. Some of these
 * are for internal use only and are never passed to the callback. */
typedef int SSL_TICKET_STATUS;

/* Support for ticket appdata */
/* fatal error, malloc failure */
# define SSL_TICKET_FATAL_ERR_MALLOC 0
/* fatal error, either from parsing or decrypting the ticket */
# define SSL_TICKET_FATAL_ERR_OTHER  1
/* No ticket present */
# define SSL_TICKET_NONE             2
/* Empty ticket present */
# define SSL_TICKET_EMPTY            3
/* the ticket couldn't be decrypted */
# define SSL_TICKET_NO_DECRYPT       4
/* a ticket was successfully decrypted */
# define SSL_TICKET_SUCCESS          5
/* same as above but the ticket needs to be renewed */
# define SSL_TICKET_SUCCESS_RENEW    6

/* Return codes for the decrypt session ticket callback */
typedef int SSL_TICKET_RETURN;

/* An error occurred */
#define SSL_TICKET_RETURN_ABORT             0
/* Do not use the ticket, do not send a renewed ticket to the client */
#define SSL_TICKET_RETURN_IGNORE            1
/* Do not use the ticket, send a renewed ticket to the client */
#define SSL_TICKET_RETURN_IGNORE_RENEW      2
/* Use the ticket, do not send a renewed ticket to the client */
#define SSL_TICKET_RETURN_USE               3
/* Use the ticket, send a renewed ticket to the client */
#define SSL_TICKET_RETURN_USE_RENEW         4

typedef int (*SSL_CTX_generate_session_ticket_fn)(SSL *s, void *arg);
typedef SSL_TICKET_RETURN (*SSL_CTX_decrypt_session_ticket_fn)(SSL *s, SSL_SESSION *ss,
                                                               const unsigned char *keyname,
                                                               size_t keyname_length,
                                                               SSL_TICKET_STATUS status,
                                                               void *arg);
int SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,
                                  SSL_CTX_generate_session_ticket_fn gen_cb,
                                  SSL_CTX_decrypt_session_ticket_fn dec_cb,
                                  void *arg);
int SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t len);
int SSL_SESSION_get0_ticket_appdata(SSL_SESSION *ss, void **data, size_t *len);

typedef unsigned int (*DTLS_timer_cb)(SSL *s, unsigned int timer_us);

void DTLS_set_timer_cb(SSL *s, DTLS_timer_cb cb);


typedef int (*SSL_allow_early_data_cb_fn)(SSL *s, void *arg);
void SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,
                                     SSL_allow_early_data_cb_fn cb,
                                     void *arg);
void SSL_set_allow_early_data_cb(SSL *s,
                                 SSL_allow_early_data_cb_fn cb,
                                 void *arg);

/* store the default cipher strings inside the library */
const char *OSSL_default_cipher_list(void);
const char *OSSL_default_ciphersuites(void);

#  ifndef OPENSSL_NO_QUIC
/*
 * QUIC integration - The QUIC interface matches BoringSSL
 *
 * ssl_encryption_level_t represents a specific QUIC encryption level used to
 * transmit handshake messages. BoringSSL has this as an 'enum'.
 */
#include <openssl/quic.h>

/* Used by Chromium/QUIC - moved from evp.h to avoid breaking FIPS checksums */
# define X25519_PRIVATE_KEY_LEN          32
# define X25519_PUBLIC_VALUE_LEN         32

/* moved from types.h to avoid breaking FIPS checksums */
typedef struct ssl_quic_method_st SSL_QUIC_METHOD;

typedef enum ssl_encryption_level_t {
    ssl_encryption_initial = 0,
    ssl_encryption_early_data,
    ssl_encryption_handshake,
    ssl_encryption_application
} OSSL_ENCRYPTION_LEVEL;

struct ssl_quic_method_st {
    int (*set_encryption_secrets)(SSL *ssl, OSSL_ENCRYPTION_LEVEL level,
                                  const uint8_t *read_secret,
                                  const uint8_t *write_secret, size_t secret_len);
    int (*add_handshake_data)(SSL *ssl, OSSL_ENCRYPTION_LEVEL level,
                              const uint8_t *data, size_t len);
    int (*flush_flight)(SSL *ssl);
    int (*send_alert)(SSL *ssl, enum ssl_encryption_level_t level, uint8_t alert);
};

__owur int SSL_CTX_set_quic_method(SSL_CTX *ctx, const SSL_QUIC_METHOD *quic_method);
__owur int SSL_set_quic_method(SSL *ssl, const SSL_QUIC_METHOD *quic_method);
__owur int SSL_set_quic_transport_params(SSL *ssl,
                                         const uint8_t *params,
                                         size_t params_len);
void SSL_get_peer_quic_transport_params(const SSL *ssl,
                                        const uint8_t **out_params,
                                        size_t *out_params_len);
__owur size_t SSL_quic_max_handshake_flight_len(const SSL *ssl, OSSL_ENCRYPTION_LEVEL level);
__owur OSSL_ENCRYPTION_LEVEL SSL_quic_read_level(const SSL *ssl);
__owur OSSL_ENCRYPTION_LEVEL SSL_quic_write_level(const SSL *ssl);
__owur int SSL_provide_quic_data(SSL *ssl, OSSL_ENCRYPTION_LEVEL level,
                                 const uint8_t *data, size_t len);
__owur int SSL_process_quic_post_handshake(SSL *ssl);

__owur int SSL_is_quic(SSL *ssl);

/* BoringSSL API */
void SSL_set_quic_use_legacy_codepoint(SSL *ssl, int use_legacy);

/*
 * Set an explicit value that you want to use
 * If 0 (default) the server will use the highest extenstion the client sent
 * If 0 (default) the client will send both extensions
 */
void SSL_set_quic_transport_version(SSL *ssl, int version);
__owur int SSL_get_quic_transport_version(const SSL *ssl);
/* Returns the negotiated version, or -1 on error */
__owur int SSL_get_peer_quic_transport_version(const SSL *ssl);

int SSL_CIPHER_get_prf_nid(const SSL_CIPHER *c);

void SSL_set_quic_early_data_enabled(SSL *ssl, int enabled);

#  endif

# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                                                                                                     node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/ui.h                             0000664 0000000 0000000 00000045463 14746647661 0025340 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/ui.h.in
 *
 * Copyright 2001-2020 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_UI_H
# define OPENSSL_UI_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_UI_H
# endif

# include <openssl/opensslconf.h>

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  include <openssl/crypto.h>
# endif
# include <openssl/safestack.h>
# include <openssl/pem.h>
# include <openssl/types.h>
# include <openssl/uierr.h>

/* For compatibility reasons, the macro OPENSSL_NO_UI is currently retained */
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  ifdef OPENSSL_NO_UI_CONSOLE
#   define OPENSSL_NO_UI
#  endif
# endif

# ifdef  __cplusplus
extern "C" {
# endif

/*
 * All the following functions return -1 or NULL on error and in some cases
 * (UI_process()) -2 if interrupted or in some other way cancelled. When
 * everything is fine, they return 0, a positive value or a non-NULL pointer,
 * all depending on their purpose.
 */

/* Creators and destructor.   */
UI *UI_new(void);
UI *UI_new_method(const UI_METHOD *method);
void UI_free(UI *ui);

/*-
   The following functions are used to add strings to be printed and prompt
   strings to prompt for data.  The names are UI_{add,dup}_<function>_string
   and UI_{add,dup}_input_boolean.

   UI_{add,dup}_<function>_string have the following meanings:
        add     add a text or prompt string.  The pointers given to these
                functions are used verbatim, no copying is done.
        dup     make a copy of the text or prompt string, then add the copy
                to the collection of strings in the user interface.
        <function>
                The function is a name for the functionality that the given
                string shall be used for.  It can be one of:
                        input   use the string as data prompt.
                        verify  use the string as verification prompt.  This
                                is used to verify a previous input.
                        info    use the string for informational output.
                        error   use the string for error output.
   Honestly, there's currently no difference between info and error for the
   moment.

   UI_{add,dup}_input_boolean have the same semantics for "add" and "dup",
   and are typically used when one wants to prompt for a yes/no response.

   All of the functions in this group take a UI and a prompt string.
   The string input and verify addition functions also take a flag argument,
   a buffer for the result to end up with, a minimum input size and a maximum
   input size (the result buffer MUST be large enough to be able to contain
   the maximum number of characters).  Additionally, the verify addition
   functions takes another buffer to compare the result against.
   The boolean input functions take an action description string (which should
   be safe to ignore if the expected user action is obvious, for example with
   a dialog box with an OK button and a Cancel button), a string of acceptable
   characters to mean OK and to mean Cancel.  The two last strings are checked
   to make sure they don't have common characters.  Additionally, the same
   flag argument as for the string input is taken, as well as a result buffer.
   The result buffer is required to be at least one byte long.  Depending on
   the answer, the first character from the OK or the Cancel character strings
   will be stored in the first byte of the result buffer.  No NUL will be
   added, so the result is *not* a string.

   On success, the all return an index of the added information.  That index
   is useful when retrieving results with UI_get0_result(). */
int UI_add_input_string(UI *ui, const char *prompt, int flags,
                        char *result_buf, int minsize, int maxsize);
int UI_dup_input_string(UI *ui, const char *prompt, int flags,
                        char *result_buf, int minsize, int maxsize);
int UI_add_verify_string(UI *ui, const char *prompt, int flags,
                         char *result_buf, int minsize, int maxsize,
                         const char *test_buf);
int UI_dup_verify_string(UI *ui, const char *prompt, int flags,
                         char *result_buf, int minsize, int maxsize,
                         const char *test_buf);
int UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,
                         const char *ok_chars, const char *cancel_chars,
                         int flags, char *result_buf);
int UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,
                         const char *ok_chars, const char *cancel_chars,
                         int flags, char *result_buf);
int UI_add_info_string(UI *ui, const char *text);
int UI_dup_info_string(UI *ui, const char *text);
int UI_add_error_string(UI *ui, const char *text);
int UI_dup_error_string(UI *ui, const char *text);

/* These are the possible flags.  They can be or'ed together. */
/* Use to have echoing of input */
# define UI_INPUT_FLAG_ECHO              0x01
/*
 * Use a default password.  Where that password is found is completely up to
 * the application, it might for example be in the user data set with
 * UI_add_user_data().  It is not recommended to have more than one input in
 * each UI being marked with this flag, or the application might get
 * confused.
 */
# define UI_INPUT_FLAG_DEFAULT_PWD       0x02

/*-
 * The user of these routines may want to define flags of their own.  The core
 * UI won't look at those, but will pass them on to the method routines.  They
 * must use higher bits so they don't get confused with the UI bits above.
 * UI_INPUT_FLAG_USER_BASE tells which is the lowest bit to use.  A good
 * example of use is this:
 *
 *    #define MY_UI_FLAG1       (0x01 << UI_INPUT_FLAG_USER_BASE)
 *
*/
# define UI_INPUT_FLAG_USER_BASE 16

/*-
 * The following function helps construct a prompt.
 * phrase_desc is a textual short description of the phrase to enter,
 * for example "pass phrase", and
 * object_name is the name of the object
 * (which might be a card name or a file name) or NULL.
 * The returned string shall always be allocated on the heap with
 * OPENSSL_malloc(), and need to be free'd with OPENSSL_free().
 *
 * If the ui_method doesn't contain a pointer to a user-defined prompt
 * constructor, a default string is built, looking like this:
 *
 *       "Enter {phrase_desc} for {object_name}:"
 *
 * So, if phrase_desc has the value "pass phrase" and object_name has
 * the value "foo.key", the resulting string is:
 *
 *       "Enter pass phrase for foo.key:"
*/
char *UI_construct_prompt(UI *ui_method,
                          const char *phrase_desc, const char *object_name);

/*
 * The following function is used to store a pointer to user-specific data.
 * Any previous such pointer will be returned and replaced.
 *
 * For callback purposes, this function makes a lot more sense than using
 * ex_data, since the latter requires that different parts of OpenSSL or
 * applications share the same ex_data index.
 *
 * Note that the UI_OpenSSL() method completely ignores the user data. Other
 * methods may not, however.
 */
void *UI_add_user_data(UI *ui, void *user_data);
/*
 * Alternatively, this function is used to duplicate the user data.
 * This uses the duplicator method function.  The destroy function will
 * be used to free the user data in this case.
 */
int UI_dup_user_data(UI *ui, void *user_data);
/* We need a user data retrieving function as well.  */
void *UI_get0_user_data(UI *ui);

/* Return the result associated with a prompt given with the index i. */
const char *UI_get0_result(UI *ui, int i);
int UI_get_result_length(UI *ui, int i);

/* When all strings have been added, process the whole thing. */
int UI_process(UI *ui);

/*
 * Give a user interface parameterised control commands.  This can be used to
 * send down an integer, a data pointer or a function pointer, as well as be
 * used to get information from a UI.
 */
int UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void));

/* The commands */
/*
 * Use UI_CONTROL_PRINT_ERRORS with the value 1 to have UI_process print the
 * OpenSSL error stack before printing any info or added error messages and
 * before any prompting.
 */
# define UI_CTRL_PRINT_ERRORS            1
/*
 * Check if a UI_process() is possible to do again with the same instance of
 * a user interface.  This makes UI_ctrl() return 1 if it is redoable, and 0
 * if not.
 */
# define UI_CTRL_IS_REDOABLE             2

/* Some methods may use extra data */
# define UI_set_app_data(s,arg)         UI_set_ex_data(s,0,arg)
# define UI_get_app_data(s)             UI_get_ex_data(s,0)

# define UI_get_ex_new_index(l, p, newf, dupf, freef) \
    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_UI, l, p, newf, dupf, freef)
int UI_set_ex_data(UI *r, int idx, void *arg);
void *UI_get_ex_data(const UI *r, int idx);

/* Use specific methods instead of the built-in one */
void UI_set_default_method(const UI_METHOD *meth);
const UI_METHOD *UI_get_default_method(void);
const UI_METHOD *UI_get_method(UI *ui);
const UI_METHOD *UI_set_method(UI *ui, const UI_METHOD *meth);

# ifndef OPENSSL_NO_UI_CONSOLE

/* The method with all the built-in thingies */
UI_METHOD *UI_OpenSSL(void);

# endif

/*
 * NULL method.  Literally does nothing, but may serve as a placeholder
 * to avoid internal default.
 */
const UI_METHOD *UI_null(void);

/* ---------- For method writers ---------- */
/*-
   A method contains a number of functions that implement the low level
   of the User Interface.  The functions are:

        an opener       This function starts a session, maybe by opening
                        a channel to a tty, or by opening a window.
        a writer        This function is called to write a given string,
                        maybe to the tty, maybe as a field label in a
                        window.
        a flusher       This function is called to flush everything that
                        has been output so far.  It can be used to actually
                        display a dialog box after it has been built.
        a reader        This function is called to read a given prompt,
                        maybe from the tty, maybe from a field in a
                        window.  Note that it's called with all string
                        structures, not only the prompt ones, so it must
                        check such things itself.
        a closer        This function closes the session, maybe by closing
                        the channel to the tty, or closing the window.

   All these functions are expected to return:

        0       on error.
        1       on success.
        -1      on out-of-band events, for example if some prompting has
                been canceled (by pressing Ctrl-C, for example).  This is
                only checked when returned by the flusher or the reader.

   The way this is used, the opener is first called, then the writer for all
   strings, then the flusher, then the reader for all strings and finally the
   closer.  Note that if you want to prompt from a terminal or other command
   line interface, the best is to have the reader also write the prompts
   instead of having the writer do it.  If you want to prompt from a dialog
   box, the writer can be used to build up the contents of the box, and the
   flusher to actually display the box and run the event loop until all data
   has been given, after which the reader only grabs the given data and puts
   them back into the UI strings.

   All method functions take a UI as argument.  Additionally, the writer and
   the reader take a UI_STRING.
*/

/*
 * The UI_STRING type is the data structure that contains all the needed info
 * about a string or a prompt, including test data for a verification prompt.
 */
typedef struct ui_string_st UI_STRING;

SKM_DEFINE_STACK_OF_INTERNAL(UI_STRING, UI_STRING, UI_STRING)
#define sk_UI_STRING_num(sk) OPENSSL_sk_num(ossl_check_const_UI_STRING_sk_type(sk))
#define sk_UI_STRING_value(sk, idx) ((UI_STRING *)OPENSSL_sk_value(ossl_check_const_UI_STRING_sk_type(sk), (idx)))
#define sk_UI_STRING_new(cmp) ((STACK_OF(UI_STRING) *)OPENSSL_sk_new(ossl_check_UI_STRING_compfunc_type(cmp)))
#define sk_UI_STRING_new_null() ((STACK_OF(UI_STRING) *)OPENSSL_sk_new_null())
#define sk_UI_STRING_new_reserve(cmp, n) ((STACK_OF(UI_STRING) *)OPENSSL_sk_new_reserve(ossl_check_UI_STRING_compfunc_type(cmp), (n)))
#define sk_UI_STRING_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_UI_STRING_sk_type(sk), (n))
#define sk_UI_STRING_free(sk) OPENSSL_sk_free(ossl_check_UI_STRING_sk_type(sk))
#define sk_UI_STRING_zero(sk) OPENSSL_sk_zero(ossl_check_UI_STRING_sk_type(sk))
#define sk_UI_STRING_delete(sk, i) ((UI_STRING *)OPENSSL_sk_delete(ossl_check_UI_STRING_sk_type(sk), (i)))
#define sk_UI_STRING_delete_ptr(sk, ptr) ((UI_STRING *)OPENSSL_sk_delete_ptr(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_type(ptr)))
#define sk_UI_STRING_push(sk, ptr) OPENSSL_sk_push(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_type(ptr))
#define sk_UI_STRING_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_type(ptr))
#define sk_UI_STRING_pop(sk) ((UI_STRING *)OPENSSL_sk_pop(ossl_check_UI_STRING_sk_type(sk)))
#define sk_UI_STRING_shift(sk) ((UI_STRING *)OPENSSL_sk_shift(ossl_check_UI_STRING_sk_type(sk)))
#define sk_UI_STRING_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_UI_STRING_sk_type(sk),ossl_check_UI_STRING_freefunc_type(freefunc))
#define sk_UI_STRING_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_type(ptr), (idx))
#define sk_UI_STRING_set(sk, idx, ptr) ((UI_STRING *)OPENSSL_sk_set(ossl_check_UI_STRING_sk_type(sk), (idx), ossl_check_UI_STRING_type(ptr)))
#define sk_UI_STRING_find(sk, ptr) OPENSSL_sk_find(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_type(ptr))
#define sk_UI_STRING_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_type(ptr))
#define sk_UI_STRING_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_type(ptr), pnum)
#define sk_UI_STRING_sort(sk) OPENSSL_sk_sort(ossl_check_UI_STRING_sk_type(sk))
#define sk_UI_STRING_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_UI_STRING_sk_type(sk))
#define sk_UI_STRING_dup(sk) ((STACK_OF(UI_STRING) *)OPENSSL_sk_dup(ossl_check_const_UI_STRING_sk_type(sk)))
#define sk_UI_STRING_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(UI_STRING) *)OPENSSL_sk_deep_copy(ossl_check_const_UI_STRING_sk_type(sk), ossl_check_UI_STRING_copyfunc_type(copyfunc), ossl_check_UI_STRING_freefunc_type(freefunc)))
#define sk_UI_STRING_set_cmp_func(sk, cmp) ((sk_UI_STRING_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_UI_STRING_sk_type(sk), ossl_check_UI_STRING_compfunc_type(cmp)))


/*
 * The different types of strings that are currently supported. This is only
 * needed by method authors.
 */
enum UI_string_types {
    UIT_NONE = 0,
    UIT_PROMPT,                 /* Prompt for a string */
    UIT_VERIFY,                 /* Prompt for a string and verify */
    UIT_BOOLEAN,                /* Prompt for a yes/no response */
    UIT_INFO,                   /* Send info to the user */
    UIT_ERROR                   /* Send an error message to the user */
};

/* Create and manipulate methods */
UI_METHOD *UI_create_method(const char *name);
void UI_destroy_method(UI_METHOD *ui_method);
int UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui));
int UI_method_set_writer(UI_METHOD *method,
                         int (*writer) (UI *ui, UI_STRING *uis));
int UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui));
int UI_method_set_reader(UI_METHOD *method,
                         int (*reader) (UI *ui, UI_STRING *uis));
int UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui));
int UI_method_set_data_duplicator(UI_METHOD *method,
                                  void *(*duplicator) (UI *ui, void *ui_data),
                                  void (*destructor)(UI *ui, void *ui_data));
int UI_method_set_prompt_constructor(UI_METHOD *method,
                                     char *(*prompt_constructor) (UI *ui,
                                                                  const char
                                                                  *phrase_desc,
                                                                  const char
                                                                  *object_name));
int UI_method_set_ex_data(UI_METHOD *method, int idx, void *data);
int (*UI_method_get_opener(const UI_METHOD *method)) (UI *);
int (*UI_method_get_writer(const UI_METHOD *method)) (UI *, UI_STRING *);
int (*UI_method_get_flusher(const UI_METHOD *method)) (UI *);
int (*UI_method_get_reader(const UI_METHOD *method)) (UI *, UI_STRING *);
int (*UI_method_get_closer(const UI_METHOD *method)) (UI *);
char *(*UI_method_get_prompt_constructor(const UI_METHOD *method))
    (UI *, const char *, const char *);
void *(*UI_method_get_data_duplicator(const UI_METHOD *method)) (UI *, void *);
void (*UI_method_get_data_destructor(const UI_METHOD *method)) (UI *, void *);
const void *UI_method_get_ex_data(const UI_METHOD *method, int idx);

/*
 * The following functions are helpers for method writers to access relevant
 * data from a UI_STRING.
 */

/* Return type of the UI_STRING */
enum UI_string_types UI_get_string_type(UI_STRING *uis);
/* Return input flags of the UI_STRING */
int UI_get_input_flags(UI_STRING *uis);
/* Return the actual string to output (the prompt, info or error) */
const char *UI_get0_output_string(UI_STRING *uis);
/*
 * Return the optional action string to output (the boolean prompt
 * instruction)
 */
const char *UI_get0_action_string(UI_STRING *uis);
/* Return the result of a prompt */
const char *UI_get0_result_string(UI_STRING *uis);
int UI_get_result_string_length(UI_STRING *uis);
/*
 * Return the string to test the result against.  Only useful with verifies.
 */
const char *UI_get0_test_string(UI_STRING *uis);
/* Return the required minimum size of the result */
int UI_get_result_minsize(UI_STRING *uis);
/* Return the required maximum size of the result */
int UI_get_result_maxsize(UI_STRING *uis);
/* Set the result of a UI_STRING. */
int UI_set_result(UI *ui, UI_STRING *uis, const char *result);
int UI_set_result_ex(UI *ui, UI_STRING *uis, const char *result, int len);

/* A couple of popular utility functions */
int UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,
                           int verify);
int UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt,
                    int verify);
UI_METHOD *UI_UTIL_wrap_read_pem_callback(pem_password_cb *cb, int rwflag);


# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                                                                                             node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm/include/openssl/x509.h                           0000664 0000000 0000000 00000213574 14746647661 0025430 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/x509.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_X509_H
# define OPENSSL_X509_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_X509_H
# endif

# include <openssl/e_os2.h>
# include <openssl/types.h>
# include <openssl/symhacks.h>
# include <openssl/buffer.h>
# include <openssl/evp.h>
# include <openssl/bio.h>
# include <openssl/asn1.h>
# include <openssl/safestack.h>
# include <openssl/ec.h>

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  include <openssl/rsa.h>
#  include <openssl/dsa.h>
#  include <openssl/dh.h>
# endif

# include <openssl/sha.h>
# include <openssl/x509err.h>

#ifdef  __cplusplus
extern "C" {
#endif

/* Needed stacks for types defined in other headers */
SKM_DEFINE_STACK_OF_INTERNAL(X509_NAME, X509_NAME, X509_NAME)
#define sk_X509_NAME_num(sk) OPENSSL_sk_num(ossl_check_const_X509_NAME_sk_type(sk))
#define sk_X509_NAME_value(sk, idx) ((X509_NAME *)OPENSSL_sk_value(ossl_check_const_X509_NAME_sk_type(sk), (idx)))
#define sk_X509_NAME_new(cmp) ((STACK_OF(X509_NAME) *)OPENSSL_sk_new(ossl_check_X509_NAME_compfunc_type(cmp)))
#define sk_X509_NAME_new_null() ((STACK_OF(X509_NAME) *)OPENSSL_sk_new_null())
#define sk_X509_NAME_new_reserve(cmp, n) ((STACK_OF(X509_NAME) *)OPENSSL_sk_new_reserve(ossl_check_X509_NAME_compfunc_type(cmp), (n)))
#define sk_X509_NAME_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_NAME_sk_type(sk), (n))
#define sk_X509_NAME_free(sk) OPENSSL_sk_free(ossl_check_X509_NAME_sk_type(sk))
#define sk_X509_NAME_zero(sk) OPENSSL_sk_zero(ossl_check_X509_NAME_sk_type(sk))
#define sk_X509_NAME_delete(sk, i) ((X509_NAME *)OPENSSL_sk_delete(ossl_check_X509_NAME_sk_type(sk), (i)))
#define sk_X509_NAME_delete_ptr(sk, ptr) ((X509_NAME *)OPENSSL_sk_delete_ptr(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_type(ptr)))
#define sk_X509_NAME_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_type(ptr))
#define sk_X509_NAME_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_type(ptr))
#define sk_X509_NAME_pop(sk) ((X509_NAME *)OPENSSL_sk_pop(ossl_check_X509_NAME_sk_type(sk)))
#define sk_X509_NAME_shift(sk) ((X509_NAME *)OPENSSL_sk_shift(ossl_check_X509_NAME_sk_type(sk)))
#define sk_X509_NAME_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_NAME_sk_type(sk),ossl_check_X509_NAME_freefunc_type(freefunc))
#define sk_X509_NAME_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_type(ptr), (idx))
#define sk_X509_NAME_set(sk, idx, ptr) ((X509_NAME *)OPENSSL_sk_set(ossl_check_X509_NAME_sk_type(sk), (idx), ossl_check_X509_NAME_type(ptr)))
#define sk_X509_NAME_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_type(ptr))
#define sk_X509_NAME_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_type(ptr))
#define sk_X509_NAME_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_type(ptr), pnum)
#define sk_X509_NAME_sort(sk) OPENSSL_sk_sort(ossl_check_X509_NAME_sk_type(sk))
#define sk_X509_NAME_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_NAME_sk_type(sk))
#define sk_X509_NAME_dup(sk) ((STACK_OF(X509_NAME) *)OPENSSL_sk_dup(ossl_check_const_X509_NAME_sk_type(sk)))
#define sk_X509_NAME_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_NAME) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_NAME_sk_type(sk), ossl_check_X509_NAME_copyfunc_type(copyfunc), ossl_check_X509_NAME_freefunc_type(freefunc)))
#define sk_X509_NAME_set_cmp_func(sk, cmp) ((sk_X509_NAME_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_NAME_sk_type(sk), ossl_check_X509_NAME_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(X509, X509, X509)
#define sk_X509_num(sk) OPENSSL_sk_num(ossl_check_const_X509_sk_type(sk))
#define sk_X509_value(sk, idx) ((X509 *)OPENSSL_sk_value(ossl_check_const_X509_sk_type(sk), (idx)))
#define sk_X509_new(cmp) ((STACK_OF(X509) *)OPENSSL_sk_new(ossl_check_X509_compfunc_type(cmp)))
#define sk_X509_new_null() ((STACK_OF(X509) *)OPENSSL_sk_new_null())
#define sk_X509_new_reserve(cmp, n) ((STACK_OF(X509) *)OPENSSL_sk_new_reserve(ossl_check_X509_compfunc_type(cmp), (n)))
#define sk_X509_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_sk_type(sk), (n))
#define sk_X509_free(sk) OPENSSL_sk_free(ossl_check_X509_sk_type(sk))
#define sk_X509_zero(sk) OPENSSL_sk_zero(ossl_check_X509_sk_type(sk))
#define sk_X509_delete(sk, i) ((X509 *)OPENSSL_sk_delete(ossl_check_X509_sk_type(sk), (i)))
#define sk_X509_delete_ptr(sk, ptr) ((X509 *)OPENSSL_sk_delete_ptr(ossl_check_X509_sk_type(sk), ossl_check_X509_type(ptr)))
#define sk_X509_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_sk_type(sk), ossl_check_X509_type(ptr))
#define sk_X509_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_sk_type(sk), ossl_check_X509_type(ptr))
#define sk_X509_pop(sk) ((X509 *)OPENSSL_sk_pop(ossl_check_X509_sk_type(sk)))
#define sk_X509_shift(sk) ((X509 *)OPENSSL_sk_shift(ossl_check_X509_sk_type(sk)))
#define sk_X509_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_sk_type(sk),ossl_check_X509_freefunc_type(freefunc))
#define sk_X509_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_sk_type(sk), ossl_check_X509_type(ptr), (idx))
#define sk_X509_set(sk, idx, ptr) ((X509 *)OPENSSL_sk_set(ossl_check_X509_sk_type(sk), (idx), ossl_check_X509_type(ptr)))
#define sk_X509_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_sk_type(sk), ossl_check_X509_type(ptr))
#define sk_X509_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_sk_type(sk), ossl_check_X509_type(ptr))
#define sk_X509_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_sk_type(sk), ossl_check_X509_type(ptr), pnum)
#define sk_X509_sort(sk) OPENSSL_sk_sort(ossl_check_X509_sk_type(sk))
#define sk_X509_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_sk_type(sk))
#define sk_X509_dup(sk) ((STACK_OF(X509) *)OPENSSL_sk_dup(ossl_check_const_X509_sk_type(sk)))
#define sk_X509_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_sk_type(sk), ossl_check_X509_copyfunc_type(copyfunc), ossl_check_X509_freefunc_type(freefunc)))
#define sk_X509_set_cmp_func(sk, cmp) ((sk_X509_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_sk_type(sk), ossl_check_X509_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(X509_REVOKED, X509_REVOKED, X509_REVOKED)
#define sk_X509_REVOKED_num(sk) OPENSSL_sk_num(ossl_check_const_X509_REVOKED_sk_type(sk))
#define sk_X509_REVOKED_value(sk, idx) ((X509_REVOKED *)OPENSSL_sk_value(ossl_check_const_X509_REVOKED_sk_type(sk), (idx)))
#define sk_X509_REVOKED_new(cmp) ((STACK_OF(X509_REVOKED) *)OPENSSL_sk_new(ossl_check_X509_REVOKED_compfunc_type(cmp)))
#define sk_X509_REVOKED_new_null() ((STACK_OF(X509_REVOKED) *)OPENSSL_sk_new_null())
#define sk_X509_REVOKED_new_reserve(cmp, n) ((STACK_OF(X509_REVOKED) *)OPENSSL_sk_new_reserve(ossl_check_X509_REVOKED_compfunc_type(cmp), (n)))
#define sk_X509_REVOKED_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_REVOKED_sk_type(sk), (n))
#define sk_X509_REVOKED_free(sk) OPENSSL_sk_free(ossl_check_X509_REVOKED_sk_type(sk))
#define sk_X509_REVOKED_zero(sk) OPENSSL_sk_zero(ossl_check_X509_REVOKED_sk_type(sk))
#define sk_X509_REVOKED_delete(sk, i) ((X509_REVOKED *)OPENSSL_sk_delete(ossl_check_X509_REVOKED_sk_type(sk), (i)))
#define sk_X509_REVOKED_delete_ptr(sk, ptr) ((X509_REVOKED *)OPENSSL_sk_delete_ptr(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_type(ptr)))
#define sk_X509_REVOKED_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_type(ptr))
#define sk_X509_REVOKED_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_type(ptr))
#define sk_X509_REVOKED_pop(sk) ((X509_REVOKED *)OPENSSL_sk_pop(ossl_check_X509_REVOKED_sk_type(sk)))
#define sk_X509_REVOKED_shift(sk) ((X509_REVOKED *)OPENSSL_sk_shift(ossl_check_X509_REVOKED_sk_type(sk)))
#define sk_X509_REVOKED_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_REVOKED_sk_type(sk),ossl_check_X509_REVOKED_freefunc_type(freefunc))
#define sk_X509_REVOKED_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_type(ptr), (idx))
#define sk_X509_REVOKED_set(sk, idx, ptr) ((X509_REVOKED *)OPENSSL_sk_set(ossl_check_X509_REVOKED_sk_type(sk), (idx), ossl_check_X509_REVOKED_type(ptr)))
#define sk_X509_REVOKED_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_type(ptr))
#define sk_X509_REVOKED_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_type(ptr))
#define sk_X509_REVOKED_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_type(ptr), pnum)
#define sk_X509_REVOKED_sort(sk) OPENSSL_sk_sort(ossl_check_X509_REVOKED_sk_type(sk))
#define sk_X509_REVOKED_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_REVOKED_sk_type(sk))
#define sk_X509_REVOKED_dup(sk) ((STACK_OF(X509_REVOKED) *)OPENSSL_sk_dup(ossl_check_const_X509_REVOKED_sk_type(sk)))
#define sk_X509_REVOKED_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_REVOKED) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_copyfunc_type(copyfunc), ossl_check_X509_REVOKED_freefunc_type(freefunc)))
#define sk_X509_REVOKED_set_cmp_func(sk, cmp) ((sk_X509_REVOKED_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_REVOKED_sk_type(sk), ossl_check_X509_REVOKED_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(X509_CRL, X509_CRL, X509_CRL)
#define sk_X509_CRL_num(sk) OPENSSL_sk_num(ossl_check_const_X509_CRL_sk_type(sk))
#define sk_X509_CRL_value(sk, idx) ((X509_CRL *)OPENSSL_sk_value(ossl_check_const_X509_CRL_sk_type(sk), (idx)))
#define sk_X509_CRL_new(cmp) ((STACK_OF(X509_CRL) *)OPENSSL_sk_new(ossl_check_X509_CRL_compfunc_type(cmp)))
#define sk_X509_CRL_new_null() ((STACK_OF(X509_CRL) *)OPENSSL_sk_new_null())
#define sk_X509_CRL_new_reserve(cmp, n) ((STACK_OF(X509_CRL) *)OPENSSL_sk_new_reserve(ossl_check_X509_CRL_compfunc_type(cmp), (n)))
#define sk_X509_CRL_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_CRL_sk_type(sk), (n))
#define sk_X509_CRL_free(sk) OPENSSL_sk_free(ossl_check_X509_CRL_sk_type(sk))
#define sk_X509_CRL_zero(sk) OPENSSL_sk_zero(ossl_check_X509_CRL_sk_type(sk))
#define sk_X509_CRL_delete(sk, i) ((X509_CRL *)OPENSSL_sk_delete(ossl_check_X509_CRL_sk_type(sk), (i)))
#define sk_X509_CRL_delete_ptr(sk, ptr) ((X509_CRL *)OPENSSL_sk_delete_ptr(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_type(ptr)))
#define sk_X509_CRL_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_type(ptr))
#define sk_X509_CRL_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_type(ptr))
#define sk_X509_CRL_pop(sk) ((X509_CRL *)OPENSSL_sk_pop(ossl_check_X509_CRL_sk_type(sk)))
#define sk_X509_CRL_shift(sk) ((X509_CRL *)OPENSSL_sk_shift(ossl_check_X509_CRL_sk_type(sk)))
#define sk_X509_CRL_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_CRL_sk_type(sk),ossl_check_X509_CRL_freefunc_type(freefunc))
#define sk_X509_CRL_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_type(ptr), (idx))
#define sk_X509_CRL_set(sk, idx, ptr) ((X509_CRL *)OPENSSL_sk_set(ossl_check_X509_CRL_sk_type(sk), (idx), ossl_check_X509_CRL_type(ptr)))
#define sk_X509_CRL_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_type(ptr))
#define sk_X509_CRL_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_type(ptr))
#define sk_X509_CRL_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_type(ptr), pnum)
#define sk_X509_CRL_sort(sk) OPENSSL_sk_sort(ossl_check_X509_CRL_sk_type(sk))
#define sk_X509_CRL_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_CRL_sk_type(sk))
#define sk_X509_CRL_dup(sk) ((STACK_OF(X509_CRL) *)OPENSSL_sk_dup(ossl_check_const_X509_CRL_sk_type(sk)))
#define sk_X509_CRL_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_CRL) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_CRL_sk_type(sk), ossl_check_X509_CRL_copyfunc_type(copyfunc), ossl_check_X509_CRL_freefunc_type(freefunc)))
#define sk_X509_CRL_set_cmp_func(sk, cmp) ((sk_X509_CRL_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_CRL_sk_type(sk), ossl_check_X509_CRL_compfunc_type(cmp)))


/* Flags for X509_get_signature_info() */
/* Signature info is valid */
# define X509_SIG_INFO_VALID     0x1
/* Signature is suitable for TLS use */
# define X509_SIG_INFO_TLS       0x2

# define X509_FILETYPE_PEM       1
# define X509_FILETYPE_ASN1      2
# define X509_FILETYPE_DEFAULT   3

# define X509v3_KU_DIGITAL_SIGNATURE     0x0080
# define X509v3_KU_NON_REPUDIATION       0x0040
# define X509v3_KU_KEY_ENCIPHERMENT      0x0020
# define X509v3_KU_DATA_ENCIPHERMENT     0x0010
# define X509v3_KU_KEY_AGREEMENT         0x0008
# define X509v3_KU_KEY_CERT_SIGN         0x0004
# define X509v3_KU_CRL_SIGN              0x0002
# define X509v3_KU_ENCIPHER_ONLY         0x0001
# define X509v3_KU_DECIPHER_ONLY         0x8000
# define X509v3_KU_UNDEF                 0xffff

struct X509_algor_st {
    ASN1_OBJECT *algorithm;
    ASN1_TYPE *parameter;
} /* X509_ALGOR */ ;

typedef STACK_OF(X509_ALGOR) X509_ALGORS;

typedef struct X509_val_st {
    ASN1_TIME *notBefore;
    ASN1_TIME *notAfter;
} X509_VAL;

typedef struct X509_sig_st X509_SIG;

typedef struct X509_name_entry_st X509_NAME_ENTRY;

SKM_DEFINE_STACK_OF_INTERNAL(X509_NAME_ENTRY, X509_NAME_ENTRY, X509_NAME_ENTRY)
#define sk_X509_NAME_ENTRY_num(sk) OPENSSL_sk_num(ossl_check_const_X509_NAME_ENTRY_sk_type(sk))
#define sk_X509_NAME_ENTRY_value(sk, idx) ((X509_NAME_ENTRY *)OPENSSL_sk_value(ossl_check_const_X509_NAME_ENTRY_sk_type(sk), (idx)))
#define sk_X509_NAME_ENTRY_new(cmp) ((STACK_OF(X509_NAME_ENTRY) *)OPENSSL_sk_new(ossl_check_X509_NAME_ENTRY_compfunc_type(cmp)))
#define sk_X509_NAME_ENTRY_new_null() ((STACK_OF(X509_NAME_ENTRY) *)OPENSSL_sk_new_null())
#define sk_X509_NAME_ENTRY_new_reserve(cmp, n) ((STACK_OF(X509_NAME_ENTRY) *)OPENSSL_sk_new_reserve(ossl_check_X509_NAME_ENTRY_compfunc_type(cmp), (n)))
#define sk_X509_NAME_ENTRY_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_NAME_ENTRY_sk_type(sk), (n))
#define sk_X509_NAME_ENTRY_free(sk) OPENSSL_sk_free(ossl_check_X509_NAME_ENTRY_sk_type(sk))
#define sk_X509_NAME_ENTRY_zero(sk) OPENSSL_sk_zero(ossl_check_X509_NAME_ENTRY_sk_type(sk))
#define sk_X509_NAME_ENTRY_delete(sk, i) ((X509_NAME_ENTRY *)OPENSSL_sk_delete(ossl_check_X509_NAME_ENTRY_sk_type(sk), (i)))
#define sk_X509_NAME_ENTRY_delete_ptr(sk, ptr) ((X509_NAME_ENTRY *)OPENSSL_sk_delete_ptr(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_type(ptr)))
#define sk_X509_NAME_ENTRY_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_type(ptr))
#define sk_X509_NAME_ENTRY_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_type(ptr))
#define sk_X509_NAME_ENTRY_pop(sk) ((X509_NAME_ENTRY *)OPENSSL_sk_pop(ossl_check_X509_NAME_ENTRY_sk_type(sk)))
#define sk_X509_NAME_ENTRY_shift(sk) ((X509_NAME_ENTRY *)OPENSSL_sk_shift(ossl_check_X509_NAME_ENTRY_sk_type(sk)))
#define sk_X509_NAME_ENTRY_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_NAME_ENTRY_sk_type(sk),ossl_check_X509_NAME_ENTRY_freefunc_type(freefunc))
#define sk_X509_NAME_ENTRY_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_type(ptr), (idx))
#define sk_X509_NAME_ENTRY_set(sk, idx, ptr) ((X509_NAME_ENTRY *)OPENSSL_sk_set(ossl_check_X509_NAME_ENTRY_sk_type(sk), (idx), ossl_check_X509_NAME_ENTRY_type(ptr)))
#define sk_X509_NAME_ENTRY_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_type(ptr))
#define sk_X509_NAME_ENTRY_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_type(ptr))
#define sk_X509_NAME_ENTRY_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_type(ptr), pnum)
#define sk_X509_NAME_ENTRY_sort(sk) OPENSSL_sk_sort(ossl_check_X509_NAME_ENTRY_sk_type(sk))
#define sk_X509_NAME_ENTRY_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_NAME_ENTRY_sk_type(sk))
#define sk_X509_NAME_ENTRY_dup(sk) ((STACK_OF(X509_NAME_ENTRY) *)OPENSSL_sk_dup(ossl_check_const_X509_NAME_ENTRY_sk_type(sk)))
#define sk_X509_NAME_ENTRY_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_NAME_ENTRY) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_copyfunc_type(copyfunc), ossl_check_X509_NAME_ENTRY_freefunc_type(freefunc)))
#define sk_X509_NAME_ENTRY_set_cmp_func(sk, cmp) ((sk_X509_NAME_ENTRY_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_NAME_ENTRY_sk_type(sk), ossl_check_X509_NAME_ENTRY_compfunc_type(cmp)))


# define X509_EX_V_NETSCAPE_HACK         0x8000
# define X509_EX_V_INIT                  0x0001
typedef struct X509_extension_st X509_EXTENSION;
SKM_DEFINE_STACK_OF_INTERNAL(X509_EXTENSION, X509_EXTENSION, X509_EXTENSION)
#define sk_X509_EXTENSION_num(sk) OPENSSL_sk_num(ossl_check_const_X509_EXTENSION_sk_type(sk))
#define sk_X509_EXTENSION_value(sk, idx) ((X509_EXTENSION *)OPENSSL_sk_value(ossl_check_const_X509_EXTENSION_sk_type(sk), (idx)))
#define sk_X509_EXTENSION_new(cmp) ((STACK_OF(X509_EXTENSION) *)OPENSSL_sk_new(ossl_check_X509_EXTENSION_compfunc_type(cmp)))
#define sk_X509_EXTENSION_new_null() ((STACK_OF(X509_EXTENSION) *)OPENSSL_sk_new_null())
#define sk_X509_EXTENSION_new_reserve(cmp, n) ((STACK_OF(X509_EXTENSION) *)OPENSSL_sk_new_reserve(ossl_check_X509_EXTENSION_compfunc_type(cmp), (n)))
#define sk_X509_EXTENSION_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_EXTENSION_sk_type(sk), (n))
#define sk_X509_EXTENSION_free(sk) OPENSSL_sk_free(ossl_check_X509_EXTENSION_sk_type(sk))
#define sk_X509_EXTENSION_zero(sk) OPENSSL_sk_zero(ossl_check_X509_EXTENSION_sk_type(sk))
#define sk_X509_EXTENSION_delete(sk, i) ((X509_EXTENSION *)OPENSSL_sk_delete(ossl_check_X509_EXTENSION_sk_type(sk), (i)))
#define sk_X509_EXTENSION_delete_ptr(sk, ptr) ((X509_EXTENSION *)OPENSSL_sk_delete_ptr(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_type(ptr)))
#define sk_X509_EXTENSION_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_type(ptr))
#define sk_X509_EXTENSION_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_type(ptr))
#define sk_X509_EXTENSION_pop(sk) ((X509_EXTENSION *)OPENSSL_sk_pop(ossl_check_X509_EXTENSION_sk_type(sk)))
#define sk_X509_EXTENSION_shift(sk) ((X509_EXTENSION *)OPENSSL_sk_shift(ossl_check_X509_EXTENSION_sk_type(sk)))
#define sk_X509_EXTENSION_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_EXTENSION_sk_type(sk),ossl_check_X509_EXTENSION_freefunc_type(freefunc))
#define sk_X509_EXTENSION_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_type(ptr), (idx))
#define sk_X509_EXTENSION_set(sk, idx, ptr) ((X509_EXTENSION *)OPENSSL_sk_set(ossl_check_X509_EXTENSION_sk_type(sk), (idx), ossl_check_X509_EXTENSION_type(ptr)))
#define sk_X509_EXTENSION_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_type(ptr))
#define sk_X509_EXTENSION_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_type(ptr))
#define sk_X509_EXTENSION_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_type(ptr), pnum)
#define sk_X509_EXTENSION_sort(sk) OPENSSL_sk_sort(ossl_check_X509_EXTENSION_sk_type(sk))
#define sk_X509_EXTENSION_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_EXTENSION_sk_type(sk))
#define sk_X509_EXTENSION_dup(sk) ((STACK_OF(X509_EXTENSION) *)OPENSSL_sk_dup(ossl_check_const_X509_EXTENSION_sk_type(sk)))
#define sk_X509_EXTENSION_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_EXTENSION) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_copyfunc_type(copyfunc), ossl_check_X509_EXTENSION_freefunc_type(freefunc)))
#define sk_X509_EXTENSION_set_cmp_func(sk, cmp) ((sk_X509_EXTENSION_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_EXTENSION_sk_type(sk), ossl_check_X509_EXTENSION_compfunc_type(cmp)))

typedef STACK_OF(X509_EXTENSION) X509_EXTENSIONS;
typedef struct x509_attributes_st X509_ATTRIBUTE;
SKM_DEFINE_STACK_OF_INTERNAL(X509_ATTRIBUTE, X509_ATTRIBUTE, X509_ATTRIBUTE)
#define sk_X509_ATTRIBUTE_num(sk) OPENSSL_sk_num(ossl_check_const_X509_ATTRIBUTE_sk_type(sk))
#define sk_X509_ATTRIBUTE_value(sk, idx) ((X509_ATTRIBUTE *)OPENSSL_sk_value(ossl_check_const_X509_ATTRIBUTE_sk_type(sk), (idx)))
#define sk_X509_ATTRIBUTE_new(cmp) ((STACK_OF(X509_ATTRIBUTE) *)OPENSSL_sk_new(ossl_check_X509_ATTRIBUTE_compfunc_type(cmp)))
#define sk_X509_ATTRIBUTE_new_null() ((STACK_OF(X509_ATTRIBUTE) *)OPENSSL_sk_new_null())
#define sk_X509_ATTRIBUTE_new_reserve(cmp, n) ((STACK_OF(X509_ATTRIBUTE) *)OPENSSL_sk_new_reserve(ossl_check_X509_ATTRIBUTE_compfunc_type(cmp), (n)))
#define sk_X509_ATTRIBUTE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_ATTRIBUTE_sk_type(sk), (n))
#define sk_X509_ATTRIBUTE_free(sk) OPENSSL_sk_free(ossl_check_X509_ATTRIBUTE_sk_type(sk))
#define sk_X509_ATTRIBUTE_zero(sk) OPENSSL_sk_zero(ossl_check_X509_ATTRIBUTE_sk_type(sk))
#define sk_X509_ATTRIBUTE_delete(sk, i) ((X509_ATTRIBUTE *)OPENSSL_sk_delete(ossl_check_X509_ATTRIBUTE_sk_type(sk), (i)))
#define sk_X509_ATTRIBUTE_delete_ptr(sk, ptr) ((X509_ATTRIBUTE *)OPENSSL_sk_delete_ptr(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_type(ptr)))
#define sk_X509_ATTRIBUTE_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_type(ptr))
#define sk_X509_ATTRIBUTE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_type(ptr))
#define sk_X509_ATTRIBUTE_pop(sk) ((X509_ATTRIBUTE *)OPENSSL_sk_pop(ossl_check_X509_ATTRIBUTE_sk_type(sk)))
#define sk_X509_ATTRIBUTE_shift(sk) ((X509_ATTRIBUTE *)OPENSSL_sk_shift(ossl_check_X509_ATTRIBUTE_sk_type(sk)))
#define sk_X509_ATTRIBUTE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_ATTRIBUTE_sk_type(sk),ossl_check_X509_ATTRIBUTE_freefunc_type(freefunc))
#define sk_X509_ATTRIBUTE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_type(ptr), (idx))
#define sk_X509_ATTRIBUTE_set(sk, idx, ptr) ((X509_ATTRIBUTE *)OPENSSL_sk_set(ossl_check_X509_ATTRIBUTE_sk_type(sk), (idx), ossl_check_X509_ATTRIBUTE_type(ptr)))
#define sk_X509_ATTRIBUTE_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_type(ptr))
#define sk_X509_ATTRIBUTE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_type(ptr))
#define sk_X509_ATTRIBUTE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_type(ptr), pnum)
#define sk_X509_ATTRIBUTE_sort(sk) OPENSSL_sk_sort(ossl_check_X509_ATTRIBUTE_sk_type(sk))
#define sk_X509_ATTRIBUTE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_ATTRIBUTE_sk_type(sk))
#define sk_X509_ATTRIBUTE_dup(sk) ((STACK_OF(X509_ATTRIBUTE) *)OPENSSL_sk_dup(ossl_check_const_X509_ATTRIBUTE_sk_type(sk)))
#define sk_X509_ATTRIBUTE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_ATTRIBUTE) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_copyfunc_type(copyfunc), ossl_check_X509_ATTRIBUTE_freefunc_type(freefunc)))
#define sk_X509_ATTRIBUTE_set_cmp_func(sk, cmp) ((sk_X509_ATTRIBUTE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_ATTRIBUTE_sk_type(sk), ossl_check_X509_ATTRIBUTE_compfunc_type(cmp)))

typedef struct X509_req_info_st X509_REQ_INFO;
typedef struct X509_req_st X509_REQ;
typedef struct x509_cert_aux_st X509_CERT_AUX;
typedef struct x509_cinf_st X509_CINF;

/* Flags for X509_print_ex() */

# define X509_FLAG_COMPAT                0
# define X509_FLAG_NO_HEADER             1L
# define X509_FLAG_NO_VERSION            (1L << 1)
# define X509_FLAG_NO_SERIAL             (1L << 2)
# define X509_FLAG_NO_SIGNAME            (1L << 3)
# define X509_FLAG_NO_ISSUER             (1L << 4)
# define X509_FLAG_NO_VALIDITY           (1L << 5)
# define X509_FLAG_NO_SUBJECT            (1L << 6)
# define X509_FLAG_NO_PUBKEY             (1L << 7)
# define X509_FLAG_NO_EXTENSIONS         (1L << 8)
# define X509_FLAG_NO_SIGDUMP            (1L << 9)
# define X509_FLAG_NO_AUX                (1L << 10)
# define X509_FLAG_NO_ATTRIBUTES         (1L << 11)
# define X509_FLAG_NO_IDS                (1L << 12)
# define X509_FLAG_EXTENSIONS_ONLY_KID   (1L << 13)

/* Flags specific to X509_NAME_print_ex() */

/* The field separator information */

# define XN_FLAG_SEP_MASK        (0xf << 16)

# define XN_FLAG_COMPAT          0/* Traditional; use old X509_NAME_print */
# define XN_FLAG_SEP_COMMA_PLUS  (1 << 16)/* RFC2253 ,+ */
# define XN_FLAG_SEP_CPLUS_SPC   (2 << 16)/* ,+ spaced: more readable */
# define XN_FLAG_SEP_SPLUS_SPC   (3 << 16)/* ;+ spaced */
# define XN_FLAG_SEP_MULTILINE   (4 << 16)/* One line per field */

# define XN_FLAG_DN_REV          (1 << 20)/* Reverse DN order */

/* How the field name is shown */

# define XN_FLAG_FN_MASK         (0x3 << 21)

# define XN_FLAG_FN_SN           0/* Object short name */
# define XN_FLAG_FN_LN           (1 << 21)/* Object long name */
# define XN_FLAG_FN_OID          (2 << 21)/* Always use OIDs */
# define XN_FLAG_FN_NONE         (3 << 21)/* No field names */

# define XN_FLAG_SPC_EQ          (1 << 23)/* Put spaces round '=' */

/*
 * This determines if we dump fields we don't recognise: RFC2253 requires
 * this.
 */

# define XN_FLAG_DUMP_UNKNOWN_FIELDS (1 << 24)

# define XN_FLAG_FN_ALIGN        (1 << 25)/* Align field names to 20
                                           * characters */

/* Complete set of RFC2253 flags */

# define XN_FLAG_RFC2253 (ASN1_STRFLGS_RFC2253 | \
                        XN_FLAG_SEP_COMMA_PLUS | \
                        XN_FLAG_DN_REV | \
                        XN_FLAG_FN_SN | \
                        XN_FLAG_DUMP_UNKNOWN_FIELDS)

/* readable oneline form */

# define XN_FLAG_ONELINE (ASN1_STRFLGS_RFC2253 | \
                        ASN1_STRFLGS_ESC_QUOTE | \
                        XN_FLAG_SEP_CPLUS_SPC | \
                        XN_FLAG_SPC_EQ | \
                        XN_FLAG_FN_SN)

/* readable multiline form */

# define XN_FLAG_MULTILINE (ASN1_STRFLGS_ESC_CTRL | \
                        ASN1_STRFLGS_ESC_MSB | \
                        XN_FLAG_SEP_MULTILINE | \
                        XN_FLAG_SPC_EQ | \
                        XN_FLAG_FN_LN | \
                        XN_FLAG_FN_ALIGN)

typedef struct X509_crl_info_st X509_CRL_INFO;

typedef struct private_key_st {
    int version;
    /* The PKCS#8 data types */
    X509_ALGOR *enc_algor;
    ASN1_OCTET_STRING *enc_pkey; /* encrypted pub key */
    /* When decrypted, the following will not be NULL */
    EVP_PKEY *dec_pkey;
    /* used to encrypt and decrypt */
    int key_length;
    char *key_data;
    int key_free;               /* true if we should auto free key_data */
    /* expanded version of 'enc_algor' */
    EVP_CIPHER_INFO cipher;
} X509_PKEY;

typedef struct X509_info_st {
    X509 *x509;
    X509_CRL *crl;
    X509_PKEY *x_pkey;
    EVP_CIPHER_INFO enc_cipher;
    int enc_len;
    char *enc_data;
} X509_INFO;
SKM_DEFINE_STACK_OF_INTERNAL(X509_INFO, X509_INFO, X509_INFO)
#define sk_X509_INFO_num(sk) OPENSSL_sk_num(ossl_check_const_X509_INFO_sk_type(sk))
#define sk_X509_INFO_value(sk, idx) ((X509_INFO *)OPENSSL_sk_value(ossl_check_const_X509_INFO_sk_type(sk), (idx)))
#define sk_X509_INFO_new(cmp) ((STACK_OF(X509_INFO) *)OPENSSL_sk_new(ossl_check_X509_INFO_compfunc_type(cmp)))
#define sk_X509_INFO_new_null() ((STACK_OF(X509_INFO) *)OPENSSL_sk_new_null())
#define sk_X509_INFO_new_reserve(cmp, n) ((STACK_OF(X509_INFO) *)OPENSSL_sk_new_reserve(ossl_check_X509_INFO_compfunc_type(cmp), (n)))
#define sk_X509_INFO_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_INFO_sk_type(sk), (n))
#define sk_X509_INFO_free(sk) OPENSSL_sk_free(ossl_check_X509_INFO_sk_type(sk))
#define sk_X509_INFO_zero(sk) OPENSSL_sk_zero(ossl_check_X509_INFO_sk_type(sk))
#define sk_X509_INFO_delete(sk, i) ((X509_INFO *)OPENSSL_sk_delete(ossl_check_X509_INFO_sk_type(sk), (i)))
#define sk_X509_INFO_delete_ptr(sk, ptr) ((X509_INFO *)OPENSSL_sk_delete_ptr(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_type(ptr)))
#define sk_X509_INFO_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_type(ptr))
#define sk_X509_INFO_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_type(ptr))
#define sk_X509_INFO_pop(sk) ((X509_INFO *)OPENSSL_sk_pop(ossl_check_X509_INFO_sk_type(sk)))
#define sk_X509_INFO_shift(sk) ((X509_INFO *)OPENSSL_sk_shift(ossl_check_X509_INFO_sk_type(sk)))
#define sk_X509_INFO_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_INFO_sk_type(sk),ossl_check_X509_INFO_freefunc_type(freefunc))
#define sk_X509_INFO_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_type(ptr), (idx))
#define sk_X509_INFO_set(sk, idx, ptr) ((X509_INFO *)OPENSSL_sk_set(ossl_check_X509_INFO_sk_type(sk), (idx), ossl_check_X509_INFO_type(ptr)))
#define sk_X509_INFO_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_type(ptr))
#define sk_X509_INFO_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_type(ptr))
#define sk_X509_INFO_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_type(ptr), pnum)
#define sk_X509_INFO_sort(sk) OPENSSL_sk_sort(ossl_check_X509_INFO_sk_type(sk))
#define sk_X509_INFO_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_INFO_sk_type(sk))
#define sk_X509_INFO_dup(sk) ((STACK_OF(X509_INFO) *)OPENSSL_sk_dup(ossl_check_const_X509_INFO_sk_type(sk)))
#define sk_X509_INFO_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_INFO) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_INFO_sk_type(sk), ossl_check_X509_INFO_copyfunc_type(copyfunc), ossl_check_X509_INFO_freefunc_type(freefunc)))
#define sk_X509_INFO_set_cmp_func(sk, cmp) ((sk_X509_INFO_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_INFO_sk_type(sk), ossl_check_X509_INFO_compfunc_type(cmp)))


/*
 * The next 2 structures and their 8 routines are used to manipulate Netscape's
 * spki structures - useful if you are writing a CA web page
 */
typedef struct Netscape_spkac_st {
    X509_PUBKEY *pubkey;
    ASN1_IA5STRING *challenge;  /* challenge sent in atlas >= PR2 */
} NETSCAPE_SPKAC;

typedef struct Netscape_spki_st {
    NETSCAPE_SPKAC *spkac;      /* signed public key and challenge */
    X509_ALGOR sig_algor;
    ASN1_BIT_STRING *signature;
} NETSCAPE_SPKI;

/* Netscape certificate sequence structure */
typedef struct Netscape_certificate_sequence {
    ASN1_OBJECT *type;
    STACK_OF(X509) *certs;
} NETSCAPE_CERT_SEQUENCE;

/*- Unused (and iv length is wrong)
typedef struct CBCParameter_st
        {
        unsigned char iv[8];
        } CBC_PARAM;
*/

/* Password based encryption structure */

typedef struct PBEPARAM_st {
    ASN1_OCTET_STRING *salt;
    ASN1_INTEGER *iter;
} PBEPARAM;

/* Password based encryption V2 structures */

typedef struct PBE2PARAM_st {
    X509_ALGOR *keyfunc;
    X509_ALGOR *encryption;
} PBE2PARAM;

typedef struct PBKDF2PARAM_st {
/* Usually OCTET STRING but could be anything */
    ASN1_TYPE *salt;
    ASN1_INTEGER *iter;
    ASN1_INTEGER *keylength;
    X509_ALGOR *prf;
} PBKDF2PARAM;

#ifndef OPENSSL_NO_SCRYPT
typedef struct SCRYPT_PARAMS_st {
    ASN1_OCTET_STRING *salt;
    ASN1_INTEGER *costParameter;
    ASN1_INTEGER *blockSize;
    ASN1_INTEGER *parallelizationParameter;
    ASN1_INTEGER *keyLength;
} SCRYPT_PARAMS;
#endif

#ifdef  __cplusplus
}
#endif

# include <openssl/x509_vfy.h>
# include <openssl/pkcs7.h>

#ifdef  __cplusplus
extern "C" {
#endif

# define X509_EXT_PACK_UNKNOWN   1
# define X509_EXT_PACK_STRING    2

# define         X509_extract_key(x)     X509_get_pubkey(x)/*****/
# define         X509_REQ_extract_key(a) X509_REQ_get_pubkey(a)
# define         X509_name_cmp(a,b)      X509_NAME_cmp((a),(b))

void X509_CRL_set_default_method(const X509_CRL_METHOD *meth);
X509_CRL_METHOD *X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),
                                     int (*crl_free) (X509_CRL *crl),
                                     int (*crl_lookup) (X509_CRL *crl,
                                                        X509_REVOKED **ret,
                                                        const
                                                        ASN1_INTEGER *serial,
                                                        const
                                                        X509_NAME *issuer),
                                     int (*crl_verify) (X509_CRL *crl,
                                                        EVP_PKEY *pk));
void X509_CRL_METHOD_free(X509_CRL_METHOD *m);

void X509_CRL_set_meth_data(X509_CRL *crl, void *dat);
void *X509_CRL_get_meth_data(X509_CRL *crl);

const char *X509_verify_cert_error_string(long n);

int X509_verify(X509 *a, EVP_PKEY *r);
int X509_self_signed(X509 *cert, int verify_signature);

int X509_REQ_verify_ex(X509_REQ *a, EVP_PKEY *r, OSSL_LIB_CTX *libctx,
                       const char *propq);
int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r);
int X509_CRL_verify(X509_CRL *a, EVP_PKEY *r);
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r);

NETSCAPE_SPKI *NETSCAPE_SPKI_b64_decode(const char *str, int len);
char *NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x);
EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x);
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey);

int NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki);

int X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent);
int X509_signature_print(BIO *bp, const X509_ALGOR *alg,
                         const ASN1_STRING *sig);

int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx);
int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md);
int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx);
int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md);
int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx);
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md);

int X509_pubkey_digest(const X509 *data, const EVP_MD *type,
                       unsigned char *md, unsigned int *len);
int X509_digest(const X509 *data, const EVP_MD *type,
                unsigned char *md, unsigned int *len);
ASN1_OCTET_STRING *X509_digest_sig(const X509 *cert,
                                   EVP_MD **md_used, int *md_is_fallback);
int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,
                    unsigned char *md, unsigned int *len);
int X509_REQ_digest(const X509_REQ *data, const EVP_MD *type,
                    unsigned char *md, unsigned int *len);
int X509_NAME_digest(const X509_NAME *data, const EVP_MD *type,
                     unsigned char *md, unsigned int *len);

X509 *X509_load_http(const char *url, BIO *bio, BIO *rbio, int timeout);
X509_CRL *X509_CRL_load_http(const char *url, BIO *bio, BIO *rbio, int timeout);
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  include <openssl/http.h> /* OSSL_HTTP_REQ_CTX_nbio_d2i */
#  define X509_http_nbio(rctx, pcert) \
      OSSL_HTTP_REQ_CTX_nbio_d2i(rctx, pcert, ASN1_ITEM_rptr(X509))
#  define X509_CRL_http_nbio(rctx, pcrl) \
      OSSL_HTTP_REQ_CTX_nbio_d2i(rctx, pcrl, ASN1_ITEM_rptr(X509_CRL))
# endif

# ifndef OPENSSL_NO_STDIO
X509 *d2i_X509_fp(FILE *fp, X509 **x509);
int i2d_X509_fp(FILE *fp, const X509 *x509);
X509_CRL *d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl);
int i2d_X509_CRL_fp(FILE *fp, const X509_CRL *crl);
X509_REQ *d2i_X509_REQ_fp(FILE *fp, X509_REQ **req);
int i2d_X509_REQ_fp(FILE *fp, const X509_REQ *req);
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPrivateKey_fp(FILE *fp, const RSA *rsa);
OSSL_DEPRECATEDIN_3_0 RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPublicKey_fp(FILE *fp, const RSA *rsa);
OSSL_DEPRECATEDIN_3_0 RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSA_PUBKEY_fp(FILE *fp, const RSA *rsa);
#  endif
#  ifndef OPENSSL_NO_DEPRECATED_3_0
#   ifndef OPENSSL_NO_DSA
OSSL_DEPRECATEDIN_3_0 DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSA_PUBKEY_fp(FILE *fp, const DSA *dsa);
OSSL_DEPRECATEDIN_3_0 DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSAPrivateKey_fp(FILE *fp, const DSA *dsa);
#   endif
#  endif
#  ifndef OPENSSL_NO_DEPRECATED_3_0
#   ifndef OPENSSL_NO_EC
OSSL_DEPRECATEDIN_3_0 EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey);
OSSL_DEPRECATEDIN_3_0 int i2d_EC_PUBKEY_fp(FILE *fp, const EC_KEY *eckey);
OSSL_DEPRECATEDIN_3_0 EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey);
OSSL_DEPRECATEDIN_3_0 int i2d_ECPrivateKey_fp(FILE *fp, const EC_KEY *eckey);
#   endif /* OPENSSL_NO_EC */
#  endif /* OPENSSL_NO_DEPRECATED_3_0 */
X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG **p8);
int i2d_PKCS8_fp(FILE *fp, const X509_SIG *p8);
X509_PUBKEY *d2i_X509_PUBKEY_fp(FILE *fp, X509_PUBKEY **xpk);
int i2d_X509_PUBKEY_fp(FILE *fp, const X509_PUBKEY *xpk);
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
                                                PKCS8_PRIV_KEY_INFO **p8inf);
int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, const PKCS8_PRIV_KEY_INFO *p8inf);
int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, const EVP_PKEY *key);
int i2d_PrivateKey_fp(FILE *fp, const EVP_PKEY *pkey);
EVP_PKEY *d2i_PrivateKey_ex_fp(FILE *fp, EVP_PKEY **a, OSSL_LIB_CTX *libctx,
                               const char *propq);
EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a);
int i2d_PUBKEY_fp(FILE *fp, const EVP_PKEY *pkey);
EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);
# endif

X509 *d2i_X509_bio(BIO *bp, X509 **x509);
int i2d_X509_bio(BIO *bp, const X509 *x509);
X509_CRL *d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl);
int i2d_X509_CRL_bio(BIO *bp, const X509_CRL *crl);
X509_REQ *d2i_X509_REQ_bio(BIO *bp, X509_REQ **req);
int i2d_X509_REQ_bio(BIO *bp, const X509_REQ *req);
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPrivateKey_bio(BIO *bp, const RSA *rsa);
OSSL_DEPRECATEDIN_3_0 RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSAPublicKey_bio(BIO *bp, const RSA *rsa);
OSSL_DEPRECATEDIN_3_0 RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa);
OSSL_DEPRECATEDIN_3_0 int i2d_RSA_PUBKEY_bio(BIO *bp, const RSA *rsa);
#  endif
#  ifndef OPENSSL_NO_DEPRECATED_3_0
#   ifndef OPENSSL_NO_DSA
OSSL_DEPRECATEDIN_3_0 DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSA_PUBKEY_bio(BIO *bp, const DSA *dsa);
OSSL_DEPRECATEDIN_3_0 DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa);
OSSL_DEPRECATEDIN_3_0 int i2d_DSAPrivateKey_bio(BIO *bp, const DSA *dsa);
#   endif
#  endif

#  ifndef OPENSSL_NO_DEPRECATED_3_0
#   ifndef OPENSSL_NO_EC
OSSL_DEPRECATEDIN_3_0 EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey);
OSSL_DEPRECATEDIN_3_0 int i2d_EC_PUBKEY_bio(BIO *bp, const EC_KEY *eckey);
OSSL_DEPRECATEDIN_3_0 EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey);
OSSL_DEPRECATEDIN_3_0 int i2d_ECPrivateKey_bio(BIO *bp, const EC_KEY *eckey);
#   endif /* OPENSSL_NO_EC */
#  endif /* OPENSSL_NO_DEPRECATED_3_0 */

X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG **p8);
int i2d_PKCS8_bio(BIO *bp, const X509_SIG *p8);
X509_PUBKEY *d2i_X509_PUBKEY_bio(BIO *bp, X509_PUBKEY **xpk);
int i2d_X509_PUBKEY_bio(BIO *bp, const X509_PUBKEY *xpk);
PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
                                                 PKCS8_PRIV_KEY_INFO **p8inf);
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, const PKCS8_PRIV_KEY_INFO *p8inf);
int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, const EVP_PKEY *key);
int i2d_PrivateKey_bio(BIO *bp, const EVP_PKEY *pkey);
EVP_PKEY *d2i_PrivateKey_ex_bio(BIO *bp, EVP_PKEY **a, OSSL_LIB_CTX *libctx,
                                const char *propq);
EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);
int i2d_PUBKEY_bio(BIO *bp, const EVP_PKEY *pkey);
EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);

DECLARE_ASN1_DUP_FUNCTION(X509)
DECLARE_ASN1_DUP_FUNCTION(X509_ALGOR)
DECLARE_ASN1_DUP_FUNCTION(X509_ATTRIBUTE)
DECLARE_ASN1_DUP_FUNCTION(X509_CRL)
DECLARE_ASN1_DUP_FUNCTION(X509_EXTENSION)
DECLARE_ASN1_DUP_FUNCTION(X509_PUBKEY)
DECLARE_ASN1_DUP_FUNCTION(X509_REQ)
DECLARE_ASN1_DUP_FUNCTION(X509_REVOKED)
int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype,
                    void *pval);
void X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
                     const void **ppval, const X509_ALGOR *algor);
void X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md);
int X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b);
int X509_ALGOR_copy(X509_ALGOR *dest, const X509_ALGOR *src);

DECLARE_ASN1_DUP_FUNCTION(X509_NAME)
DECLARE_ASN1_DUP_FUNCTION(X509_NAME_ENTRY)

int X509_cmp_time(const ASN1_TIME *s, time_t *t);
int X509_cmp_current_time(const ASN1_TIME *s);
int X509_cmp_timeframe(const X509_VERIFY_PARAM *vpm,
                       const ASN1_TIME *start, const ASN1_TIME *end);
ASN1_TIME *X509_time_adj(ASN1_TIME *s, long adj, time_t *t);
ASN1_TIME *X509_time_adj_ex(ASN1_TIME *s,
                            int offset_day, long offset_sec, time_t *t);
ASN1_TIME *X509_gmtime_adj(ASN1_TIME *s, long adj);

const char *X509_get_default_cert_area(void);
const char *X509_get_default_cert_dir(void);
const char *X509_get_default_cert_file(void);
const char *X509_get_default_cert_dir_env(void);
const char *X509_get_default_cert_file_env(void);
const char *X509_get_default_private_dir(void);

X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
X509 *X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey);

DECLARE_ASN1_FUNCTIONS(X509_ALGOR)
DECLARE_ASN1_ENCODE_FUNCTIONS(X509_ALGORS, X509_ALGORS, X509_ALGORS)
DECLARE_ASN1_FUNCTIONS(X509_VAL)

DECLARE_ASN1_FUNCTIONS(X509_PUBKEY)

X509_PUBKEY *X509_PUBKEY_new_ex(OSSL_LIB_CTX *libctx, const char *propq);
int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey);
EVP_PKEY *X509_PUBKEY_get0(const X509_PUBKEY *key);
EVP_PKEY *X509_PUBKEY_get(const X509_PUBKEY *key);
int X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain);
long X509_get_pathlen(X509 *x);
DECLARE_ASN1_ENCODE_FUNCTIONS_only(EVP_PKEY, PUBKEY)
EVP_PKEY *d2i_PUBKEY_ex(EVP_PKEY **a, const unsigned char **pp, long length,
                        OSSL_LIB_CTX *libctx, const char *propq);
# ifndef OPENSSL_NO_DEPRECATED_3_0
DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(OSSL_DEPRECATEDIN_3_0,RSA, RSA_PUBKEY)
# endif
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  ifndef OPENSSL_NO_DSA
DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(OSSL_DEPRECATEDIN_3_0,DSA, DSA_PUBKEY)
#  endif
# endif
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  ifndef OPENSSL_NO_EC
DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(OSSL_DEPRECATEDIN_3_0, EC_KEY, EC_PUBKEY)
#  endif
# endif

DECLARE_ASN1_FUNCTIONS(X509_SIG)
void X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg,
                   const ASN1_OCTET_STRING **pdigest);
void X509_SIG_getm(X509_SIG *sig, X509_ALGOR **palg,
                   ASN1_OCTET_STRING **pdigest);

DECLARE_ASN1_FUNCTIONS(X509_REQ_INFO)
DECLARE_ASN1_FUNCTIONS(X509_REQ)
X509_REQ *X509_REQ_new_ex(OSSL_LIB_CTX *libctx, const char *propq);

DECLARE_ASN1_FUNCTIONS(X509_ATTRIBUTE)
X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value);

DECLARE_ASN1_FUNCTIONS(X509_EXTENSION)
DECLARE_ASN1_ENCODE_FUNCTIONS(X509_EXTENSIONS, X509_EXTENSIONS, X509_EXTENSIONS)

DECLARE_ASN1_FUNCTIONS(X509_NAME_ENTRY)

DECLARE_ASN1_FUNCTIONS(X509_NAME)

int X509_NAME_set(X509_NAME **xn, const X509_NAME *name);

DECLARE_ASN1_FUNCTIONS(X509_CINF)
DECLARE_ASN1_FUNCTIONS(X509)
X509 *X509_new_ex(OSSL_LIB_CTX *libctx, const char *propq);
DECLARE_ASN1_FUNCTIONS(X509_CERT_AUX)

#define X509_get_ex_new_index(l, p, newf, dupf, freef) \
    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, l, p, newf, dupf, freef)
int X509_set_ex_data(X509 *r, int idx, void *arg);
void *X509_get_ex_data(const X509 *r, int idx);
DECLARE_ASN1_ENCODE_FUNCTIONS_only(X509,X509_AUX)

int i2d_re_X509_tbs(X509 *x, unsigned char **pp);

int X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid,
                      int *secbits, uint32_t *flags);
void X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,
                       int secbits, uint32_t flags);

int X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits,
                            uint32_t *flags);

void X509_get0_signature(const ASN1_BIT_STRING **psig,
                         const X509_ALGOR **palg, const X509 *x);
int X509_get_signature_nid(const X509 *x);

void X509_set0_distinguishing_id(X509 *x, ASN1_OCTET_STRING *d_id);
ASN1_OCTET_STRING *X509_get0_distinguishing_id(X509 *x);
void X509_REQ_set0_distinguishing_id(X509_REQ *x, ASN1_OCTET_STRING *d_id);
ASN1_OCTET_STRING *X509_REQ_get0_distinguishing_id(X509_REQ *x);

int X509_alias_set1(X509 *x, const unsigned char *name, int len);
int X509_keyid_set1(X509 *x, const unsigned char *id, int len);
unsigned char *X509_alias_get0(X509 *x, int *len);
unsigned char *X509_keyid_get0(X509 *x, int *len);

DECLARE_ASN1_FUNCTIONS(X509_REVOKED)
DECLARE_ASN1_FUNCTIONS(X509_CRL_INFO)
DECLARE_ASN1_FUNCTIONS(X509_CRL)
X509_CRL *X509_CRL_new_ex(OSSL_LIB_CTX *libctx, const char *propq);

int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);
int X509_CRL_get0_by_serial(X509_CRL *crl,
                            X509_REVOKED **ret, const ASN1_INTEGER *serial);
int X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x);

X509_PKEY *X509_PKEY_new(void);
void X509_PKEY_free(X509_PKEY *a);

DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKI)
DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKAC)
DECLARE_ASN1_FUNCTIONS(NETSCAPE_CERT_SEQUENCE)

X509_INFO *X509_INFO_new(void);
void X509_INFO_free(X509_INFO *a);
char *X509_NAME_oneline(const X509_NAME *a, char *buf, int size);

#ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0
int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1,
                ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey);
OSSL_DEPRECATEDIN_3_0
int ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
                unsigned char *md, unsigned int *len);
OSSL_DEPRECATEDIN_3_0
int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2,
              ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey,
              const EVP_MD *type);
#endif
int ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *data,
                     unsigned char *md, unsigned int *len);
int ASN1_item_verify(const ASN1_ITEM *it, const X509_ALGOR *alg,
                     const ASN1_BIT_STRING *signature, const void *data,
                     EVP_PKEY *pkey);
int ASN1_item_verify_ctx(const ASN1_ITEM *it, const X509_ALGOR *alg,
                         const ASN1_BIT_STRING *signature, const void *data,
                         EVP_MD_CTX *ctx);
int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2,
                   ASN1_BIT_STRING *signature, const void *data,
                   EVP_PKEY *pkey, const EVP_MD *md);
int ASN1_item_sign_ctx(const ASN1_ITEM *it, X509_ALGOR *algor1,
                       X509_ALGOR *algor2, ASN1_BIT_STRING *signature,
                       const void *data, EVP_MD_CTX *ctx);

#define X509_VERSION_1 0
#define X509_VERSION_2 1
#define X509_VERSION_3 2

long X509_get_version(const X509 *x);
int X509_set_version(X509 *x, long version);
int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial);
ASN1_INTEGER *X509_get_serialNumber(X509 *x);
const ASN1_INTEGER *X509_get0_serialNumber(const X509 *x);
int X509_set_issuer_name(X509 *x, const X509_NAME *name);
X509_NAME *X509_get_issuer_name(const X509 *a);
int X509_set_subject_name(X509 *x, const X509_NAME *name);
X509_NAME *X509_get_subject_name(const X509 *a);
const ASN1_TIME * X509_get0_notBefore(const X509 *x);
ASN1_TIME *X509_getm_notBefore(const X509 *x);
int X509_set1_notBefore(X509 *x, const ASN1_TIME *tm);
const ASN1_TIME *X509_get0_notAfter(const X509 *x);
ASN1_TIME *X509_getm_notAfter(const X509 *x);
int X509_set1_notAfter(X509 *x, const ASN1_TIME *tm);
int X509_set_pubkey(X509 *x, EVP_PKEY *pkey);
int X509_up_ref(X509 *x);
int X509_get_signature_type(const X509 *x);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define X509_get_notBefore X509_getm_notBefore
#  define X509_get_notAfter X509_getm_notAfter
#  define X509_set_notBefore X509_set1_notBefore
#  define X509_set_notAfter X509_set1_notAfter
#endif


/*
 * This one is only used so that a binary form can output, as in
 * i2d_X509_PUBKEY(X509_get_X509_PUBKEY(x), &buf)
 */
X509_PUBKEY *X509_get_X509_PUBKEY(const X509 *x);
const STACK_OF(X509_EXTENSION) *X509_get0_extensions(const X509 *x);
void X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid,
                    const ASN1_BIT_STRING **psuid);
const X509_ALGOR *X509_get0_tbs_sigalg(const X509 *x);

EVP_PKEY *X509_get0_pubkey(const X509 *x);
EVP_PKEY *X509_get_pubkey(X509 *x);
ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x);

#define X509_REQ_VERSION_1 0

long X509_REQ_get_version(const X509_REQ *req);
int X509_REQ_set_version(X509_REQ *x, long version);
X509_NAME *X509_REQ_get_subject_name(const X509_REQ *req);
int X509_REQ_set_subject_name(X509_REQ *req, const X509_NAME *name);
void X509_REQ_get0_signature(const X509_REQ *req, const ASN1_BIT_STRING **psig,
                             const X509_ALGOR **palg);
void X509_REQ_set0_signature(X509_REQ *req, ASN1_BIT_STRING *psig);
int X509_REQ_set1_signature_algo(X509_REQ *req, X509_ALGOR *palg);
int X509_REQ_get_signature_nid(const X509_REQ *req);
int i2d_re_X509_REQ_tbs(X509_REQ *req, unsigned char **pp);
int X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey);
EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req);
EVP_PKEY *X509_REQ_get0_pubkey(X509_REQ *req);
X509_PUBKEY *X509_REQ_get_X509_PUBKEY(X509_REQ *req);
int X509_REQ_extension_nid(int nid);
int *X509_REQ_get_extension_nids(void);
void X509_REQ_set_extension_nids(int *nids);
STACK_OF(X509_EXTENSION) *X509_REQ_get_extensions(X509_REQ *req);
int X509_REQ_add_extensions_nid(X509_REQ *req,
                                const STACK_OF(X509_EXTENSION) *exts, int nid);
int X509_REQ_add_extensions(X509_REQ *req, const STACK_OF(X509_EXTENSION) *ext);
int X509_REQ_get_attr_count(const X509_REQ *req);
int X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos);
int X509_REQ_get_attr_by_OBJ(const X509_REQ *req, const ASN1_OBJECT *obj,
                             int lastpos);
X509_ATTRIBUTE *X509_REQ_get_attr(const X509_REQ *req, int loc);
X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc);
int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr);
int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
                              const ASN1_OBJECT *obj, int type,
                              const unsigned char *bytes, int len);
int X509_REQ_add1_attr_by_NID(X509_REQ *req,
                              int nid, int type,
                              const unsigned char *bytes, int len);
int X509_REQ_add1_attr_by_txt(X509_REQ *req,
                              const char *attrname, int type,
                              const unsigned char *bytes, int len);

#define X509_CRL_VERSION_1 0
#define X509_CRL_VERSION_2 1

int X509_CRL_set_version(X509_CRL *x, long version);
int X509_CRL_set_issuer_name(X509_CRL *x, const X509_NAME *name);
int X509_CRL_set1_lastUpdate(X509_CRL *x, const ASN1_TIME *tm);
int X509_CRL_set1_nextUpdate(X509_CRL *x, const ASN1_TIME *tm);
int X509_CRL_sort(X509_CRL *crl);
int X509_CRL_up_ref(X509_CRL *crl);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define X509_CRL_set_lastUpdate X509_CRL_set1_lastUpdate
#  define X509_CRL_set_nextUpdate X509_CRL_set1_nextUpdate
#endif

long X509_CRL_get_version(const X509_CRL *crl);
const ASN1_TIME *X509_CRL_get0_lastUpdate(const X509_CRL *crl);
const ASN1_TIME *X509_CRL_get0_nextUpdate(const X509_CRL *crl);
#ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 ASN1_TIME *X509_CRL_get_lastUpdate(X509_CRL *crl);
OSSL_DEPRECATEDIN_1_1_0 ASN1_TIME *X509_CRL_get_nextUpdate(X509_CRL *crl);
#endif
X509_NAME *X509_CRL_get_issuer(const X509_CRL *crl);
const STACK_OF(X509_EXTENSION) *X509_CRL_get0_extensions(const X509_CRL *crl);
STACK_OF(X509_REVOKED) *X509_CRL_get_REVOKED(X509_CRL *crl);
void X509_CRL_get0_signature(const X509_CRL *crl, const ASN1_BIT_STRING **psig,
                             const X509_ALGOR **palg);
int X509_CRL_get_signature_nid(const X509_CRL *crl);
int i2d_re_X509_CRL_tbs(X509_CRL *req, unsigned char **pp);

const ASN1_INTEGER *X509_REVOKED_get0_serialNumber(const X509_REVOKED *x);
int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial);
const ASN1_TIME *X509_REVOKED_get0_revocationDate(const X509_REVOKED *x);
int X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);
const STACK_OF(X509_EXTENSION) *
X509_REVOKED_get0_extensions(const X509_REVOKED *r);

X509_CRL *X509_CRL_diff(X509_CRL *base, X509_CRL *newer,
                        EVP_PKEY *skey, const EVP_MD *md, unsigned int flags);

int X509_REQ_check_private_key(X509_REQ *x509, EVP_PKEY *pkey);

int X509_check_private_key(const X509 *x509, const EVP_PKEY *pkey);
int X509_chain_check_suiteb(int *perror_depth,
                            X509 *x, STACK_OF(X509) *chain,
                            unsigned long flags);
int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags);
STACK_OF(X509) *X509_chain_up_ref(STACK_OF(X509) *chain);

int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b);
unsigned long X509_issuer_and_serial_hash(X509 *a);

int X509_issuer_name_cmp(const X509 *a, const X509 *b);
unsigned long X509_issuer_name_hash(X509 *a);

int X509_subject_name_cmp(const X509 *a, const X509 *b);
unsigned long X509_subject_name_hash(X509 *x);

# ifndef OPENSSL_NO_MD5
unsigned long X509_issuer_name_hash_old(X509 *a);
unsigned long X509_subject_name_hash_old(X509 *x);
# endif

# define X509_ADD_FLAG_DEFAULT  0
# define X509_ADD_FLAG_UP_REF   0x1
# define X509_ADD_FLAG_PREPEND  0x2
# define X509_ADD_FLAG_NO_DUP   0x4
# define X509_ADD_FLAG_NO_SS    0x8
int X509_add_cert(STACK_OF(X509) *sk, X509 *cert, int flags);
int X509_add_certs(STACK_OF(X509) *sk, STACK_OF(X509) *certs, int flags);

int X509_cmp(const X509 *a, const X509 *b);
int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);
#ifndef OPENSSL_NO_DEPRECATED_3_0
# define X509_NAME_hash(x) X509_NAME_hash_ex(x, NULL, NULL, NULL)
OSSL_DEPRECATEDIN_3_0 int X509_certificate_type(const X509 *x,
                                                const EVP_PKEY *pubkey);
#endif
unsigned long X509_NAME_hash_ex(const X509_NAME *x, OSSL_LIB_CTX *libctx,
                                const char *propq, int *ok);
unsigned long X509_NAME_hash_old(const X509_NAME *x);

int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);
int X509_CRL_match(const X509_CRL *a, const X509_CRL *b);
int X509_aux_print(BIO *out, X509 *x, int indent);
# ifndef OPENSSL_NO_STDIO
int X509_print_ex_fp(FILE *bp, X509 *x, unsigned long nmflag,
                     unsigned long cflag);
int X509_print_fp(FILE *bp, X509 *x);
int X509_CRL_print_fp(FILE *bp, X509_CRL *x);
int X509_REQ_print_fp(FILE *bp, X509_REQ *req);
int X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
                          unsigned long flags);
# endif

int X509_NAME_print(BIO *bp, const X509_NAME *name, int obase);
int X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
                       unsigned long flags);
int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflag,
                  unsigned long cflag);
int X509_print(BIO *bp, X509 *x);
int X509_ocspid_print(BIO *bp, X509 *x);
int X509_CRL_print_ex(BIO *out, X509_CRL *x, unsigned long nmflag);
int X509_CRL_print(BIO *bp, X509_CRL *x);
int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflag,
                      unsigned long cflag);
int X509_REQ_print(BIO *bp, X509_REQ *req);

int X509_NAME_entry_count(const X509_NAME *name);
int X509_NAME_get_text_by_NID(const X509_NAME *name, int nid,
                              char *buf, int len);
int X509_NAME_get_text_by_OBJ(const X509_NAME *name, const ASN1_OBJECT *obj,
                              char *buf, int len);

/*
 * NOTE: you should be passing -1, not 0 as lastpos. The functions that use
 * lastpos, search after that position on.
 */
int X509_NAME_get_index_by_NID(const X509_NAME *name, int nid, int lastpos);
int X509_NAME_get_index_by_OBJ(const X509_NAME *name, const ASN1_OBJECT *obj,
                               int lastpos);
X509_NAME_ENTRY *X509_NAME_get_entry(const X509_NAME *name, int loc);
X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc);
int X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne,
                        int loc, int set);
int X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type,
                               const unsigned char *bytes, int len, int loc,
                               int set);
int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
                               const unsigned char *bytes, int len, int loc,
                               int set);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
                                               const char *field, int type,
                                               const unsigned char *bytes,
                                               int len);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
                                               int type,
                                               const unsigned char *bytes,
                                               int len);
int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
                               const unsigned char *bytes, int len, int loc,
                               int set);
X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
                                               const ASN1_OBJECT *obj, int type,
                                               const unsigned char *bytes,
                                               int len);
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj);
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
                             const unsigned char *bytes, int len);
ASN1_OBJECT *X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY *ne);
ASN1_STRING * X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne);
int X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne);

int X509_NAME_get0_der(const X509_NAME *nm, const unsigned char **pder,
                       size_t *pderlen);

int X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x);
int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x,
                          int nid, int lastpos);
int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *x,
                          const ASN1_OBJECT *obj, int lastpos);
int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *x,
                               int crit, int lastpos);
X509_EXTENSION *X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc);
X509_EXTENSION *X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc);
STACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
                                         X509_EXTENSION *ex, int loc);

int X509_get_ext_count(const X509 *x);
int X509_get_ext_by_NID(const X509 *x, int nid, int lastpos);
int X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj, int lastpos);
int X509_get_ext_by_critical(const X509 *x, int crit, int lastpos);
X509_EXTENSION *X509_get_ext(const X509 *x, int loc);
X509_EXTENSION *X509_delete_ext(X509 *x, int loc);
int X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);
void *X509_get_ext_d2i(const X509 *x, int nid, int *crit, int *idx);
int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
                      unsigned long flags);

int X509_CRL_get_ext_count(const X509_CRL *x);
int X509_CRL_get_ext_by_NID(const X509_CRL *x, int nid, int lastpos);
int X509_CRL_get_ext_by_OBJ(const X509_CRL *x, const ASN1_OBJECT *obj,
                            int lastpos);
int X509_CRL_get_ext_by_critical(const X509_CRL *x, int crit, int lastpos);
X509_EXTENSION *X509_CRL_get_ext(const X509_CRL *x, int loc);
X509_EXTENSION *X509_CRL_delete_ext(X509_CRL *x, int loc);
int X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc);
void *X509_CRL_get_ext_d2i(const X509_CRL *x, int nid, int *crit, int *idx);
int X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit,
                          unsigned long flags);

int X509_REVOKED_get_ext_count(const X509_REVOKED *x);
int X509_REVOKED_get_ext_by_NID(const X509_REVOKED *x, int nid, int lastpos);
int X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED *x, const ASN1_OBJECT *obj,
                                int lastpos);
int X509_REVOKED_get_ext_by_critical(const X509_REVOKED *x, int crit,
                                     int lastpos);
X509_EXTENSION *X509_REVOKED_get_ext(const X509_REVOKED *x, int loc);
X509_EXTENSION *X509_REVOKED_delete_ext(X509_REVOKED *x, int loc);
int X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc);
void *X509_REVOKED_get_ext_d2i(const X509_REVOKED *x, int nid, int *crit,
                               int *idx);
int X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit,
                              unsigned long flags);

X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex,
                                             int nid, int crit,
                                             ASN1_OCTET_STRING *data);
X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
                                             const ASN1_OBJECT *obj, int crit,
                                             ASN1_OCTET_STRING *data);
int X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj);
int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit);
int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data);
ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex);
ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ne);
int X509_EXTENSION_get_critical(const X509_EXTENSION *ex);

int X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x);
int X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
                           int lastpos);
int X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk,
                           const ASN1_OBJECT *obj, int lastpos);
X509_ATTRIBUTE *X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc);
X509_ATTRIBUTE *X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc);
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x,
                                           X509_ATTRIBUTE *attr);
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE)
                                                  **x, const ASN1_OBJECT *obj,
                                                  int type,
                                                  const unsigned char *bytes,
                                                  int len);
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE)
                                                  **x, int nid, int type,
                                                  const unsigned char *bytes,
                                                  int len);
STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE)
                                                  **x, const char *attrname,
                                                  int type,
                                                  const unsigned char *bytes,
                                                  int len);
void *X509at_get0_data_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *x,
                              const ASN1_OBJECT *obj, int lastpos, int type);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
                                             int atrtype, const void *data,
                                             int len);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
                                             const ASN1_OBJECT *obj,
                                             int atrtype, const void *data,
                                             int len);
X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
                                             const char *atrname, int type,
                                             const unsigned char *bytes,
                                             int len);
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj);
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype,
                             const void *data, int len);
void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype,
                               void *data);
int X509_ATTRIBUTE_count(const X509_ATTRIBUTE *attr);
ASN1_OBJECT *X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr);
ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx);

int EVP_PKEY_get_attr_count(const EVP_PKEY *key);
int EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos);
int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, const ASN1_OBJECT *obj,
                             int lastpos);
X509_ATTRIBUTE *EVP_PKEY_get_attr(const EVP_PKEY *key, int loc);
X509_ATTRIBUTE *EVP_PKEY_delete_attr(EVP_PKEY *key, int loc);
int EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr);
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,
                              const ASN1_OBJECT *obj, int type,
                              const unsigned char *bytes, int len);
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,
                              int nid, int type,
                              const unsigned char *bytes, int len);
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key,
                              const char *attrname, int type,
                              const unsigned char *bytes, int len);

/* lookup a cert from a X509 STACK */
X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, const X509_NAME *name,
                                     const ASN1_INTEGER *serial);
X509 *X509_find_by_subject(STACK_OF(X509) *sk, const X509_NAME *name);

DECLARE_ASN1_FUNCTIONS(PBEPARAM)
DECLARE_ASN1_FUNCTIONS(PBE2PARAM)
DECLARE_ASN1_FUNCTIONS(PBKDF2PARAM)
#ifndef OPENSSL_NO_SCRYPT
DECLARE_ASN1_FUNCTIONS(SCRYPT_PARAMS)
#endif

int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
                         const unsigned char *salt, int saltlen);
int PKCS5_pbe_set0_algor_ex(X509_ALGOR *algor, int alg, int iter,
                            const unsigned char *salt, int saltlen,
                            OSSL_LIB_CTX *libctx);

X509_ALGOR *PKCS5_pbe_set(int alg, int iter,
                          const unsigned char *salt, int saltlen);
X509_ALGOR *PKCS5_pbe_set_ex(int alg, int iter,
                             const unsigned char *salt, int saltlen,
                             OSSL_LIB_CTX *libctx);

X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
                           unsigned char *salt, int saltlen);
X509_ALGOR *PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
                              unsigned char *salt, int saltlen,
                              unsigned char *aiv, int prf_nid);
X509_ALGOR *PKCS5_pbe2_set_iv_ex(const EVP_CIPHE