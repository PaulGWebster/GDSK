,0x3b,0xf1,0x8c,0x7d,0x56,0x84,0x5a,0x04,0x08,0x30,0xf7,0xf6,0x52,0x15,0xba,0xd6,0x7a,0x39,0x8c,0x5a,0xbf,0xeb,0x02,0x6d,0x31,0x30,0x92,0xbc,0xe2,0x07,0x21,0x16,0x96,0x70,0x66,0x00,0xe0,0x04,0xc5,0xa8,0xe4,0x08,0x6d,0x08,0x69,0x35,0xe2,0xb1,0x83,0x03,0x37,0xca,0xff
db	0x06,0x37,0x80,0xd5,0x1a,0xc5,0x31,0xfc,0x9a,0xb0,0x8a,0x4b,0x58,0xf3,0x00,0x4e,0xa4,0xfe,0x9e,0xe0,0x60,0xc7,0x3d,0x2c,0x52,0xb5,0x39,0xf0,0xa4,0x88,0x39,0x37,0xa5,0x26,0x8a,0xa3,0xe6,0x31,0xce,0xf3,0xa1,0x54,0x73,0xe7,0x69,0x38,0xef,0xa2,0xab,0x52,0x50,0x1a,0x45,0xcc,0x29,0x9c,0xb6,0xf4,0xde,0xc2,0xfe,0x7a,0x26,0xf7
db	0x7a,0x6e,0x07,0xb6,0xd8,0x3f,0x77,0x60,0x35,0xae,0x6a,0x90,0xd6,0xb8,0x37,0xed,0x73,0x59,0x54,0xd9,0x0c,0x87,0x0e,0x81,0xef,0x69,0xc7,0xd4,0x8f,0x00,0x74,0x57,0x12,0xcf,0xa1,0x76,0xe8,0x45,0xf5,0x9a,0x4f,0xe2,0x5d,0x8a,0x89,0xb1,0x8b,0xea,0x9c,0x0a,0x1e,0x00,0x61,0x3b,0x66,0xbd,0xb5,0xd6,0xff,0xa3,0xff,0x52,0xc2,0x35
db	0x81,0x05,0x08,0x2b,0xf9,0x52,0xda,0x74,0xd1,0x76,0x13,0xba,0x28,0x4c,0xb1,0xb1,0x82,0x5b,0x4e,0x79,0x39,0x22,0xf9,0x96,0x91,0x07,0x4f,0xf9,0xf2,0x25,0x25,0xb1,0x3e,0xda,0x07,0x5c,0x01,0x7b,0xfa,0x3e,0x95,0x92,0x1d,0xf8,0x44,0x06,0xc1,0xed,0x64,0x74,0x14,0x84,0x25,0xee,0x75,0xaf,0xe3,0x7c,0xd3,0xbe,0x7a,0x51,0x6b,0x80
db	0x20,0x43,0x20,0x10,0x5f,0xf5,0xfc,0xd5,0xe8,0x06,0x43,0xad,0x10,0x6b,0x67,0x48,0xca,0xca,0x6e,0x3e,0x1c,0xdf,0x8f,0x7a,0x65,0xc8,0x5d,0xba,0x3b,0x67,0xeb,0x1f,0xc4,0x37,0xad,0xef,0x73,0x9e,0x18,0x8e,0xc1,0x99,0xaf,0x75,0xd3,0x91,0x73,0xc3,0x3a,0xb2,0xfe,0xff,0x30,0x81,0xc4,0x4f,0x37,0x37,0x23,0x96,0x17,0xf1,0xa2,0x9b
db	0x55,0x6e,0xd6,0xb3,0xc4,0x98,0xa3,0x32,0xb6,0xff,0x86,0x87,0x77,0xf4,0xad,0x16,0x3e,0xf0,0x24,0x01,0xb4,0x8e,0x1e,0x0f,0x10,0xa4,0x2e,0xe4,0x79,0xe6,0x88,0xe7,0x09,0x58,0x5e,0x97,0xad,0x0d,0x72,0x05,0xbf,0x2f,0x3f,0x99,0xee,0x8a,0x84,0xc3,0x62,0x43,0x52,0x6d,0xab,0x66,0xcf,0x9f,0x4e,0xf2,0x0d,0x13,0x15,0x49,0x84,0x5e
db	0x6c,0x8d,0x2d,0xef,0x53,0x16,0xa0,0x63,0xbe,0x05,0xb8,0x9b,0x23,0xca,0xca,0xb8,0xdd,0xbc,0x96,0x68,0x35,0x43,0x63,0x30,0x8e,0xaf,0x53,0x98,0xe2,0x76,0xe8,0x89,0x00,0x29,0x11,0x70,0xd5,0x94,0xbd,0x78,0xff,0xf6,0x88,0x4a,0x3d,0x99,0xd9,0x7e,0xdf,0xa8,0x33,0x92,0xa2,0xc0,0x32,0x42,0x73,0x08,0xd4,0x55,0x5d,0x18,0x93,0xca
db	0x7e,0x33,0xe3,0x51,0xc7,0xb7,0x24,0x62,0x69,0xf4,0xab,0x36,0xe3,0x22,0x10,0x9b,0xe0,0xbd,0x48,0x65,0x30,0x9c,0xfe,0xeb,0x3f,0x7f,0x22,0x67,0xcc,0x87,0x5a,0x71,0xb0,0xd1,0x19,0x82,0x1c,0xb2,0xf1,0x73,0xd2,0xd6,0x3f,0xef,0xe3,0x2f,0x25,0xf3,0x8b,0x21,0x4e,0xbf,0x0e,0xc1,0xd2,0x8a,0xbb,0x04,0xde,0xcf,0xd1,0x77,0xba,0xaa
db	0xc7,0x41,0x68,0xce,0xc4,0x64,0xf9,0x3a,0x2f,0x1c,0x0b,0x22,0xf8,0x60,0x09,0x76,0x31,0x88,0x62,0x3a,0xf3,0x49,0xe6,0xda,0x4b,0xd3,0xf3,0x35,0xaa,0x56,0x4c,0x2f,0x7f,0x03,0x3e,0xf8,0xcb,0x5e,0xed,0x37,0xa1,0x29,0xe8,0x20,0xf5,0x4a,0x32,0x73,0x30,0xfd,0xd1,0xf6,0xb4,0xa1,0x30,0x87,0xcb,0x21,0x63,0xf5,0x3a,0xad,0x05,0x1a
db	0x34,0xf5,0x32,0xf6,0x02,0xf3,0x10,0x52,0xfd,0x86,0x37,0x1f,0x5d,0xe4,0x2e,0x31,0xcb,0xb8,0x4c,0xeb,0xdd,0xea,0x01,0x0d,0x94,0x13,0xa8,0x8f,0xf0,0x52,0x4e,0x0d,0x4f,0xd1,0x24,0xeb,0x0f,0x2b,0xb1,0xaa,0xc5,0xc8,0x52,0xb9,0xbe,0x21,0x48,0x2a,0x53,0x98,0xe4,0x00,0x72,0x64,0xdb,0x44,0x48,0x36,0x60,0xe7,0x81,0xdc,0x25,0x85
db	0x4d,0xaf,0xa8,0x0d,0xfb,0x07,0x76,0x4f,0x6a,0x30,0x3c,0x7c,0x3b,0x36,0xa9,0xf8,0xae,0x81,0x03,0xe9,0x19,0xdf,0xdb,0xd9,0x7f,0x59,0xe0,0xd7,0x50,0x14,0x9f,0x67,0x3d,0xc7,0xdf,0xa8,0x44,0x86,0x29,0x81,0x65,0x44,0x9e,0x37,0x27,0xdd,0x2f,0x33,0x59,0xf7,0xaa,0x17,0x34,0x8c,0x1c,0xa7,0x8e,0x06,0x46,0xf1,0x43,0x87,0xa9,0xb7
db	0x85,0xec,0x92,0x0d,0xdd,0x78,0x55,0x99,0xfb,0x1c,0x66,0x85,0x0d,0x59,0x31,0x00,0xbc,0xd9,0x9b,0xbb,0xfb,0xfc,0xb2,0x36,0x3c,0x34,0x8f,0x4a,0xb6,0x74,0x9c,0x32,0x6f,0x69,0x6c,0x3e,0x68,0x7e,0xec,0xeb,0x58,0x6a,0xf5,0xa2,0xbb,0x04,0x68,0xdb,0x8c,0xf0,0x04,0xba,0xf7,0xf7,0x50,0xd0,0x60,0xba,0x45,0x73,0x0f,0x2c,0x2f,0x97
db	0x58,0xcc,0xa2,0xbe,0xfe,0x5e,0xf9,0x44,0x03,0x8b,0x99,0x56,0xb0,0x4f,0xe1,0xd0,0xa5,0x9f,0xd1,0xfc,0x95,0x44,0x4b,0x01,0x24,0xc0,0x4c,0x91,0xc1,0xb5,0x99,0xe7,0x5f,0x2f,0xcf,0x5d,0x4f,0x64,0x6e,0x54,0x51,0x0c,0x35,0x5f,0xa8,0x7b,0x27,0xa0,0x7d,0xb1,0x90,0xc2,0xdd,0x50,0xef,0x09,0x6f,0xed,0x25,0x6b,0xf5,0x6f,0xc1,0x97
db	0xea,0xd5,0x49,0xf5,0x40,0x60,0xc3,0xbb,0x0d,0x82,0x15,0xa5,0xf7,0xfe,0xa1,0x20,0x13,0x9e,0xbb,0x43,0x58,0xba,0xd2,0xe8,0x89,0xaa,0xfc,0xe0,0x47,0x6b,0xac,0x91,0x8b,0xeb,0x4f,0xf5,0xda,0xf5,0xc8,0x11,0x64,0x7c,0x8d,0x43,0x92,0xf2,0x84,0xeb,0xfb,0x5c,0x1b,0x6b,0x68,0x8e,0x3c,0x66,0xb2,0xd1,0x8e,0x67,0x44,0xbf,0x69,0x3b
db	0xb9,0x41,0x78,0x8d,0xc8,0x7b,0x81,0x61,0x70,0x6e,0xe2,0xfc,0xd2,0x96,0x31,0x31,0x2f,0x27,0x90,0xf2,0xc4,0xed,0xbd,0xb5,0x0e,0x91,0x7d,0xd0,0xec,0x3c,0xe9,0xcf,0xf2,0x07,0xac,0x54,0x44,0x9a,0x24,0x41,0xcb,0x2a,0x86,0x30,0x18,0xba,0x65,0x59,0x41,0x00,0x59,0xbf,0x3d,0x01,0x8a,0x51,0xe5,0xd2,0x90,0x8c,0x7d,0xd7,0xad,0x71
db	0xdc,0x45,0x62,0x95,0xf9,0x9f,0xe8,0x55,0x6d,0x48,0x22,0x32,0xcb,0x9a,0x55,0x65,0xe5,0xdf,0xee,0x22,0x99,0x91,0xd7,0xed,0x33,0x04,0x72,0xc7,0xc5,0xb2,0x56,0x5e,0x8f,0x38,0x4b,0xd0,0x61,0x4b,0x4b,0x04,0x4c,0x4c,0x2b,0x23,0x00,0xd4,0x5c,0xdd,0x84,0x8d,0x73,0xf4,0xf7,0xef,0xd5,0xdb,0x2b,0xec,0x54,0x86,0x37,0x01,0x64,0x56
db	0xef,0x73,0x9f,0xb4,0xb6,0xd2,0xf4,0x33,0x93,0xbd,0xd7,0xd9,0x6e,0x8f,0x60,0x85,0xbc,0xa6,0x16,0x3f,0x3f,0xc3,0xd7,0xfc,0xb6,0x82,0xf0,0xe5,0x1e,0x2c,0x51,0x48,0x27,0x50,0x3e,0xdb,0xe6,0x86,0x3b,0xa1,0xfa,0x09,0x39,0x04,0x6f,0xb1,0x85,0xbd,0xda,0x4d,0x2f,0xd1,0x40,0x6f,0x2e,0x2b,0xf2,0x9a,0x4d,0x8e,0xb2,0xc5,0x6e,0x21
db	0xf9,0xdd,0xc9,0x2e,0x81,0x18,0x7b,0x88,0xb9,0x86,0x36,0xe5,0xb2,0xdd,0x19,0xb4,0x7f,0x5d,0xc0,0x20,0x34,0xdc,0x63,0x7d,0x8c,0x80,0x0f,0xe6,0x85,0x14,0xbb,0x87,0x6c,0x3e,0x39,0x53,0x60,0x3d,0xc5,0x46,0x11,0xa3,0x96,0x60,0x6f,0xe9,0xfe,0x59,0xcc,0xed,0x4d,0xdb,0xa3,0xa1,0xf1,0x71,0x0b,0xb0,0x1f,0x89,0x4c,0x32,0x59,0xa5
db	0x7d,0xf7,0x3e,0x5b,0xca,0xa4,0xe1,0xc3,0x50,0xac,0xdf,0x00,0xad,0x45,0x59,0x9e,0x23,0x5f,0x52,0xbd,0x36,0x78,0x55,0xcf,0x90,0x91,0x41,0x14,0xdb,0x76,0x3a,0x43,0x39,0x89,0xe1,0x93,0xc8,0x66,0x91,0xc7,0x42,0x06,0x6f,0xbb,0x35,0x1e,0x07,0x52,0x5a,0xe4,0x41,0x9f,0x65,0xe0,0xdc,0x49,0x8c,0xd3,0x5f,0x16,0x21,0xc9,0xb8,0x8a
db	0xc2,0x56,0x91,0xcb,0x18,0x6b,0x38,0x7b,0x3a,0xeb,0x91,0x3c,0x0d,0x6a,0x1f,0xd6,0xc6,0xd7,0x56,0x8d,0xd3,0x76,0x1c,0x9d,0xed,0x3d,0xb6,0x92,0x71,0x6e,0x73,0xc6,0xb8,0xa2,0x1c,0x25,0xb9,0x3c,0xd4,0x41,0xf7,0x8f,0x39,0x60,0xe6,0x27,0xf2,0xc6,0x5f,0x56,0x08,0x7c,0xd3,0x16,0x9d,0x06,0xc0,0xca,0x3d,0xc6,0x61,0xb0,0x21,0x51
db	0x6d,0xca,0x82,0x59,0xe6,0xbb,0x99,0xa2,0x4f,0xfc,0x71,0x66,0x2b,0x4e,0x40,0x62,0x97,0x34,0x73,0x4a,0xe5,0xf0,0x4f,0x4c,0x36,0x4c,0xdb,0x03,0xa9,0x87,0x29,0x21,0x5d,0x91,0x5b,0x89,0xb8,0x3d,0x65,0xc7,0x58,0x0a,0x81,0xb5,0x3e,0x22,0xa1,0x57,0x95,0xbe,0x60,0xf5,0xeb,0xb3,0x49,0xdf,0xd9,0xa2,0x31,0x36,0x5f,0xb2,0xa6,0xf6
db	0x66,0x88,0x88,0x8e,0xa3,0x2c,0xac,0x5e,0xa1,0x33,0x16,0x64,0x08,0x47,0xc8,0xbc,0xc2,0xe9,0xdb,0x73,0x57,0x50,0xd4,0x24,0x01,0x26,0x26,0x04,0x4f,0x8a,0xc0,0x7a,0x97,0x14,0xf2,0xd0,0xbe,0x03,0xea,0x8a,0x25,0xcb,0x98,0xe7,0xbd,0x67,0xff,0x32,0xfd,0x8a,0x7d,0x11,0xe1,0xb2,0x91,0xb5,0xa0,0xb6,0x3c,0x2c,0xb3,0x6e,0x35,0x61
db	0x86,0xbc,0x37,0x15,0xf8,0x3b,0x0d,0x84,0x83,0x69,0x76,0xb0,0xaa,0x8f,0x4f,0xca,0xba,0x54,0xfe,0x42,0xc8,0xba,0x9a,0xd5,0x53,0x69,0x67,0x29,0x23,0x3a,0x6a,0x75,0x97,0xb4,0x29,0x2e,0x62,0xe3,0x95,0x82,0xb3,0xa0,0xa1,0xb7,0xdf,0xc2,0x66,0x4d,0xdd,0x0d,0xda,0xda,0xc2,0x42,0xe0,0x69,0xb1,0xab,0x3c,0x44,0x39,0x11,0x3b,0x0a
db	0xd6,0x96,0x2c,0x36,0xb0,0xa0,0xed,0x3d,0x0c,0x63,0x8b,0x90,0xe4,0xb9,0x5f,0x4c,0x27,0x70,0x87,0xb3,0x54,0xe2,0x36,0x74,0x6f,0x3e,0x22,0xb1,0x3b,0x1b,0xba,0xdb,0x1c,0xbd,0x9c,0x6d,0x84,0xbd,0x33,0xfb,0xc0,0x98,0x4c,0xcf,0x7a,0xe8,0x41,0xdb,0x32,0x1f,0xb7,0x64,0x19,0xdb,0x87,0xe7,0xf9,0x52,0x40,0x8c,0xc6,0x89,0x98,0x15
db	0x69,0xde,0xfa,0x29,0x9a,0x0f,0xaf,0xb0,0xad,0x71,0x35,0xab,0xab,0x34,0xe0,0xf4,0x03,0x24,0x6f,0x94,0x38,0x87,0xba,0x68,0xd5,0x1f,0x58,0x88,0x3e,0x12,0x20,0x57,0x43,0xde,0xd0,0xbc,0xaa,0x31,0x8f,0xbc,0x88,0xa0,0xdf,0x5a,0xcc,0xd1,0xba,0x9c,0x18,0x80,0x4e,0x8f,0x68,0x91,0x9c,0x57,0x3b,0x5a,0x62,0xc7,0x29,0x3e,0x49,0xc7
db	0x23,0x26,0xfd,0x9e,0xd0,0xb0,0x4f,0xd4,0xb2,0xa9,0xa8,0x4c,0x66,0x54,0x52,0x75,0x6b,0xbf,0x63,0x76,0x49,0x3b,0xa3,0xb2,0x8f,0x87,0x9d,0xb4,0x8f,0x07,0x3c,0x8e,0xae,0xe1,0x0e,0x9a,0x86,0x90,0x58,0x73,0x8a,0xb3,0xa9,0xab,0xe6,0x27,0xd7,0x70,0x94,0x77,0x12,0xdc,0x71,0xdf,0xcf,0xba,0xdd,0x85,0xfe,0x28,0xaa,0xcd,0xcc,0xe8
db	0x5f,0xd4,0xd8,0x45,0x6f,0x20,0xa8,0x5e,0x40,0x91,0x3b,0xd7,0x59,0x92,0xb8,0x7d,0x2b,0x8b,0x38,0xbd,0xfe,0x7b,0xae,0x5c,0xee,0x47,0x9b,0x20,0xb7,0xf3,0xad,0x75,0xa9,0xe1,0x96,0xc8,0xb2,0x30,0xfe,0x0c,0x36,0xa2,0x02,0xf4,0x3b,0x30,0xfd,0x91,0xfa,0x5f,0xd6,0x18,0x1a,0xcb,0xd2,0x26,0xbb,0x67,0xbe,0x1c,0x99,0xa5,0x4f,0x57
db	0x40,0xb5,0xed,0xd6,0x84,0xfd,0x6b,0x00,0xc8,0xe7,0x18,0x1a,0x9f,0xf7,0x3b,0xd1,0xcc,0x12,0xeb,0x9d,0x61,0xf0,0x8d,0x64,0x08,0x93,0x61,0xc4,0x3e,0xdb,0xda,0x15,0xb1,0xd6,0x2c,0x84,0x2a,0xd8,0xd2,0xa1,0x66,0x4e,0xc9,0xd6,0xbf,0x7e,0xb6,0x22,0xfa,0x35,0x5e,0xdc,0xc0,0x31,0x02,0xb8,0x17,0x46,0x9e,0x67,0xd3,0x6a,0x8f,0x33
db	0x85,0xc3,0xfe,0x36,0xbc,0x6f,0x18,0x8a,0xef,0x47,0xf1,0xf2,0x6e,0x15,0x6c,0xb1,0x4a,0x4b,0x13,0x84,0xd5,0x1b,0xf9,0xa2,0x69,0xcd,0xc7,0x49,0xce,0x36,0x8e,0xe5,0xd5,0x35,0x05,0x7c,0x7f,0xc6,0x15,0x29,0x2e,0x64,0xa6,0x91,0x9d,0xe5,0x9d,0x90,0xe7,0x26,0xec,0x75,0x19,0x58,0x57,0xf2,0x19,0x7b,0x24,0x7d,0x19,0xd3,0x72,0x69
db	0xaa,0xa2,0x8c,0xe3,0x3d,0x38,0xb9,0xf0,0x5b,0xe9,0x3b,0xaa,0x96,0xef,0x2c,0xfc,0xf5,0x13,0xa6,0xa9,0x57,0x8c,0xa9,0x3a,0xc1,0xf0,0x2d,0x57,0x06,0x08,0xe3,0x9c,0xfe,0x82,0x8a,0x6a,0x79,0x5b,0xef,0x2b,0x81,0x83,0x01,0x53,0xac,0xdc,0x79,0x93,0x9b,0x23,0xd4,0xae,0x17,0x6f,0x62,0xaa,0x33,0x41,0xa6,0x31,0x1c,0x7b,0x46,0x2b
db	0x17,0xd3,0x6f,0x66,0x73,0x54,0xee,0xa1,0x08,0xee,0x8f,0x0f,0x0e,0x53,0xa7,0x49,0x17,0xdb,0x35,0xaf,0x4e,0x94,0x87,0x8e,0xff,0xf4,0x2b,0x29,0x01,0x45,0xa3,0x0a,0xd9,0x13,0x38,0x09,0x46,0x2c,0x56,0x97,0xd7,0xee,0x24,0x43,0xd1,0x20,0xed,0x38,0xde,0x52,0x13,0x38,0x06,0xd3,0x97,0xc7,0x48,0x8b,0x72,0x0a,0xc5,0xca,0x75,0x2c
db	0x04,0x9e,0xee,0x14,0xe7,0xda,0x59,0xc2,0x54,0x7a,0x72,0x55,0x35,0x00,0x93,0xb7,0xb9,0x81,0x01,0x46,0xae,0x43,0x81,0x34,0xd7,0xb4,0x7a,0xfc,0xfc,0x98,0x2b,0x29,0xe5,0x5e,0x9d,0x8e,0xef,0xd4,0x44,0x9d,0x9a,0xbe,0xdb,0x83,0x33,0x18,0x9e,0xbd,0x0f,0x34,0x4d,0xd9,0x34,0xe0,0x2c,0x1f,0x10,0xaa,0x06,0x5e,0x54,0x51,0x72,0xec
db	0xbf,0x6b,0x3e,0xb9,0xdd,0x37,0xc3,0xe1,0xbe,0xbe,0x1d,0x86,0xde,0x12,0xca,0x82,0xc5,0xe5,0x47,0xf8,0xbe,0xef,0xb6,0x79,0xd5,0x3c,0x69,0x0a,0x35,0x3e,0xd3,0xf8,0xaf,0x5b,0x8e,0x69,0xff,0xb2,0xf7,0x91,0xc2,0x70,0x22,0x97,0x1c,0x5c,0x56,0x25,0x5a,0xcf,0x31,0x7a,0x37,0xce,0xc7,0xf2,0x98,0xdc,0xb5,0x58,0x71,0x5a,0x60,0xe2
db	0xfe,0x4f,0xf3,0xe2,0x2a,0xca,0x22,0x3e,0x07,0xc2,0xea,0x23,0xc8,0x04,0x97,0x7f,0xca,0xf6,0xf8,0x12,0x06,0x88,0x81,0xee,0xb7,0xdd,0x56,0x9e,0x0f,0x36,0xd3,0x09,0xa8,0x74,0x4d,0x8b,0x8f,0x31,0x64,0xbe,0x9d,0x7b,0x68,0x50,0xc8,0x64,0x40,0x3b,0x0c,0x04,0xb9,0x4b,0x9e,0xff,0x7e,0x5d,0xd8,0x57,0xa0,0xe5,0x6d,0xc2,0x37,0xe7
db	0xd1,0xd9,0x96,0xaa,0x16,0x3e,0xa2,0x9d,0x32,0xe7,0x1e,0x11,0x6e,0x41,0xe2,0xa0,0xe1,0x6f,0x32,0x6d,0xd5,0x38,0x0c,0x27,0x27,0xa9,0xc2,0x04,0xc6,0xe7,0x8d,0x7d,0x7b,0x30,0xbe,0x54,0x6b,0x82,0x37,0x39,0x53,0x54,0xc9,0xac,0xcb,0xd1,0x31,0x79,0xd4,0x7b,0x85,0x07,0xf4,0xf4,0x5d,0x33,0xc7,0x91,0x4e,0xe5,0x13,0x78,0x09,0x42
db	0x29,0x48,0xaf,0x82,0xb1,0x88,0xd4,0xd3,0x57,0x50,0x38,0xa7,0x66,0x41,0x63,0x34,0x2a,0x3c,0x5e,0x8f,0xc4,0xc1,0x00,0xa1,0x22,0xbe,0x5e,0x64,0xb0,0x60,0x9b,0x42,0x9d,0xc6,0x59,0x5c,0xcc,0x29,0x6f,0x64,0x5b,0x5c,0x0f,0xb2,0xae,0x21,0x0c,0x9a,0x6a,0x19,0xb9,0xa6,0x32,0xf8,0xdc,0x82,0xea,0xba,0x27,0xcf,0x42,0xd3,0xde,0x78
db	0xfe,0x9c,0xa5,0x36,0xb6,0x24,0xb6,0x0d,0x5b,0x67,0x6c,0xf5,0x16,0xbf,0x67,0x54,0x4f,0xe4,0x83,0x29,0x75,0x42,0x9a,0xbb,0xd5,0xe7,0x01,0x1f,0xbd,0x80,0x1a,0x7a,0xb6,0xe1,0x2b,0x5d,0x71,0x93,0x00,0xad,0xf6,0x11,0x8d,0x67,0xdc,0x9c,0x8f,0xf0,0x09,0x3f,0xf9,0xa4,0xd6,0xe0,0xdd,0x95,0xea,0xfb,0x71,0x76,0x21,0x31,0x6d,0x48
db	0x0a,0x27,0xa8,0xa6,0x3a,0x7f,0x42,0x6b,0x7e,0xd7,0x6e,0xd5,0x42,0x97,0xad,0x55,0xae,0x26,0x3c,0xde,0x3f,0xaf,0xfd,0x1d,0x6d,0xd3,0xeb,0x84,0xad,0x6d,0xd1,0x4a,0x85,0x1a,0xf7,0x99,0xa4,0xd0,0x48,0xfb,0xf6,0xfe,0xc6,0xea,0x61,0x77,0xe2,0x56,0x87,0xc1,0x36,0x44,0xb4,0xe3,0xd7,0xd9,0x6d,0x3e,0x1b,0xf4,0x72,0x3e,0xfe,0xa5
db	0x47,0xf8,0x3f,0x1a,0x6e,0x43,0xf5,0x67,0xfe,0x90,0x96,0x9b,0x52,0xde,0xab,0xfb,0x45,0x7d,0x93,0xea,0xc3,0x40,0xe1,0x5f,0xcd,0xad,0x3b,0xe9,0x4e,0x36,0xc5,0x38,0xf4,0x66,0xde,0x4b,0xc8,0x2a,0xc3,0xa2,0x3a,0x2a,0xf1,0xd1,0xe8,0x01,0x07,0x37,0xca,0x42,0xbf,0x4f,0xd8,0xc5,0x50,0x93,0x1a,0x01,0x1d,0x51,0x41,0x6e,0xbf,0x68
db	0x93,0x2e,0xdc,0x41,0x23,0xf3,0x13,0xe7,0x09,0xfa,0x39,0x6d,0xee,0x41,0x49,0xbb,0x78,0x04,0xcf,0xc9,0xbb,0x11,0xaa,0x57,0xb5,0x3e,0x4c,0x3a,0x77,0xb7,0x0b,0x38,0x34,0x48,0xd0,0x99,0x20,0x55,0xcd,0x43,0x2f,0x68,0x66,0xb0,0xe6,0x75,0x41,0xe4,0xae,0xfd,0x96,0xe8,0x01,0x4c,0x0b,0x5c,0xbc,0x4f,0x45,0x70,0x08,0x9e,0xf7,0x68
db	0x9e,0xbb,0xe5,0x39,0x20,0x3f,0xbe,0xd3,0xe3,0x95,0xba,0x98,0xd5,0x12,0x2e,0x87,0xd4,0xf4,0x12,0xa2,0xcb,0xd4,0x51,0x53,0x93,0x67,0x06,0xf1,0x21,0x0e,0x92,0x8f,0x9f,0x9e,0x6c,0x16,0xa4,0x2c,0x6d,0xb0,0xd0,0xe1,0x87,0x2f,0x09,0x2c,0x8f,0x4b,0x89,0x1f,0xab,0x66,0xf1,0xcd,0x6e,0x67,0xaf,0x07,0x99,0x18,0x1b,0xda,0xc8,0x65
db	0x81,0xa3,0x37,0x8a,0xad,0xe4,0x1d,0xfd,0x82,0xa0,0xf1,0xe1,0x1e,0x8d,0x0b,0xf7,0x07,0x7c,0xb3,0x10,0xc8,0x5a,0xa9,0xcc,0xc8,0xd0,0x2e,0x5a,0x71,0x45,0x4c,0x30,0xf0,0x10,0xe0,0xf6,0x0d,0x0d,0x11,0xb4,0x83,0x40,0x75,0xee,0xb9,0x24,0x04,0xe3,0xba,0xb3,0xd3,0x00,0x57,0x71,0x98,0xf0,0x4b,0x35,0x8d,0xd8,0x71,0xa0,0xcc,0xaf
db	0x46,0x54,0x67,0x65,0x70,0x0b,0x9c,0x61,0xf8,0xd4,0xb2,0x35,0xfd,0xcf,0x2b,0x3a,0x48,0x5b,0x03,0x86,0xd8,0x13,0x48,0x8a,0x55,0xa5,0x4d,0xef,0x42,0x41,0xbb,0x6a,0x8c,0x92,0x46,0x87,0x82,0x09,0x43,0xf3,0x94,0x1d,0x23,0x36,0xfe,0x6f,0xb8,0x9f,0xfa,0xf9,0x92,0x27,0x3c,0xcc,0x47,0x89,0x5c,0x7f,0x81,0x42,0x74,0x12,0x14,0xff
db	0x98,0x63,0xc0,0xfb,0x70,0xff,0xc7,0x65,0x5a,0xc3,0xb9,0x74,0x1b,0x71,0x3c,0x2c,0x47,0x79,0x07,0xb9,0x3c,0xc2,0x5f,0x48,0x4f,0xbd,0xaf,0x03,0x05,0x57,0xa9,0x84,0x33,0xc8,0x0d,0xd5,0xac,0x42,0xdb,0x4b,0x57,0x46,0x41,0xf0,0xe4,0x08,0x0d,0xf3,0x43,0x41,0xa5,0x14,0xb7,0xcd,0x64,0x23,0xc9,0xfe,0xff,0x12,0x97,0xc6,0x2f,0x8d
db	0x9e,0xf2,0x1d,0x33,0x26,0x3c,0x57,0x17,0xe1,0x7b,0x92,0x3f,0xb6,0xf4,0xd9,0xf8,0xe0,0x37,0xe6,0x18,0x7d,0xa7,0x8a,0x1e,0xe8,0xd8,0x56,0xa6,0x63,0xdf,0xa3,0x99,0x16,0x74,0x48,0x01,0xaf,0x95,0x55,0x40,0xce,0xa8,0x0d,0x30,0x01,0x09,0x40,0xc9,0x9d,0x3d,0xdf,0x4e,0x00,0xe0,0x2a,0xe6,0xdb,0xa2,0x79,0x42,0x57,0xd0,0x3d,0x81
db	0x7f,0x67,0x3a,0xa9,0x63,0xb3,0xd4,0x60,0xa7,0xab,0x54,0x46,0xb0,0xbe,0xb0,0x83,0x72,0xec,0x47,0x0f,0xc7,0xd1,0xed,0x16,0x96,0xbc,0xa5,0x62,0x38,0xdb,0x88,0x2b,0x25,0x26,0x27,0x56,0x7f,0x46,0x39,0xe8,0x4e,0xc0,0x6c,0x62,0xf8,0x80,0x68,0x56,0x8a,0x93,0x51,0x95,0x77,0xe3,0x11,0x7b,0xaf,0xc4,0xcf,0x34,0x5a,0xd5,0x26,0xfc
db	0xa2,0x18,0xb0,0xc0,0xa5,0x8b,0x25,0x70,0x40,0x70,0x29,0xc3,0xda,0x80,0x3d,0xe2,0x59,0x49,0x7f,0xdd,0x62,0x6e,0x5a,0xe6,0x27,0x73,0xce,0xb6,0x32,0x37,0x5f,0x73,0x12,0x2b,0x34,0x84,0xff,0x85,0xe3,0xb5,0x93,0x41,0x47,0xc5,0xf5,0x0e,0x21,0xfb,0x24,0x0f,0xdf,0x7b,0xb4,0x29,0x7f,0x67,0x2a,0x38,0x79,0xf0,0x54,0x8a,0x94,0x68
db	0xe2,0x0b,0xb0,0xd4,0xb2,0xa4,0xe4,0xfb,0x3b,0xe6,0xe7,0x59,0x41,0xbd,0xed,0x62,0xce,0x50,0x1a,0x47,0x92,0x92,0x8d,0x80,0xa6,0x05,0x7a,0xb0,0xce,0x48,0x9c,0xb0,0x64,0xea,0xe0,0xa5,0x77,0xff,0xc1,0x82,0x99,0x7b,0xfb,0x74,0x53,0xfa,0x41,0x9a,0x2c,0xb4,0xbb,0xd2,0x26,0xa1,0x80,0x68,0x17,0xaa,0x8f,0x14,0x52,0xb6,0x5d,0xe0
db	0x69,0x5b,0x31,0xc5,0xf5,0x32,0x0d,0xff,0xa4,0x7b,0x28,0x38,0x9b,0x61,0xfc,0xd0,0x92,0xb8,0x6e,0x23,0x8a,0xf3,0xc7,0x85,0x11,0xb8,0xd0,0x19,0xaf,0xca,0xa7,0xb4,0xcc,0xeb,0x5d,0xf6,0xa1,0x1c,0x56,0xdf,0x78,0x7a,0xe3,0x6a,0xa4,0x07,0x71,0xce,0xf1,0xb2,0xd5,0x38,0x3c,0xfa,0xf7,0x7a,0xbf,0x4b,0x43,0xa6,0xb3,0x4d,0xff,0x82
db	0x96,0x46,0xb5,0xec,0xda,0xb4,0x5e,0x35,0x78,0xeb,0x4a,0x7e,0xc5,0x7b,0x05,0xd4,0xdd,0xf7,0xb7,0xf3,0xf0,0x04,0x26,0x7e,0x5e,0xc1,0x23,0xca,0x7f,0x14,0x27,0xac,0xda,0xe7,0xdb,0x31,0x05,0x9d,0xd4,0xda,0x20,0xc7,0x6d,0x9a,0x47,0x14,0x38,0xbd,0x7c,0xfe,0xbe,0x8d,0x42,0x7c,0xba,0x36,0xe2,0x2c,0x26,0xd2,0x46,0xa5,0x6b,0xbd
db	0x6a,0x75,0x6b,0x52,0x8c,0x10,0xc6,0x0e,0x76,0x60,0x46,0xcc,0x93,0x54,0xc4,0x6e,0xc7,0x70,0x5b,0xb4,0x81,0x51,0x56,0x03,0x22,0x33,0x21,0xe4,0x36,0xee,0x01,0xc3,0x0d,0x17,0x23,0x15,0xae,0x79,0xbc,0xe6,0x13,0x0f,0xfc,0x77,0xa2,0x06,0xed,0x76,0x4a,0xf7,0x2d,0x99,0xc8,0x5c,0xfd,0xac,0xd0,0x11,0xe8,0xfa,0x55,0x17,0x56,0x63
db	0x3e,0xd5,0x23,0x71,0xf8,0xe9,0x1f,0x62,0x95,0xae,0x7c,0x2d,0xcd,0xb8,0x6e,0xb0,0xfe,0xf3,0xd0,0xba,0x72,0x8e,0xe3,0x95,0x82,0x00,0x85,0xdb,0x25,0xe4,0xf2,0xaa,0xbc,0x8d,0xb9,0x4d,0x69,0xa4,0xcd,0x39,0x52,0x9e,0x10,0xae,0x90,0xf0,0x74,0x2f,0xc6,0x5e,0x01,0x99,0x03,0xd5,0x88,0x59,0xfd,0x1b,0x80,0x56,0x0a,0x04,0x27,0xd9
db	0x04,0x51,0xb0,0xb7,0x7a,0x65,0x79,0xa8,0xe2,0x6d,0x7f,0xb2,0xba,0x37,0x40,0xa0,0xbb,0xaf,0x15,0x46,0x23,0x5f,0x22,0xd0,0x2c,0x6c,0x7a,0x58,0x76,0x6f,0xb8,0x19,0xfe,0xb5,0x3d,0xf0,0x77,0x00,0x6b,0x4c,0x83,0x36,0x90,0xe6,0x57,0x29,0x6e,0x27,0x76,0xd4,0x7d,0x9a,0x6a,0xf1,0xf6,0x1b,0x1a,0x45,0xf5,0xf6,0x2d,0xb8,0x30,0x33
db	0x65,0x51,0x37,0x26,0xbc,0xf7,0xb7,0xf9,0x56,0x05,0x6b,0xd4,0xd6,0x00,0x1d,0x13,0x15,0x45,0x24,0x0d,0x28,0x69,0xc6,0x50,0xe1,0x48,0x48,0x34,0x69,0x31,0x3c,0x58,0x71,0xd6,0x4a,0xd9,0xda,0x0d,0x28,0xbd,0xe9,0x5d,0x5d,0x8a,0x6e,0x71,0xc0,0x8b,0x7a,0xba,0x17,0x8e,0x82,0xcb,0xe9,0x95,0xc4,0x43,0x37,0xd0,0x58,0xed,0xec,0x77
db	0x1e,0x22,0xf0,0xf0,0x7c,0x9d,0xeb,0x64,0x30,0x7b,0xb2,0x7b,0x86,0xdb,0xef,0x92,0x79,0xd9,0x9c,0x1c,0x1a,0xf6,0x98,0x26,0x18,0xa2,0x83,0x45,0x08,0xd4,0x1d,0x84,0xd4,0x28,0x6d,0x1f,0xb5,0x1f,0xab,0x97,0xc9,0x0d,0x1f,0x83,0x34,0x18,0xa3,0x20,0x63,0x60,0x6c,0xf3,0xd8,0xb2,0x0a,0xd9,0x35,0xa6,0xce,0x44,0x50,0xc6,0xf3,0x91
db	0xe3,0x95,0x89,0x49,0x99,0x32,0x1d,0xf2,0x54,0x39,0x09,0xca,0xd1,0xc4,0x7f,0xa1,0x1d,0xce,0x94,0x67,0xf1,0x88,0x04,0x29,0xcb,0x5d,0xf7,0xfa,0xcd,0x69,0x16,0x17,0x05,0xc3,0x93,0x45,0xbf,0xd3,0x74,0x63,0xdc,0xe2,0x84,0xab,0x27,0x60,0x56,0x61,0x72,0x5d,0xdf,0xb4,0xa4,0x0f,0xb0,0x21,0x82,0x9b,0x73,0x0a,0x11,0x22,0x2d,0x65
db	0xa2,0xff,0x29,0x8a,0x19,0x28,0x4f,0x4f,0xdd,0x64,0x0a,0x48,0x35,0x70,0x30,0x9f,0x41,0x4d,0x0c,0x7b,0xa6,0xcb,0x63,0x83,0xd1,0x79,0xfa,0x5f,0xc9,0x9b,0x6e,0x09,0x12,0x87,0xcd,0x1e,0x39,0xd6,0x40,0x08,0x0f,0xfd,0x79,0xc8,0xcb,0x77,0x8f,0x7a,0x52,0x42,0xc0,0xb2,0xc8,0xa0,0x2a,0xff,0xbc,0x60,0x13,0xbc,0x41,0x4a,0xc6,0x8b
db	0x08,0xb0,0x9f,0x75,0x87,0xa1,0x75,0x42,0x4b,0x3a,0xf7,0xf7,0x84,0x39,0xa5,0x88,0x25,0x2d,0x4f,0x73,0x4e,0x30,0x27,0x92,0xea,0x93,0x70,0x5c,0xb5,0xeb,0xb0,0x10,0xda,0x0f,0xaa,0xb3,0x3f,0xb5,0x55,0x64,0x65,0xae,0xb5,0xf8,0x0a,0xe4,0x9f,0x86,0x02,0x6f,0x63,0x8a,0x0b,0x6b,0x82,0x85,0x3c,0x6a,0xdf,0x68,0x4c,0x1e,0xe9,0x5c
db	0xd0,0x99,0xe5,0x0c,0xfc,0x63,0xfb,0xce,0x2d,0x63,0xd5,0x7d,0x8a,0x7d,0x14,0x22,0xbd,0x71,0x5e,0x79,0x3f,0x44,0x95,0xe5,0x6c,0x58,0x94,0x84,0x41,0x65,0x52,0x94,0x50,0xec,0xd3,0x2a,0x16,0x88,0xdb,0x71,0xb9,0xe4,0xb6,0xbf,0xc5,0x3c,0x48,0x37,0x62,0x32,0x79,0xbe,0x1d,0xdb,0xc9,0x79,0x37,0x40,0x65,0x20,0x62,0x45,0xb4,0xda
db	0x24,0xef,0x33,0xf1,0x05,0x49,0xef,0x36,0x17,0x17,0x0f,0xdc,0x65,0xb4,0xdc,0x57,0xc3,0xc6,0x82,0x57,0x08,0xf2,0x20,0x57,0x5c,0x25,0x0e,0x46,0x75,0xa7,0x4f,0x9e,0xa4,0x00,0xf7,0x79,0xb9,0x0a,0xef,0x4f,0x50,0x79,0xf8,0x59,0x01,0xf2,0x74,0x9f,0x16,0x27,0xa5,0xc1,0x32,0xcc,0x58,0xa7,0x40,0xa1,0xa1,0x26,0x80,0x00,0xb5,0x64
db	0x0a,0xd8,0x53,0x1f,0x72,0xf7,0x60,0xf7,0x0a,0xaa,0xdf,0x31,0x95,0xff,0xfc,0xb4,0xca,0xbc,0xf8,0x2a,0x33,0x20,0x04,0x16,0x1a,0xe7,0xeb,0x22,0xd1,0x25,0xa6,0x03,0xc9,0x9e,0x9e,0xca,0x7a,0x46,0x7c,0xcb,0x8a,0x63,0x4a,0xf0,0x1b,0xd0,0x34,0xc3,0xbb,0x89,0xcf,0x16,0x38,0xcb,0xe0,0xce,0xd5,0x0b,0xfd,0x4e,0xbc,0xce,0xba,0x28
db	0x68,0x00,0x2a,0x31,0x52,0xe6,0xaf,0x81,0x3c,0x12,0x09,0x2f,0x11,0x0d,0x96,0xc7,0x07,0x42,0xd6,0xa4,0x2e,0xc1,0xa5,0x82,0xa5,0xbe,0xb3,0x67,0x7a,0x38,0xf0,0x5e,0xd8,0xff,0x09,0xf6,0xab,0x6b,0x5d,0xec,0x2b,0x9f,0xf4,0xe6,0xcc,0x9b,0x71,0x72,0xd1,0xcf,0x29,0x10,0xe6,0xe3,0x27,0x1c,0x41,0xc8,0x21,0xdf,0x55,0x27,0xa6,0x73
db	0xb7,0x45,0xa1,0x09,0x66,0x2f,0x08,0x26,0xf1,0x50,0xe0,0xec,0x9d,0xf2,0x08,0xf3,0x49,0x56,0x50,0xe0,0xba,0x73,0x3a,0x93,0xf5,0xab,0x64,0xb6,0x50,0xf4,0xfa,0xce,0x8d,0x79,0x0b,0xad,0x73,0xf2,0x8c,0x1e,0xe4,0xdd,0x24,0x38,0x1a,0xde,0x77,0x99,0xb8,0x92,0xca,0xc0,0xc0,0xbc,0x3d,0x01,0x6f,0x93,0x3a,0x6e,0xc5,0x28,0x6e,0x24
db	0x9c,0xf9,0xd9,0xcb,0x4b,0xbe,0x9e,0xda,0x0d,0x10,0xfb,0x9d,0x15,0xfe,0x28,0xdc,0xd9,0x09,0x72,0xd3,0x9f,0x6d,0x77,0x14,0x84,0x86,0x56,0x10,0xdc,0x8e,0x6a,0xa7,0x62,0xf0,0x0b,0x65,0x2c,0xa2,0xd1,0x7f,0xae,0x32,0xfa,0x9b,0x46,0x0f,0x12,0x08,0x22,0x8c,0x87,0x15,0x4b,0xc4,0x6d,0x85,0xfb,0x69,0xfe,0xce,0xfb,0xb4,0x3e,0x7b
db	0xcf,0x88,0xa7,0x97,0x52,0x56,0xd0,0x9f,0xb4,0x33,0xf9,0x08,0xd2,0x28,0x46,0x5e,0xc4,0xec,0x22,0xc6,0x1e,0x7b,0x34,0x99,0x0c,0x5b,0x04,0x19,0xe2,0xca,0x09,0x11,0x50,0x45,0xcc,0xb2,0x90,0x25,0x51,0x68,0xc9,0x20,0x6c,0x99,0x2e,0xdb,0x5b,0x07,0x91,0xb2,0x69,0xbf,0x3c,0x05,0x50,0xfb,0x21,0x33,0x4f,0x6e,0x18,0x19,0xd5,0xff
db	0xce,0x9d,0xb5,0x7f,0xd4,0xd5,0x8f,0x41,0x26,0x1f,0xa1,0x4c,0x34,0xd3,0x98,0x08,0x5d,0xb5,0x56,0xa7,0x04,0x63,0x76,0x7d,0xae,0xee,0xea,0xbf,0x69,0x8d,0xff,0xa1,0x62,0x86,0x19,0x7b,0xe5,0x08,0x7a,0xe5,0x9e,0xe5,0x44,0xca,0x24,0xde,0x00,0x43,0xc7,0xcd,0xc8,0x5b,0x21,0x00,0xb9,0x56,0x3f,0xba,0xef,0xcd,0xc4,0xe0,0xd7,0x90
db	0xa7,0xe1,0xf9,0x83,0x2c,0x1d,0x8d,0xc3,0x1b,0xa2,0xab,0xcd,0x7d,0xbc,0xd1,0x2b,0xf8,0x30,0x9e,0xb6,0x95,0xe0,0xd1,0xe6,0x81,0x89,0xa7,0xda,0xf0,0x54,0xc1,0xcb,0x3a,0x85,0x85,0xb5,0x03,0xb4,0x8c,0x7d,0x98,0x16,0xa8,0x83,0x29,0xbb,0x1c,0x1d,0xe1,0x7e,0x0e,0xb5,0x04,0xba,0xbf,0x89,0x30,0x3c,0x44,0xa2,0xc5,0xbf,0xf1,0x70
db	0xdb,0xf3,0x13,0xf4,0x44,0xac,0x63,0xc4,0x9c,0x93,0xa9,0x13,0x1b,0xf1,0xcc,0x16,0x66,0xdf,0x56,0x10,0x88,0x0c,0x76,0xab,0x43,0xcb,0x75,0xf8,0x4f,0x04,0x26,0x95,0x4c,0x6d,0x55,0xc8,0xbd,0xf8,0x94,0x0f,0xca,0x29,0x2b,0xcd,0xce,0x05,0x1e,0xea,0xae,0x02,0x01,0x8b,0x60,0x6a,0x6a,0x03,0x14,0xe5,0xa7,0xdf,0x9e,0x9f,0x94,0x92
db	0x41,0x2c,0xf0,0x1a,0xa7,0xc2,0xc1,0xfc,0x11,0xf3,0x00,0xe1,0xfc,0x7a,0x97,0xc0,0xe1,0x81,0x90,0x3f,0xea,0x1e,0x7f,0xf8,0xb0,0xd8,0x4c,0x2d,0xdc,0x83,0xfa,0x27,0x8b,0xf2,0xef,0x3b,0x3a,0x44,0xdc,0xa5,0xa9,0xd5,0x24,0x5f,0xb1,0xdd,0x1d,0x3f,0x03,0x76,0x3b,0x92,0x0d,0xb4,0x84,0xa4,0x5b,0xef,0x9f,0x89,0x9d,0xef,0xff,0xcf
db	0xc2,0x28,0x3b,0x9d,0xd2,0x28,0x75,0x3e,0xdc,0x14,0x79,0x7c,0x0c,0xaa,0x6c,0xf2,0x05,0x9d,0x27,0x01,0x15,0x19,0x60,0x48,0x5a,0x7d,0x04,0x27,0x2d,0x82,0x92,0x3e,0x0b,0x62,0xd7,0x5a,0xfb,0x72,0xfb,0xdd,0x43,0xfa,0xf4,0x6f,0x16,0xd2,0x8f,0x8f,0x21,0xdc,0x81,0x48,0x7a,0xe8,0x39,0xd5,0xdf,0x54,0x0f,0xe1,0xbe,0x65,0xc9,0x49
db	0x98,0xb1,0xff,0x8d,0x52,0x31,0x6a,0xcd,0x5e,0x83,0x17,0x41,0x93,0xcd,0x23,0x76,0x18,0xe9,0x82,0x71,0x15,0xb7,0xd8,0xde,0x0d,0x57,0x8b,0x90,0xe6,0xf4,0x57,0xc1,0xfd,0x3d,0x0d,0x6a,0xae,0xd1,0xd6,0x02,0x3e,0xb9,0x82,0xb2,0x82,0x80,0x48,0xa4,0x14,0x29,0x80,0x55,0x1d,0xaf,0x3e,0xf8,0x7e,0x36,0x5f,0x77,0x4c,0x73,0x6c,0x35
db	0xd2,0x7c,0x36,0xca,0x2f,0xec,0x1e,0x3f,0x74,0xee,0xa5,0xe7,0x7d,0xce,0x81,0xf1,0xd5,0xc1,0xb3,0xaf,0x90,0x2c,0xc6,0x5b,0x81,0x37,0x85,0x98,0x78,0x3c,0x4f,0x2a,0x55,0xea,0x06,0x30,0x77,0x73,0x97,0x39,0x75,0xcf,0x4a,0x9b,0x55,0xb8,0x64,0x5c,0x86,0xfd,0x26,0x3e,0x8d,0x68,0xd2,0x70,0xe8,0xd7,0x99,0x57,0x6f,0x96,0x47,0x6d
db	0xa7,0x1a,0x0e,0x85,0xcd,0x00,0xa5,0x3e,0x11,0xec,0x76,0xd2,0x47,0x26,0x71,0xda,0x5c,0xf4,0xb1,0xd5,0x23,0xe1,0x62,0x71,0x43,0x30,0xa7,0x95,0xf6,0xc1,0xcf,0x8a,0x1b,0x75,0x53,0x39,0x6d,0x9d,0x18,0x7c,0xe3,0x48,0x27,0x33,0x1c,0x38,0x45,0xdf,0x75,0x22,0x05,0x6d,0x81,0x5d,0xfc,0xeb,0x0e,0x05,0x26,0x45,0x81,0x9f,0xce,0x0f
db	0xc9,0xdd,0x95,0x11,0x04,0x47,0x40,0xa4,0x07,0x3b,0x52,0x92,0xe0,0x91,0xdb,0xdd,0x3c,0x9f,0xd3,0xa1,0xb7,0xf9,0xeb,0xd6,0x6d,0x64,0x88,0xe9,0xf5,0x4e,0x98,0x8e,0x7b,0xd3,0xec,0xc0,0x22,0xe0,0xf2,0x14,0xf2,0x20,0xa2,0xa3,0xb3,0x0d,0x75,0x1a,0xbb,0xde,0x4a,0x41,0x04,0x43,0x0d,0xd9,0xd0,0x1d,0x73,0xc8,0x67,0x8e,0x58,0xe5
db	0x4b,0x28,0x4d,0x8f,0x2f,0xab,0x1a,0x4a,0xfc,0x7c,0xd1,0x27,0x3e,0x4a,0x10,0x6a,0x5f,0x55,0x3a,0xf7,0x63,0x14,0xe9,0xad,0xb4,0x95,0xef,0x3d,0x5c,0xc3,0x7d,0xe4,0xb7,0x15,0xd7,0x0b,0x68,0xf0,0x23,0xa8,0xd4,0x8e,0x27,0xf6,0x55,0x11,0xbc,0xc0,0xff,0x3e,0x2c,0x24,0x59,0xb7,0xb7,0xb5,0x0b,0xd2,0x99,0xa5,0xd5,0xe2,0x24,0x33
db	0x21,0xb8,0x96,0x48,0x18,0x94,0xb5,0xb2,0x50,0x5e,0x04,0x24,0x86,0x17,0x62,0x1e,0xc9,0xf8,0x22,0x6a,0xd0,0xec,0xc5,0xbc,0x90,0xf7,0x55,0xcf,0x3f,0x4c,0x7c,0xf7,0x51,0x19,0x95,0xa4,0x81,0x38,0x0c,0xa5,0x58,0x22,0xf3,0x10,0x05,0x05,0x44,0xbf,0x7e,0x2a,0xbd,0x5f,0x79,0x56,0x08,0xd5,0x68,0xea,0x85,0xa1,0xeb,0x0b,0xe1,0xd4
db	0xfd,0x3a,0x38,0xd2,0x5a,0x49,0x17,0x9a,0x58,0x8f,0x52,0xf5,0xf4,0x7b,0x1f,0x58,0xa8,0xc0,0x1c,0x46,0x38,0xa6,0xe4,0x7d,0xcc,0x88,0x97,0x10,0x2b,0x5e,0x61,0xf5,0x73,0x7d,0x79,0x1b,0x53,0xf1,0xac,0xb4,0x3f,0xbd,0x9d,0xb6,0xc2,0x57,0xd5,0x84,0x4d,0x60,0xd6,0x45,0x56,0xa1,0x36,0x28,0xf5,0x74,0xc6,0x29,0xd7,0xc9,0x63,0x5e
db	0x7c,0x97,0x46,0xde,0x56,0x3f,0xd8,0x8e,0x75,0x29,0x87,0xe7,0xd1,0x24,0x78,0x26,0xdc,0x17,0x97,0xc9,0xf0,0x8e,0x95,0xbc,0xe5,0xfe,0xe3,0x3a,0x75,0x70,0x52,0xa9,0x31,0x97,0x79,0x3a,0xc2,0x53,0x6a,0x73,0xe2,0x76,0xf8,0x85,0xe6,0x0d,0x85,0x9b,0xfc,0x72,0x08,0x2a,0xa5,0x8e,0x42,0xb2,0x7c,0x8d,0x8b,0x28,0x4b,0xf5,0xcb,0x66
db	0x80,0x46,0xb3,0x87,0xdf,0x38,0xa7,0x08,0xc8,0xea,0x85,0x0e,0x6f,0x13,0xe0,0x57,0x99,0xc6,0xb8,0xed,0x9c,0xb0,0xa9,0x89,0xd7,0xc5,0xa9,0x71,0xfd,0x8a,0x21,0xb1,0xec,0xc8,0x65,0x78,0x72,0xc6,0x77,0x69,0xd4,0x0b,0x47,0x4d,0x79,0x93,0xcf,0x2a,0x34,0xf1,0x1b,0x0e,0x6f,0x0d,0xd1,0xbb,0xe7,0xd7,0xb5,0x6f,0x57,0x01,0xd4,0xcd
db	0x56,0xbe,0xf0,0xd9,0xe2,0x8e,0x0e,0xb8,0x3d,0xdb,0xf6,0x97,0x39,0x0b,0x3e,0xe2,0xb2,0xa3,0x93,0x0b,0x74,0xe5,0x6a,0x21,0x04,0x29,0x5a,0x3e,0x07,0x9c,0x11,0x4e,0xfe,0x01,0x6e,0x96,0x1e,0x8f,0xe0,0xfe,0x24,0x24,0x7e,0x04,0x2f,0x65,0xf4,0xe2,0x1f,0x36,0x56,0x43,0x3a,0x6c,0xeb,0xd7,0x20,0x13,0x71,0x45,0x6a,0xe8,0xc6,0xfa
db	0xba,0x26,0x6f,0x7d,0x9a,0x62,0x76,0x34,0x7d,0xed,0x47,0x71,0xd1,0x0e,0x5b,0x04,0x39,0xd6,0xc0,0xe5,0xa5,0xd8,0xf5,0x73,0xf9,0xf4,0xc2,0x2a,0x54,0x25,0x67,0xdf,0x83,0xa3,0xcd,0xfd,0x1e,0x46,0x87,0x06,0x17,0x6d,0x78,0x8e,0x0c,0x7b,0x08,0x06,0x1b,0xd9,0x5d,0x3d,0x03,0x40,0xbc,0xe7,0x02,0xc4,0xe0,0xe0,0x49,0xb2,0x6c,0x6f
db	0x97,0x76,0x0f,0xc7,0x14,0xd8,0x7c,0xc0,0xad,0x8a,0xbb,0xbc,0x2a,0x7e,0x68,0x46,0xcd,0xa7,0x26,0x16,0x77,0x1b,0x89,0x38,0xd8,0x2a,0x69,0x43,0xc4,0xaa,0x0d,0xf6,0xd1,0x65,0xda,0x41,0x75,0x77,0xcd,0xf7,0xd2,0x38,0x9c,0xdb,0x81,0x17,0x27,0x2f,0xba,0x2e,0xa5,0xb5,0xbe,0x05,0xe8,0xdd,0x5f,0xa9,0xad,0xbe,0xb2,0x0e,0x0b,0x69
db	0xb6,0x8d,0xd2,0xf2,0xde,0x76,0x32,0x26,0xd9,0x06,0x1d,0x42,0x26,0x8c,0xf7,0xca,0x4c,0xe1,0x59,0x82,0x6c,0xea,0x96,0x70,0x39,0xb8,0x0d,0xf3,0x67,0x9d,0x5e,0x94,0x99,0x77,0xf2,0x0a,0x9a,0xde,0xa5,0xd2,0xe1,0xaa,0x91,0x85,0xc7,0x0f,0x92,0x35,0x04,0xd3,0x7a,0x13,0xfa,0xf2,0x86,0x5a,0x38,0xd1,0x7f,0x10,0xd8,0x30,0x0e,0x33
db	0xe3,0xa0,0x8a,0xad,0x4f,0x6c,0x24,0xdd,0x9d,0x1c,0x4e,0xff,0x4c,0xfc,0x74,0x01,0xab,0x08,0x6c,0xe6,0x4c,0x78,0x75,0xc9,0x67,0x83,0x1f,0x75,0x22,0xb0,0x7c,0x44,0xa0,0xa1,0xee,0x4e,0xf6,0x3e,0xd3,0x35,0x70,0xbe,0x36,0x1e,0x90,0xa6,0xaa,0x64,0x67,0x7f,0x52,0x84,0xd9,0x27,0xab,0x37,0x30,0x68,0x46,0xcc,0x0e,0x57,0x58,0x6f
db	0xdb,0xb2,0x5f,0x24,0xf7,0xeb,0x97,0xea,0x64,0xec,0x6c,0x1e,0xe1,0xc4,0x72,0xfb,0x00,0xa7,0x62,0xa0,0x59,0xb9,0x17,0x8a,0x33,0x32,0x59,0xb8,0xbe,0x84,0xd4,0x62,0xb7,0xf6,0x35,0xd4,0xf1,0x1c,0xdb,0x7e,0xa6,0xbc,0x2c,0x54,0x3c,0xf5,0x63,0x4a,0x22,0x26,0x58,0xa0,0x35,0x98,0xa7,0x32,0xb2,0xa0,0x2b,0xd5,0xfa,0x2f,0x9b,0xb4
db	0xea,0xd6,0x58,0x61,0xb2,0x24,0x45,0x46,0x1e,0xac,0x79,0xa4,0xf7,0xc1,0x13,0x2f,0xf5,0x6b,0xfa,0x70,0x50,0x2b,0x83,0xee,0x7c,0xc1,0x55,0x27,0x7b,0x4f,0xa6,0x0a,0x72,0x26,0x82,0xcd,0x4d,0xe2,0xe8,0x45,0xe6,0xd7,0x39,0x7e,0xed,0x35,0xdf,0x9e,0xb1,0x41,0x55,0xa2,0x5d,0x68,0x4b,0x0b,0xd1,0x73,0x5a,0x2b,0x81,0x35,0x28,0xfc
db	0x64,0x08,0xd7,0xc4,0x9f,0x30,0x77,0x3d,0x9d,0x80,0x15,0x67,0x9a,0x84,0xe4,0x34,0xea,0x8c,0xf7,0x73,0x9e,0x33,0xb4,0x09,0x33,0xbd,0xd8,0x82,0x43,0x7d,0xc5,0x1f,0x0e,0x7b,0xa0,0x53,0x59,0x20,0x12,0x57,0xed,0xda,0xc7,0x19,0x8e,0x62,0xe4,0x09,0xc1,0x4b,0x20,0x32,0x9e,0x18,0x11,0x1c,0x42,0x49,0x62,0x76,0xa8,0x83,0x72,0x11
db	0x45,0xe7,0xb5,0x60,0xa7,0xc0,0x07,0xbd,0xb4,0x7c,0xc6,0x5c,0x03,0x34,0xa3,0x85,0x47,0x24,0x75,0xd2,0xab,0x46,0xbb,0xc7,0x0d,0xcd,0x40,0xe2,0x5e,0x5b,0xa7,0x98,0x67,0xe4,0xe2,0x02,0xe9,0xdc,0xd7,0xc2,0xaf,0x90,0x43,0x94,0xfe,0xf3,0x53,0xc1,0x10,0x28,0xa7,0x90,0xba,0x73,0x57,0x0c,0x4d,0x6d,0xbd,0xda,0x81,0xd5,0x90,0xce
db	0x02,0x40,0xb3,0xf0,0xec,0x50,0x82,0xc9,0xfb,0xf1,0x22,0x6d,0xc8,0xd2,0x7b,0xed,0x0b,0x43,0x7e,0x0b,0x60,0x9b,0x69,0x9e,0x58,0x26,0xc3,0x9f,0x6b,0xd0,0x31,0xeb,0xb7,0x0a,0xf3,0x9a,0x9a,0xf5,0x72,0xcf,0x29,0xc8,0x19,0x08,0x4d,0x67,0xd5,0xa1,0x8f,0x68,0x0e,0xee,0x59,0x14,0xf8,0x86,0xc0,0x08,0x5a,0x56,0xfe,0x6a,0xb7,0xac
db	0x78,0x8d,0x77,0x39,0x5e,0xb1,0x01,0x4d,0x31,0x81,0x56,0xdc,0x5b,0x10,0xda,0x4d,0xd2,0xfd,0xfc,0xa3,0xe3,0xaa,0x46,0x29,0x1a,0xea,0x9c,0x47,0x1b,0xd0,0xa6,0x84,0x1f,0x71,0x1a,0xd3,0x35,0x59,0x7f,0xef,0xf7,0x81,0x39,0x7a,0x9f,0x4a,0x01,0x4d,0x46,0xcf,0xa4,0x6a,0x9c,0x7e,0x07,0x8b,0x98,0x17,0x49,0x5c,0x46,0xac,0xc8,0xfd
db	0x1c,0xaf,0x91,0x30,0x0c,0x36,0x63,0xef,0x69,0xd3,0x47,0xf4,0x76,0xc1,0xf7,0x40,0x03,0x98,0x9e,0xcb,0x61,0x65,0x46,0x45,0x1c,0x1b,0xfd,0x13,0x36,0xe9,0x19,0xbf,0x2b,0x59,0x51,0xe8,0x04,0x44,0xe3,0xc2,0x4b,0x66,0x78,0x69,0x66,0xa3,0x1a,0xe5,0x2a,0xad,0xf8,0xc5,0x0f,0xb7,0x3e,0xe8,0xab,0xe0,0xe4,0xd9,0xc2,0xb8,0x61,0x5b
db	0xef,0x6b,0x4d,0x5f,0xb8,0xdc,0x06,0xa5,0xce,0x08,0x5b,0x1f,0xf4,0x29,0x4d,0x0a,0x3e,0xb3,0x60,0xf4,0x63,0x3c,0x70,0x5d,0x02,0x9c,0x55,0x5e,0x5e,0xd1,0x9b,0xed,0x20,0x75,0x54,0xa1,0x8e,0xae,0xce,0x5a,0xb2,0x2d,0xe4,0xc3,0x9b,0x7d,0x72,0xce,0x7c,0x0c,0xa9,0x99,0xa4,0x12,0xaa,0x31,0xe9,0x61,0x47,0x8a,0x41,0x93,0xd5,0x69
db	0xc5,0xf3,0x9f,0xf4,0x97,0x69,0x64,0x6f,0xf9,0x5b,0xbf,0x58,0xf6,0x3b,0x3e,0xd6,0x93,0x94,0x89,0xcc,0xc0,0x25,0x7d,0xf8,0x40,0x9e,0xb2,0xc8,0x75,0x9d,0x4d,0xf0,0x5f,0xa5,0x3d,0x38,0x67,0xea,0x8d,0x1b,0x60,0x5e,0xfe,0xa8,0x26,0xb9,0xed,0xc0,0xe9,0xc8,0xec,0xb1,0x77,0x0f,0xf2,0xaa,0x77,0x2a,0xcd,0xa8,0x70,0xb7,0xda,0x60
db	0x49,0xb3,0x01,0x95,0xc8,0xac,0x71,0x6a,0xd0,0x49,0x67,0x2a,0x04,0xfc,0x55,0x38,0x08,0x37,0xd9,0x21,0x37,0xce,0x41,0xaf,0x7c,0x33,0xdd,0xcd,0xe0,0x92,0x27,0x38,0x63,0x77,0xea,0x86,0x04,0x99,0x4e,0x61,0x8b,0x8f,0xfe,0x4e,0xc1,0x16,0x6c,0x89,0xac,0x1f,0x0b,0x67,0x75,0x49,0xf4,0xdb,0x6d,0xd3,0xb8,0x1d,0x9c,0xb2,0xe6,0x98
db	0x81,0xae,0x3f,0xe0,0xdd,0xda,0xfa,0x4c,0x8b,0x30,0x18,0x88,0xa1,0x1d,0xa1,0x18,0xb8,0x28,0xc2,0x04,0x6a,0x80,0x02,0x5a,0xe6,0x04,0x85,0xfa,0x54,0x38,0x45,0x64,0xe1,0x50,0x4a,0x38,0x4c,0x85,0xf7,0x00,0x0c,0xd3,0x16,0xcb,0xfa,0x38,0xb4,0x1b,0x6a,0x95,0x3d,0xc3,0x24,0x79,0x0e,0x3e,0x81,0xe6,0xc3,0xd9,0xdb,0x05,0x19,0x7c
db	0xb4,0x4d,0xef,0x71,0x22,0x53,0x97,0x8a,0xc9,0xe3,0x69,0x20,0x5b,0x83,0xb1,0x44,0xd7,0xd1,0x1e,0x87,0xa7,0xbf,0xe4,0x84,0x68,0x9c,0x77,0xfe,0x83,0xdb,0x7a,0x53,0xa8,0x53,0x1f,0xc7,0xd1,0x6a,0x26,0x87,0x71,0x06,0x23,0xa7,0xe0,0x18,0x5d,0xfa,0x8c,0xa7,0x24,0xee,0xf6,0x74,0xab,0x17,0xd3,0x46,0x33,0xe9,0xc3,0xcd,0xa6,0xaf
db	0xcf,0xa1,0x60,0x75,0x7b,0x77,0xc3,0x58,0xa2,0xe8,0x87,0x7b,0x4b,0x57,0xb1,0x96,0xc1,0x91,0x6d,0xbf,0x71,0xb3,0xbf,0xe2,0x62,0x86,0x72,0xa9,0x01,0x64,0x62,0x32,0x33,0xc8,0xa4,0x26,0x7d,0xfa,0x0d,0xd4,0xd8,0xc3,0xaa,0xc0,0xc8,0x7c,0x51,0xe8,0x10,0x08,0x6f,0xf6,0xc1,0x46,0x89,0xc4,0xd2,0x00,0x1d,0x14,0x05,0x89,0x64,0x52
db	0xcd,0x1f,0x97,0x0b,0x1d,0x94,0xbe,0x9d,0xa0,0x6b,0x03,0x9b,0x83,0x87,0x38,0x0f,0x65,0xdd,0x6a,0xaf,0xf1,0x22,0x74,0x7e,0x11,0xa0,0xdf,0x1e,0x95,0xef,0x1a,0xdc,0x8b,0x29,0x4a,0xbe,0xfd,0x2f,0xc7,0x48,0x94,0x3f,0xb9,0x8c,0x8e,0xe1,0x0c,0x54,0xa6,0x2f,0xa5,0x2b,0x71,0xdd,0x16,0x68,0x91,0x35,0xd0,0x22,0x48,0x1f,0xf2,0xe2
db	0xe8,0x57,0x83,0xd7,0x49,0x43,0xfd,0xf9,0x77,0xb5,0xfa,0x70,0x19,0xeb,0xae,0xf6,0x31,0xfe,0xd6,0x81,0x6c,0xcc,0x14,0x28,0xa6,0x9f,0x74,0x56,0xc5,0xf6,0x51,0xba,0xc8,0xbd,0x32,0x80,0x5f,0xdb,0x28,0x3f,0x4a,0x55,0x01,0xe1,0x39,0xf5,0x9c,0xda,0xb3,0x42,0xee,0x43,0x17,0xc3,0xc7,0xf5,0xd1,0xda,0xd2,0x2e,0x56,0xcf,0x77,0x0e
db	0xdd,0x72,0xcf,0xe5,0xab,0xfb,0xd6,0xa2,0x6c,0x03,0xa6,0x77,0x25,0xf8,0x2a,0x8c,0xfa,0x6f,0x45,0x79,0x59,0x84,0x92,0xd1,0x00,0x58,0xc7,0xb8,0x95,0x4d,0xc8,0x49,0xad,0xe0,0x1e,0x64,0x47,0x00,0xfb,0x93,0x7f,0x3e,0xf1,0x65,0x70,0x47,0x64,0xbb,0x36,0x63,0xe3,0x09,0xcb,0xdb,0x5a,0xd1,0x72,0x83,0xfd,0x15,0x91,0xa2,0x03,0x81
db	0x04,0x98,0x45,0x0f,0x7f,0x23,0x48,0x6c,0xb1,0x2d,0xd0,0x2c,0x61,0x52,0x1b,0x4a,0x52,0x08,0x92,0xe1,0x7a,0xf1,0x8c,0x1f,0x1f,0xdf,0x1c,0xfd,0xd9,0x46,0x99,0x71,0x05,0x58,0x71,0x82,0x5c,0x05,0xa0,0xb2,0x6a,0x50,0xd2,0x6e,0x35,0xf4,0x6c,0xfb,0x50,0x99,0xb3,0xc1,0x2b,0x05,0xaf,0x02,0xe5,0x18,0xfa,0x74,0x09,0xcc,0xa5,0x2c
db	0x26,0xfd,0xc5,0xe7,0x2c,0x96,0x0f,0xa4,0x7c,0x88,0xc6,0x7f,0xf9,0x74,0x9d,0x1c,0xe5,0xd2,0x27,0xf0,0xae,0x5b,0x4c,0xbf,0x0a,0x99,0x2e,0xaa,0x54,0xba,0x0d,0x75,0xd9,0x48,0x76,0xf3,0xe9,0xd9,0x01,0xbe,0xaa,0x97,0x09,0xfe,0xb2,0x4a,0xcb,0x55,0xd0,0xe1,0x58,0xec,0x31,0x0c,0xd9,0xdf,0xd9,0x01,0xf9,0x3c,0x28,0x40,0x91,0xbb
db	0x4d,0x2d,0x88,0x60,0x31,0xc7,0xc9,0x1d,0xaf,0x22,0x44,0x21,0x05,0x06,0xdd,0x07,0x60,0x29,0x7d,0x49,0x30,0x9d,0x35,0x1d,0x9f,0x37,0xbd,0x32,0xb2,0x21,0xa6,0x4f,0x89,0xd8,0xe6,0x85,0x44,0xcf,0x13,0x12,0x4f,0x5f,0x50,0x71,0x01,0x39,0xff,0x6e,0xa0,0x07,0xff,0xf0,0xa6,0x3b,0x39,0x59,0x17,0xae,0x93,0xb2,0x86,0xcc,0xe5,0x59
db	0x5a,0xf2,0x82,0x62,0xc6,0x8d,0x13,0x2f,0x6b,0x92,0x28,0xbe,0xd1,0xc0,0xf6,0xc9,0xe1,0xd6,0x98,0x94,0x65,0xd4,0x2a,0xdb,0x37,0xb1,0xd3,0x83,0xf2,0xaa,0xa5,0x00,0xf9,0x08,0xe6,0x22,0x38,0x30,0xb6,0x49,0x8d,0x9d,0x1c,0xa4,0xf7,0xdb,0x3c,0x6f,0x75,0x08,0xa0,0xda,0xe9,0xc0,0x01,0x54,0x09,0x68,0xc6,0x7c,0x5b,0x4d,0x88,0x71
db	0xa7,0x2f,0xb3,0x50,0x18,0x4a,0xfb,0x55,0x29,0xf2,0x56,0x1d,0x4c,0x12,0x22,0x1c,0x54,0xd2,0x63,0x67,0xfa,0xe9,0x5b,0x74,0x3b,0x38,0xf6,0xa0,0x85,0x63,0x1c,0x41,0x6a,0x6d,0x71,0x1d,0xb1,0x39,0x28,0x88,0x96,0x9b,0x9c,0x50,0x9e,0x57,0x4e,0xf5,0xa7,0xf4,0x17,0xc6,0xca,0x42,0x84,0x83,0xca,0xa4,0x28,0x72,0x08,0x74,0x62,0xe1
db	0xf0,0x73,0xc5,0x86,0x6c,0x76,0x9d,0xd3,0xa6,0xb8,0x5d,0x73,0x1b,0x02,0xe2,0x69,0x8b,0x59,0xd6,0x6a,0x53,0xe9,0x13,0x88,0x41,0x95,0xe9,0x97,0x5f,0x07,0x62,0xa5,0x21,0x97,0x7e,0x5e,0xc2,0x2c,0xc7,0xaf,0x0a,0xdb,0x9e,0x4f,0x44,0x4b,0xd6,0x3d,0xc0,0x24,0x38,0x50,0x47,0x98,0xa3,0xfc,0xda,0xfc,0xae,0x0e,0x2b,0x9b,0x53,0x0f
db	0x6b,0xb1,0x2f,0xd5,0xd7,0x68,0xc9,0xab,0xb9,0xff,0x7f,0x54,0xd6,0x2f,0x88,0xbc,0x5e,0x6a,0x22,0x49,0x0f,0x98,0xbe,0x1f,0xef,0x3e,0xcc,0xa2,0x72,0x6b,0x16,0xbe,0xe8,0x5f,0x0e,0x36,0xa2,0x68,0xe0,0x65,0xd9,0x7c,0xdc,0x8c,0x6a,0x66,0xf0,0x6a,0xfc,0x2b,0x85,0x28,0x2a,0x1a,0xfc,0x92,0x64,0x3d,0x38,0x5b,0xc1,0x0c,0x68,0x45
db	0x94,0x85,0x58,0x82,0x99,0xfc,0x20,0xdd,0x62,0xae,0xed,0x35,0x7c,0x02,0x16,0x9b,0x00,0x8a,0x44,0x02,0x80,0x00,0xca,0x7d,0x95,0x03,0x5d,0xa6,0xec,0xe1,0x0c,0x50,0x34,0x61,0x55,0xee,0xb5,0x11,0xff,0xc3,0xaa,0xf2,0xbc,0xa3,0xa9,0xc7,0x6b,0x16,0xab,0x56,0x7b,0x55,0x54,0x95,0x88,0x15,0x15,0x6a,0x2c,0x97,0xd7,0x7c,0x26,0x65
db	0xaf,0x8d,0xd1,0x05,0x57,0xb2,0x63,0xd1,0x22,0xf7,0x7d,0x77,0x54,0x6c,0x87,0x03,0x1f,0x0e,0x2b,0xae,0xa6,0xa4,0xb5,0xd6,0x95,0x34,0xd0,0x62,0x4e,0xfb,0xcb,0xee,0x01,0xc1,0xf7,0x36,0x94,0xa6,0x54,0x94,0x90,0x0e,0x45,0x9c,0x95,0x89,0x96,0x88,0x32,0x90,0x27,0x48,0xc5,0x96,0xf0,0x7e,0x7f,0x69,0x99,0xdf,0x7b,0xfb,0x2b,0x7b
db	0x38,0x10,0x6b,0xd1,0x1a,0xfb,0xf2,0xcd,0x2d,0x8b,0x47,0x21,0xca,0x92,0x64,0x28,0xd1,0x53,0x1d,0xed,0xa7,0x7d,0xa4,0x88,0xab,0xd0,0xfe,0x9b,0x2b,0xf8,0x48,0x94,0x8d,0xd5,0xfa,0x5c,0xef,0x12,0x43,0xdf,0xb6,0x5b,0x83,0x43,0xf3,0xf7,0x1d,0x6f,0x3e,0x44,0xe6,0x20,0xd8,0xbc,0x4a,0x9a,0xed,0xa0,0x79,0x66,0x8d,0x23,0xca,0x35
db	0x15,0x87,0x11,0x50,0xa4,0x40,0x6e,0xfa,0xf7,0xaf,0xa2,0xb7,0x3b,0x9b,0x8b,0x44,0x19,0x90,0xb3,0x47,0x92,0x08,0x2f,0x0c,0xe2,0x95,0x5d,0x80,0xb5,0x93,0x5e,0x1c,0xb5,0xce,0x52,0x0b,0x12,0xc1,0x72,0x2e,0x66,0x8c,0xd1,0x13,0x94,0x36,0xf7,0x17,0xe3,0xad,0x69,0xc9,0x2d,0x21,0x64,0xcd,0x8f,0x2d,0x8f,0x0c,0x85,0xa5,0x23,0x8b
db	0x6c,0x00,0x13,0xf7,0x6a,0xb4,0x68,0x1a,0xcc,0xc4,0x03,0x5b,0xd6,0x7b,0x5b,0x34,0x90,0x34,0x3e,0x0a,0x07,0x19,0x81,0x99,0xe9,0xd2,0xa8,0x73,0x2c,0xa2,0xcf,0xdf,0x29,0x69,0xbf,0xec,0xdd,0xa5,0xd3,0x16,0xb0,0xd2,0x9c,0x2f,0xeb,0x70,0x50,0x20,0x3c,0x22,0x1a,0x5b,0x55,0x79,0x76,0x0f,0x1f,0xd0,0x34,0xa9,0x55,0xad,0x75,0x75
db	0x7f,0xa7,0x9b,0xa7,0x3d,0x5d,0x73,0xce,0x91,0xf6,0x9b,0xcd,0xa5,0xee,0x48,0x44,0xba,0xd5,0xad,0xbe,0x1e,0xc6,0xd2,0x8b,0x05,0x21,0x20,0xb5,0x7d,0x78,0x88,0x10,0x20,0x85,0x90,0x8f,0x47,0x74,0x68,0xe6,0x32,0x2a,0x13,0x7a,0xb3,0x5d,0xfe,0x24,0x97,0xd1,0x65,0x55,0x60,0xb3,0x88,0xfb,0x59,0xc9,0x29,0x70,0xf1,0x45,0xbd,0xbe
db	0x4d,0x01,0x4e,0x5e,0x5f,0x99,0x52,0xf8,0x5f,0x38,0xcf,0xa8,0x5d,0x69,0x54,0x87,0x72,0x41,0xca,0xc4,0x63,0xc1,0x52,0x58,0x66,0x8b,0xda,0x8b,0x61,0xd1,0xab,0x7d,0x8d,0xfe,0x51,0x8d,0xf6,0xd0,0x21,0x4d,0x0b,0xc5,0xea,0x74,0xcd,0x21,0x93,0x4a,0x91,0xe5,0x3f,0xce,0x35,0x3b,0x3f,0xc0,0xab,0xa4,0x23,0x76,0xd1,0x8c,0xa7,0xbe
db	0x15,0xab,0x8e,0xd7,0x0d,0x86,0xac,0xc3,0x06,0xff,0x33,0xf2,0x41,0x6f,0x69,0x58,0x49,0xd1,0x73,0xcf,0x5e,0x4e,0x1e,0x46,0x12,0xfa,0x30,0x0d,0x4b,0xb1,0xfb,0xc6,0xe6,0x0d,0xcd,0x8d,0xca,0x34,0x28,0x5a,0xed,0x85,0x55,0x31,0xee,0xba,0xbf,0xa4,0x6f,0x9c,0x7d,0xeb,0x4b,0x1b,0x73,0xea,0x4e,0xb9,0x62,0x5d,0xac,0xe3,0x53,0xdf
db	0x27,0x87,0x2f,0x39,0xca,0x5b,0xd6,0x72,0xcf,0x95,0xc6,0x2a,0xa5,0x3f,0x57,0xfd,0xdc,0xa9,0x4a,0x86,0x0f,0xcd,0xd5,0xea,0xfe,0x85,0xeb,0x9b,0x84,0xc6,0xf7,0xba,0xc2,0x37,0xbc,0x18,0x85,0x49,0xa6,0x7f,0xd9,0x3e,0xfb,0xf0,0x0c,0x39,0xe3,0x1c,0x06,0xfe,0xb6,0x49,0xa3,0x8b,0x72,0x2b,0x39,0xa1,0x48,0xfd,0x1f,0xfe,0xa4,0xf7
db	0xcc,0x7a,0xef,0x64,0xa0,0x0d,0xeb,0x78,0x71,0x8c,0xd6,0x59,0x7c,0xf4,0xaa,0x81,0x7a,0x89,0xe6,0x22,0xc9,0x57,0xe8,0x13,0x9c,0xca,0xc4,0x6f,0xb5,0xbf,0x08,0x31,0x93,0x56,0x2a,0x82,0x00,0x95,0xdc,0x4b,0xfd,0x9b,0xc7,0x8b,0x31,0x72,0xa0,0xff,0xbe,0xb4,0xd6,0x07,0x16,0x0a,0x4a,0x0a,0x96,0x02,0x83,0x53,0x2a,0x4d,0x33,0x72
db	0x1f,0x20,0x20,0xc3,0x63,0xee,0x4e,0x05,0x90,0x7d,0x21,0xd0,0xf1,0xda,0xde,0x0d,0x4a,0x59,0xb9,0xca,0x81,0xe3,0x1f,0x83,0x19,0xdc,0x09,0x03,0x5f,0xaa,0xee,0xbc,0x5a,0xfa,0xc6,0x4d,0x3d,0xfe,0xfe,0xf3,0xdb,0xc3,0x77,0x31,0x74,0xb4,0x94,0xb5,0x09,0xb1,0xb5,0x13,0x47,0x2e,0x4f,0x3b,0x38,0x83,0xf5,0xfc,0xe9,0xcc,0x45,0xea
db	0x5b,0x88,0x21,0xba,0x53,0xc5,0xf6,0xd4,0x63,0xc5,0x37,0x1d,0xa1,0x42,0x2e,0x9c,0x9a,0x50,0x2c,0xfe,0xdb,0xf6,0x31,0x36,0x5f,0x9d,0xed,0x63,0x42,0x20,0xdd,0x27,0xe5,0x34,0x3c,0x0f,0x06,0x8b,0x8f,0x32,0xb6,0x47,0xce,0x07,0xcb,0x27,0xc1,0xb7,0xfe,0xb2,0x69,0x81,0x79,0x20,0xd7,0x47,0xbb,0xab,0x61,0x5f,0x09,0x99,0xdf,0x9f
db	0xde,0x59,0x33,0x75,0xd1,0xcc,0xfe,0x92,0x79,0x1f,0x2d,0x59,0x88,0xef,0x4b,0x80,0x0c,0x38,0xa3,0xb1,0xef,0xae,0x53,0x84,0x2f,0xbd,0xd3,0x0c,0xcf,0xd5,0xf7,0xb7,0x6f,0xa7,0x22,0x1f,0xf1,0x56,0x76,0x0c,0x78,0x52,0xa3,0xc0,0xd0,0x2f,0xbc,0xdf,0x29,0x0d,0xa8,0x54,0x0d,0x2b,0x65,0x1b,0x7f,0xeb,0x21,0x22,0xaf,0x10,0xc1,0xd6
db	0x30,0xa8,0x2f,0xb1,0x25,0xbf,0xdc,0xee,0xe9,0x35,0x40,0x69,0xa0,0xa0,0x27,0x85,0x2e,0x18,0xc1,0x36,0x24,0xc5,0x96,0x9a,0x85,0x3f,0xbb,0xfd,0xf5,0x02,0xa2,0xa1,0x92,0x3c,0x16,0x48,0x9f,0xc5,0x00,0x7c,0x7b,0xaf,0x31,0xba,0x68,0x0e,0x58,0x88,0xf4,0x10,0xb9,0xa6,0xe0,0x46,0x2a,0xb8,0x8d,0xc7,0x8e,0xad,0x7c,0xec,0xd2,0x74
db	0x92,0xfe,0x1b,0xd0,0x73,0x79,0x0b,0x4e,0xcc,0x2d,0x5c,0xe7,0x80,0x2d,0x21,0x1c,0x97,0xfc,0x2a,0xc9,0x9c,0x07,0x10,0x64,0x8b,0xf7,0xf5,0x1c,0x54,0xb6,0x6c,0x73,0x1c,0x50,0xd3,0x1a,0x2a,0x63,0xcb,0xba,0xd3,0x95,0xe2,0xa6,0xc3,0xca,0x45,0xfd,0x5e,0x1b,0xbb,0x6b,0x4d,0xb3,0xf7,0xfd,0xaa,0xf9,0x73,0xb8,0x74,0x4d,0x36,0x7e
db	0xcc,0xaa,0x1e,0xf3,0x20,0x68,0xa5,0x0c,0x03,0xe3,0xbe,0xee,0x82,0x03,0x8d,0x10,0xa6,0xf6,0x6c,0x73,0xc2,0x9d,0x74,0xba,0x57,0x17,0xd7,0xfa,0x85,0xf5,0x1e,0x3d,0xf8,0xc7,0x80,0xef,0xcd,0xf0,0xf4,0x46,0xfc,0x07,0xb5,0xc4,0x5f,0xd2,0x04,0x6a,0x90,0xf5,0x76,0xb6,0xf9,0x73,0x22,0xa6,0x09,0x2f,0xbf,0xb5,0x93,0x9a,0x95,0x05
db	0x95,0xaa,0xf9,0x8c,0x71,0xd6,0xc6,0xd9,0x72,0x50,0xf6,0x58,0x77,0x09,0x47,0x97,0x21,0x42,0xf0,0x30,0x5c,0x3c,0xec,0x60,0x67,0xdf,0x5e,0xd2,0xed,0x0f,0xab,0x25,0x11,0xbb,0xf8,0x34,0x1e,0xbd,0x7f,0xc6,0x52,0x19,0xf5,0x53,0x28,0x46,0x75,0x93,0xce,0xc2,0x0b,0xdf,0xfd,0xa5,0xf1,0xb0,0xa2,0x0b,0x97,0xb5,0x76,0xb4,0x8a,0x2b
db	0x82,0x55,0x23,0x29,0xc2,0xd3,0x32,0x94,0x2f,0xf0,0xe6,0x77,0x2c,0xe4,0x6a,0x7f,0xd7,0xee,0x84,0xfb,0xba,0xb8,0x4b,0xae,0x13,0x34,0xbd,0xa8,0x12,0x7a,0x3c,0x28,0x40,0x74,0x5d,0x9a,0x11,0x1a,0xe9,0x74,0x31,0x28,0x3d,0x3d,0x64,0xb7,0x54,0xa0,0x51,0x0d,0xed,0x97,0x94,0x56,0x7a,0x48,0x8e,0x36,0xc9,0xae,0x5f,0xc6,0x79,0x45
db	0x4f,0x07,0xdd,0x13,0x52,0x8b,0xfc,0x3b,0x73,0x44,0x68,0x64,0x51,0x0d,0x95,0x6f,0x0f,0x94,0xba,0xf8,0x40,0x64,0x51,0x43,0x49,0x63,0xc1,0xbd,0xf3,0x39,0x7f,0x6e,0x6f,0x45,0xeb,0xd2,0x33,0x44,0x2d,0x10,0xb4,0x68,0xcb,0xcb,0x8c,0x84,0xc5,0xd4,0x63,0x1d,0x23,0x85,0x30,0x4d,0x6c,0xfc,0xc9,0xa4,0x8c,0xd2,0x42,0x69,0x2f,0x17
db	0x86,0xf0,0x17,0xd0,0xb2,0xaa,0xfd,0x62,0xcb,0xb4,0xfd,0xba,0x29,0xf8,0x85,0x45,0x84,0x9d,0xae,0xf8,0x9c,0x8f,0x64,0xd5,0xb8,0xb6,0xa9,0x64,0xf9,0x39,0x86,0x68,0x29,0xac,0x32,0x87,0x84,0x6c,0xb0,0x09,0xd2,0xdd,0xf2,0xec,0xa1,0x3a,0xfd,0x11,0x37,0x54,0x67,0x29,0x62,0x25,0x62,0xe8,0x6a,0x4b,0x5e,0xde,0x9a,0xf0,0x97,0x73
db	0x66,0x69,0x2a,0x21,0xbe,0x95,0x86,0xca,0xf9,0x17,0xe9,0x4b,0x23,0x83,0x1e,0x8c,0x37,0x47,0x91,0x03,0x3f,0x9f,0xb8,0x60,0x2c,0xdd,0x82,0xbd,0x2a,0xc3,0xe7,0x30,0x8f,0x91,0x2b,0xa4,0x23,0x01,0x03,0xb2,0x8b,0xbd,0xd2,0x1d,0x16,0xf7,0x6a,0x86,0xa8,0xe4,0x54,0x6f,0x9c,0x47,0xa5,0x0f,0xbe,0x94,0x56,0xfa,0x18,0x69,0xbe,0x92
db	0xe9,0xf8,0x24,0x4d,0x65,0x42,0x81,0x1f,0x85,0x52,0xb7,0xc9,0x49,0xde,0xa5,0x4c,0x8f,0x0d,0x5f,0x12,0x68,0x68,0x35,0xce,0x29,0x22,0x5c,0x55,0x3e,0xbd,0xce,0xf2,0x2a,0xec,0x7e,0xe1,0x29,0x0a,0x88,0xf3,0x5e,0xeb,0x27,0xe5,0x52,0xee,0x72,0x37,0xba,0xff,0x82,0x97,0xa9,0x5d,0x77,0x6f,0xb9,0xc3,0xa7,0x73,0xba,0x7f,0x2f,0x7a
db	0x19,0x32,0x87,0x56,0xa2,0x89,0xb2,0xb4,0x48,0xbe,0x2e,0x30,0x89,0x0a,0x8f,0x75,0x25,0x25,0x5c,0x46,0xe8,0x02,0x45,0xcb,0x03,0xd1,0xa3,0xeb,0x70,0x71,0x08,0x1c,0x46,0xf1,0x2c,0x43,0xe2,0x44,0x30,0x6a,0x61,0x31,0x45,0x3e,0xbb,0x47,0x33,0x24,0x25,0x13,0xeb,0xf7,0x24,0x66,0x15,0x4c,0xf3,0x07,0x2f,0xff,0xdc,0x37,0x0f,0x71
db	0x85,0xc8,0x56,0xa7,0x2a,0x22,0x87,0x8b,0xae,0x35,0x31,0x29,0x96,0xf0,0x81,0xfb,0x2c,0xbf,0x44,0x69,0x69,0x9a,0x77,0xfd,0xc0,0x2b,0x42,0x16,0x67,0xd6,0xbd,0xd0,0xf1,0xb9,0x40,0x8f,0xd2,0x9a,0x1b,0x2c,0x64,0x78,0x6b,0xda,0x37,0x26,0xae,0x4c,0xee,0x36,0xaf,0x84,0x61,0xe4,0x93,0x22,0x64,0xaf,0xee,0x6d,0x69,0x5c,0xe5,0x85
db	0xd8,0xcc,0xcf,0xf3,0xe8,0x05,0xcd,0xd2,0x09,0x66,0xaf,0xbb,0xc4,0x79,0xb2,0xa7,0xa5,0x09,0xd9,0xf5,0xa2,0x83,0x4f,0xd5,0xf5,0xf3,0x7d,0x7a,0xab,0x94,0x83,0xb3,0x15,0xfb,0x0d,0x1a,0x1d,0x77,0xc5,0x63,0x0b,0x54,0xde,0xa8,0x0d,0xc4,0x16,0xe3,0x89,0xeb,0xa3,0x1b,0xd4,0x77,0x13,0xe3,0x55,0x98,0x15,0xab,0x3b,0x32,0xc8,0xd4
db	0x0c,0x91,0x80,0x57,0xf7,0x1e,0x24,0xd0,0x56,0x78,0x29,0xd2,0x03,0xe7,0xc4,0xd2,0x09,0xca,0xee,0x9b,0x60,0x5f,0xa1,0xfd,0xaa,0x85,0x4b,0x68,0x35,0xa4,0x3b,0xef,0x29,0xb8,0x49,0x85,0xee,0xbb,0x39,0xc0,0xc6,0x99,0x97,0xc6,0x86,0x6c,0x27,0xf9,0x1a,0x19,0x6e,0x7c,0xae,0x75,0x41,0x0d,0x08,0x1e,0xf0,0xb4,0xc3,0x9e,0xdb,0x40
db	0x86,0x94,0x9d,0x90,0x09,0x3f,0xdc,0xb9,0xfc,0x59,0x41,0xc5,0x5b,0x89,0x97,0x49,0x4a,0x1a,0x06,0x68,0x83,0xd8,0x7e,0x09,0x51,0xe1,0x86,0xd8,0x88,0xbe,0x8a,0x36,0x48,0xb3,0x83,0x7b,0x57,0xdd,0x8f,0x18,0x67,0x4a,0x7d,0x68,0xab,0xb9,0x05,0xf0,0xe4,0x27,0x4e,0x33,0x44,0xa7,0x13,0x04,0x94,0xc5,0x57,0xaf,0x36,0x03,0xe8,0x09
db	0x36,0x5b,0xe8,0x92,0xad,0x0a,0x79,0x02,0x24,0x43,0x62,0xc7,0xa5,0xce,0x7c,0xac,0x6d,0x0a,0xf2,0x83,0x33,0x05,0x3b,0x6f,0x9d,0xda,0x96,0x9f,0x8b,0x79,0x3e,0x6c,0xd6,0xba,0x7f,0xea,0x84,0xd8,0x23,0xb6,0x92,0xc3,0x9c,0x7f,0x0d,0xcb,0x7b,0x9f,0xbd,0xc2,0xf5,0x6f,0x71,0x67,0x5f,0x0b,0xd1,0x73,0xb5,0x8c,0x46,0x07,0xcd,0xd8
db	0xee,0x28,0xcf,0x8f,0x8e,0x5c,0xde,0x14,0x78,0xc7,0x60,0xd5,0xf4,0x49,0x97,0x46,0x5f,0x49,0x4a,0xb4,0x8f,0xc9,0xd1,0x52,0x34,0x01,0x29,0xa1,0x46,0x55,0xf8,0x29,0x53,0xbb,0x32,0x1e,0x4b,0x89,0x96,0x53,0x0b,0xf2,0x16,0xf9,0xa7,0x70,0x93,0x59,0x78,0xc0,0x77,0x78,0x9f,0x6c,0xb3,0x0e,0x3f,0x6f,0x40,0x09,0x1d,0xd6,0x66,0x4e
db	0xe8,0xb0,0xa1,0x14,0x65,0xc8,0xc7,0x3f,0xd2,0xf0,0x1f,0xfd,0x51,0xe0,0x29,0xd6,0x39,0x26,0x60,0xfe,0x62,0xc2,0xe4,0x45,0x6d,0x01,0xdb,0xd3,0x7c,0xdf,0x48,0x10,0x2f,0xf2,0x8e,0x6c,0xc6,0x58,0xc3,0x7d,0x26,0xb1,0x9d,0x52,0x02,0x2a,0x5f,0x2b,0x57,0xca,0x84,0x9d,0x74,0x31,0x01,0x0f,0xda,0x3d,0x7c,0xbb,0xdc,0x71,0x82,0x8b
db	0x42,0xaf,0x49,0x9e,0x2c,0xe8,0xdc,0xa1,0xfb,0x23,0x6d,0xdb,0xdc,0x36,0x01,0xc9,0xb3,0x93,0xd4,0x2e,0x8b,0xd1,0xe4,0xed,0x1b,0xd0,0x4c,0xeb,0xaf,0x96,0x57,0xde,0xee,0x90,0xf4,0xa7,0x58,0x46,0x8a,0xd4,0xa9,0x44,0xe0,0xb3,0x13,0x96,0xb2,0x8a,0xb0,0xd3,0xbe,0x71,0x38,0xb7,0x35,0xa9,0xa8,0x48,0x37,0xa3,0x11,0x0e,0x61,0x36
db	0x6c,0xaf,0x6c,0xf2,0x3f,0xd6,0x55,0xb3,0xa5,0xe0,0xaf,0x18,0x6a,0xf5,0x78,0xb5,0x7c,0xc7,0x48,0x24,0x6c,0xea,0x1e,0x7f,0x52,0xb4,0xe8,0x72,0x46,0xd2,0xbd,0x1c,0x9e,0xe6,0x5b,0x3e,0x9c,0x6c,0x6c,0x6b,0x45,0x0c,0x3a,0xb7,0x67,0x3c,0x8e,0x77,0x77,0xbf,0x50,0xb6,0x30,0x6e,0xe1,0x28,0x0d,0x2a,0x85,0x44,0xf8,0xbb,0xf1,0x14
db	0x89,0xaa,0xc2,0x27,0xf5,0x8e,0xa1,0xd3,0x07,0xba,0xe8,0x03,0xcf,0x27,0x1c,0xa6,0xc4,0x63,0x70,0x40,0xe7,0xca,0x1e,0x05,0xb7,0xb7,0xdc,0xc0,0x07,0x4c,0x0d,0x21,0x12,0x60,0x02,0xe3,0x86,0x65,0xe7,0x1c,0x42,0x86,0xdd,0xdb,0x7f,0x26,0x60,0x01,0x3d,0xd8,0x18,0xcd,0x7a,0x9f,0xf8,0xb2,0xf6,0x6d,0xd3,0xe0,0x57,0x1f,0x80,0x30
db	0x2d,0x5e,0x71,0xdf,0x4d,0x7f,0xcd,0x63,0x77,0x19,0x5e,0x2d,0xd5,0xb5,0xfa,0xa9,0x26,0x02,0xb9,0x62,0x2b,0x57,0x80,0x0a,0xe9,0xbc,0xa4,0x3b,0xa7,0xf1,0xf3,0x77,0x2b,0x6b,0x41,0x5e,0xf7,0xe8,0x66,0x23,0x63,0xac,0xcd,0x58,0xfc,0xa9,0x97,0x6b,0x5a,0x1e,0xe5,0x7d,0xfd,0xb1,0x42,0x7f,0x99,0xdd,0x60,0xaf,0x39,0x46,0x36,0xdd
db	0xc2,0x70,0x83,0x53,0xd1,0xc3,0x69,0xc8,0x90,0x0e,0x2b,0x34,0xb2,0x0c,0xb9,0x7a,0xb8,0x6b,0x7c,0xc2,0xf3,0xae,0x41,0x24,0xb8,0x94,0x5f,0xdd,0xce,0xda,0x95,0xda,0x49,0x81,0xb6,0xf8,0xa9,0x8e,0xb3,0x79,0xf8,0x55,0xf9,0xcf,0x8c,0x24,0x99,0xfc,0x6b,0x15,0x0f,0x39,0xac,0xd0,0x3e,0x89,0x9d,0xc2,0x46,0x8c,0x99,0x45,0xfd,0xce
db	0x13,0x4c,0x9c,0xc8,0x80,0x87,0x8f,0x7b,0x28,0xe3,0x5e,0x2b,0xe3,0x89,0x7e,0x13,0x52,0x52,0xe9,0x3a,0xed,0x33,0xe7,0x28,0xc7,0x7a,0x48,0x8d,0x0e,0xee,0x24,0xc4,0x61,0x04,0x3c,0xd4,0x7e,0xf3,0x30,0x22,0x07,0x58,0xae,0x02,0xc5,0xd1,0x7d,0x04,0x18,0xca,0xd6,0x04,0xd4,0xc5,0xa4,0xff,0x8d,0x0d,0x68,0xd4,0x1a,0x3a,0x72,0x6f
db	0x41,0x1e,0xda,0xc0,0x97,0x7c,0x55,0x2c,0x13,0x20,0x9a,0x07,0x35,0xcc,0xc5,0x83,0xee,0x41,0x77,0x51,0x28,0x07,0xe0,0x81,0xe3,0x9b,0x1f,0xdb,0x73,0x5c,0x8d,0x82,0xa2,0x8b,0xf4,0x92,0x4f,0x70,0xa8,0x6a,0xcf,0xbf,0xcf,0x0b,0x71,0xbc,0xeb,0x81,0xb4,0xc9,0x65,0xe7,0x43,0xef,0x25,0x45,0x27,0xea,0xcd,0x60,0x68,0xcd,0x2d,0x7a
db	0xfd,0x88,0x6d,0x06,0xd5,0x92,0x32,0xc3,0x18,0x88,0x64,0xa7,0xde,0x39,0xeb,0x0b,0x5c,0x9c,0xf6,0xf6,0x93,0x90,0x24,0x0c,0x9e,0x0b,0x89,0x1c,0xcb,0xc8,0x96,0x72,0x17,0xae,0x46,0x61,0x69,0x6e,0xbe,0x6c,0xf1,0xa4,0xa4,0x50,0xa9,0x2a,0x47,0xd7,0x80,0xe4,0x72,0xd2,0x3f,0x1a,0xdd,0x82,0xdc,0x12,0x66,0x10,0x26,0x15,0x80,0x56
db	0x4d,0xbe,0x02,0xae,0xe1,0x24,0x8a,0x41,0x52,0xc8,0x5d,0x8d,0x62,0x85,0xbe,0x7c,0x35,0xdd,0x88,0xd3,0xf5,0xf7,0x9b,0xf1,0x5a,0x4e,0x70,0x48,0x31,0x5a,0xaa,0x96,0x1e,0xf8,0x73,0xb4,0x0f,0xb2,0x82,0xf4,0x13,0xac,0xba,0x3b,0x12,0x36,0x1e,0x23,0xbf,0x09,0x8a,0x1c,0x96,0x47,0x56,0x2d,0x16,0x24,0xc3,0x23,0x65,0xe2,0x99,0xd0
db	0xf0,0xa0,0x2c,0x64,0x35,0xad,0x16,0x34,0x67,0x52,0xbc,0x8f,0x17,0x90,0xf9,0xc7,0x4f,0x64,0x6c,0x75,0x3f,0xd7,0x48,0xa4,0x6b,0x43,0xe6,0x2e,0x7a,0xe3,0x79,0xe8,0x47,0x51,0xe9,0x52,0x36,0x30,0xa4,0x24,0x89,0x00,0xd5,0x77,0xbd,0x34,0x2e,0xa9,0x74,0x02,0x25,0xc0,0x0c,0x10,0x31,0xf0,0xa7,0xcb,0x01,0xed,0x43,0x70,0x15,0xe6
db	0xda,0x01,0xb4,0x7a,0x13,0xbc,0xf1,0x57,0x34,0xb1,0xb7,0xb3,0x26,0x18,0x5f,0x42,0x6b,0xcb,0x78,0x25,0x48,0xe9,0xe6,0xe8,0xf5,0x45,0xa2,0x61,0x97,0x10,0xa5,0x7e,0x7a,0x48,0xf3,0x23,0xa5,0x88,0xc0,0xc4,0xc7,0x3b,0x5c,0x0c,0xfc,0xe0,0xf4,0x68,0x64,0xc6,0x9f,0xd9,0x17,0xcb,0xe5,0xba,0x4a,0xa4,0xe0,0x27,0xf8,0x2b,0x4e,0x67
db	0x13,0xab,0xd2,0xce,0xbc,0x8d,0xdf,0x6e,0x49,0xaf,0x72,0x8a,0x51,0xa1,0x78,0x38,0x0a,0x58,0x2e,0x72,0xec,0x94,0x70,0x8d,0xdf,0x0b,0x5a,0x52,0x81,0xb1,0x9b,0xda,0x2c,0xd2,0x85,0xbb,0x8f,0xb0,0x99,0x64,0x24,0xbe,0x03,0xd9,0x92,0x8d,0x29,0xf3,0x41,0x9c,0xd6,0xef,0xef,0xb2,0x5c,0x22,0x90,0xff,0x27,0x4d,0xb3,0x91,0x72,0x9f
db	0x42,0xca,0x66,0xc5,0x66,0xb7,0x50,0x3e,0x83,0x6f,0x2d,0xe3,0x7b,0x2a,0xc4,0x5a,0x93,0x92,0x80,0xdb,0x1a,0xdd,0xef,0xfd,0x96,0xcb,0x6a,0xd8,0x4a,0xc5,0x6e,0x36,0x4a,0xe4,0x10,0x15,0xb3,0x12,0xb4,0xd9,0x9e,0x37,0x48,0x96,0xcb,0xe5,0x3a,0x4f,0x57,0xa6,0x46,0x2f,0xd3,0x06,0xb8,0x61,0x1c,0x17,0x3a,0xb8,0xad,0x40,0x50,0x57
db	0x10,0xd9,0xd0,0xe9,0x1b,0xe3,0x18,0x8c,0xc4,0xfa,0x08,0x8d,0x82,0x3c,0x22,0x22,0x1b,0x97,0x64,0xa6,0x8b,0x7c,0x70,0x2b,0xa0,0xd8,0x4c,0x64,0xcf,0xbc,0x49,0x78,0xcb,0x92,0x0f,0xe1,0x60,0x12,0x4e,0x92,0x0d,0xaf,0xa4,0x1f,0xe0,0x2a,0xa5,0x69,0xc6,0xa1,0x91,0x5c,0xdd,0xb8,0xae,0xfa,0xc5,0xb9,0x18,0x31,0x81,0x32,0x6e,0x97
db	0x44,0x2a,0xda,0x58,0xcd,0x9e,0x0d,0x57,0xe0,0xe3,0x5f,0x7b,0x04,0xd8,0xc8,0x68,0xf5,0xa2,0xac,0x0c,0x29,0xf0,0x7e,0xff,0x32,0xfb,0x53,0x1a,0xc2,0xe3,0xae,0xa5,0xe4,0x9c,0x50,0xaf,0xf4,0xde,0x0b,0xdd,0x4d,0xfa,0x65,0x3c,0xbe,0x3c,0xb8,0xda,0x88,0xd9,0x6c,0x55,0x58,0xe1,0x4d,0x00,0xa8,0x1e,0xe2,0x3a,0x9c,0x53,0x9b,0xca
db	0xb7,0x5d,0x3a,0x83,0xe0,0xbb,0x95,0xc4,0xd5,0x45,0x48,0xdc,0x12,0xab,0x24,0xfc,0x5d,0x91,0xe1,0xc8,0x0a,0x5c,0x10,0xc4,0xc9,0xaf,0xb6,0x54,0x80,0xfd,0xa0,0x70,0xb9,0xab,0xdf,0x34,0x9f,0x5c,0xff,0xde,0x8e,0xa0,0x0b,0x21,0xcf,0x28,0xc4,0xdf,0x67,0xb5,0xc0,0x20,0x49,0x0c,0x7e,0xe6,0xf7,0x41,0x6b,0x75,0xd9,0x1d,0x3b,0x49
db	0xb7,0x4f,0x01,0xd1,0x20,0x62,0x15,0x1e,0x9f,0x16,0xb0,0xbd,0x30,0x09,0x05,0x00,0x0f,0x25,0x5a,0x37,0xe9,0xa6,0xc6,0xef,0xe5,0x39,0x2b,0xd7,0x6b,0xc5,0x96,0xd2,0xad,0x46,0xaf,0xd3,0xc0,0xfd,0xea,0xff,0x4c,0xaa,0x44,0x48,0x9a,0xdb,0x99,0x44,0x3f,0x4a,0xf0,0x3f,0x81,0x75,0xf2,0x79,0x31,0x3c,0xed,0x56,0xc6,0xf0,0xf1,0x8c
db	0xdb,0x1d,0x6c,0x6c,0xcc,0xfb,0xc2,0x30,0xf6,0x24,0x14,0x69,0xc4,0x89,0x4d,0xd0,0x10,0x77,0x37,0x00,0xe8,0xc9,0xf2,0x32,0xf1,0x43,0x8b,0xe1,0x09,0xc4,0x59,0x17,0xf9,0x20,0x2b,0x01,0x76,0x20,0xb8,0x03,0x84,0xf6,0xd7,0x2e,0xef,0x20,0xa6,0xfa,0x8b,0x74,0x7f,0x4a,0x14,0x33,0xad,0xac,0x45,0x66,0x18,0x2b,0x6b,0xd2,0xb8,0x20
db	0x1a,0xff,0xca,0x25,0x69,0xfd,0xba,0x4b,0x5b,0x9c,0x38,0x35,0x4c,0x30,0xa2,0x24,0x3d,0xbb,0xd4,0xf3,0x67,0x24,0xa5,0x93,0xc6,0xf5,0xb2,0xb4,0xa5,0x04,0x53,0xb6,0xe4,0xc7,0xdc,0xf1,0xe5,0x43,0xb7,0x73,0xaa,0xab,0x5c,0xea,0xcb,0xf1,0xeb,0x5b,0x04,0x7a,0xff,0x0f,0x5e,0xb4,0xd3,0x2a,0x39,0x50,0x1b,0x54,0x1f,0x32,0xd7,0x7c
db	0xea,0x3f,0xee,0xa5,0xc8,0x46,0x48,0x7e,0x75,0x60,0x7a,0x42,0x42,0xd3,0x15,0x07,0x69,0x46,0x1c,0xe2,0x21,0x31,0x94,0x31,0x24,0x9e,0x39,0xab,0x7a,0xf9,0xc2,0x0b,0x2d,0x6b,0x55,0xa3,0x36,0xb2,0x65,0xf2,0x17,0x08,0xde,0x15,0x83,0x07,0x36,0x12,0x54,0x8f,0x0b,0x23,0xa8,0x7e,0xb5,0x57,0x1c,0x9e,0x29,0xd7,0xd4,0x9b,0xc1,0xf6
db	0x94,0x23,0xf3,0x92,0xbf,0xba,0xc8,0xf5,0x78,0x3e,0x67,0x48,0x14,0x3b,0xd4,0xe9,0x8f,0x78,0xc1,0x4b,0x9a,0x59,0x08,0xaa,0x50,0xf4,0x9d,0xc4,0xc3,0x2c,0xbc,0x56,0x2c,0x13,0x30,0x75,0xfb,0xed,0x48,0xab,0x90,0xec,0x64,0x18,0xb5,0xd5,0xb5,0x7f,0xc1,0x7f,0x83,0xf2,0xdb,0xae,0xde,0xf5,0xb5,0x29,0x03,0xbe,0x80,0xb1,0x5d,0x97
db	0xd3,0x7a,0xa4,0xd0,0xe0,0xce,0x04,0xda,0xaa,0x82,0x19,0xc9,0x02,0xb7,0x1c,0xe1,0x66,0xd9,0x3e,0x86,0x6d,0xb5,0xd1,0x35,0x63,0x8e,0x4b,0xc6,0x58,0x41,0xf9,0xb7,0xba,0xf3,0x06,0x91,0xb7,0xa2,0xfb,0xb5,0x5f,0x53,0xf3,0xe0,0xc1,0xf6,0x91,0x66,0xc7,0x93,0x3a,0x0a,0x72,0xb1,0xed,0x36,0x9d,0xde,0x21,0xdd,0x7d,0x0a,0x7b,0x35
db	0x1f,0xc3,0x56,0xde,0xbb,0xcb,0xb2,0x0a,0xb6,0x84,0xce,0xa1,0xc6,0x1a,0x46,0x2f,0x9f,0x48,0xd5,0x98,0x73,0xa4,0xbd,0xbd,0xa3,0xe9,0xc9,0xc4,0x64,0x89,0xb7,0x9c,0x97,0x7c,0x2f,0x88,0x22,0xe4,0x4b,0x71,0x3d,0x2a,0x47,0xee,0xf8,0xfe,0xe0,0xf7,0x03,0x14,0xe6,0x7c,0x9e,0x57,0xbb,0x8e,0xf5,0xea,0x63,0xfc,0x5b,0x18,0x3b,0xa2
db	0xa1,0x4a,0x28,0x82,0x37,0x77,0x5b,0xc4,0xd3,0xc1,0xf2,0x87,0x13,0x2b,0x2a,0xc8,0xac,0x70,0xe1,0x82,0x38,0x9c,0x12,0xa0,0xc4,0x9e,0x6b,0xac,0x33,0x8a,0xe9,0x31,0x6f,0xa1,0x76,0x94,0x48,0xcf,0xbc,0x78,0x22,0x82,0x6a,0xb0,0xb9,0x49,0x71,0xdb,0xde,0x8b,0x90,0x09,0x82,0x4d,0x79,0x17,0xe8,0xcf,0xd8,0x50,0xc3,0x08,0x07,0x81
db	0x5f,0x9a,0x72,0xce,0x0a,0xe4,0x29,0xc9,0xdd,0x95,0x67,0x58,0xa1,0x14,0xec,0xcf,0x2f,0x29,0xcf,0xce,0xb3,0x35,0x54,0x77,0x67,0x56,0xec,0x95,0x68,0xee,0xbf,0x9c,0x9f,0x74,0x78,0x12,0xd5,0x30,0x83,0x28,0xd5,0x36,0x96,0x57,0xa0,0x8d,0x1c,0x99,0x19,0x04,0xaf,0x25,0xe5,0x71,0x83,0x88,0xb0,0x74,0x38,0xdd,0x8a,0xff,0x39,0x7a
db	0xfd,0x34,0x8f,0x9c,0x67,0xa8,0xc8,0x6f,0x13,0x5d,0xf2,0x5b,0x22,0xd3,0x8e,0x63,0x51,0x58,0x9b,0xfc,0xaa,0x89,0x65,0x4e,0x36,0xc4,0xa7,0xef,0x98,0xf9,0xaf,0xcd,0x35,0x8c,0x16,0xbc,0x70,0x4f,0xcd,0x71,0x2a,0xf4,0x13,0xb3,0x3d,0xa3,0x92,0x71,0x45,0xe5,0x9a,0x45,0xbd,0xc5,0x1d,0x82,0x60,0x3a,0x97,0xf3,0x0f,0x96,0x21,0x3d
db	0xe5,0x6e,0xfb,0x9d,0x9b,0xeb,0x15,0xc2,0xa6,0x73,0x76,0xf2,0xcd,0xec,0xfd,0x0f,0xf4,0x3f,0x46,0xc9,0x9c,0x73,0xa1,0x21,0x08,0xdc,0x31,0x00,0xaa,0x95,0x07,0xf0,0x3d,0x51,0x57,0xfa,0x6b,0xc3,0x8e,0xe9,0xa4,0x65,0xdc,0xff,0x57,0xb9,0x1f,0x4f,0xc6,0x6d,0x03,0x00,0xa7,0x19,0xb8,0x24,0xb5,0x3d,0x87,0xcb,0x84,0xb7,0xf5,0xfe
db	0x51,0x16,0x5b,0xc7,0xed,0x4b,0xff,0xa3,0x66,0x17,0x93,0x60,0x69,0x84,0x8c,0x95,0x74,0xa7,0x30,0x2d,0x09,0xf7,0x4e,0x0e,0x2f,0x99,0xda,0x46,0x34,0x0f,0x93,0x90,0x97,0x4c,0xa6,0x25,0x15,0xb8,0x6f,0x1d,0xd5,0xe1,0xc1,0x39,0x50,0xfd,0xd5,0x79,0x4f,0x04,0x2f,0x76,0x50,0x3f,0x67,0x56,0xad,0x02,0x82,0x30,0x1a,0xaa,0x6e,0xe2
db	0x05,0x6a,0x93,0xb7,0xbe,0xde,0x84,0xce,0xd8,0x53,0xed,0xad,0x95,0xab,0x45,0x1f,0x4c,0x3b,0x22,0x36,0x27,0x45,0x19,0xa4,0x7f,0x12,0x20,0x6c,0x9d,0xeb,0xd2,0xfe,0xd6,0x7d,0x25,0xf9,0xe3,0x64,0x77,0x56,0x89,0x12,0x57,0x80,0xd5,0x40,0xbb,0x2a,0xcc,0xac,0x34,0x8e,0x87,0xfd,0x58,0xc3,0xbd,0x92,0x48,0xd8,0x7f,0xc4,0x39,0x6a
db	0x4e,0x1c,0x50,0x93,0xef,0xae,0x81,0x93,0x50,0x95,0x6e,0x46,0x7c,0xf5,0x27,0x44,0x6c,0x21,0x06,0x49,0x89,0x7e,0xf4,0xfa,0x08,0xa5,0xbc,0x0a,0xbd,0xb6,0x7b,0x55,0xac,0x87,0x19,0x33,0xfa,0xab,0xf3,0x15,0xc9,0x1b,0x83,0xf2,0x41,0xf1,0x26,0x6f,0xdf,0x15,0x60,0xdb,0xa6,0x03,0x43,0x3e,0x34,0x7a,0xa9,0xb1,0x38,0x57,0xe4,0x09
db	0x1a,0x4a,0xd8,0x6e,0x28,0xee,0x7d,0x74,0x54,0x03,0xb3,0x29,0x24,0xb3,0xf0,0xc6,0x20,0x7c,0x47,0x01,0x66,0x36,0x7a,0x14,0x18,0x09,0xd6,0xaa,0xa6,0x82,0x5b,0xe4,0x0a,0xf9,0x41,0x52,0x3b,0x56,0xa2,0xf8,0xa2,0xa1,0x2b,0xe0,0x0d,0x1f,0x5b,0xe4,0x0e,0xe1,0x94,0x84,0x6f,0xed,0x2e,0x11,0xfa,0x4a,0xbd,0x41,0xf4,0x3c,0x8c,0x7e
db	0x94,0x46,0xec,0x79,0x81,0xb0,0x36,0xfd,0x9c,0x73,0x0f,0x84,0x1a,0x59,0x4e,0x1b,0xd5,0xd1,0x0d,0xff,0xfd,0xb7,0xfb,0x73,0x35,0x8a,0x66,0xed,0xf3,0xee,0x6d,0xf7,0x86,0x0a,0xb9,0xc0,0xf1,0xa3,0xb7,0x32,0x49,0x01,0xe8,0xcd,0xfe,0x82,0x7b,0xf6,0x46,0xd8,0x73,0x47,0x8b,0x7b,0x6e,0x31,0x92,0x0f,0x4b,0x16,0x11,0x86,0x1d,0x02
db	0x5d,0x12,0x79,0x59,0xdc,0x8c,0xaa,0x1b,0xc1,0x75,0x63,0xb2,0xd6,0xbf,0x19,0xb0,0x81,0x70,0x34,0x12,0xd2,0x09,0xbe,0x6d,0xa1,0x31,0x77,0xd2,0x9b,0x59,0xdc,0xcb,0x67,0xb5,0x14,0xcd,0x37,0x31,0x2c,0xa6,0x17,0x58,0x2b,0x24,0xfc,0x2a,0x9e,0x8f,0x38,0x38,0x7a,0x80,0xda,0x8b,0x54,0x1d,0xc9,0x99,0xc7,0x1f,0x98,0x7a,0x1f,0x32
db	0x23,0x1c,0xb5,0x6e,0x53,0xd3,0x61,0xe7,0x78,0x19,0x6c,0xd5,0x2f,0x85,0xde,0xd1,0x67,0x6b,0x9b,0xa1,0x09,0x87,0x5e,0x89,0x5e,0x89,0x21,0x36,0xf2,0x94,0xc1,0xfd,0x6c,0x4e,0xd9,0x6b,0xd2,0xb1,0x1b,0x48,0x37,0x9a,0x7b,0xc9,0x52,0xfd,0xe2,0x6d,0x07,0x19,0xf2,0xa5,0x69,0xdc,0x0b,0x52,0x8f,0xb3,0x87,0x03,0x1a,0xd8,0x43,0x20
db	0x68,0xcf,0x08,0xcc,0xce,0x37,0xf6,0x96,0x7f,0x03,0x62,0xb2,0xce,0x6a,0xfb,0x22,0x54,0xd6,0xfc,0x84,0x5c,0xf5,0x55,0x32,0x36,0x77,0x1d,0x15,0x6a,0x2c,0x3a,0x01,0x34,0xff,0x5b,0x7f,0x3f,0xab,0x97,0x8f,0xbd,0x1d,0x07,0xb9,0x47,0xb1,0xcc,0xc0,0xdf,0x17,0x38,0x54,0x07,0xc0,0x1b,0xb9,0xa2,0x29,0xa6,0x25,0x73,0x32,0x4d,0x5e
db	0x51,0x60,0xb3,0x27,0xe5,0xb6,0xdb,0x56,0x81,0x95,0x03,0x7e,0xca,0xc6,0x15,0x8f,0x48,0xd4,0xac,0x71,0x41,0xdc,0x9c,0x86,0x5d,0xd8,0x90,0x90,0x54,0xdd,0x3d,0xf3,0xa8,0xbb,0xe5,0x55,0x69,0x26,0xdf,0xd1,0x8e,0x75,0x2a,0xe4,0xfe,0xe0,0x80,0x1d,0x6b,0xd2,0x8a,0x06,0x49,0x4e,0x60,0xf8,0xbd,0x3d,0x99,0x27,0x80,0x27,0x42,0x66
db	0x01,0x32,0xe1,0x9e,0xa6,0xde,0x7b,0x14,0xa4,0x49,0x68,0x70,0xbe,0xa4,0xe1,0x44,0x2e,0xce,0xa3,0xe9,0x1d,0x7a,0xbd,0xf1,0xe4,0x25,0x11,0x47,0xd8,0xaa,0x32,0x34,0xf8,0xca,0x3d,0xec,0xf3,0x5d,0x8a,0x55,0xe7,0xd4,0x7c,0xfb,0xcf,0xe7,0xa6,0x13,0xaa,0x16,0x5f,0xaa,0x02,0x19,0xdd,0xf1,0xf8,0x5c,0xb2,0x1e,0x68,0x9a,0x21,0x93
db	0xd1,0x38,0x31,0xbb,0x26,0x76,0x44,0xf8,0x84,0x3b,0xf5,0xd1,0x52,0xbe,0x1b,0x8e,0x4d,0xa0,0xb4,0x4a,0x5a,0x7e,0x89,0xe5,0x36,0xb0,0x76,0x77,0xc5,0xc2,0x22,0x73,0xc2,0x19,0x12,0x7f,0xdf,0x9c,0xb8,0xc0,0xf5,0x0e,0xd5,0xa3,0x55,0xae,0x61,0xf8,0xf1,0x6b,0x79,0xc8,0x2e,0xbc,0xa5,0xef,0xd4,0xb1,0x84,0x0c,0x15,0xc4,0xed,0xb3
db	0x18,0x29,0xd6,0x31,0x83,0x79,0x30,0x1a,0x8f,0xf0,0x3b,0xe9,0xd1,0xf2,0x1d,0xec,0xcb,0xe8,0xc5,0x1c,0xb5,0xcb,0x8e,0x01,0xd1,0xb2,0x86,0x43,0x33,0x95,0x70,0x7e,0x75,0xa9,0xa1,0xe7,0xcb,0xd9,0xf4,0xd3,0xe1,0xe2,0xe9,0x46,0x21,0x20,0x3b,0xe9,0x48,0x1c,0x3f,0x93,0x57,0x31,0xeb,0x15,0x9c,0xa7,0xa6,0xcb,0xb5,0xb7,0xa7,0x24
db	0xbe,0x66,0x4c,0x92,0x7c,0xe8,0x8e,0x3f,0x9c,0xa9,0xd7,0xad,0x73,0x68,0x19,0x19,0xd4,0xb5,0x57,0x82,0xdc,0x67,0x3c,0xec,0xac,0x06,0xec,0x86,0x9b,0x65,0xff,0xbb,0xc3,0x90,0x48,0xdb,0x52,0xcc,0xa4,0xf5,0xdf,0x2c,0xc5,0x5a,0xe3,0x30,0xed,0xad,0x37,0x40,0x8c,0xaa,0x32,0x4f,0x94,0x1e,0x14,0x59,0x48,0x1d,0xd3,0xaf,0x80,0xe7
db	0xcf,0x6b,0xa7,0x70,0xe7,0x98,0x22,0x4b,0x40,0x02,0x0c,0x29,0x09,0x0a,0x53,0xf7,0xd4,0xeb,0xbb,0x75,0xb4,0x30,0x1c,0x67,0xea,0xd2,0xb5,0x40,0xfe,0x57,0x2c,0x3c,0x44,0x8d,0x8d,0x02,0x78,0xf0,0x76,0x8f,0x92,0xab,0xb4,0xc9,0xc0,0x2f,0xf5,0xde,0xa7,0x09,0x14,0xf1,0xe5,0x34,0xeb,0x86,0xfa,0xcf,0xcc,0x85,0x1c,0x9c,0xa6,0xe1
db	0x72,0x9e,0xc1,0xe4,0x74,0xc4,0x96,0x5d,0xf4,0x4b,0x23,0x4f,0xa5,0x32,0xff,0x38,0x21,0x8f,0x43,0xe5,0x96,0x20,0x3c,0x78,0xb8,0xb4,0xcd,0x29,0x62,0x84,0x59,0xb5,0xb4,0x57,0x07,0xa8,0x79,0x77,0x21,0xf4,0x82,0xa7,0xb1,0x36,0xee,0x16,0x8e,0xb5,0x9a,0xf7,0x03,0xac,0x64,0x03,0x20,0x48,0x24,0xbc,0xbb,0xec,0x50,0xed,0xa1,0xf3
db	0x67,0xd9,0x34,0xe1,0x0c,0x0b,0xc3,0xd0,0x46,0x0b,0x55,0x85,0x59,0x3c,0xb4,0x7d,0xd0,0xc2,0xe7,0x95,0x24,0x1f,0x53,0x76,0xf1,0x81,0x4a,0x61,0x6a,0x2e,0x3b,0x3f,0x92,0x14,0x7c,0xe0,0x33,0x7f,0xb4,0x85,0x92,0x78,0x0c,0x0b,0xe7,0xbd,0x7a,0x08,0x31,0x7d,0x47,0x3b,0xfa,0xdd,0x90,0x9e,0xf0,0xa9,0xd1,0xa7,0x7c,0x2a,0x37,0xb1
db	0x23,0x71,0x34,0xa0,0x63,0xfb,0x9e,0x8f,0x39,0x00,0xa0,0x09,0xd4,0x1f,0xf4,0xba,0x2d,0xc1,0xac,0x6c,0x94,0x18,0x56,0x3e,0x89,0x92,0x63,0x10,0x5e,0xfe,0x76,0xec,0x4e,0xb6,0x5d,0x59,0xf9,0x94,0x46,0x4f,0xda,0xd5,0x3e,0x6c,0x48,0x49,0x7e,0x7c,0x77,0xe7,0x7e,0x22,0x31,0xb5,0x9d,0x15,0xd3,0x08,0x24,0xdb,0x67,0x98,0x6b,0xfc
db	0x45,0x54,0x85,0x29,0x9a,0x47,0xa5,0x60,0xe2,0x46,0x36,0x45,0x16,0x54,0xd6,0xb1,0x5c,0x38,0x45,0xf8,0x43,0x28,0x58,0x81,0xc9,0x57,0x10,0xda,0x3b,0xfc,0x3e,0xe4,0xf4,0xb2,0x16,0xb6,0x16,0x1d,0xa4,0x68,0xa6,0xe0,0x36,0xdb,0xe2,0x19,0x1c,0xce,0x9f,0x94,0xa9,0x94,0xad,0x20,0xcb,0x17,0xd0,0x92,0x37,0x75,0x88,0x0d,0xaf,0xdf
db	0x98,0x6d,0x19,0x9e,0x8e,0x61,0xe4,0x8c,0xfc,0x27,0x27,0x6a,0xa7,0xa4,0x66,0x7f,0x08,0x03,0xef,0x5c,0x4a,0xb7,0x89,0xa1,0xae,0xe8,0x70,0x3f,0x13,0x27,0x0a,0x7d,0x5d,0x5e,0x2b,0x69,0xb5,0x98,0x1f,0x25,0x1e,0x41,0xff,0x46,0x5a,0x25,0x1f,0xb4,0x90,0x8e,0x81,0x91,0x19,0x63,0x10,0xd4,0xa9,0xdf,0x3b,0xae,0xe6,0x63,0x1a,0xdc
db	0x09,0x5f,0xac,0xaa,0xb8,0x6b,0xbd,0x6a,0x90,0x70,0xce,0x2c,0x63,0x6d,0x48,0x78,0xca,0xc1,0x59,0x94,0xe2,0xc7,0x89,0x17,0x73,0xfa,0x73,0x34,0xb7,0xd3,0x9c,0x4e,0xd8,0xac,0x18,0x80,0x25,0xbf,0xbe,0x75,0x0a,0x9a,0x05,0x5e,0x54,0xcb,0xba,0xab,0xca,0x7f,0x96,0xf7,0x26,0x8c,0x82,0xe0,0x23,0xa5,0x86,0xb5,0xdf,0x31,0xd0,0x2f
db	0xe3,0x66,0x96,0x83,0xd2,0x04,0x43,0x8a,0x28,0x59,0x49,0xdc,0x11,0x38,0xd9,0x5f,0xc2,0x31,0xaa,0xa8,0x1a,0xff,0x57,0xf1,0x84,0x18,0x28,0xe8,0x04,0xae,0x98,0xa4,0x17,0xc4,0x35,0x75,0xf5,0x37,0xf5,0x27,0x3e,0x7e,0x32,0xa4,0xcb,0xd4,0x43,0x59,0x02,0x63,0x7b,0x7c,0x9d,0xa7,0x61,0x12,0xf7,0xdc,0x12,0xe0,0x07,0xac,0x96,0xf3
db	0x71,0x43,0xe5,0x30,0xe0,0x4c,0x51,0x2a,0x19,0xf5,0x79,0x59,0x5a,0xc5,0x74,0xfa,0x54,0x18,0xb4,0xb1,0xfb,0x4b,0x9b,0xf8,0xe4,0xa4,0x63,0x25,0xc3,0x84,0xeb,0x2e,0xa1,0xf8,0xf8,0x7b,0x25,0x6a,0x7d,0x14,0x38,0x06,0xeb,0xae,0x9f,0xa5,0x80,0x9a,0x8a,0xb6,0x46,0x95,0xdf,0x52,0x11,0xd4,0x30,0xcc,0x11,0x8f,0x4a,0x5e,0x56,0x26
db	0x60,0x3d,0x5f,0x0b,0x04,0x94,0xcd,0xca,0x1d,0x6b,0x83,0x51,0x83,0x8d,0xf8,0x33,0x4a,0x91,0x00,0xa4,0xf5,0x44,0x5b,0xad,0xa0,0x4a,0x72,0xaf,0xe6,0x4a,0x0d,0x1e,0x9f,0x18,0x6b,0xb4,0xdf,0x85,0x61,0x2a,0x3b,0xe1,0x4c,0xaa,0xc3,0x17,0xef,0x51,0x9f,0xae,0xb5,0xca,0xaa,0x6c,0xd9,0xa1,0xf5,0xa3,0x6f,0x1c,0xca,0xb3,0x37,0xda
db	0x27,0xea,0xcb,0xb7,0x36,0xb2,0x11,0xda,0x9f,0x07,0x78,0xaa,0x6c,0xad,0x63,0x9b,0x49,0x6b,0xfe,0x1f,0x93,0x82,0x73,0xc9,0xc8,0xf6,0x68,0x54,0x50,0x77,0xba,0x78,0xc7,0x82,0xee,0xbd,0x97,0x66,0xb9,0x22,0x49,0x0d,0x7a,0x1f,0x0f,0x4e,0xe5,0x02,0x8b,0xa6,0x1b,0x11,0xfc,0xa6,0x37,0x2a,0x5c,0x66,0xaf,0xac,0xa5,0x9f,0xbf,0x26
db	0x98,0x9b,0x25,0x44,0x48,0x09,0xe6,0x76,0xb9,0x08,0xf1,0x37,0xcf,0x86,0xc9,0xdf,0xa8,0xf3,0x88,0x2f,0xc1,0x33,0x15,0x95,0x59,0xf7,0x9b,0xf2,0x48,0x76,0xcb,0xd0,0x31,0xe4,0x27,0x74,0x2d,0x6e,0xd2,0xc3,0x29,0xea,0xef,0xff,0x4e,0x3d,0xda,0x3e,0xef,0x94,0x94,0x40,0xcd,0x93,0xcf,0xb8,0x56,0x29,0xf8,0x20,0x20,0xa3,0x66,0x83
db	0xba,0xc8,0x4f,0xe6,0x22,0x96,0xb5,0xb2,0x44,0x75,0x55,0x98,0xed,0x11,0xd0,0x58,0x50,0x26,0xf1,0x4a,0xf6,0x80,0x5c,0x17,0x92,0xba,0xc2,0xd6,0x68,0xd4,0x7a,0x4f,0xdf,0x16,0x97,0xbd,0xad,0xd7,0x1b,0x0c,0xe5,0x23,0xa9,0xaa,0xf4,0x1c,0x8d,0xec,0xbf,0xf0,0xb5,0xaa,0x49,0xfd,0xf1,0x31,0x9b,0xf9,0xe9,0x21,0xa1,0x20,0xab,0xbe
db	0x56,0x8c,0xf2,0x85,0xdc,0x1f,0xea,0x25,0xce,0xf5,0x6c,0x18,0x7d,0xc4,0x1a,0x01,0x08,0x01,0xed,0x02,0xa8,0xac,0x7f,0x74,0x2c,0xd7,0x28,0x25,0x6e,0x68,0x19,0x38,0x8d,0x20,0x51,0x8f,0x38,0x8b,0x03,0x36,0xae,0x50,0x35,0x28,0x65,0x7e,0x15,0x2a,0x80,0x2c,0xae,0xcd,0xb3,0xb6,0x91,0xf1,0x8c,0xf2,0x8c,0xc5,0xce,0x3e,0x3a,0x97
db	0x5a,0xff,0xe1,0x37,0x13,0xf7,0x6b,0x07,0xb2,0xaa,0xaa,0x57,0x18,0xb7,0xb2,0x19,0x52,0xbf,0x59,0x0b,0x6f,0xba,0x56,0x54,0x14,0xac,0x21,0xfd,0x7d,0x03,0x4b,0x0b,0x39,0x54,0xba,0xf9,0xba,0x73,0xcd,0x67,0x13,0x30,0xca,0x19,0x80,0x4f,0x18,0xb4,0x75,0x2a,0xec,0x78,0xa7,0xd0,0x5c,0x53,0xe2,0x43,0x2c,0x08,0x5f,0x5c,0xe6,0x60
db	0xde,0x04,0xf6,0x75,0xca,0x35,0x3b,0xf6,0x68,0x53,0x60,0xc0,0xed,0xb0,0x15,0xa1,0xa4,0x89,0x23,0x34,0x49,0x35,0xd2,0x78,0x4b,0x8f,0x7c,0x8d,0x59,0x22,0x9f,0xad,0x72,0x47,0x5b,0xde,0xf2,0x09,0x08,0xa0,0x8d,0x5f,0x4d,0xc3,0xd1,0x83,0x17,0xbc,0x39,0x8e,0xa5,0x53,0xaa,0xe3,0x31,0x03,0x93,0x14,0xb4,0x57,0xf0,0xdf,0x54,0x1d
db	0x79,0x4d,0x21,0x1a,0x8f,0x3f,0x6e,0x07,0x41,0xcc,0x2d,0x94,0x55,0x4e,0x50,0xfd,0xac,0xe3,0xef,0xa7,0x50,0x3b,0x3c,0xda,0x32,0x25,0xee,0xd9,0x01,0x37,0x8e,0xb3,0x23,0xc5,0x5e,0x12,0x88,0x6d,0xd5,0x41,0xfd,0x3f,0xfa,0x75,0xb8,0xcb,0x82,0x10,0x81,0x38,0x1b,0x10,0x2d,0x2c,0x6b,0x62,0xa1,0x7c,0xd1,0x75,0xd8,0x8c,0x0c,0x2f
db	0xe8,0x97,0xff,0x18,0xb3,0x12,0xa2,0xef,0x6c,0xc5,0x79,0x9f,0x64,0xf3,0xc7,0xdc,0xdb,0x54,0xa4,0x25,0xc7,0x30,0xfb,0x6c,0x5a,0x50,0x24,0xf9,0xb6,0xc9,0xe7,0xda,0x78,0xcc,0x1b,0x5e,0xf3,0xe7,0x32,0xd8,0x36,0x47,0x10,0xe5,0x2c,0xeb,0xea,0xf7,0x25,0x30,0x93,0x64,0x88,0xc8,0x59,0xf8,0x5c,0x02,0x43,0x4c,0x23,0x8e,0x1c,0x42
db	0xe4,0x36,0x39,0xbf,0xba,0x8b,0xe3,0x53,0x01,0x32,0x0d,0x89,0xc2,0xea,0x35,0x94,0xf1,0x0d,0x29,0x45,0x08,0x07,0x15,0xcb,0xd7,0x3e,0x4d,0x9f,0x04,0xd8,0x18,0x8a,0x56,0xa3,0xb1,0x1c,0x46,0x19,0x8b,0xd0,0x51,0x30,0xf3,0xca,0x52,0x2a,0x16,0xc4,0x90,0xc1,0x00,0x50,0x87,0x8b,0x4c,0x71,0x61,0x48,0x69,0xb2,0xf1,0x33,0xaa,0x79
db	0x81,0x8b,0x36,0x33,0x19,0x41,0x6b,0xc1,0x91,0x40,0xf2,0xcc,0x1d,0x83,0x09,0xab,0xcc,0x6f,0x6c,0x54,0x91,0x62,0x80,0xac,0xe6,0x1f,0xcd,0x5d,0x05,0x2b,0xe5,0xac,0xbc,0xd6,0x1b,0x8b,0xef,0x95,0xa0,0xf3,0xfe,0x8e,0x4d,0x32,0x77,0xe8,0x02,0x8f,0x44,0xad,0xc4,0x40,0xc3,0x99,0x68,0x81,0x47,0x15,0xbd,0x3b,0x8f,0x0b,0x9b,0x3a
db	0xb3,0x9d,0x8f,0x3d,0x86,0xd1,0x89,0x5f,0x67,0x19,0x33,0x2d,0x18,0x64,0x0e,0x3a,0x13,0xa4,0xe9,0xb4,0xc9,0x90,0x09,0x6a,0xcb,0x5d,0x0d,0x83,0x13,0x04,0x29,0xe5,0xa5,0xf4,0x00,0x56,0xf4,0x80,0x96,0x33,0x93,0xe4,0x9b,0xc4,0x6e,0x38,0xbf,0x0a,0xe0,0xee,0x8c,0x89,0x5d,0x60,0x36,0x7e,0x69,0xc2,0xc7,0x28,0x6f,0x2b,0x97,0xfb
db	0xb3,0x5b,0x82,0xe8,0x9a,0x36,0x44,0xd7,0x1f,0x9b,0x1b,0xd0,0x14,0xe4,0xd4,0x0d,0x35,0xcd,0xee,0x88,0x50,0x37,0x5c,0x88,0x09,0xa5,0x16,0x4d,0xe1,0xbc,0xe8,0x79,0x8f,0xa9,0x18,0xb8,0x43,0xb4,0xd7,0x32,0xcd,0x26,0xdd,0x78,0x29,0x59,0xad,0x29,0xe3,0xe0,0xe7,0xcf,0x16,0x03,0xc6,0x8a,0xb6,0xa2,0x09,0x9a,0x6e,0x90,0x7b,0x0c
db	0x9d,0x20,0xb6,0xc4,0x28,0x3f,0x44,0x06,0xa9,0x45,0x72,0x27,0xa7,0x56,0x3f,0x07,0xff,0x13,0xd9,0x80,0xda,0xbd,0x25,0xad,0xd3,0x74,0x2c,0xd8,0xd2,0x93,0xa5,0xda,0xbc,0x5f,0xa5,0xde,0xb7,0x3a,0xf0,0xd2,0x17,0xb1,0xc3,0x70,0x2a,0x85,0xde,0xf0,0x97,0x7b,0x96,0xb2,0x0e,0x45,0x7f,0x63,0xd4,0x94,0xd8,0x78,0x05,0xcf,0xea,0xb3
db	0xfb,0x7a,0x79,0xb5,0x91,0x53,0xb8,0x8c,0xa2,0x03,0xf4,0xc3,0xed,0xf0,0xab,0x33,0x5c,0x6e,0xcd,0xbd,0x73,0xe3,0xe9,0xd0,0x83,0x2a,0x2a,0x68,0x32,0xf1,0x69,0x4f,0xd0,0x8b,0xe8,0xa1,0x7d,0x5b,0x0f,0x69,0xc2,0x33,0xbf,0xc1,0x54,0x29,0x47,0xed,0x9f,0xdb,0x35,0x0a,0x3d,0x2b,0x9d,0x8b,0x91,0xb6,0xe0,0xbc,0x53,0xba,0xb7,0xcd
db	0x2c,0xd9,0xeb,0x81,0xa0,0x2e,0x14,0x6e,0xdc,0xe1,0x90,0x36,0x14,0x9d,0xa8,0x8b,0x6b,0x1b,0xac,0x4c,0x09,0x8b,0x1a,0x87,0xf4,0x66,0xf6,0xfb,0x62,0x92,0x13,0xcf,0xb2,0x96,0xf0,0xc9,0x8b,0x12,0x99,0xf1,0x16,0xae,0x5c,0x27,0x24,0xa8,0xfd,0xb3,0x4c,0xc2,0xe6,0x3f,0xd2,0xc6,0x0c,0xf2,0x65,0x4e,0xdf,0xf1,0x06,0xb8,0x99,0xc4
db	0x3a,0x35,0xba,0xed,0x18,0x3e,0xfa,0x03,0x51,0x8d,0x45,0x68,0x12,0x7b,0xb6,0xac,0x63,0x99,0x47,0xee,0x6f,0x8b,0xcb,0xc1,0x0a,0xf9,0x23,0xf0,0x05,0xe1,0x03,0x4a,0xb5,0xe0,0x65,0x71,0xc8,0x64,0x7e,0x0d,0x39,0xe7,0x96,0xdb,0x34,0x63,0x2e,0x1a,0x27,0x85,0x52,0x63,0x8e,0x44,0xfb,0x61,0xca,0x79,0xe5,0x91,0x99,0x83,0x2d,0xe0
db	0x26,0x04,0xad,0x43,0x26,0xf2,0x7e,0x56,0xae,0x35,0x6a,0xfb,0xec,0xc6,0x27,0xe4,0x3a,0xa3,0x6b,0x63,0x72,0xba,0x98,0x03,0x9f,0x2a,0x4c,0xb1,0x33,0x22,0x9d,0x53,0xf6,0x00,0xa3,0x1e,0x32,0xcb,0xbe,0xe0,0xc2,0xf8,0x71,0xcd,0x3f,0xe3,0x4d,0x83,0xf2,0x9f,0x1c,0x91,0x35,0x97,0x52,0x95,0xba,0x24,0x04,0x04,0xca,0x32,0x6d,0xd7
db	0x4b,0xd4,0x9e,0x8b,0x73,0x42,0xfb,0x9f,0xfc,0x93,0xea,0xc2,0x41,0x56,0xa9,0xe5,0xdd,0xd0,0x37,0x8a,0xe2,0x92,0x9f,0x45,0x4f,0xd8,0xef,0xe6,0x6f,0x58,0x41,0x5f,0x7b,0xe7,0x0f,0x32,0xce,0x06,0x02,0x7f,0xe2,0x37,0x87,0xb7,0x35,0x72,0x68,0x87,0xc9,0x35,0xa8,0x51,0xce,0xd8,0xde,0xc3,0x8c,0xb4,0xab,0xf4,0xa7,0x3b,0xcd,0xc8
db	0x0a,0x56,0x5b,0x48,0xb1,0xa4,0x27,0xa8,0x9e,0x3e,0x04,0xbc,0xb3,0x63,0x3e,0xd5,0xf7,0xae,0xec,0x0c,0x6e,0x4a,0x73,0xb6,0xed,0x66,0xea,0xc1,0x7a,0xc4,0xaa,0x21,0x27,0x62,0xef,0x3d,0x1d,0x51,0x8b,0x63,0xe6,0xe2,0x8a,0xed,0x7a,0x4b,0x90,0xc3,0x9f,0x91,0xb4,0x8f,0x78,0x65,0x9c,0xdd,0x0a,0x7a,0x50,0x36,0x33,0x30,0x3b,0xb4
db	0xdf,0x67,0xbd,0xfd,0x71,0xfc,0x40,0x49,0xaa,0x01,0xdf,0x68,0x67,0x73,0x31,0x2c,0x98,0x2f,0x8c,0x9e,0x2d,0xce,0x4a,0x71,0xbc,0x6f,0x90,0x1d,0xc0,0x37,0x07,0x30,0x0c,0xa3,0x04,0xfb,0xd1,0xd0,0x0e,0xcb,0xdc,0x94,0x06,0x7f,0x83,0xe5,0x45,0x47,0xd0,0x71,0x06,0x94,0x23,0x7c,0x03,0x80,0x46,0xa5,0x10,0x08,0xd1,0xdb,0xfb,0x9d
db	0xd4,0x05,0x01,0x5e,0x66,0x4d,0xf9,0x32,0x9b,0x5b,0xfe,0x7a,0x60,0x63,0x77,0x9a,0x31,0x34,0xe5,0x9a,0x82,0x2d,0x2b,0xb7,0xe0,0x04,0x8f,0x86,0xf3,0xb2,0x16,0x86,0x50,0x37,0x9d,0x80,0xe7,0x62,0xdf,0x77,0xda,0xf4,0xfc,0xb7,0x42,0x9d,0xac,0xcb,0x11,0xff,0x0c,0x6f,0x4e,0x16,0x0c,0x59,0x04,0x05,0x8f,0x88,0x64,0x37,0xe6,0x6c
db	0xee,0x64,0x58,0x79,0x60,0xd4,0x2f,0xb7,0x90,0x59,0xfb,0x82,0x3b,0x20,0x2e,0x2b,0xba,0x15,0xfb,0xf7,0x5b,0x1d,0x81,0x8a,0x8a,0x8f,0xe3,0x39,0x92,0x34,0xfc,0x3a,0x67,0xce,0xb6,0xa0,0x9b,0x56,0x78,0x96,0x4d,0x32,0xbf,0x9c,0x83,0x9e,0x19,0x66,0x20,0x42,0xb2,0x78,0x62,0x42,0xdd,0xdf,0x98,0xab,0x0c,0x3d,0x41,0xb5,0x74,0xc1
db	0x2d,0xf0,0x02,0x58,0x6e,0xb3,0x4d,0x7b,0x41,0x1c,0xf1,0x09,0xc1,0xbb,0x84,0x67,0xf8,0x24,0x77,0x32,0xcd,0x7a,0x63,0x87,0x0d,0xf2,0xc5,0xaf,0xe4,0xb5,0xc6,0x3b,0xad,0x66,0x5e,0xae,0x90,0xc2,0x24,0x27,0x7a,0x0b,0xed,0x1b,0x86,0x5d,0x02,0x19,0x85,0x78,0xc8,0xb1,0xce,0xe7,0xc9,0x5c,0xce,0x43,0x58,0xac,0x1c,0x4e,0xcd,0xb8
db	0x3a,0xb8,0x7a,0xf3,0x79,0x4b,0x97,0xcf,0xbe,0x88,0x24,0xd0,0x9a,0x5a,0x55,0x43,0x0c,0x48,0xa2,0x7f,0xaf,0x4b,0xd8,0x16,0x02,0xfb,0xe6,0x0c,0x6b,0x85,0xb4,0xb8,0x5e,0x40,0x60,0x5d,0x93,0x51,0xc6,0x32,0xb9,0x4a,0x23,0x96,0x71,0xeb,0xe8,0xe8,0x01,0x1e,0x85,0xb0,0x47,0xde,0x86,0x15,0x52,0x3a,0xb2,0xd3,0x86,0x4b,0x78,0x09
db	0x9c,0x6e,0x9d,0xd9,0xef,0xe8,0x64,0x2d,0x2a,0xec,0x21,0x5a,0x60,0xa5,0xe4,0x26,0xbb,0x79,0x0c,0xdb,0x48,0xd6,0x4b,0x5c,0x5b,0xe3,0x34,0xc9,0x96,0xf0,0xcb,0x68,0x8a,0x2d,0xee,0xa3,0x37,0x34,0x5f,0x3e,0x65,0x40,0xce,0xe1,0xc8,0x2e,0x11,0xca,0x42,0x51,0x53,0x72,0x3d,0xa9,0x68,0x54,0xb4,0xd8,0xd7,0x72,0x84,0x8d,0xcd,0x6d
db	0x1f,0x0e,0x0c,0x0f,0x32,0x3a,0x7d,0xdd,0xc1,0xd3,0xe7,0x2d,0x1f,0x52,0x8b,0x73,0x86,0x70,0x2a,0xcb,0x71,0x37,0xa1,0xab,0xe3,0x94,0x5a,0xd7,0x9d,0x68,0xc1,0x6e,0x5d,0x72,0x25,0x81,0xe8,0x45,0xad,0x6c,0xf8,0xdb,0x9b,0x70,0x31,0xb9,0xf0,0x4f,0x23,0xd7,0x03,0xc8,0x87,0x43,0x51,0x7a,0x55,0xfe,0x6f,0x2d,0x40,0xbc,0xfe,0xdf
db	0xe6,0x21,0x4b,0x4d,0xc6,0x02,0x48,0xe7,0x7a,0x2a,0xef,0x91,0xdf,0xbc,0x98,0x91,0x6f,0x59,0xc4,0x47,0x77,0x2e,0x45,0x45,0x23,0x47,0x5d,0xf8,0x50,0x41,0x84,0x75,0x8a,0xe7,0x4d,0xfb,0xeb,0x58,0x00,0xcf,0x42,0xca,0x02,0x05,0xc7,0xfa,0x11,0xfb,0x6e,0x90,0x7d,0x53,0xa0,0x19,0x23,0x24,0x8f,0x89,0x17,0x40,0xbe,0x11,0xfb,0xd9
db	0x04,0xf8,0x84,0xeb,0x90,0x7c,0x84,0x45,0x9c,0x53,0x45,0x5e,0x45,0x51,0x55,0xfc,0xf1,0x6b,0x02,0x24,0xfd,0x95,0x4a,0x40,0x80,0xdc,0xa6,0x94,0x15,0x2c,0x1d,0x85,0xa0,0x07,0x8d,0xf8,0xf2,0x95,0x0c,0xa0,0x4e,0x5a,0x5b,0x29,0x09,0xcc,0xf3,0x4e,0x8e,0xea,0xe8,0x26,0xb8,0xbe,0xb2,0x6f,0x76,0x6f,0xa4,0xe5,0x6a,0x50,0xcf,0xc8
db	0x7d,0xb6,0x1e,0x9d,0x90,0x6b,0xde,0xe2,0x55,0x49,0x97,0x00,0xa5,0xc5,0x1f,0x1c,0x41,0x66,0xe7,0x6b,0x20,0xb2,0x1e,0xc7,0xb3,0xd4,0xa9,0x75,0xbb,0x83,0x24,0xd0,0xdf,0xbd,0xba,0x2c,0x2f,0xa4,0x03,0x1d,0x17,0xc5,0x74,0xc2,0x6a,0x20,0x71,0x18,0xd1,0xc5,0xb0,0x78,0xfe,0xda,0x55,0xd2,0x43,0x2a,0xd8,0x88,0x74,0x75,0x86,0x07
db	0xe9,0x8b,0x0d,0x0f,0xe5,0x8d,0xe8,0x3d,0xf4,0x93,0xde,0x4c,0x97,0x98,0xe2,0x9b,0x22,0xde,0x13,0x18,0x8b,0xc5,0xe1,0x6f,0x6d,0xb4,0x19,0x46,0xff,0xbd,0xa6,0x2e,0xe6,0x48,0xcd,0x66,0x22,0x7d,0xf4,0x0e,0xeb,0x74,0x25,0x5c,0x90,0x0e,0x26,0xce,0x17,0xe9,0xdb,0x30,0xb9,0x25,0x99,0x96,0x46,0x3a,0x78,0xa3,0x76,0x2d,0x9e,0x42
db	0x06,0x8a,0x1e,0x62,0x46,0xa4,0xd0,0x1d,0xe2,0x4c,0x3c,0xb4,0x4c,0xc0,0xd1,0xf7,0x05,0x5b,0xe4,0xd4,0x71,0x73,0x31,0xfc,0x98,0x2a,0x55,0xb0,0x78,0x92,0x59,0x8b,0x25,0x97,0x15,0xf2,0xf9,0x57,0x8b,0x7c,0xd4,0xc4,0x47,0x2f,0x10,0x3b,0x76,0xde,0x5f,0xb1,0xdf,0xdc,0xb0,0x15,0xd5,0x4a,0xd2,0x54,0xad,0x5e,0x32,0xf4,0x5a,0x1a
db	0x8d,0xe8,0xa0,0x4a,0x4e,0x04,0xdc,0xdd,0xd2,0x57,0xe5,0x24,0x4b,0x93,0x51,0xef,0xd4,0xba,0x3f,0x77,0xfc,0x0a,0x5c,0x7d,0x6e,0xa7,0x86,0xe5,0x88,0xd1,0xac,0x74,0x46,0x9a,0x39,0xb6,0x98,0x3d,0xae,0x89,0x4e,0xea,0x8d,0xdc,0xc7,0xb9,0x0c,0xd7,0xa6,0x06,0x4d,0x28,0x2b,0x51,0x2b,0xdb,0x30,0x4a,0x91,0x1c,0x40,0x89,0xe4,0xba
db	0x72,0xd5,0xed,0x16,0x66,0xb8,0xef,0x81,0xd9,0x51,0xf8,0x1b,0xff,0xab,0x8b,0x52,0xb8,0xf3,0x11,0xb3,0xe5,0x04,0x5a,0xb0,0x60,0xa3,0x35,0x12,0x6a,0xa0,0x75,0x5c,0x21,0xa9,0x5a,0xe8,0xd3,0xd7,0x8a,0x1f,0xe0,0x9b,0xb7,0x1e,0x7d,0xbe,0x81,0xaa,0x56,0x5a,0xd8,0x2d,0x7e,0x0c,0x60,0xb2,0x68,0x26,0x6d,0xaa,0x8b,0xcc,0x11,0x40
db	0x25,0xea,0xc9,0x94,0xfb,0x3b,0x9b,0xa7,0x3a,0xde,0xd9,0xfe,0x6b,0x4b,0xfc,0x3f,0xbf,0xdd,0x51,0x9b,0xa1,0xca,0x2f,0xed,0x33,0xd8,0x3d,0x92,0xa4,0x1d,0xee,0xb2,0x47,0xd0,0x72,0x6a,0x96,0x33,0x0f,0xdd,0x0a,0xd9,0xbd,0x86,0xdb,0x25,0x53,0x0e,0x3c,0x31,0xad,0x05,0xb9,0x24,0x13,0x00,0xdf,0xc2,0x7c,0x3d,0x03,0x9b,0xf6,0x6d
db	0x93,0xd9,0xdf,0x73,0xf8,0x1c,0x98,0xe2,0x77,0x46,0x46,0xdc,0x07,0xe6,0xbb,0xc1,0xa7,0xb6,0xbe,0x21,0x07,0xae,0xdb,0xca,0x69,0x2d,0x8a,0x2b,0x59,0x27,0xe0,0x7c,0xf0,0xf1,0x34,0x69,0x97,0x44,0xba,0xbb,0x48,0x9f,0xd9,0xd8,0x16,0x1a,0xef,0x11,0x68,0xb6,0xaf,0x3a,0x10,0xc6,0x7c,0xd1,0x12,0xc7,0x89,0x47,0xe3,0xd1,0x24,0xc6
db	0x44,0x9f,0x7e,0x6a,0x66,0x43,0x48,0xd6,0x9f,0x7b,0xf0,0x1f,0xd2,0x5f,0x2b,0xa7,0x13,0x6a,0x7c,0x70,0x08,0x38,0xb0,0x00,0xbc,0x7c,0xd3,0x01,0x9b,0xf6,0x29,0xd3,0x9c,0xa4,0x11,0x90,0xe4,0x9f,0x04,0xd6,0x21,0xec,0xfd,0xcb,0xb8,0xe6,0xb6,0x49,0x2b,0xfa,0x4b,0x90,0x9e,0xc6,0x0c,0x87,0xff,0x5e,0x2e,0xcc,0xf8,0x09,0x70,0x52
db	0x42,0xec,0x88,0xac,0x1e,0x76,0x2b,0xeb,0xfc,0xb3,0x65,0x81,0x34,0xb1,0x06,0x90,0xde,0xb2,0xc4,0xd3,0xfd,0xd4,0x9c,0x78,0x1a,0x5c,0x8f,0x65,0x0a,0xbd,0x88,0xe5,0x95,0x06,0xb5,0x94,0xe5,0xbf,0x90,0x31,0xbb,0xcb,0xce,0x19,0x51,0x25,0x4a,0x47,0x35,0x26,0x93,0xdb,0xe2,0x93,0x36,0x47,0x7d,0xdd,0x4e,0xd5,0xeb,0xdd,0x63,0x1c
db	0xbc,0x2d,0x75,0xdb,0xd4,0xfa,0x60,0x4b,0x51,0x45,0x32,0x0f,0x01,0xf9,0x73,0x9b,0xd8,0xbc,0xee,0xaa,0x7d,0x2e,0xfe,0xbf,0x9d,0x45,0xae,0xe2,0x01,0xe3,0xbf,0x58,0xdc,0xc0,0xb8,0xe8,0x44,0x16,0x3b,0xd8,0xaa,0x3b,0x13,0xca,0xfb,0x5f,0x8d,0xb3,0x2a,0x83,0x66,0x49,0xae,0x54,0x02,0x4e,0xd8,0x68,0xee,0x21,0x1a,0xbb,0xf4,0xf7
db	0xdf,0xf1,0x51,0x7b,0x62,0xa8,0xb2,0xdc,0x4b,0xd4,0x04,0xd2,0x05,0x49,0xdd,0xa4,0x75,0xe6,0x64,0x82,0xe7,0x25,0x55,0x60,0x2c,0x9f,0x8a,0x7a,0x11,0xe9,0xf2,0x72,0xfe,0x89,0xe1,0xaf,0xca,0x0c,0xb9,0xf5,0xcc,0xcf,0x07,0xef,0x8f,0xbb,0xef,0x53,0x1e,0xe2,0xfb,0x98,0xe8,0x05,0xab,0x4e,0x7e,0x38,0x56,0x24,0xd5,0x74,0x1c,0x95
db	0x1a,0x0e,0x62,0x92,0x80,0x16,0x45,0x78,0x2f,0xb1,0xe1,0x83,0x24,0x2b,0x16,0x5c,0x05,0x52,0x17,0xe9,0xe8,0x9e,0x5d,0x63,0x8f,0x77,0xc4,0x89,0x22,0x76,0x43,0x31,0xfd,0x09,0xc0,0x51,0x70,0x57,0x2d,0x51,0x91,0xe5,0x61,0x3f,0x77,0xff,0x17,0xfc,0xa6,0x19,0x9d,0x82,0x46,0x11,0x0c,0x77,0x19,0x2a,0xf5,0x19,0xb4,0x3d,0xa6,0xd4
db	0x8b,0x07,0x4b,0xc6,0xa3,0x1e,0x8c,0xf5,0xe8,0x2d,0xe7,0xcc,0xa1,0x38,0x57,0x66,0x76,0x1d,0xdd,0xe3,0xb9,0x0a,0x1e,0x2c,0xad,0x09,0x07,0x26,0xff,0x7a,0xc0,0xb0,0x51,0x71,0x44,0x6d,0x2c,0x39,0x3d,0xa6,0x14,0x4e,0x74,0x2c,0x54,0x3d,0xfa,0xdc,0x2e,0x0c,0xc4,0x88,0x32,0xda,0xb0,0x9d,0xf4,0x2c,0x0a,0x1b,0xb7,0xb4,0x78,0x6f
db	0x1b,0x6a,0x21,0x03,0x4e,0xe0,0x87,0xa0,0x1c,0xd8,0xe6,0x0c,0x97,0x47,0xde,0x98,0x81,0x3d,0x39,0x93,0x3d,0xcb,0x29,0xa3,0x93,0x8d,0x27,0x5d,0x29,0xb5,0x85,0xc4,0x32,0xd8,0xdc,0x19,0xb1,0x63,0xdc,0x76,0x32,0xc3,0x52,0x9a,0xfd,0x3d,0xff,0xf9,0x94,0x55,0x72,0xbb,0x4d,0xe2,0x42,0xd2,0xf7,0xb2,0xac,0xac,0x5d,0x50,0x95,0xda
db	0x3a,0x87,0xb6,0x0f,0x27,0x72,0x34,0xe7,0xe8,0x9f,0xc7,0xba,0xca,0x8d,0xf3,0xb9,0xa1,0xdd,0xd7,0xa5,0x70,0x3b,0xcc,0x72,0x0e,0x9d,0x85,0x75,0x01,0x11,0xe1,0xc2,0xca,0xcb,0x40,0x3a,0x31,0xf2,0x5d,0x0c,0x63,0xc8,0xbf,0x38,0xde,0x09,0x3b,0x32,0xaa,0x6c,0x07,0xd2,0x2b,0x3b,0x94,0x37,0xd0,0xd9,0xe0,0x4c,0x25,0xa3,0x22,0x64
db	0x05,0xcc,0x69,0x9e,0x73,0xd4,0x46,0x2c,0x73,0x23,0xd0,0x6f,0x09,0xff,0x8b,0xef,0x7a,0x08,0x3e,0xa2,0xa7,0x9d,0xf5,0xc9,0x40,0xd1,0x06,0xd6,0xe3,0x89,0xa5,0xcc,0x9f,0x40,0x67,0x80,0x11,0xec,0x5d,0x23,0x19,0xf3,0x66,0xaf,0x06,0xcc,0xe4,0xb6,0x5e,0x20,0xf7,0x19,0xce,0x1a,0xb6,0x86,0x0d,0x39,0x1d,0xc8,0x0a,0xdb,0x50,0x52
db	0x7e,0x3b,0x96,0x9f,0x05,0xdd,0xd8,0xdf,0x40,0xdf,0xe4,0x66,0x14,0x4d,0x4e,0xb3,0x9f,0x86,0x7b,0xc2,0x99,0xc3,0x8f,0xb9,0xe7,0xc3,0x50,0xa4,0xab,0xb8,0x8e,0xc5,0x28,0xce,0x8b,0x51,0xcb,0xad,0xd8,0x1a,0x23,0x7d,0x12,0xc2,0xaf,0x1a,0x93,0x4c,0x57,0xe9,0x59,0x6a,0x03,0x65,0x81,0x07,0x40,0x84,0x92,0x9d,0x22,0x8a,0x3d,0x27
db	0x39,0x05,0xdd,0xf7,0x20,0xad,0xc2,0x03,0x27,0x87,0x8e,0xc1,0x23,0xad,0xe5,0x59,0x16,0xe7,0xde,0xe4,0x44,0x6b,0x06,0xb5,0x1d,0xaf,0xda,0x08,0x4a,0xfa,0x75,0x1a,0x0b,0x35,0xe8,0x6e,0x29,0xd3,0x79,0x19,0x80,0xb9,0x5f,0x36,0xec,0x43,0x25,0x3c,0xbc,0xcf,0x70,0x0c,0xc7,0x2c,0xbc,0x2e,0x72,0x40,0x73,0x98,0x11,0xc9,0x72,0x9f
db	0xd9,0x95,0x9f,0x8d,0x4a,0x52,0xbb,0x89,0x30,0x5b,0xa2,0x7e,0x0c,0x21,0x11,0xda,0x4e,0xa1,0x7c,0xc1,0x0f,0x95,0x1b,0x5b,0x2e,0xbd,0xae,0x8a,0x56,0x82,0x8f,0x84,0x43,0xdf,0x24,0xac,0x99,0xaa,0x8a,0xaf,0x82,0x33,0xf7,0x0a,0xbf,0x5e,0xfd,0xf2,0x91,0xf0,0xe1,0x5d,0x4e,0xa5,0x16,0x6e,0xb4,0x39,0x8b,0x99,0x32,0x6b,0xc8,0x16
db	0xc1,0x84,0x10,0xc2,0x74,0x54,0xfc,0x02,0x71,0x44,0xfc,0x52,0xfa,0xc2,0x3c,0x8d,0xf7,0x8b,0x1e,0xcc,0x5e,0x43,0x66,0x29,0x29,0x93,0xe7,0xf6,0x9f,0xa8,0xa3,0x35,0xc9,0xde,0xb0,0xbe,0x4d,0xdf,0x8c,0x61,0x5a,0x6b,0x16,0x88,0x33,0x65,0x47,0x98,0xd2,0xf8,0x71,0x09,0x9f,0x00,0xb6,0x9e,0x21,0x37,0x2a,0x0b,0xb4,0x74,0x6b,0x0e
db	0x6e,0x4d,0x14,0x45,0x6c,0x1b,0xa8,0x4c,0xa7,0xc6,0xc3,0x36,0x6e,0x9e,0x63,0x5a,0x36,0x76,0x04,0x06,0x7f,0xdd,0x74,0x24,0x19,0xd8,0xb7,0xbc,0x6c,0x52,0x82,0x67,0x6b,0xd5,0xcb,0x81,0xdf,0xd7,0xe4,0xdd,0x14,0x33,0x71,0xcf,0x6b,0x7f,0xaf,0x66,0x27,0x8a,0x70,0xb8,0x45,0xae,0x8c,0x1a,0x65,0xd3,0x16,0x5c,0x05,0x65,0xd0,0xfb
db	0x07,0xe3,0x98,0xa9,0x94,0x27,0x6c,0xac,0xfc,0xee,0x1b,0x35,0x43,0xd6,0x3b,0x41,0x1c,0x86,0xc0,0x4f,0xf3,0x63,0xf4,0xba,0x4d,0xdf,0x6a,0xda,0xcf,0xb5,0x9f,0x69,0x3f,0x3d,0x0c,0x80,0x79,0x02,0x34,0x4a,0x9a,0xfd,0xb6,0xea,0x0b,0x61,0x32,0x67,0x2d,0x6a,0x6b,0xcb,0xcf,0xa6,0xee,0x6a,0x93,0x11,0x00,0xb8,0x6e,0x27,0x88,0x62
db	0xf7,0x4c,0x7b,0xe1,0x13,0xe1,0x47,0xaf,0x96,0x24,0x3b,0x46,0x8c,0xf4,0xbe,0x13,0xed,0x65,0xe1,0xf2,0x36,0x2d,0xa4,0x6d,0x5e,0xa6,0x93,0xfb,0x64,0x0e,0xbd,0x50,0xdc,0x29,0x4f,0x90,0x8e,0xe1,0x7f,0x5e,0x47,0x08,0x9b,0x1c,0xb7,0xce,0x06,0x80,0x52,0xc0,0xb5,0x82,0x77,0x49,0x3c,0xe0,0x70,0x1f,0x84,0x75,0x9e,0x19,0xb2,0x83
db	0xda,0x40,0xf8,0xd7,0x27,0x1e,0xbc,0x39,0xb5,0x1d,0x25,0x75,0x63,0x7d,0x85,0x2f,0x09,0x07,0xe9,0x73,0x8e,0x2b,0xb8,0x9a,0xbe,0xd6,0x90,0x91,0x6e,0xdb,0x7c,0x9d,0x9b,0x43,0x1d,0x21,0x88,0x76,0xb0,0xaa,0x7b,0x68,0xe4,0xa7,0x92,0x64,0xe4,0x1f,0xff,0x53,0x1d,0xf7,0xc0,0x44,0x5c,0x0a,0x1e,0xcd,0xa7,0x6e,0x41,0x1c,0x8c,0x7d
db	0x66,0xa7,0xf6,0xfc,0xa9,0x0d,0x3f,0x9c,0xfb,0x15,0x87,0x14,0x20,0x43,0x1b,0x05,0xf5,0xea,0x5c,0x07,0x61,0xb3,0x0e,0x7c,0x52,0x57,0x1c,0x09,0x33,0xb4,0xd8,0x3d,0x9d,0x17,0xee,0x86,0x25,0xdc,0x6b,0xcd,0x58,0xb7,0x18,0xbd,0x85,0x39,0x0b,0xb9,0xb8,0x35,0x3a,0x86,0xbb,0x88,0xb5,0x5e,0x4b,0x0a,0x7e,0x9c,0x02,0xb5,0x45,0xe5
db	0xc7,0x38,0x56,0x1e,0xe4,0xe7,0xf7,0x88,0xac,0x75,0x9a,0x97,0xa8,0x15,0xb6,0x2d,0xcf,0x2a,0x59,0x65,0x0e,0x00,0x9f,0x8e,0xa9,0x94,0x23,0x1c,0x40,0xe4,0xb9,0x6b,0xcf,0xf0,0x53,0x7f,0x98,0xd1,0xa7,0x72,0xd7,0xe3,0x22,0xfd,0x5f,0x3d,0x3f,0xd6,0x21,0xb4,0x84,0x0c,0x1b,0x1d,0x00,0x2d,0x8f,0x72,0x22,0x2d,0x2c,0x8c,0x54,0x46
db	0xe5,0x53,0xca,0x66,0x67,0x5e,0xb3,0x62,0x6f,0xaf,0x33,0x81,0xc1,0xf6,0x77,0x92,0x3e,0xdb,0x74,0x68,0x93,0xca,0x38,0xf8,0x18,0x50,0xef,0xe4,0xc9,0x45,0x40,0xc9,0xf0,0xc5,0x7a,0x4b,0xf2,0xd8,0xca,0x72,0x62,0x5f,0x67,0x10,0x10,0xcc,0xff,0x1a,0xc7,0x9c,0x3a,0x7f,0xca,0x11,0x67,0x3e,0xca,0xa6,0x9c,0x48,0x15,0xaf,0x68,0xb7
db	0x2b,0xa7,0xa2,0x68,0x7b,0x40,0xb2,0xe3,0x27,0x18,0x7e,0x94,0x4c,0xca,0x0e,0x5b,0x3a,0x30,0xcb,0xc3,0x72,0x31,0x6b,0xe6,0x3e,0xa7,0x09,0x3e,0xf2,0x53,0xda,0x7d,0x6f,0x55,0x08,0xd2,0x26,0xc3,0x07,0x52,0x38,0x90,0x04,0xc6,0x3c,0xb6,0xb5,0x2a,0x7b,0x38,0x07,0x9e,0xb4,0xa5,0x48,0x36,0xf5,0x5e,0xac,0xa8,0x97,0x4e,0x37,0xc2
db	0xee,0x12,0x88,0x28,0xd0,0x7d,0xd1,0xae,0xc0,0xc7,0x84,0x69,0x25,0x79,0x9a,0x8a,0x16,0x49,0x50,0x72,0x69,0x1a,0x02,0xc9,0xfe,0xd5,0x2c,0x40,0xc6,0xc8,0x8b,0x7d,0xe3,0xab,0x89,0xe3,0x78,0xf1,0xe9,0xbd,0x3c,0xbd,0x02,0x96,0xfe,0x0c,0x5c,0xc4,0x9e,0x89,0x3a,0x4b,0xe9,0xcd,0x41,0x1c,0x59,0x71,0x52,0xb0,0xc9,0x36,0xf1,0x80
db	0xab,0x5e,0xbc,0xf1,0x20,0x99,0xc0,0xab,0x0c,0x59,0x43,0xc2,0xcd,0x09,0xa6,0x30,0x91,0xfa,0x12,0x23,0xbe,0x18,0x24,0xa6,0xbf,0x55,0x4c,0xe8,0x22,0xff,0x01,0xbd,0xde,0x2c,0x72,0x3c,0x0a,0x36,0xd5,0x7e,0xed,0x6a,0xe3,0x63,0x14,0x60,0xa3,0x0a,0x6f,0x04,0x90,0x64,0xc1,0xd1,0x78,0x54,0xae,0x19,0x74,0xe2,0xea,0xec,0x86,0x22
db	0xc7,0xdb,0xf6,0x48,0x0e,0x75,0x43,0x04,0xf7,0x62,0xe6,0xa9,0x46,0x65,0xcc,0xa5,0xa4,0x1a,0xb2,0x94,0x7b,0x7a,0x8c,0x9a,0x80,0x62,0x32,0x17,0x80,0xc3,0xc6,0x54,0x0e,0x4e,0xe3,0x46,0x74,0xa8,0xae,0xcd,0xd0,0xc1,0x19,0x84,0x61,0xb4,0x1d,0x18,0x4d,0x80,0xf1,0x70,0x40,0xbe,0xa2,0xa3,0x38,0xcc,0x21,0x1c,0x2f,0x72,0x85,0x72
db	0x0a,0xa1,0x0d,0xa3,0xdc,0xa2,0xf4,0x64,0x84,0x3c,0x43,0x6d,0xfb,0x45,0x11,0xf9,0x40,0xdc,0x25,0x85,0x80,0x41,0x84,0xa7,0x06,0x2e,0x79,0xbf,0x0c,0xa7,0x8f,0x17,0xea,0xa2,0xc4,0x6f,0xd8,0xc6,0x9e,0xab,0xdc,0x45,0x6f,0xaa,0xda,0xe9,0xe6,0x84,0xf0,0x5f,0x8a,0x90,0x99,0x33,0x9b,0xcf,0x03,0xe6,0xce,0x19,0x0c,0xad,0x2f,0xad
db	0x81,0xb8,0x17,0xff,0x6b,0xff,0xc8,0x14,0xa6,0xf4,0x37,0x55,0xdc,0xbb,0x09,0x3c,0x3c,0xe7,0x29,0x95,0x23,0x5c,0x58,0x92,0x2e,0x95,0xe8,0x3b,0x8b,0x81,0x2d,0xfd,0x58,0x8a,0x1f,0xdf,0xf1,0x54,0xa3,0xd0,0x01,0xaa,0x3d,0x32,0x61,0xe5,0x8e,0x62,0xa7,0xf6,0x3b,0x2d,0x0e,0xff,0xf4,0xe9,0x08,0xe7,0xef,0x3a,0x63,0x10,0x34,0x49
db	0x14,0xe1,0x88,0xd0,0xb2,0x1d,0xb7,0x31,0xc9,0xa4,0x48,0xa8,0xaf,0x64,0x29,0xab,0x1f,0x14,0x13,0xa7,0xb8,0xb8,0xa4,0x24,0x1d,0xf9,0xb6,0x3e,0x62,0xa6,0x5e,0x10,0xcb,0x44,0x5c,0x9d,0x2c,0x58,0x3a,0x36,0xa3,0x81,0x9f,0xa9,0xa4,0xa1,0x06,0x1d,0xbf,0x97,0x03,0x88,0xf2,0xf4,0x81,0x3e,0x1b,0x35,0xea,0xd0,0xb6,0x96,0xa1,0xf7
db	0x1e,0x49,0xb7,0xe8,0x23,0x6f,0x05,0x7c,0x9f,0xc4,0x53,0xb1,0x63,0xdc,0x07,0xbb,0xd6,0x57,0x85,0x4d,0x77,0x33,0x21,0xbf,0x77,0xfe,0xfe,0x34,0x52,0x02,0xe7,0xe4,0x87,0x11,0xa0,0xfd,0x11,0x4a,0x34,0x36,0x88,0x69,0xdf,0x77,0xfd,0x83,0x71,0xa8,0x68,0xed,0x49,0x39,0xb4,0x06,0x32,0x48,0xf1,0xd2,0x4e,0x61,0x47,0x65,0x26,0x87
db	0xba,0x2b,0x2e,0xf4,0x12,0xfc,0xd0,0x84,0x81,0xa1,0x59,0xdc,0xe3,0x13,0x51,0x9e,0xea,0x57,0x56,0x3b,0x7c,0x71,0x6b,0xff,0xe9,0xf8,0xec,0x3e,0xe7,0xbe,0x65,0x47,0xe1,0x6f,0x8f,0x7c,0x3a,0x77,0xdb,0x75,0x4a,0x43,0x43,0x39,0x37,0xb2,0x68,0x16,0x72,0xdb,0x49,0xf7,0x13,0x3c,0x09,0x93,0xef,0xc1,0x2a,0x99,0xff,0xc7,0xdb,0xd9
db	0x80,0xd2,0xfe,0x7c,0x39,0x50,0x21,0xdc,0x1d,0xae,0x9b,0xfc,0xd4,0x5f,0x56,0xae,0x6a,0xd9,0x35,0xa1,0x2b,0xd6,0x53,0x90,0xe8,0x8c,0x31,0x73,0x0f,0xa3,0x9e,0xa1,0x2f,0x76,0xa8,0x72,0x4d,0x5e,0x58,0xca,0x9f,0x8f,0xdf,0xf0,0xf9,0x6a,0x54,0xb1,0x5f,0x39,0x03,0x7a,0x26,0x06,0x71,0x74,0x6f,0x42,0xee,0x63,0x76,0x13,0xb9,0xed
db	0x74,0xad,0xf9,0xe0,0xa7,0x35,0x9c,0x18,0xe0,0xf7,0xc5,0xb2,0x27,0x14,0x0f,0xd7,0xaa,0x17,0x1c,0x8f,0x50,0xc8,0xb0,0xc2,0x63,0xff,0x38,0x65,0x87,0x69,0xb3,0xd5,0x3f,0xb4,0xf2,0xe8,0x8b,0x7b,0x24,0xdc,0x1f,0x62,0x2f,0x0a,0xd7,0x2d,0x0f,0x6f,0x48,0x1d,0xf0,0x3c,0xb1,0xb4,0x10,0x8d,0xc6,0x5c,0x79,0x30,0xde,0x20,0x9e,0x7b
db	0xf1,0xa5,0x73,0x38,0x05,0x1b,0x13,0x78,0xb1,0x02,0x2f,0x32,0x2a,0x07,0x59,0xa4,0xfc,0x88,0x08,0x0c,0xff,0x42,0x72,0x6a,0xb0,0x8a,0xc9,0x3d,0xdb,0x04,0x90,0xdd,0x0b,0xbc,0x3a,0x4e,0xfa,0xd4,0x57,0xd8,0x2f,0x7b,0xcb,0xd9,0x6a,0xe7,0xfd,0x32,0x17,0x99,0x20,0x64,0x1e,0x76,0x07,0xb9,0xa3,0x58,0x7f,0x79,0xda,0x0c,0xe0,0xec
db	0x30,0xbf,0xa4,0x85,0x0a,0x39,0xc0,0xe9,0xf7,0xbe,0xd1,0xa7,0x94,0x1f,0xa6,0x6d,0xe8,0xc5,0x1b,0x04,0x27,0xf4,0xdc,0xc2,0x4d,0x9a,0x0e,0x9b,0xe8,0xec,0x56,0x99,0x90,0x5f,0x8b,0x28,0x0a,0x92,0xaf,0x0b,0xa1,0xd2,0x85,0x86,0x26,0xc7,0x8a,0x01,0xa4,0x08,0x29,0x32,0x7d,0x3d,0xa5,0x74,0x9c,0x90,0x63,0x83,0x1f,0xd4,0xee,0x98
db	0xf5,0x14,0xff,0x39,0xeb,0xbf,0x40,0xa4,0xc9,0x70,0x4f,0x81,0x03,0x19,0xef,0xf5,0xdf,0xf7,0x00,0x75,0xcb,0x2e,0x81,0x41,0xc5,0xda,0xfb,0x67,0x6a,0xf0,0xa3,0xd3,0x5a,0x60,0xaf,0x72,0x27,0x3e,0xad,0x37,0x3e,0x3d,0xe6,0x85,0x4c,0xa1,0xb0,0xe9,0xab,0xc5,0xd3,0x8b,0x04,0x0d,0x64,0x7f,0xa2,0xb9,0x6d,0x6d,0x28,0xf8,0x4b,0x43
db	0x78,0x51,0xf4,0x84,0xf1,0x3c,0x67,0xd8,0xdd,0xd7,0x0b,0x67,0xc3,0xd9,0x95,0x7b,0xfc,0x7d,0xc4,0x33,0x05,0x90,0xec,0x0a,0x98,0xfb,0x6b,0x0d,0xe9,0x8c,0x74,0x94,0x20,0xf8,0xcb,0xca,0xb6,0x72,0x07,0x7c,0xef,0xfa,0xd0,0x3f,0x51,0xc5,0x6e,0xf8,0x3f,0x37,0xe3,0xfe,0xb9,0x9a,0x9c,0xb3,0xf6,0x96,0x4e,0x65,0x77,0x21,0xcf,0xaf
db	0xe7,0x20,0x06,0xc2,0x93,0xc5,0x2e,0xc0,0x7f,0xe5,0x0a,0x42,0xad,0x89,0x64,0x6e,0x95,0xbf,0x95,0x1d,0x24,0x47,0xf8,0xd5,0xec,0x7c,0x1f,0x98,0x67,0x9c,0x5f,0x6e,0xaf,0x74,0x95,0x65,0x4c,0xb6,0xe0,0xd3,0xb7,0x5b,0xc7,0x76,0xe6,0x87,0x19,0xf5,0xc7,0xb0,0x2d,0xe0,0x8b,0xaf,0x6d,0x3c,0x31,0x6e,0x84,0xc8,0x86,0x51,0xff,0x29
db	0x2a,0x1f,0xea,0xd4,0x2d,0x1a,0x8f,0x04,0xb4,0xc0,0x6a,0x93,0xc2,0xc5,0xe7,0x98,0x8c,0xc7,0xff,0xbf,0xb8,0x8e,0x5b,0x29,0x5b,0xa6,0x87,0xc7,0x02,0x88,0x51,0x29,0x66,0xd8,0xf3,0x68,0x38,0xd4,0xa6,0xbd,0xa2,0x5c,0x1b,0xb7,0x13,0xd7,0x64,0xed,0x68,0x21,0x88,0x2b,0x59,0xba,0x95,0x84,0xda,0xce,0x61,0x3b,0x51,0x04,0x3e,0xc2
db	0xdd,0xec,0x0c,0x6b,0xbe,0x35,0x51,0x63,0x29,0x40,0xcb,0xa5,0x62,0xe4,0x27,0x35,0x15,0x1f,0x7c,0x8b,0xe5,0xd0,0x2e,0xde,0x8c,0x3d,0xa0,0xd2,0xbe,0x51,0x3d,0x65,0xed,0x94,0x8b,0x8c,0x00,0xda,0x0e,0x78,0x4d,0x25,0xef,0x8e,0x3c,0x55,0x77,0xeb,0x58,0x06,0x7d,0xd1,0xfc,0x73,0xad,0x76,0x0a,0x81,0xbe,0xda,0x50,0x30,0xf3,0xfd
db	0x58,0x25,0x0a,0x4b,0x1b,0x1e,0x0b,0xd0,0x9b,0xbc,0xb9,0x31,0x26,0xbc,0x4c,0x7b,0x05,0xd7,0x5c,0xe4,0x7a,0xdd,0xff,0x04,0xac,0x5d,0xcb,0xfd,0x91,0x34,0x68,0x26,0x1e,0xb4,0x86,0xcc,0xe3,0x90,0xaf,0x6a,0x65,0xda,0x6b,0x3e,0xec,0x44,0x90,0x72,0x7a,0x34,0xfc,0x7b,0x65,0x83,0x34,0x93,0xbc,0x85,0x50,0xdf,0x03,0x89,0x35,0xb8
db	0x6a,0x39,0xd3,0xb6,0x38,0x66,0x5b,0xa7,0x9e,0x93,0xa2,0x3b,0xb6,0xe7,0xee,0x1e,0x5c,0xd6,0xa8,0xd9,0x1f,0xf7,0xd1,0x0a,0x2f,0x87,0x63,0xf4,0xf9,0x8c,0xd4,0x7c,0x02,0xaf,0x7e,0xb6,0xc7,0xfc,0xc9,0x4d,0x35,0x0c,0x8c,0x3c,0x13,0x9d,0xe6,0xd7,0x2e,0x4b,0x91,0xcc,0x88,0xdb,0xfc,0x68,0x3a,0xd1,0x15,0x07,0x16,0x66,0x11,0x9b
db	0x66,0x9f,0x3f,0x37,0xae,0x11,0xba,0x5f,0xc7,0x3a,0x1a,0x49,0xbc,0x14,0x21,0x75,0xdc,0xcc,0xbb,0x5c,0xed,0xdc,0x8b,0x21,0x9a,0x8f,0x5f,0x91,0x6a,0x9b,0x26,0x33,0x64,0x45,0xa0,0xdf,0xc4,0xa1,0x32,0xc4,0x4c,0xc2,0x42,0x1b,0x59,0x37,0x1f,0xdb,0x01,0x6d,0xed,0xd8,0x05,0x5b,0x90,0x59,0x32,0x45,0x50,0x5d,0xf1,0x34,0xc4,0xb7
db	0x52,0x97,0xbb,0x42,0x12,0xf1,0xa5,0x76,0xe4,0x1a,0xbc,0x4a,0x64,0xd3,0x08,0xac,0xe1,0x49,0x70,0x61,0xc8,0xcf,0xb1,0xd3,0xc4,0x7f,0x38,0x31,0x6b,0xd3,0xe1,0xe1,0xe9,0x5b,0xaa,0x7a,0xec,0x26,0x81,0x44,0xd3,0xb9,0x63,0xea,0x37,0x98,0x15,0x41,0xf1,0xa1,0x72,0x87,0xcc,0x3b,0x6a,0x27,0x9b,0x85,0xa8,0x7b,0xb6,0x25,0xf9,0xd4
db	0x84,0x3e,0x66,0x12,0xce,0x24,0xee,0x22,0x51,0x73,0x7e,0xba,0x1e,0x95,0x64,0xc5,0xbf,0x4e,0x4f,0x73,0xc1,0xc3,0x98,0xb9,0x6b,0x90,0x1f,0x39,0xfc,0x03,0x55,0x76,0x8c,0x57,0xea,0xe8,0xc1,0x25,0x09,0x69,0xc0,0xe8,0x54,0x91,0xc1,0x7c,0x52,0x8e,0x82,0x6d,0xf2,0x0e,0x3f,0xa9,0x98,0x04,0x40,0xda,0x1c,0xc0,0xbb,0x42,0xf0,0x7d
db	0xed,0x78,0xb0,0x4f,0x94,0xba,0x0d,0xbf,0x60,0xbe,0x09,0x67,0x42,0xc5,0x41,0x4c,0x80,0x8d,0x30,0x10,0xa9,0xd2,0x07,0x8c,0xa8,0x40,0xc6,0xe2,0x08,0x42,0x7f,0x99,0xad,0xc5,0x66,0x1f,0xfd,0xd2,0xc5,0x79,0x77,0x9b,0x60,0x7d,0x25,0x2d,0x69,0x14,0x94,0xa5,0xf0,0x0a,0x14,0xb6,0xf9,0xbe,0x3a,0x4a,0x3d,0xc6,0x45,0x2e,0x27,0x4a
db	0xd1,0x1d,0xcf,0x08,0xee,0x93,0x3c,0xb5,0x8a,0xee,0xdd,0xf3,0x33,0xa6,0x35,0x9d,0xd8,0xb4,0x68,0xc5,0x98,0x09,0x78,0xcc,0xb3,0xeb,0x0f,0xcd,0x25,0xf8,0x17,0x9c,0x45,0x77,0xc7,0x06,0x40,0x44,0x90,0xec,0x6a,0xd9,0xf5,0x05,0xd4,0x88,0x17,0x47,0xeb,0x29,0x85,0x32,0x76,0x7b,0xa4,0xe3,0x65,0x30,0x50,0x9a,0x99,0x26,0x91,0x60
db	0xb0,0xb8,0xe5,0x8d,0x35,0x9e,0x9a,0x13,0x65,0x82,0xb2,0x4b,0xf1,0xed,0x1f,0xb7,0xb4,0xc0,0x03,0xe6,0x1d,0x2b,0xaa,0x1e,0x01,0x92,0x0b,0xcb,0x34,0x77,0x80,0x94,0xc2,0x4e,0x3b,0x73,0xd8,0x2e,0xd8,0x95,0x33,0x05,0x65,0xa2,0x99,0x29,0x7a,0xd1,0xb3,0xed,0x5a,0x8d,0x4d,0x6a,0x6d,0x69,0x2b,0x5a,0xa1,0x3a,0xc0,0x81,0x96,0xf1
db	0xc2,0xa7,0x4e,0x07,0x90,0x04,0x99,0x70,0xea,0x1a,0x3a,0x26,0xb5,0xed,0x92,0xbd,0x57,0x80,0x11,0x06,0xf2,0xb4,0x05,0x69,0x7a,0xbf,0x27,0xa1,0xbd,0xdb,0x09,0xe5,0xb3,0x2d,0x86,0x41,0xcc,0x5d,0x68,0x37,0x9e,0x98,0xa5,0x4a,0x20,0x8a,0x5f,0x54,0xae,0x4f,0x73,0xd0,0x22,0x18,0x8d,0x2b,0x91,0xcb,0xbb,0x83,0x1e,0x04,0x93,0xc8
db	0xc3,0x89,0x35,0xfd,0xda,0xeb,0x52,0x53,0x9f,0xdc,0x33,0xf0,0xe0,0x99,0x19,0x11,0xeb,0x55,0xd3,0x3c,0x5f,0xca,0x29,0x52,0xe7,0x6b,0xd1,0xad,0xeb,0xed,0x8e,0x68,0x82,0x91,0x85,0x81,0x68,0x70,0x78,0x61,0x1e,0x0c,0x09,0x3a,0x82,0xdc,0xdb,0x26,0x66,0x1c,0xa3,0x80,0x99,0x23,0x8a,0x45,0xd7,0xb8,0x10,0x97,0x80,0x70,0x49,0x78
db	0xa9,0x4c,0xf0,0xec,0xcc,0x05,0xd0,0x6a,0x6a,0x1a,0xa0,0xf7,0xde,0x78,0xc6,0x42,0xbe,0xbd,0xa0,0x24,0x1d,0x3f,0xdd,0xfb,0x92,0xc2,0xbd,0xd6,0x5c,0x25,0x74,0x3d,0x2b,0xb8,0x60,0x67,0xdb,0x70,0x1e,0xe8,0x9f,0xcd,0xb4,0x82,0x90,0x9e,0x2a,0x94,0xa5,0xa2,0xd4,0xd2,0x24,0xa7,0xca,0xbf,0xe1,0x8b,0xab,0xf3,0xd2,0x7c,0xa6,0xc8
db	0xe6,0xaf,0xef,0xe3,0x86,0xb1,0x42,0x1d,0xc6,0xa2,0x37,0x9b,0x26,0x46,0x0b,0xfd,0xee,0x88,0xa4,0xf1,0xa8,0x72,0xaf,0xda,0x30,0x56,0x22,0xd3,0x1b,0x31,0x76,0xd7,0x03,0xef,0xf3,0x98,0x16,0x4d,0x36,0x57,0x1b,0xd5,0x90,0xb8,0x67,0x50,0x7f,0x22,0xa8,0xdc,0x9c,0xf1,0x6e,0xa4,0x65,0x45,0xf0,0x73,0xd8,0x7e,0x41,0xb0,0x68,0x52
db	0x00,0x0a,0xda,0x99,0x6c,0x84,0xce,0xf0,0x73,0x65,0x93,0x52,0xc8,0x4b,0xb4,0x72,0xda,0x2c,0xa1,0x47,0xb5,0xe3,0x00,0x63,0xc0,0x4e,0x84,0x16,0x00,0xe6,0x1f,0xbd,0xba,0x49,0xcb,0xd3,0x7d,0xd2,0xeb,0x4a,0xb2,0xd5,0xb2,0x53,0x96,0xfb,0x04,0x73,0xc0,0x09,0x31,0xf3,0xf2,0xc0,0xd3,0xa6,0xe1,0xea,0xe1,0x58,0xbe,0x90,0xc9,0xfb
db	0x6e,0x13,0x69,0xbe,0x17,0xd4,0x16,0x5b,0xcb,0xf4,0x93,0x0a,0x38,0x46,0xea,0x64,0xad,0xb0,0x0d,0xc0,0x3b,0xfc,0xe3,0xd4,0x20,0x75,0x0c,0x3e,0x71,0x1b,0x5f,0xde,0xff,0xd6,0xfa,0x6f,0xe4,0x10,0xb0,0x14,0x05,0xaa,0x05,0x70,0x5e,0xbd,0x58,0x9f,0x3c,0x9d,0x4f,0xa7,0x5a,0x65,0x57,0x02,0x05,0x44,0xe0,0x95,0x9d,0xa2,0x60,0x06
db	0xcb,0xfd,0x91,0x8e,0x7f,0xce,0xa1,0x80,0x94,0xbb,0x88,0xf2,0xa6,0xe7,0x83,0xf9,0x38,0x8f,0x09,0x8e,0xe4,0xa9,0xc2,0xc7,0x84,0x9d,0x25,0x09,0x52,0x8b,0x32,0xaa,0x3b,0xde,0xb6,0x82,0x9f,0x6d,0xc4,0xdf,0x11,0xf7,0x72,0x1a,0xe4,0x00,0x51,0x41,0x01,0xba,0x21,0xea,0x0a,0xda,0xf2,0xbb,0x66,0xae,0x51,0x2b,0xb0,0x6d,0x1d,0xe8
db	0x4b,0x1e,0x42,0x68,0x3a,0xed,0xe6,0x59,0x13,0x42,0x07,0x54,0xae,0x2e,0x15,0x93,0xd7,0xff,0xad,0x49,0x09,0x41,0x52,0x6b,0x3b,0x9c,0x41,0x43,0x0d,0xed,0xed,0x6f,0xb8,0xe9,0x0d,0xcc,0xde,0x0d,0xaa,0x91,0xef,0x89,0x2f,0x2d,0x94,0xd0,0x03,0x2b,0x51,0x7f,0x85,0x9b,0x7b,0x08,0xc8,0xb6,0xe2,0x82,0x22,0xa9,0x57,0x71,0xf2,0xae
db	0x08,0xfa,0x6c,0xd8,0xca,0x78,0x42,0x98,0x23,0xfd,0x38,0x4b,0x6c,0xd3,0x9f,0xc6,0xa3,0xb2,0xc1,0x8c,0x4a,0xa3,0xcd,0x9f,0x56,0xe7,0xc2,0x06,0xd7,0xc5,0xc2,0xd9,0x98,0x57,0xc8,0x5a,0xaa,0xf4,0xaa,0x44,0x02,0x83,0x11,0x1e,0xf6,0x64,0x8d,0xf7,0x3b,0x86,0x3c,0x04,0x53,0x5f,0x62,0xc8,0x7a,0x0e,0x1c,0x4f,0xa8,0xe3,0x5c,0xe8
db	0x64,0xf7,0xe3,0x5d,0xea,0xb5,0x2d,0xdb,0x7b,0x0e,0xdb,0x91,0x34,0xd5,0x87,0x4f,0xe6,0x73,0xee,0x3d,0x79,0x7c,0x67,0x48,0xb5,0xbb,0x42,0x96,0x0d,0x9d,0xbd,0x68,0x98,0xe5,0x59,0x51,0x16,0x45,0x15,0xac,0x80,0x41,0xae,0x45,0xdb,0xe4,0x2a,0x44,0x0d,0xe4,0x25,0xc7,0xd3,0x06,0xf7,0x98,0x15,0xe1,0xc5,0x9b,0x34,0x0e,0x87,0xb8
db	0x90,0x1b,0x24,0x84,0x06,0x24,0xb0,0x80,0xbe,0x03,0xa0,0x95,0x10,0x1e,0x72,0xde,0x0f,0xd4,0x15,0x7b,0xa0,0xf5,0x42,0xc3,0x6f,0x10,0xe9,0x76,0x44,0xe3,0xa9,0xb7,0xef,0xf6,0xc2,0x80,0xe2,0x0c,0x2d,0xad,0xe0,0xb9,0x45,0xca,0x67,0x6f,0xb6,0xc5,0xc0,0x8d,0x25,0xee,0x50,0xeb,0x51,0xc6,0x87,0x87,0x61,0x3a,0x75,0x95,0x41,0x47
db	0x26,0xfd,0x35,0xf6,0x46,0xf4,0xe9,0x42,0xc6,0xef,0x37,0x97,0xb3,0x0a,0x1d,0xc8,0xdf,0x07,0x24,0xb1,0x0d,0x07,0x43,0x67,0x7d,0x81,0x09,0x58,0xdd,0xf6,0xcf,0xf1,0x47,0x42,0xbd,0x3c,0xa3,0xd7,0xe8,0x73,0xf9,0x5b,0xff,0x2c,0xcd,0xe6,0xd1,0xe9,0x47,0x6d,0x19,0x9b,0x6a,0x63,0x69,0xf4,0x4a,0xdf,0x69,0xab,0xa9,0xb7,0xe5,0x8d
db	0x1c,0x44,0x52,0x0c,0x7e,0xa1,0xfe,0x9d,0xd5,0xa4,0x71,0x62,0x0b,0x3c,0xf6,0xd2,0xd3,0xe9,0x70,0x09,0x68,0xf7,0xd6,0x0a,0x00,0x61,0xf1,0xf3,0xd0,0x41,0x4a,0x14,0xc6,0xf5,0x49,0xb1,0xde,0x10,0xd3,0x20,0x8b,0xfe,0x78,0x6a,0x87,0x79,0x15,0xd3,0x43,0x00,0xbe,0x71,0x40,0xaa,0xca,0x1a,0x64,0xe3,0x96,0x34,0x2f,0xea,0x0c,0x11
db	0x41,0x21,0xf8,0xa7,0x65,0x9b,0x75,0xe2,0x1e,0x6f,0x5e,0xe0,0x68,0x42,0xca,0xd3,0x19,0x35,0xe8,0x88,0x0f,0x05,0xa3,0xb1,0x73,0xea,0x53,0x79,0x40,0x24,0x00,0x86,0x20,0xbb,0x25,0x58,0x89,0x6b,0xde,0xd6,0xd0,0x36,0xbb,0x33,0x30,0x59,0x4b,0x30,0x92,0xac,0xe5,0x95,0x94,0x22,0xab,0xc1,0x10,0x35,0x9c,0xa1,0x20,0x11,0x5d,0x4f
db	0x57,0x5c,0x9c,0xb8,0x3a,0xdc,0x97,0xa5,0xf3,0x0b,0xf5,0x96,0xe7,0xef,0x90,0x72,0x01,0x52,0x70,0x5a,0xf0,0xd9,0x7e,0x59,0x05,0x8c,0xd1,0x45,0x47,0xbf,0x16,0x15,0xa2,0xc9,0xdd,0xe7,0x5f,0x4b,0x94,0x5f,0xe6,0xf9,0x78,0xbb,0x8f,0xf9,0x79,0x9f,0x5e,0xd7,0x1f,0x0b,0xef,0x8d,0xfe,0x75,0xd4,0x8a,0x12,0x28,0xa5,0xf9,0x6e,0x14
db	0x3c,0x52,0x80,0x57,0xc6,0x96,0xae,0x67,0x27,0xc1,0x1c,0xb6,0xd6,0x1c,0x74,0x8c,0x6f,0xc7,0x71,0x3e,0xd5,0x73,0xf2,0x3e,0x02,0x15,0x67,0x18,0xb8,0x5b,0x61,0x9e,0xfa,0x7e,0xba,0x00,0xe9,0xd9,0x51,0x91,0x63,0x7e,0xf7,0xab,0xc0,0xc6,0xee,0x66,0xdd,0x66,0x88,0x7a,0x8a,0xc5,0xc2,0x08,0x45,0x62,0xde,0xe1,0xfb,0x35,0x65,0x34
db	0x00,0x9e,0x1d,0x25,0xdf,0x69,0xb6,0xe3,0xfe,0xbb,0x13,0xac,0xd3,0x13,0xb2,0x64,0x5a,0xf3,0x47,0xf1,0x36,0x55,0x5f,0x1b,0x87,0xea,0x5d,0x5c,0xfd,0x8a,0x68,0x69,0x8a,0x00,0x9f,0x83,0xbe,0x79,0x7d,0x01,0x9e,0xf2,0xb2,0x5d,0x56,0xe0,0xe6,0x49,0xe5,0xe1,0x76,0x57,0x7a,0x85,0xac,0x94,0x16,0xe3,0x68,0x05,0x14,0xb5,0x33,0x54
db	0x64,0x5a,0xbe,0xa3,0x04,0x90,0x5c,0x1c,0xf8,0x97,0x16,0x36,0xce,0x76,0xe7,0xf0,0xaf,0x8a,0xea,0x65,0xa8,0x15,0x5b,0x1e,0x0a,0x91,0xad,0x62,0x62,0x67,0xb4,0xf0,0x94,0x1f,0x64,0x50,0xa8,0xc0,0x6b,0x38,0x80,0xd7,0x53,0xbb,0x70,0xbd,0x54,0x01,0xb0,0xa5,0xbc,0x00,0xe0,0xd6,0x23,0x37,0xe6,0x9f,0x0f,0x2f,0x96,0x21,0xc2,0x90
db	0x55,0x26,0x55,0xa4,0xcd,0x3e,0x54,0x6b,0xa6,0xb0,0x2c,0xf2,0xd4,0xcc,0x6a,0x44,0xea,0x18,0x61,0xc5,0x1a,0x8e,0x60,0x64,0xf4,0x5f,0x21,0x36,0x01,0x5d,0x9f,0xc4,0x2c,0x67,0x1c,0x48,0x94,0x16,0xae,0xa8,0x13,0x5c,0xee,0x18,0x88,0x61,0xe4,0x54,0x6b,0xa2,0xe8,0x7f,0xf0,0x15,0xc3,0xce,0xbc,0x5b,0x91,0x25,0x7b,0x1d,0xd3,0x9f
db	0x13,0x1b,0x01,0x5d,0x43,0xe8,0xa1,0x77,0x5a,0x87,0x79,0x8b,0xd5,0x69,0xf7,0xdf,0x66,0xa2,0x84,0x0c,0x66,0xac,0x15,0x65,0xbf,0x74,0xc0,0xd2,0x78,0x6a,0x3a,0x9c,0x98,0x62,0x04,0x41,0x95,0xb2,0x23,0x59,0xc6,0xb0,0xc5,0x22,0xc0,0xfa,0xaa,0xc8,0x94,0x73,0x91,0x5b,0x64,0x1b,0x74,0xbe,0xcb,0xa1,0x81,0xb1,0xc1,0x26,0xa1,0x94
db	0x55,0x04,0xb3,0x9c,0x80,0xb7,0x00,0x6f,0x36,0xc7,0x7f,0x6d,0x97,0xea,0xf3,0xf5,0x55,0xc5,0xfe,0x61,0xd9,0xb1,0x6d,0x8c,0xa1,0x02,0x08,0xb3,0x41,0xe6,0xe6,0x57,0xc6,0xff,0x6e,0x47,0xa4,0x22,0x2e,0x2d,0x21,0x53,0xbe,0xe3,0xbe,0x15,0xec,0x23,0x9d,0x87,0xe0,0x2e,0xcc,0x6c,0xd0,0xc7,0xb7,0x3d,0xa4,0x07,0x5f,0x69,0x4e,0x2b
db	0x07,0x69,0x4f,0xc5,0xa3,0x66,0x52,0x91,0x8f,0xa4,0x48,0xb9,0x40,0x76,0xd9,0xcb,0x6e,0x1a,0x35,0x9e,0x50,0x9f,0xd1,0x78,0xb2,0xb8,0x0d,0xa8,0xf8,0x6e,0x07,0xa5,0x3a,0xdf,0x3c,0x32,0xa6,0x10,0xbd,0x73,0x2f,0x07,0x45,0x66,0x0f,0x61,0xce,0xc2,0x08,0x19,0x98,0x33,0x4b,0x59,0x81,0xb5,0x78,0x4f,0x46,0x88,0xae,0x29,0xf8,0xf5
db	0xc2,0x29,0x6f,0x8f,0xe5,0x8f,0xb0,0x53,0xc8,0x7a,0x48,0xda,0x6f,0x7e,0x8a,0x69,0x68,0xab,0xba,0xd9,0x20,0x0f,0x96,0x69,0x41,0xa6,0x92,0x94,0x8e,0x0f,0x86,0xdf,0x8d,0x70,0xaf,0xfe,0xf1,0x20,0x50,0x01,0xff,0xca,0x30,0x24,0x67,0x4a,0x04,0xa2,0xde,0x06,0xdc,0x26,0x1e,0x17,0xbc,0x52,0x9a,0x62,0x72,0xc1,0xd8,0xd7,0xe0,0xed
db	0xcf,0x4b,0x13,0x80,0x9a,0xbf,0x72,0x4f,0xf4,0x24,0x26,0xcd,0xe0,0x21,0x99,0x7b,0x5c,0x4f,0xbf,0x5c,0x41,0x08,0x8b,0x17,0x69,0x62,0x60,0x2c,0x74,0xb0,0x2d,0x22,0x7e,0x25,0x95,0x6a,0x84,0x0f,0x45,0x8f,0x9a,0x92,0xa1,0xcd,0xa5,0x50,0xf0,0x52,0x7f,0x60,0xd8,0x91,0xe1,0x17,0xe1,0x66,0x8f,0xd3,0x1f,0x41,0x7f,0x6f,0xf1,0x72
db	0xa3,0xb6,0x12,0x62,0x46,0x16,0xea,0x26,0x9e,0xda,0x61,0x13,0x0b,0x17,0xf7,0xe1,0xec,0xc0,0x38,0xfe,0x40,0x31,0x6b,0x38,0x2a,0x4b,0xa5,0x8e,0xfb,0x99,0x60,0xd6,0x4a,0xbd,0xfb,0x75,0x2b,0x41,0xd4,0x33,0x5d,0x35,0xfe,0x2d,0xfc,0x1a,0xac,0x02,0xb3,0xf0,0xa2,0x6d,0xfa,0x8b,0x12,0x99,0xdd,0x54,0xf2,0x1c,0x35,0xd3,0x60,0x5a
db	0xdb,0x65,0xa7,0x58,0x1b,0x82,0xb4,0xf6,0x49,0x77,0xf2,0xea,0xa3,0xa9,0x57,0x94,0xb7,0x6e,0x19,0xda,0x7e,0xa5,0x70,0xb8,0xff,0x39,0x81,0x7d,0xfa,0xea,0xd6,0xc6,0x12,0x84,0x0a,0x8a,0x16,0xde,0x99,0xa6,0xe7,0xe0,0x77,0x76,0xb8,0xa3,0x6f,0xfb,0xb4,0x8f,0xc3,0xbd,0x90,0xd8,0x2a,0x04,0xed,0x42,0x91,0x9b,0x84,0x40,0x2d,0x01
db	0x94,0xdb,0xbb,0x58,0x25,0xed,0xa3,0xdd,0xaa,0x0c,0xce,0x25,0x12,0xcd,0x11,0xbf,0xd0,0x57,0xe9,0x51,0x74,0xa7,0x45,0x6c,0x58,0xe7,0x4d,0x43,0xc6,0xd0,0x09,0x93,0x2d,0xe0,0xe3,0xae,0x7b,0x8f,0x53,0xa0,0x80,0xa1,0xef,0xcb,0xf5,0xfe,0x38,0x4d,0x31,0xa2,0x5c,0xd3,0x4a,0x66,0x1a,0x5c,0x07,0xbe,0x25,0xba,0x30,0xb6,0x00,0x27
db	0x52,0xb9,0x1f,0xa3,0xed,0xd7,0x31,0x33,0x4a,0xf6,0x3f,0xed,0x75,0xe7,0xa4,0xf4,0xdf,0x97,0xc1,0x78,0x90,0x9b,0x4b,0xbd,0x06,0xc6,0x72,0x5c,0xdf,0x57,0x60,0xbe,0xbc,0x88,0x02,0xb6,0x5a,0x65,0xea,0x3a,0x3a,0x74,0x03,0xc8,0x66,0xef,0xf0,0x63,0xc7,0x9d,0x58,0x8e,0xa1,0xb2,0x25,0x4f,0xc4,0x14,0x5f,0x80,0x78,0x08,0x06,0x21
db	0x50,0x34,0x01,0x2b,0x15,0xf4,0x7d,0x1f,0x1f,0x32,0x36,0x0a,0x52,0x1f,0x50,0xa2,0x50,0xbc,0x9a,0xdf,0x4e,0x84,0x49,0x2d,0x08,0xaa,0x46,0xc0,0x0e,0xcf,0x27,0x17,0x91,0x78,0x8c,0xb9,0x72,0xc5,0x8e,0x25,0x85,0x11,0xff,0x2f,0x4a,0x71,0x7c,0x14,0xfe,0x86,0xfe,0xb4,0x3a,0xd0,0x67,0xfd,0xaa,0x9b,0xee,0x89,0x66,0x03,0x59,0x4e
db	0x1c,0x96,0xaf,0x2b,0x8d,0x4d,0x6f,0xf6,0x72,0xc6,0x13,0xc7,0x14,0xce,0x19,0x0c,0x0b,0xa3,0x01,0x12,0x7c,0x8e,0x10,0xb8,0x63,0x41,0x57,0xb9,0xfe,0x6e,0x3e,0xda,0x20,0xfb,0x92,0x08,0x7d,0x66,0x31,0x9d,0x4f,0xdb,0x14,0xf4,0xb6,0xb8,0xea,0xee,0x54,0x0f,0xaf,0xc1,0x99,0xf0,0x8f,0x55,0x44,0x20,0x44,0xd0,0xa6,0x98,0xa3,0xa8
db	0x8b,0x8e,0x26,0x03,0xec,0x2d,0x50,0x4f,0xb0,0x8d,0xd0,0xf2,0x96,0xcc,0x18,0xa9,0xb1,0x0f,0x79,0xe3,0x9f,0x08,0xb3,0x53,0x0b,0x9c,0x9f,0x22,0xdb,0x45,0x57,0xd6,0xaa,0x3b,0x6a,0xcb,0xdc,0xc9,0xda,0x57,0x75,0x65,0x0a,0xc1,0x17,0xb3,0x97,0xa9,0x07,0x40,0x20,0xfb,0x72,0x2d,0xc6,0x37,0x1e,0x44,0xb7,0x7e,0x0b,0x38,0xcc,0xfc
db	0xa0,0xed,0x48,0xa9,0x9b,0x87,0xbc,0x71,0x0f,0x8b,0xda,0x4f,0x09,0x27,0x1e,0x3d,0x9c,0x03,0x62,0x81,0xa8,0x7c,0x7b,0x8a,0x14,0xa7,0x22,0x69,0xa8,0xba,0x0e,0xcc,0x1f,0x2b,0xb3,0x0f,0x7d,0xce,0x3f,0xec,0xb5,0x9d,0xe0,0x3a,0x67,0x56,0x08,0x5d,0x03,0x8b,0x71,0x01,0x44,0x11,0x1b,0x7b,0xcf,0xcc,0x2e,0xfc,0xa5,0x52,0x9b,0xeb
db	0x1e,0x8a,0xa1,0x86,0x64,0xcf,0x32,0x03,0x6b,0x3e,0x29,0xe7,0x9a,0x16,0x7e,0xe2,0x21,0x2f,0x5f,0xe2,0x86,0x7f,0xf8,0x22,0x36,0x10,0x99,0xc8,0x27,0x43,0xa1,0xb9,0xf4,0xb4,0xb8,0xe1,0xa3,0x1d,0x80,0x9c,0x81,0x92,0xef,0x1f,0x28,0x54,0x51,0xf3,0x62,0x9c,0x7a,0x24,0xd4,0x5a,0xdc,0x38,0x4f,0xa5,0x57,0xdd,0x4d,0xa1,0x52,0xf3
db	0xd3,0x9d,0xa1,0x93,0x5e,0xbe,0x9b,0xd1,0x2a,0x52,0xf1,0xbb,0xa5,0x3f,0x3a,0x94,0x7c,0x7d,0x41,0x61,0x36,0x14,0x25,0x5f,0xab,0xef,0x32,0xf3,0x0f,0x6c,0xc5,0xf5,0x5f,0xe5,0x88,0x51,0x17,0x60,0x8b,0xd5,0xa6,0xea,0x8b,0x21,0xec,0x1a,0xa7,0x69,0xa0,0x59,0xf9,0xeb,0x51,0x94,0x70,0x2b,0x96,0x2e,0x71,0xa9,0x8c,0x12,0x15,0xce
db	0x7d,0x59,0x6b,0xf2,0xca,0x2c,0xbd,0x85,0xfb,0x23,0xab,0xcb,0x89,0x89,0xda,0x28,0x49,0x7e,0xfc,0x90,0x2a,0x9a,0x3d,0x6d,0x24,0x57,0xba,0xd9,0x30,0xe0,0x10,0x04,0xb1,0x7f,0x8a,0xcf,0xc8,0x27,0x63,0xd6,0xbd,0xea,0xef,0x90,0x6f,0xc2,0xfc,0x78,0xfd,0xc4,0x5b,0x45,0x0c,0x41,0x8a,0x53,0x5b,0xbc,0x62,0x32,0x86,0x7f,0x19,0xb7
db	0x8b,0x03,0x50,0xed,0xca,0x8e,0x8b,0xa0,0xe3,0xc2,0x0e,0x81,0xe5,0x8a,0xe8,0xf1,0x6a,0x0b,0x1a,0xa7,0xb6,0xed,0x74,0x23,0x34,0xad,0x5b,0xd8,0xf7,0x17,0x8d,0xa5,0x05,0xf3,0x00,0x4a,0xad,0x7e,0x91,0xc9,0x6b,0x13,0xff,0x76,0x78,0xf0,0xd1,0xf4,0x99,0x43,0x73,0xd9,0xba,0x59,0xbe,0xb5,0xa3,0xbd,0x5e,0xc5,0xd3,0x88,0x06,0x9c
db	0x86,0x32,0xb4,0xd5,0x30,0x77,0x78,0x8e,0xd5,0x6a,0x1d,0xeb,0xfd,0x6b,0xe6,0xf8,0x4b,0xe8,0xf3,0xba,0xbb,0x86,0x8e,0xe6,0x63,0x83,0x92,0x23,0x05,0x58,0x2e,0x61,0xdd,0x38,0xad,0x8d,0x19,0x7d,0xfa,0x7c,0x3e,0xc8,0x9f,0xae,0xea,0x6d,0x12,0xf0,0xa4,0x08,0xed,0x12,0x0c,0x97,0x87,0x58,0xd8,0xbc,0x3f,0xde,0x7c,0xee,0x0c,0xc0
db	0xa2,0x2e,0xf0,0x25,0x6d,0xf3,0x30,0x23,0xa7,0xc2,0xc8,0x09,0x67,0x01,0xe1,0x25,0x26,0x46,0x38,0xf5,0x5e,0x55,0x8b,0xd6,0x43,0x6a,0xb8,0xe4,0xdf,0x0f,0x5d,0x6c,0xc3,0xb2,0x56,0x38,0xda,0xbc,0xbf,0x5e,0x85,0x8c,0xd5,0x2a,0x6a,0xe2,0xff,0x4f,0x36,0xf7,0x52,0x2c,0xe2,0xae,0x65,0x65,0xd1,0xfc,0xd3,0xc6,0xf7,0x26,0xa6,0xd0
db	0x0b,0xc8,0xf0,0x68,0x5d,0x07,0x89,0x06,0xb3,0xfb,0x39,0x1d,0xd8,0xd8,0xd7,0x53,0xd0,0xc9,0x76,0x56,0xc0,0xd3,0xf5,0x66,0x80,0x5b,0xff,0x4a,0xdf,0xae,0x52,0x86,0x54,0x24,0x53,0xcf,0xcf,0xd2,0x89,0xde,0x71,0x62,0x9c,0x31,0xa5,0x3d,0x62,0x07,0xa1,0x33,0x49,0xbb,0x06,0x88,0xd8,0xa1,0xdd,0x0e,0x47,0x8d,0x72,0x00,0x2d,0x51
db	0xa3,0x35,0x6e,0xb6,0x1f,0xbf,0xe5,0x42,0x68,0x6f,0x62,0xfa,0xf3,0x12,0xa9,0x1a,0xbd,0xe8,0xa4,0xf1,0x6d,0x07,0xe7,0x70,0x87,0x44,0xb7,0x3d,0xea,0xdc,0x3a,0x24,0xbd,0xa0,0x9b,0xb8,0xc5,0xa8,0xd9,0x06,0xde,0x02,0x68,0x7e,0xd5,0x2d,0x3b,0x5f,0x12,0x31,0x72,0x35,0x77,0xf6,0x10,0x6e,0x81,0x7d,0x3c,0xac,0x95,0x5b,0xbe,0x90
db	0x74,0xf3,0x3e,0x9b,0x07,0x54,0x97,0xe3,0x1d,0xcf,0xe2,0xc5,0x80,0x6b,0x5f,0x0b,0x96,0x00,0x0f,0x0e,0x53,0x36,0x76,0x6e,0x99,0x0c,0x32,0xa2,0xc9,0xaa,0xa0,0xa1,0xb7,0xee,0x9d,0xd6,0x46,0xe7,0x2d,0x10,0x7a,0xf2,0x22,0x50,0x52,0xbf,0xec,0xcc,0xbc,0x0d,0x81,0x55,0x2d,0xac,0x2e,0xf7,0x99,0xbe,0x68,0x09,0xb0,0x11,0xc3,0xc8
db	0xca,0x63,0xa7,0xc2,0x0f,0x37,0x2a,0x9e,0x85,0x79,0x6b,0x44,0xc1,0x4f,0xb9,0xd6,0x6c,0x56,0x0e,0x59,0x33,0xc3,0x00,0x53,0xe2,0xf4,0x30,0x90,0x4e,0x4b,0x09,0x4d,0x6f,0x9a,0x9e,0xb9,0x8d,0x0b,0xa1,0x80,0xfd,0xfb,0xde,0x74,0x49,0x53,0x04,0x3a,0x35,0xcb,0x45,0xe2,0x67,0x2c,0x4d,0x6e,0x39,0x7b,0xbd,0x68,0xaa,0x93,0x1e,0xee
db	0x1e,0x35,0xae,0x1e,0xf2,0xe7,0xb1,0x80,0x92,0x45,0x27,0x85,0xd0,0xc7,0x26,0x17,0x54,0x30,0xba,0x0c,0x8e,0x48,0xf3,0x08,0x51,0xa6,0x41,0x70,0xba,0x5b,0x90,0x69,0x7c,0x64,0x1d,0x61,0xb5,0x23,0x4a,0xef,0x97,0xe4,0x9a,0xd0,0xff,0x47,0x7a,0x93,0x1a,0x28,0xb3,0x8a,0x32,0x29,0xf8,0xe9,0x08,0xc3,0xf3,0x24,0xd7,0x2e,0x18,0x6d
db	0x99,0x40,0x77,0x43,0x9f,0x98,0xe4,0xe5,0x3a,0x34,0x9d,0x46,0x52,0x9f,0x84,0x79,0x8c,0x70,0xbc,0x88,0x30,0xaf,0x87,0x69,0x57,0x6e,0xde,0x2e,0xfe,0x0f,0x3b,0x8d,0xc8,0x95,0xcf,0x69,0x78,0xff,0xa1,0xb1,0x81,0x49,0x1e,0x45,0xc0,0x83,0x1b,0xa3,0x5a,0xee,0x3e,0x9a,0x15,0x7c,0xf0,0xa2,0xfd,0x04,0x22,0x55,0x2d,0x74,0x61,0x29
db	0x0e,0x4f,0x31,0xdb,0x35,0x99,0x37,0xb7,0x7d,0x11,0xde,0x87,0x4f,0x84,0xeb,0x6c,0x14,0xcc,0xbb,0x71,0x47,0xab,0x5b,0x61,0x51,0xeb,0xa1,0xc1,0x5f,0xe4,0x5c,0x3c,0xab,0x04,0xf1,0x60,0x50,0xe1,0xd0,0x58,0xdf,0x42,0xed,0x73,0x5f,0x31,0xdf,0x8d,0xb8,0xb8,0xdc,0x4e,0x2f,0xe3,0x7f,0x89,0x9e,0x62,0xc9,0xef,0xfd,0x60,0xae,0x58
db	0xa9,0xa5,0x8b,0xa8,0x3b,0xd8,0x5f,0xd4,0x09,0xff,0x61,0x8c,0x25,0xde,0x84,0x7f,0x35,0xc9,0x5c,0x2b,0xe8,0x46,0xe4,0x1c,0xbd,0x77,0x51,0x31,0x55,0x3d,0xb4,0x35,0xf3,0xdc,0xa5,0x55,0xd3,0xe3,0x24,0xf9,0x41,0xe2,0xf0,0xbd,0xf5,0xff,0x81,0x87,0x64,0xc9,0xe7,0x69,0x29,0x86,0xaf,0x98,0x33,0x33,0x62,0x9c,0x7b,0x16,0xbb,0xfe
db	0x0b,0xa7,0x92,0xa5,0x7b,0x81,0xbc,0x50,0x88,0xf6,0xe7,0xfc,0x73,0xd6,0x37,0x43,0x09,0xa5,0xc6,0xd6,0x4d,0x28,0xb5,0xaa,0x53,0x52,0x8c,0x2c,0x06,0x64,0x6c,0x21,0x6b,0xe7,0x67,0x4a,0xa5,0xcc,0xa1,0x32,0xf0,0xd9,0x78,0xb9,0xc3,0xdb,0x41,0xee,0x10,0x11,0x81,0x04,0x03,0x73,0x48,0xc6,0x3e,0x60,0x6d,0x82,0xef,0xe2,0xa8,0xe8
db	0xd7,0xda,0xd9,0xb5,0x34,0x42,0xc8,0x1c,0xa7,0xa4,0x8e,0x88,0x2e,0xbc,0x96,0x0a,0xfc,0x40,0x36,0x80,0xdf,0x60,0xe9,0x03,0x02,0x0c,0x51,0xf7,0x7d,0x01,0xd2,0x21,0x38,0x44,0x4b,0x34,0x80,0xbf,0x5e,0xc1,0x86,0xf2,0x35,0xeb,0xa8,0x21,0x15,0x74,0x7c,0x99,0x55,0x64,0xf4,0x48,0xd6,0xd1,0x47,0x1f,0x4d,0xbf,0x0c,0x20,0x5d,0x86
db	0xb9,0xab,0x4e,0xc8,0x86,0x08,0x71,0x1d,0x13,0xf6,0xd3,0x17,0xac,0x61,0x10,0x5d,0x2a,0xb4,0x48,0xa1,0xb9,0x79,0x5a,0x09,0x3a,0x65,0x4c,0xbd,0x97,0xbe,0x48,0xc6,0x66,0xd8,0xce,0x0c,0x19,0xb5,0x44,0x02,0xfa,0xb7,0xa8,0x3f,0x9b,0x86,0xec,0xd1,0xef,0x1d,0x7d,0xb3,0x82,0x5c,0x92,0x48,0x02,0x2c,0x56,0x0f,0xff,0xf7,0x19,0x74
db	0xc2,0x38,0x24,0x8d,0xb2,0x87,0xb6,0xeb,0x49,0x50,0x6a,0x33,0x74,0x4e,0x2a,0xcb,0xf4,0x13,0x2c,0xfa,0x3b,0x0e,0x3d,0x98,0x3e,0x33,0xd9,0x55,0xfa,0xb9,0x74,0xb8,0x6f,0xc1,0xd8,0xfd,0x8f,0xff,0xb9,0x1a,0x17,0xf8,0xb6,0x21,0xc4,0x9d,0x47,0x5e,0x84,0xf6,0xe5,0xbf,0x93,0x98,0xac,0x8f,0x68,0x85,0xf8,0xe8,0x79,0x7f,0x6f,0x0d
db	0x62,0x2c,0xaa,0x1e,0xe4,0xab,0x73,0xf8,0x6f,0x02,0xda,0x6b,0x3c,0x14,0x2e,0xc9,0xdb,0xb0,0x4e,0x39,0xb5,0xcf,0x05,0xae,0x9c,0x63,0x2f,0x6a,0x25,0x61,0x9d,0x40,0xeb,0x7e,0xd8,0x97,0x97,0x33,0x67,0x5c,0x78,0x84,0x68,0xc2,0x7a,0x26,0x58,0xe3,0x6c,0x0a,0x2e,0x6a,0x82,0xd6,0x43,0xed,0x79,0xa5,0x8d,0x4e,0x7c,0xf7,0x80,0x01
db	0xe7,0x02,0x5e,0x3a,0xf7,0x8a,0x4a,0x85,0xe9,0x98,0x1e,0x69,0x33,0xf3,0x54,0x96,0x79,0xc8,0x03,0x0a,0x9f,0x0c,0x5d,0x66,0x44,0x88,0x3c,0xd7,0x9e,0xd1,0xde,0x01,0xfd,0x5e,0xa5,0x6a,0x82,0x00,0x36,0xe6,0x12,0xe3,0x62,0x46,0x45,0x69,0xfb,0x4f,0x44,0x8e,0xe5,0x8d,0x21,0x57,0x6a,0x61,0x8e,0x56,0xcb,0x5b,0x2c,0x5f,0x65,0x41
db	0x2c,0xad,0xf2,0x98,0x34,0xbb,0x06,0x0d,0x8a,0x3c,0x34,0x0d,0xa3,0xe2,0x6e,0x86,0xfa,0xa9,0xfb,0x6f,0xbb,0x32,0xd6,0x0d,0x76,0x6b,0x77,0xf3,0x83,0x41,0xc0,0x80,0x63,0x55,0x47,0xb8,0x13,0x6b,0x99,0x96,0x08,0x9b,0xc0,0x82,0xae,0x49,0x4a,0x51,0x63,0x74,0xf2,0xec,0xfa,0x0d,0xbc,0x3a,0xde,0xf5,0x4b,0x4f,0x08,0x41,0x23,0x88
db	0x14,0x88,0x6a,0x3a,0xf0,0x5f,0x0c,0x45,0x7f,0x65,0x7a,0x67,0xd8,0x17,0xed,0x04,0x47,0x60,0x0e,0x74,0x8f,0xfd,0x48,0xda,0xcd,0xe9,0xfe,0xf5,0x6f,0x43,0xcd,0xa5,0x05,0xa2,0x2e,0x78,0x5b,0xff,0xb8,0x6f,0x2e,0xfd,0x3e,0x4b,0xef,0xcf,0xe0,0x06,0x57,0x28,0xf4,0x2e,0x3b,0xb5,0x9e,0x3c,0xbd,0x63,0xa6,0x78,0x8e,0xd5,0xb8,0x81
db	0x4e,0xf0,0xbf,0x14,0x65,0xc8,0x00,0x9f,0x0e,0x25,0x6a,0x7a,0x63,0x58,0xe4,0xe7,0xa9,0x82,0x16,0xc9,0x86,0x20,0x94,0x71,0x5b,0x9f,0x9b,0xc3,0xc5,0x32,0xb0,0x6c,0x2b,0x8c,0x54,0x67,0x36,0x94,0xb1,0x47,0x33,0xfd,0x9f,0x7c,0x7f,0x7e,0x08,0x51,0x1f,0x7e,0xbf,0x09,0x57,0xf3,0xaa,0x77,0x94,0xf3,0x20,0x1b,0x95,0xf6,0x04,0xb2
db	0x09,0x9d,0xe2,0xbb,0x4d,0xfe,0x6b,0x99,0x06,0x58,0x40,0x84,0x90,0xfa,0x0e,0x9b,0x58,0x6d,0x02,0xbe,0x53,0x73,0xd1,0xc9,0xc7,0x31,0x2a,0x4a,0x12,0x2c,0xb6,0x1c,0xfb,0x49,0xc6,0x1a,0x93,0x33,0x1f,0x29,0x8b,0x94,0xe9,0x20,0xa7,0xe6,0x20,0xe6,0xbf,0xcd,0x5c,0xb6,0x52,0x42,0xf0,0x9c,0x6c,0x21,0x61,0x10,0xe7,0x0e,0x9f,0x33
db	0x5f,0xc8,0xd0,0x20,0xe0,0x3e,0xc5,0x7a,0x10,0xf1,0xe5,0x19,0x52,0xcd,0xe1,0xa8,0x62,0x43,0x20,0x79,0xc3,0xac,0x93,0x27,0x02,0x8e,0x21,0x06,0xb9,0x66,0xd9,0xc8,0x40,0xe0,0xd1,0xf0,0x64,0x81,0xa6,0xc4,0x87,0x85,0x2b,0x92,0x1c,0xd6,0x48,0x85,0xb1,0xbe,0x78,0xf3,0x89,0xa2,0xf0,0xe5,0x39,0xac,0xbf,0x59,0x5d,0xf8,0x4f,0x74
db	0x44,0x85,0x98,0x03,0x81,0x4b,0x7e,0x6f,0x5c,0xa1,0x11,0xd2,0xfd,0x30,0x7f,0xcd,0xd0,0xe2,0xcc,0xd4,0x80,0x16,0x46,0xa6,0x64,0x8b,0x9e,0xfc,0x2a,0x1a,0x65,0x5c,0x90,0x82,0xf9,0x23,0x48,0x11,0xf6,0xf2,0x50,0x3f,0xed,0x44,0xf2,0x9a,0x5a,0xca,0x1c,0x9a,0xd2,0x71,0x1b,0xd6,0x4c,0x51,0xf6,0x89,0x6f,0x65,0xe4,0x97,0x41,0x47
db	0x1b,0x86,0xbd,0x83,0xa0,0xfe,0xac,0x16,0xe8,0xab,0x28,0x96,0x2f,0xa2,0x12,0x5f,0x7c,0xb3,0x18,0x2b,0x05,0x51,0x49,0xba,0xb4,0x1f,0x1e,0xe6,0x8a,0x82,0xca,0x33,0x7d,0xe6,0x8c,0x95,0xba,0x08,0x60,0x47,0x6d,0x79,0xac,0x0f,0xba,0x46,0xff,0xed,0xe0,0x34,0x03,0xfe,0xa7,0x85,0xe5,0x61,0xe3,0xe4,0x6c,0x5c,0x1b,0x9d,0x8a,0x54
db	0x17,0xaf,0x08,0x4c,0x44,0x7f,0xb7,0xb0,0x6a,0x3a,0xff,0xb7,0xf6,0x10,0xc4,0x8f,0x31,0xd6,0x1a,0x25,0x27,0x35,0xca,0x87,0xa9,0x61,0x0b,0x35,0x96,0x89,0x0f,0x1a,0xbd,0x1e,0xf6,0xee,0xaa,0x95,0x16,0xe4,0x38,0x7b,0xb2,0xbe,0xea,0xc9,0x5a,0xcd,0x3b,0xb8,0x9e,0xd7,0x20,0xcd,0x3f,0x90,0xaa,0x8b,0x2a,0x42,0xed,0xab,0xc1,0x53
db	0x83,0xc7,0xb8,0x3f,0xa1,0xb9,0xf4,0xf4,0xb0,0xe0,0x1f,0xb0,0xeb,0xa9,0x81,0x9f,0x31,0x67,0x1e,0x6c,0x96,0x9f,0x09,0xea,0x04,0xfe,0x37,0x22,0x87,0x60,0xb9,0x91,0x8f,0xa9,0x11,0xa3,0x68,0x5e,0x29,0x21,0x41,0xa3,0x02,0x08,0x82,0xd0,0x2b,0x66,0x6d,0x3c,0x46,0xc7,0x23,0x09,0x86,0x7f,0x53,0x11,0x3e,0x83,0x52,0x0a,0x4a,0xe4
db	0x93,0xc6,0xc1,0x96,0x17,0x94,0x51,0x17,0x69,0xea,0x72,0xb8,0x85,0xde,0x7e,0x13,0x4a,0x08,0x26,0xae,0x31,0x19,0x0f,0x6f,0x48,0xa1,0xf2,0x57,0xa2,0x01,0x8e,0x84,0xee,0x63,0x23,0xc0,0x97,0x84,0xa2,0xf5,0x3f,0xeb,0x30,0x9e,0xdd,0xd2,0x43,0x24,0xa2,0x57,0xb7,0x57,0x86,0x26,0xa3,0xe6,0x6e,0xf2,0xcd,0xfb,0x7b,0x34,0x74,0x53
db	0x07,0x95,0x51,0xb7,0xfd,0xf3,0xd1,0x83,0xbd,0x25,0xd6,0x2c,0x69,0x73,0x02,0x8e,0x76,0x19,0xea,0xb0,0x83,0x60,0x8c,0x53,0x9d,0x77,0x86,0x1e,0x65,0xc7,0x57,0x31,0x29,0xd9,0xa9,0x3a,0xb2,0x0d,0xd8,0xf4,0xf9,0x48,0x49,0xfb,0x3c,0x40,0x3d,0x1b,0xc4,0x8b,0x94,0x0e,0x50,0x7f,0xd5,0x39,0x5e,0x57,0x86,0xd1,0xba,0x0c,0x38,0x10
db	0x01,0x5f,0x44,0xf3,0xe5,0xb0,0xf8,0xae,0x17,0xdf,0xd2,0xb3,0x10,0xc5,0x3b,0xfd,0xd9,0x68,0x90,0x9c,0x6c,0x26,0xdf,0x12,0x50,0xfa,0xbf,0x8b,0xce,0x68,0x80,0x8c,0x04,0x60,0xbf,0x34,0x81,0xbd,0x29,0xa3,0xa2,0xe4,0xe0,0x2d,0x25,0xb2,0xff,0x9f,0xd1,0x20,0x07,0xd5,0x8c,0x19,0xfa,0x3f,0x47,0xec,0xc1,0x8d,0xc9,0x36,0xf8,0x51
db	0x4c,0xaa,0x40,0xe3,0x6a,0x21,0xd5,0xe6,0xa6,0xcf,0x8c,0xd9,0x10,0x47,0x66,0xfd,0x32,0x48,0x36,0x8f,0x14,0xed,0x09,0x80,0x50,0x27,0xaa,0xd5,0x1f,0x69,0xb8,0xe4,0x96,0x27,0x56,0x78,0xd6,0xd5,0x2d,0xf0,0x4f,0x14,0x30,0x17,0x9e,0x5b,0x69,0x8c,0x7c,0x1c,0x97,0x38,0x65,0x77,0x75,0x49,0xac,0x4b,0x06,0xda,0x74,0x11,0x86,0xbc
db	0xad,0x01,0xf2,0x03,0x29,0x5d,0xa7,0x74,0xd3,0x44,0xae,0x1d,0xbf,0xf9,0xc5,0x5b,0x83,0x8c,0xd6,0x84,0x8a,0x8e,0xe9,0xa6,0x08,0xf4,0x88,0x13,0xcb,0x16,0x45,0x13,0x9c,0xc7,0x75,0xa9,0xa7,0x55,0x04,0x91,0xd6,0xe9,0xd4,0xe5,0x65,0xa0,0x3a,0x53,0xa0,0xfc,0x62,0xce,0x91,0x01,0xb4,0x06,0x8b,0x10,0x79,0x6f,0x2c,0xd6,0x0a,0xa2
db	0x31,0x8f,0x75,0x32,0x0e,0xfa,0x0d,0xec,0xfd,0x71,0x7f,0x74,0x97,0x30,0xe9,0xee,0x9f,0x04,0x21,0xb5,0xc9,0xd1,0x52,0x2a,0x0f,0x18,0xbe,0x3e,0xbb,0x98,0xaf,0x59,0x9b,0x85,0x79,0x5e,0x52,0x93,0x1c,0x42,0x67,0x67,0x6b,0xd5,0x41,0xaf,0xba,0x09,0x3a,0xb4,0x0e,0x97,0x22,0xe6,0xbb,0xe1,0x27,0xa1,0xf9,0xf0,0xcd,0xa2,0x3d,0xdb
db	0x81,0x2f,0x65,0x90,0xb7,0xe5,0xe5,0xce,0x1d,0x3b,0xfe,0x34,0x57,0xcd,0x3a,0xbd,0x19,0x59,0x23,0x12,0xf1,0xb6,0xf2,0xf7,0xc1,0xf5,0x1d,0x0b,0x46,0x8f,0x16,0x6a,0x81,0xfe,0xc1,0x97,0x8d,0x69,0x55,0x60,0xdd,0xf0,0x61,0xe9,0x22,0x30,0x72,0x1a,0x24,0x30,0xd7,0xbc,0x1c,0xfa,0x02,0x55,0xfc,0xb9,0x4b,0x0a,0xe4,0x90,0x90,0x3a
db	0xe3,0xce,0xd4,0xa0,0x7d,0x21,0x5a,0xf7,0x79,0x6e,0x03,0x4f,0x4e,0x93,0xad,0xc4,0x8e,0x9d,0x9f,0x8a,0x39,0x59,0x20,0xc1,0x5d,0x6a,0x4d,0x8f,0x69,0x78,0xea,0xba,0xde,0xc0,0x87,0xb2,0xf2,0x20,0xd6,0x7a,0x9c,0xf9,0x09,0x03,0x2a,0x4d,0xb9,0x10,0xfc,0xe5,0x05,0x90,0xed,0x45,0x4f,0x5f,0x7c,0x5d,0xfa,0xe6,0x0d,0x07,0xae,0xcc
db	0x21,0xc8,0x1c,0x7a,0xfb,0x1d,0xb9,0xe3,0x69,0xa1,0xb7,0x5f,0xb5,0x6a,0xb9,0x58,0x9d,0xcd,0x99,0xf8,0x38,0xbb,0xa0,0xfe,0xf8,0x41,0x51,0x72,0xce,0x76,0x89,0x59,0xa2,0xab,0xef,0xea,0xab,0x79,0xbc,0xda,0x73,0xdb,0x18,0xda,0x60,0x1b,0xc4,0xb7,0x4f,0xb3,0x86,0x21,0x2a,0xc3,0xec,0x7f,0x0e,0x89,0x16,0x0e,0xd2,0xbd,0xea,0x0e
db	0xcf,0xc1,0x4b,0x2c,0x97,0x69,0xce,0xd3,0x94,0xad,0x81,0xe9,0x70,0xf4,0xf8,0xe5,0x77,0xe6,0x92,0xe0,0x23,0x38,0xd3,0xc1,0xdd,0x2e,0x58,0x77,0xc5,0xc3,0x29,0x34,0x66,0x48,0xf9,0x75,0x3c,0x8a,0x6a,0xb8,0xbf,0xf8,0xba,0xf0,0xb9,0xa1,0x81,0x0b,0xa1,0xaa,0x17,0x34,0x1a,0xbb,0xa3,0xa2,0xba,0x21,0x45,0xc0,0x1d,0x57,0x11,0x4d
db	0x9b,0xd4,0x64,0x84,0xd7,0x0b,0xd6,0xfb,0x72,0x2c,0xdb,0xc3,0xe6,0x24,0xa9,0xf3,0x30,0x9f,0x21,0x05,0x1e,0xcc,0x48,0x58,0xed,0xfd,0xb2,0x34,0xe3,0xf7,0x7e,0x56,0xee,0xdf,0xa4,0xbb,0xb1,0xcc,0x7f,0x81,0x40,0xe9,0xdf,0x3f,0x82,0xc4,0x0d,0x14,0x9b,0x3b,0x80,0x15,0x24,0x6e,0xa4,0xce,0xfa,0x28,0xa7,0x7f,0x89,0xfb,0xc6,0x83
db	0xe8,0x2a,0x70,0xfb,0x9c,0x75,0xb8,0xfd,0xec,0xbc,0xbb,0xf5,0xef,0x0a,0xa5,0x77,0x0b,0x38,0xa0,0x63,0xa5,0x71,0x12,0xc9,0xaa,0xc3,0xf9,0x72,0x30,0x45,0x4e,0x19,0x44,0x2d,0x09,0xf4,0xf1,0xa8,0xe8,0xde,0x58,0x87,0x70,0xa8,0x91,0x86,0xef,0x5d,0x02,0x90,0x55,0x63,0x99,0xde,0xd7,0xb7,0x5f,0x07,0x01,0xdf,0xb1,0xe5,0x55,0xf5
db	0x87,0x69,0xd2,0x7a,0x71,0xbc,0x0e,0x4b,0x8b,0x98,0xf7,0xf6,0x0a,0x01,0xbb,0x9f,0x1b,0x15,0xb6,0x76,0xe0,0xc0,0x4b,0x5d,0x08,0xba,0xba,0x73,0x3f,0x36,0x5a,0x29,0xd7,0x7c,0xc2,0x87,0x03,0x75,0xff,0x26,0x21,0xae,0xbe,0x66,0x70,0xa2,0x99,0x11,0x35,0x49,0x78,0x7b,0x3a,0xfe,0x94,0xf7,0x37,0xe0,0x69,0x56,0x39,0xf7,0x3f,0x71
db	0x39,0x74,0x75,0x32,0x1f,0xfb,0x3a,0x87,0x07,0xab,0xf1,0xed,0xe3,0xe2,0xbf,0x3f,0xb1,0x73,0x11,0xc9,0x34,0x4b,0xb1,0x1e,0x62,0x4e,0xc1,0x8a,0xae,0xcc,0xc7,0xb3,0xa7,0x70,0x01,0x73,0xad,0xb3,0xc3,0x59,0x70,0x14,0x31,0x94,0x9f,0x6b,0x18,0x11,0x50,0x52,0xc9,0xf0,0xf8,0x12,0x9d,0x7c,0x90,0x64,0x9d,0xd9,0x41,0xa6,0x45,0xe3
db	0xc9,0x25,0x73,0xe7,0x48,0x9d,0xdc,0xe0,0x2c,0x71,0xd3,0x68,0xc5,0xab,0xac,0xe3,0x16,0x95,0xe3,0xa5,0xae,0x2f,0x57,0x60,0x4b,0x11,0x90,0xaa,0xe7,0x48,0xca,0xc7,0xde,0x2e,0x56,0x10,0x8e,0xc3,0x0a,0x7d,0x66,0xf1,0xc3,0xf7,0x2d,0xdd,0xfa,0x5e,0xb2,0xcb,0x99,0x4d,0xaa,0x4e,0x91,0xc1,0x94,0x60,0x27,0x33,0x82,0xa6,0x2a,0xba
db	0x05,0x32,0x33,0x0a,0x30,0x47,0xb0,0xac,0x68,0x7d,0xef,0x25,0x09,0xcf,0x51,0xf4,0x06,0x28,0x14,0xb2,0xb4,0x1f,0xaf,0x37,0xdc,0x70,0x88,0x4d,0xb9,0xfc,0x2d,0x61,0x25,0x13,0x1f,0x32,0x48,0x6d,0xeb,0x46,0x05,0x66,0x44,0xa1,0xec,0xce,0xe9,0x51,0xa9,0xba,0xf8,0xde,0x95,0x1b,0x20,0xe1,0x21,0x75,0x4b,0x25,0x7f,0x3c,0x16,0xf7
db	0xe2,0xbe,0xeb,0xca,0x2b,0x77,0x92,0x16,0x32,0xe2,0x74,0x21,0x52,0x3f,0x08,0xba,0x41,0xb0,0xd3,0xd2,0xf7,0xf3,0x29,0xb6,0x10,0xfa,0xa5,0x29,0x35,0x29,0x21,0x0d,0xec,0xba,0x5a,0xf3,0x63,0x0f,0x9d,0xbc,0x42,0x02,0x46,0xe9,0x07,0x4a,0x9a,0xe8,0xd3,0x78,0x92,0xa2,0xe5,0x03,0xec,0xd4,0xe2,0xc8,0x8f,0x92,0x4a,0xae,0xbc,0xd7
db	0xdf,0x4b,0x07,0x22,0x47,0xbd,0xb4,0xb5,0xa0,0x7e,0xfb,0x21,0x40,0x62,0xb1,0x6c,0x07,0x00,0x64,0xf6,0xb2,0x75,0x5c,0x29,0x84,0xff,0x38,0x0c,0xc8,0x08,0x38,0x92,0xf9,0xad,0xd7,0xcc,0xc3,0x1c,0x03,0x80,0x49,0x39,0x1c,0xdb,0xae,0x60,0x87,0x8a,0x5c,0xe9,0x17,0xbd,0x2b,0x0f,0xa5,0xa1,0xf9,0x0d,0x4b,0x8c,0x4d,0x39,0xda,0x15
db	0x8c,0xc4,0x69,0xaf,0x2b,0xb0,0xa1,0xfd,0xd9,0x65,0x3c,0x87,0x4b,0xf2,0x5a,0xd7,0xd8,0xb9,0xef,0x78,0x67,0x30,0x4c,0x6c,0x92,0xc5,0x1e,0x15,0xf8,0xd9,0x74,0x1b,0x54,0x0c,0x10,0x1b,0xb5,0x11,0x13,0xd6,0xb4,0xc0,0x53,0x03,0x2c,0x4b,0xee,0xac,0xf9,0x87,0x17,0x51,0x35,0xb8,0x1a,0xdc,0x16,0x61,0x5b,0xe9,0x5a,0x43,0x94,0x42
db	0x8f,0x68,0xbd,0xb6,0x52,0x00,0x63,0xa3,0x52,0x6e,0x5d,0x8e,0xe9,0x4f,0xf5,0x69,0xd8,0x4f,0xf5,0x5c,0x89,0x7e,0x1c,0xb9,0xdc,0x7b,0x92,0x8a,0x2b,0xfc,0xb8,0xad,0xbb,0xff,0x61,0x2e,0xc0,0xdc,0xfb,0x2f,0x78,0x2a,0x50,0x32,0x9b,0x4c,0xfd,0x9e,0xab,0x80,0x5c,0x7d,0xc8,0x6b,0xb3,0x2d,0x0a,0xfe,0x43,0xa2,0x10,0x10,0x79,0xbc
db	0x8c,0xa0,0x86,0x09,0x8c,0x8b,0x28,0xf3,0x8a,0xc9,0xeb,0xcb,0xb5,0x0e,0x56,0x19,0xae,0xe0,0xa1,0x22,0x72,0xc5,0xad,0x01,0x12,0x69,0xb6,0x52,0xb8,0xdd,0x36,0x25,0x21,0xae,0x73,0x06,0xc1,0xe0,0x23,0x20,0xe1,0x8e,0xe4,0x99,0xcd,0x86,0xca,0xf5,0x93,0x0e,0x6b,0xb8,0xba,0x18,0x4a,0x36,0xed,0xd0,0x37,0xc8,0xc7,0x8a,0xb2,0x63
db	0x2e,0xa4,0x22,0x76,0x6f,0xf7,0xdd,0x81,0xd6,0x6f,0xcd,0xb9,0x65,0xf0,0x95,0x77,0xae,0xca,0x54,0x62,0xce,0x5d,0x47,0x9e,0x10,0x89,0xb9,0xfa,0x72,0x0a,0xef,0x24,0x17,0x45,0xb0,0xb0,0xc7,0x51,0x85,0xa1,0xb1,0x6a,0xd2,0xea,0x48,0xe2,0x6a,0x03,0x2a,0xdf,0xa8,0x0e,0x62,0xa2,0x1e,0xe2,0xa7,0x20,0x57,0xbd,0x73,0xeb,0xef,0x86
db	0xc9,0xd4,0xfa,0x96,0xfe,0xfa,0xb3,0xc6,0xbf,0x7a,0x16,0xa2,0x43,0x73,0x56,0x71,0x78,0x32,0x3b,0xc1,0xd8,0x26,0xbf,0xde,0x39,0x5d,0xbd,0x3b,0xff,0xd7,0x4f,0xa0,0x67,0xa6,0x09,0x9a,0x81,0xfd,0xec,0x34,0x73,0xcd,0x90,0x15,0x8b,0x3e,0x2d,0x6f,0x7d,0xcc,0xf5,0x20,0x15,0x07,0xa8,0x2f,0xa5,0x5b,0x2b,0x4f,0xb8,0x2f,0x14,0x6c
db	0x52,0x78,0xbd,0x92,0x98,0xda,0x69,0x19,0x58,0x4c,0x76,0xe4,0x20,0xb2,0x48,0xa4,0x9f,0x2f,0x4c,0x9b,0x45,0x7f,0x7d,0x1c,0x46,0xe9,0x1e,0x43,0x26,0x49,0x39,0xb6,0x42,0x3a,0x4c,0x59,0x95,0x6b,0x28,0xd5,0xbe,0xa7,0x2e,0xd0,0x0c,0x00,0xa0,0x67,0x06,0x4e,0xee,0xae,0x7f,0xc2,0xb5,0x12,0x46,0x3f,0xb4,0x35,0x16,0x2a,0xda,0xbf
db	0x41,0x34,0xbe,0x30,0x2a,0x0f,0x7b,0x60,0xa6,0x8b,0xcd,0xae,0x7a,0x8c,0xd6,0x97,0xab,0x06,0x1e,0x14,0x87,0x45,0xa3,0x3c,0x9c,0xc4,0xa0,0x1d,0xee,0xf0,0xca,0xb8,0xa6,0x8d,0x37,0x92,0xad,0xbc,0xe6,0x1f,0x65,0x75,0xd3,0xbc,0x72,0x66,0xe2,0xff,0xbc,0x19,0x93,0xae,0xee,0xd0,0x63,0x6d,0x97,0x6f,0x57,0xf3,0x77,0xcd,0xe3,0x57
db	0x3f,0x00,0xc8,0xe1,0x63,0x83,0x15,0x84,0xc6,0x08,0xdb,0x03,0xc9,0x27,0x47,0x4c,0x17,0x12,0x40,0x6e,0xac,0x74,0x6f,0x3c,0x22,0x57,0x36,0x29,0xbb,0x6a,0xc7,0x5a,0xfe,0x60,0x1c,0x0f,0x32,0x95,0x1b,0xf2,0x3c,0xed,0x04,0x87,0x4c,0x48,0xc7,0x63,0x79,0x24,0xb3,0x12,0xbf,0x55,0x3b,0x32,0xbf,0x52,0x4e,0x1e,0xc1,0x1f,0xf2,0xfd
db	0xe6,0xb8,0x56,0x38,0x0e,0xd2,0x75,0x3d,0x41,0x99,0x0c,0x7a,0x12,0x3f,0xa7,0x3a,0x79,0xa0,0xd7,0x6f,0x47,0x97,0x7e,0x9e,0xf6,0xfe,0x29,0xc0,0x16,0x34,0x38,0x80,0x2f,0xde,0x65,0x79,0xc9,0xfd,0xa0,0x84,0xc3,0x39,0xbc,0x0b,0xbe,0x18,0xba,0x0d,0xe3,0x35,0x11,0xba,0x9f,0xde,0x5d,0x0c,0xae,0x8e,0x0c,0x0f,0x66,0x9c,0xe6,0xfc
db	0x3d,0xdb,0x46,0xf1,0x84,0x57,0x62,0xb0,0x00,0xd4,0x8c,0xaa,0x93,0xeb,0xf7,0xa7,0x8e,0x82,0xba,0x89,0x67,0xbb,0x38,0xb0,0xb6,0x13,0x0c,0x96,0x22,0x9c,0x6a,0x86,0xea,0x83,0xad,0x5f,0x7b,0x3a,0x28,0xd8,0x53,0x90,0x2d,0xab,0xc9,0xbe,0x99,0xfb,0x68,0x42,0x27,0xf6,0xe3,0x5a,0xaf,0xf3,0xd6,0xee,0xb6,0xa2,0xe0,0x32,0x3c,0x1d
db	0xd4,0x3c,0x2b,0x58,0xc2,0x4f,0x3d,0x20,0x39,0xdb,0x80,0x89,0x20,0x20,0x7b,0xe6,0x1d,0xd0,0xa2,0x1a,0xd4,0x88,0xc9,0xe0,0xb9,0xf6,0xb2,0xa1,0xcd,0xf2,0x67,0x60,0x44,0xd8,0xce,0x6a,0xe2,0x52,0xc3,0xf3,0x61,0xa3,0x14,0x58,0xd6,0xe5,0x43,0x4a,0x8d,0xcc,0x4f,0xf8,0x17,0xdd,0xd2,0x5d,0xd5,0x5a,0x86,0x8e,0xc4,0x74,0xdc,0x1b
db	0xad,0xca,0x63,0x75,0xf0,0x43,0x41,0x16,0x02,0x49,0x6a,0x3a,0xe3,0xb9,0xa9,0xdc,0xfb,0x99,0xbc,0x60,0x0d,0xdb,0xa0,0xcf,0x27,0xaa,0xd5,0xc5,0x42,0x0b,0x02,0x00,0x43,0xaf,0xb5,0x4f,0xe1,0x88,0xa1,0x9d,0xca,0xfb,0x9f,0x1f,0x08,0x9c,0x66,0x23,0xca,0x4b,0x88,0xb4,0x40,0xdc,0xd3,0xd3,0x1a,0x64,0xe3,0x9b,0x43,0xea,0x20,0x90
db	0x30,0x2e,0xc4,0x75,0xc5,0x52,0xc5,0x7c,0x0e,0x35,0x56,0xf5,0x1f,0x50,0x2b,0xf6,0x28,0x93,0x6f,0xde,0x10,0xc6,0x49,0x2b,0x77,0xb1,0x6d,0xce,0xfd,0x37,0xd4,0x8d,0x11,0xed,0x88,0x1e,0xca,0x68,0x0c,0x4e,0x38,0x7f,0x0f,0xab,0x6f,0x8d,0x1c,0x7d,0xd4,0x7d,0xd8,0xa9,0x5c,0x24,0x5a,0x7d,0xf4,0x5b,0xb6,0xb7,0x28,0xc7,0x93,0xd6
db	0xa9,0xe5,0xac,0x62,0x16,0x9c,0x4e,0x5c,0x24,0xa0,0x2a,0x76,0xce,0x7d,0x5c,0x4b,0xbe,0xbc,0x83,0x5c,0x9a,0xc8,0x06,0x7b,0x1e,0xac,0x98,0x67,0x17,0x32,0x94,0xda,0xd1,0x8b,0x58,0xad,0x8e,0x26,0x03,0x81,0x7c,0x48,0xd1,0x83,0x03,0xba,0x6c,0x51,0xe9,0x25,0x82,0xd2,0xb9,0x7f,0xd8,0x33,0x3f,0x77,0x29,0x45,0x41,0xa9,0x17,0x3d
db	0x62,0xc6,0xd2,0xfb,0xd1,0x24,0xc7,0xee,0x10,0xc0,0x64,0xc3,0x46,0xc6,0x2b,0xe8,0x9c,0xc8,0x99,0x23,0x77,0xa9,0xb5,0x12,0xc4,0x53,0xde,0xbc,0x20,0xb2,0xc4,0x12,0xdb,0xc2,0x0b,0x63,0x70,0x6a,0x41,0x31,0x65,0x48,0xa0,0xfc,0xbc,0xd6,0x3f,0x55,0x18,0x17,0x65,0x35,0x58,0xe3,0x33,0xac,0xaf,0xca,0xb2,0x51,0xc1,0xcc,0x60,0x38
db	0x94,0x8f,0x13,0xb8,0xcc,0x8c,0xc4,0x12,0xea,0xd5,0x39,0xd3,0x46,0x55,0x17,0x27,0x7a,0x07,0x01,0x02,0x74,0xa6,0xe7,0xc8,0xa7,0xd0,0x76,0xc8,0x5e,0x57,0x50,0xc5,0x19,0xf1,0x95,0xa3,0x52,0x10,0xa3,0x1e,0xcd,0xb1,0x05,0x64,0xe5,0x69,0xd9,0x5e,0xfc,0x71,0xef,0xe1,0xf6,0xb3,0xa7,0xf7,0xf9,0x71,0xfd,0xbb,0x5b,0x2b,0x7a,0xd2
db	0x72,0x7c,0xc7,0x73,0x89,0xf7,0xe2,0x0b,0xcd,0x05,0x4f,0x0c,0x10,0xed,0xcc,0xda,0xb6,0x81,0x19,0xe6,0x2b,0x06,0x66,0xef,0xc5,0xfd,0xd5,0xc6,0x66,0x20,0x86,0x2a,0x4f,0x05,0x49,0xf1,0x54,0x4a,0x6e,0x1d,0xcd,0xad,0x18,0xeb,0x6c,0x58,0xd6,0x75,0x3e,0x62,0x48,0xab,0xea,0x1f,0x7f,0x05,0x45,0x6e,0x75,0x2a,0x5e,0x97,0x5b,0xde
db	0x5a,0x99,0x42,0xc1,0x62,0xab,0xc7,0x01,0x4d,0xac,0xd6,0xdc,0xc9,0x71,0x24,0xd1,0x33,0xe2,0x4b,0x1f,0x09,0x04,0x1f,0x0d,0x42,0x45,0xcf,0x7c,0xa0,0xee,0x48,0xfd,0x8b,0x1f,0xaa,0x50,0x48,0x6d,0x8e,0x34,0x76,0x09,0x23,0x8a,0x40,0x0d,0x5d,0xc1,0x2a,0xba,0x5f,0x9c,0x86,0xfb,0x37,0xdf,0x24,0xff,0x27,0x88,0xbf,0xf6,0xa4,0xc3
db	0xf0,0xd3,0x02,0xa8,0x7c,0x6d,0xc4,0xc5,0x14,0xc3,0x64,0x28,0xa8,0x05,0x33,0xc2,0xda,0x12,0xfc,0xbe,0x0d,0x8e,0xf4,0xf5,0x48,0x5a,0x8e,0x8a,0xd2,0x50,0x7c,0xc0,0xbc,0xde,0xdb,0x9a,0xf6,0xa0,0x92,0x8d,0x19,0xbc,0x5a,0xdc,0xbf,0xfb,0x13,0x8f,0x41,0x09,0xba,0xd9,0x0b,0x91,0x7a,0xdb,0x92,0x10,0xac,0xf2,0xb5,0x76,0xb5,0x7d
db	0x80,0x04,0xd6,0xec,0x98,0x09,0x5f,0x63,0x0d,0x58,0x00,0x8a,0x07,0x76,0xfa,0xe6,0x6e,0xdf,0xbf,0x73,0xe5,0xc9,0xe5,0x12,0x44,0x58,0xf9,0x2e,0xb1,0xe6,0x2c,0xf5,0x0d,0x94,0xa9,0x51,0x0d,0x01,0x03,0xab,0x79,0xf9,0xee,0x7e,0x10,0x4b,0xcb,0x20,0xbb,0x01,0x19,0xd6,0x12,0xd1,0xac,0x96,0xe9,0x0e,0xde,0xbf,0x7e,0x80,0xf6,0x58
db	0xc9,0xec,0xaf,0xf7,0x2d,0x98,0xbc,0x2b,0xb1,0xf1,0x34,0x94,0x39,0x8e,0xbc,0x13,0x13,0x41,0x8f,0xf3,0x4e,0x4e,0x6b,0x2a,0xaa,0xea,0x70,0x5c,0xf8,0x42,0xf7,0xbc,0xfd,0xbd,0x6f,0x62,0x1b,0xcb,0xb9,0x39,0xdc,0x6a,0x47,0x81,0xaf,0xff,0x5b,0x7e,0x80,0xb9,0xbf,0xfa,0x15,0x7e,0xd1,0xc3,0xb2,0x80,0x99,0xbd,0xb9,0x30,0x8d,0xb5
db	0x43,0x6b,0x7a,0x31,0xaf,0x45,0xf7,0xdd,0x21,0x8f,0x54,0xb1,0xf6,0x2d,0x7d,0x96,0x63,0x4a,0x93,0x98,0x37,0x7f,0x48,0x02,0x4b,0x0f,0x71,0xe4,0x70,0xce,0x66,0x6a,0x36,0xde,0x58,0x84,0x69,0xd6,0xbd,0x1a,0x9a,0x8b,0xc5,0xda,0x97,0xc5,0xe1,0x4e,0xec,0x9b,0x7a,0x65,0xe0,0xa5,0xdd,0x39,0x3c,0x9f,0xfd,0x45,0x17,0x4c,0x2f,0xb4
db	0xb1,0xb1,0x42,0xe8,0x88,0x75,0x9f,0xb4,0xc1,0xdf,0x44,0xf9,0x4f,0x9a,0xf7,0x3d,0x35,0xc5,0x32,0xbe,0x43,0xd0,0x0d,0x71,0x4e,0x21,0xbf,0x31,0x99,0x73,0x5a,0x84,0x45,0x2e,0x00,0x8b,0x42,0x2b,0x14,0x86,0x51,0xcb,0xa0,0x98,0xa9,0x68,0x8d,0xdb,0x58,0x3d,0x73,0x9d,0xf9,0x2d,0x86,0x76,0x62,0xcb,0x93,0x29,0x48,0x92,0x38,0xfb
db	0xeb,0x1d,0xda,0xc3,0x10,0x1f,0x32,0x68,0xee,0xcb,0xb7,0x8a,0xcb,0xcb,0xe0,0x37,0x31,0xe8,0xad,0x7b,0x4a,0x29,0x2c,0x10,0x9e,0xdf,0x86,0xeb,0x13,0x0c,0xab,0xa4,0x30,0x36,0xf0,0xe0,0xac,0x14,0x41,0xa4,0xf4,0xf8,0x44,0x95,0xe8,0x8f,0x28,0xc2,0x35,0x0a,0x44,0x61,0xc7,0x60,0xc5,0x3b,0xc4,0x1d,0x67,0xfd,0xac,0x0b,0x2e,0x49
db	0x62,0xea,0x17,0x3c,0xf5,0x4b,0xbe,0xba,0xba,0x42,0x02,0x0d,0x13,0xf1,0x15,0xff,0x2e,0x47,0x46,0xd1,0x27,0x64,0xb7,0x35,0x28,0x31,0xb5,0xde,0x1e,0xf9,0x26,0x6c,0x04,0x3c,0x0e,0x06,0x9d,0x4d,0xc7,0x1c,0x97,0x67,0x2c,0x6d,0x36,0x0d,0x4c,0x61,0x08,0xe9,0xbd,0x04,0x1d,0x8d,0xfb,0x0c,0x03,0x3d,0xb4,0x40,0xd5,0x1b,0x69,0x3b
db	0x68,0xcf,0x46,0x27,0xcf,0xb3,0xda,0x1e,0xdc,0x85,0x6f,0x4f,0x6b,0x09,0x9d,0xe9,0x6c,0x73,0x40,0x27,0xc9,0x8b,0x12,0x97,0xea,0x34,0xd7,0x51,0x32,0x90,0x4e,0xd7,0x91,0x41,0x3a,0xee,0xbc,0x97,0xb0,0x4a,0x39,0xdb,0xe3,0xe5,0x12,0x73,0xbf,0x5d,0x68,0xe0,0xc6,0x7c,0x6f,0x0d,0x14,0x1c,0xaa,0xde,0x29,0xb7,0xc7,0xa5,0x90,0x62
db	0xe9,0xc5,0x75,0x16,0xe6,0xc0,0x9d,0xc5,0xb8,0xd6,0xfa,0xb0,0x72,0xb7,0x27,0xa6,0xa8,0x3f,0xbf,0x18,0x8b,0xaa,0x94,0xb3,0x47,0x50,0x2f,0x1c,0x49,0xab,0x46,0x38,0x7f,0x3e,0xf3,0xf1,0xb8,0xb3,0x44,0xaa,0x1f,0x76,0xb4,0x67,0xff,0xcf,0x7c,0x4b,0xa9,0xe1,0x62,0x93,0x4d,0x3e,0x96,0xdb,0x56,0xf6,0x26,0x5d,0x95,0x4c,0xfa,0x5f
db	0x06,0x2b,0x5c,0x33,0x2d,0xf8,0xfa,0x68,0x8a,0xed,0x28,0x2a,0x6e,0x95,0x86,0x59,0x71,0xef,0x86,0x47,0x60,0xec,0x35,0x79,0xa9,0x98,0x2d,0x6e,0x20,0x26,0x3a,0x21,0xec,0x59,0x15,0x65,0xcd,0xb9,0x91,0x19,0x6e,0x74,0x89,0x3b,0x10,0x00,0xab,0x8a,0x45,0x23,0x20,0x94,0x03,0x02,0x77,0xb7,0xcf,0x9c,0x71,0x18,0x0c,0x5b,0x40,0x62
db	0x3b,0x8f,0xc9,0xf6,0x4c,0x8f,0x60,0x66,0x05,0x87,0x05,0x90,0xd4,0x08,0x76,0xd7,0xa3,0xb6,0x37,0xa8,0x83,0x05,0xb2,0x48,0xe9,0x24,0xc4,0xfb,0x79,0xa1,0xce,0xac,0x29,0x13,0x4e,0x72,0xdf,0xad,0x9e,0x5b,0xcd,0x9c,0x39,0x1d,0x3e,0x57,0x9d,0xf2,0x96,0x13,0xa4,0x79,0x4c,0x76,0x40,0x03,0xb3,0x18,0xcf,0xd7,0x45,0x2a,0x2d,0x07
db	0xe5,0x2e,0xb7,0x74,0xda,0x94,0xea,0x32,0x74,0xb0,0xca,0xf4,0xd1,0x09,0x97,0x3c,0x69,0x17,0xf6,0x5b,0x13,0x7b,0xb8,0xb1,0xd9,0x0e,0x12,0x44,0x29,0xea,0x26,0xd8,0xaa,0x9d,0x26,0x87,0x0c,0x89,0x4e,0xec,0x29,0x48,0x43,0x66,0x21,0x0b,0xab,0xce,0x40,0x57,0x4c,0xa7,0xdd,0x56,0xde,0xac,0x5c,0x62,0xea,0xc4,0x54,0x4a,0xe0,0x8d
db	0x54,0xc8,0x65,0x44,0xcc,0x6f,0x2a,0xcd,0x0e,0xb3,0xad,0xa3,0x30,0xd1,0xb7,0x19,0x70,0x51,0xd3,0x9a,0xcf,0xe5,0x42,0x6c,0xa1,0xc1,0x0f,0xe2,0xda,0x86,0xb4,0x51,0x50,0x62,0xdc,0x51,0x3f,0xd2,0xff,0xde,0x7f,0x38,0x5a,0xff,0x2d,0x21,0x1d,0x59,0xb9,0xdd,0xde,0x83,0x13,0xb0,0x25,0xf5,0xbb,0x11,0x47,0x4a,0xaf,0x81,0x15,0xa0
db	0x39,0x5b,0x30,0x17,0x2b,0xbf,0x5a,0x03,0x60,0xb6,0xbb,0x86,0x9f,0x50,0x45,0x15,0x0b,0xba,0x42,0xf4,0x3d,0x05,0x62,0xcd,0x9b,0x8c,0xcf,0x93,0x5c,0x33,0x6c,0xea,0x4b,0xd0,0x1d,0x91,0x3e,0xbf,0xa4,0x9d,0x7c,0x2c,0x87,0x9c,0x42,0x9f,0x03,0x98,0x03,0x1b,0x98,0x66,0x4f,0x8f,0x29,0x12,0xc5,0xb5,0xec,0x81,0xf8,0xb2,0x5e,0x44
db	0x4f,0xb0,0x31,0xe4,0x2a,0x73,0x83,0xac,0x5a,0x3f,0xfa,0xcf,0x8b,0x7c,0xa3,0xf1,0x01,0x14,0xa1,0xca,0x60,0x8d,0x6a,0x6c,0x04,0x31,0xcc,0xba,0x12,0xe0,0x4e,0xaf,0x01,0x8d,0xf5,0x60,0x23,0x79,0x8a,0x80,0xcc,0x32,0x31,0x69,0x83,0xb6,0x83,0xaa,0xd9,0x3b,0x86,0x4a,0xd8,0x10,0x28,0x09,0x82,0x36,0xee,0x6a,0xc0,0x80,0x3f,0xfd
db	0xb1,0xd2,0xde,0x34,0xf9,0x4c,0x87,0x5b,0xdd,0xd0,0xb6,0x2d,0x99,0x69,0xd3,0x2c,0xb7,0x0b,0xfc,0x16,0x88,0x7b,0x80,0x21,0xbc,0x30,0x7b,0x56,0xe5,0x7b,0x41,0x43,0x4d,0xaf,0x40,0x5e,0x74,0x14,0x17,0x66,0x32,0xd6,0x81,0x53,0x94,0x35,0xf0,0x0f,0x4f,0x99,0x54,0x9a,0x38,0xc0,0x2a,0xa9,0xd3,0x53,0xdd,0x9a,0xc5,0x29,0x18,0x62
db	0xf6,0x93,0xa3,0x02,0xf0,0x13,0xcb,0xcb,0xcc,0x64,0x0b,0x00,0xf4,0x43,0x03,0x26,0xe6,0x2f,0x39,0xa1,0x83,0xea,0x94,0x2f,0xde,0x61,0xbd,0xe1,0xbe,0x08,0xf8,0xd4,0x01,0x6e,0x61,0x98,0x01,0x39,0x4b,0x93,0x39,0x38,0x34,0x58,0x24,0xc1,0xf5,0x03,0x05,0x15,0x9c,0xf0,0x30,0x20,0x24,0xd4,0x7e,0x73,0xb2,0x60,0x06,0x3b,0xd3,0xb7
db	0x2c,0x47,0x17,0xc4,0x79,0x4e,0x45,0x0b,0x89,0xf0,0xfc,0x42,0xa0,0x0d,0x80,0xd2,0x44,0x36,0x70,0xaa,0x9e,0x72,0x85,0xa8,0xc8,0x1d,0x35,0x28,0xc3,0x5a,0x72,0x4c,0x06,0x6d,0xf4,0xae,0x54,0x86,0x9a,0x32,0x3c,0xa5,0x06,0x63,0xc1,0x37,0xbb,0xaf,0xa6,0xae,0xce,0x94,0xea,0x9c,0x4a,0x9e,0x56,0xb1,0xc3,0x84,0x84,0xef,0x3d,0xe9
db	0x24,0xf4,0xbf,0xc3,0xf6,0x45,0x74,0x4e,0xbb,0x86,0xd3,0x7f,0xab,0x19,0xe3,0x63,0x67,0x81,0xb6,0x18,0xc8,0x78,0x8e,0xf8,0x83,0x5f,0xfb,0x2e,0x49,0x97,0x2b,0x34,0xbb,0x76,0x2e,0x93,0xec,0xe9,0x7f,0x4d,0x7e,0x52,0x0c,0x92,0xbc,0x6d,0x3a,0x34,0x9b,0x5e,0x61,0x6f,0xea,0x45,0xe7,0x5c,0x34,0x6b,0xcb,0xc0,0x31,0x61,0x64,0x9d
db	0xad,0x7f,0x98,0xca,0xfe,0x3d,0xad,0xf7,0x21,0xf6,0x4c,0x2a,0x21,0x07,0x80,0x25,0xa2,0xea,0x26,0x85,0xc3,0xb1,0x74,0x04,0x7f,0xd1,0x1c,0x1b,0xa5,0x7e,0x96,0x45,0xfe,0x6f,0xa6,0x34,0xdf,0x94,0x1f,0x7e,0xfb,0xcf,0xfd,0x29,0xeb,0x3a,0xb0,0xfc,0xb6,0xd5,0x80,0x8b,0x37,0x71,0xfb,0x70,0x19,0x30,0xc4,0x6f,0xa0,0x5b,0xae,0x5b
db	0x75,0x51,0x98,0x89,0x9e,0xf0,0xf5,0x79,0xaf,0x1c,0x07,0xb6,0x5e,0xcf,0x34,0x70,0x0f,0x0b,0xbc,0x0a,0xa6,0x40,0xc7,0xf8,0xe4,0xef,0xe6,0xb7,0x94,0x6e,0x98,0x75,0x22,0x73,0x5c,0xca,0xcc,0xfb,0x09,0x2f,0x9c,0xfe,0x49,0x0f,0xd3,0x65,0xfe,0xd4,0xf0,0x9b,0xeb,0x8c,0xd7,0x8c,0xff,0x4b,0x18,0x3e,0xf3,0x9d,0x3f,0xf5,0x83,0xd6
db	0x1d,0x3d,0x23,0x79,0x0f,0xae,0x17,0x62,0x33,0x07,0xc3,0xac,0x98,0x07,0x72,0x9b,0xd9,0x26,0x5c,0x1a,0x9d,0xf1,0x35,0x92,0xf9,0x38,0x17,0xf8,0xee,0x26,0xf9,0x64,0xfc,0x5e,0x8b,0x80,0xce,0xdb,0x64,0xf7,0xde,0x20,0x19,0x5c,0x26,0xf6,0x23,0xd6,0x99,0x8e,0x75,0x77,0x3d,0x17,0x0f,0xea,0x31,0x5a,0x65,0x32,0x1b,0x78,0x78,0xe4
db	0xfe,0x76,0xf8,0xa7,0x81,0x34,0xf1,0x2a,0x13,0x22,0xe4,0x8a,0xe1,0x42,0x5a,0x3f,0x44,0x22,0xeb,0x7e,0xcd,0x20,0xcd,0xf7,0x44,0x1a,0x87,0xb9,0x7a,0x0e,0xf8,0xcb,0xb5,0x0a,0x1f,0x6a,0xe6,0x0b,0x70,0x59,0x38,0xa3,0x6b,0x64,0x7b,0x61,0xfe,0xbd,0xa4,0xb7,0x89,0x7a,0x28,0x70,0xfe,0x9d,0x64,0x2c,0xe9,0xc4,0xc9,0x2f,0xc8,0x3e
db	0xfa,0x70,0xce,0x21,0x9b,0xa8,0x10,0x6a,0x16,0xdd,0x28,0xce,0x4e,0xd4,0x6c,0x8c,0x47,0x83,0x13,0x8b,0xec,0x1c,0x76,0xdc,0x4d,0x81,0x25,0x08,0xd8,0xf9,0xde,0x66,0x1d,0xe2,0xf3,0xe7,0xdc,0x3e,0x3c,0x6b,0x98,0x25,0x55,0x88,0xe8,0xda,0x7f,0x16,0xe5,0x7d,0xad,0x8a,0x36,0x00,0xf0,0x68,0xc5,0xe4,0xfc,0xe9,0xe3,0x54,0xeb,0x4c
db	0xd1,0xff,0x07,0x1a,0x5c,0x5e,0xd4,0xb1,0xff,0x7d,0xfc,0x5b,0x34,0x42,0x95,0x89,0x01,0x24,0x8e,0x30,0xec,0xfe,0x67,0xf8,0xe2,0xaa,0xd5,0x6a,0x9f,0xe3,0xc3,0xa5,0x53,0x7f,0xd3,0xf4,0x98,0xa5,0x47,0x11,0xad,0xac,0xea,0xba,0x20,0x34,0x03,0x65,0x8c,0xec,0xb6,0xa3,0x2b,0xf6,0x93,0xe1,0xc8,0xad,0x34,0x30,0x8f,0x0e,0x3b,0xf6
db	0x63,0xc6,0x58,0xc3,0xe8,0xa3,0x85,0xf8,0x24,0x8e,0x21,0xb9,0x36,0x7c,0xe0,0x11,0x64,0x31,0x6a,0x6a,0xa2,0xad,0xd3,0x94,0xbb,0x13,0x5b,0xb4,0xe9,0xee,0x09,0xdc,0xfe,0xb2,0xad,0xa8,0x43,0x02,0xba,0x85,0x1f,0x56,0xcb,0xb5,0x95,0x32,0xcc,0x7e,0xe0,0x00,0xde,0xfa,0x3f,0x91,0x71,0xde,0x21,0x19,0xff,0xc9,0x97,0x43,0x95,0xd8
db	0x0d,0xc2,0x8a,0xde,0xcc,0x34,0x48,0xf4,0x35,0x41,0xb8,0x56,0x52,0xce,0x06,0xb3,0xcf,0xd4,0xae,0x7a,0xcb,0xe9,0xed,0x37,0xd6,0x76,0xa0,0x77,0x04,0xfb,0xb7,0x41,0x25,0x38,0xe1,0xd1,0xb5,0xde,0x21,0xe0,0x64,0xd8,0x83,0x13,0x7b,0x4b,0xb8,0xc9,0x12,0x02,0x51,0x56,0x52,0xe9,0x1c,0x49,0x48,0x83,0xd0,0x99,0x73,0x60,0x4a,0x4c
db	0x7d,0x8d,0x43,0xf9,0x06,0xa4,0xbb,0x0e,0xb6,0xdd,0x5f,0xc7,0x5e,0x35,0xcb,0xa0,0xc1,0x66,0x4a,0xe3,0x4a,0xa9,0xec,0xa4,0x5a,0xd7,0xd6,0xea,0xa5,0x20,0xa6,0xc3,0x1b,0xc0,0xa8,0xd1,0xf1,0x08,0x05,0xab,0x40,0x14,0x35,0xf2,0xdd,0x0f,0xc5,0xda,0xb3,0xa6,0xb1,0x07,0x36,0x17,0x5d,0xe9,0x96,0x23,0x96,0x46,0xd4,0xa7,0x71,0x64
db	0x13,0x72,0x4e,0x83,0xe0,0x65,0x40,0x41,0xaf,0xb6,0x5b,0x00,0xa2,0xab,0x09,0x7f,0xa5,0xd5,0xc2,0xd9,0xc0,0x68,0x2a,0x44,0xdc,0x43,0x37,0x81,0xb8,0x88,0x4c,0x85,0x1b,0xb1,0x83,0xb2,0x56,0xa3,0x91,0x0f,0xa6,0x70,0x3f,0xbd,0xe9,0xda,0x40,0x9b,0xf5,0x9e,0x53,0xed,0x5f,0x84,0x70,0xd2,0x4c,0x1c,0xb6,0x87,0xd6,0xbb,0x3b,0xec
db	0xe5,0x35,0x1b,0x2c,0x9b,0xf1,0xe5,0xf8,0x0e,0x07,0x98,0xcc,0x58,0x38,0x57,0x74,0xdb,0x0e,0x08,0xd9,0x56,0xe8,0x08,0x63,0x3d,0x94,0x4a,0xdc,0x59,0xfc,0x3d,0xc1,0xa4,0x36,0xc3,0xe8,0xbe,0x4b,0xd7,0x47,0x69,0x33,0xb8,0x72,0x30,0x59,0x28,0x4e,0xf1,0xc1,0x25,0xa3,0xa4,0xe3,0x12,0xcf,0x31,0xf6,0xf8,0xae,0x31,0x06,0x76,0x92
db	0x64,0x87,0x8e,0xb0,0x9f,0x1d,0xf4,0x56,0x73,0xc5,0x5d,0xbb,0x80,0x0d,0x19,0x3f,0x56,0x8c,0xe4,0xd6,0x8a,0x9a,0x62,0x26,0x4e,0x8a,0x21,0x7d,0x72,0x34,0x87,0xb6,0x7e,0x49,0xdc,0xfd,0x27,0x95,0xba,0x25,0xdd,0xf4,0x58,0x2b,0x11,0x3f,0xd1,0xd7,0x13,0x1d,0xb0,0xec,0xe2,0x55,0x5e,0x72,0xea,0x36,0xc9,0xd8,0x61,0xc0,0xee,0xc4
db	0x9f,0x35,0x7e,0x73,0xd3,0xf6,0xd7,0x6a,0xce,0xd6,0xd2,0x80,0xe6,0x10,0x4b,0x65,0x18,0x6f,0xab,0xd3,0x41,0xbb,0x39,0x36,0x95,0x84,0x3c,0x99,0x9a,0xfd,0xf0,0xa3,0x46,0xdf,0x48,0x7c,0xd5,0x57,0x9d,0x10,0x59,0xca,0x70,0xc4,0xb5,0xbe,0x47,0x9e,0xca,0x2b,0x49,0x54,0xbb,0x34,0x8e,0x39,0xf4,0xf8,0x8c,0xa5,0xa1,0xab,0xf6,0x51
db	0xd8,0x22,0x9a,0xd5,0xc2,0x12,0xf8,0x26,0xc6,0x19,0x2a,0xa6,0x6e,0xab,0xd3,0xac,0xd1,0x21,0x97,0x67,0x3e,0x39,0x90,0x5c,0x37,0x65,0x7b,0x06,0x54,0x1a,0xb8,0x2a,0x56,0x02,0xa3,0x92,0xee,0xf3,0x38,0x53,0x25,0x4d,0x5d,0x0a,0x37,0x9e,0xbb,0xf4,0xb2,0x13,0x77,0xbb,0x93,0xa9,0x85,0xf2,0x15,0xfd,0x71,0x17,0x00,0x89,0xe7,0x7b
db	0xa9,0xdc,0x10,0xd9,0xc7,0x44,0xa5,0x7b,0x3f,0x2f,0x1e,0x6d,0xa7,0xfe,0x0c,0x0e,0x83,0x3e,0x38,0x27,0xa7,0x4e,0x85,0x3c,0x84,0xfe,0x95,0x48,0x85,0x09,0x75,0x62,0x1d,0xa4,0x64,0x54,0xed,0x89,0xd5,0x28,0x62,0x52,0x18,0xef,0xf0,0x57,0x05,0x30,0xf0,0xce,0x87,0x05,0x0d,0x81,0xe8,0x2a,0x3c,0x8c,0x22,0xe1,0x4b,0x32,0x42,0x9d
db	0x02,0xc5,0xe4,0x6a,0xa4,0x4d,0x9b,0xc4,0x82,0x47,0xdc,0x61,0xbd,0x82,0x01,0xcd,0x5e,0x64,0x9f,0x4c,0xe3,0x31,0xe9,0x48,0x53,0x85,0x07,0xc7,0x47,0x49,0x35,0xd8,0x6a,0xab,0x4f,0x73,0x3f,0xd3,0xde,0x87,0x29,0xac,0xbc,0x35,0x0a,0xb4,0x74,0xc2,0xa7,0x0b,0xb1,0x93,0x92,0x29,0x3b,0x3e,0xa8,0xde,0x12,0x49,0x75,0xda,0x16,0x27
db	0x52,0x2f,0x93,0x23,0xd6,0xf7,0x10,0xfe,0x1e,0x93,0x97,0x06,0x9d,0xef,0x4f,0xe4,0x3d,0x5d,0xde,0x30,0x70,0x3d,0x78,0x3a,0x30,0x00,0x9b,0x77,0x12,0x90,0x62,0xda,0x32,0x9b,0x6a,0x47,0xd7,0x0f,0xee,0x75,0x18,0xdd,0x4d,0x8a,0xe2,0x35,0x5b,0x60,0xb8,0xf9,0xa4,0x6c,0x93,0x3e,0x47,0x23,0xed,0x7a,0xe2,0x58,0x42,0xd6,0x3f,0x90
db	0xc0,0x12,0x38,0x8b,0x70,0xe0,0xf8,0x1a,0xb5,0x8d,0xe1,0x39,0xdf,0x93,0x25,0x72,0x2e,0xa9,0x3f,0x58,0x12,0x40,0xc4,0x92,0x46,0x08,0xf0,0x64,0xdd,0x34,0x42,0xfe,0x74,0x35,0x0c,0xda,0xef,0x06,0x0b,0x33,0x59,0xd9,0xee,0x4c,0xf9,0x02,0x3a,0x93,0x40,0xa3,0x99,0x0e,0x64,0x11,0x2f,0x52,0x9d,0x28,0x4d,0xe8,0x45,0xd0,0x22,0xd7
db	0x8f,0xd6,0x28,0x8c,0x0e,0x18,0x87,0x24,0xf9,0x88,0xd2,0xc0,0xe8,0xd4,0x9d,0xa2,0x5a,0x79,0x83,0x37,0x18,0x84,0x12,0xca,0xc7,0x10,0xd5,0x5a,0xa8,0xe5,0xa8,0xe7,0x79,0xb6,0x2c,0xb3,0x90,0x6c,0xc5,0xa4,0x99,0x1b,0x85,0x29,0x78,0x0b,0x09,0x77,0x05,0xf4,0x23,0x79,0x5c,0x91,0xf3,0xe0,0xe4,0x6f,0x82,0x33,0x4e,0xa2,0x2e,0xa2
db	0x65,0x79,0xad,0x98,0x36,0x34,0x72,0x97,0xd7,0x39,0x89,0x5e,0x82,0x9f,0x4c,0xe2,0xea,0x51,0x85,0x62,0x0c,0x39,0xf6,0xdc,0xc6,0x80,0x48,0xcf,0x98,0x93,0x64,0x7d,0xf9,0x63,0xf4,0xf5,0x18,0x2a,0xb6,0x04,0xb7,0x44,0xc4,0x60,0xc0,0xcf,0x3d,0x88,0xa8,0xb6,0x81,0xa3,0x99,0x2a,0xf0,0x1a,0x8d,0x76,0x20,0x1d,0xcc,0x10,0x50,0x58
db	0x09,0xf9,0xda,0x65,0x60,0xc3,0xb1,0xc1,0xc0,0x4d,0x62,0x52,0x22,0x45,0x32,0xbc,0x11,0x93,0x15,0xb6,0x25,0x8f,0x65,0xa0,0x4c,0x88,0xc9,0x83,0xe1,0x5c,0xbb,0xfb,0x1a,0xab,0xdb,0x35,0x40,0x66,0xc0,0x2f,0xdc,0xf5,0x92,0x08,0x4c,0xc7,0xb8,0x49,0x05,0xe0,0xe1,0x61,0x2b,0xde,0xc7,0x6a,0x04,0x05,0x4d,0x9f,0xe9,0x59,0x22,0x56
db	0x63,0x77,0x9d,0xe3,0x1e,0x36,0xdf,0x87,0x4a,0xeb,0xba,0x42,0x3d,0x1b,0xa5,0xd0,0xc5,0x44,0x07,0xbe,0x37,0x37,0x70,0x10,0x2d,0x02,0x9b,0xf6,0x52,0xf3,0x54,0x6d,0x50,0xdb,0xdb,0x57,0x01,0x0b,0x9b,0xd5,0x99,0x99,0x69,0x9b,0x10,0x76,0x48,0xea,0x28,0x27,0x06,0x30,0x63,0x3b,0xdf,0x06,0x30,0x37,0x28,0x75,0xcf,0x9c,0xe7,0x52
db	0x43,0xe2,0xd5,0x7b,0xfa,0x88,0x98,0x9c,0x3e,0x27,0x30,0x21,0xcc,0x11,0x71,0x14,0x24,0x04,0x1a,0x8c,0xe9,0xfe,0x2f,0x9d,0xec,0xb1,0x10,0x33,0x05,0x31,0x01,0x1b,0xde,0x6b,0x30,0x20,0x6d,0xf4,0x7c,0xbf,0x41,0x04,0x5f,0xb9,0x9c,0x24,0x63,0x74,0x98,0x3e,0x60,0xc7,0xf1,0xb1,0xc6,0x94,0xf3,0x6f,0x95,0x24,0xdf,0x97,0xd5,0xc7
db	0x50,0x19,0xaf,0xa5,0xae,0x51,0xde,0x6d,0x44,0x0c,0x90,0x72,0x11,0x82,0x04,0xf9,0xda,0x17,0xd8,0xf3,0x03,0xf2,0x03,0x3f,0x65,0x7f,0xd7,0x66,0x84,0x9a,0x02,0x90,0x2b,0x65,0x00,0xd9,0x9c,0xfb,0xaa,0xe2,0xde,0x5f,0x1e,0x19,0x1e,0x6d,0x20,0x1e,0x01,0xf1,0xca,0x7b,0x90,0x06,0x96,0x1d,0x7a,0x34,0x0c,0x66,0x57,0xd7,0x61,0x1f
db	0x74,0x03,0xcb,0xae,0xea,0xaf,0x65,0x8e,0x32,0xbe,0xb8,0xe6,0xd8,0x6d,0xf7,0x51,0x6d,0xec,0x7e,0xc6,0x9d,0x20,0x01,0xbf,0xd7,0xbc,0xcb,0x34,0x7c,0xe5,0x1f,0x92,0x72,0x2f,0x6f,0xa3,0x1f,0xe8,0x4d,0x7e,0xa5,0x85,0x3b,0xed,0xc7,0x25,0x53,0xe3,0x77,0x90,0x1f,0xda,0xb7,0x48,0x7d,0xbe,0x20,0x48,0x9f,0xb4,0x05,0x5d,0x41,0xc5
db	0x48,0xd0,0xc9,0x83,0xbe,0xf8,0xd8,0x6b,0x0d,0x26,0x66,0x2e,0xef,0x6b,0x13,0x58,0x6b,0x5f,0x0e,0x8b,0x4e,0x57,0xb2,0x6b,0x3d,0x4d,0xcd,0xcb,0x9a,0x9b,0xda,0x4d,0x7f,0xea,0x17,0x06,0x7f,0xcd,0xaf,0x18,0xda,0x3d,0xf0,0x30,0x2e,0xbb,0xc2,0x1d,0xcf,0xde,0xf7,0xee,0xda,0xd6,0x3d,0x75,0xcf,0x19,0xcf,0xfc,0xdf,0x7a,0xb6,0x1f
db	0x89,0xf5,0x0c,0xe9,0xd5,0xf1,0xd0,0x40,0xbd,0xae,0xb5,0x16,0xf6,0x05,0x1e,0xba,0xcd,0x18,0x80,0x4a,0xb3,0x87,0x93,0x6b,0x19,0xfc,0x47,0xa8,0x45,0x4b,0x75,0xe8,0x06,0xc0,0xbd,0x86,0xf7,0xcf,0x2c,0x39,0xc6,0x0b,0x3f,0x32,0xcd,0x1c,0x02,0xec,0x4b,0xd5,0x90,0x84,0xaf,0xc9,0x5c,0x9e,0x64,0x82,0x13,0x81,0x05,0x03,0xe4,0xed
db	0x48,0x23,0xc3,0x53,0x2c,0x5a,0x22,0x0a,0x27,0x7e,0x55,0x79,0xdc,0x46,0xf5,0x4b,0x04,0xcc,0x43,0x87,0x6c,0xb5,0xa4,0x2d,0x78,0x70,0x02,0x43,0x0e,0x76,0x62,0x99,0x86,0x40,0x2a,0xe4,0x62,0xe6,0xee,0x4e,0x03,0x64,0x83,0x9c,0x38,0x6d,0x62,0xa6,0x85,0xb8,0xce,0xd7,0xf8,0xcb,0x78,0x00,0x7a,0x48,0x72,0x75,0x4e,0x9c,0x6f,0x0c
db	0x61,0xc7,0x93,0x4e,0x6d,0x65,0xa3,0x1b,0x17,0x84,0xc6,0xd2,0x29,0xc3,0x4d,0xe3,0x14,0x21,0x5f,0x9e,0xa9,0x28,0x11,0xf3,0xb2,0xe8,0xe7,0x60,0x9e,0x24,0xab,0x88,0x9c,0x9c,0x5e,0x17,0xe4,0xe1,0xa7,0x74,0xb4,0x82,0xd5,0xaa,0x92,0x08,0xa7,0xa2,0x04,0x6f,0x77,0x14,0x54,0x44,0x5d,0x13,0x10,0xa2,0x40,0x1d,0xf0,0x44,0x16,0x17
db	0xda,0x8c,0x80,0x83,0x2b,0x19,0xb8,0xab,0xf2,0xb8,0xb1,0x92,0xb5,0xc5,0x05,0x3e,0xd2,0x1a,0xfc,0xfd,0x21,0xa6,0xb2,0xbd,0x89,0xee,0x9c,0x3c,0x90,0xd9,0xf1,0xd2,0xe8,0xc3,0x21,0xb9,0x0e,0x0c,0x98,0xbc,0x5e,0xa1,0x0d,0x89,0xfe,0x0f,0x3c,0x45,0xea,0xe1,0x6e,0x06,0x59,0xff,0x79,0xf4,0x7e,0xf4,0x82,0xc0,0x6b,0xd9,0x53,0x30
db	0x98,0xed,0x8d,0x6f,0x3d,0x0e,0xfb,0x42,0x66,0xab,0x41,0xa8,0x4a,0xef,0x73,0xa4,0x54,0x99,0x4f,0xb6,0x65,0x44,0xf9,0xd9,0x3c,0x6b,0x59,0x36,0xb0,0xe3,0x7c,0x4a,0x85,0x80,0x6c,0x77,0x6f,0x34,0x4e,0x9e,0x54,0xfd,0x0c,0x25,0x72,0xc3,0x5a,0xb6,0x3b,0xad,0x2b,0xd5,0x29,0x55,0x31,0xab,0x62,0xe4,0x15,0xed,0xef,0x16,0xef,0x43
db	0xd5,0xdd,0x3d,0x64,0x8c,0x13,0xbc,0xcd,0x4d,0xfb,0x4f,0x86,0x3b,0x73,0x1e,0xc4,0xe8,0x54,0xb4,0xcc,0x49,0xba,0x4f,0x81,0xcd,0xe8,0x30,0x92,0x4b,0x57,0xd1,0x7c,0x0c,0x65,0x7d,0xe1,0x59,0xc6,0x8c,0x7d,0xad,0xd5,0xcf,0x6c,0xc4,0x9d,0xc5,0x3f,0x23,0x1f,0xb0,0x6d,0x1c,0x07,0xbf,0x38,0xc9,0x16,0xdc,0x5b,0x51,0xa1,0xdb,0x8f
db	0xf8,0x25,0xc6,0x4d,0xc0,0x4d,0xa1,0x02,0xd9,0xd3,0xb5,0x63,0xda,0xe1,0x91,0x60,0x71,0x39,0x46,0x1a,0x13,0xe0,0xf2,0xca,0xcc,0xd3,0xbb,0x6b,0xd0,0x64,0xaa,0x0e,0xc0,0x89,0xa3,0xc6,0x14,0x56,0xe4,0x44,0x97,0xa9,0xcc,0x17,0x68,0xe6,0xfc,0xe5,0xfd,0xf0,0xa6,0x69,0xcd,0xac,0x20,0xc7,0xeb,0x53,0x1b,0x4f,0xdd,0xd3,0xb0,0xed
db	0x30,0x4e,0x36,0x73,0x63,0xef,0x51,0x3e,0x9a,0x3e,0x41,0x2b,0x9c,0xda,0x67,0x96,0x46,0x33,0xe3,0x3f,0x87,0x01,0xd8,0xc5,0x26,0x80,0xe4,0x7e,0xf4,0x78,0x8c,0x2b,0x81,0x2a,0x01,0x7c,0xe3,0xfc,0x8d,0x6b,0xdc,0x84,0xb9,0xff,0x43,0x37,0x57,0xce,0x3f,0x5e,0x63,0xd3,0xbe,0xb6,0x4a,0x31,0xbf,0xb8,0x74,0x64,0x9c,0xf3,0xc5,0x8a
db	0xae,0xe8,0x5f,0x68,0xcf,0xce,0xff,0x3f,0xc5,0xb5,0xfd,0x13,0x08,0x11,0x9d,0x1a,0x0f,0x06,0x08,0x4d,0x7c,0xf9,0xd4,0x20,0xdf,0x82,0xf9,0x86,0xfc,0xf3,0x67,0xa0,0x14,0x99,0xe5,0x47,0xf0,0x02,0x7b,0x16,0xca,0xcf,0xb9,0x0f,0x68,0x08,0x5d,0x1d,0x65,0xee,0x23,0x56,0xeb,0x11,0x5b,0xca,0xf1,0xa7,0xad,0x50,0xb2,0xd1,0x37,0x65
db	0xe9,0x7e,0xf6,0xe9,0x64,0x42,0x49,0x80,0x40,0x17,0xe3,0x43,0x00,0xda,0xe1,0x7a,0x1c,0xb3,0xde,0xd9,0xf7,0x33,0xeb,0xb3,0xb8,0xf5,0x40,0x1b,0xcd,0x71,0x97,0x30,0xf9,0x9c,0x4d,0xac,0x7e,0x8e,0xd9,0x36,0x92,0x39,0xb5,0x56,0x0f,0x4f,0xbf,0x58,0xb8,0xba,0xc3,0xbd,0x79,0xb0,0xd7,0x6c,0x45,0x49,0xe2,0xde,0x94,0x04,0x9d,0x3e
db	0x91,0x0a,0xb2,0x9b,0x90,0x57,0x2e,0x69,0xa4,0x4f,0x61,0xbf,0xdb,0xfb,0xe3,0xe9,0x81,0x26,0xe0,0x48,0x90,0x8c,0x32,0x95,0x8d,0x38,0xec,0x8e,0xa7,0x5e,0xc3,0x36,0xc6,0xd1,0xbc,0x9a,0xb3,0xba,0xdb,0x2c,0xe4,0xa0,0x50,0x74,0xef,0x98,0x48,0x14,0xc9,0x38,0x4d,0xa9,0x48,0x13,0xd4,0x08,0x60,0xfd,0xcf,0x5e,0xf2,0xcd,0xc7,0xeb
db	0xaf,0x88,0x32,0x30,0x6f,0x19,0x01,0xec,0x87,0xae,0x6d,0x63,0xa3,0xa7,0x7b,0xcd,0x53,0xa7,0xf2,0xf2,0x9f,0x43,0xcb,0x0a,0x3f,0x8c,0xd2,0x55,0x8d,0xa7,0x95,0xcf,0x5b,0xae,0x64,0x23,0xda,0xb4,0xbd,0x32,0x34,0x95,0x8a,0x03,0xe7,0x6e,0xef,0x3f,0xb4,0xcf,0xc6,0x8a,0x2f,0xc6,0x59,0x99,0xdf,0xad,0x3c,0x15,0xed,0x83,0x0b,0x59
db	0x8b,0xcd,0x0d,0xa6,0xcf,0x3a,0xc3,0xdb,0xc3,0x01,0xa9,0x32,0x38,0x45,0x5c,0xc8,0x56,0x81,0xef,0x21,0x7f,0x52,0xc4,0xb5,0x48,0x97,0x6a,0x60,0x75,0x3a,0x1a,0xd3,0xb0,0x60,0x9a,0x83,0x61,0xad,0x3b,0x4b,0x65,0xaa,0x9e,0x77,0x47,0x6f,0x3b,0x48,0xb0,0xc6,0x36,0x9a,0x59,0x5e,0x26,0xc4,0xb9,0xed,0x04,0xf3,0xc7,0x09,0x33,0xda
db	0x81,0x63,0xa6,0x5d,0xe1,0x54,0x6b,0x04,0x17,0x2b,0xb9,0x2f,0xbd,0x55,0xdb,0xa1,0x69,0x00,0xcd,0xba,0xfa,0x36,0xaa,0x47,0x5a,0x7c,0xf4,0x1f,0x53,0x94,0x95,0x2f,0xf8,0x2a,0x4b,0xa8,0xcc,0x73,0xab,0xfd,0x25,0xb2,0x4e,0xd6,0x62,0x90,0x8c,0x8f,0x02,0xe4,0xdc,0x22,0x79,0x04,0x34,0x9b,0x54,0x5c,0x54,0xca,0x9b,0x8a,0xf8,0x05
db	0xd1,0xb0,0x9e,0x8f,0xa3,0x0b,0x53,0xa8,0x6f,0x1b,0x2e,0xf2,0x71,0x78,0x28,0xce,0xa9,0xdb,0x4c,0x5b,0x83,0xfe,0xaa,0xff,0x99,0x2f,0x03,0x14,0xb2,0xe0,0x5f,0xaa,0x65,0x15,0x1f,0xd2,0x31,0x95,0x70,0x3c,0x8b,0x55,0x8e,0x87,0xed,0xbb,0x0c,0x91,0x87,0xaa,0xbe,0x49,0xdb,0x18,0x7b,0x1d,0x26,0xa7,0xdf,0x00,0xff,0x73,0x70,0x2e
db	0x10,0xaf,0x46,0xea,0x7f,0xca,0xfa,0x09,0x13,0x02,0xac,0x3f,0xa0,0x02,0xa6,0x67,0xb7,0xec,0x18,0x73,0x91,0x25,0xa0,0x28,0xe3,0xd8,0xfa,0x11,0x6d,0x34,0x79,0x1d,0xe4,0x8f,0x7c,0x73,0x66,0x77,0x3e,0x43,0x23,0xb0,0xee,0x84,0xb5,0x75,0xc9,0x23,0x87,0x6a,0x4f,0x59,0x3d,0xb5,0xf1,0xd6,0x06,0xf8,0xa6,0x5d,0x0c,0x24,0xed,0x94
db	0xd7,0xa8,0x31,0x37,0x10,0x60,0xb6,0x03,0x33,0x27,0x38,0xdd,0xd3,0x74,0x02,0xa3,0xa6,0x01,0x94,0xa9,0x56,0x11,0x23,0x0e,0xdb,0xfd,0x25,0x92,0xa8,0xfb,0x79,0xc8,0x8e,0x0e,0x10,0x1f,0xca,0x95,0xf6,0xad,0x28,0xe7,0xaa,0x2b,0xf1,0x40,0xf6,0xef,0x7b,0x40,0x28,0x57,0xbb,0x4c,0xac,0x0b,0x8b,0xb3,0xe3,0xec,0x53,0xf2,0x15,0x61
db	0x2e,0x91,0xdf,0x91,0xfb,0x55,0xb6,0x7f,0x6c,0xfc,0xb7,0x4b,0x91,0xdc,0xf7,0xe5,0x91,0xd8,0x70,0x92,0x94,0xea,0x3f,0x62,0x98,0x14,0xc3,0x43,0x34,0x02,0x87,0xc7,0xca,0x60,0x4a,0xfb,0x50,0xe4,0xa9,0x92,0x10,0x04,0x7c,0x55,0xd3,0x9a,0x89,0xba,0x8e,0x6f,0x02,0xd6,0xc7,0x6f,0x91,0xb5,0x87,0xb9,0x0e,0xbe,0xe4,0x9f,0x01,0x0b
db	0x20,0x60,0xc8,0x16,0xe6,0x23,0x1d,0x5f,0x4d,0x82,0xf4,0x42,0x25,0xe6,0x05,0xe3,0x5b,0xbb,0xd1,0xb0,0xad,0x0b,0x05,0x71,0x3a,0x7b,0xee,0x0e,0xe1,0xe4,0x08,0x9f,0xda,0xdf,0x59,0x57,0x4f,0x05,0x5a,0x51,0x9a,0x60,0xfd,0x85,0x21,0xd1,0x0a,0x3b,0x0a,0x15,0x61,0x28,0x98,0x0a,0x8f,0x1e,0x33,0x15,0xb3,0x5f,0xf3,0xbb,0x89,0x22
db	0x0c,0xaf,0x91,0xce,0x44,0xb1,0x54,0xd0,0x80,0x86,0x43,0xa1,0xb9,0x07,0xde,0xab,0x1f,0x9b,0xae,0xef,0x07,0xf2,0x40,0x33,0x31,0x4d,0xf9,0x45,0x97,0xf6,0xcc,0xe5,0x3c,0x49,0xcd,0x83,0x6e,0x38,0x81,0xab,0x40,0x18,0xda,0xf6,0xfe,0xe7,0x96,0xd1,0x17,0x98,0xae,0xec,0xe9,0x93,0x37,0xbc,0x0b,0xa8,0x12,0xe7,0x65,0xca,0x27,0x37
db	0x6a,0x74,0x81,0xf1,0xe0,0x6c,0x0d,0xba,0x86,0x48,0x94,0xd0,0x72,0xd5,0x4d,0x71,0xcf,0xa8,0x5e,0xd1,0x97,0xd1,0xed,0xf0,0xd3,0xe4,0xe3,0x41,0xc9,0x8f,0xfc,0x89,0xe8,0xbf,0x96,0x8b,0x86,0xb0,0x97,0x79,0x95,0xdf,0x69,0x56,0x6d,0x61,0x0a,0x37,0xcb,0x36,0xe1,0x95,0x88,0xf5,0xf0,0xe2,0x5c,0xb2,0x44,0x73,0xda,0x83,0xa7,0xdc
db	0x8b,0x35,0x3e,0xc1,0xd5,0x88,0x17,0x3b,0xeb,0xcf,0x36,0x9c,0xef,0x40,0xb2,0x72,0xde,0x4f,0x16,0x6c,0x8c,0x9d,0x15,0xce,0x7d,0x0d,0xc3,0x2f,0xea,0xab,0x50,0xdf,0x02,0xe0,0x24,0xcc,0xf4,0xa7,0x25,0xba,0x85,0x0d,0x62,0x9a,0x39,0xc7,0x5a,0xd1,0x9a,0xd1,0xa7,0x45,0x5f,0xc2,0x44,0xf5,0xa9,0x8d,0xd8,0xbc,0xd3,0xc8,0x75,0x0d
db	0x06,0xc6,0x4b,0x24,0xc6,0xe5,0x72,0xf7,0xd5,0x87,0xca,0x3c,0xc0,0x1c,0x18,0xa9,0x40,0xc6,0x7b,0xe5,0x4c,0xe6,0xb7,0x01,0x57,0xc1,0xcf,0x63,0x83,0x58,0x63,0x47,0xcf,0xa4,0xd3,0xf6,0x1d,0x2c,0xbf,0x17,0xe6,0x0a,0x7b,0x2d,0xa9,0x34,0x23,0xfc,0x1f,0x06,0x31,0x47,0x7b,0x31,0x34,0x8c,0x3c,0x15,0x9b,0xac,0xfd,0x38,0xe6,0xa3
db	0x9e,0xa7,0xdf,0xa6,0x37,0x61,0xfd,0x85,0xb8,0x2e,0x67,0x73,0x7f,0x60,0x12,0x8b,0x62,0xb0,0x38,0xd0,0xaa,0xc4,0xad,0x3b,0xa9,0x04,0x66,0xdd,0xbb,0x9c,0xb1,0x95,0xe1,0x9c,0x0a,0x72,0x80,0x12,0xaa,0xa8,0x0c,0x3f,0x90,0x20,0x33,0xb4,0x76,0xdd,0x26,0xfe,0x1e,0x8f,0x6a,0x2d,0xea,0x4a,0xdc,0x28,0x47,0x66,0x36,0x5b,0x50,0x60
db	0x7e,0x3e,0x93,0xf3,0xe9,0x37,0x31,0x3b,0x43,0x46,0x85,0xb3,0xa9,0xb2,0x14,0x95,0x96,0x49,0xf9,0x2a,0xe7,0x9e,0x3a,0x3e,0xd8,0x12,0xf7,0xbc,0x43,0x8c,0x35,0x31,0x44,0x08,0x7f,0x25,0x39,0x86,0x98,0x6a,0xe8,0xe3,0x2e,0x73,0x2d,0x3b,0xac,0x2d,0x75,0x4c,0xc8,0xca,0x21,0x2d,0x96,0x9b,0x4f,0x56,0xff,0x2d,0xc2,0xe2,0x98,0x3d
db	0xe2,0x3f,0xee,0x10,0xb7,0xc3,0x3d,0xa8,0x50,0x88,0x7f,0xd5,0x4e,0xbd,0xc7,0x9d,0xdc,0x01,0x49,0x27,0xf2,0xae,0xea,0x93,0x72,0xdf,0x00,0xcd,0xe6,0xa1,0xdd,0xd1,0x18,0xeb,0xa7,0xe1,0x4a,0x7b,0x38,0x72,0x73,0x29,0x46,0xa3,0xb3,0x25,0x23,0x6d,0x26,0xab,0x86,0xdc,0x67,0x52,0xe5,0x4a,0x5e,0x8f,0x16,0x67,0x8a,0x28,0x13,0xba
db	0x44,0x42,0xb5,0x21,0x9f,0x30,0x66,0x7f,0xc9,0x87,0x40,0xcb,0x75,0x58,0x2e,0xcd,0x09,0xb9,0x8a,0x84,0xa3,0xbd,0x63,0x53,0x75,0x2f,0x77,0x8b,0x7e,0x19,0x31,0x33,0x3b,0x9a,0xfb,0x86,0x39,0xa6,0xd9,0xeb,0x9b,0x43,0xc6,0xd9,0xc2,0x10,0xab,0x42,0xe5,0xc6,0x4a,0xe6,0x3e,0xde,0x9d,0xac,0x8e,0x95,0xf0,0xdb,0x48,0x95,0xc2,0x87
db	0x6b,0x7f,0xde,0x09,0xdb,0xed,0x49,0x19,0x73,0x2d,0xa4,0x5c,0xdf,0xfa,0x2e,0x15,0xd0,0xb6,0x46,0x32,0xc9,0x7f,0x7e,0x01,0xd3,0x25,0x45,0x0e,0x5b,0x0d,0xf0,0x67,0xe3,0xd9,0xdf,0x4f,0x3b,0x6f,0xb3,0x15,0xc5,0x6b,0x91,0x75,0xa2,0xaf,0x42,0x3a,0x14,0x50,0xd9,0x4f,0x19,0x65,0x12,0x83,0x5d,0x8f,0x8a,0x01,0x0b,0x89,0xcc,0x7f
db	0x1a,0xde,0x5b,0x44,0x34,0x98,0x0f,0x8e,0x5a,0x5e,0x03,0x41,0x3e,0x66,0x9b,0x16,0xf5,0x91,0x7c,0xb0,0xc1,0xbf,0xa2,0x10,0x0b,0x60,0x3a,0x63,0x0c,0xcf,0xd8,0x49,0xdb,0x42,0x88,0x1f,0x36,0x8e,0x15,0xdb,0x5d,0x3f,0xe7,0xf1,0x9a,0x73,0x2b,0x74,0x0c,0xd5,0x09,0xab,0x01,0x2e,0x52,0x6f,0x03,0xf6,0xc9,0x0b,0xeb,0xa5,0xce,0x2e
db	0x1c,0x02,0x35,0xca,0xce,0xfe,0x4b,0xad,0x67,0x21,0xf8,0x44,0xea,0x70,0xf2,0x3d,0xfc,0x43,0x77,0x05,0x26,0xbe,0xaf,0x99,0xab,0x41,0xd4,0xcc,0x53,0x33,0x33,0xcd,0xb4,0x2d,0x76,0xfb,0xae,0x0c,0xac,0xc1,0xd0,0x42,0xfb,0x45,0x4a,0x6e,0x55,0xd2,0x93,0xef,0xb9,0x06,0xbc,0x38,0xce,0x94,0xc2,0x01,0xdf,0x27,0xc8,0x47,0xff,0x74
db	0xfb,0x84,0xc5,0xa2,0x78,0x1f,0x4f,0x73,0x12,0xec,0x2d,0x82,0x5b,0xeb,0x3c,0xb6,0x1c,0x5a,0x29,0x9c,0xba,0x9e,0xa4,0x85,0x94,0x84,0x68,0x01,0xd7,0xb1,0x27,0x84,0x4a,0x7d,0x62,0x9c,0x32,0x12,0x89,0xd8,0x66,0xb5,0xe9,0x07,0xf4,0x5f,0x6b,0x0e,0x90,0x87,0xe5,0xc1,0x8b,0xaf,0x8f,0xf7,0xca,0x54,0xe0,0xc6,0x5f,0xa5,0xec,0xd1
db	0xdc,0xdc,0x17,0x9e,0xca,0x4b,0x72,0x72,0x03,0x96,0x62,0xaa,0xc1,0xfe,0x23,0x7e,0xd2,0x06,0x61,0xb6,0xc9,0x0d,0x7e,0xbf,0x72,0x1c,0x66,0x46,0x0b,0x31,0x96,0x81,0x11,0x3d,0xac,0x5e,0xd0,0x35,0xaf,0xac,0x4c,0x74,0xce,0xf9,0x9c,0x64,0x3d,0xe5,0x9d,0xfe,0xc7,0x05,0x09,0xe1,0x70,0xc5,0x37,0xd5,0x4e,0xd8,0x7d,0xdb,0xfa,0x1c
db	0x28,0xfc,0x10,0x2a,0xe8,0x62,0x18,0x09,0x97,0xe0,0x98,0x2e,0x9f,0x1d,0x18,0xff,0x22,0xe9,0x5d,0x37,0xd2,0x74,0xf1,0x81,0x08,0x8a,0x55,0xc0,0x40,0x0f,0x70,0xbe,0x82,0x23,0x78,0x35,0xc8,0xf8,0x59,0x6e,0x0d,0x2e,0xd5,0xe7,0xf5,0x2e,0xbd,0xcd,0x1a,0xcf,0x76,0x43,0x1f,0xca,0x15,0x6c,0x4a,0xb7,0xc7,0xb9,0xaf,0x68,0xd7,0x31
db	0x1e,0x0c,0x9c,0x78,0x74,0x66,0x80,0xc6,0x74,0xbe,0x86,0x59,0x0c,0x12,0xdc,0xf3,0x1b,0xaf,0x63,0x74,0xce,0x1e,0xac,0xf0,0x65,0xa0,0xab,0x7f,0x96,0x08,0x32,0xb2,0xca,0x9c,0xfb,0x9d,0x66,0x63,0x76,0xf9,0x69,0x08,0x6e,0xd3,0x46,0xde,0xdf,0x54,0x06,0x0d,0x25,0x81,0xd9,0x5a,0x45,0xeb,0xe5,0xc0,0xf6,0x86,0x0f,0xe9,0x27,0x7c
db	0xdc,0x52,0x28,0xb5,0xd0,0x7d,0x07,0xc1,0xb6,0x9b,0xdc,0xea,0xd3,0x2a,0xba,0xb0,0xd5,0xa3,0xd8,0x25,0x07,0x9c,0x6c,0xd6,0x16,0xa5,0x93,0x43,0x52,0xa7,0x5c,0x2b,0xe2,0xfa,0x8e,0x6e,0xaa,0x04,0x84,0x63,0x80,0x0f,0x90,0x10,0x41,0x1c,0xf6,0x67,0xea,0x39,0xb0,0x16,0xfc,0x6f,0x85,0x28,0x8c,0x8e,0xfb,0x79,0x39,0xdf,0xf6,0x6e
db	0x57,0xa1,0xaa,0xf1,0x0b,0x99,0xde,0xad,0x69,0xe2,0xf4,0x74,0x8e,0x8c,0x2d,0x20,0xdb,0xf3,0x2d,0xc2,0x75,0xe7,0xd6,0xc8,0x9d,0x46,0x3b,0x8b,0x8b,0x18,0xd8,0x41,0xfd,0xc2,0x7d,0xec,0x66,0x78,0xe7,0xbe,0xee,0x2b,0x07,0xd8,0x7e,0x13,0x61,0x7e,0xab,0x7d,0x2b,0x3f,0x83,0x96,0xf5,0xab,0x0b,0x20,0xd2,0x5b,0xb0,0xeb,0xf7,0x1b
db	0xac,0x1a,0x16,0x46,0x21,0x90,0xdb,0x67,0x66,0x42,0xe2,0x54,0x34,0xae,0x34,0xae,0x21,0x33,0x8c,0x48,0x19,0xdb,0x1f,0xa8,0x25,0x76,0xe0,0x03,0x1c,0x35,0x8d,0xd3,0xab,0x6b,0x93,0xf3,0xad,0x7d,0x3c,0x76,0x1d,0xaa,0x43,0x80,0x0f,0x5f,0x20,0xd9,0xf0,0xff,0x8b,0xf4,0xdb,0xbc,0xf2,0xff,0xf2,0x8a,0xfc,0xf5,0x0e,0x4e,0xd9,0xb0
db	0xd6,0xb3,0x86,0x5b,0x3e,0x10,0x87,0x50,0xf1,0xd2,0x8f,0x8d,0xa4,0x39,0x85,0xf5,0x90,0xd6,0x53,0x69,0x40,0x42,0xc1,0xc3,0x7c,0xc1,0x3e,0x97,0xb4,0x08,0x49,0x93,0x4e,0x4c,0x67,0xd9,0x2e,0x05,0x70,0x04,0x98,0x0a,0xed,0xd0,0xff,0x0c,0x13,0xe4,0xde,0x75,0x81,0x24,0xb1,0x27,0x79,0xeb,0x80,0x68,0x52,0x50,0x66,0x77,0x4f,0xf6
db	0x64,0x2f,0x85,0x9e,0xc1,0xbf,0x9f,0x0e,0x31,0x9a,0x36,0x24,0xcd,0xa8,0xe8,0xce,0x41,0x86,0xd1,0x02,0x96,0xdc,0x1a,0xa0,0x48,0xca,0x61,0xd5,0x87,0xdb,0x0a,0xeb,0x69,0x95,0xca,0xf8,0xe5,0xa0,0x5b,0x91,0x8f,0xb9,0x59,0x5f,0x68,0x60,0x58,0xc5,0xe0,0xc7,0x02,0x68,0xa5,0x67,0x1e,0xfc,0xa9,0x27,0x9f,0x83,0x4c,0x05,0x60,0xee
db	0xcb,0x79,0x31,0x73,0x36,0xf4,0x39,0x44,0xdb,0xea,0x62,0x89,0x97,0x69,0xd1,0x0d,0xf6,0x27,0xcf,0x47,0xfe,0x3d,0x5c,0xe9,0x92,0x54,0x0a,0x66,0xaf,0x82,0xb1,0x49,0x87,0x3f,0xa2,0x95,0x91,0x0e,0x72,0x1e,0x7b,0xde,0x32,0x31,0x51,0x40,0x24,0x4f,0x30,0x59,0x7d,0x97,0x28,0x30,0x7e,0x93,0xcd,0x1e,0x16,0xef,0xe1,0xb5,0xa8,0xff
db	0x3a,0xd0,0x62,0x94,0x8b,0x72,0xe7,0x97,0x8f,0x2f,0x58,0x3e,0x62,0x43,0x6b,0x28,0x05,0xc9,0x0d,0xf0,0x09,0xbd,0x12,0x3b,0xd8,0x15,0xd3,0x7c,0x97,0x96,0x5a,0xf4,0x9f,0x8d,0x25,0xb7,0xc5,0x66,0xf7,0xf7,0x5f,0x7e,0xca,0x2f,0xcd,0x9a,0xf2,0xa3,0x9b,0x4f,0x6f,0xc3,0xd9,0x64,0x38,0xda,0x87,0x97,0x8a,0x49,0x2d,0x80,0x16,0x73
db	0x88,0x62,0xd2,0xdf,0x4f,0xf7,0x79,0xc0,0x83,0xeb,0x2b,0x66,0x5a,0x21,0x3a,0xa2,0x2a,0xed,0x8c,0xe7,0x91,0x6d,0x56,0x18,0xfc,0x59,0x68,0xea,0x9f,0x5c,0x3c,0xd5,0x0f,0x64,0x70,0x89,0x22,0x83,0xed,0xfa,0xc9,0x21,0x68,0x3c,0x69,0xb8,0x3e,0x89,0xb5,0x9d,0x8b,0xc8,0xf7,0x57,0x17,0x27,0x90,0x12,0xa7,0xd2,0x4d,0x2c,0x30,0x64
db	0x42,0xbe,0xa6,0x49,0x4e,0xa3,0x3b,0xdb,0xdb,0x64,0x0e,0x89,0x66,0x87,0x72,0x90,0x86,0x1d,0x0b,0x61,0x32,0x47,0x3d,0x55,0x81,0xb2,0x50,0x5a,0x76,0x6c,0xa3,0x46,0x12,0x1b,0xaf,0x6e,0xbf,0xfd,0x98,0x2f,0xb7,0xd2,0x31,0x92,0xb5,0x26,0x1a,0x3d,0xfa,0x5d,0xc0,0x24,0x44,0xd2,0x6b,0x1c,0x81,0xf5,0x5d,0x50,0xb0,0x33,0x18,0xe0
db	0xc5,0xb3,0x6b,0xf4,0xfd,0xde,0xf7,0x2f,0x69,0x1d,0x5a,0xfe,0x03,0x6d,0xca,0xad,0x29,0xe0,0x6e,0x70,0xcd,0xe3,0x6d,0x38,0xef,0xf1,0x3a,0x76,0x2b,0x2c,0xb6,0xcd,0xff,0xeb,0xbc,0xe7,0xd9,0x40,0xbe,0x23,0x61,0x20,0xd5,0xb8,0x66,0x77,0x65,0xc9,0x33,0xf5,0x75,0x8e,0x15,0x98,0x3f,0xb1,0x4a,0xb8,0x1c,0x47,0x73,0x45,0x0f,0x73
db	0x2a,0xa1,0xb7,0x73,0x76,0x94,0x16,0x45,0xcf,0xd6,0x8f,0xe3,0x62,0x8a,0x42,0xfd,0xe3,0x1e,0xe0,0x7d,0xb5,0x99,0xbd,0x1c,0xf2,0x60,0xb2,0x72,0xa8,0x4b,0x19,0xd6,0xd0,0xdb,0x0b,0x1f,0xc9,0x68,0xc0,0xf3,0x65,0x04,0x50,0x41,0xf0,0xb3,0x0e,0x0a,0x9d,0x7f,0x0b,0x1f,0xeb,0x5b,0x4c,0x58,0x6a,0xf2,0x02,0x95,0xd2,0xf3,0xac,0xe5
db	0x69,0x81,0xb1,0x3f,0x08,0xfc,0xba,0xcb,0x36,0xcd,0x54,0x28,0xac,0x65,0xd8,0x81,0xab,0xc1,0x6a,0x51,0x97,0x21,0xe4,0xc6,0xaf,0xd8,0x76,0x76,0xa4,0xc4,0xd0,0x58,0x63,0xdf,0x32,0xf5,0x04,0xfb,0x11,0xeb,0x76,0x39,0xda,0x55,0xf4,0x7e,0x1c,0x7b,0x04,0x07,0x4d,0x5a,0xeb,0x74,0x0a,0x57,0xcf,0x10,0xf6,0x0e,0x73,0x02,0x25,0x67
db	0x4f,0x8f,0x37,0x75,0x8f,0x44,0x2a,0x1a,0x6d,0x05,0xda,0xe0,0xa0,0xaa,0xd2,0x78,0xaa,0x7e,0x76,0x0a,0xde,0x2a,0x54,0xae,0x1e,0x39,0xcc,0x3c,0x1c,0xa6,0xd5,0x8a,0xca,0xb4,0xcc,0x76,0xb9,0x30,0xd2,0xe2,0x46,0x31,0xb6,0x51,0xcf,0xe2,0x24,0x77,0xc9,0x9b,0x57,0x3c,0xa3,0x84,0x60,0x59,0x28,0x5f,0x23,0x74,0x17,0x79,0x42,0xbe
db	0x60,0x3f,0x09,0x6a,0x43,0x8e,0x40,0x25,0x79,0xb5,0xbb,0xbb,0x72,0x50,0xad,0x4f,0xaa,0xa2,0xd4,0xb2,0xc6,0x7d,0x50,0x7b,0x98,0x59,0x22,0x06,0x7d,0x2c,0x35,0xdd,0x44,0x34,0x9c,0x28,0x98,0xf3,0xe5,0xd0,0x7e,0x09,0xbe,0xc4,0x00,0x72,0xd5,0xa6,0x3b,0x0e,0xb1,0x18,0x91,0x0a,0x4d,0x5d,0xe2,0x0a,0x98,0x79,0x30,0x9b,0xaa,0x38
db	0x03,0x2b,0x6c,0xb2,0x8e,0x0a,0x1d,0x30,0x59,0x8a,0xe8,0x6c,0x6d,0xb5,0xd4,0x91,0xc5,0x28,0x1d,0x5e,0x49,0xe0,0xfc,0x26,0x7f,0x40,0xc0,0x6a,0x81,0x0d,0xb9,0xc6,0x05,0xc6,0x18,0x82,0x70,0xf6,0xea,0x0e,0xb4,0x85,0xba,0x5d,0xfa,0xfd,0xe3,0xd6,0x08,0x7c,0x3d,0x99,0x03,0xd4,0xdc,0x9b,0x50,0x12,0xc8,0xbd,0x8c,0x47,0x67,0x28
db	0x83,0x97,0xca,0xef,0xc3,0x1c,0x2b,0x6e,0x3b,0xf7,0xca,0x7a,0x68,0x6e,0x39,0x25,0x58,0xf7,0xa4,0x11,0x9d,0x8d,0x49,0x29,0xd6,0x6e,0x0b,0x0a,0xcf,0xa7,0x04,0x14,0x6f,0xc4,0x4c,0x36,0x1a,0x16,0x3e,0x8f,0x99,0x69,0x94,0x1d,0xa8,0x66,0x93,0xeb,0x1d,0x82,0xfd,0x3f,0x84,0xb0,0x9d,0xa4,0xe1,0xb0,0xd4,0x9d,0xb2,0x60,0x20,0xfb
db	0xd3,0xa0,0xdc,0x79,0x83,0xb0,0xfc,0x50,0x18,0x57,0xe1,0xeb,0x44,0x25,0x05,0xab,0x27,0xfb,0x5f,0x83,0xcd,0x51,0xd0,0x3b,0x80,0x4a,0xce,0xbf,0xe9,0xfe,0x46,0xd2,0x5f,0xea,0x8c,0x89,0x48,0xc8,0x65,0xdd,0x2a,0xa4,0xda,0x54,0xc2,0x37,0x7e,0xd7,0xff,0x80,0x5b,0xf0,0xc3,0x40,0x44,0x40,0x72,0x63,0x23,0xc6,0x9a,0x48,0xf3,0x4b
db	0x91,0x64,0x26,0xfc,0xf3,0xa0,0xb9,0x06,0x0c,0x88,0xbb,0xc0,0x93,0x73,0x63,0xf6,0x9c,0x0d,0xe2,0xf6,0xee,0xe0,0x51,0xfd,0xae,0x4d,0x21,0xb9,0x6b,0x7d,0x1e,0x34,0xa0,0x4d,0xe4,0x25,0x30,0xe6,0x81,0x2e,0x32,0xef,0xb9,0x9e,0xaf,0xa0,0x22,0xe0,0x67,0xe6,0x07,0x55,0x3a,0xed,0xef,0x4f,0x87,0x2f,0x44,0xd2,0xef,0xc1,0xfb,0xc4
db	0x7b,0x27,0x20,0x44,0xd2,0xd6,0xf9,0xf3,0x67,0xc1,0xbf,0xaa,0xd5,0x9c,0xd9,0x2c,0xd5,0xf1,0x42,0x2d,0xec,0x39,0xb5,0xc1,0x18,0xed,0x6c,0x47,0x80,0xf8,0x6f,0x66,0x10,0xee,0x1d,0xd6,0x79,0x01,0x4e,0x2a,0xd0,0x83,0xa7,0x9d,0x1d,0x81,0xce,0xf5,0x6f,0x26,0x86,0xd2,0xd7,0x56,0x15,0x65,0x48,0x4c,0xf1,0xf9,0x21,0x77,0xd1,0x84
db	0x22,0xce,0x4d,0x8d,0x83,0xda,0x8c,0x50,0x56,0xc8,0x3b,0xc5,0xb6,0xcf,0x3e,0x0d,0x50,0xe5,0x9d,0x6c,0xb5,0x2a,0x5a,0x58,0x28,0xf5,0x0a,0x05,0xf3,0x0e,0x40,0x8e,0xb6,0xb4,0xdf,0x11,0x1b,0x34,0x81,0xc5,0x0e,0x09,0xa6,0xfc,0x46,0x14,0x02,0x78,0x94,0xbb,0x63,0x9d,0x3e,0x25,0x2c,0xc8,0x1b,0x5c,0xef,0x64,0x77,0x0c,0x04,0x40
db	0xe1,0x45,0x85,0xf8,0x07,0xbf,0x14,0x65,0xe9,0xfc,0xba,0xe4,0x9c,0xa7,0x91,0x56,0x2a,0x3a,0x8e,0x33,0xae,0x56,0x04,0x9d,0x35,0xbc,0xad,0x64,0x0e,0x99,0x8e,0xb5,0x84,0x72,0xcf,0xcc,0x81,0x14,0x11,0x9e,0xe6,0xac,0x0d,0x41,0x43,0x4e,0x2a,0x0d,0xda,0x98,0x42,0xfa,0x8c,0x21,0x79,0x93,0xa3,0xdf,0x84,0x88,0x76,0x14,0x5b,0xb9
db	0xff,0xe1,0xab,0x94,0xc3,0xcd,0x10,0x69,0xee,0x53,0xea,0xfe,0xfb,0xaa,0x43,0x8f,0xdd,0x55,0x88,0x34,0x5d,0x55,0x0f,0x42,0x4d,0x1d,0x93,0xce,0x96,0x67,0xf8,0x33,0xc7,0xca,0x34,0x11,0x28,0xb2,0xed,0x0f,0x00,0x40,0x84,0xee,0x51,0x26,0x6e,0x7b,0x2d,0x77,0xeb,0x18,0xb8,0x9a,0xad,0x28,0xb6,0x6c,0x5e,0xde,0x10,0x4c,0x29,0x1d
db	0x79,0x3c,0x2e,0x1c,0xf0,0xc8,0xb3,0xee,0x19,0x7a,0x10,0xe1,0xe3,0x05,0x1e,0x63,0xe9,0x00,0xd7,0xfe,0x83,0xe7,0x54,0xff,0x65,0x9a,0x27,0xa3,0x86,0x72,0x5c,0xb6,0xef,0xf5,0x84,0x68,0x1e,0xae,0xe6,0xf8,0x66,0x9c,0x1b,0x86,0xab,0xfa,0x1a,0xe3,0xb8,0x97,0x16,0xb1,0xb7,0x42,0xfa,0x85,0xa3,0x3a,0x0d,0x21,0xd2,0x35,0xb1,0x89
db	0xf0,0x4f,0x1a,0x1d,0x45,0x34,0x2f,0x31,0x12,0x8c,0x19,0xe7,0x4b,0x14,0xa7,0xcf,0x0f,0xf9,0xcd,0x77,0x40,0xbe,0x09,0xeb,0xc3,0x3e,0x4a,0x37,0x55,0xab,0xbb,0x9c,0xe5,0x22,0x56,0x8a,0x66,0xfa,0xb1,0xff,0x73,0x29,0x52,0xb1,0x89,0xf7,0xab,0xa6,0x58,0x53,0x97,0xfd,0x44,0xda,0xbd,0x0b,0x1f,0xc8,0x88,0x01,0xcc,0x5e,0xf7,0x05
db	0xbd,0xf7,0x0a,0x4d,0xcb,0xef,0xbf,0xd9,0x8e,0x15,0xc3,0x40,0xb9,0xc9,0x14,0xe5,0x05,0x3c,0x20,0x67,0xfe,0xdc,0xa6,0xb8,0x92,0xbd,0xf5,0x33,0xb5,0x77,0x11,0x28,0x47,0x21,0x28,0x18,0x61,0xf8,0x1c,0xdb,0x65,0xad,0x89,0x0d,0x98,0x79,0xca,0x2b,0xa3,0x4f,0x16,0xa6,0xb3,0xb9,0xcc,0x47,0x5b,0x13,0x96,0x2e,0x39,0x78,0x24,0xc5
db	0xf9,0xf5,0xae,0xdc,0x34,0x3c,0xf7,0x48,0x0d,0x75,0xaf,0x51,0x75,0x48,0xbe,0x4d,0x73,0x89,0x5a,0xfc,0xd7,0x51,0xd3,0x93,0xa8,0xbc,0xc3,0xa6,0x6b,0x63,0xc1,0xc3,0x7b,0x48,0xf1,0x57,0xe4,0xb4,0xce,0x5f,0x18,0xae,0xdc,0x61,0x99,0xaa,0x7e,0x49,0xd6,0xb5,0x2c,0x62,0xb8,0x8c,0x4a,0x94,0xc1,0xc2,0x13,0x23,0xdc,0x7c,0x48,0xc2
db	0xaa,0xc4,0xd9,0xc0,0x09,0x11,0x6e,0x35,0x07,0x14,0x77,0x7e,0xeb,0x87,0x00,0x05,0x30,0xec,0xb2,0xc6,0xde,0x6e,0x42,0x0b,0x2a,0xb6,0xca,0xb1,0xdc,0x69,0x57,0x1b,0xad,0x52,0xa8,0x22,0x1e,0xb5,0x2b,0xb5,0x8e,0x39,0x4b,0xbf,0x38,0xf4,0xb2,0xf5,0xa1,0x9c,0x7b,0x7f,0x6c,0x14,0x48,0x37,0xa9,0xf9,0xcd,0x85,0x50,0x53,0xb0,0xc1
db	0x15,0x28,0x19,0x3b,0xb1,0x04,0x44,0x93,0x7a,0x16,0x76,0x69,0xa1,0x5c,0x67,0xcc,0x8d,0x02,0x56,0xcd,0xd9,0x91,0x49,0x8c,0x1b,0xc9,0x89,0x98,0x09,0x2e,0x5b,0xf8,0x7c,0xe6,0x0f,0x46,0xb0,0xcc,0xe5,0x75,0x63,0xaf,0x40,0xd5,0xa3,0x45,0x4a,0x76,0x67,0x1d,0x81,0xc2,0x25,0x85,0x7f,0x52,0xc5,0xf8,0x6d,0xd9,0xb6,0xa8,0xa4,0x96
db	0x63,0xcc,0x15,0xc5,0xec,0x40,0x0e,0x08,0xf7,0x6f,0x85,0xa5,0xe7,0x2e,0xbe,0x3f,0xf4,0xc8,0x74,0xc7,0xed,0x86,0x85,0xc0,0x44,0x9e,0x80,0xc8,0x89,0xdc,0x16,0x47,0xb1,0x68,0x0e,0x65,0x66,0x0f,0xbc,0x33,0xb1,0x78,0x1e,0x5e,0xd7,0xde,0x97,0x96,0xb8,0x74,0x5c,0x90,0x7a,0xed,0x36,0xf4,0x10,0x91,0x5a,0x42,0x92,0x81,0x11,0x73
db	0x3e,0xf1,0x5e,0xfb,0xc2,0x38,0xe6,0xe5,0x41,0xce,0x96,0xed,0x44,0x14,0x9c,0xc0,0x1f,0x83,0x5f,0xdd,0x50,0x87,0x90,0x86,0x50,0x61,0x87,0x99,0x7c,0x64,0x2d,0x50,0x17,0xa3,0xb0,0x7e,0x69,0xd3,0x86,0xb4,0x7c,0xe7,0x15,0x34,0x9e,0x3b,0x17,0xc0,0x2d,0x08,0x60,0x8b,0xae,0xec,0xa2,0xf6,0xf1,0xa4,0xbc,0x7b,0xc2,0x75,0x91,0x13
db	0xf6,0xd0,0x71,0xf0,0x3c,0x9c,0x51,0xb3,0x33,0x53,0x57,0x47,0x8b,0x47,0xb0,0x0b,0x95,0x9a,0x39,0x70,0x63,0x91,0xcc,0xd8,0xd0,0x23,0x32,0xc0,0xb6,0x0f,0x91,0x30,0x29,0x45,0xf1,0xfc,0xa1,0x83,0x10,0x9a,0xa4,0x05,0x05,0x9f,0x33,0xbd,0xaf,0x16,0x3e,0x53,0x39,0xb1,0x4b,0x76,0x55,0x3e,0x6f,0x47,0x23,0x59,0x4c,0xbb,0x82,0x31
db	0x19,0xe2,0xb1,0x49,0x20,0x91,0x2d,0xb0,0xfe,0xa6,0xae,0x7f,0x6e,0xd1,0x5b,0xb9,0x84,0x18,0x0f,0x68,0xc6,0x56,0x8a,0x22,0x81,0x3f,0x38,0x42,0x7a,0x31,0xa1,0xc1,0xf7,0x10,0x6a,0xc3,0xb1,0xaf,0x19,0xad,0x06,0x3a,0x53,0x9d,0x44,0x9f,0xe7,0x25,0xac,0x59,0x06,0xb9,0xd2,0xf6,0xce,0xb6,0x1e,0x4d,0x65,0x2e,0x05,0xb4,0x14,0x91
db	0xfb,0x5b,0x26,0xd0,0xee,0xfa,0x45,0x5b,0x0c,0xd5,0x5c,0x1f,0x0c,0xe0,0xf6,0x50,0x78,0x77,0x7e,0x83,0x04,0xec,0x3b,0x53,0x28,0x97,0x56,0x61,0xeb,0xa0,0x78,0xe5,0xc0,0xb2,0x3c,0xcd,0x6f,0x4b,0xda,0x11,0x00,0x93,0x49,0x9f,0x03,0x22,0x39,0x3a,0xc8,0xef,0x01,0x91,0x12,0x36,0x15,0x0c,0x47,0xd5,0x8b,0x77,0x5e,0x5f,0x91,0x4b
db	0x44,0x98,0xa0,0xa0,0x46,0x0f,0x17,0xef,0xf9,0x52,0x0b,0x92,0xc1,0xe0,0xfc,0x63,0x9b,0x6d,0xe2,0xde,0x88,0x89,0x32,0x89,0x93,0x44,0x6d,0x69,0xe7,0x26,0xfd,0x77,0xc0,0x18,0x58,0xdb,0x74,0xec,0x04,0x0c,0x60,0x51,0x74,0xca,0x49,0x3e,0x4f,0x5f,0xaa,0x53,0xf2,0xc1,0xcb,0x89,0x1f,0x69,0xaa,0xbb,0x97,0x17,0x04,0x49,0x5e,0x44
db	0xf3,0xf3,0xc4,0x98,0x9d,0x49,0x1e,0xb0,0x27,0x7d,0xff,0x54,0xa5,0xed,0xbe,0xb0,0x52,0xf6,0x00,0x87,0x67,0x2d,0x28,0xdb,0x09,0x4e,0xa2,0xee,0x4f,0x81,0xeb,0xa1,0xca,0x2b,0x07,0x2f,0x54,0x6d,0x5a,0x2e,0x13,0xa4,0xd0,0xac,0x21,0x7c,0x44,0xc0,0x98,0xac,0xe4,0x6e,0x94,0xd1,0x5b,0x5e,0xd6,0xf1,0x3c,0x45,0x88,0xe1,0xbd,0x58
db	0xf1,0xc7,0xba,0x36,0x2c,0x15,0xb9,0xf4,0xa3,0xea,0x73,0xb4,0x91,0x53,0xd8,0x18,0x86,0x23,0x87,0x0b,0x7a,0x4a,0x2d,0x2d,0x3d,0x73,0xcb,0x05,0x11,0x4c,0x19,0x26,0xf2,0x05,0x89,0xc8,0x29,0x26,0xa7,0xe4,0xcb,0x43,0xd0,0xf6,0xbc,0x76,0xbd,0x9a,0x17,0x4a,0xf1,0x39,0xe3,0xde,0x05,0x10,0x8a,0xd3,0x11,0x53,0x61,0xef,0x33,0xd9
db	0x65,0x0d,0x99,0x0b,0x39,0xa4,0x1b,0x4f,0x0b,0xa5,0xf1,0x37,0xa3,0x4f,0x54,0xa7,0x29,0xc1,0xae,0x88,0x5c,0x13,0x2f,0xb2,0xbf,0xcf,0x1b,0x0d,0xa0,0x68,0x21,0xe2,0x20,0x3f,0x02,0x9f,0x08,0x39,0xc6,0x20,0x2d,0x08,0x01,0x5d,0xf1,0x47,0xde,0x88,0xad,0x49,0x09,0xf7,0x1a,0x0c,0xa7,0x29,0x91,0xe5,0xfc,0xc5,0xde,0xd7,0x92,0x3f
db	0xe5,0x0c,0x91,0xea,0x24,0xfb,0x02,0x9a,0x13,0x3a,0x61,0x01,0x9d,0x7e,0x9d,0x11,0xf8,0xbd,0xe0,0x05,0xbb,0x13,0xf0,0x00,0x67,0x90,0x6f,0x80,0xe7,0x2e,0xfc,0xe0,0xea,0x8a,0x9d,0x2c,0x13,0x57,0x4c,0x78,0x1c,0x44,0xe2,0xa6,0x62,0x01,0x46,0xf8,0xbe,0xf4,0x51,0x32,0x15,0xd4,0x3c,0x7d,0x3b,0xcc,0xfd,0xc3,0x46,0x43,0xf1,0xfa
db	0x9e,0xee,0xad,0x47,0x8f,0x32,0x31,0x94,0x70,0x92,0xea,0x45,0xe3,0x63,0xd6,0x28,0x23,0xa5,0xdf,0x61,0xee,0x19,0x1a,0x5e,0xb0,0xe7,0x17,0xab,0xac,0xb4,0x03,0xed,0xf6,0x9e,0xba,0xdf,0x52,0x88,0xb7,0xca,0x7c,0x27,0xcd,0x7b,0xf8,0x1e,0x54,0x4b,0xe6,0xa3,0x91,0xf7,0xeb,0x22,0x65,0x95,0x13,0xe1,0xac,0xb6,0x22,0x80,0xe3,0xeb
db	0xf9,0xde,0xf1,0xb7,0x6a,0xfd,0xc7,0xb8,0x9b,0x9c,0x49,0x4f,0x84,0x7f,0x68,0x93,0x6c,0x3c,0xea,0xb1,0x8a,0xeb,0x23,0xca,0x2d,0x5e,0x29,0xb5,0x52,0x49,0x98,0x12,0x3f,0xed,0xf0,0xb7,0xbc,0x22,0x14,0x73,0x92,0x84,0x1b,0x3e,0x2f,0xed,0x24,0x1e,0x62,0xcc,0x09,0xe8,0x7c,0x5a,0x08,0xd4,0xc6,0xd9,0xd1,0x55,0x66,0x18,0x2c,0x6a
db	0x99,0xc3,0x0e,0x1e,0x7b,0xb7,0xd4,0xbd,0x0e,0x1f,0x22,0x85,0x09,0x2c,0xcf,0xff,0x79,0x9f,0x93,0xbe,0xec,0xed,0x63,0xb7,0x97,0xbb,0xeb,0xd6,0x70,0x76,0xa9,0x4f,0xb7,0x9a,0x60,0x5b,0x50,0xdf,0x85,0x46,0x69,0xa0,0x9a,0x86,0xe3,0xe2,0x13,0x2b,0x8c,0x0f,0x3b,0xab,0xa8,0xce,0xa3,0xb0,0x78,0x72,0x40,0xfb,0xd1,0x26,0x72,0xc1
db	0x91,0x25,0x7b,0x29,0xde,0xcf,0x99,0xf3,0x8e,0x87,0x39,0x81,0x04,0xad,0x3b,0x11,0x6a,0xda,0x00,0xdd,0xe9,0x41,0xc1,0xd8,0xcc,0xf9,0x59,0xac,0x9b,0xb1,0x64,0x6f,0xb8,0xf4,0x9f,0x20,0xde,0x67,0x09,0x1b,0xdf,0x11,0xa5,0x94,0x56,0xab,0x76,0xba,0xc5,0xda,0x6c,0x86,0xe6,0xa4,0x73,0x59,0xa9,0xe3,0x68,0xb9,0xc0,0x50,0x1b,0x55
db	0x21,0x9e,0xea,0x8d,0xcc,0x5d,0xee,0x88,0xe1,0x18,0x7c,0xcd,0x8f,0xff,0x18,0xbd,0x13,0xea,0x95,0xc4,0x8e,0xd3,0x92,0xfe,0x3d,0xda,0x6f,0xa5,0xbc,0xa0,0x77,0x5a,0x1d,0x61,0xff,0x7b,0x77,0xc4,0x06,0x25,0xc5,0xa7,0x76,0x36,0x55,0xe7,0xc0,0xf0,0x46,0x7e,0xca,0xe7,0xc1,0xe8,0x88,0x65,0xff,0xa7,0xb6,0x9c,0x83,0x1d,0x2e,0x6e
db	0xd6,0xd3,0x07,0x22,0x65,0x79,0x4f,0x3c,0x0a,0x5c,0x4f,0x95,0xb3,0x14,0x37,0x9b,0x0b,0x97,0x69,0xd9,0x5b,0x37,0x09,0xc3,0x70,0x5b,0x4f,0x11,0xcb,0xce,0xc0,0x06,0xf2,0xb9,0x32,0xdd,0x24,0x7b,0x8c,0xe6,0x0c,0x91,0x3b,0xa8,0xb0,0x82,0x56,0x4d,0xde,0xa0,0x5c,0x0b,0x5b,0x70,0x53,0x64,0x9d,0xab,0xbb,0x51,0x6b,0x8c,0x8f,0xe5
db	0x1f,0xc0,0xb8,0xfe,0x1b,0xf6,0x24,0x26,0x62,0xcb,0x78,0x84,0x90,0x76,0x67,0x30,0x18,0x37,0xa9,0xca,0xb7,0x0d,0xac,0x17,0x86,0xb1,0x87,0x59,0x18,0xc3,0x9e,0x62,0x1b,0xb1,0x04,0x52,0xfc,0x7c,0x86,0xa0,0x37,0xb9,0x8b,0x7a,0x85,0x79,0x21,0xe0,0x0f,0x87,0x28,0x91,0xd0,0xe5,0x24,0x63,0x5c,0x7c,0xe8,0x47,0xfa,0x42,0x55,0xe9
db	0x66,0xad,0xdf,0xc3,0x43,0x90,0x47,0x83,0x24,0x09,0x54,0x5f,0x14,0x27,0x53,0xb3,0x22,0x15,0x52,0x84,0x2f,0x61,0x8c,0x01,0x9e,0x34,0x61,0x3f,0x76,0x44,0x1c,0xca,0x79,0x2c,0x40,0x4e,0xa0,0x36,0x11,0xe0,0x23,0x0f,0xa7,0x78,0xf9,0xf9,0x2a,0x2c,0x98,0x5c,0xa9,0x2d,0x66,0xb9,0x87,0x43,0xd5,0xbc,0x64,0xe5,0x52,0x2f,0x1d,0xdc
db	0x1d,0xf4,0xb3,0x18,0x6b,0xd1,0x3b,0x8b,0xa3,0x47,0x65,0x62,0xcc,0xca,0x5f,0x00,0xbb,0x78,0x9d,0x35,0xd4,0x79,0x45,0x33,0xc7,0xa8,0x29,0x96,0x98,0xa4,0x23,0x2c,0x23,0x7f,0x5a,0x1d,0x09,0xb4,0xcf,0xac,0x54,0xcd,0x27,0xda,0x88,0x21,0xe2,0xb4,0x85,0xdc,0xc9,0x4a,0x6b,0xc4,0xfa,0x48,0xc5,0x91,0xc1,0x53,0x4b,0xa1,0x7a,0x9c
db	0x8a,0x7d,0x35,0x52,0xf1,0x58,0x9d,0x20,0x36,0xc2,0x78,0xdb,0x37,0xf8,0xa4,0x2f,0x50,0x98,0xb0,0x34,0x51,0x66,0x93,0xcf,0xe7,0xf0,0x06,0xf1,0xcd,0x0e,0x4f,0x33,0xcc,0x9b,0x73,0x3b,0xc9,0x51,0x63,0x6d,0x29,0x6b,0xf4,0x9d,0x2c,0x76,0x59,0xcd,0xfc,0x11,0x35,0x52,0xbd,0x3b,0x2e,0x7d,0x8a,0x0d,0xb0,0xbb,0x90,0x9b,0x9c,0xac
db	0x1c,0x80,0x89,0xd6,0x6f,0xaf,0xea,0x89,0x38,0x74,0xef,0x83,0x82,0x91,0xf7,0x74,0x96,0x30,0x40,0xe2,0x18,0x2b,0xb4,0xf6,0x15,0xf0,0x8e,0x63,0xe1,0x82,0x55,0x7b,0x65,0x70,0x33,0x14,0xef,0x7a,0x7c,0x2d,0xa9,0x17,0x1b,0x53,0x1e,0xf8,0x98,0x1b,0xbe,0xc8,0x00,0xf5,0xbf,0x79,0xe7,0x8e,0xf2,0xdb,0x59,0x0d,0x46,0xab,0x43,0xd0
db	0xe4,0xa0,0xeb,0x29,0x6a,0x8b,0xc1,0x99,0xa6,0xcc,0x8e,0xe5,0xde,0x67,0xdf,0x49,0x09,0x62,0x8d,0x4b,0xa1,0x1c,0x3b,0x01,0xe2,0x95,0x65,0x10,0xa5,0x91,0xd0,0x48,0x35,0x96,0xcf,0xe4,0x51,0xd2,0x7f,0x93,0x49,0xab,0x1a,0xba,0x08,0x33,0x54,0x34,0xd7,0x00,0xc9,0xa0,0x07,0x03,0xc7,0x8a,0x65,0xa2,0x84,0x60,0xcd,0xaa,0xa2,0x46
db	0x8c,0x67,0xd9,0xc1,0xe7,0x58,0xc5,0x1d,0xc0,0xb3,0xc6,0xb2,0x2a,0xfb,0x70,0x04,0xa2,0x25,0x7f,0x75,0x3c,0xd5,0x8e,0x9c,0x33,0xa2,0xdc,0x20,0x4c,0x26,0x5b,0xbe,0xd9,0x00,0x5d,0xa2,0xbd,0x42,0xbd,0x0d,0xd6,0x52,0x79,0xb5,0x67,0xf6,0x27,0x62,0xc8,0x64,0x05,0xc5,0x0f,0xae,0xe1,0x78,0x39,0xd1,0xb5,0x28,0xe9,0xd4,0x2a,0xaa
db	0xd4,0xc4,0x3e,0x43,0x27,0x83,0xfa,0xdb,0x46,0x73,0x20,0xcd,0x2c,0xba,0x33,0xb4,0x77,0x10,0x32,0x3d,0x8e,0x56,0x88,0x81,0xe1,0x4c,0x8b,0x46,0x60,0xcb,0xb7,0x67,0xd7,0x7b,0xc2,0x47,0x7d,0xd8,0x2d,0x4c,0x09,0x9f,0x07,0x8e,0x34,0x45,0xf4,0x50,0x69,0xfd,0x35,0x0a,0x09,0x9e,0xac,0x49,0x5f,0xdf,0x72,0x84,0x97,0x93,0x30,0x2c
db	0xc6,0x20,0x6f,0xb5,0x18,0x03,0xb6,0x30,0x23,0xc8,0xcd,0xa1,0x43,0xbd,0xbb,0x6f,0xde,0xb3,0xcb,0x1c,0xdd,0x41,0x71,0xfa,0x37,0xa7,0xa9,0x57,0x5a,0xf7,0xee,0xcd,0xb1,0xc1,0xb6,0x78,0x1c,0xe3,0xde,0x5c,0x02,0xc8,0xce,0xb7,0x8e,0x72,0xce,0xfd,0x79,0xcf,0x1a,0xef,0xcb,0x5b,0x5d,0x3c,0x1d,0xc8,0x1e,0x9f,0x67,0x26,0x86,0xd3
db	0x3b,0x98,0x49,0x04,0xcd,0x1b,0x48,0x7c,0xa6,0xbe,0x37,0x0b,0x19,0xb1,0xb7,0x8a,0x74,0x0a,0xd9,0x4f,0x7b,0xbb,0x8e,0xc6,0x9b,0xdd,0xbc,0x61,0xfd,0xdd,0x86,0x7e,0x70,0x2e,0xe4,0x94,0xb4,0x62,0x47,0x6b,0x7c,0x92,0x41,0xda,0x05,0xdc,0xaf,0x5c,0x93,0xbc,0x7d,0xad,0xce,0x44,0x9e,0x27,0x1c,0x74,0x30,0x01,0xf2,0x8a,0x22,0xce
db	0x88,0x61,0xf5,0xb8,0xe2,0xf0,0xca,0x14,0x21,0x53,0xd3,0xbe,0x95,0x8f,0x52,0x10,0x21,0xc5,0x25,0x16,0xa1,0x4f,0xef,0x9a,0x6f,0xce,0xe9,0xee,0x06,0xa8,0x32,0xa4,0xac,0xee,0xd8,0x95,0x0b,0x65,0x10,0xbc,0xb3,0x15,0x48,0xf9,0x96,0xee,0xde,0x5d,0xf6,0x38,0x5f,0x32,0x70,0xd1,0x29,0xa8,0x1d,0xdc,0xf4,0x34,0x2d,0x0c,0x93,0x48
db	0x8c,0x40,0xed,0x35,0x41,0xfe,0x4b,0xab,0x20,0x7d,0x95,0x74,0x02,0xe5,0x71,0x76,0x7e,0x59,0x35,0xb3,0xd7,0x43,0x1f,0xd4,0xe6,0x02,0x86,0xba,0x4f,0x53,0xd9,0xc3,0x7d,0x7f,0x3d,0xb6,0xd8,0x92,0x07,0x89,0x99,0x46,0xf8,0x09,0xcd,0x19,0x43,0x93,0xa7,0xc1,0xb2,0x5d,0xec,0xbf,0x09,0xf4,0xba,0xfc,0xf7,0xf1,0xa7,0x2e,0xfe,0x71
db	0x04,0x58,0xab,0x16,0xd7,0xc0,0xf7,0x03,0xd4,0xc4,0xb9,0xe4,0xd8,0xfc,0x5b,0x66,0xa6,0xb3,0x6a,0x94,0x0e,0xba,0x8c,0x54,0x5c,0x8c,0x02,0x0a,0x33,0xcb,0xde,0x1c,0xad,0x6d,0xef,0x48,0x05,0xa6,0xca,0x9a,0x27,0xd6,0x1c,0xc3,0xea,0x3a,0x46,0x20,0xec,0x72,0xc4,0x94,0x89,0x7e,0xba,0xa9,0x2f,0xe5,0xec,0x1a,0xe4,0x50,0x54,0xeb
db	0xd9,0x5a,0x08,0xc5,0x84,0xc1,0x9a,0xdf,0xb0,0xd4,0x9a,0x6d,0xa2,0x93,0x52,0xd2,0x4d,0x69,0x88,0xc8,0x40,0x2d,0x26,0xbd,0x7a,0x37,0x04,0x21,0xe1,0x9d,0xc9,0xed,0xda,0x7a,0x4c,0x11,0x49,0x14,0x42,0xa1,0xdb,0x6e,0xed,0x1b,0x37,0xbf,0x09,0xac,0x35,0xda,0x80,0xf6,0x75,0xd4,0x32,0x54,0xb5,0x18,0xe8,0x79,0x25,0xc4,0x95,0xe8
db	0x74,0xcf,0x6d,0xac,0x34,0x1f,0xea,0xd4,0x2e,0xd1,0x77,0x5e,0x90,0x8f,0x12,0x51,0xbb,0x3c,0xdf,0xe6,0xf4,0x49,0x8c,0x0f,0x9a,0x8e,0xe3,0x96,0xbd,0xba,0xe6,0x47,0x4b,0x50,0xc7,0xa9,0x29,0xea,0x09,0x5d,0xef,0x3c,0x91,0x48,0xc6,0x37,0xfd,0xac,0x7b,0xe5,0x04,0x25,0x93,0x0b,0xe3,0xce,0x32,0x46,0x38,0x81,0x97,0x57,0xbe,0x1f
db	0x3c,0x61,0x2d,0xd1,0x4e,0xca,0xbb,0x44,0xc6,0xfd,0xdf,0xdd,0x11,0xbf,0xbf,0xa8,0xc0,0x32,0x67,0xc1,0x2e,0xd7,0xbe,0x3c,0xe3,0xcb,0x57,0xa5,0x6d,0xbb,0x8e,0x0f,0x69,0x22,0x42,0xef,0x53,0x0f,0xce,0x09,0x6a,0xda,0xbf,0xd6,0xed,0x61,0x67,0x82,0x83,0x13,0x63,0x97,0x7d,0x1a,0xad,0x34,0x77,0x37,0xa6,0xe0,0x89,0xaa,0xd4,0xb6
db	0x8f,0x93,0xff,0xb8,0x8f,0x63,0x14,0xfd,0x17,0xff,0xe5,0x7c,0x83,0x23,0xaa,0xe0,0xb9,0xd9,0x94,0x3a,0x1a,0xe7,0xa5,0xbd,0xa6,0x2b,0xd3,0x49,0xca,0xeb,0x7d,0x87,0x1d,0x54,0x16,0x93,0xec,0x14,0x8b,0x77,0x3c,0xb4,0xbe,0x33,0x76,0x5e,0xcb,0x33,0x27,0xd3,0x20,0xd6,0xed,0x0c,0x66,0xb8,0xe0,0x00,0xa6,0x76,0xcd,0x8b,0xb4,0xef
db	0x11,0xbc,0xe5,0x59,0xcf,0x1d,0xf5,0x15,0x58,0x4a,0xe1,0xfd,0x87,0x8c,0x7b,0xb9,0xa4,0x42,0x5a,0xed,0x51,0x7e,0x8d,0xa6,0x19,0xaa,0xc4,0xa6,0x14,0x74,0x45,0xb1,0xda,0x87,0x0f,0xd7,0xe7,0x66,0x3b,0xcd,0x04,0x02,0x14,0x20,0x41,0x15,0x4c,0x33,0x79,0x80,0x7d,0xd4,0x44,0x2c,0xab,0x6c,0xf4,0xa8,0xd4,0x31,0x43,0x7b,0xa7,0xc7
db	0x65,0x0e,0x32,0xc8,0xc8,0x6d,0xf5,0x65,0x1b,0x26,0xf1,0xe4,0x68,0x15,0x88,0x1b,0x00,0x60,0x23,0x31,0xd7,0x4b,0x57,0xda,0xf1,0x19,0xa9,0xd9,0xaf,0xe6,0xa9,0x1e,0x2c,0x0d,0x23,0xe4,0x5b,0xcb,0x43,0x38,0xf0,0x93,0xd3,0xfb,0x6a,0x9b,0x83,0x30,0x55,0x96,0x9f,0x53,0x06,0x3f,0xaf,0x40,0x69,0xef,0x9a,0x47,0x6b,0xba,0x7c,0x10
db	0x10,0x44,0x89,0xfa,0xb9,0x9e,0x70,0xed,0x25,0x59,0x68,0xae,0x9b,0x17,0xcf,0x80,0x6f,0x34,0xb8,0x07,0x40,0xe5,0x27,0x6d,0xcd,0x46,0x2c,0x36,0x90,0xf3,0x83,0x74,0x68,0x35,0xf2,0x05,0xa8,0xdf,0x4e,0x34,0xc5,0xb4,0xeb,0x5a,0x7d,0xe6,0x10,0x8a,0x23,0x54,0xeb,0x9b,0x27,0xf2,0x07,0xee,0xf9,0x05,0xc2,0x5a,0x88,0xbd,0x49,0x2e
db	0x1b,0x00,0x31,0x68,0x4a,0xc9,0x3a,0xc5,0x93,0x82,0xa8,0x39,0xba,0x55,0xcd,0xc1,0xda,0x49,0xc2,0x4c,0xf4,0x93,0x00,0xcf,0x61,0xa4,0xbb,0x8c,0x64,0x33,0x90,0x14,0x6d,0x1d,0xad,0x75,0x97,0xd9,0x1d,0xfb,0x27,0x67,0x43,0x04,0xdc,0x4e,0xdf,0x0e,0x0c,0x7e,0x1c,0x89,0xfe,0x31,0xb7,0x9b,0x07,0x5e,0x99,0x08,0x22,0xef,0x6e,0x4d
db	0x8b,0xd6,0x27,0xe6,0x24,0x1a,0x28,0xb0,0x22,0xa5,0x69,0x17,0x82,0x46,0xe3,0x90,0xe8,0x04,0xae,0x90,0x66,0x14,0xec,0xa2,0x1b,0x7e,0x09,0x13,0x32,0x9d,0xec,0x8b,0x51,0x5f,0xa8,0x96,0x8f,0x4c,0xc6,0xbd,0x5c,0x70,0x29,0x21,0xac,0xe9,0x6e,0xb0,0x0c,0x61,0x50,0xba,0xcc,0x55,0x71,0xda,0x2a,0x92,0x86,0x0c,0xff,0xaf,0x7a,0xcf
db	0xaf,0x2a,0xbd,0xd6,0x15,0xa4,0x4c,0x2e,0x76,0x0d,0xcf,0x10,0x11,0x4a,0xd1,0x89,0xdd,0x46,0x5f,0x6b,0x5a,0x02,0x05,0x49,0x6f,0x98,0x6a,0xa7,0x8a,0x66,0x87,0x59,0x23,0xb5,0x3f,0x2e,0x95,0x73,0xfe,0x48,0xe9,0x0d,0x17,0xa6,0xa5,0x4e,0x40,0x98,0x79,0x40,0x1a,0x10,0x1d,0x84,0xdd,0x6f,0x17,0xa7,0xb7,0xfb,0x49,0xbd,0x54,0x97
db	0x0f,0x42,0x25,0x95,0x83,0xf0,0x97,0xe7,0x4c,0x24,0xb5,0xe8,0x23,0x0a,0xd6,0xbf,0xef,0x2c,0x03,0x4f,0x87,0x59,0xe8,0x80,0x87,0xcc,0x51,0x1b,0x94,0xd8,0x60,0xe7,0x10,0x4d,0x01,0xfd,0x83,0xf2,0xd8,0x8d,0x1b,0x33,0xbf,0xaf,0x36,0x41,0x47,0x51,0xe0,0x45,0x2a,0x05,0x5f,0xe1,0x92,0xf8,0xa5,0x15,0x46,0x35,0xd8,0x9b,0xe0,0xff
db	0xee,0xa6,0x4e,0x7d,0xfd,0x96,0xa5,0x75,0xdf,0x7e,0xb0,0x7d,0x14,0x73,0xdd,0xbe,0x17,0x6d,0xdd,0xec,0xac,0x9a,0x92,0x68,0xe3,0x44,0x16,0x63,0x22,0xa8,0x15,0x58,0x8c,0x11,0x23,0x46,0x18,0xae,0x47,0x39,0x87,0xc7,0x4c,0x30,0x09,0xce,0xe5,0xc4,0xd8,0x82,0xc6,0xc6,0x3d,0x31,0xf6,0x0f,0xb5,0x69,0x61,0x63,0x88,0xd6,0xb8,0xda
db	0x89,0x29,0x87,0x69,0x6e,0x3f,0x55,0x2f,0xbc,0x91,0x91,0x43,0x7d,0xb3,0x7b,0x99,0x5a,0x5a,0xb0,0x7d,0x90,0xa7,0xe7,0x30,0x0d,0x32,0xb2,0x43,0x43,0x78,0x59,0x6e,0xbb,0xd7,0x76,0xd4,0x5b,0x4d,0xc4,0xa9,0x99,0xdd,0xd3,0xce,0x3d,0x13,0x41,0x38,0x33,0xed,0xb8,0x76,0x1a,0xbb,0xfd,0x26,0xcd,0x69,0x89,0x22,0x16,0x9a,0x21,0x35
db	0x38,0x77,0x14,0x10,0x42,0x17,0x1f,0xa1,0xbf,0x55,0xb4,0x51,0x62,0x15,0xac,0xd0,0xa2,0x71,0xe4,0x32,0x89,0x33,0x8b,0x74,0xc6,0x61,0x38,0xd0,0xfe,0x28,0x69,0xe6,0x88,0x1b,0x11,0x7e,0x46,0x39,0xba,0x24,0xdd,0x1f,0x61,0xf4,0x74,0xad,0x58,0x94,0xa9,0x3e,0xc7,0x2a,0x9e,0xc0,0xe1,0x1c,0xee,0x21,0xab,0x3e,0x65,0x0c,0xe8,0xd8
db	0x71,0x52,0xf3,0x6c,0x64,0x53,0x75,0x17,0x87,0x55,0x14,0x42,0x25,0x7f,0xe7,0x0d,0x89,0x1b,0x77,0x26,0xc4,0xaa,0xcc,0x91,0x47,0xe5,0x54,0xae,0x1a,0x0d,0x04,0x99,0xeb,0x56,0xd8,0xb4,0x6d,0xeb,0xec,0x2f,0x6c,0xc5,0x8e,0x76,0xe1,0xa0,0xa7,0x42,0x06,0xc9,0xc3,0x03,0xee,0xa9,0x9b,0x1e,0xfc,0x11,0xf5,0x2f,0x2b,0x14,0xb8,0x9f
db	0x87,0x61,0x9b,0xc7,0x38,0x0e,0x58,0xf1,0xd4,0x36,0xca,0x82,0x85,0x9c,0xde,0xec,0xd3,0x1e,0x29,0x4e,0x70,0x9e,0x9a,0xe0,0x8b,0x6f,0xfe,0xd0,0xe9,0x95,0x51,0xcf,0x36,0x31,0x9c,0xff,0x63,0xc6,0x04,0x8e,0x61,0xc2,0xcb,0x3a,0xfa,0xd0,0xd7,0x29,0xbd,0xe7,0x8a,0x2b,0x8e,0xa0,0xac,0x58,0x93,0xb3,0x52,0xca,0x80,0x17,0xd2,0x2d
db	0x93,0x5f,0xe0,0x8a,0x47,0x3c,0x67,0x95,0x64,0x91,0xa4,0x76,0xa4,0x5f,0xfa,0x93,0x4d,0xc7,0x6e,0x5d,0x23,0x9f,0xe1,0x4a,0x16,0xff,0xa5,0xf0,0x94,0xa8,0x02,0xcc,0x9a,0x84,0xd5,0x9d,0xb6,0xe5,0x7c,0x76,0x3f,0xc9,0xfd,0xdc,0x8e,0x59,0x9a,0x22,0x18,0x3c,0xe6,0x90,0x85,0x10,0x73,0x2d,0x65,0xa7,0xa7,0xe1,0xeb,0xc5,0x05,0x24
db	0x1e,0x0b,0x31,0x19,0xb5,0xb0,0x8d,0xc0,0xb5,0x04,0xfe,0x9d,0xfa,0xf7,0xcd,0x71,0x29,0x40,0x19,0x23,0xed,0x2c,0xdb,0x89,0x89,0x8d,0x69,0x22,0x4c,0x9c,0xa7,0xf7,0xb1,0x56,0x87,0xa3,0x44,0xa9,0xa3,0x16,0x28,0xce,0x94,0x40,0x6f,0x71,0x77,0x0e,0x6d,0xe9,0x78,0xa2,0x2a,0x17,0x45,0x03,0xeb,0x1e,0xf1,0xfa,0x56,0x3e,0xa7,0x6b
db	0x08,0x06,0x6a,0xcb,0x8f,0x5e,0x0f,0xd3,0x6e,0x4b,0x21,0x31,0x73,0x50,0x94,0x56,0xf9,0xb9,0xc7,0x38,0x69,0xe8,0x09,0x3f,0x03,0xb3,0xb5,0xe8,0x2a,0x5e,0xf6,0xad,0xae,0x6f,0xab,0x6a,0x49,0xdd,0x93,0x6d,0xfb,0x8b,0xde,0xea,0x8b,0xb0,0xa1,0x44,0xf0,0xb3,0xf6,0xaa,0xe3,0xc8,0x04,0x87,0x9f,0x8b,0xee,0xab,0x13,0x1d,0x2d,0xeb
db	0x09,0x62,0x21,0x49,0x5f,0xb6,0x95,0xab,0xc4,0xee,0x69,0xfb,0x31,0xff,0xbf,0x1a,0xa6,0x4c,0x67,0x66,0x84,0xe6,0x0c,0xb7,0xb2,0x3e,0x3f,0xa4,0xb3,0x52,0xde,0x15,0xc9,0xa7,0xa9,0xb5,0x0d,0xe5,0x0b,0x99,0xa6,0xb6,0x8f,0x69,0xc5,0x6d,0x6c,0xbb,0x83,0x89,0x4e,0xfc,0x49,0x79,0x4d,0x46,0x31,0xa0,0x09,0x5f,0x5d,0xd0,0x5b,0x80
db	0xa1,0xf4,0x36,0x48,0x97,0x6a,0xfd,0x34,0xcb,0x20,0xa8,0x01,0x25,0x04,0xe7,0x13,0x12,0x87,0x66,0x27,0x96,0x36,0xba,0x92,0xbd,0xda,0x94,0x11,0xef,0x90,0xbd,0xbc,0x9e,0xf9,0x63,0xb3,0xa6,0xc1,0xbb,0x46,0xe8,0x86,0x3f,0x2d,0xf9,0x11,0x3a,0x23,0xa8,0x7a,0x33,0x41,0x3e,0x2e,0x5d,0xde,0xc0,0xd2,0x23,0xca,0x41,0xa0,0xb9,0x70
db	0x6d,0x31,0xf3,0x89,0x87,0x9b,0x72,0xd9,0x15,0x4d,0x8b,0x51,0xdd,0x56,0xa1,0xb4,0x68,0x52,0x65,0x81,0x12,0x46,0xea,0x24,0xb4,0x34,0xcc,0xa0,0xdb,0x7d,0x96,0xd9,0x8e,0x64,0x61,0x10,0x7c,0x2a,0x00,0x4d,0x82,0x61,0x54,0xa4,0x70,0x3d,0x9c,0xa5,0x0b,0xd2,0x08,0x71,0xa8,0x94,0xb1,0xb4,0x30,0x61,0x59,0x9f,0x72,0x61,0x56,0x2d
db	0xa3,0xf4,0x9d,0x1c,0xfc,0x49,0x9d,0x39,0x27,0xcb,0x54,0xb2,0xce,0x3c,0xb6,0x76,0xe5,0x8e,0xa5,0xe7,0x08,0xd4,0xc7,0x2c,0xa6,0x28,0xc8,0x3e,0x22,0x14,0x06,0x75,0x68,0x0d,0x6b,0xb5,0xa3,0x68,0x14,0x17,0xfe,0xb8,0xcc,0x26,0x5b,0x9d,0x0b,0xcc,0x3e,0xd7,0x6c,0xe0,0xec,0x5e,0x1e,0x1e,0xb8,0x9a,0xbe,0x91,0xb5,0xa6,0xb5,0x83
db	0x28,0xc2,0x35,0x65,0xd3,0xde,0xdd,0x71,0x29,0x13,0xc1,0xee,0x78,0x22,0x34,0x0b,0x77,0x3a,0x48,0x98,0x26,0x43,0xc2,0xce,0x03,0xe8,0x75,0xf8,0x8a,0xdf,0x6a,0xb0,0xb4,0x8c,0x11,0x8c,0xe5,0x95,0x96,0x17,0xfb,0x06,0x5e,0x8f,0x36,0x10,0xc5,0x04,0x43,0x1b,0xed,0xd3,0xad,0xd4,0xa4,0xe0,0x17,0x85,0xed,0x9b,0xd8,0xae,0x98,0x46
db	0x58,0x57,0x0e,0x46,0xea,0x3f,0x07,0x6d,0x0e,0x46,0xda,0x2f,0x68,0x2b,0xd6,0xe7,0x0d,0x4b,0xbe,0x32,0xee,0x10,0x73,0x18,0x7d,0x6b,0x2d,0x04,0x27,0x72,0xb1,0xe1,0xbf,0x89,0xaa,0x4d,0x1a,0xfc,0xbd,0xf2,0xc3,0x9f,0xf0,0x01,0x85,0x62,0x09,0x4d,0x08,0x2c,0x57,0x9a,0x7b,0xad,0x0b,0x79,0xff,0x14,0xa1,0x45,0xde,0x21,0x8f,0xe2
db	0x93,0xd0,0x35,0x26,0xc3,0xbc,0x8c,0xb7,0x57,0x6a,0xdf,0x98,0xa7,0x75,0xc6,0xf6,0x4b,0x5f,0x91,0x6e,0x71,0x3a,0x5c,0x5f,0x57,0x63,0x34,0x87,0xf8,0x20,0x6a,0xa1,0xbf,0xf8,0xca,0x8e,0xf9,0xa9,0x10,0x8b,0xab,0x0b,0xc2,0xcc,0x71,0x89,0x7c,0xef,0x70,0x3a,0xb0,0xf6,0x90,0xcc,0x6b,0x2c,0xcc,0x8b,0x2a,0x21,0x78,0x23,0xa0,0x71
db	0x8c,0x7b,0xc1,0x0f,0x27,0x72,0x40,0xe4,0x9e,0x35,0xf3,0x0a,0xc0,0x7e,0x7f,0xe5,0x9b,0xdb,0x93,0x49,0x08,0xc3,0x6b,0xb7,0xea,0xea,0xd4,0x5a,0x96,0x97,0x3c,0xdf,0xc7,0x02,0x39,0x9f,0xa3,0xca,0xdd,0x62,0xf3,0x68,0xc7,0xae,0x37,0xc1,0x35,0x73,0xb2,0x5d,0x99,0xe4,0xae,0x27,0x55,0x5e,0x6a,0xae,0x6f,0x1a,0x95,0x51,0xb1,0x3b
db	0xd7,0xb4,0x4d,0x3d,0x88,0x54,0x01,0xbe,0x2c,0x12,0x17,0x29,0x4f,0xf3,0xed,0x5a,0x1f,0xa9,0xf0,0x67,0xbd,0x7c,0xad,0xe5,0x58,0x52,0xd4,0xd1,0xfe,0x1e,0x1b,0xd6,0xce,0x7c,0xc3,0xa2,0xa9,0x72,0x9b,0x6a,0xe5,0xf9,0x39,0x22,0xaa,0x7f,0x2e,0xa2,0x53,0x75,0xf0,0x99,0x2e,0x36,0x86,0x83,0x10,0x63,0xd7,0xac,0xa3,0x52,0xa6,0x23
db	0x80,0x46,0xe4,0xa9,0x07,0x79,0xe1,0x61,0x75,0xbf,0x08,0x31,0x6c,0xdd,0xe1,0x30,0xd0,0x35,0xc2,0xbd,0x30,0xb8,0x85,0xf3,0xd2,0x2c,0x90,0x7a,0xf0,0xd3,0x80,0xe5,0xf1,0xc2,0x58,0x3d,0xf7,0x3c,0xbc,0xff,0x03,0x4d,0xf7,0xad,0x2f,0xa6,0xfe,0x73,0xde,0xa8,0x60,0xd7,0x89,0x4a,0xcf,0x3d,0xf3,0xab,0x62,0xfa,0x9d,0x46,0xad,0xd0
db	0x97,0x6f,0x89,0x84,0x16,0x9b,0x84,0xb2,0x6c,0x63,0x6d,0x29,0xee,0x8e,0x97,0x3c,0x48,0x19,0x92,0x62,0xdc,0x1d,0x35,0x9d,0xec,0x01,0x00,0x64,0xbf,0x4d,0x8b,0xa3,0x13,0x48,0x9f,0xb4,0x01,0x0d,0xb1,0xc4,0xf2,0xf2,0x6a,0x84,0x1a,0x07,0x3c,0x46,0xa6,0xb5,0x41,0x9a,0x32,0x7e,0xc3,0x4f,0x87,0x95,0x71,0x7a,0xbf,0x74,0xf8,0x0b
db	0xfb,0xa5,0xde,0xa8,0x35,0xf1,0xcb,0x04,0x8d,0x8b,0xd3,0xb0,0xc8,0x1d,0x6c,0xaf,0xb4,0x21,0x79,0x1c,0x34,0x71,0x2f,0xf5,0xc4,0xbe,0xad,0xbc,0xaf,0x2f,0x54,0x81,0xd9,0xf8,0xff,0x59,0xf9,0x4e,0x62,0x9f,0x7d,0x7c,0xe9,0xdc,0x67,0xae,0xa3,0x32,0x4b,0xf7,0x4e,0x53,0x4c,0x55,0x7d,0xc5,0xdd,0xd4,0x5d,0x93,0xb8,0x98,0x3e,0xd3
db	0x15,0x65,0x52,0x78,0x5a,0xd2,0x21,0x84,0x5d,0x28,0xaf,0x44,0x7d,0x18,0xf8,0xdd,0x5c,0xc3,0x6e,0xc8,0x05,0x05,0x30,0xd0,0x82,0xf8,0x00,0x0f,0x3d,0x5c,0x62,0x7e,0xa6,0xd5,0x7b,0x9f,0xb1,0x44,0xb7,0x0d,0x22,0x81,0xe1,0x4a,0x2b,0x79,0x7e,0x39,0x4d,0x8a,0x9a,0xfd,0x94,0x0c,0xf7,0x23,0x10,0x99,0xd2,0xd2,0x8b,0x98,0xe5,0x9d
db	0xb0,0xbf,0xcf,0x06,0x08,0x80,0x32,0x69,0xfd,0x81,0x5f,0xb3,0x66,0x11,0x63,0xeb,0x30,0x1d,0xcd,0x5b,0x5b,0xec,0x0c,0xca,0x30,0x37,0xa0,0x82,0x79,0x75,0x87,0xc1,0xfa,0x5b,0x38,0x4b,0xe3,0xea,0x46,0x49,0x36,0x92,0x92,0xf0,0xc9,0x15,0xa5,0xec,0x9e,0x21,0xb6,0x9f,0xb4,0x6d,0xf6,0xef,0x5c,0x2f,0x7d,0xa4,0xb3,0x25,0xfb,0x13
db	0x40,0xe1,0xa0,0x20,0x4a,0x3a,0xe2,0x3e,0xf5,0xe0,0x68,0x61,0x11,0x9a,0xfb,0x1e,0xe8,0x1b,0xe0,0x17,0x9c,0x8a,0xe5,0x53,0x74,0xdd,0xec,0xc6,0x03,0xc6,0xd0,0x9b,0xc2,0x0b,0x77,0x4c,0x36,0x2b,0xac,0x4e,0x4d,0xd2,0x26,0x70,0x39,0x96,0xb4,0x11,0x1a,0x5b,0xcc,0x3f,0xb9,0xcf,0x0d,0x04,0x55,0x05,0x00,0x66,0x8f,0xa9,0xec,0x31
db	0xe5,0x47,0x4c,0x9b,0xb7,0x6e,0xa5,0xe7,0x9e,0x70,0xf4,0x02,0x2a,0x3c,0xa2,0x03,0x04,0x30,0x9e,0x3f,0x7c,0xaa,0x0a,0x8f,0x55,0x61,0xca,0x50,0x35,0xe6,0xa4,0x24,0x61,0x26,0x31,0x9e,0x9e,0x77,0x0d,0x15,0x3a,0xc0,0x88,0x32,0xb5,0xbb,0x3d,0x3e,0x59,0x25,0x52,0x81,0x2e,0x4b,0xc6,0x5d,0x9f,0x87,0x0f,0x1f,0x5e,0xec,0xdd,0xbe
db	0x32,0x6c,0x71,0xef,0xd2,0x9c,0xfd,0x70,0xc8,0xf6,0x1f,0xb9,0xc9,0xdd,0x4d,0x39,0x61,0x92,0xbd,0x0c,0x48,0x63,0x4b,0xd2,0x2b,0x8c,0x4b,0x35,0xb1,0x8e,0x04,0x44,0x3c,0xe1,0xde,0xfd,0x6e,0xde,0xeb,0x94,0x51,0xea,0x36,0x7b,0xc6,0x87,0x15,0x34,0x68,0xa0,0xb8,0x94,0xb6,0x56,0x33,0xf4,0xab,0x84,0xed,0x1c,0x36,0x91,0xa7,0x1b
db	0x03,0xca,0x48,0x64,0x16,0x5b,0x4b,0x69,0x47,0xae,0xd7,0xc9,0xcf,0x74,0xd2,0xbd,0x60,0x04,0x7c,0x66,0xe9,0x12,0x92,0x40,0x78,0x23,0x0b,0x5b,0xa0,0xda,0xf7,0xe4,0x9a,0xad,0x9c,0x31,0xe7,0xaa,0xad,0x5a,0xc3,0x45,0x00,0x6c,0xd3,0x4d,0x93,0xdf,0xb6,0x68,0x11,0x3f,0x2a,0xbc,0x9a,0x8d,0xeb,0x0f,0xb5,0xa9,0x8e,0xa5,0x2c,0x99
db	0x94,0x8d,0x21,0xa9,0x41,0x6b,0x11,0x2e,0x02,0x21,0xd8,0xc1,0xbc,0xf0,0x2a,0x87,0xae,0x35,0xa9,0x78,0x5c,0x43,0xb8,0xb7,0x63,0x2d,0x09,0x31,0xae,0x6f,0xfc,0x39,0x7b,0x18,0xc3,0xce,0xe3,0xfa,0x51,0x70,0xc7,0x6b,0x5e,0xc3,0xce,0xc8,0xa2,0x3a,0x66,0x9e,0xfe,0x45,0xb4,0xa2,0xaf,0x81,0x03,0x74,0xbf,0x0c,0x65,0x4c,0x30,0x27
db	0xd5,0x34,0x29,0x2d,0x83,0xa8,0xb9,0x1d,0xf8,0x12,0x09,0x51,0xdd,0x0e,0x66,0x95,0xf3,0x94,0xaa,0x83,0x3a,0x6f,0x8a,0x7c,0x3a,0x29,0x82,0xbb,0x80,0xa1,0x37,0x8c,0x79,0xf4,0x4a,0xa8,0xe4,0x17,0x72,0x77,0xee,0xc4,0xaa,0x25,0xd3,0x8f,0x2e,0xaf,0xb9,0xb2,0x3c,0xa6,0xd5,0x72,0x97,0x07,0x23,0x38,0xae,0x9e,0x22,0x08,0x85,0x70
db	0xfa,0xff,0x38,0xe6,0x96,0x9f,0x2c,0x11,0x14,0x16,0x9a,0xfa,0x5a,0x7b,0x05,0x31,0x3e,0x20,0xbf,0x4d,0x87,0xaa,0xba,0x94,0xcd,0xdb,0xeb,0xec,0x29,0x58,0x4e,0x43,0x12,0xe8,0xf9,0x01,0x50,0xc8,0x51,0x7a,0x61,0x12,0xe9,0xed,0xc2,0xd6,0x2e,0xd3,0xed,0x54,0x72,0xf7,0x1b,0x0c,0x8c,0xb4,0x65,0xea,0x22,0x31,0x22,0xeb,0xcd,0x53
db	0x66,0xf1,0xa5,0x34,0xe9,0x81,0x74,0xcb,0xb5,0x6b,0x45,0x71,0x69,0x6d,0x84,0xe8,0xc6,0x86,0xc9,0xdd,0x0c,0xa4,0x30,0x12,0x08,0x42,0x10,0x6b,0xcd,0x65,0x6c,0xfd,0x9c,0xde,0x77,0x3c,0x32,0x09,0xef,0x99,0x27,0x0e,0x4a,0x72,0x03,0x8d,0xb5,0x68,0xa0,0x67,0xf7,0xc2,0xae,0xb8,0xce,0x41,0x70,0x4e,0xdd,0x13,0xcb,0x3f,0x05,0x4e
db	0xf4,0xbc,0x88,0x98,0x2f,0x42,0x4e,0x5f,0x3e,0xcb,0x2c,0xd3,0x2f,0xb8,0x92,0xbb,0xd8,0x95,0xc8,0xaf,0xa9,0x44,0x8b,0xf0,0x2f,0x81,0xd4,0xe7,0x06,0x19,0xf7,0xa7,0x0a,0x73,0x3e,0x30,0xd9,0x00,0xe4,0x2d,0x76,0xb1,0x0d,0xfa,0x12,0x1f,0xbe,0x59,0x4f,0xf7,0xc8,0x5b,0xab,0xd7,0x16,0x3d,0x7e,0x97,0x9e,0xec,0xf8,0xcb,0x31,0x2e
db	0xe0,0x41,0x0b,0x00,0xa6,0x6d,0xe9,0x5e,0xd5,0x4a,0xc5,0xbf,0x1c,0xcc,0xa5,0x71,0x94,0x29,0x3d,0x17,0x43,0x27,0x63,0xc4,0xc7,0x8f,0x1b,0xb7,0x5f,0xcf,0xdf,0x8e,0x6a,0x69,0x87,0xc1,0x29,0xab,0x7b,0x8d,0xdf,0x07,0x95,0x50,0xa3,0x1c,0x8e,0xdc,0x7f,0x8a,0x21,0x37,0x1e,0x26,0xa7,0x67,0x28,0xb2,0xc8,0x23,0x5a,0x1d,0x94,0x46
db	0x1b,0x3e,0x72,0x87,0x73,0x08,0xe2,0x3b,0x46,0x51,0xbe,0x5b,0xa9,0x72,0xb9,0xf8,0x45,0x6d,0x0c,0x89,0x80,0x0d,0x7a,0xfb,0x4c,0x3f,0x7f,0x3d,0x29,0xff,0xef,0xb2,0xec,0x23,0xc2,0x26,0xcf,0x8c,0x2e,0x28,0xbf,0xc5,0x68,0x47,0xd9,0x49,0x95,0xf1,0x67,0x7e,0x3a,0x48,0xe2,0x43,0x5c,0xc8,0x95,0x5b,0xb2,0xf3,0x22,0xc9,0x73,0x91
db	0xb5,0x78,0x96,0x1b,0x9a,0x75,0x5f,0xb2,0x6b,0x8c,0x66,0x8c,0x8e,0xc1,0xe1,0xde,0xd6,0x64,0x31,0xe1,0x7b,0x12,0xd2,0x85,0x8f,0x52,0x68,0xec,0x80,0x26,0x3d,0xcc,0x9b,0xe3,0x57,0xbe,0x19,0x42,0xb9,0xdd,0x7d,0x2b,0x5b,0x6d,0x1b,0x9e,0x96,0xd7,0x75,0x83,0x82,0x3c,0x3e,0x5f,0xf8,0xa9,0x36,0xbe,0x14,0xc7,0xce,0x9d,0x05,0x7e
db	0xd7,0x38,0x37,0x35,0xc9,0x37,0x8b,0x9f,0xc6,0x2d,0xff,0x00,0x41,0xff,0x1b,0x09,0xea,0xd2,0xb0,0x04,0x48,0xff,0xfc,0xb5,0x67,0x54,0x39,0x3d,0x23,0x68,0x0b,0x7d,0x97,0xf3,0x65,0x20,0xa2,0xf8,0x33,0x96,0xd1,0xf4,0xc7,0xba,0x6f,0x00,0x95,0x36,0xf6,0x33,0xd1,0x8d,0xde,0xee,0x1e,0xfa,0x60,0x8e,0x5e,0x4c,0x70,0xbb,0x53,0x79
db	0xc9,0x9a,0xdf,0x3c,0x53,0xe4,0x35,0x87,0xc3,0xe6,0x8e,0x0e,0x1a,0xd0,0xf8,0x57,0x2b,0x33,0x51,0x4d,0x7d,0x43,0x17,0x3e,0x6f,0x0e,0xca,0x86,0xb2,0xc6,0x09,0xf3,0x2f,0xc1,0x5f,0x0e,0x9a,0x5e,0x7d,0x9d,0xf7,0xff,0x09,0x46,0xe5,0x30,0x91,0x61,0x93,0xb5,0x2f,0xc5,0x7f,0x09,0x0b,0x55,0x94,0x17,0x25,0x19,0x9b,0xa9,0x0e,0x68
db	0x71,0x18,0x1b,0x4b,0x1b,0xa3,0x75,0x90,0x56,0x96,0x5e,0x33,0x71,0xf2,0x06,0x69,0x07,0x04,0xcb,0x8c,0x79,0x9b,0xa5,0x17,0xd8,0xd8,0x77,0xc7,0xca,0x95,0x58,0x12,0xec,0xdd,0x41,0xc9,0x12,0x16,0x9a,0xc4,0xf0,0x27,0x7a,0x8e,0xeb,0x19,0x79,0x27,0x7b,0x2e,0x55,0x96,0x57,0x19,0xbe,0x55,0x8c,0x7f,0x97,0x90,0x80,0x40,0x5d,0x5a
db	0xf6,0x07,0xd6,0xb4,0xc5,0xe8,0x0e,0x54,0xde,0x78,0x23,0xca,0x39,0x90,0x42,0xb6,0x8b,0x14,0x22,0x06,0x71,0x77,0xd5,0xf7,0x8d,0x05,0x9d,0xbf,0xfe,0x38,0x91,0xba,0x79,0x85,0x30,0x47,0x25,0xf0,0xa2,0x72,0x55,0x94,0x2a,0x8a,0xc8,0x28,0xc8,0xa9,0x23,0xab,0xf0,0x4e,0x49,0x2f,0x58,0x53,0x35,0xd1,0xb6,0x16,0x81,0xc2,0x25,0x18
db	0xd9,0x71,0x91,0xc4,0x81,0x3e,0xf4,0xd7,0x87,0x9e,0x57,0x78,0xf7,0x7d,0x4b,0xb2,0xfd,0x91,0x9f,0xa8,0x0e,0x77,0xb3,0xc7,0xe5,0x6a,0x95,0x17,0xc3,0xf4,0xcb,0x7f,0x96,0xc1,0xa8,0xee,0x6a,0x0f,0x1f,0x5d,0x20,0x28,0x93,0xe5,0xf3,0x13,0x46,0x53,0x47,0x9f,0x98,0xc6,0xf5,0x29,0x69,0xb9,0x83,0x36,0x03,0xa1,0x9a,0xb4,0xa9,0x4e
db	0xd6,0xda,0x25,0xe2,0x5b,0xbb,0x95,0xdf,0x0f,0x37,0x0b,0x02,0x51,0x03,0xd1,0x0e,0x84,0xef,0xdd,0x85,0xdd,0xae,0x10,0x32,0x65,0x03,0x65,0xf0,0x8e,0x0c,0x69,0x90,0x35,0x26,0x36,0xe8,0x05,0x46,0xe6,0xce,0x52,0x4d,0xb5,0x93,0x9f,0xe3,0xe5,0xb0,0x43,0x57,0x32,0x5d,0xca,0xd4,0xc9,0x89,0x2e,0x5b,0x03,0x8a,0x82,0x78,0x21,0x6b
db	0x41,0xa9,0x0a,0x9f,0xe0,0x50,0xec,0x72,0x01,0x67,0xe7,0x1c,0x92,0xe3,0xe4,0x83,0x4d,0x4b,0xcf,0x01,0x37,0x2f,0x34,0x86,0xcf,0x36,0xf7,0x3a,0x57,0xa3,0x89,0x73,0x0f,0x9c,0x06,0x82,0x75,0x7a,0x4b,0xd8,0x44,0x40,0xf2,0xc5,0xc4,0x22,0xa6,0x99,0x1b,0x73,0x2f,0xad,0x09,0xe9,0x84,0x6f,0xc3,0xca,0x72,0x3a,0x8a,0x55,0x55,0x0a
db	0xcd,0x33,0x51,0xef,0x5b,0x36,0x77,0x6c,0xb4,0x4a,0xae,0xdd,0xbd,0xec,0x65,0x99,0x43,0xd6,0x8a,0x16,0xba,0x89,0x4d,0x0c,0x11,0xb4,0x0d,0x5d,0x3e,0x76,0xcb,0x48,0x9d,0x31,0x40,0x71,0xe2,0xe4,0xa9,0xd9,0x6e,0x3c,0x3d,0xd1,0x6e,0xaf,0xb9,0x28,0x71,0x5a,0x07,0x6f,0xab,0xdb,0xf8,0x4f,0x11,0xbc,0xe0,0x14,0x01,0x43,0x4d,0xe2
db	0xad,0x5d,0x2a,0xb2,0x58,0x66,0x05,0x50,0x66,0xf6,0x2f,0x66,0x11,0xd1,0xd7,0x05,0x85,0xb0,0x7f,0xa8,0x89,0xbd,0x41,0xda,0x35,0x1e,0xbb,0xff,0x70,0x1a,0xe8,0x65,0x96,0xe9,0x50,0x18,0x7f,0x4c,0xb2,0xe2,0x95,0x26,0xf6,0x37,0x09,0x8c,0x8d,0x7b,0x02,0xb0,0x7f,0x32,0xb5,0x70,0x22,0xd6,0x83,0x0b,0x85,0x25,0x00,0xc5,0x55,0x3f
db	0xfa,0x7a,0xc9,0xaf,0x87,0xc1,0x1c,0x11,0x96,0x71,0x18,0xd8,0xdb,0xab,0x86,0x57,0x0a,0x16,0x23,0x32,0x40,0xd3,0xaf,0x17,0x55,0xe3,0xe7,0x01,0x65,0x1f,0x87,0xda,0xb5,0x46,0x67,0x18,0x34,0xcc,0x28,0x77,0xc3,0x12,0x62,0x6c,0x8b,0x8a,0x11,0x7a,0x5a,0xd1,0xdf,0xb3,0x13,0x6b,0x29,0xce,0xf8,0x03,0xba,0xad,0x7c,0x14,0x60,0x42
db	0x17,0xf6,0x7b,0x0c,0xb7,0x5f,0xd6,0xc1,0xb5,0xa5,0x2b,0xb1,0x9f,0x6c,0x65,0x29,0xe5,0xf4,0x84,0x85,0x11,0x82,0xf1,0x4c,0xcd,0xff,0x99,0x29,0x53,0x7b,0x43,0x04,0x60,0xc4,0x6c,0x01,0x5c,0xcb,0x33,0x4f,0xdb,0xc4,0xad,0x8c,0xea,0xff,0xd6,0xcd,0x8e,0x85,0x6e,0x54,0xd5,0x18,0x63,0x84,0x78,0xea,0xff,0x08,0x95,0xdc,0x2a,0x07
db	0xac,0xea,0x44,0x79,0x52,0x07,0xf3,0xf1,0x03,0x7f,0x71,0x53,0xd8,0x85,0xdb,0x70,0xde,0x5e,0xd5,0x9a,0x18,0x9f,0xcc,0x3f,0xc0,0xc0,0x49,0x82,0x70,0x09,0xce,0x29,0x04,0x0a,0x19,0x81,0xd9,0x81,0x22,0x71,0x48,0x8e,0x79,0x08,0x1c,0xb4,0xc8,0x7e,0x60,0x43,0x4a,0xe3,0xd5,0x6b,0x09,0x5c,0x01,0x6e,0x20,0x9e,0xd2,0xaf,0x80,0xb7
db	0xa2,0x0a,0x5b,0x26,0x08,0x32,0x73,0xbc,0xc6,0xfd,0x06,0xaa,0x2e,0x55,0xa0,0x5b,0xa9,0x3c,0x85,0xb2,0x04,0xdc,0x9a,0x94,0x02,0x93,0x96,0x6b,0x3e,0xc3,0x5e,0x37,0x9b,0x6f,0xef,0xb9,0x65,0x52,0x42,0x1c,0xa7,0x84,0x09,0x0c,0x49,0x3a,0x95,0x06,0x94,0xd7,0xc7,0x40,0xf5,0xf1,0x69,0x41,0xfb,0xf8,0x57,0xb5,0x1e,0x0c,0xf3,0xd9
db	0xb1,0x2e,0x58,0x33,0xbe,0xb1,0x3d,0x61,0xc6,0xca,0x01,0xe5,0xda,0x60,0x8f,0x87,0xf7,0x9a,0xb5,0x92,0xb4,0x8c,0x2a,0xaf,0xd4,0x1e,0x9c,0x97,0x39,0x83,0x99,0x4a,0x07,0x54,0x75,0x7d,0xde,0x72,0x06,0xc1,0x8f,0xb4,0xde,0x12,0x43,0xf2,0x62,0xae,0xe7,0xec,0xfe,0xb2,0xe5,0x63,0x35,0xb7,0xee,0xaa,0xf0,0x09,0xb8,0x61,0xf2,0x42
db	0x28,0x87,0xd7,0x47,0xa8,0xfc,0x51,0x85,0x6f,0xa2,0xb1,0xa6,0x82,0xd6,0x0e,0x1b,0x3f,0xea,0xa1,0xe1,0x91,0xc9,0xd2,0x5b,0x3e,0xff,0x18,0x39,0x14,0xe0,0x44,0xda,0x3d,0xd8,0xca,0xdb,0xd9,0xbf,0x3f,0xa4,0xdb,0x99,0x2e,0x31,0x32,0x7c,0xf4,0x61,0x2f,0xa1,0xf9,0xa9,0xbe,0x26,0x94,0xea,0xb4,0xe3,0x25,0x8d,0x93,0x3b,0xa1,0x7e
db	0x1e,0x99,0x87,0x6c,0xaf,0x14,0x54,0xd0,0xc0,0x37,0x39,0x76,0x3c,0x07,0x2e,0xce,0x98,0x25,0x81,0xe4,0x01,0x0c,0x07,0x79,0x4e,0xcd,0x82,0x44,0x83,0x04,0x07,0xa6,0x52,0xb7,0x96,0x7c,0x43,0x12,0xe1,0xc5,0x12,0x18,0x25,0x47,0xe4,0x19,0x6d,0x26,0x1e,0x55,0x66,0xca,0x28,0x4c,0xfa,0xd2,0xd9,0xcc,0x7e,0xad,0x9f,0x2a,0x2f,0xc6
db	0x6c,0x77,0xaa,0x0f,0x5b,0xeb,0x15,0x97,0x62,0x52,0x3c,0x6f,0x4b,0xf3,0xcc,0x80,0x7b,0x1f,0x1d,0x58,0xf8,0xfe,0xc1,0x8c,0x3b,0xe3,0xd7,0x05,0xc3,0xd6,0xa9,0xda,0xcf,0x85,0x1c,0x68,0xd6,0x6d,0x2b,0x06,0x30,0x5f,0x58,0x39,0xea,0xfa,0x99,0xaa,0x04,0x10,0x05,0xaf,0xb0,0xf7,0x32,0x60,0x8d,0xe4,0xd1,0x40,0x32,0xd6,0xa3,0xf2
db	0xba,0x5a,0x79,0x58,0x92,0x75,0xf0,0x3a,0xce,0xb2,0xee,0x66,0x3e,0xe3,0xbe,0x4d,0x53,0x9d,0xbb,0xdb,0x45,0xf0,0x09,0xeb,0xd5,0x83,0x39,0x20,0x06,0xa9,0x44,0x35,0xeb,0x6d,0x9b,0xd9,0xa4,0xda,0x4b,0x9d,0xde,0x3d,0x26,0xa2,0x2d,0xcf,0x8e,0x3e,0xbc,0xb4,0x8c,0x3a,0xbf,0x56,0x7c,0x48,0x50,0xb5,0xc5,0xbe,0x84,0x5e,0x63,0x82
db	0x5f,0x87,0x77,0x4a,0xa7,0xf6,0x66,0x07,0x42,0x6a,0xb0,0xcf,0x19,0xaf,0x6c,0x16,0x85,0x78,0x88,0x3b,0xa5,0xbc,0x42,0xd2,0x4c,0xdf,0x51,0x3b,0xc4,0x0e,0xf5,0xc5,0x70,0x57,0x40,0xf6,0xed,0xd2,0x37,0x3e,0x14,0x0c,0x31,0xda,0x94,0x87,0x6b,0xd9,0x8c,0x15,0x41,0xa9,0xc0,0x2a,0x61,0xd3,0x52,0xe0,0xb6,0x0a,0x83,0x6b,0x75,0x1b
db	0x1e,0xd1,0x7f,0x26,0x19,0x34,0x9b,0x70,0xc9,0xba,0xdc,0xa2,0x03,0x6d,0xc7,0xac,0xbd,0x2c,0x63,0x8a,0x7b,0xb1,0x62,0x51,0xc1,0x1d,0x54,0x0d,0x34,0x0e,0xfb,0xa6,0xb8,0x9d,0x79,0x4f,0xc3,0xaa,0x8d,0xa0,0xcc,0x80,0x96,0x86,0x37,0xd6,0x80,0x9c,0x3d,0x91,0xd0,0xe7,0xe2,0xb4,0x00,0xba,0x86,0xe9,0xeb,0x86,0xea,0x84,0x78,0x81
db	0x20,0x29,0x28,0x02,0x4d,0xd8,0x1b,0x5e,0x4f,0x41,0xfc,0x13,0x3e,0x4c,0x7f,0x64,0x55,0x35,0x41,0x0d,0x74,0xc5,0x6a,0x7c,0x37,0x82,0x41,0xbd,0x67,0x39,0xd9,0x83,0xfa,0x7f,0x8c,0xe1,0x9f,0x23,0x0d,0xe4,0x1d,0x40,0xe6,0x6e,0x94,0x5d,0xec,0x77,0xf7,0x5e,0xb4,0xa1,0x03,0xfb,0xa0,0x0e,0xba,0xf8,0x28,0x50,0x3c,0x38,0x47,0xf7
db	0xed,0x2d,0xe5,0x0b,0xa8,0x7a,0xbd,0xbf,0x7e,0x38,0xc0,0x60,0xe7,0x7e,0xb1,0x03,0xef,0x4a,0x8c,0xc7,0x98,0xf1,0x94,0xf6,0xa0,0x50,0xb2,0x0b,0x7c,0x66,0x0a,0x62,0x10,0x24,0xb0,0xa1,0x69,0x02,0x33,0x79,0xbf,0xd0,0xb5,0xcb,0x17,0x20,0x55,0x02,0x70,0x44,0x5b,0xac,0x20,0x35,0xea,0x05,0x2d,0x68,0x51,0xe7,0x5f,0x1b,0xcd,0x4c
db	0x33,0x4d,0x04,0x21,0xfd,0x06,0x67,0x82,0x60,0x98,0x1f,0x79,0xf4,0x28,0xe0,0xa8,0x18,0xeb,0xf5,0x86,0x58,0xe6,0x9f,0xb5,0x29,0x0f,0xe8,0x37,0xeb,0x09,0xf4,0xc6,0x08,0xf2,0xde,0x4d,0x96,0x48,0x62,0x36,0x63,0x10,0x3f,0x63,0xeb,0x44,0x84,0xc8,0xf5,0x74,0x19,0x03,0x50,0xf7,0x7c,0xd2,0x06,0x20,0x6e,0x9b,0xa2,0x37,0xb0,0x68
db	0x78,0x31,0xb6,0x05,0xfa,0xc9,0xcd,0x1d,0x4c,0xbd,0x33,0xb7,0xf3,0x93,0x38,0x7d,0x5f,0x00,0x85,0x5b,0x10,0x7f,0xc4,0x3f,0x3e,0xfe,0x62,0xca,0x51,0x83,0x95,0xcf,0x00,0x65,0x83,0x0e,0xd3,0x78,0xd0,0x51,0xcb,0x70,0x34,0x42,0xc6,0x3a,0x04,0xb9,0x10,0x92,0xe0,0x09,0x06,0xb0,0x66,0x9b,0x37,0x02,0x8d,0x0d,0x3e,0x2f,0xc5,0x17
db	0x6a,0x87,0x7d,0x48,0xa4,0xcc,0x55,0x20,0x7b,0x77,0x07,0xcf,0x44,0x2f,0x88,0x8a,0xcc,0xf2,0x5d,0xa6,0x3e,0x5f,0xda,0xe2,0xde,0xd2,0x7f,0x7f,0xb7,0x90,0x53,0x64,0x6b,0x79,0x42,0x52,0x69,0xc6,0xd6,0xaa,0x9f,0xf9,0x19,0xbe,0x65,0x10,0x99,0x49,0xaf,0x36,0x49,0x1b,0x8a,0x3d,0x7f,0xdb,0xa2,0x1a,0xb5,0xd6,0x34,0x51,0xc8,0xc8
db	0x06,0xca,0xf6,0xb8,0x76,0xa8,0x9d,0x43,0xae,0xf0,0x51,0xe5,0x9a,0x42,0xa2,0x83,0xed,0x20,0x8d,0xe8,0x1c,0xca,0x15,0x4e,0x37,0x3f,0xd8,0x06,0xa0,0xe1,0xf8,0x05,0xfd,0x42,0xf3,0x7a,0x96,0x44,0x36,0x02,0xca,0x11,0x2a,0xc3,0x24,0x58,0xdd,0x85,0x55,0xb2,0xe5,0x1d,0x92,0xc2,0x2d,0x5f,0x7c,0xb5,0x02,0x37,0x7c,0x07,0x35,0x25
db	0x2b,0x33,0x80,0xe2,0xd4,0xfd,0xc7,0xa7,0x19,0x7e,0xba,0x36,0xaf,0xa0,0x4e,0xab,0x8b,0x28,0x4f,0x3b,0x92,0x72,0x42,0x49,0xaa,0x3b,0x08,0x0f,0x1e,0xff,0x2d,0xbf,0x9c,0x48,0x16,0x72,0xbe,0x28,0x05,0x8b,0x3a,0x20,0x6b,0x38,0x43,0xa2,0x35,0xea,0xf7,0x4e,0x50,0xa0,0x43,0x40,0x5c,0xbf,0xe5,0x75,0x13,0x4c,0x36,0x61,0xa1,0x5d
db	0x46,0xd7,0x7a,0x94,0x06,0x2f,0x63,0x32,0x9c,0x6e,0x54,0x18,0x31,0x79,0xf2,0x83,0xcf,0xb4,0x47,0x40,0xe5,0x9a,0xd6,0x99,0x12,0xb3,0x61,0x3d,0x0f,0x5e,0xc8,0x95,0xa3,0x5f,0xc3,0xd5,0x6b,0x6e,0xa0,0xf2,0x2f,0xeb,0x66,0xd0,0x68,0x67,0x10,0x85,0x64,0x27,0xd8,0xb8,0x68,0x00,0x36,0xa5,0xab,0x3e,0xe1,0x43,0x65,0x81,0x2d,0xb9
db	0x0f,0x87,0xfe,0xa1,0x52,0xe9,0x8d,0x82,0x3a,0xd1,0x10,0x52,0x34,0x48,0x7c,0x1c,0xc6,0xd0,0xfe,0xa0,0x1a,0x92,0x07,0x88,0x57,0x9e,0xd7,0x5e,0x9f,0xc8,0xb0,0x93,0x73,0x03,0x28,0x36,0x8c,0x25,0x8c,0x0f,0x4e,0x0f,0x5b,0x26,0x58,0xed,0x5c,0x33,0x75,0x20,0x08,0x11,0x47,0xe1,0x47,0x85,0x47,0xeb,0x54,0xbf,0x58,0xe3,0xd4,0x5b
db	0xf9,0xc6,0x5e,0x42,0x58,0xe6,0xaf,0x79,0x66,0x3c,0xa5,0xa3,0x30,0x33,0xe3,0xbe,0x21,0x4b,0x42,0x98,0x6e,0x44,0xd7,0x68,0xc0,0xff,0xbe,0x7f,0xc5,0xb3,0x4f,0x4a,0x93,0xb0,0x11,0x88,0xcf,0x36,0xb2,0x03,0xbe,0x30,0x52,0x71,0x20,0x0d,0x16,0xc5,0xbb,0xf5,0x92,0x12,0x67,0x6a,0x35,0x66,0x00,0x09,0xd7,0xc6,0x67,0xb0,0x6a,0x04
db	0x19,0x3e,0xbf,0xe2,0x82,0x74,0x78,0x2f,0x77,0x44,0xdc,0xad,0x0f,0x66,0x2a,0x23,0x62,0x2c,0x5a,0x4e,0x3a,0x82,0x2a,0x75,0x16,0x0d,0x74,0x64,0x35,0x53,0xc5,0xf6,0xda,0x36,0x44,0xba,0xe2,0xfa,0x1e,0xc2,0xcf,0x29,0x01,0x36,0x66,0xc3,0xca,0x40,0xf7,0xc4,0xba,0x67,0xac,0xf6,0x17,0xcc,0xa3,0x96,0x2d,0x08,0x5f,0x0a,0xea,0x5e
db	0x97,0xdc,0xc8,0xf9,0x59,0x24,0x6e,0xc5,0x0b,0x02,0xb9,0x1a,0xde,0xac,0x60,0x1d,0xaf,0x9f,0x5a,0x6f,0xe1,0xa6,0xdf,0x75,0xc5,0x9b,0xb7,0xde,0xa4,0xf7,0xf6,0xa4,0xdc,0xb6,0x96,0x08,0xde,0x2a,0x0e,0xb3,0x9d,0xf5,0x75,0x7d,0x7e,0x96,0x91,0x79,0xd4,0xa7,0x30,0x97,0x3a,0xbd,0x7c,0xe0,0xc5,0x87,0x24,0xb0,0x65,0xb7,0x58,0x00
db	0xd9,0x0e,0x97,0xa6,0xa4,0x6a,0xe8,0x0a,0xac,0xac,0x9f,0x3a,0xe3,0x2a,0x9a,0x43,0x41,0x92,0x6e,0x0e,0xc4,0x63,0xc3,0x18,0xb6,0xe1,0xef,0x3d,0xe8,0x0b,0xb0,0x9f,0x2e,0x19,0xa0,0x98,0x98,0x34,0xf8,0x86,0x6d,0xc5,0x8c,0x41,0x26,0xb7,0xf2,0x1d,0xd4,0x72,0x39,0xeb,0x79,0x06,0xaf,0x53,0xaa,0x34,0x80,0x53,0xf8,0x1b,0xf4,0x53
db	0x19,0xfa,0x16,0x8b,0x39,0xea,0x63,0x7f,0x38,0xc4,0x66,0x1d,0xd1,0x90,0xe4,0x2f,0x20,0x43,0x0d,0x5f,0x98,0xcc,0xae,0xef,0x86,0xc8,0xe5,0xf6,0xd2,0xa5,0x49,0xd0,0x3f,0xb5,0x7e,0x42,0xb5,0x6e,0x5e,0x13,0xa5,0xb4,0x71,0x2c,0x5d,0x57,0x24,0x06,0xd2,0x29,0x7c,0x4c,0x90,0xb6,0xea,0xdb,0x62,0xa4,0x2c,0x6c,0x38,0x57,0x97,0xbd
db	0xfd,0x41,0x6e,0x26,0xc1,0xe1,0x6b,0xbb,0xf0,0xe7,0x71,0xf1,0xcf,0x6a,0x7f,0xfa,0xe7,0xfb,0x17,0xe7,0x81,0x19,0x9a,0xf2,0xf6,0x86,0x22,0x4f,0x62,0x59,0xd6,0xc2,0x33,0xbd,0x11,0xe7,0x07,0x3a,0xfe,0x74,0x0d,0xf8,0xd9,0xdb,0xbd,0x05,0xf4,0xf4,0xb1,0x41,0xc9,0xb3,0xf8,0x6a,0x7b,0x98,0x08,0x6c,0xce,0x4c,0x28,0xbf,0x8c,0x77
db	0x68,0xdc,0xee,0xf7,0x11,0xde,0xfc,0x5a,0x58,0x4f,0xf4,0x74,0x9d,0x5b,0x78,0xc3,0x78,0xe5,0x5e,0x26,0x83,0x40,0x17,0x80,0x2a,0x02,0xa4,0xf1,0x0f,0xa0,0xc8,0x22,0xe6,0x09,0x3a,0x52,0x74,0xf0,0xb9,0xb9,0x60,0xaf,0x20,0xa6,0x7e,0x88,0xf4,0xc2,0x38,0xa2,0x21,0x73,0xa9,0x18,0x3f,0x7a,0x04,0x7b,0xc4,0xcd,0x68,0xd9,0x83,0xa4
db	0x8e,0x54,0x0d,0xbc,0xee,0x8b,0x39,0x93,0x66,0xa2,0xd6,0x76,0x4a,0xb2,0x33,0x4f,0x61,0x53,0xde,0x3b,0xff,0x47,0xcb,0x87,0xd9,0x21,0xd0,0x82,0x64,0x54,0xdf,0xf2,0x67,0x62,0x40,0x33,0xc7,0x0d,0xea,0x98,0xaa,0x95,0xfb,0xa9,0x0e,0x90,0xa5,0xd9,0x54,0x81,0x86,0xad,0x9e,0xa4,0x4d,0x36,0xe1,0x77,0xf2,0xe3,0x0a,0x54,0x1a,0x57
db	0x9d,0x62,0x5e,0x0e,0x00,0xc8,0xa6,0x1e,0xf3,0x43,0xe6,0x20,0x0d,0x6a,0x8e,0x90,0x1d,0x4d,0xac,0x2f,0x9f,0x1c,0xb7,0x30,0xec,0x5c,0x99,0x78,0x6f,0x3b,0xe7,0xe0,0x28,0xb9,0x97,0xc5,0x6a,0xf2,0x17,0xc2,0x11,0xac,0x1a,0xe2,0xca,0x57,0x49,0x64,0xc8,0xc7,0x66,0x43,0x8d,0xc8,0xa7,0x0e,0xfc,0xcf,0x05,0x2f,0xae,0x4b,0xfe,0xe4
db	0xbe,0x9c,0xe7,0xe6,0xa8,0x36,0x49,0x0d,0x9c,0x60,0x39,0x0c,0xfd,0x41,0x5b,0xc7,0xa4,0xa5,0x30,0x89,0xe5,0x10,0xf6,0xea,0xf8,0x2c,0xf2,0x3e,0xb1,0x96,0x81,0xa7,0x32,0x8b,0x39,0x14,0x15,0x36,0xfc,0x55,0x3c,0x22,0xcf,0xa3,0x98,0x90,0x68,0x13,0xd8,0x3f,0xf2,0x53,0x19,0x3e,0x9a,0x0c,0x1f,0xc6,0x29,0x43,0x46,0x23,0x58,0xea
db	0x49,0x49,0x15,0x46,0x8e,0x63,0x30,0x1f,0x3e,0x2a,0xa0,0x18,0xfd,0x28,0xc5,0x32,0x77,0x75,0xac,0x6e,0x5d,0x39,0xa9,0x44,0xce,0xfe,0x39,0xa6,0xec,0xde,0x69,0xde,0xfa,0xc8,0x40,0x44,0x34,0x29,0x15,0x19,0xa7,0xbe,0xd6,0x5b,0xfd,0x1f,0x7b,0xb9,0x88,0xf1,0x14,0xcf,0x42,0xc5,0xa7,0xa7,0x0e,0x6b,0x6e,0x86,0xb2,0x7c,0x23,0x8e
db	0xf6,0xae,0xde,0x3c,0xd7,0x26,0x5e,0xde,0x31,0x94,0xc1,0x19,0x65,0x55,0x03,0x73,0xba,0xdc,0x69,0x95,0x9c,0x9d,0x8e,0x59,0xd8,0x51,0x61,0x9f,0x8f,0xf4,0x29,0x43,0x4b,0x6a,0x75,0xb3,0x4b,0x9d,0xcc,0x46,0xd2,0x6e,0x00,0x49,0x4f,0xf0,0xac,0x80,0x55,0xc0,0x0c,0xbf,0x18,0x52,0x75,0x76,0x3b,0xac,0x92,0x83,0x69,0x1b,0xb4,0x15
db	0xe5,0x9e,0xde,0x10,0x30,0x30,0x0e,0x85,0xc7,0xf9,0xae,0xbc,0x9e,0xaf,0x4b,0xee,0x27,0x6b,0xa5,0x6d,0xe4,0x8e,0xed,0xdd,0x95,0xaa,0x85,0xe2,0xf5,0x38,0x15,0x50,0xd3,0xcd,0x2c,0x88,0x6c,0x2b,0x14,0x37,0x74,0x2d,0x6d,0x30,0xec,0x96,0x78,0xae,0x80,0xb3,0xd9,0x84,0xc1,0xd6,0x71,0x90,0xe4,0x8d,0x3a,0x7c,0x9c,0xc4,0xf5,0xa0
db	0x20,0x7e,0xa2,0x0e,0x75,0x7c,0x25,0x7a,0x7e,0x2b,0x2e,0xdb,0x12,0x23,0x73,0x6a,0x8e,0xe3,0xd7,0x47,0x94,0xfb,0xcc,0xe4,0x5a,0x8c,0xfb,0xdc,0x46,0xb3,0x4a,0x42,0x15,0xe0,0xaf,0x6e,0x81,0x72,0x72,0x04,0x52,0x09,0xc5,0x8b,0x6e,0xdd,0x7d,0xff,0x27,0xa8,0xc1,0x94,0xb5,0x33,0x59,0xc2,0x7d,0x59,0x6c,0x3c,0xaa,0xd9,0xd8,0x05
db	0x43,0x7e,0x8a,0x47,0xdd,0x76,0x36,0xe3,0x05,0x49,0xd1,0x8f,0xdf,0x45,0x46,0x63,0xff,0x17,0xb4,0x52,0xc8,0xee,0x4d,0xf5,0x74,0x65,0xc6,0xca,0x19,0xfd,0xb9,0x51,0xc8,0xc9,0x96,0xd4,0x06,0xd4,0x09,0x1e,0xab,0x6d,0x1b,0x26,0x61,0x80,0x5b,0xa8,0xcb,0x62,0x92,0x5a,0x1a,0x8e,0xa4,0xb7,0x25,0x19,0x96,0x63,0xd5,0xc3,0xc9,0xdc
db	0x04,0x83,0x62,0x31,0xe3,0x76,0x00,0x4d,0xf8,0xb3,0x98,0xae,0x4d,0x1a,0x38,0xe3,0xa1,0x27,0x52,0x87,0xbe,0x2c,0x93,0x45,0xd1,0xab,0x56,0xc6,0xf5,0xbc,0xb5,0xe6,0x9c,0xe1,0x1b,0x37,0x42,0x08,0xe7,0x71,0xb5,0xa4,0x67,0xf9,0x48,0xd4,0xc4,0x10,0x25,0x53,0x9c,0x03,0xfc,0x6d,0x5e,0x62,0x5e,0x6d,0x56,0xbc,0x78,0x11,0x0a,0x6d
db	0x1b,0x7a,0xdc,0x62,0xb5,0x58,0x86,0x15,0x71,0xff,0x11,0x33,0x94,0x2b,0xa6,0xc7,0x68,0xd5,0x68,0xda,0x5b,0xd5,0xb7,0x38,0x6c,0x1c,0xf4,0x07,0x39,0xef,0x1f,0x72,0x0a,0xb3,0x12,0x13,0x25,0x86,0xd3,0xf8,0x9f,0xb5,0x40,0x58,0xe7,0x5e,0x9f,0xa0,0xbc,0xd7,0xab,0x4f,0xf3,0x94,0xcf,0x0f,0x5a,0x4c,0x98,0xb4,0x70,0x35,0x62,0xee
db	0x33,0x24,0x72,0x31,0xd4,0x06,0xd9,0xb4,0x1c,0x1e,0x0f,0xa7,0x48,0xc7,0x75,0x45,0x40,0x02,0xd0,0x60,0x32,0x29,0x4d,0x61,0x7a,0xee,0x65,0x35,0x2b,0xe5,0x50,0xac,0x82,0xdb,0xf7,0x9c,0x8f,0x82,0xe4,0xf0,0xbd,0xdb,0x00,0x3d,0x3a,0x3d,0xa2,0xc3,0x2d,0x0e,0x51,0x20,0xdb,0xdb,0x8d,0x15,0x03,0xbd,0xcb,0xcb,0x24,0x81,0xc5,0xdb
db	0x05,0x39,0x48,0xb8,0x3c,0x93,0x35,0x10,0xef,0x19,0xba,0x09,0x9e,0xff,0xf9,0x3f,0x0c,0xdc,0x96,0x98,0x32,0x26,0x76,0xe7,0xfa,0xaa,0xdf,0xdc,0xb9,0x15,0x44,0x42,0x9a,0x8c,0x6c,0x88,0xea,0x43,0x63,0xb5,0x79,0xb6,0x50,0x30,0x78,0xea,0x70,0xba,0x33,0x36,0x8f,0x8c,0xe5,0x78,0xfd,0xbc,0xc0,0xbd,0xde,0x3a,0x3d,0xe6,0xe6,0x57
db	0x0f,0x29,0xf2,0x82,0x05,0xf2,0x5c,0xfd,0x33,0xc1,0xb2,0x2e,0xc2,0xc0,0x42,0xa2,0xc8,0xa5,0xf9,0x70,0x05,0xff,0x7b,0x8d,0xb9,0x68,0xc3,0xf6,0x74,0x00,0xcd,0x9d,0x70,0xfa,0x62,0x34,0xe5,0x05,0xe8,0x5f,0x53,0x9b,0x69,0x01,0x86,0xb9,0x1d,0x68,0x80,0x89,0x51,0x52,0x0d,0xe8,0x28,0xa1,0xdd,0x62,0x2b,0xf3,0x53,0x74,0xaa,0x98
db	0xdb,0x7e,0x74,0x44,0xeb,0x25,0xe7,0xde,0xc4,0x29,0x14,0x11,0x7b,0xc6,0xef,0x14,0xe4,0x04,0xd0,0xf4,0x11,0xca,0xdc,0xdc,0xe6,0x3f,0x9a,0xc9,0xe2,0x0e,0x67,0x30,0x78,0x65,0x94,0x5a,0xa1,0x24,0xd6,0x90,0x2f,0x1c,0x13,0x46,0xf5,0xb5,0xf9,0x74,0x56,0x3e,0xd5,0x1b,0x09,0xb3,0x04,0xbe,0x89,0x00,0xbd,0xe0,0xba,0x13,0x05,0xd1
db	0x98,0xa7,0x93,0x09,0xc5,0x96,0x46,0xb5,0x5a,0x05,0xac,0x1e,0x66,0x03,0xf0,0xaa,0x3d,0xc2,0x54,0xa3,0xc4,0x2b,0x0d,0xa3,0xe4,0x92,0xd6,0xd0,0x44,0xa6,0x37,0x30,0xa5,0xac,0xc2,0xc8,0x58,0x2a,0x2c,0x18,0x68,0x8d,0x9b,0x4f,0x99,0xd0,0x55,0x41,0xf4,0x84,0x3c,0x69,0xda,0x3c,0x6d,0x43,0xb3,0x85,0x15,0x1f,0xdb,0x58,0x0b,0x71
db	0x33,0x24,0xbb,0x21,0x43,0x19,0x16,0xeb,0x83,0xde,0xe5,0xb7,0x68,0x9e,0xb9,0xd9,0xf6,0x2e,0xae,0xdd,0x88,0x2c,0x18,0xd7,0xc3,0x72,0x8b,0xbe,0xaf,0x8d,0xfd,0xcd,0x2f,0x8e,0x3e,0x2b,0xa4,0x20,0x11,0x9d,0x00,0x4f,0xea,0xf0,0xaa,0x2d,0xf3,0x9d,0xfd,0x11,0x7b,0xac,0x2c,0x66,0x74,0x03,0xe5,0xcc,0x70,0x9f,0xfb,0xb7,0x5a,0x16
db	0xc3,0x05,0x61,0x7c,0x8c,0x73,0xcc,0x9c,0x6a,0x2f,0xee,0xae,0x85,0xc9,0x51,0x91,0x13,0xa4,0x09,0x82,0x4d,0x62,0x09,0x24,0x25,0x35,0x1f,0x82,0x88,0xbb,0xdd,0x16,0x5e,0x8d,0x98,0x5f,0x07,0x49,0x32,0x96,0xb7,0xee,0x85,0xb0,0x7b,0xfd,0xf5,0x35,0x4b,0xa9,0xd4,0xee,0xf2,0x37,0xd1,0xfe,0x62,0xf5,0x52,0x13,0xb4,0xb2,0xce,0xc4
db	0xe0,0x09,0x78,0x48,0xd5,0xc6,0x5d,0x36,0x1b,0x90,0x3a,0x6a,0x3c,0x21,0x50,0xf0,0x0a,0xe9,0x46,0x24,0x45,0xc1,0x5e,0x76,0xa3,0xf9,0x70,0xb8,0x62,0x4d,0x0e,0x92,0x87,0x4a,0x6a,0xf9,0x46,0x91,0x64,0xfe,0x7f,0x53,0x24,0x7e,0xc7,0x3e,0xb0,0x37,0x1a,0xc8,0xd6,0x33,0x0b,0x5f,0xa5,0x30,0x03,0x0e,0x85,0x3d,0x7b,0xc1,0xa1,0x18
db	0xb3,0x8c,0xfe,0xca,0x3e,0x71,0xd8,0x92,0x46,0x49,0x60,0x54,0xd9,0x7b,0xf7,0xc3,0x99,0x2f,0xb5,0x79,0xcc,0x32,0x40,0x7d,0x3d,0x0b,0xc6,0x6f,0x04,0xd9,0xf1,0xdd,0x64,0xf5,0xc4,0x60,0x14,0x04,0x5c,0x3a,0xa4,0xda,0xdc,0xad,0x8f,0xc2,0x44,0x37,0x96,0x63,0x00,0xf7,0xb1,0xc0,0x7c,0x8c,0x12,0xb5,0x3a,0xec,0xc0,0x16,0xd8,0x24
db	0xe9,0xc0,0xc4,0xfa,0xb1,0x85,0x5b,0xe3,0x62,0x24,0xa1,0x75,0x92,0x82,0x04,0x59,0x10,0x50,0x4b,0x51,0x51,0x3e,0x39,0xba,0x6d,0xa0,0x65,0x2d,0xfc,0x23,0x1c,0x9d,0x69,0x22,0xe7,0x15,0xfa,0xba,0x76,0xbf,0x53,0x62,0xb0,0x0d,0x0d,0x5d,0x55,0x00,0xbc,0x58,0x01,0xed,0x37,0x53,0xb9,0xa6,0x0d,0x71,0xab,0xec,0x42,0xbf,0x3b,0x52
db	0xfd,0xae,0xe9,0x6d,0x65,0x07,0xf3,0xd9,0x32,0x66,0xc1,0x66,0x1a,0x18,0x73,0x86,0x01,0xaf,0x1d,0xd1,0xd0,0xcf,0xb1,0xea,0x54,0x23,0xdf,0xf2,0x4d,0x7d,0xc7,0xfe,0xfe,0x7d,0x1d,0x2c,0x1b,0xb6,0xa7,0x7a,0x9e,0x90,0x3a,0x3b,0xb0,0x6c,0xb0,0xd2,0xd1,0xd0,0x6a,0x94,0x4c,0x84,0x1c,0x45,0xae,0xda,0x16,0xa9,0x2e,0x63,0x19,0x26
db	0xf6,0x74,0xd3,0x6f,0x9b,0x9c,0x0c,0xb8,0x85,0x9f,0xeb,0x99,0xbc,0xab,0xff,0xc3,0x75,0x86,0xe5,0x3a,0xa0,0xf9,0xfc,0x6b,0x3d,0x5a,0xad,0x46,0x7f,0x17,0x0e,0x94,0xb7,0xa4,0x43,0x61,0x54,0x76,0x29,0x78,0xe4,0x41,0x91,0xbe,0xa5,0x36,0x39,0xdf,0xdc,0xcc,0x8e,0x42,0x40,0x08,0x51,0x26,0xb0,0x53,0x5d,0xb4,0x7a,0x18,0x8e,0xb3
db	0xae,0xf2,0xe0,0xef,0x63,0x51,0x3a,0xbe,0x4c,0x2d,0xce,0xc7,0xe2,0x1b,0xc2,0x40,0xf3,0x82,0x61,0xf0,0x1b,0x05,0xdd,0x1e,0xae,0xed,0x87,0x2c,0xe5,0xad,0xc7,0xec,0xb5,0x63,0xf7,0x3a,0xf9,0xb7,0xd8,0x4e,0xa7,0xef,0xac,0x6d,0x9c,0x27,0xd9,0xcc,0x66,0xf4,0x75,0x40,0x94,0x8b,0x78,0x4f,0x61,0x4f,0x31,0x49,0x5c,0x96,0x72,0x58
db	0xcf,0x55,0xb2,0x66,0x16,0x29,0x27,0x24,0x39,0xc3,0x64,0xb1,0xdf,0x69,0x87,0x85,0x46,0xe3,0xd0,0x82,0x53,0x1a,0xc2,0xf1,0x3a,0xab,0xdf,0xe5,0x29,0x17,0xdd,0xfe,0xbf,0xf9,0x3d,0x7a,0xfb,0xe7,0x74,0x49,0xa9,0xef,0x61,0x93,0x4c,0xfa,0x30,0xea,0x65,0xa7,0x61,0x32,0x88,0x74,0x12,0xc1,0x91,0xf1,0xc2,0x1f,0x38,0x6a,0xfd,0x0d
db	0xc8,0x6f,0x87,0xe6,0x15,0x55,0x26,0x13,0x86,0x13,0xb9,0x01,0x98,0x34,0x1c,0x2d,0x1d,0x30,0xae,0x7d,0x8e,0x07,0x7d,0x4d,0xe9,0xfd,0x58,0x18,0xc3,0xa6,0x8e,0x87,0x98,0x33,0xcc,0x80,0xd7,0x70,0x07,0x6a,0x4a,0x97,0xef,0x56,0xf3,0x9d,0xf9,0xef,0x6f,0xa8,0x71,0x7f,0x61,0x07,0x1d,0x9d,0x51,0x06,0x86,0x4a,0x35,0x9e,0xab,0x2c
db	0x66,0x8d,0x61,0x62,0xbd,0xed,0x6c,0x76,0x7c,0x67,0xe0,0xe1,0x6e,0x90,0x74,0xb1,0xa6,0x26,0x0d,0x01,0x1f,0xe9,0xb4,0x30,0x9a,0x7e,0x37,0xd1,0xea,0x97,0x9a,0x0f,0x9e,0x8d,0x52,0xd4,0x96,0x36,0x5b,0x6f,0x40,0xbb,0x9e,0x44,0xb4,0x6e,0xee,0x15,0x70,0xef,0x66,0x81,0xf5,0xb4,0xe7,0x69,0xb0,0x40,0x44,0xdc,0x70,0x1e,0x4d,0x3c
db	0x9b,0x19,0x2a,0x97,0xbd,0xb2,0xd2,0x9b,0x98,0xac,0x36,0xf1,0x05,0x48,0xdc,0x5d,0x21,0xfb,0x17,0xe3,0x9c,0x3c,0xbf,0xfd,0x1d,0x39,0x1e,0x5b,0x2a,0xa2,0xb3,0x7d,0x4f,0xdf,0x3a,0x41,0x7a,0x31,0x01,0xc2,0xe5,0xd0,0x06,0x50,0x29,0x05,0xce,0xb8,0x28,0xb7,0xdd,0x83,0xc8,0xaa,0x39,0x78,0xc7,0x7d,0x9e,0xcd,0x9a,0x07,0x71,0x7e
db	0x20,0x92,0x82,0xce,0x49,0x90,0xce,0xef,0x53,0xa7,0x48,0x2a,0x69,0x86,0xa1,0x5e,0x35,0xe8,0x7d,0x10,0xb8,0x5e,0xa6,0x9a,0x69,0x6f,0x32,0x75,0xf3,0x4a,0xee,0x9c,0x06,0x5c,0xdd,0x84,0x7e,0x38,0x00,0x67,0x39,0x42,0xed,0x72,0xda,0xe3,0x6b,0x5a,0xf4,0xc9,0x80,0x3e,0x0e,0xda,0x39,0xfa,0x83,0x2c,0x60,0x69,0x87,0x85,0x05,0xfc
db	0xf4,0x2b,0xd4,0x0a,0xad,0x86,0xca,0xd5,0xf0,0x92,0x1f,0x43,0x3c,0x0e,0xac,0x99,0xf3,0x67,0xa3,0x41,0x6d,0xb9,0x29,0x70,0x57,0x62,0x9f,0x45,0x91,0x72,0xe5,0x53,0xcc,0x89,0x80,0x3f,0xbc,0x1c,0x66,0x21,0xdd,0x90,0x2b,0xa4,0xca,0x2f,0xf0,0x0f,0x9f,0xd0,0xe9,0x28,0xe2,0xd9,0x36,0xaf,0xf9,0x01,0x81,0xce,0xb4,0xe7,0x71,0xfd
db	0x92,0xf8,0x56,0x2e,0xc3,0xc8,0x8b,0x54,0xc8,0xc7,0x40,0x79,0x27,0x06,0x18,0x4a,0x7b,0x88,0x3f,0xd6,0x4f,0xd4,0x66,0x1e,0x1f,0x9a,0x14,0x1a,0x0a,0x98,0xc7,0xd6,0x25,0x83,0x37,0x8a,0x5d,0xb2,0x88,0x39,0x68,0x7b,0x1f,0x4e,0x0a,0xed,0x11,0x1a,0x77,0x9b,0xcb,0xb6,0x7d,0x5c,0x36,0xac,0x07,0x07,0x9f,0x05,0xcf,0x90,0x8f,0x3f
db	0x4b,0xc5,0xf9,0x42,0x90,0xb4,0x42,0x26,0xa1,0x2c,0x66,0xc6,0xb8,0x98,0x80,0x8a,0xbb,0x9b,0x41,0xe4,0x44,0x8c,0x5e,0x56,0x33,0xe3,0xba,0xcf,0x31,0x8e,0x28,0xd7,0xc5,0xd1,0x3b,0x68,0x47,0x10,0xae,0xda,0xc3,0xbd,0x20,0xe7,0xac,0xe2,0xe1,0xe0,0x7a,0x4b,0x83,0xb1,0xab,0x72,0xf4,0xc4,0xe7,0x0d,0x02,0xaf,0x5b,0x74,0xac,0xda
db	0x9d,0xce,0x26,0x1f,0x79,0x05,0x67,0x7e,0xc4,0x98,0x3f,0xde,0xa6,0xf3,0xfe,0x59,0x65,0x88,0xfb,0x14,0x3a,0x43,0x91,0x04,0x1a,0x78,0x7e,0x08,0xba,0x55,0x50,0xc7,0x65,0xd3,0x8e,0xda,0x0a,0xee,0x8e,0x11,0xa9,0xf6,0x9e,0xd3,0x23,0x97,0x05,0x0c,0x98,0x2a,0x36,0x25,0xec,0x5e,0x0b,0xf9,0x31,0x80,0x00,0x8a,0x70,0xf1,0xaa,0x7c
db	0x73,0x02,0x98,0x8d,0x42,0x27,0x53,0xf1,0x83,0x37,0xd0,0x2d,0xfa,0xc7,0x4b,0xa5,0xb3,0xc9,0xb8,0xd4,0x56,0x94,0x5a,0x17,0x2e,0x9d,0x1b,0x46,0xaa,0xb6,0xd9,0x2a,0x3a,0x6c,0xaf,0x24,0x59,0xfd,0x08,0xc5,0xca,0x0c,0x79,0x3f,0xe7,0x91,0x8d,0x9d,0x59,0x91,0xd8,0x5f,0xda,0x6d,0x35,0x7b,0x52,0x47,0x35,0xf9,0x81,0x86,0x2c,0xee
db	0x1a,0x14,0xc5,0x1f,0xb6,0x85,0xb5,0x74,0xe9,0xb7,0x4f,0xde,0xcd,0x93,0x2d,0xf3,0x10,0xbe,0x34,0xfa,0xca,0x15,0x9f,0x02,0x9d,0x19,0x72,0x7c,0xd6,0xfd,0x81,0x43,0x49,0xb5,0x2b,0x52,0x31,0xd6,0x2c,0x28,0x2e,0x83,0x6d,0xd3,0x0f,0x6e,0x03,0x65,0xf0,0x8a,0xdd,0x0a,0xec,0x58,0x10,0x45,0x5d,0xac,0xda,0xf5,0x32,0x5d,0x18,0x26
db	0xcc,0x2e,0xcf,0xd3,0x41,0x2d,0x1d,0xba,0xdf,0xd8,0x96,0x8f,0x18,0x0f,0xa7,0xec,0x8e,0x6e,0x84,0x2c,0xd6,0x1f,0x4e,0x76,0xfe,0xf3,0x14,0x27,0x4b,0x5b,0x3d,0x7c,0x1c,0x59,0x46,0x97,0x1b,0x59,0x5a,0x2d,0x57,0x80,0x17,0x98,0x7d,0x92,0x5d,0x2f,0x98,0x53,0x10,0x59,0x8e,0x7f,0x55,0x64,0x15,0x62,0x2c,0x16,0x0b,0x8d,0x48,0x54
db	0xaf,0x96,0x17,0xa9,0x8e,0x2c,0xcf,0x41,0x8c,0x8a,0x37,0x55,0xe4,0xf9,0x20,0x3b,0x21,0x5c,0x86,0x8d,0x3f,0xa6,0x5e,0x43,0xf3,0x3b,0xf7,0x7c,0x27,0x88,0x8e,0xa5,0x15,0xca,0x0e,0x9e,0x85,0x30,0x17,0x0d,0xcf,0xf0,0x82,0x87,0xd6,0xe8,0xd2,0xad,0xe9,0x4d,0x3f,0xc9,0x58,0x19,0xf9,0x99,0x4d,0xf9,0x6b,0x1b,0xd3,0xf9,0xdd,0x52
db	0xd1,0x3c,0x64,0x46,0xfd,0x4f,0x2e,0x63,0x39,0xd8,0xe4,0xeb,0xfc,0x07,0xf1,0xa5,0xff,0x84,0xa8,0x92,0xfe,0xbc,0xc5,0x36,0x91,0x2b,0xec,0x2c,0xad,0xf0,0xac,0xc5,0xb0,0xad,0x8a,0x0d,0x6a,0xd9,0x29,0x7a,0xb0,0x87,0x0c,0xaf,0xda,0x75,0x84,0x25,0xbe,0xee,0x0d,0xfd,0x4c,0xf5,0x2d,0x46,0xe9,0x17,0xb9,0x9d,0x3d,0x4b,0x8f,0x3a
db	0xe9,0x49,0xb6,0x32,0x99,0x27,0xe2,0x4d,0xff,0x2f,0x2e,0xd5,0x69,0x52,0x56,0x20,0x0a,0xbf,0x62,0x14,0x34,0xfb,0xbf,0x95,0xe8,0xfe,0xb1,0x9f,0x43,0x30,0x02,0x03,0x9e,0xa8,0xe2,0x68,0x64,0xdd,0x37,0xfc,0xb9,0x0f,0x85,0x8c,0x36,0x45,0xdb,0x7c,0x8b,0x97,0x50,0xc3,0x75,0xa1,0xcf,0xf4,0xc2,0x46,0xd8,0xa1,0x8c,0xab,0x8d,0x3a
db	0xde,0xe7,0x9e,0xd2,0x1e,0x2d,0x8b,0xe4,0x31,0xe3,0x12,0x3f,0x9f,0x0b,0x2c,0x95,0x75,0x8d,0xf1,0x24,0xb9,0xdf,0x1e,0x64,0x35,0x45,0x2a,0xc2,0xf9,0x96,0x5d,0x10,0x64,0x32,0xae,0xe9,0xf8,0x71,0xd4,0x2d,0x6b,0xc6,0xde,0x08,0x1e,0x5d,0x51,0xf1,0xe7,0xfd,0x3c,0x22,0x43,0x59,0x82,0x83,0x13,0x75,0x36,0xef,0x81,0xe4,0xcf,0xa8
db	0xb8,0x30,0x16,0x44,0xae,0x55,0x06,0xdd,0xb9,0x60,0x3f,0x75,0xc6,0xd1,0x73,0xa9,0xea,0xc9,0x64,0x2b,0x8a,0xde,0x44,0x4b,0x3d,0xc3,0x31,0x12,0x84,0x9a,0xe3,0xda,0x24,0x82,0x99,0x00,0x6d,0x8e,0xb8,0x26,0x82,0xa6,0xc2,0x37,0x6c,0x2a,0x1d,0xcf,0x6d,0x18,0xc7,0xee,0x27,0xca,0xe7,0xad,0x95,0xed,0x7d,0xe0,0xe0,0x6f,0x45,0xc3
db	0x8a,0x2f,0x08,0x49,0x7e,0x09,0x9e,0xc1,0xb7,0x1e,0x8f,0x57,0x61,0xf8,0x3e,0xea,0xd7,0x47,0xfb,0xd0,0xda,0xaa,0x04,0xf9,0x06,0xbb,0xa3,0x80,0x68,0x89,0xb0,0x7f,0x18,0xf3,0xd2,0xeb,0xee,0x48,0x30,0x6a,0x24,0xc8,0x71,0x43,0xc3,0x50,0xcc,0x85,0x68,0xf5,0xca,0x44,0x34,0x43,0xaa,0x2e,0x4f,0x02,0x1b,0x23,0x4f,0xe9,0x07,0x02
db	0xa2,0xfa,0x24,0x57,0x70,0x4e,0x1a,0x78,0x03,0xa2,0xdd,0x53,0x50,0x82,0x05,0xb1,0x0f,0xcb,0x9e,0x2e,0x58,0x04,0x62,0xc8,0xac,0x71,0x31,0x56,0x0f,0xc7,0x70,0x32,0x53,0xda,0x51,0xc3,0x15,0x78,0x82,0xb6,0xe8,0x6e,0x32,0xeb,0x39,0xab,0xba,0x67,0xcc,0xbc,0x99,0x58,0x88,0xc4,0x60,0x0d,0x0b,0xc1,0xfa,0x6f,0x40,0x85,0x04,0xdf
db	0x5f,0x17,0x69,0xf1,0xbd,0x44,0x97,0xc8,0x62,0x19,0x49,0x1f,0x23,0xcb,0x3d,0x17,0x04,0xf2,0xbd,0x58,0x15,0xa6,0x37,0x3a,0x3f,0x77,0x98,0x32,0x40,0x8a,0x72,0xf0,0x41,0x0b,0xad,0x88,0xba,0xd3,0xae,0xdc,0x3b,0x9a,0x37,0x89,0xa5,0x09,0xe5,0xbb,0xf2,0xf8,0x5d,0xa5,0xed,0xe8,0x39,0x7b,0xed,0x2b,0x90,0xd6,0x6c,0xd3,0xfa,0x69
db	0xa7,0xca,0x09,0x83,0x15,0x8d,0xd8,0xe3,0x81,0x03,0x4e,0x2d,0xd8,0x96,0x3b,0x4b,0x18,0x91,0xac,0x5f,0x22,0xe6,0x9d,0x4b,0x09,0xaf,0xf0,0xdf,0x16,0xa2,0xf1,0x2c,0xd9,0x35,0x8a,0x6e,0x85,0x7a,0xbc,0xc7,0x10,0xd1,0x5f,0x8a,0x53,0x9c,0x8e,0xbc,0x8c,0x15,0xb3,0x8a,0xb0,0x0b,0x74,0x40,0x2a,0x5f,0x46,0x71,0x1c,0x0b,0xee,0x08
db	0xae,0x17,0x26,0x1e,0xcf,0xbf,0x3d,0xa0,0x5e,0x3a,0xdb,0x39,0x6b,0x4a,0x82,0x53,0x02,0xf4,0xa2,0x15,0x5c,0xb6,0xdb,0x20,0x30,0xa2,0x7d,0xcb,0x9a,0xf7,0x88,0x69,0xb5,0xc8,0xe6,0xcd,0x9e,0xa4,0xaf,0x27,0x0e,0x61,0x41,0xcd,0x8e,0x71,0x83,0x11,0xce,0x5e,0x6c,0xaf,0xa4,0x50,0x81,0xb6,0xf2,0x36,0x05,0xbb,0x36,0x4e,0x4a,0x1b
db	0x09,0x9f,0xca,0x1b,0x12,0xb0,0x01,0xc0,0xbf,0x7e,0x3f,0x81,0x60,0x9f,0xfd,0x56,0x81,0x54,0x99,0x2b,0x7f,0x1e,0xb1,0xbf,0xd4,0xb7,0xe1,0x7c,0x71,0xf9,0x00,0x72,0x5f,0x10,0xab,0x60,0x03,0x9d,0x13,0xf1,0xba,0x48,0x93,0x1c,0x1d,0x11,0x04,0x40,0xf6,0xde,0x3b,0xef,0x6c,0x47,0xb3,0x0d,0xcf,0x53,0xbd,0x45,0x7e,0xd7,0x8c,0x34
db	0xd0,0xcb,0x85,0x4b,0x1e,0xd1,0xc5,0xfd,0x5b,0x1a,0x18,0x8a,0x27,0xe3,0x16,0x3c,0x25,0x12,0xf2,0xf1,0xa1,0x40,0x53,0x68,0x27,0x2c,0x81,0x0e,0x20,0x12,0xe3,0xde,0xe2,0x9f,0x08,0x75,0xc0,0x25,0x79,0xf0,0xc4,0xaa,0x10,0xad,0x41,0x3f,0x0b,0xc7,0xb2,0xe0,0x50,0xde,0xec,0x24,0x09,0xeb,0xb5,0xd3,0xbc,0xd3,0xdf,0x44,0x6d,0xc8
db	0xf1,0x79,0xf8,0x33,0xb7,0x75,0x09,0x18,0x04,0x59,0x0f,0x15,0x5e,0xf9,0xca,0xe0,0xa9,0x2a,0xe1,0x1b,0xf0,0x49,0x5f,0xca,0xa3,0x80,0xd5,0x9b,0x1e,0xc1,0x1f,0x98,0x18,0x0a,0x24,0xc3,0x3f,0xfb,0x43,0xfd,0xa3,0x01,0x59,0x50,0xea,0x21,0xe0,0x92,0xfd,0xe1,0xd5,0xe4,0x38,0x24,0x88,0xf3,0xb0,0xc9,0x79,0xfd,0x4e,0xd3,0x3e,0xbf
db	0xc6,0xb8,0x9e,0x7f,0xab,0x65,0x79,0xd9,0xb9,0x83,0x38,0xe1,0xf7,0xd0,0x37,0x04,0xb3,0x0c,0x48,0x82,0x74,0xe1,0x0c,0x80,0x13,0x59,0xc4,0x72,0xf9,0x2d,0x88,0x06,0x46,0x08,0x7a,0x6b,0xb4,0xfc,0x5f,0x63,0x31,0x2f,0x4f,0xfd,0x4b,0x1f,0x8e,0x21,0x3c,0x67,0x83,0xdd,0xa9,0x65,0x68,0xc6,0xd0,0xb8,0x1d,0xcd,0x60,0xc5,0xb9,0x3b
db	0xea,0xe9,0xc7,0xa5,0x1a,0x98,0x8a,0x87,0xb7,0x73,0x29,0x3a,0x6a,0x3a,0x75,0xbf,0xa4,0x79,0x64,0xcb,0x94,0x68,0x93,0x56,0x55,0x1e,0xd5,0x61,0xda,0x87,0xe1,0x28,0xf0,0xa5,0x64,0x9a,0xd7,0xa0,0x91,0xfd,0x46,0x20,0x6c,0x87,0x1f,0xe8,0x9e,0x7e,0x95,0xc4,0x60,0xdb,0xf4,0xe2,0x3e,0xb2,0x6a,0x4a,0xe7,0x46,0x3f,0xca,0xf3,0x72
db	0xb5,0xe8,0x06,0x3a,0x1b,0xeb,0xcb,0x81,0x46,0x44,0xf6,0x97,0xa0,0x79,0xe4,0xa4,0x8a,0xba,0x5e,0x1b,0x6d,0xf4,0xcf,0x7c,0x12,0x7a,0xec,0xdd,0xf6,0xc8,0xab,0x5f,0x30,0xb3,0xf9,0x8e,0x31,0xfd,0x51,0x95,0x8b,0xa1,0xe9,0xe8,0x2d,0xec,0x86,0x12,0x4a,0xf8,0x8b,0xa5,0xdd,0xb2,0xe4,0xad,0xdd,0xcb,0xf5,0xcd,0x9c,0x9f,0x0a,0x42
db	0x5f,0x83,0x9d,0xa6,0x4f,0xbe,0x11,0x75,0x3c,0xde,0x67,0x6b,0x95,0xcd,0xcf,0xdc,0xfd,0x1f,0x1a,0x14,0x01,0x27,0x68,0xaf,0x9b,0x82,0xd6,0xae,0x29,0x8a,0x1f,0xc8,0xf1,0x1f,0xb8,0xa9,0xa2,0x1d,0x81,0xbb,0x19,0xda,0x06,0xe3,0x34,0x7b,0xce,0x99,0x3c,0x5b,0x0c,0x9b,0x8b,0x35,0xc0,0x6c,0x88,0xef,0xeb,0x9f,0x64,0xe3,0xc3,0xbf
db	0x37,0xd7,0xf6,0xdf,0xad,0x28,0xf4,0xd7,0x19,0xb0,0xf2,0xa7,0xd4,0x71,0xbc,0xd3,0xa3,0x09,0x5c,0x1a,0x45,0x30,0x2d,0x53,0xa5,0x19,0x2f,0xb0,0x5d,0xae,0x04,0x28,0xe6,0x16,0x3e,0x75,0x9f,0xcc,0x76,0xc4,0xc2,0xa0,0xfb,0xff,0xdd,0x4c,0xa3,0x8b,0xad,0x05,0x73,0x26,0xf0,0xef,0x48,0xd5,0x25,0x22,0x90,0x78,0x21,0xfd,0xc6,0x23
db	0x14,0xbc,0xed,0x13,0x29,0x76,0x17,0xa6,0x93,0x09,0x6e,0xa7,0x42,0xdd,0x11,0x9e,0x05,0xa3,0xb7,0x48,0x84,0x85,0xf8,0x4e,0xed,0x3d,0xdb,0xfc,0x68,0xd2,0xec,0xec,0x69,0x2b,0x60,0x38,0xd1,0x99,0x44,0xf9,0x60,0xd3,0x5a,0x9e,0xe4,0x26,0x9d,0x12,0xf8,0x6a,0x53,0xde,0x76,0x78,0xa7,0x68,0xb0,0xb4,0xdc,0x33,0x7b,0x8a,0x73,0xa0
db	0xa5,0x5f,0x8f,0x81,0x0e,0x51,0x06,0x13,0x6b,0x56,0x16,0x91,0x1f,0xf5,0x6b,0x68,0xe6,0x8b,0x69,0xda,0x0a,0x9c,0xb1,0x74,0x8f,0x1c,0xb3,0xbf,0x52,0x59,0xaa,0xb1,0xb6,0x3a,0x81,0xc2,0x04,0x54,0x12,0x46,0xa2,0xd5,0x21,0xdf,0xe0,0x57,0x1f,0xe8,0x36,0x56,0x87,0xbf,0xcb,0x7d,0x06,0x6c,0xd5,0xc9,0x4e,0xca,0x47,0x47,0x11,0x91
db	0x7a,0x14,0x13,0x5d,0x5d,0x46,0xd5,0x3a,0xe4,0xa4,0x4d,0x99,0x3a,0x54,0x99,0x62,0xb4,0x70,0xa0,0xf5,0x8a,0xda,0x05,0x75,0xf1,0xa5,0xa1,0x5d,0x9d,0xc4,0x7f,0x83,0x8a,0x5b,0x09,0x54,0x0e,0x69,0x28,0xef,0x66,0xfb,0xe4,0xc4,0xe4,0xc4,0xda,0xb0,0xda,0xe2,0x19,0x33,0x3c,0x76,0xa0,0x35,0xdc,0x31,0x4e,0x40,0xfe,0xb8,0x20,0x26
db	0x8f,0x6f,0x7d,0x02,0x54,0x86,0x1d,0xca,0xa6,0x10,0xa6,0x89,0x87,0x3a,0x5a,0xd5,0x3d,0x0f,0xb5,0x81,0x7d,0xab,0xb6,0xc6,0x36,0x87,0xce,0xd7,0xe4,0xc3,0x9e,0xc2,0x9c,0xf6,0x75,0xd5,0x9a,0x69,0xd2,0x13,0x89,0x5a,0xe9,0x29,0xc9,0xf5,0x6e,0xcc,0x05,0x87,0x0a,0x61,0x49,0xd7,0xa5,0x76,0xd0,0xaf,0x96,0xe0,0x2f,0x91,0xf4,0x45
db	0x70,0x5a,0xdc,0x9f,0x07,0x7f,0x86,0x02,0xa4,0x83,0x8d,0x4a,0x6d,0xfc,0x1b,0xd8,0x9b,0xc2,0x42,0x4f,0xcb,0xdf,0xcb,0xe0,0x55,0xb4,0x8f,0xf7,0x27,0x73,0xd9,0x7e,0xf8,0x3a,0x5c,0x4f,0x29,0x64,0xd8,0x39,0xfa,0xf2,0xc4,0x6b,0xeb,0x55,0xc3,0x13,0x22,0x15,0xdf,0xc5,0x91,0x6d,0xd7,0xf3,0x11,0x34,0x08,0xce,0xe5,0xbd,0x16,0x14
db	0x60,0x14,0x8a,0xed,0x4d,0x38,0x98,0x15,0x5d,0xee,0x70,0xff,0x05,0xd2,0x74,0x3a,0x5f,0x78,0x1a,0x70,0x61,0x2a,0x42,0x4a,0xf3,0x15,0x6f,0x9e,0x33,0xca,0xb8,0x46,0x22,0x64,0xd6,0x24,0xe8,0x10,0x1a,0x89,0xab,0x74,0xdf,0x56,0x35,0x41,0x57,0xe1,0xd9,0x4b,0x67,0x60,0x89,0x6f,0xbf,0x73,0xac,0x6b,0xf9,0x78,0x3f,0xbc,0xf3,0x2a
db	0xb5,0x8c,0x1f,0xda,0xe7,0xe2,0xac,0x60,0xbf,0x41,0x96,0xbb,0xd5,0x35,0x9c,0x56,0xe7,0xfd,0x95,0xc7,0x4d,0x32,0xa1,0x07,0x34,0xbc,0x99,0xca,0xcc,0x42,0x71,0xfb,0xec,0x5c,0x1e,0xf9,0x8b,0xde,0x43,0x65,0x84,0x16,0x52,0x0a,0x5e,0x92,0x20,0xd8,0x26,0x4b,0x97,0x71,0xde,0xd2,0x1f,0x2e,0xd1,0xb2,0xb6,0x29,0x6a,0x6d,0x41,0x00
db	0x20,0x3d,0x03,0xf8,0x43,0x7b,0x57,0x87,0x4e,0xf1,0x8e,0x6f,0xd3,0xf4,0x6c,0x6c,0x29,0xf6,0x99,0xe3,0xd3,0x1d,0xd3,0x26,0x21,0x3b,0x02,0xa2,0xc1,0x06,0xcf,0x31,0xec,0x7f,0xc6,0x80,0xbc,0xab,0x86,0x01,0xff,0x11,0x8a,0x24,0xfd,0x1b,0x41,0x49,0xd4,0xbe,0x15,0x34,0x82,0xc5,0x02,0x51,0x67,0x5c,0x41,0x8e,0xbf,0x94,0x12,0x15
db	0x64,0xea,0x00,0x0c,0x51,0x40,0x57,0x66,0x1e,0x6d,0x3e,0x41,0x8e,0x84,0xdf,0x71,0xb8,0xd7,0xfa,0x12,0x17,0x22,0x17,0x05,0xdc,0x82,0xfd,0x7c,0x5e,0xfa,0x62,0x23,0xa8,0xbe,0x14,0xdc,0x84,0x42,0xf0,0x90,0xc5,0xb0,0x68,0xbe,0x64,0x74,0xc3,0xa5,0xd1,0x10,0xcf,0xe3,0xd1,0x09,0x98,0x3b,0xb9,0x19,0xf2,0x9b,0x5d,0x90,0x99,0x3d
db	0x30,0x67,0x55,0x34,0x50,0x78,0x3b,0xd2,0x70,0xb1,0xd2,0x91,0x4e,0xfa,0x98,0x7d,0x93,0xad,0x7f,0xb1,0x89,0xb0,0x61,0x4c,0x95,0x3f,0x51,0x95,0xd7,0xc6,0x87,0x7a,0xc5,0x53,0xb6,0x6d,0x61,0xec,0xbe,0x40,0x1f,0xa5,0x7f,0x73,0x4a,0x78,0xd2,0x58,0x1e,0x41,0x8e,0x9a,0x08,0x49,0xce,0x39,0x52,0xf9,0xd1,0xcd,0x41,0xb6,0x39,0x99
db	0xfa,0xfb,0x1c,0x38,0xe1,0xe5,0xe1,0xd6,0x16,0x0f,0xc8,0x12,0x0b,0x88,0xdc,0x00,0xd4,0x7b,0x24,0x69,0x16,0x27,0x37,0xa3,0xd5,0x39,0x27,0x34,0xda,0x23,0x24,0x50,0x13,0xd8,0x02,0x48,0x14,0xd7,0xc9,0x28,0x1b,0xba,0x66,0xa8,0xc8,0x9a,0x7b,0xed,0x92,0x5b,0x78,0x46,0x79,0x5a,0xd1,0xf2,0x75,0xf0,0x98,0xd3,0x9f,0x4c,0x72,0x51
db	0xed,0xe5,0xce,0x83,0xac,0xe1,0xc8,0x2b,0x7f,0x77,0x6a,0x70,0xdd,0x80,0x88,0x62,0x58,0x94,0x15,0x72,0x53,0x34,0x48,0x17,0xb2,0xe8,0x4a,0xab,0x2d,0x4e,0xef,0x93,0xb7,0xba,0xd1,0x1c,0x53,0x69,0xd5,0xac,0xa1,0x61,0x7c,0x44,0xec,0x81,0x72,0xcc,0xe8,0x6f,0x5d,0x67,0x1f,0x65,0x9a,0x34,0xf5,0x95,0x89,0x1c,0x2e,0x54,0x42,0xc0
db	0x85,0x79,0xb0,0xfa,0x44,0x0d,0x28,0xc4,0x20,0x2f,0x2e,0x85,0x73,0xfb,0xf6,0x44,0x0e,0xbc,0xab,0x4f,0x42,0x5c,0xdb,0x1f,0x11,0x6f,0x9a,0x23,0x75,0x70,0x78,0x1a,0xd2,0xb8,0x83,0x72,0xf5,0xf6,0x40,0x48,0x3f,0xc8,0xd5,0xe3,0x2c,0x08,0x5c,0x0c,0x2a,0xb0,0x8e,0x69,0xe6,0xdf,0x4b,0x4a,0x95,0x9c,0x4c,0x5e,0x09,0x24,0xc3,0xd0
db	0x4c,0x20,0x0c,0x9a,0xce,0x95,0x53,0x6a,0x7b,0x54,0x0a,0x7e,0x73,0xa7,0x95,0xe7,0x7c,0x67,0x9d,0x05,0xbc,0x26,0x3a,0xa1,0x43,0x99,0x7a,0xee,0x04,0xcf,0x94,0x02,0x36,0x26,0xb3,0x81,0x74,0x22,0xee,0x1e,0x9e,0xe2,0x82,0xd4,0xe0,0xca,0xf2,0xec,0xd2,0x9e,0xf8,0x3f,0x9f,0xc4,0x5b,0xe8,0xfc,0xbd,0x93,0xaa,0xc3,0x2f,0xce,0xf2
db	0x32,0xa9,0x23,0xf3,0xe1,0x06,0xae,0x7d,0x87,0xe9,0xe7,0xe0,0xc1,0x7c,0x74,0x9c,0xdf,0x86,0x6d,0x5c,0x8a,0x51,0x45,0x9d,0x43,0x49,0x87,0x45,0x75,0xfb,0x40,0x55,0xab,0x9a,0x52,0xf1,0x32,0x5e,0xde,0x8b,0x52,0x50,0x9f,0xb8,0x7a,0xe5,0x1c,0x40,0x4f,0xc7,0xb1,0x29,0x90,0xcc,0x98,0x99,0xa0,0x4e,0x1c,0x43,0x6e,0x91,0x61,0x9c
db	0xf7,0xa7,0xf7,0x43,0x89,0x15,0x8c,0x56,0x22,0x9d,0x66,0xac,0x71,0x19,0xdc,0xb9,0xf8,0xd3,0xaf,0x2e,0xd7,0x7b,0xc3,0xe4,0x25,0x0d,0x2c,0xaf,0x15,0x8c,0xea,0x2b,0xdb,0x8c,0x71,0xff,0x55,0x29,0x11,0x35,0x11,0xef,0xb0,0x97,0xb2,0x95,0xab,0xeb,0x4a,0x40,0x1c,0x92,0xc4,0x13,0x36,0x74,0x53,0x78,0x51,0x6c,0xca,0x37,0xcb,0xda
db	0x5e,0x6b,0x8c,0x69,0xc5,0xd0,0xf9,0xdb,0xbe,0xd9,0x30,0x42,0x16,0xcf,0x40,0x63,0x87,0x10,0x28,0x7d,0xae,0xa9,0x8c,0x14,0x99,0xe1,0x4f,0x11,0x98,0x7e,0xe9,0x14,0x9c,0x2e,0xe2,0xed,0x20,0x15,0x7c,0xb5,0xf4,0xc9,0x16,0x30,0x8d,0x7c,0x61,0x45,0xf4,0x23,0xf5,0xdb,0x81,0x8f,0x6b,0x41,0xaf,0xa9,0xf8,0x51,0xbe,0xc4,0x5d,0x8c
db	0xda,0x5e,0x07,0x62,0x7c,0xc6,0xd1,0xae,0x91,0x5e,0x05,0xa8,0xc6,0xc5,0xfc,0xb7,0x12,0x2e,0x7f,0x85,0xef,0xbd,0x2b,0x56,0x57,0x32,0xad,0x3d,0x97,0x5b,0x26,0xcf,0xd3,0xe7,0x48,0x4e,0x9b,0x15,0x98,0x77,0xb4,0x3e,0xf1,0x3e,0x1c,0x21,0xb0,0x98,0xe2,0x69,0xee,0xd8,0x29,0x10,0x93,0xd5,0xc9,0x71,0x8f,0x28,0xbd,0xe3,0xd9,0x54
db	0xf3,0x72,0xb6,0x85,0xe9,0x2b,0xdc,0x96,0x52,0x53,0x5c,0x61,0x54,0x96,0x4a,0xf5,0x3f,0xee,0x53,0xc3,0x63,0xc9,0x67,0x14,0xdf,0x3a,0xfe,0x46,0x8a,0xa6,0xec,0x06,0x0c,0xea,0xb8,0x82,0x49,0xb5,0xed,0x94,0xf2,0xac,0x76,0xd5,0x87,0x79,0x15,0x4f,0xa1,0x34,0x90,0x8e,0x7b,0x02,0xf7,0x02,0xb0,0x07,0xa5,0x7c,0x6b,0xc2,0x34,0x84
db	0xd4,0xaa,0xbf,0x32,0x81,0xf7,0xed,0x1f,0x61,0xd7,0x6e,0x40,0xa0,0xdc,0x4c,0xb5,0xb7,0x36,0x3a,0x87,0x09,0x82,0xd5,0x5a,0xc8,0x1f,0xe6,0x77,0xa6,0xaa,0xcf,0x3c,0x7b,0x23,0x46,0x58,0x95,0x7f,0x84,0xba,0x4a,0x05,0x0b,0x36,0xdb,0x58,0xf9,0xa4,0x2b,0x24,0xd4,0x8a,0xbc,0xb2,0xb7,0x04,0xac,0x64,0x0e,0x88,0x25,0x9a,0x69,0xe7
db	0x87,0x70,0x0b,0xa6,0x43,0xe9,0xb2,0xbb,0x4e,0x4c,0x10,0x19,0x44,0x4d,0x12,0x4c,0x58,0x2a,0x49,0xe2,0x01,0xd2,0x65,0x23,0xee,0xe9,0xca,0x0b,0xa1,0x28,0x02,0x8d,0xcf,0x37,0x06,0xbc,0x5d,0x35,0xba,0xec,0x97,0x95,0xcc,0xfe,0x7b,0xc9,0x1c,0x0d,0x89,0x4e,0xe1,0x8d,0x9b,0x5e,0x5b,0xb9,0x6c,0x24,0x73,0x9a,0x62,0xd7,0xc5,0xfa
db	0x54,0xeb,0x05,0x22,0xd9,0xe7,0xc4,0x68,0x88,0x20,0x43,0xd9,0x14,0x47,0xd7,0xa5,0xd0,0xce,0x10,0x77,0xe8,0x5c,0x85,0x39,0x99,0x3f,0x72,0x88,0x4f,0x22,0x15,0x87,0xa0,0xa3,0x47,0x10,0x81,0x64,0xff,0x94,0x77,0x5d,0xce,0x6d,0xd8,0x29,0xb1,0x9c,0x8e,0xce,0xa8,0x39,0x4f,0xfc,0x36,0x3c,0x50,0xb2,0xf1,0x08,0x66,0x1a,0xf0,0x22
db	0x65,0x1f,0x4d,0x17,0xd3,0x63,0x10,0x64,0xd1,0xc6,0x5a,0x3e,0x82,0x72,0x0c,0x48,0x5e,0x07,0x9c,0x07,0xa0,0x40,0x60,0xab,0x74,0x9a,0x00,0xdf,0xd7,0x7d,0xd4,0x11,0x4e,0xce,0x5a,0xaf,0x12,0x4f,0xe7,0x12,0x36,0x1a,0x12,0x11,0x16,0xb7,0xad,0x4b,0x28,0x84,0x7b,0xd8,0x30,0x0d,0x85,0xb8,0x76,0xde,0xa3,0x78,0x8c,0xb7,0x7c,0xbc
db	0x97,0x33,0x53,0x95,0xf8,0x14,0x5f,0xf8,0x0d,0xc1,0x6b,0x79,0xa2,0x42,0x49,0xab,0xae,0x8e,0x78,0xf3,0x51,0x01,0xcc,0x20,0x36,0x80,0xbd,0x32,0x0b,0x1b,0xd2,0xcd,0x27,0x52,0x69,0x1b,0x4a,0x37,0xba,0x31,0xe4,0xc2,0x03,0x8d,0x00,0x48,0x4b,0xcd,0x39,0x2e,0xec,0x94,0x2e,0xe0,0x81,0xfd,0x94,0xd9,0x86,0x39,0x23,0x87,0x3c,0x2f
db	0x25,0xe1,0x5b,0x22,0xe0,0x2e,0x37,0x6d,0x9b,0x97,0x9c,0x94,0x37,0x01,0x26,0xb8,0xb1,0x73,0x7c,0xfc,0x0a,0x64,0xe7,0x54,0xf1,0x0f,0x71,0xa1,0xd6,0xc7,0xc8,0xb4,0x86,0x2d,0xfe,0x30,0x8b,0xca,0xb2,0x18,0x21,0xc0,0xc7,0x7d,0x60,0xcf,0x2e,0x25,0xb0,0xa4,0x1a,0x28,0x19,0xa9,0xa9,0x15,0x32,0x5e,0x21,0x89,0x3a,0x99,0x5f,0x50
db	0x86,0x37,0x3b,0x10,0xb8,0xa5,0xad,0x8e,0xbf,0xfc,0x8c,0x85,0xf1,0x76,0x5c,0xe7,0x4d,0xac,0xe7,0x21,0xb3,0x45,0x87,0x3b,0x05,0xc8,0x41,0xf4,0x99,0x83,0x28,0x40,0x6b,0x30,0x37,0x31,0xd2,0xb3,0xdd,0x43,0x3b,0x3f,0xec,0x50,0x58,0x7d,0x20,0xc6,0xb2,0xa9,0x3c,0x22,0x38,0xea,0x16,0x32,0x01,0xc4,0xb0,0x9f,0x7d,0x12,0x91,0x82
db	0x0c,0xd8,0x36,0xfc,0xa4,0xec,0x06,0xb2,0xc2,0xce,0x9b,0xa4,0x53,0x71,0x77,0xdd,0xc3,0xfc,0x34,0x6f,0xd9,0x5c,0xfc,0x36,0xdd,0x63,0x19,0x06,0xfb,0x3c,0xf3,0x3f,0x82,0x28,0x6d,0x00,0xf9,0xfd,0x8d,0x6b,0x79,0x06,0x8a,0xe7,0x6f,0xcc,0x39,0x12,0x80,0x71,0xcb,0x71,0xb3,0xb6,0xa4,0xa8,0xbe,0x61,0x9d,0x1f,0x48,0xa2,0x15,0xa1
db	0xb5,0xf5,0x16,0x70,0xc5,0x39,0xce,0x43,0xa3,0x09,0xe5,0xf4,0x8b,0x77,0x18,0x5e,0xa0,0x77,0xa3,0xa4,0x17,0x2c,0x3e,0x50,0x73,0x2f,0xaa,0x5d,0x58,0x5e,0xdc,0xec,0xaf,0xca,0x6e,0x57,0x80,0xa3,0xd5,0x94,0x30,0x7c,0x11,0x75,0xc4,0xbb,0x9d,0x18,0xc1,0x5a,0x58,0xc7,0x04,0x56,0xb1,0x3a,0x21,0x55,0x02,0xea,0xad,0x58,0x19,0x72
db	0xdc,0x7d,0x0e,0x41,0x62,0x1b,0x5c,0x48,0x97,0x3f,0xed,0xd7,0x4e,0x30,0x1f,0xf5,0xde,0xc5,0x23,0xf2,0xd7,0x22,0xde,0x2f,0x3e,0x80,0x06,0x81,0xf6,0x24,0xb7,0x91,0x09,0x56,0x91,0x00,0x1a,0xea,0xaa,0xa6,0xc2,0x8b,0xc9,0x78,0xd7,0xde,0xf6,0x87,0xb1,0x04,0xcc,0xbb,0xc1,0xc6,0x48,0x43,0xc8,0x03,0xb2,0xdd,0x70,0xc0,0xe3,0xf5
db	0xc0,0xf5,0x13,0xd5,0x11,0x41,0x7f,0x1a,0xdc,0x48,0xf5,0xd6,0x1b,0x0a,0x84,0xd2,0x84,0xcd,0x10,0x4f,0x0a,0xd7,0xcb,0x41,0x61,0x1c,0xcc,0x5c,0xa9,0xbd,0x6e,0x6a,0xf3,0x81,0xd8,0xaa,0x3a,0xff,0x39,0x90,0x8e,0x33,0xe6,0x58,0x13,0x5f,0xec,0x58,0x74,0x35,0xe0,0x06,0x38,0x0f,0xd0,0xbf,0x8d,0xf7,0x26,0x99,0xea,0xdd,0xfb,0xdf
db	0x5b,0xcc,0xf1,0x3d,0x9b,0x84,0x8b,0x5b,0xe8,0xc4,0xc6,0x3e,0x0a,0x55,0xec,0x73,0xf7,0x70,0xb1,0xc8,0xfa,0xf8,0xd6,0x72,0x2c,0x6d,0x8d,0xc1,0xa3,0xb2,0x9a,0xe7,0x80,0x6d,0x09,0xa6,0x76,0x06,0x71,0xf9,0x95,0x9a,0xa9,0x2f,0x4b,0x7c,0xad,0x64,0x01,0x01,0x91,0xe4,0x87,0x1d,0xe1,0x46,0xf5,0x4a,0x96,0xc6,0x58,0xd9,0xe0,0xa9
db	0x2f,0x80,0x1e,0xd6,0xe9,0xa6,0xeb,0xfe,0x5a,0xb6,0xd3,0xe8,0x76,0xd2,0x51,0xc6,0x68,0x34,0xc9,0xed,0x76,0x29,0x7e,0x63,0xb1,0x09,0xdf,0x23,0x47,0x41,0x2f,0x70,0x46,0x4d,0xbb,0x36,0xc8,0x84,0xe9,0x58,0x20,0x6b,0x04,0xb2,0xa4,0x1c,0x4d,0xe0,0xa5,0xa2,0x59,0xc9,0xed,0x63,0x25,0x5f,0x3f,0x24,0x18,0x59,0x29,0xe3,0x79,0xbd
db	0x35,0x50,0xee,0x81,0x59,0xff,0xd4,0x0e,0x62,0xd3,0x52,0x30,0x81,0xa2,0xe6,0x9e,0xc3,0xc9,0x7a,0x10,0x57,0x36,0x27,0xb7,0x3c,0x61,0x38,0x89,0x70,0xa0,0xc5,0xdf,0x78,0x05,0xa5,0x81,0xe2,0x8a,0x93,0xda,0x7c,0xaf,0xbf,0x6d,0x42,0x09,0x1b,0x43,0x9d,0xf9,0x26,0x87,0xc3,0x84,0x6c,0xb7,0x25,0x31,0x50,0x00,0xd8,0x13,0xc0,0xc0
db	0x6c,0x21,0x82,0x6d,0xf9,0x2f,0xef,0x40,0xe8,0xf8,0xae,0x4d,0x9e,0x1d,0x4a,0xda,0xa0,0x0d,0x77,0x36,0x8b,0xed,0xaf,0x6e,0x2a,0x3d,0xa8,0x36,0xe4,0xff,0x37,0xc2,0xa3,0x11,0x5e,0x68,0x58,0xa8,0xa3,0x19,0xf3,0xc1,0x33,0xea,0x39,0x49,0xfe,0x51,0x87,0xb6,0x31,0x6a,0x61,0x47,0xe7,0xb1,0x46,0xde,0x5a,0xf7,0x93,0x06,0xa7,0x72
db	0xa9,0x2e,0x9e,0x2e,0xc9,0x7f,0xe1,0xb2,0x86,0xb4,0xc9,0xff,0x3b,0xf7,0xaf,0xef,0x91,0x47,0xc2,0xfa,0x42,0x0a,0x4e,0xbb,0x10,0x0d,0xea,0xa4,0x11,0x54,0xa9,0x53,0xde,0xc4,0x01,0xde,0xc7,0x2d,0x1f,0x18,0x40,0x79,0xd1,0x44,0x7d,0x51,0x1d,0xf6,0xdc,0x6f,0xad,0xa2,0x5d,0xd9,0xbe,0x5d,0x11,0x57,0xb7,0x68,0x0d,0x96,0xad,0xb3
db	0x32,0xf7,0x99,0xcc,0x0e,0x03,0xa2,0x79,0x9b,0x63,0xce,0xee,0xf9,0x0c,0xfd,0xfa,0x9a,0x82,0xc9,0x43,0xd3,0xd5,0x23,0xfa,0xac,0x75,0xbe,0x61,0x85,0x18,0xb6,0x75,0x72,0x8d,0x17,0xdd,0xde,0x3f,0x6d,0xb4,0xe8,0x47,0x09,0xe1,0xa7,0xe0,0x4c,0xce,0x93,0x7b,0xc3,0xa3,0x3f,0xc0,0x81,0x21,0x6f,0xe8,0xce,0x68,0x61,0xde,0x1a,0x58
db	0x48,0x7f,0xb4,0xae,0xfd,0x7c,0x80,0x63,0x43,0x5a,0xfc,0xf9,0xf9,0x4d,0xb4,0x8c,0x85,0x27,0x12,0x4f,0x7d,0xe8,0x69,0xc3,0x7d,0x57,0x63,0x0d,0x5f,0xd2,0x85,0x4e,0x0c,0x9a,0x0d,0x1c,0x4d,0xdf,0x3f,0x9a,0x16,0x2f,0x34,0x43,0xc3,0xf0,0xf1,0x16,0x16,0xd2,0x9f,0x2e,0x78,0xd8,0x3c,0x63,0xa0,0x7e,0x02,0x8e,0x65,0xd2,0xb0,0x61
db	0xb0,0x1d,0x7a,0x8f,0xf7,0x30,0x45,0x05,0xf7,0x15,0xc3,0x69,0x24,0x98,0xc3,0x74,0x20,0x16,0x09,0x57,0x39,0x16,0x68,0x23,0x33,0x62,0x4c,0xf5,0xd6,0x34,0xe3,0xad,0x7a,0x14,0x64,0x8c,0x2b,0x48,0x96,0xf9,0x85,0x39,0x19,0x73,0x27,0x04,0xa6,0x55,0x66,0x15,0x8c,0xf1,0x47,0xcd,0x53,0xaf,0x31,0x3a,0xd9,0xfa,0xf9,0xac,0xbd,0xb8
db	0x27,0xe0,0xaa,0xa5,0x62,0x85,0x9f,0xbb,0x4e,0xaf,0xa5,0x72,0x42,0x98,0xa6,0x7f,0xa1,0xb6,0xac,0x17,0xc2,0x2c,0xf3,0xd6,0xc0,0x14,0x4b,0xb3,0x86,0x88,0x89,0x81,0x83,0x7d,0x9d,0xf7,0xe3,0xe4,0x27,0xba,0xa8,0x03,0xb4,0xe3,0x97,0x74,0x1c,0x0d,0xab,0xb4,0x6e,0xc6,0x9e,0x58,0xdd,0x15,0x95,0x2f,0xa6,0xd6,0xaa,0x5a,0x96,0x71
db	0x69,0xca,0xe0,0x5f,0xd2,0x3c,0x66,0x1b,0x58,0x25,0xd6,0xec,0xc0,0x46,0x3e,0x56,0xd0,0xe1,0x36,0x44,0x56,0xc0,0xf2,0x15,0x48,0x9e,0x07,0xce,0x5d,0xb9,0xd4,0x4e,0xcc,0x31,0x26,0xaa,0xdb,0x6a,0x87,0x98,0x0e,0x37,0xfc,0xc5,0x91,0x28,0x1b,0xf8,0x70,0xbf,0x30,0x71,0xbe,0xa0,0x81,0x1e,0x30,0x33,0x37,0x37,0xc8,0x07,0x08,0x9b
db	0x8f,0xe4,0x27,0x9f,0x90,0x67,0xb4,0x96,0x08,0xd7,0x30,0x9e,0xa6,0x53,0x39,0xd1,0x9b,0xde,0x02,0x35,0xf3,0xb1,0x19,0x7b,0xd2,0x28,0x5a,0xc3,0x1f,0x69,0x0e,0x48,0xbf,0xa3,0xb4,0x55,0xd1,0x10,0x3d,0x30,0x71,0xc6,0x82,0x2d,0xb8,0x6f,0xe6,0x99,0x6b,0xef,0x9f,0x86,0xed,0x93,0x13,0xb6,0xb0,0x87,0x91,0x77,0x4a,0x00,0xe4,0x5f
db	0x4c,0x7d,0x41,0x3b,0xc9,0xda,0x99,0x6b,0xff,0xec,0xef,0x05,0x3c,0xc6,0x0d,0xec,0x68,0x12,0x44,0x31,0xac,0xc9,0x0b,0x9c,0xf5,0xea,0xed,0xda,0x88,0xec,0x6e,0x6e,0x73,0xda,0x85,0x52,0x69,0xa1,0x13,0x52,0xcf,0xc3,0x4d,0x95,0x88,0xec,0x1f,0x53,0x81,0x6f,0xac,0x53,0x60,0x48,0x20,0x9a,0x4d,0x88,0x2c,0x4b,0xb0,0x69,0x5f,0x07
db	0xf9,0xa7,0x2c,0x9a,0x13,0x91,0x86,0xa2,0x98,0x20,0xa9,0x80,0x1e,0xaa,0x8e,0xbc,0x3c,0x3d,0x51,0x34,0x3d,0x5b,0x80,0xe4,0x39,0xfe,0xc8,0xb1,0x6d,0xfe,0x36,0x9d,0x9b,0xde,0x22,0x39,0x41,0xe9,0xff,0xda,0x67,0x67,0xd4,0xeb,0x60,0x44,0xd5,0xc1,0x74,0xcd,0xa0,0x98,0x06,0x34,0x76,0xf8,0xe5,0x0d,0xc8,0x52,0xca,0x83,0xd2,0xdd
db	0xf2,0x12,0x36,0x7d,0x3e,0x7f,0xbd,0xa6,0xd8,0x1e,0xc0,0x9d,0x67,0x2a,0x33,0x87,0x86,0x79,0x7a,0x70,0x3a,0x63,0x0b,0x74,0x77,0x89,0xce,0x8f,0x5a,0x3b,0xf3,0x2e,0x52,0x4d,0x1d,0xc6,0xc3,0xc8,0x69,0x98,0xdc,0x81,0x45,0x99,0xfd,0xcd,0x6b,0x6d,0x05,0x33,0x40,0xde,0xb3,0xbd,0x4a,0x27,0xc2,0x9e,0x8b,0xf1,0x4c,0xac,0x92,0x82
db	0x55,0x04,0x79,0xe7,0x28,0x74,0x5b,0x70,0xdc,0xc0,0x4f,0x0c,0xcf,0x3a,0x7f,0x08,0xcc,0x2e,0x1d,0xfd,0x8d,0xd9,0x5c,0xe2,0xa7,0x98,0xc1,0xe8,0x4b,0x96,0xbe,0x27,0xd6,0xfd,0x0a,0x59,0x30,0x33,0x85,0x41,0xc5,0x63,0xab,0xe7,0xda,0x26,0xbd,0xce,0xe7,0x9d,0x50,0xd7,0x2d,0x67,0x7a,0xa1,0x05,0x2b,0x74,0x60,0x5e,0x6c,0x04,0x2b
db	0xba,0xe6,0x2d,0x25,0xc9,0x00,0xd0,0xf0,0xa5,0x4f,0x22,0x59,0x34,0xb8,0x43,0x6b,0xb7,0x67,0x25,0x99,0xff,0x75,0x17,0xb1,0x13,0x7e,0x34,0x1d,0x42,0xa3,0x6b,0xb5,0x9d,0xfe,0xa1,0x71,0x0d,0x90,0x81,0x58,0xfc,0xc7,0x85,0xe6,0xbd,0xc2,0xcc,0xc9,0xc9,0x23,0x6e,0xd6,0xbe,0x4a,0x61,0xd4,0xf5,0x9e,0x37,0x6a,0xb1,0x8b,0x91,0x59
db	0xe1,0x3e,0xac,0x87,0x54,0xa6,0xf9,0xf5,0x90,0xd2,0x7c,0xba,0x4b,0x37,0x33,0x1b,0x88,0x5e,0xbd,0x78,0x3f,0xed,0x43,0x40,0x4f,0x16,0x59,0x29,0xbc,0x27,0x98,0x87,0xfe,0x62,0x56,0x93,0x21,0x0a,0xca,0xc1,0x21,0x99,0xb3,0x32,0xbb,0x5a,0x79,0x40,0xab,0xea,0x00,0xf8,0xe9,0x90,0x0d,0x59,0xbd,0x6e,0x7f,0x74,0x01,0x50,0x67,0x3a
db	0x8e,0x24,0x1d,0x6c,0xc8,0xd6,0x93,0xca,0x71,0x95,0xec,0xac,0x78,0xe9,0x1f,0x38,0x0d,0xa2,0xe5,0x32,0x90,0xa2,0xaf,0xef,0x15,0x06,0xd6,0x52,0xa4,0xd2,0x94,0x0f,0xbd,0x86,0x81,0x82,0x12,0x9b,0x3a,0xc4,0x0b,0xdf,0x8a,0x5f,0xc6,0x3b,0xb4,0x13,0x9b,0xeb,0xed,0x2d,0x06,0x46,0xa3,0xbe,0xbb,0xe1,0xe1,0x93,0xa1,0xab,0x46,0xf3
db	0xd0,0xd9,0xce,0xb6,0xfb,0xd0,0xd5,0xb6,0xde,0x0c,0xed,0x90,0x18,0x6c,0x1e,0x46,0xb0,0x36,0xa7,0xf1,0x29,0xbe,0x9a,0xa0,0xcf,0xed,0xd6,0xaf,0xb8,0x89,0x9b,0x83,0xa8,0xa0,0x8d,0x26,0xaf,0x8f,0x48,0x66,0xfc,0x22,0x1a,0xc0,0xcf,0xf8,0x90,0x57,0x7e,0x25,0x5f,0xe4,0x0c,0x68,0xd2,0xaa,0x59,0x09,0x2f,0x6d,0x3f,0x80,0x8d,0xe0
db	0xfa,0x25,0xb0,0xe0,0x85,0xe9,0x13,0x39,0x3d,0x1f,0xed,0xd1,0x94,0x9b,0xb5,0xc2,0x65,0xda,0xec,0x7a,0x1f,0x2f,0xe2,0x0a,0x42,0x09,0xbd,0x79,0x7d,0xcb,0xb8,0x4a,0x02,0x2b,0x72,0xaf,0x33,0x85,0x72,0x1b,0x18,0x0c,0xa3,0xec,0x39,0x0e,0x30,0x21,0x41,0xf8,0x2e,0xc7,0x8e,0x5c,0x4c,0xda,0x22,0x49,0x8c,0xa7,0xfb,0x89,0x76,0x2e
db	0x45,0x90,0x6c,0xeb,0x70,0x78,0x6d,0x6e,0xee,0x12,0x6c,0xb9,0xb9,0x8d,0xe7,0xf3,0x4d,0x86,0xc4,0x58,0x49,0x55,0xa6,0x86,0xaf,0x39,0x03,0x21,0xfa,0xa7,0xdd,0x51,0x80,0x79,0x6d,0x5b,0xa5,0x58,0x0f,0xfd,0x57,0xb3,0x83,0xe6,0x0d,0x25,0xec,0x55,0xdc,0x0a,0x6f,0xbc,0x7d,0xfd,0x94,0x16,0xdd,0x60,0x9f,0x2a,0x4b,0x6c,0x82,0x03
db	0x4b,0x44,0xbb,0x84,0xdc,0xcb,0x97,0x8e,0x58,0xe7,0xc1,0x79,0xa9,0xf3,0x53,0x78,0x1f,0xf1,0x3e,0xdd,0x94,0x24,0x6d,0xb1,0xd2,0x99,0xbc,0xa1,0xbe,0x7d,0xdd,0xff,0xa8,0x5d,0xd2,0xc2,0xba,0xad,0x60,0x6b,0x40,0x5d,0x7b,0x99,0xd2,0xea,0x45,0x66,0x80,0x6c,0x47,0xf2,0xeb,0x94,0xb8,0xe8,0xe8,0xa0,0x46,0x05,0xe1,0x4f,0x40,0x23
db	0x34,0xdf,0x91,0x63,0xae,0xc9,0xe7,0x32,0x20,0x9a,0x95,0x1e,0xcd,0x5a,0x60,0xe1,0x3d,0xe0,0xf1,0x16,0x3d,0x6e,0x8b,0x96,0x23,0xe0,0xaa,0x1d,0x1a,0xde,0xed,0xc6,0x63,0xb5,0x46,0x8b,0x78,0x71,0x9a,0x14,0x88,0x79,0x61,0x68,0x6b,0xcf,0x80,0xd8,0x9c,0xaa,0xfb,0xb1,0xc0,0xf3,0x39,0x07,0x26,0x56,0x80,0xba,0x9d,0xf5,0xe7,0x95
db	0x99,0xac,0x90,0xea,0xe7,0xe1,0xc9,0x0d,0x40,0x94,0x83,0x58,0xd2,0xc3,0x2b,0xce,0x1e,0xae,0x2a,0xa6,0xfa,0xc7,0x89,0x44,0xcb,0xe2,0x9e,0x74,0x33,0xaa,0x70,0xe5,0x28,0x3a,0x51,0x74,0x53,0xe2,0xfb,0x7c,0x47,0x76,0x22,0xdf,0x46,0xa6,0x01,0x17,0xef,0x88,0x43,0x46,0x3f,0x1a,0x26,0x0c,0xad,0xf4,0x31,0x55,0xf2,0xe7,0xc9,0x35
db	0x6f,0x7c,0x0c,0x5c,0xfd,0x43,0xa4,0x6c,0x6c,0x74,0xf0,0xa4,0xec,0x1d,0x83,0x97,0xc1,0x6c,0x9c,0xd7,0x97,0x90,0x7c,0x07,0x88,0xc0,0xb4,0x79,0x2c,0x7a,0x9c,0x93,0xa2,0x15,0x6c,0xd2,0xa9,0x45,0xa5,0xc1,0x16,0xfe,0x72,0xf4,0x01,0x32,0xe4,0x51,0xdd,0xdb,0x50,0xe3,0x61,0x4e,0x29,0x1e,0x27,0x10,0xe9,0x5e,0x30,0x2b,0x30,0x27
db	0x99,0xff,0x92,0x23,0x04,0x8d,0x28,0x68,0x28,0xd3,0x0f,0xec,0xbb,0xf9,0xfb,0x44,0x1c,0xaa,0x8b,0x38,0x95,0x67,0x1e,0xf5,0x42,0xc9,0xec,0x05,0xeb,0x94,0xe5,0x1c,0x8a,0x2a,0xef,0x3b,0x74,0x46,0x89,0x4f,0xd5,0x6f,0xa0,0xe5,0x74,0xae,0x24,0x8d,0x81,0xae,0x9d,0x3c,0x3e,0x3d,0x41,0x54,0x8f,0xd9,0xc2,0x98,0xf4,0x84,0xeb,0x30
db	0x6a,0x06,0x67,0x11,0x2d,0xb0,0x55,0x70,0x26,0xdf,0x19,0x5f,0x81,0xe9,0x39,0x69,0x3a,0xd6,0x09,0xa4,0x40,0x22,0x1f,0x5c,0xbf,0xd5,0xa6,0xea,0x69,0x99,0x0d,0xea,0x70,0xed,0xfe,0x3a,0xba,0x23,0x8b,0xab,0x08,0xfe,0xfb,0xe9,0x1a,0x88,0x80,0x13,0x45,0x9c,0xca,0x2e,0xda,0x4a,0xc8,0x5d,0x15,0x52,0x87,0x36,0x9b,0x87,0x8a,0x76
db	0x5d,0x31,0x24,0x4a,0xcb,0xf5,0xd3,0xd3,0xc1,0xec,0xde,0x1e,0x48,0x99,0xd5,0xcb,0x93,0xf7,0xca,0x2d,0xa4,0x66,0x5e,0xa4,0xcf,0xc6,0x15,0x20,0x10,0xb1,0xe2,0x8e,0xb9,0x44,0xa7,0xc3,0x54,0x14,0x86,0x08,0xb7,0x89,0x52,0xd5,0x72,0xc5,0x62,0x4d,0x82,0x96,0x23,0xcf,0x6e,0x52,0x3a,0x92,0x53,0x48,0xa2,0xa5,0x9d,0xa4,0xcc,0x32
db	0x45,0x5a,0xdf,0xe2,0xbe,0xce,0x28,0xc8,0xb1,0xb7,0x0f,0x6a,0x38,0x28,0x14,0x66,0x55,0x7a,0xab,0x35,0x56,0xd0,0xc7,0xe5,0xa1,0x8a,0x84,0xf7,0xc5,0xa9,0xdb,0x2a,0x45,0xe9,0x34,0x2d,0xf2,0xed,0x2b,0xa9,0x9e,0x49,0x1b,0x23,0x10,0xeb,0x0e,0x01,0x46,0x6f,0x7a,0x50,0x09,0x5f,0xc3,0xb6,0x1e,0x2f,0x1a,0x3e,0x89,0x32,0xaa,0x5a
db	0xaa,0xef,0x23,0x45,0xdc,0xb5,0x7e,0x5f,0x87,0x77,0xde,0x50,0xab,0xbf,0x9e,0x62,0xa8,0xe0,0xf0,0xc8,0x4a,0xf1,0x4e,0xaf,0xe4,0x50,0x8a,0xfe,0xc9,0x68,0xdd,0x19,0x1d,0xc6,0x54,0xe5,0x38,0x0a,0x6f,0x36,0xe4,0x85,0xe8,0xab,0xc4,0x06,0xef,0x07,0x29,0xce,0xea,0x9d,0x2e,0x22,0x97,0x18,0x7e,0x59,0x89,0x92,0x31,0xc5,0x87,0x50
db	0xa8,0x23,0x22,0x58,0x47,0x27,0x1c,0x89,0x5f,0xec,0x94,0x1d,0xb2,0xc8,0x61,0x1e,0x0a,0x80,0xd3,0xe9,0xbf,0x65,0xb9,0x66,0x32,0x56,0xde,0xd2,0x13,0xee,0xea,0xc4,0xc9,0xbf,0x4c,0xb7,0xa4,0x1c,0xc0,0xbf,0xcf,0xa4,0x58,0x1f,0x98,0x1d,0x25,0x4e,0x51,0xd9,0xbe,0x89,0x32,0xdb,0x7a,0xa6,0x39,0xa9,0xbf,0xed,0x65,0x6b,0x92,0xc4
db	0x8d,0xcd,0x63,0x18,0x65,0x44,0x95,0xcf,0x17,0x72,0x8f,0x27,0x79,0x83,0xda,0xe3,0xe7,0xd9,0xca,0x57,0xff,0xa3,0x15,0xbf,0xb6,0xd8,0xc2,0x8c,0xe8,0xdb,0x8c,0xdc,0x54,0x6a,0xc8,0x57,0x6e,0x24,0xc3,0x3c,0x1f,0x33,0xdd,0x68,0xbd,0x7a,0xa3,0xbc,0xa9,0x9a,0xe8,0xfc,0x97,0xa5,0xbe,0x59,0xfb,0x77,0xcd,0x22,0xc6,0x3d,0x95,0x21
db	0xcb,0xf7,0x8d,0xc1,0x77,0xc6,0xe0,0x06,0xb2,0xdb,0xec,0x54,0x19,0xad,0x02,0x25,0xe0,0x0f,0xda,0x4c,0xa5,0xf2,0x47,0x3f,0xc9,0xa0,0x91,0x21,0x39,0xe9,0x74,0x2a,0x9a,0xc1,0x57,0x86,0x3c,0x32,0x27,0x4c,0xc2,0x2d,0x50,0xbd,0x7a,0x04,0x9c,0x45,0x0d,0x7e,0x06,0x1d,0x3e,0xc1,0x6f,0x06,0x7f,0xd4,0x71,0xd3,0x5c,0x66,0x74,0xa7
db	0x33,0x75,0x64,0xa8,0x7d,0xc0,0x23,0xda,0xb0,0x6d,0x12,0xbe,0x83,0x98,0xe7,0x65,0x38,0x4d,0x39,0xc3,0xd7,0x33,0xfb,0x58,0x64,0xfc,0xde,0xd7,0xbf,0x9e,0xdb,0xcc,0x7a,0x35,0xac,0xdf,0x13,0x08,0xbc,0x0a,0x55,0x82,0x5f,0xc3,0x74,0xc5,0xb2,0xdb,0x89,0xdc,0x9c,0x60,0xfa,0x02,0x1c,0xba,0x5b,0x7e,0x0f,0xb1,0x0f,0xad,0x43,0xe1
db	0xe1,0xbe,0x1e,0x06,0x05,0x0f,0x39,0x80,0x3d,0x7d,0xbe,0x8f,0x38,0x25,0x46,0x5e,0xea,0x47,0x36,0x65,0x4c,0x3c,0x6c,0xd6,0xaa,0x46,0xaa,0xb0,0x95,0x1d,0xff,0x67,0x6c,0x70,0x9d,0xec,0x3d,0x3d,0x4c,0x2f,0xd9,0x2b,0xb0,0xbd,0x8c,0x6a,0xca,0xac,0x0c,0x53,0xa1,0xda,0xd8,0xc1,0x3c,0xaa,0xcc,0x50,0x85,0x41,0xa1,0xa7,0xe9,0x7f
db	0xf7,0xa8,0x28,0xb1,0x5f,0xd6,0x77,0xc9,0xb5,0xae,0x33,0xa7,0x2d,0x16,0xe0,0x13,0xe8,0xd4,0xf9,0x4e,0x62,0x2e,0xc2,0x9a,0xf3,0x83,0xe0,0x45,0x43,0x68,0x40,0x5a,0x56,0xf3,0x31,0xc8,0x5b,0x46,0x0b,0x38,0x1f,0xa5,0xff,0xe6,0xa1,0x81,0xc0,0x91,0xe5,0x5a,0x63,0x8f,0x47,0x9a,0xe7,0x26,0x0d,0x78,0x8d,0x11,0x7d,0xc8,0xd4,0x9f
db	0xc1,0xf7,0x8f,0x93,0xfa,0x2f,0xb5,0xfd,0x6d,0xa4,0x34,0xcf,0x3c,0x6c,0xf6,0x64,0xae,0x5c,0x60,0xa2,0xb4,0xcc,0x18,0x3e,0x08,0x8e,0x36,0x88,0xab,0xc3,0xea,0x53,0x4f,0x1c,0x9e,0xe6,0xef,0x2d,0x9c,0x78,0x4a,0x3a,0x5a,0x60,0x8e,0xf7,0xeb,0x0b,0x36,0xb1,0xbb,0x59,0xe2,0x5e,0x64,0x60,0xe5,0xd6,0x3d,0x2a,0xe1,0x1b,0x03,0x40
db	0x8d,0xde,0x2e,0xd0,0x76,0x0a,0x6b,0x63,0x2a,0x53,0x2d,0x39,0xe0,0x53,0xee,0x7d,0xc4,0x8a,0x39,0xc5,0xda,0xfc,0x31,0x7e,0xa2,0x1b,0x11,0x1d,0x8a,0x8e,0x66,0xf4,0x00,0x17,0xd3,0x78,0x1b,0x94,0xad,0xcf,0xdd,0x56,0xce,0xaf,0xf6,0x34,0xe4,0xb6,0x47,0xe0,0xda,0x1b,0x36,0x4f,0x86,0x26,0xc1,0x65,0xec,0x85,0x8c,0xa9,0xfe,0x96
db	0x75,0x0d,0xe3,0xeb,0x9a,0xa6,0x3f,0xb3,0x10,0x03,0x85,0x24,0xf2,0xb5,0xcd,0x69,0x7d,0xba,0xa2,0x5c,0x8a,0x6d,0x45,0xf4,0xc8,0x4f,0x69,0x8e,0xd4,0x69,0x82,0x42,0xfd,0x00,0x59,0xfd,0x20,0x7a,0x63,0x58,0x56,0x30,0x21,0x73,0xbd,0xd4,0x49,0x84,0x3f,0x51,0x0e,0xfb,0xd3,0xfc,0x93,0x17,0x7f,0x23,0x75,0x25,0xea,0x78,0x79,0xf7
db	0xec,0x22,0xef,0x86,0x91,0x0a,0x90,0x10,0x71,0x3b,0xb8,0x8e,0xb7,0xc9,0xd1,0x26,0x98,0x7d,0x1a,0xab,0x74,0x3e,0x5f,0x10,0xa8,0x47,0xdf,0xc9,0x0a,0x03,0xbb,0xe2,0xbb,0x34,0xbe,0x87,0x1a,0x3e,0x13,0x4b,0xd5,0xdd,0x53,0xb7,0x65,0xb4,0x16,0x38,0xd3,0xfd,0x01,0xde,0xe8,0xba,0x1d,0x33,0x5b,0x7b,0x9b,0x9f,0xfb,0xe7,0x8d,0x82
db	0x21,0x78,0x9e,0xb2,0xf5,0x16,0x37,0x88,0x47,0x9d,0x1a,0x2c,0xfe,0x6a,0xac,0xde,0x3e,0xc4,0xa8,0xed,0x64,0x46,0xdd,0x05,0x07,0x60,0xef,0x99,0x96,0xf0,0x84,0x27,0x38,0x58,0xe5,0xc0,0x53,0x7d,0x07,0xe3,0xa5,0x31,0xb5,0x8a,0xe7,0x50,0x94,0xbb,0x29,0xf9,0x58,0x13,0x91,0x5b,0x54,0x77,0xf6,0x91,0xb8,0x75,0x05,0x3d,0x70,0x3e
db	0x07,0x95,0x7d,0x37,0xbd,0x1d,0x29,0x4d,0x33,0x07,0x13,0x2b,0x54,0x70,0x9c,0x31,0xf1,0xcd,0x2d,0x28,0x09,0x43,0x90,0x24,0x8c,0x82,0xb0,0x08,0x71,0x08,0x97,0x7e,0x1a,0xbc,0x82,0xd8,0x31,0x0a,0x13,0xe9,0x22,0xf0,0x8d,0x2b,0x91,0xe5,0x2e,0x34,0x56,0x97,0x86,0xc9,0xbd,0x45,0x1e,0x32,0x03,0xcb,0xa1,0x29,0x00,0x81,0xd4,0x6e
db	0x5d,0xbc,0x0f,0x01,0x8d,0x5c,0xb9,0x80,0xcc,0xfe,0x0d,0xa3,0xef,0x8e,0x85,0x59,0x37,0xf7,0x64,0xa7,0xe5,0x2a,0xd5,0x44,0xee,0x91,0xcf,0x6c,0xf5,0x0a,0x9b,0xc7,0xdf,0xb6,0x02,0x2d,0xa4,0xf1,0x22,0x2a,0x97,0xfe,0x1d,0xb7,0x4c,0xc7,0x4f,0x2f,0x0b,0x38,0xd2,0xbf,0xfe,0xe3,0x94,0x55,0xae,0x85,0x0c,0x34,0x59,0x67,0x23,0x7b
db	0x4a,0x87,0xd9,0xd2,0xca,0xd5,0x38,0xd2,0x9d,0x05,0x2e,0xd8,0xe3,0x26,0x51,0xa4,0x14,0x66,0xfb,0x38,0x40,0x18,0x3b,0xda,0x43,0x85,0xc9,0xf5,0xf4,0xe7,0x22,0x82,0x45,0xa1,0xdf,0x98,0xa0,0xab,0x5f,0x7a,0x50,0x84,0x75,0x7a,0x70,0xa6,0x3b,0x04,0x20,0xed,0xa8,0x68,0x6d,0x3f,0x43,0xf8,0xb8,0xac,0xc7,0x32,0xa0,0xff,0x47,0xd5
db	0xb3,0x92,0x6a,0x15,0x5a,0xf1,0x7c,0x32,0x30,0xda,0x1e,0x5d,0xab,0xcc,0xd0,0x3a,0xdc,0xcf,0x70,0xd8,0x4d,0xa3,0x50,0xac,0x50,0x42,0x53,0xc6,0xe0,0x3a,0x26,0xdc,0x77,0x30,0x31,0x59,0xa1,0xfc,0x4d,0x48,0x00,0x0d,0xe0,0x66,0xb3,0x9b,0xd3,0x38,0x45,0xbb,0x0c,0x57,0xc5,0x78,0xee,0x8c,0x96,0xea,0xa2,0x16,0xa3,0x12,0xb1,0x06
db	0xd0,0x2a,0x70,0xf7,0xce,0x42,0xae,0x17,0x64,0xbf,0x13,0xa0,0xe9,0x62,0x57,0x1d,0x55,0x78,0xfa,0x72,0x19,0x58,0x15,0xea,0xe5,0xdf,0x72,0x0e,0xc6,0xd3,0xb4,0x3d,0x60,0xee,0x32,0x2a,0xce,0xdc,0xad,0xd0,0x34,0xe6,0xb4,0xcf,0xce,0x5a,0x4a,0x9f,0xaf,0x01,0xb3,0x2a,0xed,0x46,0xa0,0xad,0xaa,0x62,0x8b,0xa4,0xf7,0x4b,0xce,0x32
db	0x35,0x29,0x1e,0x7a,0xda,0x74,0xf8,0xe5,0xda,0x52,0x66,0xaf,0x3d,0x1a,0xff,0x42,0xc0,0xcc,0xb1,0x32,0x36,0x10,0x44,0x34,0x6a,0x16,0xc2,0x5b,0x9a,0x35,0x3f,0xd2,0x29,0xc5,0x76,0x3c,0x24,0xc7,0x2b,0x92,0xae,0xe0,0xe2,0x04,0x6c,0x3b,0x97,0xda,0xfd,0x49,0x43,0x6d,0x35,0xf5,0xc3,0xc1,0x93,0xf8,0x2f,0x25,0xef,0x3e,0xd8,0xf2
db	0xc0,0xb3,0xb5,0x71,0x01,0xe0,0x07,0x11,0xd5,0xf1,0xd3,0x54,0x59,0x93,0x77,0x2e,0x77,0xdc,0x57,0xd7,0x9b,0x0a,0xe2,0xde,0x29,0x04,0x81,0xa1,0x81,0x6f,0x94,0x86,0x39,0xd7,0x29,0x69,0x3f,0xfa,0xe4,0x02,0x01,0x85,0x04,0x21,0xd3,0x17,0xf5,0x68,0x85,0x6e,0x74,0x15,0x56,0xe6,0x5e,0x12,0x1c,0x0d,0x2f,0x7a,0x8d,0xe1,0xc8,0x47
db	0x7b,0xdc,0x35,0x64,0xf1,0x00,0xc0,0x7b,0xd8,0x2c,0x8c,0x60,0x10,0x53,0x11,0x2c,0x5c,0xa2,0xb6,0x05,0xa3,0xcd,0x14,0xb6,0xd0,0x36,0xe9,0x74,0x78,0xc3,0x84,0x6b,0x51,0xa9,0xf9,0xf1,0x05,0xe2,0xd4,0xa3,0x57,0xec,0xb1,0x5e,0xd5,0x75,0x64,0xe3,0xb0,0xf9,0x8f,0x88,0x60,0xdf,0x8e,0x75,0xf9,0x32,0xfc,0x58,0x5b,0x4b,0x17,0xdb
db	0x41,0x04,0x6f,0x17,0x7a,0xf8,0xd0,0x47,0x8e,0xeb,0xd1,0xf9,0xa6,0xa8,0x52,0x7e,0x07,0x6b,0x5b,0x4d,0xb9,0xda,0x91,0x40,0x51,0x25,0x67,0x4b,0xf1,0x95,0x12,0x07,0xa9,0xa5,0x33,0x96,0x92,0x5e,0xb4,0x0e,0xf0,0x85,0x2e,0x70,0xd8,0xaf,0xae,0x9a,0x3d,0x0c,0xb0,0xee,0xe1,0x80,0x5a,0xb9,0x17,0xe6,0x00,0xa8,0x82,0xd0,0x9b,0xf5
db	0xe3,0xa0,0x12,0xc4,0x15,0xd6,0x5e,0x57,0x5c,0xd2,0xb9,0xa7,0x8e,0xfd,0x09,0xc3,0xd2,0x66,0xfd,0x86,0xb4,0xdc,0xa3,0xc2,0xfe,0x16,0x86,0xc4,0x98,0xa3,0x2e,0x4c,0xc9,0x2c,0xd6,0x87,0x83,0x1b,0x6f,0xe2,0x44,0xd6,0x72,0x94,0x1d,0xba,0xaf,0x34,0x1f,0xf2,0x40,0x40,0x33,0x24,0x63,0xc1,0x26,0xef,0xbc,0x0f,0x3b,0x3c,0x65,0x2b
db	0xa7,0xc7,0xdf,0x96,0x67,0xab,0x92,0x0e,0x04,0x8c,0x82,0x9e,0xbe,0x52,0x61,0x40,0xdf,0x77,0x00,0xc5,0x01,0x9a,0xe9,0xde,0xe1,0xe2,0x45,0xb8,0xed,0x94,0xd5,0xf0,0x28,0x29,0xef,0x0d,0x91,0x07,0x9b,0xfe,0x69,0x78,0x26,0xd7,0xf9,0x51,0xf1,0x9c,0xf2,0xbb,0x83,0x2d,0x79,0x1e,0xff,0x97,0x13,0xdc,0x28,0x93,0x26,0x7c,0x54,0x52
db	0xc0,0x92,0xeb,0x4a,0xa2,0xe3,0x01,0xfc,0x07,0xb9,0x26,0x11,0x03,0xe0,0x19,0xa8,0x9c,0xff,0x3a,0x95,0x26,0x3a,0x17,0xf1,0x7d,0x6a,0x6a,0xb2,0xb5,0x5a,0x07,0x43,0x2b,0xb7,0xdd,0x19,0x14,0xe0,0x05,0x91,0xc5,0xee,0x49,0x35,0x7b,0x1a,0x2d,0x34,0xda,0xa2,0x45,0x7e,0x0d,0x64,0x98,0xb6,0x2e,0x47,0xaa,0x6c,0x73,0x66,0x55,0x01
db	0x27,0xb0,0xa9,0x13,0xa6,0xe0,0x74,0x38,0xb3,0x97,0xfe,0xaf,0xdc,0xc0,0x6a,0x4f,0xd8,0xdb,0x07,0x62,0x61,0x05,0xbb,0xa0,0xa8,0xc5,0xb3,0x89,0x13,0xbb,0x09,0x01,0x6f,0x09,0xcb,0x47,0x62,0x46,0xf0,0x4b,0xf0,0xb7,0x7c,0x39,0x8d,0xe5,0x7b,0x64,0x49,0x32,0x93,0x1e,0x94,0x0a,0x98,0xe0,0xca,0xc6,0x67,0x5b,0xdf,0x88,0x0a,0x26
db	0x83,0x77,0xc3,0xd0,0x11,0x66,0x3d,0x25,0x91,0x61,0x80,0xfc,0x9c,0x50,0xfb,0xe8,0x81,0x6f,0xd8,0xfa,0x77,0x78,0x4c,0x2b,0x44,0xd0,0x92,0x52,0xa4,0x50,0x50,0x7e,0xa2,0xb9,0xe7,0x79,0x33,0x95,0xfe,0x29,0x1c,0x1d,0x43,0x9d,0xa7,0x12,0xfe,0xa1,0x45,0xf4,0xd9,0x1c,0x7e,0x5a,0x67,0x99,0x7f,0x22,0x7c,0xa3,0xb1,0x2d,0xb7,0x1d
db	0x6b,0xf6,0xb4,0x94,0xf2,0xd1,0x5c,0x28,0x56,0xe9,0x4f,0x21,0x81,0x96,0x37,0x7c,0x25,0x74,0x0f,0xf9,0xc5,0xf5,0xc6,0xe8,0x8f,0xbb,0xfb,0xe4,0xaf,0x23,0xac,0x4c,0x20,0x35,0x7d,0xb4,0x4a,0xde,0x90,0xec,0x16,0x30,0x95,0x1b,0x79,0xf6,0x77,0xfe,0x80,0x10,0xba,0xd2,0x49,0xda,0xca,0x9e,0x6b,0x63,0x2f,0x24,0x38,0xf9,0xee,0x20
db	0x38,0x5c,0xeb,0xf5,0xbc,0x07,0x7a,0xeb,0xde,0xc4,0x97,0xcf,0x48,0x9b,0x80,0x40,0xfa,0x81,0xf5,0x24,0xa7,0xf3,0xf7,0x16,0xe9,0xba,0xae,0x9f,0xde,0xa1,0x00,0x34,0x74,0x36,0x9f,0x47,0xce,0xcf,0x35,0xdb,0x30,0x7e,0x72,0x81,0xc5,0xe1,0x59,0x07,0x3e,0xc7,0x5b,0x7b,0xd3,0xc6,0xeb,0x4e,0x71,0x9c,0xeb,0x41,0x37,0xd9,0x9e,0x34
db	0x0b,0xc1,0x9c,0xf7,0xfd,0x56,0xb0,0xd6,0xa6,0xe4,0x1d,0xdf,0x43,0xc6,0xf3,0x26,0x0f,0x01,0x07,0x29,0x57,0x9c,0x8f,0xe1,0x31,0xc9,0xa6,0x98,0x0f,0x0e,0x27,0xfd,0xa0,0x59,0xdf,0x92,0x7b,0x0a,0x4c,0x42,0x4b,0x03,0x98,0x2a,0xea,0xcb,0xd8,0x0f,0x6d,0x19,0x0b,0x22,0x69,0x8b,0xaa,0x3b,0xc8,0x41,0x66,0x81,0xc3,0xaa,0x64,0x6d
db	0x44,0xdd,0xb9,0xe2,0xc4,0x47,0x6d,0xdf,0x61,0xe0,0xf3,0x26,0x40,0x23,0x2f,0xf9,0x2a,0xb3,0xfa,0xe2,0xe8,0x36,0xc0,0xd9,0x89,0xb0,0x05,0x47,0x36,0x20,0x3b,0x03,0x0c,0xd1,0x46,0x9b,0xc9,0x65,0xfa,0x14,0xba,0x68,0x49,0xfc,0x2a,0xb9,0x04,0x47,0xbb,0x64,0xe1,0x7f,0x5a,0xd3,0x70,0x19,0x0f,0x14,0x09,0xc0,0xbe,0xc3,0x9b,0x2f
db	0xd1,0x05,0x90,0x56,0x09,0x47,0xb3,0xc5,0x08,0x6f,0x89,0x59,0x8c,0xf3,0xd4,0x1c,0xaf,0x68,0x00,0x32,0x58,0xe2,0x66,0x55,0xe2,0xc3,0x46,0x73,0xfd,0x4b,0x63,0xc5,0xdd,0x48,0xa8,0x14,0xe9,0x07,0x94,0x8f,0x51,0x6e,0x2d,0x7c,0x62,0x97,0x73,0xa5,0x42,0x7d,0xad,0x43,0xcb,0x65,0x56,0xf0,0x23,0x28,0x72,0xdb,0x1f,0xcf,0x34,0x9a
db	0x62,0x06,0x8d,0xc9,0x86,0x40,0x6d,0xee,0x58,0x72,0x02,0xbb,0xce,0x33,0x6a,0xe4,0xcb,0x46,0x25,0xda,0x2f,0x8d,0xc9,0x8e,0xfe,0xcf,0xbb,0xfc,0xb0,0xe8,0xec,0xf2,0xf9,0xff,0x5d,0x70,0x9e,0x2e,0x22,0x0e,0x9a,0x4d,0xb8,0x26,0x7a,0x48,0x3f,0xba,0x5c,0xcd,0x10,0xf4,0x6d,0x89,0x3d,0x5d,0x87,0xd4,0x69,0xb8,0x4a,0x20,0xc6,0xf8
db	0x03,0x6c,0x60,0x1e,0x9c,0xc6,0xe3,0x39,0x9b,0xa1,0x16,0x64,0xed,0xc6,0xd7,0x54,0xfd,0x8d,0xa0,0x2f,0xcf,0xc6,0xde,0x43,0xe4,0xc5,0xb7,0xd6,0x00,0xaf,0x95,0x7a,0xc6,0xde,0x26,0x59,0x39,0xb0,0x12,0x6b,0xe1,0x3c,0xa9,0x09,0xb6,0x15,0xb0,0x62,0xad,0xa9,0x11,0x4f,0x86,0xde,0xc6,0xe8,0x32,0x46,0x78,0xeb,0x60,0x81,0x6b,0x8f
db	0xac,0x80,0xbf,0xa4,0xc4,0xb7,0x5f,0x3b,0x2f,0xf8,0xe4,0x05,0xcf,0xbf,0xa3,0x14,0x6f,0x16,0xbc,0x6c,0x4e,0x31,0xd7,0x79,0x09,0xcf,0x9c,0x58,0xa3,0x0b,0x1a,0x31,0x4b,0xda,0xcb,0x11,0x35,0xb1,0xf5,0xbb,0xfb,0x00,0x46,0x6d,0x70,0x5e,0x4a,0x85,0x19,0xdf,0xb5,0xd0,0x03,0x2e,0x5d,0x01,0x95,0x4e,0x5a,0x59,0x99,0x24,0xac,0x3f
db	0x2d,0x64,0xaf,0xef,0x40,0x16,0x2a,0xcc,0x6a,0x6c,0x0f,0xe3,0x45,0x15,0x74,0x3d,0xea,0xdb,0xa7,0x3f,0xd2,0x50,0x4d,0xc7,0xc6,0x19,0x36,0x84,0xf4,0xbd,0x09,0xff,0xe7,0xf3,0xc0,0xa5,0x34,0x49,0x8a,0xfe,0x83,0xcd,0xe4,0x80,0x7d,0xe3,0xff,0xc9,0x8a,0xb9,0xd6,0x34,0x01,0xd1,0x47,0x16,0x5e,0x7c,0x16,0xf5,0x7c,0xf8,0xb5,0x53
db	0x26,0x84,0x89,0x73,0xf3,0x7f,0x9c,0xb0,0x2f,0x07,0x9e,0xf2,0x12,0xdf,0xba,0xc0,0x15,0xd0,0x3a,0x59,0x9d,0xde,0x67,0x5e,0x1c,0x2b,0x4b,0x84,0xb8,0x89,0xfb,0x62,0x90,0xe9,0x89,0xd9,0xdb,0xb7,0x21,0x4a,0x9f,0xbd,0xc0,0x02,0x01,0xda,0xb3,0x4c,0x9d,0xfb,0x46,0xa1,0xd0,0x3c,0xf5,0x27,0x6f,0x70,0xb5,0xa9,0x74,0xdc,0xa0,0x76
db	0xb7,0x3a,0x53,0x18,0xdd,0x80,0x5e,0x43,0xb5,0x35,0xe4,0x0e,0x26,0x27,0x0a,0xab,0xe8,0x4d,0x2e,0x89,0x20,0xc3,0xff,0xe4,0x7f,0x03,0x2c,0x5f,0x25,0xc7,0x70,0x53,0x27,0x4c,0xc8,0xb9,0xb1,0x81,0x10,0x7a,0xa2,0x65,0xe4,0x0b,0x65,0x8e,0x3d,0x2f,0x96,0xa0,0xa5,0x7b,0x4f,0x09,0xe9,0x9d,0x10,0x06,0xf7,0x18,0xad,0x2d,0x7f,0xb8
db	0x8f,0x08,0xa7,0x2c,0xda,0x82,0xbe,0x5c,0xd6,0x1d,0xb6,0xe2,0x9b,0xa2,0xfc,0x18,0x8c,0x8d,0xf7,0x81,0xf4,0xc6,0x1e,0xcb,0xe5,0x73,0xa6,0x74,0x06,0x20,0xf3,0xa9,0xcb,0x80,0x01,0x55,0x7e,0xc0,0x6a,0x1f,0x5a,0x5b,0xb1,0x56,0x5d,0xd8,0x2a,0xd5,0xf5,0x57,0xe8,0x48,0x6c,0xfb,0x9e,0x93,0xa7,0x0e,0x13,0x2b,0x68,0xc5,0x6b,0x17
db	0x43,0xb0,0x58,0x04,0x65,0x3d,0x46,0x57,0xa7,0x3d,0x99,0xb8,0xa1,0x48,0x17,0x44,0x67,0x2a,0x0d,0x44,0x87,0x9f,0x63,0xd7,0x92,0x56,0x7b,0xab,0xd3,0x6a,0xbd,0x4f,0xc0,0xc3,0xd2,0xee,0xd1,0x3d,0xd1,0x18,0x2e,0x6a,0xf5,0x3b,0x67,0xa0,0x0a,0xf3,0x11,0x49,0xc5,0x4b,0xef,0xcf,0x00,0xfd,0x22,0x8f,0xa0,0x9c,0x99,0x32,0x2f,0x58
db	0xf9,0x97,0x98,0x13,0x4a,0x88,0x50,0xcc,0x58,0x1e,0x27,0x02,0x34,0x7d,0xec,0xf6,0x88,0x3a,0x74,0xb5,0x34,0x6d,0x6f,0x52,0x2d,0x20,0x02,0x70,0x22,0x27,0xdf,0x7a,0xff,0x30,0x36,0x66,0x1a,0xa0,0x51,0xc3,0x75,0x9a,0x06,0xe5,0x3f,0x6c,0x74,0x0d,0x15,0xa2,0xb6,0xe5,0xcd,0x55,0x4d,0xea,0x65,0x8f,0xbb,0xb2,0xd4,0x95,0x73,0xa4
db	0xcd,0xb9,0xc8,0x82,0x60,0x49,0xe9,0x36,0xc9,0xb1,0xe9,0xcb,0x52,0xae,0xa7,0x7a,0x64,0xab,0x75,0x84,0x03,0x4b,0x37,0xf7,0x07,0x75,0xf7,0x1c,0x32,0x19,0xb6,0x8b,0xca,0x7c,0x43,0x15,0xe8,0xec,0x57,0x89,0x1d,0xe2,0xa0,0x80,0xc5,0xb6,0x02,0x29,0xfd,0xda,0xe0,0x14,0x93,0xb4,0xb3,0x44,0x2e,0x17,0x2f,0xed,0x3b,0x38,0x6e,0x8f
db	0xe0,0x3d,0xc6,0x77,0xe9,0xa7,0x76,0xcb,0x98,0x2d,0x08,0x61,0xcf,0x1b,0x25,0x3f,0xfb,0x1d,0x99,0xb1,0x5a,0x3c,0x53,0x96,0x4e,0x09,0x11,0xf6,0x5b,0x09,0x31,0xe1,0xad,0xb0,0xaf,0x7b,0xec,0xf9,0xa8,0x68,0xb7,0x93,0x57,0xf7,0x17,0x77,0x87,0x2b,0xdb,0x00,0x28,0xc6,0x48,0xac,0xff,0xcd,0x26,0x4a,0x8a,0x76,0x9a,0x2a,0x1d,0x37
db	0x4c,0x70,0x4f,0xf6,0x52,0xe3,0x7a,0x78,0x94,0x5b,0x0b,0x50,0xb4,0x48,0x03,0xcd,0x78,0xd0,0x5d,0x89,0x6d,0x76,0xaf,0x9d,0x67,0xc3,0x75,0x6f,0x6a,0x2d,0xe2,0xb7,0x58,0x51,0x10,0x0d,0xef,0xa0,0x1a,0x74,0x28,0x3a,0x97,0x19,0x4f,0x3c,0x8a,0x86,0x3d,0xe4,0x66,0x3d,0x57,0xb4,0x66,0xb3,0x0b,0x4f,0x57,0x57,0x34,0x2e,0xc7,0x0c
db	0x11,0xdf,0x3c,0xb4,0x9f,0xe1,0xd5,0x27,0x41,0x08,0xec,0xca,0x18,0x88,0x48,0x5e,0x88,0x55,0x89,0x71,0xe6,0xa5,0x90,0x7c,0x3b,0xe5,0xf3,0x2a,0xd7,0xf5,0x0b,0x3d,0xbb,0x47,0xad,0xd7,0x78,0x41,0xa8,0xef,0xd4,0x36,0x31,0xd1,0xe4,0x9c,0x87,0x9e,0xb1,0x11,0x0e,0xff,0x8f,0x4d,0x79,0x65,0xc4,0x83,0x75,0x33,0xc9,0x89,0xe2,0xc3
db	0x41,0x68,0x11,0xe7,0xe4,0x58,0xb9,0xf1,0xee,0x06,0x48,0x4d,0xc3,0xc7,0x76,0x60,0x42,0x94,0x8f,0x0d,0xb9,0x53,0x46,0x78,0x06,0x97,0x94,0x36,0xf4,0x3e,0xf3,0xdd,0x5b,0x46,0xe1,0x9d,0x3f,0x9e,0x78,0x00,0x9e,0xe7,0xcb,0x9e,0xc8,0x30,0x87,0x4a,0x52,0x91,0xd5,0xe2,0xa3,0x65,0x98,0xb2,0xc9,0x6c,0xfb,0x4e,0x54,0x5a,0x9f,0x57
db	0x2c,0x4a,0x76,0xe4,0x97,0x88,0xd5,0x6a,0x0e,0x6c,0x7c,0xef,0x78,0x2a,0x7c,0x26,0xa3,0x25,0xf6,0x33,0x82,0x46,0x6d,0x91,0x0d,0xe4,0x83,0xec,0xf1,0x24,0xf8,0x0a,0x34,0xec,0xfc,0x7e,0x47,0xda,0x9a,0x17,0x1b,0x33,0xd0,0xf1,0x70,0xe4,0x0b,0xc7,0x70,0x58,0x1d,0x76,0x20,0x89,0xce,0x4f,0xd1,0xcb,0x3b,0x26,0xd1,0x98,0xd9,0x51
db	0xb1,0xd0,0xaa,0x4a,0xd5,0x10,0xf2,0xae,0xaa,0x14,0xa7,0x72,0x99,0x3d,0xc8,0xbf,0xfb,0xec,0x6a,0x14,0xdd,0x97,0x7b,0x2f,0x16,0x96,0x0f,0x41,0xb8,0x33,0x15,0x1b,0xa2,0x6a,0x7e,0x64,0x0d,0xab,0xe7,0x62,0xf5,0x6c,0x56,0x69,0x09,0x46,0x32,0x24,0x60,0x4e,0x21,0xc7,0x5b,0xee,0x0a,0xe2,0x94,0x7c,0x20,0xe2,0x06,0xa0,0xa2,0x36
db	0xa0,0x7d,0xb5,0x37,0x2a,0xee,0x20,0x25,0x4c,0xba,0x9a,0x06,0x4c,0x07,0x9b,0xea,0x55,0xac,0x2a,0xf7,0xb9,0x5c,0x23,0xac,0x43,0xda,0x9d,0xad,0x76,0xe2,0x5f,0xe0,0x27,0xaf,0x0a,0x5e,0x3d,0x54,0x84,0xfc,0x19,0x75,0x8c,0x62,0x4d,0x37,0x17,0x1a,0x90,0x55,0xb8,0x7e,0xa1,0xad,0x31,0x1a,0xc0,0x91,0x96,0x51,0xa9,0x5f,0xbb,0xb9
db	0x95,0xbf,0xe2,0xd5,0x7e,0x31,0xba,0xc4,0x1e,0x63,0x98,0xd3,0xe2,0x7d,0x87,0xa5,0x46,0xe3,0xae,0xe1,0xe8,0x4e,0x74,0x29,0x0e,0x4b,0x10,0xa8,0x7f,0x3a,0xe5,0x60,0x0f,0x49,0x6a,0xcd,0x3d,0x5a,0x8e,0xf1,0x48,0xd0,0x80,0x7b,0xa3,0x7f,0x06,0x47,0x2b,0x60,0xf2,0x17,0xc3,0xe1,0x26,0x1e,0xb7,0x0f,0x2b,0x7c,0xc7,0xb8,0x3a,0x4f
db	0xad,0x05,0x97,0x88,0x93,0x82,0x8e,0x06,0x77,0x44,0xd1,0x65,0xfd,0x18,0x48,0xd6,0x88,0xcd,0x5c,0xbd,0xe4,0xaa,0xea,0xf1,0xed,0x16,0x5f,0xb3,0x58,0xe2,0x69,0x82,0xbe,0x9e,0xfc,0xcb,0xf6,0x17,0xa9,0x70,0xeb,0x08,0xd7,0x06,0x86,0xf6,0x5a,0x43,0x68,0x7b,0xcf,0xa3,0xfa,0x26,0x5e,0xe5,0x42,0xd3,0x5a,0xc8,0x1c,0x3b,0x8d,0x2d
db	0xf1,0x45,0xb0,0x97,0x90,0x0b,0xe7,0x2d,0xab,0xd7,0xd8,0x8a,0x16,0xf9,0x5f,0xa6,0xcf,0xc5,0x60,0x2c,0x34,0x5a,0x2e,0x2b,0xb9,0xb4,0x9c,0xa7,0x09,0x77,0xd2,0x3f,0x8c,0xf3,0xf6,0xf7,0xe0,0x27,0x79,0xc3,0x4e,0x61,0x7d,0x09,0x50,0x05,0x01,0x35,0x1b,0x33,0x54,0x6f,0x90,0x9a,0x19,0xcd,0x86,0x45,0x23,0xcd,0x6f,0x1b,0x62,0xc5
db	0xce,0x4e,0x8e,0xff,0xe7,0x12,0x32,0x85,0x9a,0xc4,0x11,0x83,0xcf,0x78,0xd7,0x41,0x99,0x64,0x20,0xa6,0x69,0xdd,0xe3,0x53,0x98,0x6b,0xc7,0x98,0x51,0xc5,0xf8,0x3e,0xa3,0x5f,0x0d,0x78,0x2f,0xa7,0x05,0xff,0xe5,0x3a,0x0f,0x7c,0x09,0x58,0x3f,0xaa,0x0d,0x9a,0x9d,0x8d,0xe7,0xbf,0x6b,0x7d,0xfe,0x3a,0x4f,0x5c,0x50,0xb2,0xe7,0xc5
db	0xa5,0x13,0xde,0xc8,0xe8,0x59,0xac,0xb0,0xdd,0xc0,0x81,0xa7,0x0b,0x78,0x32,0x23,0x76,0x85,0x11,0xef,0xe3,0x88,0x6f,0x7f,0xa9,0x09,0x7b,0x0c,0x6f,0x34,0xb2,0x67,0x5e,0xd6,0x11,0xad,0xd7,0x3b,0xf2,0xbb,0x66,0x5b,0xde,0x22,0xfc,0x55,0x26,0xa1,0x89,0x80,0x2e,0xb8,0xf3,0x3c,0xf8,0x1e,0xba,0x99,0x1c,0x24,0x33,0xb4,0xe6,0x17
db	0x2b,0x9c,0x80,0xe5,0x9b,0x58,0x54,0x70,0xcd,0x15,0x81,0xcd,0x51,0x48,0x75,0x24,0x27,0xf5,0x30,0x79,0xc1,0x16,0xff,0x89,0x70,0x12,0x74,0x07,0x9d,0x39,0xf2,0x9c,0xc6,0x89,0x8d,0x94,0x41,0x01,0x04,0xf5,0x16,0x99,0xf3,0xf0,0xd1,0xf5,0x6d,0xd3,0x11,0x19,0x29,0x36,0xfb,0x41,0xf9,0x32,0xb9,0x0f,0x13,0xaf,0xac,0xfb,0x30,0x75
db	0x62,0x8c,0x04,0x5b,0xf1,0xce,0x52,0x9b,0xbe,0x8c,0xf9,0x86,0x5d,0x7d,0xc1,0x8e,0x41,0x76,0x42,0x63,0xd7,0x74,0x8e,0x2c,0x46,0xa1,0x0a,0x51,0xb5,0xec,0xe9,0x91,0x56,0xbc,0xdc,0x32,0xfc,0x10,0xb5,0xca,0x5b,0x4b,0x72,0x99,0x07,0xff,0x01,0x11,0x2c,0xa4,0x60,0xf5,0x6b,0xd4,0xa8,0x96,0x21,0xee,0xbe,0x14,0x8f,0x69,0x99,0xdc
db	0x43,0x7f,0x13,0x3d,0x17,0x1e,0xa3,0x1b,0x21,0x23,0x26,0x7e,0xff,0x80,0x6b,0x66,0x3e,0xb2,0x48,0x1a,0x77,0x3c,0x50,0xe2,0xca,0x4d,0xc6,0xdb,0xfd,0xd1,0x23,0xcc,0xcb,0x01,0x25,0xc0,0x62,0x8d,0xe5,0x9c,0xb7,0x13,0x97,0xf5,0x49,0x01,0x19,0x45,0x45,0x83,0x17,0xff,0x8e,0x94,0x8c,0xb0,0xc0,0xaf,0x46,0x62,0x0e,0x62,0xb7,0x8c
db	0xd5,0xcf,0xb9,0x82,0x6e,0x8a,0xb9,0x22,0xbc,0x30,0xf9,0x65,0xc2,0x7f,0xce,0x6b,0x4d,0xad,0x87,0xcb,0x23,0xab,0x57,0x36,0x6a,0xb7,0x8c,0x63,0x17,0x60,0x13,0xa1,0x1f,0x3d,0xa4,0xd4,0xab,0x5d,0x97,0xc7,0x18,0xaf,0xf8,0xae,0x13,0x64,0x2a,0x19,0x34,0xe2,0x28,0x28,0x4f,0x32,0x2a,0xd8,0x43,0x79,0xaf,0x1e,0x56,0xfc,0x97,0x51
db	0x67,0x8c,0x63,0x80,0x32,0x63,0x71,0x5c,0x78,0x00,0xeb,0xfd,0xa2,0x96,0x58,0x21,0x36,0x13,0x02,0xe5,0xa4,0xb7,0xcd,0x5a,0x30,0xa0,0x5b,0x7b,0x23,0xa4,0xcc,0x54,0x64,0x6f,0x6d,0x9b,0xaf,0xea,0x49,0x69,0x9e,0x2f,0x51,0x5c,0xe7,0xa3,0xa3,0xb8,0xac,0xed,0x47,0x23,0x7a,0x37,0x38,0xe3,0x15,0x98,0x6f,0x50,0x6c,0x8d,0xa7,0xe6
db	0xa8,0x39,0xcc,0x63,0x08,0xeb,0x8f,0x8c,0xfd,0x83,0xaa,0x34,0x75,0x19,0xc0,0xf4,0xd6,0x25,0x18,0x94,0x9d,0xa1,0x7e,0xc8,0x6b,0x19,0x76,0xc0,0x8d,0xaf,0x51,0xe5,0x7c,0x8a,0x98,0x17,0x80,0x90,0xc0,0xb6,0xed,0x5c,0x8f,0x33,0x56,0xba,0xce,0xbe,0x83,0x87,0x5d,0x51,0x2e,0x64,0x84,0xa6,0x9d,0x49,0x27,0x5b,0x92,0xe0,0xe7,0xac
db	0x37,0x3d,0x22,0x5e,0x25,0xe7,0xca,0x2f,0x5d,0x2f,0xa0,0xd5,0xcb,0xe9,0xac,0x84,0x5b,0x19,0x72,0x1c,0x2c,0x0a,0xd1,0xb7,0x73,0x24,0x8a,0x0f,0xe0,0x07,0xd8,0x49,0x4d,0x23,0x1b,0xac,0xb8,0xd1,0x42,0xd4,0xdf,0xf8,0x4d,0x85,0xa2,0x37,0x30,0x46,0x38,0x88,0x55,0x1d,0xea,0x37,0x54,0x8c,0x43,0xb0,0xed,0x01,0x53,0x75,0xe6,0xf7
db	0x9b,0xe6,0x10,0x91,0x6e,0x80,0x11,0xf9,0x96,0x29,0x4f,0x08,0x77,0x2b,0x7e,0xdb,0x5b,0x14,0xbd,0x77,0x37,0xe8,0x36,0x07,0x4a,0xe4,0xd8,0xa2,0x4e,0x38,0xea,0xeb,0xc2,0xd6,0x43,0x59,0x20,0x0c,0x12,0x31,0x6c,0x27,0xc5,0x7b,0xfc,0xfc,0x54,0x94,0x1d,0x5f,0x82,0x73,0xd7,0x1f,0x43,0x3a,0x73,0xc4,0xf3,0xb3,0xbb,0x53,0xfe,0x22
db	0xc0,0xa4,0x7e,0x2b,0x84,0x1b,0xef,0x6d,0x83,0x9d,0xb3,0x8b,0x2a,0x6c,0xea,0x1e,0xfa,0x77,0x01,0x35,0xd2,0x5b,0xc4,0xd3,0xe7,0x1e,0xca,0x73,0x8b,0xb9,0x1f,0xfb,0x67,0xf2,0xdd,0x03,0xe6,0xca,0xfe,0x3b,0x61,0xd7,0xb5,0x96,0xe0,0x85,0xc2,0x23,0xa7,0xea,0x38,0xbf,0x6e,0x29,0x9e,0x8e,0x18,0xd4,0xbf,0x16,0x73,0xf9,0x18,0xef
db	0xc9,0xaf,0x6c,0xe2,0xdc,0xa4,0x58,0x9c,0xf5,0x6d,0x4a,0xc8,0xb4,0x8f,0x16,0x02,0xb7,0x65,0xd3,0x32,0x3b,0x83,0xfe,0xf3,0xc7,0xba,0x68,0xf4,0x95,0xa4,0xf6,0x33,0x57,0x43,0xbe,0xae,0x83,0xa9,0xe4,0x0d,0x0b,0x23,0xaa,0xbc,0x15,0x53,0x18,0x4d,0xb4,0x35,0xe3,0x8e,0x86,0xfe,0xe4,0x98,0x5d,0x63,0x23,0xce,0x44,0xea,0x4d,0x64
db	0x86,0xf8,0x06,0x8f,0xc0,0x73,0xa6,0x6d,0x04,0x53,0x47,0x95,0x0f,0x6d,0x6c,0x01,0x1c,0x3f,0x7b,0x83,0xe4,0xc2,0x40,0xb8,0x97,0x26,0x9e,0x35,0xb0,0x76,0xee,0xe4,0xc7,0xd8,0xaa,0x22,0x83,0x96,0xe1,0x34,0x7b,0x78,0x31,0xee,0xd3,0x9a,0x50,0xd4,0x05,0xfd,0xd6,0x15,0xca,0x83,0x2f,0x49,0xfd,0x00,0x23,0x82,0x39,0xac,0x46,0x7a
db	0xe4,0xb5,0xcc,0xee,0xbb,0xaa,0x98,0x82,0xb5,0x27,0x45,0xd5,0x96,0x6e,0x89,0x01,0x1e,0x30,0xe4,0x1c,0x3a,0x65,0xcc,0x9f,0xda,0x38,0xf0,0x4c,0x68,0xfa,0xe5,0xf2,0xe2,0xce,0x34,0xc2,0x15,0xfd,0x21,0xf6,0xe2,0x33,0xbd,0xef,0xfd,0x49,0x15,0xdc,0x38,0x3b,0x24,0xba,0x3a,0x80,0x35,0x60,0xbe,0x50,0x17,0x38,0x3e,0xe2,0x96,0x84
db	0x01,0x41,0x6c,0xb2,0x0b,0xc6,0xff,0xce,0xb3,0x37,0xa2,0x46,0x27,0x33,0x8e,0x04,0x44,0x8a,0x7c,0x64,0x0e,0xbc,0xed,0x74,0x4f,0x40,0x58,0xf4,0x8c,0xf8,0xd9,0x92,0xa9,0x0b,0x18,0x7c,0x93,0x95,0xca,0xa7,0x3e,0x1d,0xad,0x68,0x80,0xd9,0xdb,0x81,0x78,0x50,0x37,0x49,0xbc,0x64,0xc2,0x52,0x5c,0x70,0x7e,0x0a,0x26,0x7e,0xc6,0xbf
db	0xd2,0x7f,0x05,0x55,0x7a,0x5a,0x3e,0x9e,0xe3,0x8b,0xf5,0x95,0x2b,0xd8,0xb4,0xb8,0xc6,0x5d,0x91,0xb8,0xc7,0x7c,0xe1,0x75,0xf2,0x43,0x6b,0x73,0xb7,0xb1,0x10,0xf2,0xa7,0x1e,0xab,0xaf,0xc9,0xc0,0x3b,0xab,0xbe,0xf7,0x4a,0x43,0x9c,0xca,0x3d,0x00,0x5b,0x02,0xf8,0xa2,0x4f,0x57,0x81,0xb0,0xde,0x1e,0xd1,0x60,0xbe,0x6c,0x0d,0xe6
db	0xcd,0x51,0xb6,0xc7,0x00,0x52,0x37,0x4f,0xfc,0xee,0xe2,0x43,0x5c,0x61,0x76,0xed,0x80,0x72,0x38,0x26,0x94,0xfe,0x28,0x06,0xfb,0x62,0xa6,0x21,0x9b,0x53,0x60,0x1b,0xf0,0x56,0xae,0xba,0x6b,0x52,0x27,0x2a,0xd5,0xed,0x11,0x92,0xa2,0xe2,0xab,0xdd,0x05,0x38,0x38,0xae,0xeb,0x72,0xcb,0x6c,0xa5,0x2a,0x73,0xc5,0xfc,0xb0,0x36,0x83
db	0xd6,0xe6,0xda,0x6b,0x38,0x72,0x5e,0x8d,0xaf,0x11,0x5f,0x5b,0x89,0x58,0x21,0x36,0xf6,0x7d,0x42,0x48,0xdc,0xce,0xaa,0x94,0xf0,0xc3,0xc5,0x2c,0x08,0x2a,0x36,0x35,0x25,0x95,0xc4,0x11,0x09,0xea,0x7a,0xbc,0x2e,0xc6,0x0a,0x5b,0x4f,0x86,0xeb,0xc2,0x38,0x71,0x48,0x8c,0x63,0x79,0x3b,0xe4,0xba,0x14,0x44,0x31,0x28,0x4f,0x9d,0xb4
db	0x26,0xa6,0x3b,0xea,0x3f,0xcb,0x30,0x6c,0x02,0x13,0xdb,0x4c,0x9c,0x76,0xc8,0xd8,0x01,0x52,0x3d,0x2f,0x51,0x70,0x15,0x91,0xec,0x8f,0x80,0xed,0x88,0xb7,0xfa,0x91,0x2c,0x10,0xcd,0x3b,0x92,0x85,0xe7,0xe8,0x11,0xfa,0x50,0x15,0xe2,0xdf,0xf7,0xbe,0xa4,0x2d,0x13,0x75,0xa6,0x00,0x25,0x8d,0xe1,0xb6,0x9b,0xbb,0x64,0xfb,0x5c,0xde
db	0x97,0xcc,0x00,0x51,0xd6,0xac,0x67,0xc3,0x91,0x1e,0x56,0x36,0x2b,0x43,0xed,0x8c,0x67,0x7b,0xf6,0x54,0x6f,0x91,0x44,0x28,0x93,0x60,0xac,0xca,0xb9,0x91,0x7e,0xeb,0x49,0xd8,0xfc,0x12,0x6c,0x40,0x9d,0x0a,0x4d,0xb4,0xab,0xe6,0xad,0x5b,0x8e,0x2d,0x3e,0x53,0xa1,0x88,0xf7,0x41,0x71,0xa7,0xff,0x05,0x46,0x04,0x34,0x1f,0x12,0x89
db	0x92,0xc1,0xf9,0x26,0x16,0x23,0xb6,0x59,0x82,0xdc,0xa7,0xb8,0xa4,0x8a,0x0f,0x1d,0x7d,0x8f,0x44,0xe8,0x4f,0x70,0xbb,0xdb,0x8d,0xe6,0x7e,0x9d,0xd9,0x44,0x10,0x41,0x6c,0x3f,0xb7,0xe8,0x6f,0x39,0x93,0xe1,0xde,0xb8,0x6c,0xba,0x99,0x95,0xb7,0xc8,0xb2,0x2a,0xcd,0x81,0x53,0xc3,0xb5,0x2a,0x8a,0xd6,0x62,0x1e,0x74,0x4d,0xde,0xfa
db	0xff,0x7b,0xed,0x11,0x1e,0x44,0x3e,0x93,0x1c,0xae,0x7c,0x5c,0xed,0x52,0x75,0x5e,0x0a,0xf3,0x95,0xce,0x47,0x86,0x1b,0x7f,0x17,0x09,0x12,0xcc,0x08,0xca,0x16,0x11,0xf1,0xa1,0x39,0x78,0x89,0x5c,0x11,0x25,0xc7,0x39,0x5f,0x97,0x74,0xbc,0xa9,0x2a,0x25,0x5d,0xdd,0x93,0x0d,0x8c,0x74,0x07,0x1e,0xd9,0x9f,0xc1,0x38,0x9c,0xbf,0xe0
db	0x42,0xad,0xb2,0xe7,0xb1,0x84,0x82,0xb4,0x56,0xbe,0x3c,0x42,0xb0,0xce,0x2c,0x94,0xb7,0xe6,0x78,0xc8,0x04,0x06,0x58,0x15,0x3e,0xdc,0xf6,0x9a,0x58,0xc3,0xe3,0x85,0x16,0xc8,0x84,0xba,0x8f,0xbc,0x94,0xa7,0x44,0x04,0x29,0xc4,0xd8,0xec,0x63,0xc4,0x47,0x58,0x22,0x02,0x08,0x20,0x44,0x39,0x52,0xa5,0x33,0xfe,0x1c,0x30,0x27,0x92
db	0xbf,0x42,0x44,0x4c,0x3f,0x3d,0x00,0x7b,0x21,0xef,0xbb,0x25,0x75,0x4c,0xb2,0xe7,0x66,0xc9,0xc1,0xfb,0x1e,0x13,0x04,0xd0,0xcb,0x69,0x51,0x9d,0x9a,0xb0,0xb0,0xec,0xb0,0x12,0x24,0x84,0x57,0x9f,0xef,0xb4,0x19,0x50,0xa6,0xf5,0x03,0xa3,0x93,0x0f,0x77,0xaf,0xe0,0x4c,0xa5,0xd3,0xb0,0xd8,0x5e,0xc3,0x78,0x94,0xd5,0x6e,0x48,0x58
db	0x7a,0x93,0xb1,0x62,0x60,0xea,0xa1,0xba,0x7a,0x86,0x6e,0x87,0xe9,0x97,0xe0,0x7c,0x1e,0xb6,0x63,0x94,0x76,0x5f,0x9c,0x95,0x65,0x00,0xd4,0x14,0x0e,0x4c,0x87,0xe7,0xcd,0x9e,0xb1,0xe2,0x13,0x1b,0xb1,0x8a,0x83,0xaa,0xaa,0x34,0xcd,0xb2,0xf6,0x7f,0x12,0xb0,0x79,0xff,0x1e,0x04,0xc8,0x9a,0xfc,0x41,0x88,0xbb,0x28,0x42,0xeb,0x45
db	0x47,0x8b,0xcb,0x57,0x03,0xcd,0xe5,0x9a,0x84,0xea,0x0a,0xb5,0x0c,0xb8,0x30,0x33,0xd6,0xde,0x66,0xa8,0x57,0xf9,0x76,0x4f,0x0f,0x8f,0x53,0x56,0x57,0x91,0xd4,0x55,0xf5,0x78,0xde,0xa6,0xa2,0x59,0xc8,0xb0,0xf2,0xb9,0xfa,0x6d,0x4a,0x70,0x86,0x3d,0x24,0x1b,0xc6,0xb8,0x06,0xf5,0xea,0x09,0x63,0x9b,0x1e,0x61,0x18,0x85,0xba,0x08
db	0x20,0xaa,0x33,0x66,0xcf,0xa7,0xff,0xf5,0x30,0xfe,0xf8,0x39,0xd3,0x88,0x9a,0x5b,0x3f,0x55,0xa6,0x00,0x4c,0x57,0x0d,0xd1,0xa4,0x0c,0xe7,0x8a,0x95,0xd8,0x64,0xc7,0x93,0x51,0x84,0xa6,0x41,0x2c,0xfc,0xb0,0xfb,0x99,0x9a,0xcd,0x2c,0x62,0x3a,0xca,0x43,0x15,0xf2,0x5a,0x22,0x25,0xa4,0x91,0xa3,0x7c,0x42,0x69,0xc1,0x67,0xe3,0xf5
db	0xd4,0x92,0x54,0xbd,0xb3,0x57,0xe5,0x19,0xca,0x1b,0x9c,0x19,0x79,0x9d,0xbf,0x89,0xfc,0xaa,0x72,0xcd,0xcb,0xc5,0xbc,0xdd,0x0c,0x7c,0x31,0x42,0xb0,0xc2,0x76,0xe5,0x8b,0x9b,0x7c,0x92,0x13,0x20,0x5c,0xdc,0x94,0xfc,0xa1,0x90,0x34,0x27,0x88,0x9f,0xe5,0x97,0x5f,0xc3,0xa3,0x83,0xca,0x8b,0xf8,0xac,0x36,0x33,0x47,0xc6,0x20,0x2f
db	0x04,0x2d,0x13,0xc1,0x3c,0x07,0x6e,0xf0,0xe2,0x3d,0x32,0x5c,0x50,0x41,0xf2,0x92,0x3f,0x25,0x2c,0x80,0x34,0xa5,0x90,0x2b,0x97,0x6e,0xd1,0xa2,0xa6,0xf4,0x4a,0xe0,0x20,0xd9,0xb9,0x2b,0x66,0xe5,0x06,0x73,0x97,0xfe,0x80,0x70,0x28,0xf9,0xb6,0xae,0x93,0x27,0x7a,0x65,0xff,0x23,0xc1,0x78,0x18,0x92,0xc9,0x0b,0x05,0x82,0x93,0xbc
db	0x73,0x3f,0x98,0xe9,0xa0,0x6d,0x20,0x8d,0x13,0xb1,0xf0,0x7e,0xe4,0x07,0x21,0x7d,0x6d,0xea,0x03,0x59,0xf8,0x29,0xc0,0xc8,0x7d,0xce,0xd1,0xf8,0x67,0x82,0x7f,0x84,0xe8,0x77,0xa9,0x9c,0xa2,0x34,0xdf,0xa9,0xac,0xec,0x6d,0x54,0xe5,0x0f,0xcb,0xdb,0x86,0xbc,0x01,0x44,0x91,0x3b,0xc8,0x85,0x4e,0x1d,0xe4,0x74,0x19,0xc6,0x39,0x2e
db	0xdf,0xf2,0x8f,0x3a,0x7f,0xe3,0x1e,0x55,0x45,0xcb,0x7e,0xde,0xcd,0xa6,0x1c,0xef,0x20,0xf7,0x07,0x31,0x94,0x9a,0x3d,0x04,0xd7,0x5e,0x65,0x20,0x6a,0x4d,0x31,0x1e,0x6f,0x89,0x40,0x45,0x1f,0x37,0xc1,0x7e,0x07,0xd5,0xa6,0x38,0x4a,0xf1,0x39,0xae,0x72,0x26,0x60,0xb0,0xb5,0xc7,0xd3,0x9a,0xaf,0x57,0x12,0xe9,0x34,0x28,0x8b,0xaf
db	0xd8,0x62,0x24,0x58,0xe2,0xcd,0xa2,0x9e,0x74,0x23,0x2d,0x52,0xc7,0x09,0xe5,0xb5,0xf5,0xc1,0xd3,0xa3,0x19,0xe5,0x1d,0x8d,0x0c,0xdf,0x13,0x8d,0xa4,0xa7,0xc1,0x41,0xea,0x9e,0x6d,0x61,0xd4,0xa4,0x74,0xe5,0xf8,0x5f,0x9e,0xfd,0x6d,0xf6,0x6e,0x87,0x0f,0xb5,0xa3,0x82,0xac,0x64,0xb4,0xda,0x07,0x49,0x51,0xc2,0xfd,0xcb,0x55,0xa3
db	0x59,0x34,0xdf,0xa1,0xd6,0x90,0x62,0x43,0x1a,0xf9,0xae,0x85,0x5c,0x11,0x40,0xb2,0xbe,0xa5,0x03,0x04,0x4f,0xec,0x2c,0x58,0x2d,0xe9,0xda,0xcf,0xaa,0x2f,0xcf,0x60,0xc3,0x2c,0x6c,0x81,0x4d,0xf2,0x71,0x41,0xe4,0xae,0x4c,0xfa,0x8e,0x05,0x10,0xff,0x40,0xfa,0xea,0x96,0x78,0x6e,0xfc,0x35,0x35,0xec,0x84,0xf6,0x1d,0x24,0x60,0xcd
db	0x96,0x21,0x21,0xa7,0x32,0x90,0x3d,0x51,0x72,0x13,0xa4,0x9b,0x7e,0x94,0x3a,0x9d,0x97,0xf6,0x68,0xd8,0x08,0x42,0x54,0x7a,0xbb,0x9a,0x95,0x83,0xac,0xb8,0xb4,0x68,0xe3,0x31,0xdb,0xe2,0x32,0x8b,0x7d,0x57,0x62,0x1d,0x61,0x81,0xa1,0x36,0x7a,0x25,0x00,0x72,0x24,0x4c,0xa7,0x96,0x3b,0xa5,0x82,0xba,0x8e,0x89,0x1e,0x1b,0x8e,0xf4
db	0xab,0x91,0x85,0x7a,0x32,0x4a,0x47,0x9f,0xce,0xd2,0x51,0x77,0xcd,0xc9,0x02,0x54,0xf2,0x7b,0xcb,0xb8,0x83,0xe0,0xe0,0x1b,0x4a,0xa2,0xe0,0xd9,0x15,0xb6,0x02,0x19,0x75,0xa6,0xba,0xa6,0x98,0xd9,0x61,0x74,0xc6,0x48,0xa5,0x59,0x3d,0xc8,0x47,0xc9,0xe8,0x6b,0xbb,0x6d,0xcf,0x0e,0x8d,0x6b,0x58,0x8b,0x7d,0x4e,0x0b,0x3d,0x67,0xc4
db	0x8e,0x78,0x59,0x40,0x88,0x82,0x33,0x27,0x2c,0xfe,0x2a,0x6c,0xe4,0x80,0xee,0x5a,0xd4,0x5f,0xc8,0xf7,0x82,0x02,0x67,0xfd,0xcb,0x55,0x3e,0xd8,0x41,0xb3,0xce,0x93,0xfe,0xe7,0x56,0xf5,0x63,0xba,0xfa,0x2e,0x79,0xfc,0x11,0x5d,0xb0,0xc6,0x32,0x54,0xed,0x71,0x9b,0x15,0xce,0x62,0x09,0xd4,0x28,0x7f,0x7b,0xa1,0x50,0x5b,0x46,0x24
db	0x0e,0x40,0xa2,0xe2,0x7d,0x93,0xa6,0x2b,0x0b,0x9b,0x40,0x25,0xc9,0xca,0x7a,0x01,0x8b,0x7d,0x68,0xeb,0xd7,0x84,0xc1,0x9d,0xf9,0xfb,0xd0,0x1a,0xec,0xef,0x6b,0x4c,0x78,0x31,0x62,0x8e,0x9d,0xdc,0x78,0x8f,0xcb,0xf8,0xf9,0x41,0xdc,0x9f,0x6d,0x0a,0x27,0x67,0xce,0xbd,0xeb,0x87,0xb3,0x26,0xf3,0x51,0xe1,0xd6,0xd1,0x57,0x46,0xfe
db	0x21,0xb9,0x88,0x7c,0xdd,0xa2,0x49,0x71,0x24,0xfb,0xc4,0xc0,0x6a,0x6b,0x05,0x7f,0x80,0xb0,0x09,0x3b,0x9e,0x6c,0x59,0x31,0x3e,0xac,0x7a,0x2e,0x5c,0x04,0x03,0xa3,0x6e,0xf5,0x66,0xee,0xc2,0x9b,0x65,0x88,0x06,0xbf,0xf5,0xe3,0x23,0x73,0x38,0x88,0x99,0xf1,0x64,0x68,0xdf,0x7d,0x04,0x06,0x72,0x92,0x0b,0x62,0x5d,0x12,0x1e,0x4e
db	0xff,0x60,0x35,0xe3,0x0f,0xd9,0x8c,0xac,0x38,0x5b,0x91,0xc1,0x51,0xbb,0xa5,0x19,0x7d,0xfb,0x79,0xfa,0x42,0x3b,0xaa,0xf8,0xd3,0x0f,0xc3,0xf2,0xb2,0x68,0x91,0xae,0x28,0x83,0x4f,0x75,0xbd,0x20,0x5f,0x20,0xba,0xc2,0x75,0x85,0x74,0x23,0xf3,0x36,0x33,0x99,0x9c,0x64,0x4c,0xd1,0x5d,0xbd,0x06,0x46,0xbd,0x49,0xf0,0x86,0xc0,0xcb
db	0x1b,0xbd,0xec,0x98,0x5b,0xb1,0x80,0xba,0x12,0x42,0x22,0x09,0x9a,0x62,0x3c,0xa8,0x33,0xbf,0xce,0x92,0xd4,0x07,0xef,0x34,0x33,0x8f,0x67,0x1d,0x25,0x60,0xeb,0xd3,0xe4,0x31,0x63,0xa8,0xab,0xe3,0xab,0x70,0x50,0xd8,0x44,0x9f,0x39,0x51,0xd2,0xb9,0x4b,0x16,0xe4,0xfa,0xc5,0x47,0xf3,0xae,0xb5,0xfe,0x7d,0x5d,0x43,0x28,0xa6,0x3d
db	0xcf,0x71,0x23,0x6d,0x8e,0xd7,0x74,0xa4,0x86,0x9f,0x92,0x86,0x3c,0x1e,0x51,0xd4,0xe0,0xe6,0xd5,0xc4,0x53,0x3c,0x96,0x55,0xb9,0xac,0x63,0x5b,0xee,0x5a,0x03,0x84,0xb9,0x43,0x2c,0x0f,0x6d,0xbb,0xb5,0xca,0xf0,0x4f,0x3e,0x8b,0x3b,0x14,0x01,0x0e,0x81,0x0d,0xe6,0x62,0xa9,0x34,0x4e,0x03,0xc9,0x85,0x9f,0xc8,0x4f,0x52,0x3f,0x84
db	0x1b,0xab,0x7e,0xaf,0x93,0x22,0xe2,0x0d,0x41,0x79,0x50,0xb2,0x17,0xa7,0x9a,0x80,0xd5,0x65,0x40,0x3b,0x56,0x9b,0xc9,0x00,0xcf,0x03,0xf1,0xff,0xcd,0x72,0x27,0xdb,0x74,0x94,0x70,0x02,0xdc,0x3a,0xee,0x00,0xcc,0x08,0x0a,0xab,0x40,0x87,0x24,0xaf,0x7d,0x67,0x18,0xd0,0x7c,0xeb,0x91,0x1f,0x7e,0x9e,0x41,0x7b,0x39,0xf2,0xfe,0xaf
db	0xb7,0x6c,0x58,0xe0,0xdb,0xf7,0xf1,0x23,0x0b,0x98,0x08,0xfa,0xde,0xfa,0xf9,0x24,0x23,0xd1,0x7f,0x69,0xd3,0xb1,0x82,0x68,0x03,0x06,0x86,0x7a,0xf4,0x90,0x8d,0xa5,0xbd,0xbe,0x14,0x2f,0xa2,0x5e,0xaf,0x5c,0x1e,0x07,0x68,0x19,0x5a,0xd3,0x53,0x7d,0xe8,0x13,0x6b,0xe3,0x02,0x49,0x0d,0xd2,0x96,0x56,0xae,0x67,0x8a,0x27,0x61,0xa0
db	0x60,0x20,0x2c,0xb4,0x5d,0xdf,0xc3,0x24,0x50,0xa9,0xbc,0x3d,0x5c,0xf3,0x2e,0xb6,0xba,0x71,0xf0,0x04,0x43,0x84,0x4d,0x80,0xe9,0xa5,0xdd,0xb3,0x1e,0x5e,0x56,0x32,0x1a,0xd4,0xe3,0x10,0x57,0x35,0xa8,0xf1,0xe5,0x96,0xc1,0x27,0xef,0xcc,0x21,0x71,0x10,0xd1,0x07,0x7e,0xb3,0xab,0x95,0x64,0x86,0xaf,0xc9,0x15,0xe6,0x98,0x5e,0xb1
db	0xbd,0xde,0x99,0x38,0xfc,0x8d,0xb2,0x5a,0xa4,0x44,0x5b,0x74,0x31,0x31,0x07,0x93,0xf5,0x86,0x78,0xc5,0x82,0x26,0xfc,0x95,0x1f,0x33,0xd8,0xfe,0x70,0x42,0x2a,0xa7,0x3a,0xb1,0xb2,0x63,0xd6,0x5b,0x54,0x9c,0x54,0x45,0x4f,0x1b,0x4a,0xc2,0xb4,0x0e,0x99,0x48,0xde,0x8d,0xa6,0x5d,0xd3,0xdc,0x31,0xa4,0x2b,0x0d,0x44,0x6e,0x1a,0x10
db	0x3f,0x6c,0xa0,0xab,0xcb,0xb4,0xf6,0x18,0xba,0x11,0xd4,0xd4,0x70,0xc4,0xab,0x04,0x4c,0xe7,0xe9,0x53,0xe5,0xd9,0xe7,0xeb,0x21,0xa2,0x2c,0xc4,0xc6,0xc3,0xe7,0x73,0xd9,0xd3,0x84,0xb0,0x12,0x94,0x3b,0xfd,0xd9,0x32,0xba,0xe3,0x37,0xc1,0xb9,0x4d,0xea,0x3e,0x3d,0x31,0x4e,0xa0,0xe7,0x73,0x9d,0x4e,0x26,0xd1,0xdf,0xe6,0x26,0xcd
db	0xd7,0x17,0xd7,0x28,0x2c,0x04,0xe9,0x55,0xd5,0x70,0xaf,0xab,0xc1,0x07,0xbc,0xc4,0xd2,0x89,0xdc,0x22,0x59,0x19,0x0e,0xd8,0x8b,0xdd,0x46,0x7f,0xe4,0xad,0xa5,0x70,0xd7,0x18,0x51,0x30,0xd7,0xbc,0x26,0x45,0xe7,0xea,0xce,0xc7,0xf2,0xca,0xb1,0x9c,0x57,0x1e,0x10,0x5f,0x44,0x8d,0x3d,0xe8,0x55,0xa1,0x22,0x68,0x97,0xe8,0x03,0x9c
db	0x8b,0x63,0x81,0xd9,0xcd,0x4c,0x6c,0xe3,0x68,0xc9,0x35,0xee,0x94,0x13,0x25,0x0b,0x12,0x61,0xbd,0xee,0x6f,0xc7,0xe8,0xb5,0x01,0x7a,0x9e,0xd0,0x5a,0x46,0xc6,0x19,0x1b,0xc2,0xf1,0x2d,0xaa,0x53,0x29,0xcf,0x23,0x1a,0x4d,0x94,0x0a,0x50,0x64,0xf5,0x3b,0x52,0x55,0xac,0xa5,0x21,0x15,0x47,0xd9,0x14,0x8c,0x7f,0x4d,0x79,0x6b,0xc1
db	0x43,0x0a,0xf2,0x42,0xd2,0xb0,0x95,0x19,0x99,0xdd,0x1d,0x8e,0x84,0x8c,0x7e,0x59,0x69,0x93,0x86,0xae,0xf1,0x67,0x35,0x55,0x7c,0x5b,0x38,0x11,0x56,0xec,0x6c,0xbb,0xe8,0xc0,0x54,0xec,0x5f,0x65,0x13,0xe3,0x86,0xa0,0xb1,0xc1,0x5e,0x34,0x4f,0xdd,0x4d,0x00,0xc6,0x29,0x05,0x78,0x64,0x8c,0x19,0xb0,0xfc,0x8a,0xb2,0xc7,0x86,0x57
db	0xa2,0xdd,0xed,0x43,0xc1,0x7f,0xab,0x89,0x19,0xe8,0xa6,0xf5,0x7a,0x15,0xfe,0xd5,0x4f,0x53,0xde,0x78,0x42,0x76,0xf7,0x8a,0x54,0xe8,0x37,0xfd,0xee,0x82,0x20,0xd5,0xe2,0x32,0xb9,0x32,0x67,0xc7,0xff,0xdc,0xf0,0x40,0x07,0x28,0x55,0x16,0x56,0x84,0xe9,0x17,0x25,0x17,0x8e,0x10,0xef,0x9f,0xed,0x33,0x83,0x6d,0x9e,0x87,0x82,0xb8
db	0xa9,0x6b,0xcb,0xe5,0x04,0xfb,0x87,0x51,0x05,0x1a,0x64,0x64,0x51,0x34,0xa3,0x61,0x4a,0xe3,0xa6,0x35,0xa5,0xc9,0xe3,0xde,0xb0,0xcf,0x5f,0x68,0x49,0xbc,0x98,0xf9,0x0b,0x82,0xde,0xb1,0xf9,0x77,0x16,0x7c,0x1f,0x80,0x0c,0xfc,0xbb,0x6d,0x8e,0x92,0x93,0x00,0xc2,0xa5,0xbe,0xde,0x55,0x09,0x9d,0x83,0xa5,0x6c,0x0a,0xb5,0xc4,0x53
db	0xde,0xbc,0x07,0xca,0x0f,0x43,0xea,0x50,0x25,0xee,0x51,0x3b,0xfb,0x7a,0xcf,0x31,0x8a,0x19,0x1c,0xa2,0x2d,0x72,0x79,0x81,0xc6,0xb8,0xe6,0xe1,0xd8,0x3e,0x0f,0xc0,0xae,0x73,0x40,0x30,0x15,0xaa,0xe3,0x72,0xc3,0x36,0xc1,0x42,0x11,0xc5,0x3f,0xf5,0x69,0x78,0xea,0x95,0x54,0x36,0xe8,0x7e,0x9c,0xad,0xbd,0xcd,0x19,0xfe,0x4a,0x04
db	0xb4,0x54,0x14,0x98,0x58,0x6f,0x06,0x8f,0x8c,0x95,0xa8,0xc9,0xe8,0xc4,0x2b,0x03,0xaa,0x42,0x75,0x74,0xa2,0x63,0xdb,0xca,0xd1,0xf0,0x60,0xc3,0x63,0x84,0xfb,0xd7,0x5a,0x7b,0xca,0x45,0x8d,0x14,0xdc,0xf8,0x71,0x40,0x71,0xbb,0xa1,0x1a,0xd3,0x8c,0xfb,0xf6,0xf7,0xfc,0x82,0x72,0x50,0xc9,0xe3,0xc5,0xe2,0xb1,0x57,0xb1,0x24,0x3e
db	0x11,0x4d,0x96,0x1c,0x3a,0xe1,0xb6,0xb7,0x0e,0x55,0x35,0x6c,0xd8,0x2b,0xe3,0x78,0xcd,0xac,0x8f,0x24,0x70,0xc6,0x35,0x5b,0x6e,0x75,0x7a,0xf1,0x7d,0x87,0x53,0xcf,0x0a,0x24,0xb6,0x6a,0xfd,0xef,0x90,0x07,0xcf,0xde,0x30,0xbc,0x8c,0xec,0xda,0x6f,0x45,0xad,0x92,0xb6,0x8d,0x6b,0xb8,0x8e,0xdc,0xe5,0xbf,0x57,0x67,0x5e,0x2f,0x4d
db	0x5d,0xee,0x38,0x0a,0xaf,0xeb,0x62,0x84,0x2b,0x4c,0x30,0x7b,0x91,0x99,0x40,0x6f,0x09,0x2b,0x36,0xcd,0x04,0xeb,0x7c,0x8d,0xa5,0xbd,0xd6,0xb0,0xfc,0x27,0xcf,0x6b,0xdd,0xe1,0x94,0xbc,0x21,0xc6,0xc9,0x55,0x24,0xd4,0xa1,0x6f,0x1e,0xa2,0x81,0x31,0x22,0xb7,0x75,0x9e,0xa7,0x01,0x26,0x01,0x6c,0x12,0x91,0x02,0x87,0x40,0x5c,0x91
db	0x1f,0x0c,0x55,0x07,0x12,0xa7,0x48,0xdd,0xed,0xb6,0xfe,0x38,0x05,0xbc,0xe1,0x2e,0x3b,0x89,0x4f,0x98,0x65,0x22,0x93,0xda,0x09,0x9f,0x04,0x90,0x66,0x81,0xd1,0x56,0x27,0x8b,0x26,0x99,0xbe,0x93,0x08,0xf1,0xfb,0x80,0x5b,0xaa,0xc4,0x96,0x88,0x93,0xb6,0x01,0xae,0xf6,0x69,0xaa,0x6f,0x4d,0xde,0x2f,0xc7,0x24,0xbf,0xe9,0xb8,0xeb
db	0xcd,0xb2,0x0a,0x50,0x5c,0xd2,0x0b,0xfc,0x57,0x3b,0x96,0xf8,0xd9,0xbe,0xd2,0xb5,0x16,0xac,0x7c,0xe4,0x2f,0x46,0x93,0x86,0x48,0x91,0xfa,0xae,0xca,0x05,0x9e,0xfe,0x6e,0xae,0xa5,0x58,0x94,0xc0,0x58,0x1e,0xc5,0x69,0x28,0xe0,0x99,0x12,0x83,0xcf,0x35,0xe4,0x72,0x7d,0x4e,0x8b,0x66,0x56,0xb3,0xa6,0x2a,0x72,0x06,0x03,0x45,0xd1
db	0x95,0xc9,0x93,0xb7,0xf4,0x8a,0x83,0xce,0x17,0x8b,0xf0,0x8e,0x8f,0x4a,0x68,0x55,0xd8,0xfc,0x54,0x8d,0xb5,0x62,0x17,0xa8,0xe6,0x18,0x03,0x53,0x04,0xb8,0xbe,0xd2,0xd0,0x7a,0x84,0xe1,0x39,0x31,0xc5,0x74,0xf2,0x64,0x1c,0x3b,0xd5,0x52,0x9b,0x81,0x8a,0x8f,0x36,0xc8,0xab,0x3d,0xe1,0xa8,0x2a,0xf2,0x84,0x9a,0xca,0x0c,0xcf,0xc9
db	0x45,0x54,0x06,0xe8,0xd2,0x62,0x61,0x4d,0xeb,0x0b,0x38,0x4e,0x43,0x59,0x85,0x3a,0xe4,0xa3,0x25,0x15,0xc2,0xb5,0x7b,0x5e,0x2f,0xe6,0xc1,0x5d,0x2a,0xb7,0x57,0xb8,0x7e,0x61,0x51,0xc3,0x81,0x53,0x45,0x8a,0x6e,0x4c,0x89,0x84,0x2a,0x6b,0xca,0x15,0xff,0x97,0xfc,0x1f,0x8a,0x44,0xbd,0xcd,0x5e,0x32,0x6b,0x5f,0x78,0x7b,0xdf,0xdd
db	0x9d,0x2f,0x21,0xf2,0x14,0x40,0x5f,0x5a,0xd5,0x21,0x27,0x3d,0x0b,0x9f,0x9f,0xb0,0x8e,0xab,0x9e,0x68,0x96,0x02,0xfd,0x4d,0xcc,0x03,0xf0,0x03,0xfb,0x4c,0xac,0xfa,0x00,0x3b,0xea,0x1a,0x53,0x80,0x77,0xec,0x53,0xc3,0x3c,0x6c,0xf8,0xa5,0x3e,0x52,0x34,0xd4,0xa1,0x52,0xb8,0xd6,0x19,0x8c,0xdf,0x85,0x27,0x61,0x22,0xe7,0x43,0xeb
db	0x85,0xc0,0xbe,0x58,0xe6,0x60,0x81,0x4c,0xc6,0xbb,0xc0,0xbf,0x63,0x39,0x9d,0xad,0x2e,0xa8,0x2a,0x83,0x3d,0xfa,0xdb,0x0b,0x98,0x16,0x78,0x18,0x43,0xc7,0x17,0x82,0xb8,0xec,0x32,0x45,0x75,0x0c,0xc1,0x4c,0x84,0xbf,0xce,0x83,0x3b,0xb4,0x91,0xf4,0x0d,0x5d,0x83,0xf6,0xd6,0x10,0xab,0xc6,0x26,0x9b,0x68,0x59,0xec,0x48,0x4b,0x1d
db	0x35,0x2a,0x5b,0x23,0x83,0x22,0x8e,0x7d,0xfa,0xce,0xde,0xb1,0xd9,0x78,0xf6,0x9e,0x08,0xba,0xfb,0xda,0xf2,0x04,0xc5,0x2a,0xac,0xbf,0xb4,0x04,0x05,0x1f,0x0b,0xeb,0xe8,0x2a,0x3c,0x3f,0x4f,0xb6,0xc8,0x6b,0x97,0x5a,0x9e,0xdb,0x4b,0x3c,0x93,0xc1,0x20,0x1c,0x62,0x91,0x74,0x76,0x49,0x92,0xc2,0xd8,0x0d,0xd8,0xfe,0xb5,0x68,0x77
db	0x48,0x9f,0xbe,0xe0,0x78,0x20,0xe7,0xa4,0x3d,0x3e,0xa1,0x4c,0xc7,0xeb,0xd3,0x30,0xd3,0xf0,0x65,0xcf,0x18,0x3c,0xf8,0x25,0xc2,0x99,0xf4,0xec,0xef,0xdd,0xef,0xf3,0x6b,0x28,0x00,0xaa,0xfd,0x76,0xec,0x19,0x67,0xd6,0x79,0xa6,0x01,0x6e,0x20,0x3a,0x7f,0xd4,0xd0,0x05,0xb4,0xea,0xd4,0xde,0x11,0x06,0x44,0x4a,0x6f,0x15,0x2f,0x62
db	0x9a,0xaa,0xeb,0xaf,0xb5,0xb5,0x46,0xb2,0x28,0x2e,0x74,0x26,0x06,0x91,0xeb,0x15,0xef,0xd4,0xfd,0xc7,0x1b,0x65,0x25,0x01,0x24,0xd2,0x44,0x05,0x18,0x1c,0x71,0x36,0x58,0xc4,0x37,0xfe,0x22,0x29,0xc0,0x2f,0xd2,0x4e,0xeb,0x43,0xb9,0xf9,0x4e,0x87,0xd7,0x92,0x77,0xa8,0x4f,0xa5,0x6e,0x5c,0x4d,0x3a,0xe9,0x16,0x62,0x30,0x51,0xbb
db	0x32,0xd8,0x0d,0x86,0x20,0xbf,0x68,0x0f,0x3e,0xef,0x8b,0x0d,0xc5,0xa6,0x94,0x81,0xe9,0x6f,0x85,0xf5,0x22,0x6e,0x9e,0x0a,0x56,0xa3,0x43,0x79,0x50,0xd9,0x45,0x5f,0x5a,0x3f,0x53,0x53,0xb7,0xfe,0xb6,0x1c,0x63,0xab,0x7c,0xed,0x2f,0xc4,0x2b,0xa8,0x53,0xfb,0xad,0x46,0xf0,0x63,0xca,0x7a,0x6e,0xce,0xf4,0xb9,0x34,0xd0,0x9a,0xc8
db	0x0d,0xd2,0x32,0xce,0x26,0x3f,0xcd,0xd9,0xbc,0xa9,0x46,0x65,0x45,0xfe,0x45,0xeb,0x0d,0xab,0xe6,0x31,0xb6,0xb9,0x41,0x53,0x7d,0x55,0xc3,0xfb,0x10,0x46,0x37,0x77,0x1f,0x15,0xf0,0x5f,0xcb,0x8f,0xea,0xc5,0xc0,0xb8,0xc6,0xb1,0x3a,0x06,0x42,0xec,0x38,0xec,0x06,0xd1,0x37,0x3b,0xe1,0x8d,0xad,0xc2,0xce,0x96,0x0b,0xf0,0xab,0xde
db	0x9c,0x3c,0x09,0xef,0x59,0xcd,0x67,0xa7,0x6e,0x0e,0xc7,0xee,0x51,0x6d,0x90,0x40,0x0e,0xdf,0xb1,0x13,0xe3,0x0c,0xb6,0xe8,0xcb,0xf5,0x57,0x50,0xeb,0xdf,0x09,0x45,0x72,0x40,0xff,0xdc,0x5c,0x51,0x42,0x47,0xb2,0x9e,0xca,0xf3,0x1b,0x06,0xb1,0x3e,0x04,0x55,0x96,0x63,0x24,0x16,0xdb,0x3e,0xab,0x98,0x33,0x70,0x6f,0xfd,0x8f,0x7b
db	0x56,0xb0,0x7f,0x28,0x26,0xc4,0x2a,0x9e,0xf5,0xa7,0xba,0x61,0x75,0xa4,0xb1,0x25,0x60,0xe5,0x9c,0x7e,0xb4,0xaa,0x04,0xa1,0x33,0x5a,0x8d,0x88,0x1d,0xc4,0x38,0x58,0x28,0x23,0xc7,0xac,0x20,0xf8,0xaa,0x18,0xf8,0xc7,0x27,0x05,0x07,0xf7,0x12,0xfe,0xe1,0xa5,0x99,0xaa,0x55,0x79,0x72,0xc4,0x14,0x08,0x14,0x4a,0xfb,0xf7,0x66,0x81
db	0x6e,0xed,0x81,0x12,0x5f,0xb6,0x08,0x00,0x37,0xf9,0xdc,0xdf,0x4d,0xcb,0xfa,0xc6,0xf3,0xc2,0x17,0x17,0x52,0x39,0x7b,0xa0,0x3e,0x25,0xc9,0x48,0xd8,0xa6,0x1b,0x8b,0xdb,0xf8,0x74,0xac,0x6b,0x16,0xec,0xa6,0x4a,0x1e,0x7e,0x5c,0x50,0xbf,0x81,0xef,0x3c,0x7d,0x9d,0x21,0x38,0xa9,0x26,0x3c,0x30,0x7a,0xfb,0xab,0xd8,0x6a,0x0a,0xaa
db	0xbb,0x6e,0x91,0x92,0x7c,0x04,0x02,0x0e,0xa2,0x71,0xc7,0xde,0x7d,0x42,0xaf,0xe5,0x92,0xc1,0xb9,0xd7,0x52,0xaa,0x32,0xea,0x39,0x84,0x17,0x40,0xb0,0x83,0x18,0xff,0x46,0xb8,0x59,0xd9,0xa3,0xce,0x82,0x7e,0x65,0x54,0xe0,0xa4,0x6d,0x8a,0xbc,0x6a,0x65,0xb2,0xd5,0x96,0x5b,0x1c,0x9a,0x32,0x72,0xf7,0x81,0x57,0xcd,0xb3,0x22,0xc5
db	0x7d,0x20,0x24,0xea,0xbe,0x51,0x4c,0xb3,0x48,0x36,0x4f,0x73,0xf4,0x3f,0x07,0x92,0x01,0xe2,0x1e,0x78,0x3f,0x8e,0x1f,0x35,0x1a,0xf1,0xe1,0x14,0xd1,0xe7,0xd9,0xfd,0xd8,0xf7,0x20,0xc2,0xf3,0x7a,0x59,0xc9,0x1d,0x13,0x41,0x01,0xf6,0x77,0x69,0xfb,0x0f,0xc7,0xe4,0x58,0x04,0xce,0xe8,0x73,0x87,0x2f,0xef,0xe6,0x36,0x38,0xc7,0x91
db	0x2d,0x17,0xb5,0x56,0x68,0xb1,0x9f,0xbf,0x2e,0x4b,0xe7,0x09,0x7b,0x35,0x33,0x5a,0x6c,0xc1,0x6f,0xb3,0xac,0x6c,0x1e,0xfe,0xc0,0xc9,0xd8,0x77,0xf5,0xcb,0x5e,0xcc,0xd1,0x2f,0xdd,0x23,0x8b,0x3b,0xb5,0x43,0x96,0x1f,0xa9,0xe4,0x84,0x41,0x92,0xe9,0x68,0x47,0x50,0xf7,0xd4,0x85,0x22,0xa1,0x43,0xaa,0xde,0xf7,0xea,0xe0,0x54,0xaa
db	0x0d,0xe6,0xa5,0xb8,0x7e,0xec,0x13,0x9a,0x1e,0x6c,0x10,0x9d,0xa8,0xfb,0x97,0xde,0x24,0xda,0x33,0xbb,0xab,0x17,0x7a,0xb4,0x72,0xaf,0xed,0xc9,0xa4,0x62,0x65,0x0c,0x99,0x3d,0x74,0x7f,0xff,0x59,0xa9,0x8e,0x37,0xb9,0x10,0x30,0x26,0x3f,0x2f,0xfc,0x1e,0xe2,0xc6,0xb8,0xff,0x41,0xb3,0x35,0x3f,0x41,0xf4,0x47,0xbc,0x76,0xc6,0x77
db	0x0f,0xf8,0xff,0xb8,0xd2,0x34,0x40,0xac,0x43,0xcb,0xcf,0x1f,0x57,0xaa,0x1a,0xa7,0xe1,0x4a,0x69,0xd7,0x05,0xa7,0x9d,0xff,0x13,0x43,0x91,0xe3,0x09,0x1c,0xb2,0xb2,0x82,0x06,0xa3,0x3c,0x35,0x85,0x9e,0xd0,0xcf,0x1c,0xb9,0x13,0x09,0x7d,0x3d,0x17,0x0f,0xf8,0x2f,0x61,0x97,0x7e,0x02,0xe0,0x78,0x07,0x69,0x8c,0x91,0xbe,0x96,0x92
db	0x4a,0x03,0xa7,0x31,0x5f,0x6c,0xfe,0x55,0xb2,0x17,0xe8,0x4c,0x64,0x48,0x18,0xde,0x4f,0x5a,0xce,0xd2,0xcb,0x83,0x4d,0x1b,0x2a,0x1f,0xce,0x85,0xf7,0xdc,0x74,0x8c,0x42,0xc6,0x5a,0x3a,0x51,0x22,0x79,0x70,0xa0,0xe0,0x29,0x2a,0x73,0xe4,0x53,0xb4,0x47,0x5f,0x54,0xa8,0x65,0xe4,0x89,0x78,0xf9,0xb9,0x5f,0x5f,0x9d,0xa8,0xf7,0x82
db	0x4e,0x34,0x60,0xfc,0xe3,0x88,0x65,0x73,0x99,0x1f,0x53,0xed,0xe8,0xf0,0xf4,0x5a,0x0a,0x49,0x42,0x6e,0x02,0x3f,0xa8,0x63,0x21,0x02,0x2e,0x8f,0x33,0xba,0x0e,0x10,0xd3,0x4c,0x1a,0x8b,0xf5,0x84,0x8e,0x2b,0x37,0x12,0x23,0x77,0x02,0x45,0xc7,0xc3,0x79,0x06,0xc2,0x8c,0xaa,0x32,0x53,0x7c,0x19,0xa2,0x92,0x7e,0x47,0x40,0x8f,0xae
db	0x8a,0x64,0x51,0x67,0xe1,0xc1,0xc3,0xd2,0x14,0x1d,0x63,0x0c,0x80,0x04,0x30,0x3d,0xee,0x58,0x44,0xe4,0x14,0x63,0xfc,0x95,0x05,0x3e,0xc1,0x8d,0xd3,0xcb,0x5d,0xc1,0x8e,0xf9,0xd7,0xe5,0x9d,0x97,0xef,0x8a,0xaa,0x50,0x31,0xa3,0x01,0x3a,0xb2,0x8d,0x63,0xb6,0xe7,0x34,0xec,0xa1,0x7a,0xff,0x57,0x95,0xbb,0x1d,0xbe,0x0c,0xa5,0x91
db	0x92,0x08,0x06,0x1c,0x67,0x03,0x2e,0xee,0xf6,0x6f,0xa0,0xb7,0x9a,0x7c,0xe3,0x6a,0x8e,0xd8,0x50,0xc1,0xd6,0xa1,0x8d,0xe9,0x66,0x9a,0x1f,0x62,0x15,0x04,0x93,0x74,0xe8,0x04,0x0d,0x27,0x55,0x2b,0x07,0xb1,0xbd,0x69,0xe4,0xc1,0x34,0x8e,0xe7,0xfb,0xa0,0x3f,0x40,0x31,0x47,0xba,0xcb,0x80,0x88,0xf7,0x4f,0x46,0x05,0x31,0xaf,0x23
db	0xdf,0x93,0x09,0x0a,0x15,0xc9,0x95,0x74,0x52,0x72,0xf4,0xbf,0x0d,0x07,0xb6,0xcc,0x4b,0x40,0x12,0xf3,0x87,0xea,0x29,0xd8,0x29,0x31,0x23,0xac,0x29,0x1a,0x89,0x83,0x5b,0x33,0x4b,0x6b,0x69,0xbe,0xb6,0x15,0x7e,0xfd,0xf2,0x95,0xc4,0xbe,0xeb,0xee,0x59,0x01,0x2a,0xce,0xca,0x80,0xda,0xf8,0x1a,0x01,0x23,0xf7,0xa1,0x4f,0xf5,0x83
db	0x5e,0x16,0xd9,0x12,0xa9,0x4e,0xcb,0x59,0x23,0x4f,0x40,0xd7,0xbf,0xaf,0x76,0xf0,0x50,0x31,0x27,0x3a,0x8b,0x1d,0x9b,0xb1,0x1c,0x41,0xb0,0xed,0xe6,0xf3,0xa8,0x5f,0x6b,0x58,0x54,0x92,0xaf,0xcc,0x44,0x5c,0xea,0xdb,0x09,0xc5,0x26,0x5e,0xbe,0x46,0xbd,0x72,0x49,0x5a,0x4e,0x65,0x7e,0x75,0xcf,0xfc,0xf6,0xd0,0x3c,0x4a,0x7e,0xd6
db	0x8e,0x8e,0xb4,0x19,0x45,0x75,0xbf,0xc3,0x5e,0x46,0xff,0xc9,0x46,0x65,0x8d,0x31,0x01,0x5e,0x1c,0x13,0x93,0x56,0x6f,0x28,0xec,0xf3,0x77,0xfa,0x6e,0xb9,0x0e,0xb6,0x8e,0x0e,0x38,0xf8,0x28,0x64,0xa2,0xa1,0x42,0x9a,0xb4,0xf3,0x14,0x8d,0x17,0x80,0x05,0x82,0x7c,0xf1,0xea,0x8b,0x4b,0x62,0xa0,0xde,0xf6,0xd7,0x36,0xb0,0x70,0x8d
db	0x03,0xf6,0xc8,0x2a,0x9e,0xc0,0xbb,0x2f,0xcb,0xef,0x35,0xf7,0x16,0xcd,0xd6,0xd6,0x90,0xd7,0x5d,0x61,0x00,0x33,0x9f,0xd8,0xd1,0xda,0x17,0x67,0x90,0xd1,0xf8,0x59,0xcb,0xf1,0x76,0xc2,0xbe,0x1f,0x5d,0x0d,0xb2,0x02,0xbd,0x19,0x9f,0x5a,0xa0,0x91,0xac,0x51,0xb5,0xf5,0x0a,0x64,0x67,0xf2,0x49,0x30,0x6c,0x57,0x83,0xda,0x90,0xf1
db	0xc6,0xc7,0xe6,0x05,0x13,0x30,0x52,0xfd,0x2a,0x47,0xea,0xae,0xd3,0xed,0xe4,0x64,0x1f,0x6c,0xb1,0xdf,0xca,0x20,0x97,0x2a,0xc8,0xdc,0x00,0x0e,0x5b,0x59,0xc8,0x16,0x95,0x68,0x9a,0x2e,0x44,0xab,0xf6,0x93,0x7c,0x8f,0x66,0x4f,0x07,0x42,0x3f,0xa5,0x81,0xe7,0xab,0x59,0xbb,0xae,0xb1,0x3e,0x9a,0x25,0xf1,0xde,0xac,0x4c,0x1d,0x7a
db	0x54,0xb9,0xa9,0x59,0xaf,0xb0,0xab,0xaf,0x6b,0x76,0x66,0x1e,0xbe,0x1a,0xc1,0x61,0x1b,0x81,0x6b,0xe8,0xe4,0x73,0x6a,0x87,0xe9,0x39,0xcb,0x2c,0xab,0x64,0x36,0x9a,0x11,0x46,0xec,0x9f,0x30,0xb6,0x2c,0x14,0xe0,0xec,0xbe,0x33,0xde,0x60,0xc6,0x00,0x29,0x3c,0x55,0xda,0xfc,0x64,0xff,0xaa,0xbf,0x99,0x58,0xe2,0xe3,0xec,0xde,0xca
db	0xd1,0x3d,0xd2,0xad,0xaa,0xca,0x36,0x8f,0x93,0xa2,0xdd,0xde,0xaa,0x49,0x7f,0xdd,0x39,0x91,0xa0,0x7b,0x33,0xdf,0x36,0xcd,0xc3,0x3a,0xbc,0x53,0xf0,0x07,0x99,0x78,0x4e,0x63,0x47,0x79,0xbf,0x21,0xfc,0x05,0x47,0x69,0xec,0xee,0xf4,0x21,0x97,0x94,0x0c,0x7a,0x9f,0xa6,0xeb,0x5b,0x23,0xed,0x9d,0xc1,0xe1,0x5e,0x10,0xca,0xe0,0x84
db	0x5a,0xdd,0xf6,0xae,0xd8,0x23,0x98,0xea,0x6c,0x43,0x77,0x41,0xf3,0x84,0x5a,0xe8,0xda,0xb3,0x11,0x0e,0x19,0x33,0xe9,0xf9,0x7a,0x90,0x07,0x68,0xf1,0xe4,0x52,0x0c,0x03,0x67,0xb9,0x42,0x41,0x24,0xa3,0x61,0x67,0x75,0xc9,0xb5,0xdd,0x10,0xf1,0x20,0x93,0x54,0xdb,0x0d,0xc7,0x0d,0x25,0x3e,0xda,0xb3,0xe7,0xce,0x97,0x7e,0xdb,0x1a
db	0x8f,0x92,0xff,0xe3,0x44,0x2d,0x6b,0xdb,0xe0,0x69,0x8b,0x16,0xce,0xe8,0xc7,0x93,0xf1,0x19,0xb9,0xd3,0x41,0x45,0x8d,0x95,0xb3,0x03,0xb2,0x66,0x96,0x95,0x91,0x33,0x1c,0xee,0xde,0xd7,0x9d,0xab,0x32,0x2f,0xb8,0x3c,0x7a,0x44,0x8f,0xa6,0xca,0x02,0x03,0x2f,0xa8,0x44,0x85,0x0e,0xf5,0x27,0x90,0x84,0xd9,0x80,0x06,0xf4,0x4f,0xc7
db	0x21,0xc5,0x92,0xa4,0x2d,0x08,0x42,0x4c,0xa7,0x84,0xfa,0x7e,0x2b,0x66,0xfb,0x7c,0x81,0xea,0x5c,0x7d,0xdd,0x86,0xf1,0xf5,0x04,0xef,0xf2,0x50,0x12,0x72,0x42,0x22,0x23,0x74,0x7f,0xe7,0xed,0xd9,0xce,0x78,0x10,0x83,0x37,0xd0,0x81,0x97,0x4a,0xac,0xc2,0xe5,0x13,0x91,0x83,0xe2,0x6e,0xff,0x5a,0x0b,0xc3,0x4d,0xc1,0x3e,0x97,0x16
db	0x96,0x69,0x39,0x9e,0x1d,0x6b,0x16,0x82,0xa2,0x94,0x0d,0x50,0xdd,0xa3,0xda,0x9d,0xda,0x3f,0x46,0xce,0x6c,0xd0,0xdf,0x6e,0x1b,0x17,0x47,0x51,0x74,0x6f,0xe9,0xa4,0x6b,0xae,0xd2,0x6e,0x5b,0xc0,0x26,0xc6,0x0b,0x84,0xb1,0x39,0xcf,0x9e,0x7c,0x18,0x52,0xd7,0x8f,0x33,0xae,0x3d,0xaf,0x3d,0x1a,0xba,0x3f,0x09,0x76,0x22,0x1d,0xf3
db	0x42,0x14,0x4f,0x06,0xc7,0x33,0xc1,0x2d,0x58,0x1b,0x4c,0xc0,0x3a,0x29,0xa6,0x5e,0x19,0x26,0xdf,0x36,0x18,0xa9,0xc5,0xe9,0xd3,0xb1,0xae,0x86,0xa8,0x7f,0xd9,0xb4,0x18,0xef,0x9c,0x46,0xb6,0xf2,0xb2,0xb6,0x6e,0xe2,0xf8,0x5f,0x27,0xea,0x76,0xd3,0x40,0x68,0x94,0x66,0x8a,0xf5,0x9f,0xee,0x0c,0xe5,0xae,0xb6,0xba,0x87,0x42,0x40
db	0xc9,0x83,0xac,0xb4,0x2c,0xec,0x74,0xb7,0x55,0x17,0x0b,0x1e,0x45,0x1a,0x87,0x9d,0x52,0xce,0xb7,0x58,0x2f,0x45,0xc7,0x7d,0xf3,0xd3,0x11,0x2e,0xf4,0xd8,0xc0,0xb8,0xc3,0x31,0x45,0x68,0x40,0xe8,0x8a,0x33,0x20,0x9a,0x06,0xa8,0x18,0x53,0xb2,0x73,0xa1,0x57,0xac,0x8f,0x56,0xeb,0x8e,0xa4,0xfc,0xd6,0x76,0x7e,0x81,0x62,0x2c,0x17
db	0x49,0xb4,0xcc,0x15,0x66,0xcb,0xa2,0x3c,0x29,0xf0,0x73,0x0e,0x9a,0x34,0x16,0x6d,0x43,0x62,0x20,0x89,0x14,0xae,0x8b,0x5d,0x61,0x54,0xa1,0x82,0x49,0x73,0xb9,0x2b,0x48,0xd4,0xe3,0x21,0x37,0x5e,0x4d,0xbf,0xd0,0x72,0xa4,0x23,0xdb,0x7c,0xd9,0x45,0x77,0x8a,0x24,0x23,0x56,0xcd,0x84,0x80,0x44,0x12,0xce,0x99,0x39,0xbd,0x77,0xff
db	0x8c,0x62,0x8d,0x56,0x77,0x24,0x40,0x11,0x22,0xab,0x28,0xd6,0x75,0x2b,0xbb,0xc1,0x51,0xd6,0x5e,0x61,0x1c,0xe9,0xac,0x36,0x99,0x52,0x44,0xa5,0x20,0xdb,0xe0,0x12,0x9a,0x45,0x8f,0x7f,0x47,0xf9,0xa3,0x91,0x18,0x2b,0x51,0x9a,0x9f,0x3f,0x7d,0x36,0xde,0x71,0xae,0xca,0x62,0x62,0x16,0xda,0x19,0x9c,0x84,0xce,0xde,0x93,0x22,0xde
db	0xaf,0xe7,0x91,0x09,0xe8,0xf0,0x0e,0x07,0x71,0xdf,0x48,0xcd,0x8a,0x77,0x19,0x3c,0xd6,0xef,0x8e,0xe0,0x49,0xdf,0xcb,0xd6,0x34,0x78,0x7f,0x42,0xc2,0x6e,0x7a,0x50,0x53,0xee,0xbf,0x73,0x4b,0xd4,0x4f,0x06,0x18,0x26,0x67,0x51,0x54,0xa3,0x40,0xe6,0xb3,0x61,0x4b,0xfd,0xee,0x62,0x00,0x44,0x6c,0x0d,0x8b,0x2f,0x4d,0x06,0x17,0x41
db	0xee,0x8b,0xde,0x1f,0x80,0x36,0x58,0x3e,0x0a,0x53,0x0a,0x83,0xf9,0xba,0xbd,0x91,0x6a,0x20,0x32,0x42,0x6c,0x85,0xdc,0x84,0xfd,0xce,0x57,0xbe,0xf8,0xa5,0x2c,0x7e,0xf9,0x1b,0x07,0xf4,0x32,0x13,0x32,0x79,0xdc,0x91,0xfc,0xc0,0x18,0xe6,0x1e,0xb2,0x67,0x9d,0x08,0xd2,0x89,0xa2,0xb1,0xbf,0x37,0xe1,0x3f,0x9e,0xb5,0x17,0xf7,0x2f
db	0x9a,0x4f,0x3c,0xea,0x5d,0x48,0x56,0x48,0x35,0x17,0xe9,0x5a,0x99,0xa7,0x2e,0x25,0x4f,0x96,0xa6,0x3d,0x3c,0xf8,0xdc,0xe7,0xe5,0x98,0x46,0xf7,0x10,0x16,0x4f,0xb0,0x7b,0x48,0x06,0xbb,0x9a,0x5a,0xad,0x32,0x49,0x92,0x39,0xb2,0xfe,0x01,0x1a,0x5e,0xcc,0xf7,0x0d,0x65,0x1c,0xf5,0x3d,0xb3,0x40,0x28,0x06,0x6e,0xbb,0x74,0x2a,0x95
db	0xe9,0x62,0x2a,0xe2,0x19,0x38,0xc6,0x0d,0x46,0x30,0x6d,0x90,0xa5,0x68,0x4d,0x89,0xf0,0xf4,0xaf,0x52,0x11,0x8a,0x47,0x65,0xc0,0x6d,0xee,0xde,0xbc,0xed,0xf2,0x94,0xf3,0xfb,0xfd,0x2f,0xea,0xd5,0x36,0x89,0x8a,0x22,0xb8,0x75,0x3c,0xda,0x8d,0x3f,0x71,0xe5,0x50,0xb8,0xef,0xfc,0xa1,0x34,0x4a,0xb0,0x56,0x64,0xaf,0x28,0x0c,0x7a
db	0x28,0x3e,0xc8,0x83,0xc2,0xbb,0x89,0xc4,0x29,0x7f,0xc9,0xe7,0x4e,0xcb,0xdc,0x8f,0xe8,0xa4,0xdc,0x0d,0xcc,0xa0,0x16,0xda,0xa9,0x34,0x61,0xec,0x64,0xa7,0xf4,0x47,0xe9,0xee,0xbf,0xc6,0x4b,0xc5,0x01,0x65,0xe4,0xe0,0x12,0xd6,0x27,0xda,0x30,0xb5,0x60,0x72,0xe1,0xee,0x38,0x23,0x6c,0x9d,0xbb,0x83,0x01,0x4b,0x26,0x9a,0x68,0xb3
db	0x89,0xb3,0xe0,0x10,0x22,0x58,0xef,0x2d,0xd4,0x86,0xab,0xab,0xc4,0xd8,0x9c,0x56,0xe8,0x54,0x40,0x86,0x11,0xd2,0x6b,0xc0,0xaf,0xfc,0x4a,0xef,0x24,0x38,0x79,0x32,0x54,0x26,0x8b,0x7e,0x02,0xad,0x86,0x9d,0x40,0x65,0x28,0x28,0xa3,0xa6,0xe4,0x07,0x29,0x3a,0xbb,0x81,0xed,0x17,0x54,0x51,0x35,0xc6,0x88,0x9c,0x63,0x7e,0x73,0x02
db	0x28,0x13,0x4b,0x33,0xc0,0x68,0xbc,0xae,0x8c,0x59,0xd4,0x84,0x1d,0x41,0x86,0x5a,0xf6,0x14,0x50,0x13,0x88,0xca,0xc8,0xb8,0xfc,0x61,0xeb,0xe6,0x69,0x70,0x4a,0xa5,0xa5,0x36,0x4b,0xac,0xca,0x00,0x28,0xae,0xb0,0x03,0xef,0xe3,0x92,0xad,0x97,0x32,0x05,0x8c,0x93,0x95,0x45,0xd5,0x75,0x66,0x11,0xd3,0x6f,0x7f,0x5f,0x35,0x44,0xb7
db	0xd7,0x34,0xcf,0x8c,0x4a,0x61,0x68,0x63,0x3f,0x92,0x54,0x01,0x3c,0x25,0x2d,0x6f,0x4a,0x2d,0x55,0xff,0x3f,0x86,0x85,0x9f,0xc2,0xa1,0xde,0x6b,0xbf,0x7e,0xb4,0x7c,0xc1,0x80,0x73,0xf5,0x3b,0x85,0xae,0x36,0x1a,0xdf,0x00,0x52,0xb7,0x70,0xa9,0x42,0x79,0xd2,0x26,0xf8,0x3b,0xeb,0x9f,0x2e,0x15,0x33,0xc8,0x85,0x2d,0x63,0xb2,0x89
db	0x24,0x8e,0xfd,0xe6,0xdf,0x01,0x80,0x8b,0x27,0xe3,0x7e,0x17,0xc2,0x4e,0x26,0xa2,0xe1,0x95,0x81,0x3a,0xdd,0x2a,0xf4,0x75,0x21,0x64,0x11,0x04,0x5e,0x00,0x39,0xf0,0x08,0x68,0x67,0x09,0xa8,0x9b,0xbe,0xb7,0x62,0x0e,0xa8,0x69,0xcd,0x4e,0xaf,0xc8,0x4f,0x92,0x3d,0x8e,0x35,0x60,0x70,0xb3,0xda,0x2f,0x38,0x80,0x6f,0x5e,0xcc,0x3b
db	0x6e,0x05,0x26,0x14,0x9d,0x36,0x72,0x7d,0x09,0xb8,0xb7,0xa1,0xf7,0x5f,0xb3,0xe1,0xd6,0xc5,0x54,0x4e,0x80,0x4d,0x06,0x8f,0x84,0xbb,0xb6,0x65,0x87,0x2c,0x19,0x4a,0x74,0x3c,0x34,0x62,0x32,0xad,0x4c,0x06,0xa3,0xbb,0xfb,0x4f,0x4f,0x9d,0x91,0x84,0x63,0x75,0x34,0xcc,0x6b,0x00,0xa1,0x5a,0x63,0x03,0x8d,0x1e,0xdb,0xa4,0x0c,0xe6
db	0x3d,0xd1,0x94,0x77,0xd8,0x77,0x8c,0x39,0x48,0x78,0xb1,0xb5,0xa2,0x41,0xd0,0x6d,0x27,0x20,0x4a,0x41,0x88,0xa5,0x78,0x3f,0x51,0x72,0x8c,0x80,0xe7,0x37,0x81,0x8b,0x06,0x46,0x58,0xab,0x23,0x85,0x47,0x89,0x39,0xf9,0x14,0xfe,0xbf,0x07,0x7c,0x47,0x8e,0xcc,0xd7,0x08,0xfe,0x5d,0xee,0xf9,0x94,0xa2,0x83,0x81,0x8a,0xfd,0x0f,0x9a
db	0xa7,0xe4,0x59,0xad,0xe6,0x1f,0xed,0x5d,0xe4,0x20,0xd6,0x2f,0xa7,0xd3,0xcf,0x5b,0x18,0x6d,0x24,0x79,0x66,0xd9,0xaa,0x44,0xfa,0x8d,0x74,0x60,0xcc,0x7e,0xbf,0x4f,0x0e,0xe3,0x9c,0xa5,0xe4,0xff,0x14,0x05,0xff,0x24,0x62,0x94,0x00,0x7a,0x58,0xe5,0x0b,0x3b,0xe8,0xee,0xe1,0x4d,0x4e,0x34,0x26,0xba,0x70,0x10,0x5e,0x14,0x4f,0xa5
db	0x7a,0x9e,0x7b,0x28,0x99,0xbe,0x94,0x4a,0xcb,0x8d,0x65,0x60,0xa0,0x6e,0xc7,0xbc,0x51,0xba,0xb5,0x07,0x97,0x25,0x42,0xb7,0x2c,0x0e,0x9b,0xfc,0xfb,0x35,0x6f,0x74,0x10,0xce,0x25,0xdb,0xa9,0x7c,0x11,0x61,0x43,0xf9,0x19,0xbf,0xe2,0x21,0xa3,0x57,0x3c,0x41,0x0a,0x15,0x4e,0x7f,0x6b,0x38,0xb6,0x73,0x41,0xa2,0x4e,0x8e,0xb9,0x44
db	0xee,0x2a,0x2e,0x0a,0x9e,0x85,0xf1,0x6e,0x93,0x72,0x42,0x50,0x55,0xe1,0xc6,0x18,0x11,0x92,0xf7,0xbf,0x05,0xd8,0xb6,0xbc,0x2b,0xd5,0xe0,0xd3,0x9b,0x64,0xc4,0xdd,0xb0,0xb3,0x46,0xd8,0xfb,0x73,0xea,0xed,0x06,0x96,0x16,0x9e,0xf6,0xc6,0xe8,0xbe,0xae,0x00,0x2f,0x5a,0xf4,0x1f,0xb5,0x28,0x7c,0x75,0x76,0x68,0x74,0xa2,0x57,0x0e
db	0x6c,0xfa,0x2d,0xbe,0x34,0xf1,0xc9,0x2b,0x83,0x58,0xe7,0x2a,0x87,0xdb,0x47,0xae,0xc7,0xc2,0x78,0x50,0xed,0x20,0xdf,0x30,0x38,0xdd,0x84,0xa9,0x6b,0x00,0xb1,0x7b,0xbb,0x69,0xd3,0xbe,0xed,0x3d,0x99,0x6e,0x39,0x42,0x75,0x8a,0x6c,0x7c,0xa5,0xcf,0xc9,0xcf,0x11,0x14,0xb3,0xaf,0x72,0x00,0x3b,0x58,0xdd,0x2a,0xe1,0x44,0xa7,0x51
db	0x15,0x05,0x1b,0x18,0x49,0x07,0x90,0x4c,0xbc,0x99,0x88,0x64,0xf6,0x14,0x0b,0x99,0xc0,0x84,0xc9,0x06,0x32,0xf0,0xec,0x19,0x8d,0x4a,0xb8,0xdb,0x32,0xb4,0x5e,0xc9,0x0c,0x24,0xf0,0xad,0xdc,0xf4,0x32,0x3b,0xf6,0x68,0x28,0x4a,0xa5,0x5b,0xb7,0xd5,0x00,0x35,0xf8,0x56,0x03,0xa3,0x86,0xa0,0x8a,0x1b,0x53,0xb5,0x58,0x73,0x8c,0xf9
db	0x2b,0xd8,0xcb,0x88,0xe7,0x7e,0x79,0x68,0x13,0x5d,0x7d,0x23,0xc4,0xec,0x9c,0xf4,0x95,0x97,0xbf,0xb2,0xd9,0xdf,0x38,0xe8,0xa2,0x79,0xf7,0xe8,0x36,0x80,0x59,0x3f,0x58,0x2f,0xf7,0xf9,0x32,0x73,0xdd,0xd6,0x9e,0x20,0x1a,0x29,0xab,0xc1,0x77,0x14,0x71,0x3c,0xde,0x90,0xe9,0xea,0xdb,0x78,0x14,0xa3,0x89,0x43,0xf1,0x42,0x43,0x3f
db	0xe7,0x67,0x32,0x3d,0x65,0xdc,0xa4,0x79,0x8f,0x81,0xa5,0xb0,0x94,0x0f,0x96,0xf5,0x82,0xcc,0x47,0xc1,0x29,0x39,0x70,0x7a,0xf3,0x49,0xf5,0x09,0x43,0x50,0x56,0xd6,0xea,0xc4,0x35,0xa5,0xa2,0x8a,0xbe,0xc0,0xe3,0xfe,0x4c,0xa2,0x83,0x09,0xab,0x72,0x8a,0x96,0x7c,0x01,0x70,0xb2,0xd5,0x62,0xb7,0x67,0x59,0x36,0xcf,0x56,0x2d,0x14
db	0xc2,0x69,0x49,0x52,0x4e,0x7c,0x45,0x4b,0xef,0xcd,0x79,0xcd,0xe6,0xa6,0xd0,0xbe,0x10,0x1e,0x18,0xca,0xe7,0x8d,0x65,0xb1,0x17,0xc7,0x2c,0xc8,0x2a,0x5b,0xe8,0x08,0x11,0x15,0xea,0xa9,0x43,0x7b,0x70,0x04,0x0c,0xc8,0xca,0x67,0x18,0x18,0x12,0x16,0xc2,0xd3,0xf2,0x0a,0xc7,0x01,0xa9,0x97,0x61,0xf6,0xa7,0x44,0x9a,0xb3,0x67,0xdc
db	0x07,0x63,0x02,0x02,0x2e,0x58,0x80,0xa9,0x95,0xa0,0x8e,0x86,0xb6,0xf6,0x14,0x13,0x0a,0xea,0xf1,0x6d,0xd9,0x98,0x37,0x12,0xdb,0x67,0x1b,0x13,0x8e,0xd1,0xfa,0x2f,0x98,0x53,0x3c,0xd7,0x56,0x55,0x42,0x2f,0x64,0x59,0xd5,0xb7,0x6e,0xa8,0x6c,0xc2,0x40,0x11,0xb5,0xa1,0xc0,0x5c,0x45,0x87,0x91,0xb1,0x1c,0x4e,0xa9,0xf6,0x72,0x57
db	0x50,0x8e,0xc5,0xfc,0x64,0x59,0x52,0x82,0xb0,0x75,0xc3,0x98,0xff,0x32,0xce,0xa4,0x39,0xb8,0xa4,0x61,0xb4,0x53,0x3f,0xc7,0x80,0x35,0x48,0xaf,0xa8,0x67,0xfe,0xa1,0x1d,0x3c,0x95,0xb5,0x63,0x1c,0x3a,0x2c,0x68,0xfa,0x98,0x8b,0xa7,0x19,0x29,0x79,0xe4,0x9b,0xff,0x8f,0x15,0x9c,0x65,0x60,0xd2,0xa9,0x4f,0xd5,0xb2,0x57,0xff,0x32
db	0x4c,0x96,0x82,0x6b,0x09,0x6c,0x74,0x55,0x00,0x5c,0x68,0x68,0xd5,0x9b,0xd4,0xdf,0x3d,0x2d,0xb9,0x0b,0xf5,0x2c,0x87,0x35,0x2a,0xc0,0xc0,0xc9,0xd7,0xa1,0x76,0x30,0x82,0x46,0xd8,0x24,0x6e,0x27,0x02,0x71,0x57,0x5c,0x43,0xf2,0x54,0xd6,0xea,0xd7,0x67,0x7d,0xac,0x76,0x91,0xf1,0x26,0x6e,0xaf,0x87,0x05,0x06,0x48,0x57,0xbd,0x67
db	0x1d,0xd7,0x07,0xcd,0x41,0x02,0x49,0x6c,0x8c,0xe1,0xe3,0x00,0x78,0xbe,0x28,0x84,0x16,0x44,0xb1,0x0d,0x6d,0x40,0xfe,0xab,0x7e,0xf6,0x6b,0xff,0xfa,0xe1,0xc7,0x9d,0x56,0x62,0xf1,0x68,0xba,0x76,0x34,0x8f,0x54,0x20,0x49,0xf5,0xa2,0x54,0x52,0xca,0x42,0xed,0x4f,0x9b,0xdf,0xcf,0xfb,0xf6,0xee,0x12,0x29,0x43,0x8f,0xf9,0xfd,0xf4
db	0x8a,0xbf,0xae,0x50,0xf2,0x8f,0x46,0xa2,0x97,0x3b,0x2d,0xfb,0x84,0x98,0x61,0xae,0xba,0x36,0x25,0x30,0x8b,0xdc,0xd3,0x08,0x8e,0x7e,0xfa,0x91,0xac,0x4b,0x29,0x6d,0x0c,0x81,0x0f,0xc7,0xc8,0xc4,0x5c,0x48,0x68,0xa7,0x83,0xf3,0x6a,0xc8,0x0d,0x3a,0x9b,0x46,0xb9,0xe1,0x31,0xac,0x3c,0x12,0xa2,0xae,0x74,0xb8,0x91,0xed,0x63,0xba
db	0x40,0xb8,0x57,0x58,0x1f,0x1d,0x1a,0x2d,0x98,0x60,0xe8,0xe1,0x84,0x16,0xe5,0xf0,0x1e,0x35,0x58,0x31,0xc3,0x0c,0x49,0x6e,0x13,0x2c,0xac,0x14,0xc2,0xde,0x5f,0x62,0xe5,0x37,0x5b,0x1d,0x71,0x8b,0xc3,0x3d,0xd8,0xaf,0x3d,0x0a,0xef,0x80,0x3c,0x9a,0x4b,0x0a,0x3f,0x0e,0x8f,0x90,0x8f,0x73,0x2e,0xff,0x8e,0x8e,0x87,0xf8,0x46,0x52
db	0xed,0x7d,0x76,0xf3,0xff,0xaf,0x5e,0x62,0x87,0x16,0x9c,0xa6,0x12,0x39,0x13,0xc3,0x62,0x4b,0xd2,0x21,0xa2,0x43,0xfa,0x4c,0x5d,0x75,0x61,0x64,0x5b,0x23,0xcd,0x76,0x86,0x81,0xd6,0xa6,0x25,0xe1,0xc1,0xc6,0x04,0x5e,0x65,0xfe,0x89,0x0e,0x67,0x02,0xeb,0xb9,0x26,0x88,0x81,0x97,0x1e,0x62,0x4e,0xf4,0x4e,0x0d,0xef,0xac,0xcf,0xd7
db	0xc5,0x9b,0x9d,0x3a,0xa2,0x71,0xd7,0xd4,0x72,0xa6,0x66,0x90,0xe2,0xf7,0xb7,0xec,0xe4,0xca,0x9f,0xd1,0xd8,0x5a,0x65,0xff,0x39,0x65,0x78,0x47,0x1c,0x64,0xab,0x1a,0x35,0x2e,0xe2,0xf7,0x67,0xa4,0x7f,0xd5,0xea,0x04,0xee,0x4d,0xf6,0x29,0xe4,0xcd,0x1b,0xcf,0x0a,0xef,0xa1,0x14,0x90,0x0e,0xed,0x1a,0x10,0x63,0xa0,0x56,0x11,0x05
db	0x57,0x94,0x3a,0x11,0xff,0xe0,0xc7,0x33,0x19,0x67,0xd7,0xd0,0xcc,0x76,0x52,0x5d,0x9e,0x10,0xe7,0xd6,0xaa,0x13,0xe8,0x8d,0xa5,0x60,0x66,0x98,0x26,0x11,0x66,0x0f,0x2d,0x4d,0xec,0x28,0x93,0x17,0x3a,0x6f,0x99,0x70,0x00,0x2b,0x66,0xb3,0x49,0x69,0x3c,0x3b,0x03,0xb8,0xc0,0x9b,0x1c,0x96,0xd9,0xd1,0xe1,0x6d,0x8f,0x45,0xce,0x22
db	0xcf,0x48,0x61,0x85,0x10,0x1b,0x3f,0x2b,0x74,0x48,0x61,0x68,0x63,0xe3,0xa3,0x83,0xe2,0xcc,0xa0,0x6d,0x82,0x8b,0xe5,0x42,0xab,0xa7,0x62,0x6c,0x05,0xb4,0x7b,0x65,0xf5,0xd8,0x0b,0x7d,0x61,0xd6,0x5c,0xf0,0xc0,0x03,0x0c,0x51,0xec,0x06,0xad,0x79,0x8c,0x62,0x0c,0xf5,0x8e,0xcb,0x97,0x62,0xf9,0x3e,0x39,0x8d,0x3c,0x2e,0xd1,0xc0
db	0x5f,0x98,0xea,0xb5,0x26,0x19,0xf5,0x93,0xbb,0xf8,0xd4,0xd5,0x35,0xee,0x1f,0xf8,0x71,0x81,0x0e,0xe6,0xe9,0xf3,0x2c,0x80,0xa8,0x15,0x35,0x1e,0xda,0x07,0x41,0x39,0x8a,0x19,0x1f,0x70,0x99,0xbe,0x3d,0x5c,0x1f,0xf6,0x72,0x85,0x73,0xea,0xb5,0x61,0xbb,0x77,0xaa,0xef,0xc7,0x2c,0xed,0x1e,0xa6,0xfd,0xc9,0xde,0xa9,0x82,0xba,0x19
db	0x04,0x17,0xf7,0xa1,0x59,0x5c,0x7d,0x8d,0xe7,0x1c,0x89,0x7f,0xe1,0x02,0xd3,0xb0,0x46,0x6c,0xcf,0xde,0xf0,0x0b,0x00,0x43,0x8d,0xd6,0xe6,0xf7,0xc8,0x83,0x20,0x77,0x8b,0x9f,0x14,0xea,0x2b,0xb2,0xd2,0x41,0xfd,0x96,0x7c,0x0d,0x05,0xb9,0x5a,0xa0,0x83,0x50,0xde,0x0e,0xc6,0xa6,0x29,0x55,0x12,0x8e,0x2f,0x0a,0x5c,0xcd,0xae,0x92
db	0x76,0x84,0xc9,0x8a,0x81,0xe5,0x3e,0xf0,0xe6,0x5b,0xe4,0x21,0xfb,0x4c,0xb6,0x0a,0x7b,0x7f,0x7e,0xab,0xdc,0x15,0x44,0xf8,0xeb,0x23,0x21,0x31,0xef,0x98,0xec,0x84,0x69,0x34,0x29,0x99,0x03,0x8a,0x12,0x8e,0x28,0xdd,0x00,0x6a,0xa3,0xe7,0x08,0x17,0x35,0x2a,0x42,0x8a,0xcb,0x4a,0x7b,0x1c,0xd2,0x74,0x4f,0x6a,0x8c,0x85,0x1c,0xd6
db	0x05,0x3a,0xfd,0xdf,0x1c,0xa5,0x59,0xbb,0xdb,0xe3,0xa7,0x59,0xb1,0x67,0x3d,0xa4,0x71,0x4d,0x6c,0x99,0xe0,0xa7,0x8c,0xfa,0x96,0x1f,0x8d,0x0c,0xa7,0xc8,0xce,0xa3,0xbf,0x4d,0xc7,0xa9,0xb7,0xfd,0x04,0x58,0xcd,0xd7,0x20,0xb1,0xb9,0xf5,0x06,0x70,0x1b,0xdd,0xf4,0x1c,0xdc,0x32,0xa0,0x90,0x0d,0xb2,0x91,0x14,0x05,0xa2,0xf7,0xb7
db	0xb6,0xd2,0xf1,0x30,0x75,0xcc,0x78,0x0d,0x56,0x70,0x64,0x02,0xe7,0x83,0x97,0x65,0x63,0x4b,0x64,0xff,0x8b,0x62,0xc9,0xa4,0x6e,0x96,0xbf,0xd3,0xeb,0x74,0xc5,0x1f,0xdb,0x1c,0xf3,0xca,0x54,0x7d,0x8d,0xd9,0xec,0x18,0xd8,0x99,0xd1,0xa5,0x70,0x8a,0xc5,0xdc,0xa0,0xcb,0xb7,0x52,0xe3,0xe6,0x88,0x0c,0x5a,0x42,0xde,0xe6,0xd8,0xc4
db	0x39,0xe5,0x6c,0x0b,0xd4,0xa5,0x9b,0x51,0xa2,0x3d,0xc5,0xc7,0x17,0x17,0xb8,0xd8,0x09,0xad,0xeb,0x67,0x47,0xe0,0x88,0xef,0x1d,0x22,0x18,0x25,0xdc,0x32,0xb2,0xf7,0x47,0xc5,0xb3,0x0b,0x57,0x01,0x67,0xac,0xc3,0x9e,0xb0,0xa8,0xd7,0xce,0xb2,0xcd,0xea,0x3b,0x61,0xbb,0x24,0xad,0x91,0x7b,0xa2,0x9a,0xb3,0x63,0x56,0xe2,0x9d,0x69
db	0x9e,0xd7,0x5f,0x5f,0x47,0x9f,0xae,0xf6,0x09,0xb1,0x9e,0x22,0x35,0xaa,0x55,0x0b,0xfc,0x70,0x96,0xfd,0x53,0x8a,0x37,0xaf,0x2d,0xa2,0xc5,0x49,0x5b,0x1e,0x32,0x47,0x9d,0xc3,0xb4,0x46,0xf3,0x54,0xdb,0x3f,0xb9,0x69,0x9e,0x8b,0xad,0x11,0xb2,0x68,0xe8,0x27,0x0d,0xca,0x33,0x1c,0x86,0xb2,0x2c,0xaa,0xc2,0x15,0xf9,0x6e,0xed,0x30
db	0x71,0x08,0xeb,0x93,0x1d,0x16,0xc5,0x34,0x73,0x65,0x7a,0x19,0x2b,0xa7,0x3d,0xe6,0x88,0xb5,0x0f,0xa0,0x92,0x91,0x22,0x9d,0x01,0xf3,0xf4,0x57,0x9f,0xd9,0x23,0x1b,0xbd,0xd7,0xd5,0x11,0xc9,0x24,0xf6,0x36,0x30,0x30,0x69,0x95,0x17,0x48,0xf9,0x76,0x71,0xef,0xef,0xc0,0x00,0x9c,0x7d,0x87,0xdc,0xdc,0x1a,0x32,0x82,0x7a,0x13,0xc2
db	0x9f,0x53,0xc2,0x7d,0x4d,0xbf,0xbe,0xf5,0x9d,0xc8,0x81,0x5b,0x81,0xe9,0x38,0xb6,0xa5,0x40,0xa5,0xd4,0x6f,0x0c,0xea,0xf1,0x52,0x59,0x37,0x3b,0xc2,0xb2,0x5f,0x10,0xdf,0x22,0xf7,0x77,0xe8,0x66,0xb0,0x97,0x91,0x5f,0xc2,0x18,0x8d,0x17,0x40,0xd1,0x6d,0xde,0x6e,0xf0,0x6c,0x1f,0x4e,0x9b,0x15,0x83,0x9b,0x70,0x21,0x2b,0x98,0x46
db	0xbf,0xa5,0x82,0xac,0x63,0xac,0xd7,0x52,0xec,0x2c,0xf2,0xe4,0xe0,0x2a,0xbf,0x7e,0xa2,0xd2,0x9d,0x0d,0xf2,0x9b,0x79,0x5f,0x22,0xb0,0x6d,0x22,0x2e,0xed,0xe2,0x4f,0x73,0xc5,0x89,0xcc,0x4a,0xaa,0x9a,0x7e,0xab,0x95,0x25,0xa7,0x9d,0xf4,0xc2,0xe8,0x42,0x6e,0xd3,0xf9,0x25,0x54,0xb9,0x1f,0xa9,0x16,0x9c,0x22,0x7a,0xf0,0xa6,0xac
db	0x8b,0x9d,0xe6,0xe3,0x93,0x4e,0x65,0x3a,0x39,0x3e,0xf5,0x41,0x38,0x02,0xb7,0x37,0xd4,0xdc,0xea,0xc5,0x53,0x0e,0x52,0x85,0x96,0xc0,0xa7,0x21,0xbf,0xe7,0xca,0x12,0x1c,0x59,0x33,0xe4,0xd5,0x70,0x6b,0x25,0x54,0x24,0x58,0x48,0x1b,0x65,0x6e,0x7e,0xe6,0x84,0x39,0x38,0xbc,0xdf,0x96,0xbc,0x39,0xdf,0x8f,0x36,0x9e,0x3a,0xda,0x02
db	0x86,0xe2,0x9f,0xb7,0x3a,0xd0,0xdb,0xc2,0x5d,0xb0,0xde,0x31,0x73,0x43,0xe5,0x4b,0x6a,0xa1,0x6d,0xaa,0xca,0x34,0xfa,0xa9,0xaf,0xec,0x05,0x2a,0xdb,0x82,0xa1,0xdc,0xdc,0x3d,0xb5,0x92,0x42,0x28,0xdc,0x93,0xec,0xab,0x9b,0x75,0xae,0x7c,0xbf,0x9b,0x25,0x01,0xb1,0xc8,0x3b,0x47,0xb6,0xfd,0x11,0x6f,0x4b,0xaa,0x6f,0xdf,0x1f,0x15
db	0xc2,0xf3,0x87,0x4a,0xaf,0xf7,0x41,0x64,0x5a,0x19,0xa0,0xc4,0x4f,0x58,0xe8,0x19,0xe0,0x84,0x44,0xc7,0x65,0x0c,0xf1,0xff,0xcb,0x73,0xb2,0xac,0x25,0x28,0xe1,0xd4,0x03,0x16,0x3c,0x1c,0x24,0x3a,0xfc,0x2b,0x7e,0xcb,0xa3,0xba,0xb7,0x78,0x87,0xbe,0x95,0x06,0x27,0xb8,0x16,0x72,0xe4,0x24,0xa6,0x5d,0xe7,0x5e,0x93,0xa9,0x96,0xfd
db	0x01,0x1d,0xb8,0x7c,0x85,0x3c,0xe3,0xc9,0x56,0x68,0xcd,0xd9,0x79,0x97,0x50,0x39,0xfe,0x96,0x93,0x50,0xae,0xde,0xcd,0x8d,0xa0,0x38,0x31,0xba,0xca,0x21,0xff,0x19,0xea,0x44,0x95,0x4d,0xba,0xae,0xe2,0x62,0xd2,0x82,0x60,0x0c,0xb9,0x10,0x40,0x9a,0xaf,0x9b,0x17,0xcd,0xf3,0x26,0xec,0x38,0x13,0x18,0xd3,0xf2,0xd2,0x11,0xa6,0xc3
db	0x3c,0x3b,0xe8,0xa0,0x49,0xba,0x4e,0x07,0xec,0x44,0x75,0x1c,0xc9,0x2f,0x68,0x64,0x02,0x1d,0x14,0x35,0x80,0xd8,0xa8,0x53,0xde,0x44,0x65,0x72,0x37,0x28,0x61,0x5f,0xa1,0x58,0xea,0x17,0xb3,0x89,0x25,0xf7,0xcb,0x87,0xe6,0x43,0xc5,0xc3,0xf3,0xd1,0xf5,0x1f,0x18,0xe9,0xd1,0x05,0xd9,0x85,0x38,0xf0,0x5e,0x26,0x35,0xf2,0x72,0x92
db	0x34,0x2f,0xea,0xdd,0x7b,0x64,0xac,0x1d,0x78,0x41,0x56,0x83,0x7d,0x83,0x83,0x59,0xbe,0x9f,0x81,0x90,0x00,0x1f,0x04,0xd8,0xd8,0x8e,0xd9,0xeb,0x12,0x16,0x96,0x81,0x61,0x96,0xe8,0x7b,0x36,0x7b,0x26,0x9b,0x43,0x1e,0x0e,0xc2,0x59,0xdf,0x8f,0xb4,0x91,0x74,0x2e,0x1e,0x6d,0x20,0x70,0xe7,0x3c,0x39,0xe3,0xa8,0x62,0x66,0x32,0x63
db	0x7d,0x89,0xb6,0xad,0x69,0x38,0x2c,0x21,0xe5,0x02,0xcc,0x93,0x8a,0x65,0x71,0x65,0x02,0x5c,0xeb,0xc9,0x70,0xf3,0x81,0xce,0x65,0x37,0x22,0xb7,0x47,0x3c,0xd6,0x3d,0x29,0x65,0x29,0xba,0xf9,0xae,0xd9,0x1f,0xd7,0x38,0x88,0x95,0xa9,0x66,0xa8,0x77,0x75,0x4a,0xf9,0x2e,0xd9,0x63,0x75,0x80,0x90,0x82,0x39,0x8b,0x21,0x58,0xf4,0x2e
db	0x2d,0x1f,0x7f,0xcb,0x33,0xdb,0x9b,0x9b,0x31,0x21,0x4e,0x6e,0xdb,0x0f,0x1f,0x69,0x22,0x97,0x69,0xd7,0x7f,0x2e,0xd7,0xce,0x6c,0xe4,0xc0,0xe7,0x27,0x82,0xe6,0x8a,0xf8,0xae,0x46,0x2d,0x5a,0x45,0x82,0xce,0xb6,0x49,0x84,0x15,0x4a,0x54,0xa6,0x76,0xf3,0x29,0x28,0xc0,0x05,0x82,0xae,0x7d,0x85,0x41,0xb0,0x87,0x67,0x44,0x37,0x46
db	0x3e,0x47,0xbc,0x00,0x7c,0x05,0xd3,0xdc,0x9a,0x31,0x49,0xf8,0x48,0x99,0x57,0x4a,0x2b,0xe7,0xcf,0xb2,0xa7,0xf0,0xcf,0xc7,0xf5,0xfd,0x73,0x59,0xf1,0xe4,0x86,0xb5,0x5d,0xce,0x6d,0xbf,0xc6,0xe5,0xa9,0xca,0x75,0xe9,0x69,0xe6,0x09,0xab,0x66,0x17,0x09,0xe9,0xbc,0x14,0xd8,0x6f,0xe9,0xc2,0x87,0x39,0x2f,0x87,0x1e,0xb8,0x16,0x08
db	0x10,0xee,0x1c,0x2f,0x47,0x7d,0xa3,0x5b,0x1f,0x1f,0x5d,0x95,0xd0,0xa4,0xbb,0x08,0xc2,0x47,0xab,0x46,0x3c,0xbb,0xbe,0x3a,0x64,0x82,0x40,0x08,0x75,0x03,0x02,0x6e,0x6a,0xab,0x6b,0xd4,0x90,0xa7,0x28,0x7a,0xb4,0x8b,0x1f,0x6b,0xcc,0x16,0x30,0x16,0xf5,0xc6,0xd8,0x4a,0xed,0xc9,0xc7,0xac,0x0f,0x75,0x1b,0x13,0xe3,0x45,0x6d,0x22
db	0x7e,0x3d,0x59,0x55,0x87,0x8d,0x04,0xee,0x85,0xac,0x98,0x0c,0x52,0x5b,0xe6,0x92,0x04,0x31,0xdf,0x7c,0x44,0x4d,0x06,0xbe,0xb2,0x5a,0x95,0xef,0x29,0x75,0x9b,0xb2,0xe7,0xb8,0x83,0x18,0x82,0x23,0x4e,0x66,0xe5,0xdd,0x47,0xa1,0x6b,0x33,0x4e,0x9c,0x13,0x0e,0x0a,0x8a,0x5c,0xba,0x7b,0x2f,0x6c,0x72,0x78,0x86,0xd2,0xf8,0xbd,0x1b
db	0x4b,0x9e,0xe0,0x99,0x46,0x7f,0x24,0x0f,0x1b,0xda,0x85,0x87,0xe9,0xda,0x96,0x25,0xc6,0x81,0x77,0x8b,0x56,0xae,0x7a,0x9c,0x47,0x34,0xe1,0xac,0xf2,0xba,0x52,0x95,0xf8,0x56,0x26,0x66,0xf0,0x53,0xcc,0xc4,0x6f,0x46,0x94,0x10,0x22,0x69,0xb1,0x93,0x7b,0x51,0xb7,0xb8,0xdd,0x42,0x67,0x51,0x6d,0x9c,0xb2,0xbd,0xdb,0xdd,0x19,0xa2
db	0x25,0x13,0xfe,0x42,0xca,0x36,0xeb,0xce,0x15,0x41,0xe7,0x35,0xce,0xa8,0x45,0x56,0x58,0x9f,0x46,0xcf,0x11,0xe7,0xcc,0x40,0x54,0xe4,0x85,0x0d,0x73,0x36,0x7e,0xae,0x38,0x8c,0x56,0xab,0xf0,0x5f,0x5c,0xff,0x14,0x9b,0x46,0x1b,0x35,0xbd,0x03,0x0e,0x2f,0x9e,0xde,0xd8,0x82,0xfe,0xa0,0x09,0xb4,0xb4,0xbd,0x58,0xc0,0xe2,0x01,0xb1
db	0xca,0x5c,0x3d,0xc3,0x18,0x5e,0xc1,0xee,0x61,0x60,0x00,0xca,0x1e,0xf3,0x71,0xd8,0x15,0x37,0xf0,0x2e,0x13,0xa0,0xf7,0xac,0x73,0x4b,0xfb,0x6a,0x27,0x6b,0xde,0x69,0x3d,0x19,0x36,0x4b,0x63,0x55,0xae,0xd1,0x2b,0x66,0x69,0x0d,0x64,0xa7,0x86,0xfd,0x3a,0xb8,0xe6,0x87,0xaa,0x32,0x5f,0xbc,0xa7,0x67,0xde,0x7a,0xe0,0xdd,0xff,0x57
db	0x2c,0xc9,0x25,0x92,0x03,0x91,0xa8,0x0e,0x39,0xe4,0x9a,0xdf,0x21,0x29,0xc7,0xbc,0x93,0x01,0x2a,0x02,0xd8,0xaf,0xbc,0x20,0x57,0xc7,0x37,0x77,0xa7,0xad,0x5e,0x15,0x20,0xcf,0x4a,0x3c,0x22,0x1b,0x92,0xa9,0x05,0x91,0x70,0xb3,0x88,0x4e,0x97,0x58,0xf7,0x33,0x1a,0x05,0x33,0x57,0xdc,0xbb,0x2a,0xba,0xd0,0x22,0xac,0x40,0xbe,0x60
db	0xa2,0x89,0xe6,0x6c,0xf3,0x5d,0xef,0x58,0xb4,0x7c,0x4a,0x28,0xb8,0x16,0xd2,0xe0,0x49,0xf5,0xe8,0xaf,0x84,0x39,0xae,0x1e,0xa2,0x34,0x67,0x42,0x26,0x31,0x93,0x87,0x7a,0xd5,0xde,0x79,0xdb,0x4c,0x7e,0xcf,0x1f,0xef,0x9a,0x4c,0xb9,0x70,0xe2,0x72,0x9b,0xcd,0x30,0xe5,0xf1,0x84,0x44,0x5a,0xff,0x36,0xa2,0x37,0xe7,0x49,0x78,0x63
db	0xbe,0xe0,0x90,0xdf,0xef,0x9e,0xf3,0x55,0x9e,0x8a,0x51,0xe8,0xa3,0x32,0x2d,0xed,0xc8,0x99,0xf6,0x92,0xf9,0x62,0x74,0xa7,0x8d,0xcf,0xa5,0x09,0xb3,0x43,0xb9,0x18,0x70,0x59,0x4f,0xd2,0x7f,0x7e,0xce,0x1e,0x7d,0xe8,0xa9,0xb7,0x29,0x0f,0x86,0x8a,0xac,0x22,0x41,0x98,0xb2,0xc3,0x48,0x3b,0x60,0xcb,0x7b,0x1d,0xc3,0x5e,0x19,0x5b
db	0x31,0x57,0x12,0x09,0x41,0x54,0xf8,0x01,0x70,0x02,0x03,0x8a,0x6e,0x8e,0x5b,0x23,0xf3,0xd4,0x13,0xbf,0x51,0xba,0xf9,0x2d,0x6c,0xb9,0xb3,0x90,0xd0,0xa3,0x76,0xfb,0xef,0x85,0x17,0x8b,0x2c,0x05,0xa3,0x06,0x0a,0xaa,0xdd,0xbf,0xd4,0xcc,0xe4,0x96,0x19,0x7f,0x51,0xf6,0x7e,0xa1,0x2c,0x14,0x1c,0x21,0x99,0x28,0x3a,0x0e,0x36,0x1b
db	0xf1,0xd7,0x3e,0x29,0x94,0xa6,0x03,0xf7,0xe5,0x6f,0x1b,0x56,0xc8,0xfb,0x2d,0x4f,0x12,0x2b,0xc7,0x3a,0xec,0x5e,0xc8,0x88,0x1b,0xd8,0x65,0x21,0x04,0x0e,0xe2,0x95,0x6d,0x62,0xea,0xeb,0xee,0xbe,0x47,0x0a,0x90,0x26,0xe3,0x85,0xd7,0x1d,0xb5,0xd5,0x56,0x8b,0xc0,0x2f,0x7f,0x01,0xc8,0xac,0x90,0xc3,0x2d,0x10,0xf2,0x11,0x30,0x0c
db	0xa9,0x4d,0x13,0xde,0x65,0x6d,0x34,0x68,0x5d,0xad,0x3f,0x7a,0x56,0x3a,0x1f,0xb9,0xd6,0x7b,0x8f,0xe8,0x42,0x2a,0x16,0xb6,0x3f,0xf2,0x4f,0x14,0x8e,0x8e,0x29,0x88,0x68,0x1b,0x10,0x80,0x80,0x47,0x36,0xaa,0x82,0xf5,0xa8,0x97,0xc4,0xcb,0xc2,0xef,0xaa,0x9f,0xdc,0x96,0x4f,0x1f,0xaf,0x39,0x71,0x55,0x8f,0x3c,0xbf,0x26,0x91,0x46
db	0x38,0x59,0xa7,0xd1,0xb5,0x87,0xd6,0x81,0x71,0x17,0x83,0x05,0x40,0x9c,0xf3,0x33,0x4b,0x09,0x06,0xb1,0x69,0xfb,0x43,0x1f,0xef,0x9a,0xfe,0xc3,0x4e,0x4e,0x25,0xe1,0x3a,0xfb,0xf9,0xc9,0x97,0xe2,0x1c,0xa1,0x9a,0x06,0x6e,0xbb,0x16,0x4a,0x9f,0xf4,0x87,0x31,0x38,0x78,0xae,0x77,0x4c,0x42,0x28,0xc4,0x63,0xc0,0x49,0x37,0x4f,0xf9
db	0xeb,0x31,0x0d,0x3e,0x0c,0x8a,0xb7,0x17,0xa7,0x90,0x26,0xc2,0xea,0xa5,0x9d,0xe4,0x4d,0xc6,0x3a,0x33,0x2d,0x47,0x42,0x8c,0xeb,0x50,0xea,0xfe,0x74,0x43,0x06,0xcd,0xa5,0xb1,0x49,0xf0,0x98,0x91,0x25,0xf4,0x8d,0x06,0xd1,0xeb,0x56,0x2c,0xf9,0xc4,0x84,0x02,0x9e,0xf2,0x3a,0xfe,0xb4,0x39,0xce,0xee,0x85,0xb6,0x64,0x6c,0xbc,0x1f
db	0xe6,0x86,0x00,0xc3,0xa9,0xb4,0x53,0xdf,0x2d,0x7c,0xc6,0xde,0x2e,0x79,0x25,0x5c,0xbb,0xe5,0xbe,0x33,0xe9,0x58,0x49,0x35,0xbe,0xae,0xbc,0x06,0xdc,0x48,0x9d,0xc3,0x08,0x6f,0xe8,0xb8,0x48,0x67,0xea,0x1c,0x05,0xb4,0xf7,0xe3,0xcc,0xc1,0xb3,0xa8,0x61,0xcb,0xa8,0xf6,0x12,0x52,0x68,0x06,0x36,0x2b,0x15,0x43,0xc9,0x98,0xfe,0xe5
db	0x43,0x11,0x0d,0xc3,0x37,0x38,0x7a,0xcb,0x98,0x14,0xc1,0xaf,0x29,0x36,0x35,0x63,0x74,0x98,0xcf,0x0f,0x44,0xe4,0x6e,0xf7,0x3f,0x6e,0x15,0xe8,0xe9,0x93,0x7b,0x96,0x1b,0x84,0xe7,0x8b,0x83,0x30,0xa1,0xdc,0xc3,0xb8,0x18,0x2f,0xc5,0x34,0xd1,0xa5,0xb9,0xee,0x4a,0x04,0xbf,0x26,0x63,0x29,0xba,0x90,0xb5,0x7c,0x83,0x2b,0x1f,0xe8
db	0x5c,0x9f,0x23,0x40,0x7f,0x9c,0x2f,0x76,0x96,0xd6,0xd5,0x13,0xda,0x5c,0x81,0xa4,0x60,0x60,0xbd,0x5e,0xb3,0xd2,0x2c,0xaa,0x48,0x04,0x74,0x31,0x5d,0xbd,0x46,0xd8,0x8d,0x3f,0x62,0x2d,0x1e,0x17,0x97,0x08,0x71,0x06,0x1b,0x96,0x1b,0xd5,0x80,0xa6,0x41,0x06,0x10,0x6e,0x36,0xd4,0xfb,0x36,0x6d,0x96,0xb8,0x86,0x22,0x34,0xda,0x7e
db	0x6c,0x5f,0x3b,0x95,0x35,0x1b,0x42,0x3c,0xf2,0x9d,0xe3,0xe9,0x3f,0x44,0xd5,0x4c,0x60,0x55,0xae,0xbe,0x4f,0xf2,0xb3,0x84,0xa1,0x79,0xdf,0x86,0xf0,0x8f,0xad,0xa5,0xa3,0x4a,0xea,0x5d,0x68,0x34,0x17,0x4c,0xb7,0xd8,0x6f,0x67,0x22,0x85,0xe2,0x16,0xcf,0xba,0xee,0x92,0xeb,0x95,0x8e,0x67,0xb1,0xf0,0xbb,0xb0,0x34,0x2f,0x58,0x49
db	0x56,0x3e,0x81,0x31,0xb6,0xc3,0x2c,0xee,0x2b,0x85,0x72,0xbc,0xe9,0x20,0xaa,0x4e,0x34,0xb9,0x8b,0x32,0x2f,0x9e,0xd7,0x98,0x63,0x9d,0xfd,0x3a,0xe9,0x30,0x49,0x23,0x4a,0xb4,0xcb,0xc5,0xe5,0x78,0xcd,0x22,0x90,0xce,0x9f,0x35,0x13,0xda,0x8f,0x14,0xdb,0x36,0x0f,0x66,0x87,0x62,0x50,0xde,0x52,0x15,0x10,0x67,0x8a,0x5c,0xdb,0x76
db	0x51,0x7f,0x72,0x9b,0x8e,0x91,0x39,0xc8,0x3c,0x34,0x0f,0x3d,0x92,0x07,0xb8,0xef,0x2a,0x8b,0x59,0xbd,0x82,0xc1,0x5c,0x95,0x93,0x0d,0x3d,0x9b,0x51,0x53,0x38,0x6b,0xd0,0xe3,0x5b,0xbb,0xe5,0x6c,0xc0,0xb5,0x71,0xa8,0xd8,0x7d,0x5d,0xbd,0xfc,0x69,0xcf,0xcc,0xa1,0xcd,0x83,0x9d,0x8f,0x46,0x47,0xe7,0x36,0x19,0x9f,0x4d,0xda,0x9c
db	0xcb,0x2a,0x47,0x58,0x93,0xbb,0x64,0xa3,0x89,0x53,0xbf,0xc7,0xc2,0xe2,0x65,0x0f,0x4f,0x17,0xc6,0x4c,0x15,0xfe,0x4b,0x95,0xb2,0x79,0x4a,0xb8,0xf6,0xae,0xcc,0xba,0xc3,0x5d,0x18,0xb2,0x8e,0xd8,0x6b,0x43,0x1b,0x2f,0xe1,0x36,0xb2,0xa5,0x22,0xa0,0xc7,0xc0,0x26,0x8e,0x48,0x77,0x0c,0x14,0xdd,0xdc,0xde,0x71,0x98,0xce,0xdd,0x61
db	0x85,0xd9,0x23,0x42,0x7f,0x85,0xc8,0x06,0x81,0x3e,0xa2,0x0f,0x1e,0x3e,0xcf,0x33,0xef,0x43,0x6a,0xc7,0xee,0x3f,0x91,0x68,0x32,0x89,0xd9,0xed,0xdf,0x45,0x33,0x10,0xbb,0xd5,0xef,0x1d,0x3c,0x1e,0x26,0x21,0x4d,0x1a,0x06,0x98,0x60,0x71,0x7f,0xce,0x45,0x4e,0xe3,0x3f,0xfa,0xff,0xcd,0xe2,0x92,0x82,0x2e,0x83,0x69,0x9c,0xc6,0x5c
db	0x6e,0xb6,0xec,0x28,0xdc,0x7b,0xdb,0xf3,0x02,0x3a,0xf7,0xad,0x9b,0x7a,0x73,0xb2,0x07,0x70,0x76,0x9d,0xa2,0x11,0xcf,0x89,0xea,0xaf,0x6a,0xd2,0x15,0xeb,0x5a,0x99,0x1a,0x17,0x1d,0xce,0xc0,0x7f,0x50,0x26,0x84,0x07,0xd7,0x7e,0x33,0x27,0x74,0x84,0x18,0x32,0x86,0x32,0x34,0x28,0xe8,0x45,0x21,0xb7,0x26,0x3b,0x11,0xbb,0x9a,0x8b
db	0x46,0x8e,0x27,0xf8,0x62,0xb5,0x98,0x6e,0x03,0xee,0x9e,0xcb,0xbc,0x74,0xbe,0x63,0x7a,0x86,0xe5,0x75,0xeb,0x7f,0x14,0xa6,0x96,0x76,0x5a,0x46,0xa9,0xda,0xf1,0x4e,0x0e,0x90,0x59,0x56,0x4a,0x48,0x2d,0x91,0xbe,0x78,0x5b,0xfb,0xf7,0xea,0xab,0x1c,0xc0,0x0c,0x5d,0xba,0xb4,0x7b,0xc7,0x21,0xb1,0xc9,0xa3,0x20,0xe6,0xae,0xee,0x0e
db	0xf0,0x3b,0x44,0xd6,0xaa,0x57,0x88,0x1f,0x76,0xc8,0x43,0x07,0x91,0x71,0xa5,0xcc,0x04,0x38,0x01,0x13,0xa6,0xea,0x18,0x48,0x8f,0x09,0x8d,0x37,0x8b,0x6f,0x35,0x36,0x51,0xc6,0x30,0xca,0x9e,0xe2,0xaf,0x0c,0x26,0x14,0xe3,0xbf,0xea,0x0e,0x14,0x88,0x97,0xcc,0xf6,0xc1,0x8f,0xad,0xef,0x2d,0xc1,0x0f,0xad,0x45,0x12,0x7a,0xe6,0x37
db	0x97,0xcb,0x34,0x83,0xd8,0xef,0x34,0x2a,0xce,0xd0,0x21,0x8a,0x7d,0x87,0x7a,0x66,0xf7,0x1c,0xdf,0xa0,0x3f,0xa0,0xf6,0xb3,0x24,0xee,0x6e,0x21,0xe9,0xc3,0x73,0xe4,0xd9,0xc6,0xf6,0xf6,0xac,0x25,0xb7,0xb5,0x64,0x7f,0xcc,0x88,0x3e,0x98,0xe1,0xef,0xa9,0xd2,0x03,0x10,0x4b,0xa3,0xbc,0x3c,0x24,0xfc,0x41,0x36,0x30,0x2d,0xca,0x17
db	0x35,0xd6,0x17,0xa2,0x2b,0x48,0xed,0xd3,0xd7,0x18,0x4f,0x45,0xe9,0x59,0x03,0x35,0xa0,0x80,0x75,0x17,0x48,0xd5,0xea,0x07,0x7a,0x6c,0x3f,0x7a,0x2c,0x02,0x0a,0x7f,0xb5,0x17,0xea,0xf4,0xf6,0xb5,0xf4,0x81,0xba,0x69,0x44,0x81,0x6b,0xff,0xb2,0x43,0xae,0x3d,0x37,0x81,0x91,0x3f,0x6a,0x70,0x35,0x2d,0x06,0x9d,0xa8,0xb5,0xb8,0xc7
db	0x19,0x3a,0x5f,0x59,0x79,0x0b,0x62,0x23,0xa4,0x5b,0x46,0x7b,0x17,0x82,0x19,0x87,0xe8,0xdf,0x09,0xb7,0x50,0x7e,0x40,0xe3,0x71,0x2d,0x09,0xde,0x69,0x2e,0x6c,0x35,0x5c,0x44,0xae,0xb7,0x05,0xb8,0x7e,0xb4,0xe4,0x34,0x05,0x1f,0xd2,0x1f,0xe5,0x79,0x2a,0x15,0xf8,0x8f,0x02,0xc7,0xc8,0x1e,0xe6,0x12,0x83,0x08,0x9c,0x7a,0x2f,0xc6
db	0xc9,0x15,0x0f,0x0f,0x0f,0xa9,0x53,0x16,0x19,0x5b,0x74,0x58,0x6c,0xac,0x21,0x72,0x7f,0xa1,0xae,0xbc,0x34,0x76,0xa6,0x9b,0xbe,0x0f,0x13,0x55,0x50,0x5a,0x8b,0x9e,0xb3,0xf3,0x9e,0x8b,0x61,0xbe,0xb4,0x09,0x71,0x61,0xf0,0xd6,0xaa,0x8c,0x0d,0x0c,0x66,0x31,0x88,0xe3,0x71,0x6a,0xb5,0xaa,0xc0,0x9b,0xce,0x0d,0x79,0x90,0xc1,0x0a
db	0xf9,0xfe,0x4d,0x49,0xd0,0x5a,0x63,0xf1,0xfc,0x47,0x71,0x9e,0xbb,0xd1,0x2c,0xef,0xfe,0x90,0x28,0x75,0x82,0xf6,0xa5,0x95,0xea,0x65,0xfa,0xe8,0x04,0xcd,0xb4,0xe1,0x0d,0xb2,0xac,0xd5,0x12,0xf5,0x17,0xbb,0x3b,0x2e,0x52,0x9e,0x7b,0xe7,0x8e,0x86,0x03,0xce,0x77,0x01,0xf0,0x4f,0xb5,0xf7,0xef,0x8b,0x37,0x5e,0x97,0x80,0xbb,0x2b
db	0xcf,0x9a,0x63,0x18,0xc5,0x0c,0xfb,0x3c,0x91,0x9c,0x37,0x90,0x76,0x71,0x62,0xbc,0x80,0x40,0x1a,0x74,0xb8,0x1b,0x61,0xb1,0x89,0x4d,0xf7,0x8d,0xd4,0x46,0xef,0x1f,0x3b,0xac,0xe8,0x41,0x62,0x8e,0xea,0x2b,0x56,0x22,0x25,0x37,0x70,0x53,0xcd,0x8f,0x57,0xfa,0xad,0x00,0xc5,0x0c,0x9e,0x57,0xde,0x50,0x07,0x8d,0x80,0xbf,0x22,0x5d
db	0x4a,0xbd,0x6a,0xcb,0xfc,0x6f,0xd1,0x56,0x8f,0xd5,0x34,0x8a,0xe6,0xe9,0xa0,0x00,0x06,0x12,0xd8,0xb1,0x49,0x0a,0xbb,0x87,0xe5,0xca,0x75,0x11,0x4c,0x85,0x60,0x77,0xc0,0x90,0x1c,0x14,0x38,0x38,0x3e,0x4f,0xff,0xbf,0xfc,0xa1,0xa1,0xe7,0xb0,0x5d,0xd8,0x1f,0x33,0x07,0x5f,0x04,0x4f,0xc7,0x93,0xc6,0xcc,0xe3,0x01,0xd0,0x43,0xe1
db	0xd9,0x00,0xc5,0x9f,0x79,0xab,0xfc,0xe9,0x55,0x51,0x03,0x0c,0xe1,0x73,0xd6,0x09,0xe3,0xb9,0x76,0x72,0x77,0x4c,0x1b,0x7c,0x57,0x1e,0x7f,0x5f,0x02,0x83,0xa3,0xc6,0xde,0x23,0x85,0x76,0x1a,0xbf,0x48,0xc8,0x02,0xdb,0x31,0x30,0x95,0x85,0x68,0x8a,0xf6,0xe9,0x48,0x7f,0xc9,0x26,0xab,0x68,0x36,0x9f,0x1c,0xf0,0x90,0xbc,0x4a,0x68
db	0x94,0xf8,0x7f,0xae,0xa9,0x3b,0x5b,0x63,0x9a,0xcd,0xe3,0xf0,0xac,0x9f,0x6f,0x78,0xa0,0x67,0x58,0xd8,0x2c,0x71,0x8a,0x14,0x31,0x07,0x95,0x0c,0x38,0xa4,0x53,0x33,0x60,0x23,0x21,0x87,0x6b,0x4f,0xf9,0xa8,0xb8,0xfc,0x8e,0xf1,0x3a,0x03,0x0b,0x03,0x02,0x33,0xbc,0x6a,0xb9,0x8e,0x41,0xc8,0x38,0xd8,0x83,0x30,0x6a,0x61,0x5c,0xcf
db	0x49,0xdd,0xd7,0xda,0x2c,0xaf,0xc4,0x68,0xad,0x07,0x9c,0xd4,0xaf,0x94,0x64,0xcf,0xe1,0x9b,0x37,0x50,0x65,0x03,0x20,0x3c,0x34,0x43,0xe9,0xb0,0x9b,0xba,0xb1,0x9a,0x3e,0x10,0x99,0x8f,0x93,0xb7,0x3d,0xac,0xbd,0xab,0xa8,0xfa,0x74,0x90,0xe1,0x38,0xe4,0xf3,0x47,0xfc,0xad,0x8b,0xb4,0x98,0xe4,0x65,0xe9,0xd9,0x8a,0x21,0x81,0x4f
db	0x0c,0xd7,0xb1,0x84,0xb9,0x69,0x68,0x64,0xa3,0x1f,0x25,0x84,0x5f,0xf7,0x3f,0xca,0x52,0xff,0xda,0xc9,0x3d,0x5e,0x8b,0x57,0xd3,0x9a,0x1d,0xb7,0xae,0x90,0xa4,0xc3,0x78,0x68,0xfd,0x80,0x3f,0xfd,0x5c,0x09,0x83,0x5d,0xc2,0x48,0xd8,0x84,0xeb,0x8a,0xfe,0xbe,0x30,0x12,0x79,0x54,0x5f,0x7f,0x6e,0x4b,0x8a,0x1e,0xcb,0xcd,0xed,0xb6
db	0xe9,0x6d,0x8a,0x1f,0xdc,0xb1,0x46,0xab,0xdc,0x0d,0xbf,0xda,0xd9,0x39,0x3b,0xd2,0x81,0x00,0x83,0x77,0x32,0xf7,0xdf,0x0e,0x31,0x5d,0x1d,0x6c,0xa7,0x4e,0x54,0xa8,0xac,0x81,0x8c,0xb6,0xa5,0x89,0x02,0xd7,0x2e,0xfd,0x26,0xa3,0x9e,0xcf,0xdb,0x1f,0x5a,0xf3,0x54,0xac,0xe5,0xd0,0x1f,0x9b,0xa7,0xab,0x28,0xcc,0x66,0xd3,0xbc,0x4c
db	0x54,0x1a,0x54,0x73,0x78,0xde,0x08,0xd5,0xa5,0x08,0xdc,0x00,0x09,0xc5,0x37,0x61,0x1a,0x98,0x12,0x84,0x2d,0xff,0xc3,0x25,0x62,0x93,0x83,0x05,0x66,0x3d,0xfb,0x1d,0x54,0x08,0x8a,0x50,0x03,0xc4,0xc4,0x6e,0xfa,0x16,0x83,0xbb,0x27,0xf1,0xb7,0x31,0x92,0x64,0x76,0xbc,0xf0,0x44,0x62,0xe9,0x5e,0x15,0x94,0xdc,0xe9,0xf3,0xf8,0x20
db	0x93,0x4d,0x11,0xa2,0xc8,0xde,0x83,0xe6,0x75,0x63,0xfe,0x13,0x75,0x0f,0x79,0xd1,0x3d,0x75,0xb7,0x43,0x62,0x57,0x8d,0x96,0x9c,0xa3,0xc4,0xb2,0x84,0x6a,0x14,0x6e,0x17,0x32,0x09,0x76,0x95,0xbb,0xd6,0xc1,0x2e,0xdc,0x8c,0x73,0xd7,0xad,0x5a,0x41,0x8b,0xb3,0x7e,0x8d,0x90,0xec,0xf5,0xa0,0x46,0x90,0x4c,0x52,0xec,0x97,0xc6,0x98
db	0x7d,0x19,0x77,0xa0,0x99,0x85,0x11,0x26,0x77,0x26,0xf9,0xac,0xe3,0x81,0xcf,0x7d,0x22,0xc8,0x00,0x3d,0x5b,0xee,0xa5,0xf8,0x6d,0xfe,0x47,0xe4,0xef,0x60,0xcc,0xd0,0x33,0xf7,0x5b,0xed,0xbd,0x82,0xc9,0xa8,0x41,0xb8,0x47,0x34,0x9f,0x62,0xb2,0x67,0x62,0xb0,0x3a,0x27,0x95,0xe1,0x22,0x76,0x98,0x0f,0x35,0xaf,0xfc,0x4d,0xc7,0x92
db	0x92,0x7e,0xaf,0x3b,0x3a,0x36,0x5e,0x5c,0xbf,0x43,0x02,0x66,0x5a,0x30,0x78,0x82,0x52,0x20,0x98,0xd6,0xa1,0xe9,0x9a,0x61,0x54,0x0b,0x74,0x85,0xb5,0x99,0x69,0x9f,0x9b,0x3b,0x2f,0x49,0xec,0xb3,0x18,0x0c,0x4a,0x53,0x20,0xd7,0x80,0x7b,0xd4,0x20,0x21,0x32,0x89,0x08,0x81,0x50,0x2b,0x16,0x8d,0xbb,0xe6,0xbb,0xc7,0x74,0x80,0x67
db	0x47,0xf1,0x06,0x68,0x02,0x37,0x31,0x00,0x50,0x8b,0xe2,0x44,0x85,0x2e,0x39,0x54,0xda,0x26,0x7b,0xe1,0xb0,0x23,0xd7,0x0c,0x3c,0x3b,0x81,0x9b,0xa6,0xbe,0x24,0xfd,0x09,0x73,0xbe,0xc3,0x2f,0xa0,0x7b,0x85,0x5b,0x1b,0x55,0x4e,0x9e,0x38,0x80,0x61,0xd7,0xe8,0x9b,0xec,0x88,0x00,0x6a,0x64,0x1b,0xd5,0x65,0x20,0x2a,0x62,0x64,0xbc
db	0x21,0xca,0xce,0xc3,0xeb,0x2d,0x2b,0x5c,0x4d,0xb8,0x7c,0xb5,0xbe,0x98,0x0d,0x5b,0x88,0x23,0x60,0xff,0xbe,0x0a,0xb6,0xdd,0xdf,0x28,0xd5,0x2c,0xe5,0x9d,0xb5,0x29,0xea,0x6c,0x3a,0xf4,0x78,0x91,0xa3,0xb2,0xab,0x12,0xf9,0x90,0x96,0xc9,0xa4,0xfc,0x4d,0x28,0x2b,0x0c,0x28,0x8b,0xb7,0x8b,0x36,0xd6,0x80,0xbf,0x07,0x09,0xf9,0x62
db	0x32,0xc0,0x50,0x60,0xd9,0x73,0xe3,0xbe,0xfa,0xa6,0x78,0x48,0x47,0xd7,0xb5,0x39,0xd8,0x04,0x6d,0x79,0x98,0x2e,0xd6,0x3a,0xe5,0xc9,0x01,0xd0,0x00,0x2e,0xd2,0x8b,0xd7,0x1f,0xf1,0xba,0xd4,0x0e,0x9f,0x9d,0xab,0xbf,0x2c,0xe1,0x75,0xf6,0x9c,0xc0,0xae,0x73,0x2b,0x58,0xcb,0x6d,0x46,0x6d,0x11,0xb7,0xce,0xc7,0xef,0x34,0x2c,0x11
db	0x93,0x3c,0x17,0xd9,0x3e,0xad,0xc9,0x4c,0xb3,0xd0,0x0a,0xd0,0xfe,0xf3,0x9d,0xc5,0x43,0x03,0xa9,0x78,0x4a,0x42,0x7f,0xfb,0x75,0xd2,0x85,0xfb,0xe7,0xe6,0xa9,0x48,0x2f,0xa6,0xc3,0x16,0xe2,0x2a,0x9d,0x0d,0xcb,0x2e,0x8b,0x75,0xa8,0x14,0x3a,0x2e,0xb1,0xff,0x58,0x1d,0xa8,0xa6,0xc0,0xf6,0x17,0xda,0xc1,0xce,0xaf,0x08,0xa9,0xc2
db	0xa3,0xc1,0xab,0xb6,0xe8,0x10,0x57,0x8a,0xce,0xc0,0x03,0x5c,0x53,0x5c,0x02,0x5d,0xcf,0x5c,0x65,0xc6,0x47,0x3c,0x62,0x0e,0xa3,0xfc,0xe2,0xae,0x10,0x55,0x4a,0xb4,0x27,0xe8,0x59,0x5e,0x45,0xa9,0xbb,0x21,0x10,0x91,0x46,0x1f,0x50,0x3b,0xc6,0x8c,0xa1,0x8a,0xee,0x5e,0x6e,0x32,0xe6,0x42,0x40,0x79,0x7f,0xbb,0xb3,0x5b,0x05,0xde
db	0xe0,0xf6,0x7f,0x3d,0x37,0xe6,0xc3,0x3b,0x40,0xc9,0xe0,0x42,0x36,0xd0,0x0e,0x13,0x32,0x3e,0x48,0xce,0xd8,0xa2,0xef,0xae,0x93,0x66,0x7d,0xde,0xb9,0xdd,0x60,0x15,0x53,0xf2,0xd9,0x90,0x3d,0x38,0x8c,0xa6,0x34,0x44,0xb5,0x6c,0x74,0x7d,0x9d,0xe7,0xd0,0xef,0x6c,0xd6,0xfe,0x9b,0x79,0x4e,0x79,0x5e,0x48,0xef,0x93,0xb2,0x81,0x0b
db	0x2b,0xee,0x83,0x69,0x3d,0x15,0x8c,0x27,0x69,0x6f,0xca,0xbf,0x75,0x29,0x37,0xc6,0xe6,0xca,0xb2,0x70,0xd0,0xaf,0xc8,0x5e,0x69,0xf1,0x6b,0x2d,0x0d,0xe7,0xe9,0xbf,0x07,0x52,0xe5,0xac,0x98,0xcf,0xcf,0xd6,0xdd,0x7c,0x2b,0xfc,0x8f,0xd2,0x5f,0x81,0x4b,0x1b,0x7b,0x2d,0x84,0xe2,0x69,0x96,0xcb,0xa2,0x59,0x10,0xba,0xda,0x51,0x11
db	0xeb,0xc3,0x4f,0x10,0xbf,0x8e,0x5b,0xbb,0xa3,0x29,0xe9,0xd8,0x0e,0x71,0xa0,0x1b,0xff,0xee,0x36,0x8c,0x00,0x83,0x6b,0x32,0xfe,0x05,0xeb,0x89,0x8f,0xed,0x48,0x22,0xe1,0x76,0x0a,0xac,0xae,0x3c,0x24,0x54,0x84,0xc2,0x0f,0x79,0x33,0x2b,0x49,0x35,0x1c,0x84,0x5a,0xca,0x92,0x6c,0x1f,0x78,0x15,0x5a,0x36,0xad,0xd5,0x1d,0x9d,0x10
db	0xc1,0x5f,0x7c,0x61,0x60,0xba,0x2e,0xe6,0x9b,0x34,0x02,0xe9,0x68,0x1c,0xfb,0xbf,0x02,0xdc,0x79,0x57,0x1c,0x0f,0xc8,0x8c,0x2a,0x66,0x2a,0x50,0xaa,0x81,0x4e,0x1f,0xa8,0x2d,0xe4,0x61,0xe8,0x43,0x84,0xcb,0xda,0x96,0xf9,0x4a,0xd0,0x8f,0xe1,0xd7,0xc4,0x05,0xf5,0x76,0xfa,0x47,0x7a,0x07,0x1a,0x77,0xbb,0x63,0xb3,0x3a,0x85,0x3b
db	0x0d,0x32,0x4f,0x14,0x15,0x02,0x5b,0x9c,0xbc,0xc2,0x12,0x90,0x0f,0x7b,0x94,0x27,0x5f,0x70,0x23,0xd8,0x5d,0x54,0xc4,0xca,0x6a,0x69,0x9e,0xd1,0xb3,0x2a,0x75,0x1a,0x07,0x9c,0x20,0xf6,0x76,0x22,0x4d,0x09,0x30,0x24,0x3f,0x3b,0xe5,0xcb,0x4b,0x5a,0x03,0x2d,0xe8,0xbe,0xed,0xf0,0xe3,0x91,0xf2,0x6c,0xb8,0x02,0x2d,0x6c,0x7a,0xa6
db	0xc1,0x8e,0xa7,0xbb,0x73,0xdf,0x40,0xa5,0x60,0x91,0xbf,0xbe,0x28,0x0b,0x37,0x2e,0x5f,0x4b,0xcd,0x14,0x4d,0x2d,0xfc,0x5e,0x43,0xb5,0x78,0x8d,0xea,0xa0,0x86,0x54,0x4f,0xb6,0x25,0x40,0x39,0x3f,0x9c,0x7a,0x26,0x74,0x88,0x42,0x53,0xb0,0x3b,0x81,0x75,0x04,0x67,0x41,0x65,0x66,0x2c,0xdc,0xe9,0xf0,0xb3,0xab,0x2a,0xa5,0xf3,0xef
db	0xfa,0xc5,0x10,0x63,0xe2,0x70,0xb5,0x29,0x60,0x86,0x9e,0xb9,0x0b,0xe2,0xc4,0x05,0xa9,0x3c,0x1b,0x60,0x15,0x6b,0x2f,0x74,0x93,0x5e,0x70,0x9a,0x56,0x6a,0xc4,0x92,0x49,0xaa,0x95,0x51,0xc4,0xba,0xfd,0xf6,0x2d,0x36,0x3e,0x66,0xbd,0x74,0xbc,0x2e,0xb3,0xad,0xa1,0x41,0x50,0x33,0x79,0x84,0xac,0x21,0x7a,0xfc,0x3a,0x8e,0xdb,0xcc
db	0x27,0xf6,0x2c,0x5c,0x23,0x38,0x73,0xd5,0xaf,0xc9,0x2d,0x9c,0x18,0x58,0xdf,0x8f,0x89,0x9d,0xdd,0x00,0x3c,0x5f,0x23,0x00,0x6e,0x66,0x1d,0xf3,0x1c,0x40,0x9d,0x43,0xb0,0x74,0xf1,0x41,0xa5,0x77,0xcb,0x8d,0x5b,0x94,0x68,0x95,0xb6,0x0e,0xd4,0x4d,0x47,0x9b,0xd2,0xcd,0x9b,0x94,0xa4,0x28,0xf9,0xf0,0x3d,0xcf,0x89,0xb1,0xc3,0x73
db	0x84,0x15,0xb6,0xc8,0x6b,0xf1,0xb1,0xdc,0x1b,0x1a,0x6f,0xb5,0x73,0x87,0x8b,0x63,0xbf,0x4b,0x25,0x9b,0xe4,0xdd,0x44,0xed,0xe7,0x0e,0x6f,0x03,0xae,0xa1,0x5e,0x1f,0x5f,0xa7,0xa4,0xed,0x69,0x7a,0x91,0x6d,0x55,0xac,0xce,0x18,0x32,0x17,0x78,0x49,0x9f,0x1e,0x9c,0xd2,0x7b,0x1f,0x74,0x60,0xa5,0x64,0xb1,0x99,0xe6,0xc5,0x0d,0x69
db	0xfa,0xb2,0xd9,0x05,0x61,0x71,0xa4,0x6f,0xc2,0xb6,0x91,0x0e,0x6c,0xf2,0xa6,0x6c,0xea,0x8e,0x94,0x8b,0xac,0xa7,0xfe,0x70,0x8e,0x8d,0xc2,0x85,0xa6,0xa7,0x8e,0xe8,0xfa,0xbc,0xa1,0xaf,0x0e,0xa9,0x06,0xa4,0x9a,0xb0,0x23,0x93,0xbc,0x93,0x2d,0x97,0x42,0xe2,0x0d,0x3a,0x65,0xb4,0x60,0x5b,0xeb,0xa1,0x20,0x8a,0xdc,0x17,0x6b,0xc5
db	0x19,0xc3,0x67,0xbf,0xae,0xf7,0xb9,0xb1,0x88,0x7f,0xe5,0x1b,0xc2,0x61,0x97,0xa0,0xd3,0x64,0x74,0x6b,0x7a,0x46,0x39,0x3f,0xc8,0xd3,0x53,0x79,0x74,0x4e,0x1e,0x63,0x91,0xc5,0x4a,0x70,0xb0,0x05,0x35,0x19,0xc2,0x26,0x54,0x44,0x3b,0xa9,0x12,0x40,0xd0,0x21,0x19,0xf3,0x8d,0xc7,0x2b,0x88,0x9a,0xec,0x41,0x8f,0x4f,0x23,0x19,0x1a
db	0xf3,0x1d,0x0a,0x88,0x0f,0xa7,0x02,0xd4,0x78,0x88,0xe6,0x43,0xb6,0x9e,0x07,0xdf,0x6a,0x1f,0x41,0xbb,0x3e,0xea,0x15,0xff,0x66,0x4c,0x7a,0x8b,0xee,0x27,0x47,0x81,0x81,0x95,0xa2,0x22,0xb4,0x9f,0x1c,0x09,0x1c,0xfc,0x0a,0xef,0x88,0x7f,0x59,0x60,0x91,0x6a,0xe4,0x92,0x8c,0x02,0x54,0xc9,0xee,0xc7,0x5e,0xd1,0xbf,0xc9,0x41,0xde
db	0x2f,0xa3,0x22,0x07,0x1d,0x8c,0xe1,0x04,0x59,0x94,0x75,0x3e,0xee,0x56,0x62,0x07,0x80,0x18,0x60,0x78,0x0e,0x55,0x06,0xec,0xe1,0xa5,0xf6,0x21,0x7e,0xf9,0x37,0xab,0x6a,0xed,0x07,0xcb,0xbf,0xa2,0xab,0x50,0xee,0x1f,0x2f,0x54,0x2b,0x82,0x93,0x59,0x03,0x35,0xd9,0xe8,0x2b,0xa6,0x03,0xc2,0xef,0x37,0x85,0xfc,0x89,0x06,0x30,0xe0
db	0xc2,0x00,0xc4,0xaf,0x59,0xb6,0x31,0x52,0x37,0xa4,0x6c,0xdb,0x1b,0x20,0x87,0xf0,0xa4,0x15,0x4b,0xa8,0xd9,0x7e,0x1b,0x96,0x00,0x07,0xf4,0x86,0x07,0x14,0x55,0x70,0x37,0xe3,0xe3,0xf0,0xeb,0xd6,0xf1,0xe0,0xe9,0x6c,0xdf,0x3d,0xaf,0x86,0xb8,0x00,0x9b,0xdf,0xc6,0x5c,0xd2,0x53,0xcb,0xcf,0x63,0xcc,0x3e,0x6d,0x62,0xeb,0xe6,0x97
db	0xd8,0x54,0xed,0x36,0xe4,0xed,0x69,0xaa,0x10,0x83,0xde,0x16,0xfd,0xcc,0xd6,0x24,0xb9,0x3c,0x4f,0x99,0x81,0xc2,0x23,0x16,0x91,0x5d,0x9f,0x46,0xa5,0xdd,0xb4,0x8a,0xe1,0x07,0x89,0x84,0x2e,0x62,0x48,0xf6,0x1a,0x17,0x7b,0xc8,0xf7,0xb4,0x3d,0x9e,0x82,0xe3,0xe3,0xcf,0x0b,0xd9,0x52,0x90,0x61,0xd8,0xdf,0x9e,0xc4,0xc7,0x7c,0xfa
db	0xcf,0x09,0xd2,0x94,0x86,0x37,0x94,0xaf,0x7e,0x0a,0x9d,0x16,0xee,0xad,0xfb,0xa2,0x9e,0x2d,0x2f,0xad,0xd5,0xc2,0xf9,0x91,0xf8,0x7e,0x2b,0xb8,0xb2,0x60,0x3c,0x0a,0x89,0x53,0x07,0x87,0x3b,0x83,0x70,0xee,0x71,0xa3,0x94,0x0b,0x77,0x50,0xeb,0xcc,0x23,0xf0,0xbe,0x95,0x51,0x54,0xd2,0xd6,0xd2,0x09,0xa5,0x19,0x3d,0x4e,0xec,0xe3
db	0x88,0x71,0xa7,0xb1,0x10,0x03,0x7e,0xc4,0x92,0x2a,0xe7,0x99,0x75,0xff,0xae,0x10,0x3d,0xbb,0x33,0xc9,0x7f,0xc2,0xe6,0x3c,0xc4,0xe7,0xba,0x37,0xba,0x68,0x69,0x92,0x4a,0xfb,0x32,0x3b,0xb5,0xde,0xdb,0x91,0xd0,0x8e,0x77,0xf2,0x1e,0x2d,0x25,0xb4,0xa0,0x42,0xef,0x78,0x6c,0x75,0xcb,0xa0,0x73,0xdf,0xde,0xd8,0x26,0xfe,0xe3,0xf9
db	0x74,0xe7,0xa0,0xd2,0xbd,0x6c,0x99,0x8d,0x07,0xf2,0xf8,0xff,0x36,0x2d,0x8e,0xda,0x5e,0x5c,0x47,0x06,0xf8,0x08,0x33,0x1d,0x93,0xcf,0xc3,0x1a,0x20,0x86,0xb6,0x8e,0x44,0x10,0xbc,0xba,0x89,0xfc,0xa3,0x57,0x92,0x2c,0x28,0xa1,0xd0,0xab,0xdc,0xba,0x0a,0x7e,0x9d,0xd2,0xfd,0x09,0xd3,0x87,0x6c,0x06,0x44,0x17,0x73,0xfe,0xc9,0x8b
db	0x52,0xd3,0x09,0x60,0x14,0x03,0xb1,0x79,0x4c,0x9c,0xc4,0xec,0x42,0x4c,0xd3,0x21,0xe5,0x34,0x21,0x38,0xdd,0x12,0x95,0xd4,0x20,0x50,0xef,0x5f,0x46,0x4f,0x37,0x65,0xd5,0xf1,0xb2,0x2c,0x6c,0x9a,0x06,0x28,0x77,0xbf,0xe3,0xec,0xec,0x2b,0xcb,0x2c,0x8b,0x62,0x2e,0x39,0xaa,0x28,0x0b,0x51,0x01,0xa5,0x02,0x06,0x66,0x4a,0x67,0x0c
db	0x96,0xa3,0x12,0x74,0x94,0x2c,0x0f,0x23,0xa3,0xea,0xda,0x1a,0x6d,0x54,0x30,0x33,0xc8,0x33,0x0a,0xfb,0x25,0x2a,0x8b,0x9a,0x87,0xd9,0x9d,0x37,0x4c,0x41,0x3b,0xe5,0x4a,0x81,0x92,0x40,0x38,0x18,0x82,0x13,0x54,0xde,0x56,0x11,0x63,0xf3,0x09,0x61,0x3b,0xdd,0x0c,0x71,0xe8,0x4f,0xc2,0x9a,0x77,0x2f,0xeb,0xf1,0x39,0x1c,0x10,0x0e
db	0x01,0xaf,0x92,0x34,0x9a,0xb6,0x7b,0x79,0x86,0x0c,0xf1,0x53,0xb6,0x59,0xbd,0x6d,0x79,0x6e,0x37,0x11,0x25,0x67,0x95,0x31,0x4f,0x43,0xdf,0xb7,0x4b,0x80,0x8d,0x07,0x3c,0x49,0x73,0x8a,0x72,0x61,0x02,0x0f,0x2f,0x13,0xed,0x91,0x10,0xf6,0x08,0xf3,0x50,0x4a,0xd4,0x36,0xcb,0x52,0xb3,0x3b,0xe6,0xef,0x85,0xe9,0xe0,0xad,0x0d,0x3d
db	0x84,0x07,0x70,0xdf,0x16,0x47,0xeb,0x26,0x19,0x27,0xaf,0x7a,0x9f,0x2f,0x2b,0x6d,0xbb,0x37,0x68,0x8e,0x19,0x46,0x5a,0x65,0x0d,0x0a,0x67,0xd8,0xe2,0xc2,0xcd,0x49,0xf6,0xc2,0x27,0xac,0x12,0xea,0x1f,0x81,0x60,0xac,0x8b,0x5d,0xcc,0x9a,0x5b,0xec,0xc3,0xcb,0x85,0x0d,0xef,0xa6,0xd5,0x33,0xb3,0x67,0x73,0x3f,0xc9,0x90,0x25,0x3e
db	0xe6,0x7c,0x41,0x59,0x83,0xf7,0x90,0x4a,0xbf,0x14,0x72,0x11,0xf2,0x3a,0x38,0x58,0x17,0xd8,0x3d,0x00,0xc6,0x42,0xf2,0xbc,0xfd,0x05,0x37,0x6d,0x11,0xb0,0xd7,0xb2,0xb7,0x73,0x69,0x80,0x47,0x30,0x64,0x13,0x8c,0x24,0xb2,0x42,0x12,0x8c,0xc0,0x8a,0x45,0x0b,0x71,0x23,0xeb,0xac,0x65,0xda,0x44,0x13,0x85,0x77,0xdf,0xb8,0x4b,0x69
db	0xd4,0x8e,0x40,0x54,0x24,0xac,0xc8,0x62,0x36,0x51,0x20,0xaa,0xcd,0x5d,0xa5,0x73,0x2c,0x81,0x92,0x99,0x44,0x6b,0x04,0xac,0x8e,0xee,0x96,0x29,0xca,0xdc,0x2f,0xd1,0x13,0x5c,0x9e,0xc2,0x67,0x6a,0xaf,0xf6,0x3e,0xe2,0xa1,0x6d,0xda,0xbe,0x8a,0x55,0x50,0x27,0xee,0x6d,0xb8,0x35,0x5f,0xb4,0xa8,0x76,0xa1,0xe2,0x52,0x87,0xf6,0xfb
db	0xe2,0x16,0x1c,0x90,0x78,0xe4,0x17,0xb0,0xd9,0x56,0xf5,0xd3,0xa4,0xb0,0x3f,0xe9,0x01,0xf9,0xd0,0x67,0x2b,0xeb,0x1d,0x73,0x24,0x90,0x36,0x36,0x0d,0xcf,0xfb,0x3f,0xa1,0xa0,0x25,0x3b,0xf1,0x7f,0x9e,0x90,0xcf,0xb6,0xd0,0x83,0x90,0xcd,0x3f,0xff,0x5f,0xa3,0x33,0x95,0xd7,0xbe,0x78,0xfe,0xcc,0x9a,0xb9,0x64,0x88,0xb7,0xd9,0x5e
db	0x46,0x2d,0xf0,0xb1,0xa1,0x81,0x2b,0xab,0x80,0xf5,0x4d,0x3b,0xd8,0x53,0x64,0x8f,0xac,0x7a,0x03,0xb3,0x39,0x7a,0x85,0xef,0x61,0xb5,0x2c,0x8e,0xf4,0x27,0x07,0x9b,0x7b,0xc9,0x8b,0x1a,0xe4,0x4f,0xce,0x8b,0x35,0x32,0xac,0xcf,0x47,0xb8,0x2f,0x9e,0xe5,0x11,0x48,0xc1,0x07,0xea,0x0c,0xee,0x06,0xc6,0xa3,0x48,0xb6,0x1a,0xd8,0xb4
db	0xa7,0xae,0x59,0x7d,0x9e,0x4e,0x66,0x7f,0xe9,0x02,0x40,0xdc,0x21,0x5e,0x74,0x2c,0x1d,0x29,0x22,0xca,0x97,0x4f,0xc8,0xc7,0xea,0x69,0x02,0x89,0xd1,0x43,0xff,0x83,0x89,0x58,0x66,0x92,0xbc,0x11,0xf6,0x02,0x8b,0xa8,0x34,0x8d,0xbe,0x3a,0x70,0xc3,0x10,0xe7,0xb5,0xc4,0xda,0xdb,0xc6,0x87,0xee,0xee,0xe0,0x48,0x62,0x80,0x8d,0xfc
db	0xaa,0xc7,0xce,0x1a,0xea,0xb9,0x1b,0x30,0x4a,0x48,0x9b,0xf4,0x58,0xff,0x5d,0x15,0xc8,0xf2,0x84,0x44,0xae,0x63,0xe8,0xb1,0xe0,0x2e,0x38,0x8e,0x47,0xf9,0x09,0xec,0xb9,0x94,0x18,0x37,0x68,0xef,0xbd,0xd5,0x67,0x72,0x01,0x9a,0x15,0xb9,0x7c,0x36,0xc0,0x22,0x80,0x12,0xb1,0x4e,0xab,0x3c,0xea,0x81,0xcf,0x70,0xf3,0xde,0x1f,0xd4
db	0x67,0x94,0xfa,0xe1,0xf0,0xb6,0xd6,0x6b,0xc3,0xa2,0xbb,0x59,0x6b,0x9f,0x58,0x26,0x99,0x0c,0xdc,0xcd,0xb8,0xae,0x49,0xf0,0x8f,0xd3,0x0d,0xb7,0x4c,0x22,0xcf,0xb6,0x6c,0xa3,0x19,0x09,0x42,0x59,0x25,0xf8,0xdc,0xf3,0xc2,0x00,0xc3,0xc3,0xd3,0x9e,0x98,0xd3,0xa3,0xd0,0x96,0xfd,0x4f,0x15,0x57,0x5b,0xa7,0x08,0x3a,0x0e,0x3d,0xd2
db	0x7d,0xa1,0xa0,0x94,0xc0,0x76,0x83,0xf6,0xc1,0xe8,0x7e,0xd3,0x97,0xc1,0xbf,0x38,0x74,0x9b,0xfb,0x35,0xeb,0xf7,0x34,0x20,0xea,0xda,0xd3,0xb1,0x2e,0x10,0x16,0x9c,0x09,0x1c,0x67,0x46,0xa2,0x05,0xf9,0x47,0xde,0x35,0x53,0x18,0x58,0xb0,0xbb,0x7a,0x88,0x58,0xc5,0x3e,0x98,0x29,0x43,0x98,0x07,0x76,0xa3,0xe1,0x95,0x92,0x21,0xe9
db	0x06,0x17,0x15,0xe0,0x6b,0xd5,0x5a,0x6d,0x10,0xa6,0x08,0x92,0xa9,0xf5,0xcf,0x57,0x1a,0x28,0x5d,0x14,0x33,0x99,0xf9,0xa0,0xb3,0xeb,0xee,0xd4,0x6e,0x0b,0x5e,0xf7,0xe9,0xe3,0xc6,0x71,0x34,0x55,0xf3,0xde,0xd5,0xc2,0x52,0xc3,0x7b,0x06,0x87,0xef,0x26,0x81,0xc9,0xbd,0xaf,0x12,0x61,0x95,0x2b,0xa4,0x8e,0xe8,0x08,0x9a,0x13,0x48
db	0x2e,0x84,0x98,0xf6,0x95,0x21,0x22,0xe5,0xcf,0x30,0x8d,0xaf,0x70,0x16,0x27,0x0c,0xcd,0x26,0x7f,0xe8,0xa0,0x35,0x0c,0x01,0x0e,0xdd,0x9d,0x2c,0x89,0x41,0x34,0xc4,0xa2,0xaa,0xf6,0x3f,0xca,0x3b,0x86,0xce,0xd7,0x4c,0xe3,0xb5,0x69,0xe9,0x41,0xbe,0x3c,0x9a,0x4c,0x1a,0xb3,0x88,0xea,0x78,0x12,0x4c,0x1b,0x79,0xc7,0xcd,0x32,0x72
db	0xfa,0x3f,0x0b,0x73,0x1b,0xd9,0xec,0x85,0xd4,0x52,0x6c,0x91,0x2d,0xbe,0x76,0x8b,0xfd,0xb6,0x49,0xcf,0x67,0xd1,0x18,0x7b,0xae,0x86,0x47,0x47,0xfd,0xff,0x63,0xf2,0x88,0x1b,0x58,0xd5,0x30,0x69,0xf9,0x9a,0x03,0x52,0xae,0xe5,0xe2,0x55,0xbf,0x35,0x12,0xb0,0x84,0xa9,0xed,0xb6,0x8d,0x5f,0x6c,0xed,0x1a,0x00,0x7a,0xdc,0xf2,0x03
db	0x9e,0xef,0x59,0x27,0x4c,0xf4,0x83,0xa2,0x36,0x3d,0x3d,0x8c,0x75,0x8c,0x37,0x68,0x93,0x0b,0x30,0x48,0xea,0x91,0x14,0x37,0x88,0x87,0x7f,0xe6,0xd8,0xbd,0x04,0x34,0x1e,0xe8,0x2a,0x41,0x48,0x5c,0x66,0xf9,0xc2,0xd1,0x56,0x25,0x29,0x45,0xfa,0x71,0xe1,0x59,0xa8,0x52,0x99,0x0b,0x92,0xe0,0x33,0x52,0x91,0xd6,0x5f,0x0a,0x70,0x83
db	0x4f,0xa3,0x47,0x6e,0xfa,0x85,0x5e,0xb1,0x0a,0x1d,0xe7,0x35,0xc9,0x88,0x27,0xc9,0x8c,0x3e,0x7f,0x6d,0x34,0x1e,0x11,0x7b,0xcd,0xe7,0x09,0x82,0x3a,0xa1,0x46,0xc6,0x15,0xde,0x0b,0xde,0x35,0x71,0x92,0x5c,0x72,0x50,0x08,0x6b,0x62,0xa7,0xec,0xa2,0xca,0x53,0x6e,0x47,0x7d,0x50,0x32,0xa7,0x32,0x7b,0x49,0x0c,0x97,0xcc,0x98,0x8d
db	0xc3,0x29,0x72,0x1e,0x85,0x47,0x1b,0xa7,0x89,0x19,0x85,0xaa,0x3f,0x11,0x6a,0xea,0x61,0x84,0x07,0x9a,0xc8,0xb3,0x25,0xfe,0x72,0xca,0x83,0xa9,0xf0,0x9e,0x01,0xe4,0x9a,0xd6,0x1b,0x87,0xfc,0xd4,0x3a,0x04,0x34,0x8c,0x0b,0x46,0xbc,0xe9,0x3c,0x3f,0xd9,0x93,0xf1,0xca,0x41,0x0b,0xdb,0x28,0xe8,0x28,0x1b,0x84,0x36,0x16,0x84,0x22
db	0x1e,0x1e,0x2b,0xb0,0xfb,0xa6,0xcc,0x95,0x31,0x46,0xd7,0xca,0xc2,0x8b,0xa3,0x3a,0xa5,0xb0,0xaf,0x52,0x66,0x53,0x39,0x5f,0x58,0xb5,0xdf,0x01,0x52,0x07,0xb4,0x82,0xdc,0xb7,0xf9,0x88,0xd8,0x77,0xf8,0x12,0x9d,0xe8,0x21,0xd7,0x0b,0x0f,0x57,0x90,0x40,0xb2,0x64,0x3f,0xce,0xa0,0xa3,0xfa,0x12,0x16,0xec,0x6d,0xcc,0xc7,0x2a,0x43
db	0xc9,0xe7,0xb7,0x90,0x52,0x35,0x22,0x6d,0x46,0x99,0x1e,0x44,0x12,0xd6,0x0f,0xaf,0x5c,0x16,0xd3,0x7a,0xd6,0xb4,0xfe,0x20,0x26,0x11,0xe1,0xc6,0xa5,0x10,0xfd,0x9f,0x0c,0x47,0xae,0x32,0x08,0x15,0x8f,0xef,0xef,0x4c,0x83,0xbc,0xbf,0x6a,0xe5,0xf5,0x69,0x11,0x4d,0x7d,0x47,0x1f,0x10,0x58,0x61,0xb0,0x0d,0x98,0x67,0xc0,0x99,0x3a
db	0x2d,0x9a,0x5b,0xd5,0x37,0xe7,0xe5,0xd4,0x56,0x96,0x69,0xf8,0x53,0x7e,0x24,0x70,0x51,0x01,0x83,0x8d,0x49,0x01,0x32,0x7d,0x4f,0x41,0x92,0x54,0x9c,0x15,0xf1,0x3c,0x05,0x32,0x28,0x0d,0x0f,0x67,0xbe,0x65,0xfa,0x1b,0xa3,0xd0,0x28,0x18,0xb8,0x84,0xfe,0x6a,0x30,0xea,0xb9,0x00,0xb1,0x10,0x7c,0xa2,0x94,0x4f,0x86,0x18,0xdd,0xb4
db	0x80,0x18,0x48,0x18,0xe1,0x56,0x70,0x7d,0x5c,0x3b,0xe5,0xd7,0x88,0x66,0x57,0xe3,0xe1,0x04,0x4c,0x68,0x5b,0x64,0x4d,0x0d,0x30,0x76,0x26,0xaa,0x84,0x0e,0xe0,0xed,0x53,0x62,0x20,0x33,0xaf,0x45,0x42,0x40,0x47,0x01,0x15,0xc9,0x0b,0x27,0x7c,0x68,0x4d,0x55,0xc4,0x6a,0x5f,0x96,0x9f,0x96,0x67,0xae,0x13,0x1c,0x84,0x52,0x33,0x41
db	0x80,0xfc,0xae,0xb6,0xb1,0x8c,0xc3,0x19,0x80,0xa8,0x5f,0xe5,0x8c,0xd0,0xa8,0xb4,0x58,0xc9,0x48,0x29,0xab,0x11,0xd1,0x09,0xc6,0x20,0x98,0x4c,0xdb,0xa4,0x83,0x5c,0x26,0x51,0xce,0x80,0xe5,0xc4,0x9b,0xae,0xba,0x8e,0x99,0x4e,0xa4,0xff,0xdc,0x99,0x4c,0x02,0xa0,0x42,0x80,0xca,0xd7,0xea,0x6a,0x58,0x31,0xdb,0x16,0xd8,0x4d,0xab
db	0x03,0x2e,0x3a,0xdc,0xe9,0x07,0xfb,0xfb,0x5b,0x57,0x67,0x2a,0x7b,0xdc,0xc1,0x66,0xd1,0x31,0x3a,0x03,0x87,0xd8,0x66,0xda,0xa1,0x24,0x00,0x26,0xc0,0x26,0x78,0xf8,0x59,0x13,0x3f,0x34,0x08,0x35,0x45,0xbd,0x45,0x4f,0x89,0x65,0x97,0xdb,0xe6,0x1e,0x09,0x6e,0x23,0x2a,0xc4,0xf5,0x6a,0x74,0x28,0xb0,0xae,0x8c,0xfb,0x49,0x35,0x99
db	0x06,0x30,0xc6,0xb2,0x8c,0xcd,0x8b,0x41,0xea,0xf2,0x04,0x18,0x29,0x25,0x1b,0x32,0x42,0x45,0xb5,0x92,0x42,0xb4,0x33,0xd2,0x90,0x31,0x08,0xcd,0x35,0x5d,0x50,0x64,0xa8,0x93,0xfd,0xa5,0xfd,0x32,0xbd,0xe8,0x13,0x1c,0x48,0x5c,0x14,0x70,0x03,0x92,0x0f,0x12,0x86,0xf6,0x6c,0xcd,0xc6,0xec,0xbf,0x8e,0x85,0x28,0x1d,0x1c,0x63,0x3f
db	0x81,0x93,0xd4,0x80,0x3c,0x29,0x0b,0x63,0xfe,0x87,0xa6,0x24,0xd6,0x3e,0x62,0xb6,0xd9,0xb0,0x58,0xf1,0x41,0x36,0xc7,0x47,0x8b,0xfd,0x4b,0x91,0x4e,0x5d,0x41,0x44,0xb0,0x65,0x3d,0x9e,0x3b,0x70,0x01,0xcc,0x7d,0x77,0xf0,0x23,0xd9,0xca,0x5f,0xda,0xa1,0x8c,0x71,0x11,0x91,0x7d,0x36,0xf5,0xc9,0xcd,0xf4,0x34,0x5f,0x69,0x57,0xd6
db	0x33,0x4c,0xb2,0xe1,0x38,0x5f,0x86,0x3c,0x57,0x7b,0x2e,0x99,0x05,0x80,0x63,0xc4,0x77,0x69,0x06,0xc2,0x47,0x44,0xca,0x17,0x27,0x1d,0x55,0x34,0x02,0xd0,0x89,0x3a,0x3b,0x79,0xf0,0x86,0xd7,0x6b,0x01,0x9c,0xc7,0xa8,0xde,0xdb,0xdf,0x49,0xd1,0xb9,0x11,0xaf,0x7e,0x22,0x8b,0x5d,0xb5,0x0b,0xdc,0xd0,0x36,0xe6,0x9d,0x85,0x41,0x4a
db	0x35,0xf0,0xe1,0xcd,0xce,0x7b,0xd1,0xd6,0x00,0xdd,0xb6,0xe4,0x06,0x3e,0x66,0xe9,0x2b,0xa8,0x44,0x0d,0x18,0xd4,0xbc,0xfb,0x3c,0x58,0x6c,0x11,0xe9,0xdc,0x19,0x14,0x08,0x27,0x23,0x0c,0xd0,0xf9,0x97,0xaf,0x97,0x07,0x02,0x1a,0x5e,0xcd,0xae,0xd2,0x80,0x96,0x16,0x49,0xc3,0xfc,0xda,0x25,0x12,0x20,0xe1,0xc0,0x68,0x90,0x4b,0x30
db	0x2d,0x06,0x53,0x2c,0x57,0x63,0x4a,0x7a,0xf6,0xc8,0x5a,0xb7,0x58,0x8c,0x13,0xfe,0x43,0xb3,0xf8,0x25,0x3e,0x7a,0x25,0x3e,0x1d,0x7f,0x8f,0x5e,0xdb,0xad,0x99,0x83,0xfc,0xd9,0x0a,0xdf,0xb5,0x19,0x1c,0x2c,0xf6,0xe8,0x06,0xbe,0xc0,0x9f,0x7e,0x0f,0x95,0xaa,0xac,0x09,0xdc,0x8c,0x37,0xcf,0x35,0x35,0x95,0x62,0xf1,0xff,0x96,0x1c
db	0x77,0xe9,0x53,0x7e,0x12,0x56,0x2d,0x4e,0x3e,0x1f,0xdb,0x1d,0x71,0x0e,0xdc,0xf7,0x65,0xb1,0x78,0x7f,0xe4,0xba,0xbf,0x7f,0x6c,0xcb,0x73,0xd3,0xe8,0xd9,0xce,0xfb,0xdb,0x48,0x87,0xe0,0x10,0x00,0x74,0xcb,0xdf,0x32,0xa8,0xdd,0x83,0x24,0x49,0xda,0x86,0x38,0x1c,0x2c,0x93,0x09,0x8a,0x26,0xbb,0x34,0x21,0x1d,0xac,0xb5,0x16,0xae
db	0xd8,0xcb,0x94,0x04,0xd6,0xbc,0xde,0x9c,0x70,0x28,0xa5,0x1a,0x15,0x5e,0x35,0xe4,0xe6,0x53,0xea,0x9c,0x3b,0x0c,0x36,0x3b,0x80,0x13,0x28,0x1d,0xc7,0x1a,0xa8,0x8e,0x9e,0x09,0xce,0x5d,0x50,0xd3,0xc7,0x6f,0x3a,0x75,0xa5,0x84,0x1c,0x08,0x66,0xe6,0x05,0xda,0x8b,0xf1,0x4b,0x5c,0xe2,0xc7,0x0f,0xa1,0xf1,0x47,0x02,0xf4,0xa7,0x24
db	0xf3,0x0e,0x2c,0xa9,0xae,0x67,0xdf,0xce,0x30,0x88,0x4a,0x9a,0x39,0x4a,0x97,0x64,0xa8,0x30,0x53,0xf9,0x47,0x66,0x5c,0x19,0x1c,0xfb,0x2f,0x05,0x89,0x4f,0xfe,0x25,0xe7,0xed,0xed,0x17,0x5a,0x86,0xeb,0x25,0xee,0xe4,0x09,0x88,0x05,0x49,0x20,0x54,0x4b,0x7f,0x3e,0xb5,0x23,0x85,0xa9,0x66,0x61,0x73,0xe0,0x61,0x94,0xc6,0xe5,0x29
db	0xb4,0xe1,0x6f,0xa4,0x4d,0x50,0x56,0x2e,0x30,0x75,0x51,0x5d,0xdd,0xa2,0x68,0x56,0x67,0xd8,0xec,0x2d,0x2a,0xfd,0x49,0xc5,0xbc,0xae,0x2f,0x6b,0xc7,0x8d,0x2e,0xca,0x91,0x35,0xe8,0xea,0x65,0xe9,0x9c,0x65,0xaf,0x8e,0xd5,0x16,0xdf,0xac,0x44,0x1e,0xb6,0x16,0xf0,0xb6,0x33,0x6a,0xe6,0x96,0x0f,0x85,0x2e,0xa1,0xaa,0x6a,0xe0,0x12
db	0x0c,0xaa,0x7d,0xae,0xf7,0xe3,0xb2,0x4c,0x3c,0x10,0xc6,0x87,0x8e,0x87,0xfb,0xac,0xf7,0xd7,0x7a,0x2e,0x9a,0x7a,0xa7,0x4f,0xf0,0x75,0xce,0xbd,0xc3,0xe6,0x79,0x1d,0x56,0xab,0xff,0x56,0xfe,0x69,0xbd,0xcf,0x15,0x27,0x64,0x3c,0x83,0x1c,0x08,0xb0,0x91,0x60,0x67,0xe7,0x27,0x44,0x49,0x22,0x78,0xd5,0x1a,0xc8,0x3b,0x35,0x9b,0xa5
db	0x53,0xce,0xde,0x04,0xd2,0x3e,0x67,0x48,0xaf,0x54,0xdf,0x9c,0xf7,0xb9,0xd4,0xe3,0xb6,0x85,0x02,0x68,0x21,0x10,0xdb,0xb5,0xca,0x11,0xa2,0x7c,0xcf,0x13,0x41,0x7a,0xfd,0xe9,0x0a,0x3c,0x53,0xd6,0x07,0xf2,0xdd,0xe2,0x7c,0x16,0xf0,0x44,0x3f,0x5d,0x34,0x09,0x7c,0x7b,0x21,0x8c,0x8e,0xdb,0x0d,0xc5,0x73,0xce,0x61,0xce,0x17,0x46
db	0x6c,0x14,0x07,0xb5,0x70,0x80,0xf0,0x29,0x7c,0x13,0x41,0x2d,0x8e,0xdc,0x53,0xc2,0xbf,0xf0,0xc2,0xfb,0x59,0xa0,0x66,0x5f,0x25,0xda,0x17,0x5f,0xac,0xab,0x75,0x1b,0xc7,0x61,0x87,0x53,0x80,0x2e,0x11,0x4e,0x04,0x48,0xf9,0xee,0x54,0xe6,0x69,0x69,0x57,0xc2,0x46,0xd8,0xb3,0x2e,0x7b,0xc8,0xa5,0xd0,0xb2,0x5e,0xd4,0x6b,0x9b,0x1a
db	0xd6,0x79,0x9d,0x99,0xa6,0xbb,0x4d,0xca,0x74,0x2c,0x3d,0xd4,0x86,0xd0,0x64,0xd4,0x81,0x49,0x76,0x42,0xb8,0xf9,0x2c,0x52,0xe7,0x77,0x37,0x31,0xbb,0x2e,0x5b,0x38,0x81,0x01,0x2c,0x27,0x28,0xcb,0x0c,0xba,0xfa,0x8a,0x9a,0x45,0x51,0xa2,0xde,0xf2,0x7b,0xe6,0x65,0xec,0x5b,0x2d,0xe8,0x55,0x8e,0xb4,0x7f,0xf8,0x1a,0x66,0x3a,0x5f
db	0x06,0x10,0x15,0xb2,0x3d,0xb2,0x36,0x6e,0x9f,0x8e,0xe2,0x4c,0x78,0xe5,0x3a,0xac,0x21,0x16,0x20,0x30,0x0f,0x51,0x56,0xcb,0x53,0xca,0x70,0x3c,0xa2,0x3f,0x37,0x06,0x6c,0x70,0xec,0xf4,0x3d,0x7c,0x77,0xa0,0x61,0xc7,0x0e,0x26,0x9f,0x25,0xc0,0xf2,0x28,0xdb,0x57,0xbe,0xe6,0x4e,0x9c,0x4d,0x2e,0x48,0x50,0xc2,0xd4,0xfd,0x5e,0x52
db	0x3f,0xd0,0x82,0xd1,0xd4,0x53,0xad,0x42,0x38,0xb1,0x02,0xd6,0xa0,0x34,0x7a,0xb4,0xb3,0xdd,0x91,0x12,0xf4,0x91,0xc9,0xa2,0x35,0x2d,0xdc,0x97,0xa1,0xdb,0x82,0xe7,0x92,0x99,0x66,0x13,0x99,0x20,0x95,0x1f,0x47,0x64,0x80,0x5e,0x5f,0x74,0x6b,0xa6,0xca,0x47,0x0b,0x24,0x72,0xa6,0x27,0xe7,0x56,0x61,0xa7,0x8e,0x62,0xa4,0xff,0x8e
db	0x29,0xf8,0x09,0xa4,0xbb,0x70,0x97,0x8a,0x39,0xe8,0x65,0xc8,0x52,0x23,0x9d,0xbf,0x10,0xe8,0x7d,0xbc,0x3c,0xc4,0x8b,0x1e,0x5c,0x75,0x94,0x24,0x62,0x3f,0x5b,0x2b,0x9a,0x08,0x00,0x78,0xfd,0x28,0x44,0x12,0x62,0x2a,0x6f,0x47,0x9d,0x57,0xb0,0x4e,0x3b,0xcd,0x01,0x7d,0x6e,0x62,0xe3,0x99,0x9c,0xae,0x6e,0xe2,0x70,0x7a,0x32,0xb4
db	0xc1,0x19,0xb1,0x03,0x6b,0x92,0x89,0x4f,0x37,0xaf,0x36,0xee,0x5e,0x03,0x31,0x8c,0x41,0x27,0x17,0x21,0xdf,0xe4,0x34,0x97,0x8d,0xe7,0x41,0x47,0xf2,0x80,0x51,0x41,0x01,0xe4,0x0c,0x1a,0x09,0xfc,0x07,0xc3,0x94,0x07,0x6f,0xa7,0x6c,0xff,0x32,0x21,0xa5,0x01,0x8c,0xa2,0x88,0x3c,0xc8,0x57,0xe8,0x68,0x19,0x4a,0x46,0x7a,0x36,0xd2
db	0x75,0x8e,0xc5,0xa4,0x84,0x91,0x13,0x7f,0xdd,0x2b,0x3c,0x2e,0xc4,0x92,0x29,0xb3,0x60,0x74,0xc8,0x81,0x58,0x0e,0xad,0x6a,0x9d,0xaa,0x81,0x49,0x26,0x0f,0xd4,0x2a,0x39,0xdd,0x4d,0x2b,0x13,0xdb,0x2e,0x72,0xe6,0x45,0x99,0xeb,0xe6,0xe5,0xd5,0x76,0xd4,0x19,0xd8,0xd7,0xa9,0x1f,0xce,0x7f,0xc4,0x1c,0x9e,0x6f,0x68,0x32,0xb1,0x26
db	0xc4,0xb6,0x4e,0x9f,0xbf,0xdc,0xe0,0xde,0x54,0x9b,0xe0,0x04,0x03,0xae,0xc9,0xce,0x3a,0xcb,0x93,0xad,0xcc,0x1f,0x46,0xf6,0xbb,0xff,0x40,0x52,0x9c,0x64,0x97,0x5a,0x6f,0x8d,0x28,0x45,0x1c,0xf6,0x8b,0xcb,0xb9,0x38,0xb8,0x00,0xee,0xec,0xac,0x68,0x3f,0x50,0xcb,0x36,0x6e,0x97,0xfd,0xa5,0x1d,0x29,0x6e,0xfa,0x9f,0x4b,0x83,0xcd
db	0x0d,0x34,0xf3,0x1e,0x3f,0x0f,0x2e,0x89,0xeb,0xf7,0x8e,0x5f,0xe0,0x3b,0x39,0xd2,0xe8,0x87,0xe3,0xe7,0xe9,0xd0,0x1b,0x32,0x03,0x6b,0x3c,0x75,0x7d,0xe2,0x5c,0x3c,0x42,0xb4,0x46,0x69,0x0b,0xaf,0x0a,0x5d,0x1a,0x83,0x0b,0x0e,0x3c,0x5a,0x36,0xbd,0x5d,0xb6,0xad,0x4c,0xdd,0xf1,0x8d,0xbf,0x2b,0x70,0x8e,0xbc,0x92,0x95,0x1b,0x0f
db	0xed,0x3f,0xae,0x9e,0xa2,0x5a,0x50,0xe4,0xda,0xde,0x04,0x51,0x31,0xac,0xa4,0x0b,0x94,0xcc,0x14,0x87,0x59,0xa8,0x30,0x09,0xe6,0x46,0xb9,0x07,0x3e,0x1a,0xbf,0x5a,0x23,0x32,0xfb,0x60,0x63,0x24,0x25,0x12,0xf6,0x3e,0x2d,0xd0,0x8b,0x88,0x9b,0xe9,0x2d,0xab,0xf5,0xaf,0xba,0xbc,0xfe,0xab,0xb2,0x61,0x7a,0x7c,0xbb,0x28,0x6b,0x86
db	0xe5,0xa2,0x9c,0x2c,0x5a,0x23,0x12,0x11,0xe5,0x72,0xe8,0x7b,0x6b,0x40,0xf1,0x91,0x37,0x3b,0x47,0x75,0x65,0xac,0x4d,0x22,0x59,0x75,0x13,0xb0,0x73,0xff,0x59,0xd1,0x1b,0xcc,0x05,0x1f,0xf2,0xc8,0x50,0x83,0xf1,0x28,0x38,0x0b,0xc3,0xa0,0x3b,0xe3,0x86,0xbb,0x9c,0x7e,0xc1,0xe9,0xcc,0xd9,0xb8,0x2b,0x05,0xf3,0x6f,0xc7,0x9d,0xaf
db	0x7b,0xb7,0x38,0x41,0xa3,0x50,0x8f,0x92,0xe0,0x63,0x35,0xb3,0x95,0x9f,0x80,0xf8,0x75,0xbb,0xf3,0x2b,0x0e,0xaf,0x32,0x6e,0xff,0xeb,0x79,0xca,0xbf,0x1c,0x4f,0x6c,0x9c,0x06,0xb2,0xeb,0x99,0x57,0x1f,0xf6,0x64,0x0b,0x81,0x57,0xba,0xf4,0x32,0x1e,0x77,0x37,0x55,0xb7,0xbc,0xba,0x70,0x0b,0x0d,0xdd,0x95,0x41,0xb5,0x17,0x5b,0x14
db	0x10,0x9d,0x14,0x52,0x83,0x65,0x0a,0xf4,0x55,0xca,0xf8,0xbe,0xa6,0x3a,0xa0,0x6e,0xcc,0x83,0x84,0x65,0xb4,0x1c,0x7e,0x40,0xdd,0x32,0x36,0x5a,0x23,0x17,0x7d,0xb5,0xb9,0x38,0x48,0x5c,0x6f,0x23,0x54,0x0e,0x93,0x74,0x27,0x0f,0xfd,0x58,0xc1,0x97,0x26,0x78,0x9a,0xd3,0x85,0xc5,0xb2,0xb3,0x44,0xb7,0x36,0x85,0x69,0xde,0x3b,0xa1
db	0x2b,0x11,0xef,0x75,0xfc,0xaa,0x92,0xf1,0xf1,0x72,0xa0,0x5f,0x33,0xf6,0x0b,0x72,0xdb,0xce,0x6c,0x2a,0x15,0x76,0x40,0xd4,0x85,0xff,0x96,0xe1,0x48,0xe1,0x27,0x8f,0x74,0xf3,0xfa,0xa1,0xb7,0x2a,0xb6,0x41,0x90,0x92,0x7e,0xfa,0xfc,0xad,0xa3,0x94,0x91,0x77,0xf1,0x8f,0xee,0xa2,0x64,0x47,0x01,0xb3,0x01,0x99,0x05,0xe7,0x31,0x4a
db	0xe8,0xd2,0x65,0x40,0x21,0xc4,0x83,0x8e,0xc9,0x89,0xda,0x16,0x7b,0xe0,0xcb,0xc0,0xc0,0x3d,0x37,0x18,0x66,0xe9,0x70,0x86,0x0b,0x6c,0xe8,0x65,0x44,0xce,0x3a,0xcd,0x84,0x1e,0xce,0x0e,0xe3,0xf9,0x77,0x12,0xfb,0xe6,0x92,0x8b,0x0d,0x7e,0x15,0x7a,0x34,0x94,0x2a,0xa7,0xc5,0x35,0xa4,0xfc,0xbe,0xa3,0x13,0x70,0xe4,0x6b,0x2f,0x71
db	0x31,0xef,0xdb,0x79,0x44,0xf2,0x77,0xc7,0xc9,0x0d,0x1a,0x7b,0xff,0x34,0xf8,0xc9,0xe8,0xc9,0xc2,0xe0,0x0c,0x9e,0xd6,0xb4,0x7a,0xdb,0x1f,0x65,0xb8,0xd4,0x92,0xbf,0x7f,0x06,0x44,0xe3,0xb4,0xd8,0x14,0xe3,0x9b,0x49,0x81,0x12,0xec,0x7d,0x01,0xe2,0x50,0x2c,0x0e,0xfd,0x4b,0x84,0x3b,0x4d,0x89,0x1d,0x2e,0x4b,0xe9,0xda,0xa5,0x3f
db	0x19,0xc2,0x53,0x36,0x5d,0xd8,0xdc,0x6e,0xc3,0x48,0x8f,0x09,0xd5,0x95,0x4b,0x0c,0x7c,0x00,0x15,0x33,0x8e,0x1d,0x0c,0xdf,0x32,0x3b,0x93,0x1f,0xf5,0x49,0x4f,0xfd,0x8b,0x64,0xe7,0x96,0xaf,0x2f,0xc8,0xea,0xab,0x91,0x53,0x29,0xe3,0x31,0x0a,0x1c,0x6e,0xe0,0xbb,0x81,0x11,0x83,0xe0,0x07,0xfb,0x29,0x11,0x0f,0x0d,0x85,0xd4,0x61
db	0x3c,0x75,0xbb,0x8a,0x23,0xb6,0xa0,0x7f,0xa4,0xbb,0x11,0xd4,0x75,0xde,0x27,0xe5,0xeb,0x11,0x5d,0x02,0xfe,0x5c,0x62,0x60,0x0f,0x6f,0x45,0x9b,0xfb,0xb7,0x32,0xa8,0x1c,0xd6,0xff,0x43,0x7b,0x53,0xee,0xa4,0x1f,0xf2,0xba,0xb6,0xb7,0xb7,0x39,0x18,0x85,0x79,0x77,0x27,0x30,0x26,0xe4,0xef,0xd1,0x39,0xc9,0xa2,0x0d,0x50,0xd7,0xef
db	0x9e,0xd8,0x8e,0xd2,0x74,0x1a,0x3f,0x99,0x24,0xf4,0x8b,0x4d,0x02,0x63,0x18,0x3a,0xaf,0x26,0xef,0xfc,0x1d,0xfe,0x46,0xc1,0x55,0xd7,0x92,0x65,0x2f,0xe7,0x4f,0x47,0xa8,0x2f,0x5d,0x47,0x67,0xeb,0x62,0x1d,0x69,0xa6,0x0e,0x51,0x1d,0x2c,0xed,0x6e,0x94,0xe9,0x48,0x4c,0x22,0xc2,0x93,0x79,0x6f,0x1b,0xc2,0x93,0x61,0x3d,0x8b,0xba
db	0xcb,0xe9,0x4a,0x88,0x5e,0x19,0x50,0x14,0xfe,0xda,0x3f,0x4d,0x47,0x54,0xfc,0x1c,0x09,0x77,0x37,0x30,0xfe,0x75,0x9f,0xdd,0xa4,0x74,0x04,0x04,0x88,0xe0,0xac,0x93,0x64,0x6f,0xbf,0x50,0xd8,0xf0,0xf7,0xa0,0xfa,0x98,0x49,0xfa,0xf7,0x6e,0xcf,0xa2,0xbf,0xb6,0x07,0x15,0x0e,0x4e,0x21,0x74,0x0a,0xa6,0xa3,0x67,0xce,0xf9,0x3b,0xd6
db	0x4c,0xc8,0x43,0xe3,0x3b,0x3b,0x6a,0x86,0x62,0x3f,0x5a,0xf3,0x3f,0xf9,0xeb,0xbf,0xa3,0x2a,0x83,0x8a,0x70,0x8f,0x01,0x65,0x17,0x9a,0xa6,0x26,0x3b,0x09,0x06,0x22,0x19,0xed,0xd7,0x25,0x4b,0xd2,0x9a,0x30,0xfe,0x1c,0x82,0x68,0x16,0x04,0x0e,0x04,0x8f,0xc6,0x92,0xbe,0xe4,0x43,0x98,0x1d,0x3b,0x10,0x15,0x5b,0xef,0x4e,0x60,0x5e
db	0x6b,0xc9,0xde,0xb8,0x47,0x02,0x86,0x45,0x39,0x7a,0x1a,0xef,0x67,0x28,0xc5,0x40,0x73,0x2a,0xa7,0x12,0x9d,0x58,0x3a,0x34,0xc2,0xda,0x34,0xb0,0x48,0xd9,0x34,0xcd,0x18,0xe9,0x76,0x41,0x78,0x8f,0xe5,0xe8,0x3d,0xb2,0x01,0x3b,0x84,0xd1,0xca,0x5e,0x26,0x1d,0x8c,0xea,0xe1,0x46,0xa3,0xf9,0x11,0xac,0x0d,0x98,0x9f,0xd3,0x46,0x79
db	0xff,0xad,0x99,0x32,0x63,0x96,0xbc,0x57,0x39,0x16,0xce,0x06,0x7e,0x63,0x78,0x7b,0x86,0x92,0x1a,0xe1,0x45,0xc0,0x73,0xe1,0xec,0xfc,0x88,0x8f,0xf8,0x36,0x0f,0x54,0x76,0x02,0x98,0x49,0x40,0xb9,0xef,0xd8,0x13,0x68,0xf5,0x1d,0x0a,0x98,0x65,0x21,0xc5,0x1a,0x22,0x4e,0x8e,0xad,0xa9,0x52,0x57,0xc4,0xc6,0xa8,0x48,0x01,0x7a,0x78
db	0xc9,0xfc,0xdd,0xf3,0xc3,0x83,0xc0,0x06,0xb5,0x56,0x84,0xe2,0x0c,0x6b,0x80,0xd9,0x59,0xa1,0x3d,0xe3,0x56,0xf0,0xe3,0x3f,0x93,0x61,0xf7,0x8c,0x6b,0x40,0x65,0x6e,0x01,0xc2,0xa1,0xc1,0xb8,0x9b,0x15,0x6c,0xa1,0x18,0x4a,0x6c,0x8b,0x18,0x2d,0x8e,0x71,0x7a,0xa1,0x26,0xc1,0x4b,0xac,0x0c,0xca,0x08,0x33,0xef,0x35,0x33,0x63,0xeb
db	0x57,0x6e,0x7e,0x36,0xe0,0x31,0xad,0x10,0x76,0xb7,0x45,0xd9,0x3a,0x92,0x66,0x69,0x13,0x61,0x59,0x87,0xfd,0x6b,0xf1,0x46,0x0a,0x7a,0x3f,0x29,0x88,0x5b,0x7d,0xef,0x07,0x02,0xa8,0xa1,0xdc,0xd4,0x0e,0x77,0x8f,0x68,0x32,0xbd,0x8e,0xd6,0x0b,0xe4,0xd1,0x75,0xc1,0xb0,0x74,0x6c,0x0e,0xc3,0x46,0x79,0x36,0x3b,0x5f,0x0e,0xa0,0xad
db	0x28,0x8c,0xcb,0x01,0x8e,0x58,0x14,0x09,0xf1,0xd4,0x3b,0x2e,0xdc,0xbf,0x37,0x95,0x26,0xda,0xb6,0xcf,0xc8,0xa1,0xd4,0xec,0x72,0xf3,0x44,0xf5,0x4e,0x27,0x9b,0x2e,0x7c,0xfa,0x37,0x16,0x1d,0x7f,0x90,0x86,0xae,0x96,0x3b,0xe1,0xda,0xf7,0xc4,0x54,0x0b,0x51,0x7e,0x83,0xbe,0xed,0xd6,0x5f,0xd2,0x6d,0xbb,0xd3,0xc6,0x53,0x95,0x65
db	0x3d,0x19,0xc2,0xc5,0xdf,0x47,0x00,0x2c,0x4b,0x2d,0xec,0x32,0xd5,0x28,0xb5,0x30,0xe0,0x79,0x15,0x2e,0xab,0x97,0xa8,0xcf,0xc5,0x40,0x98,0x30,0x22,0x9f,0xbc,0xdb,0x65,0x06,0xfc,0x58,0xe5,0x55,0x5b,0xe2,0xf8,0x6e,0xc6,0xfc,0xec,0x6c,0x14,0xd2,0xe3,0x9a,0x71,0x8a,0x61,0xea,0x39,0xc6,0x77,0x94,0xdf,0x7b,0x99,0x71,0xdd,0x18
db	0xc6,0x03,0x2d,0x49,0xf6,0xc3,0xe8,0x2b,0x7e,0x3f,0x28,0xfc,0xc8,0xa1,0xb0,0x15,0x31,0x7e,0x83,0xb8,0x14,0x34,0x0e,0x7f,0xde,0x74,0x7b,0xbf,0xb7,0x8e,0xd9,0x31,0x90,0x16,0xb6,0x57,0x14,0x4a,0xc6,0x67,0x3d,0xb9,0x46,0x92,0xf2,0xf9,0x94,0x36,0x2b,0xd6,0x1f,0x84,0xa5,0x8c,0x0f,0xd9,0x8c,0x5f,0x97,0x7a,0x7b,0xff,0xc9,0xf5
db	0x5e,0x13,0x5f,0x19,0x58,0xba,0xa6,0xe8,0x29,0xf4,0xb8,0x7e,0x98,0xb7,0xef,0x1b,0x00,0xe8,0x90,0x8f,0x86,0x4c,0xe0,0x51,0x13,0x8b,0xa1,0x37,0x40,0x38,0x51,0x2f,0x5a,0x9b,0x63,0x8f,0xce,0x9a,0x97,0x07,0x0d,0x8e,0xce,0xb1,0x66,0x89,0x78,0xca,0xa6,0x0c,0x20,0xc4,0xf1,0xe3,0xab,0xe2,0x1c,0x83,0x2b,0x46,0x97,0xe8,0x8f,0x94
db	0xb4,0x71,0x40,0xde,0xa1,0x05,0x4b,0xed,0xbf,0x0c,0x46,0xe1,0x25,0xf1,0xd0,0x5a,0xdb,0x9c,0x2a,0x09,0x03,0x80,0x24,0xc1,0x22,0x02,0xa5,0xde,0xf6,0x4c,0xbc,0x93,0x37,0xa9,0x28,0xb3,0x92,0x19,0xa8,0x3f,0x71,0x90,0x62,0x78,0xaa,0x9a,0x0c,0xab,0x50,0xaf,0x89,0x2b,0xf1,0xf4,0x12,0xbd,0xc9,0xd5,0xee,0x64,0x8b,0x48,0x21,0xd6
db	0xa1,0xa1,0xf2,0x68,0x4a,0xf8,0x06,0x3e,0x20,0x31,0x66,0xb7,0x2f,0x64,0x01,0x5a,0x46,0x14,0x85,0xfb,0xde,0x04,0xc3,0xe4,0xd6,0x25,0x14,0xa0,0xbe,0x4d,0x39,0xd8,0xe0,0x9b,0xb7,0x6b,0x00,0xe6,0x46,0xfb,0xcc,0xa8,0xad,0x67,0x12,0x2c,0x53,0x2c,0xb6,0x9f,0x6e,0xfe,0xbc,0xcc,0x2c,0xa8,0x09,0x17,0x00,0x8e,0xf1,0xf4,0x3e,0xa9
db	0x92,0x4d,0x83,0xe6,0x3c,0xf0,0xd3,0x1c,0xaf,0x84,0x2c,0x59,0x7e,0xda,0x1e,0xfd,0x7d,0xf3,0xef,0x93,0x05,0x03,0xb0,0x76,0x69,0xb5,0x51,0xa8,0x65,0x8f,0x8a,0xf8,0x55,0x92,0x08,0xfe,0xbf,0xc1,0x95,0x98,0x58,0xb1,0xd3,0xb6,0x78,0x4f,0x2f,0x25,0xcb,0x9d,0x32,0x4f,0xa6,0xcc,0xf8,0x36,0xff,0x72,0xb3,0x93,0x3d,0xd8,0x0b,0xe6
db	0xc6,0xf6,0xed,0xcc,0x2a,0xa5,0x44,0x6e,0xe2,0x2d,0x6e,0x02,0xb4,0x7c,0x24,0x7f,0x57,0x02,0x84,0x61,0x8e,0xbd,0x32,0x4e,0x41,0x92,0x01,0x1b,0x8b,0x1d,0xd1,0x1e,0x31,0xc1,0x4c,0x5b,0x0c,0xa7,0x48,0x52,0x67,0xc2,0xd9,0xdc,0x86,0x9d,0xbd,0x6c,0x19,0x95,0x00,0xf0,0xd4,0x47,0xaf,0xfe,0x5d,0xa5,0x81,0xbd,0x1b,0x42,0x62,0xce
db	0x18,0x1b,0xa3,0x6f,0xf5,0x0b,0xb7,0x6a,0x3d,0xe3,0xcc,0x41,0x27,0xcd,0x49,0x4b,0xe5,0x2b,0xc4,0x28,0xfa,0xbe,0xd5,0x7e,0xb7,0xac,0xab,0x64,0x3b,0xe3,0x87,0xb1,0x33,0x8b,0xa8,0xe5,0x75,0xce,0x61,0x57,0x89,0xad,0x5f,0x61,0xdd,0x7c,0x06,0x2a,0x3f,0x50,0xb8,0x7e,0xd2,0xfb,0x32,0x83,0x07,0xd4,0xc5,0x3f,0xad,0x64,0x59,0x1f
db	0x21,0x59,0x6f,0x1b,0xd7,0x40,0x89,0x28,0x18,0xac,0xca,0xee,0x92,0x1c,0x0d,0x88,0x98,0x7a,0x75,0x68,0xe0,0xe2,0x96,0xda,0x88,0xb3,0xc6,0x21,0x02,0x34,0xfa,0xae,0x0b,0x38,0xcf,0x1c,0x6c,0x7a,0xc9,0xd9,0x5f,0xf0,0x4c,0x73,0xfd,0xe6,0x14,0xf3,0x39,0xed,0xbc,0x28,0x2f,0xf8,0x79,0x02,0x39,0x05,0xf3,0x6a,0x88,0xd9,0x03,0xe2
db	0xb9,0x65,0x81,0x3a,0x34,0x80,0x3f,0x17,0x37,0x1e,0xe8,0x7d,0x41,0x49,0xfb,0x70,0x5d,0x58,0x3a,0x71,0x7b,0x3e,0xd3,0x83,0x0b,0x1b,0x11,0xfc,0x53,0xce,0xc6,0xc4,0x39,0x55,0xbe,0xbe,0x32,0xa5,0x88,0xab,0xcd,0x38,0x78,0x3e,0x52,0xaf,0x64,0x42,0x10,0xc3,0x70,0x81,0x76,0xe9,0x7d,0x8e,0x46,0x41,0xca,0x2c,0x0c,0x4c,0x30,0xd3
db	0xca,0x38,0xa3,0x97,0x2e,0x0f,0xa5,0x18,0x3b,0xaa,0x0f,0x00,0x75,0x35,0x9c,0xcd,0x28,0x83,0xd4,0xa7,0x7c,0xb9,0xcd,0xb5,0x55,0x29,0x4c,0x14,0xcd,0xfc,0x8f,0xaf,0x7d,0x69,0x4f,0xf7,0x0f,0xed,0x7c,0xa5,0x79,0x9d,0x36,0xbb,0x72,0xbc,0xf2,0x14,0xfd,0xf0,0x04,0x2a,0x89,0x1e,0xf7,0x80,0x4c,0x5e,0xb8,0xc1,0xdb,0xfa,0x3c,0x27
db	0xbb,0x30,0x08,0x2b,0xd2,0xf8,0xdb,0xe0,0x8c,0x00,0xe4,0xca,0xa9,0xde,0xb0,0x14,0x5b,0xec,0x6b,0xe6,0x5c,0x90,0x17,0x02,0x59,0x5f,0x5f,0x51,0xf8,0x30,0x10,0x11,0xc4,0xdf,0x37,0x30,0x32,0xb1,0x4d,0x49,0xfe,0x82,0x87,0xd2,0x42,0xf5,0x38,0x76,0xf9,0xa5,0x28,0xfc,0x14,0xb2,0xe0,0x72,0x82,0xde,0xc8,0x47,0x9e,0x8f,0x8a,0xb5
db	0x85,0x44,0x42,0x12,0xc6,0xc0,0xa5,0x60,0x5a,0x27,0xd0,0x36,0x14,0x7b,0x2a,0x83,0x98,0x92,0x08,0xe9,0x03,0xc9,0xc3,0xd3,0x36,0x97,0xba,0x5e,0xd5,0x51,0xcc,0x44,0xeb,0x81,0x76,0xae,0x28,0x94,0x0b,0xf6,0xc7,0xeb,0xae,0x61,0x6f,0x7b,0x34,0xb5,0x8c,0x5f,0x31,0xb6,0x23,0xe3,0xe7,0x4b,0x60,0xe6,0xba,0x8d,0x0e,0xd1,0xb2,0x37
db	0x72,0x3d,0xc1,0x75,0x9b,0x5e,0xcb,0x0f,0xf9,0xe4,0xdb,0x82,0x4c,0xc4,0x37,0xef,0x9d,0xde,0x16,0x85,0xe9,0xc2,0x03,0xd8,0x5b,0xa1,0xff,0xfa,0xd4,0xd7,0x5c,0x34,0xb6,0x1e,0x25,0x96,0xf5,0x8b,0xc3,0xee,0x16,0x1f,0xf8,0x55,0x4e,0x1c,0x83,0x80,0x77,0x1d,0x4f,0xb6,0x95,0x1c,0x91,0x7d,0x50,0x25,0xf4,0x2a,0x5d,0x2e,0xc7,0x8a
db	0x14,0xf8,0xb9,0xbc,0xab,0x5b,0xcd,0x47,0xb5,0xaf,0x85,0xc0,0x34,0x27,0x7d,0x6a,0x8c,0x84,0x8a,0xae,0x68,0x60,0x0e,0xa1,0x45,0xf7,0x83,0x66,0x91,0x69,0x30,0xed,0x26,0x5e,0xf5,0x48,0x6b,0x20,0xb3,0x11,0x50,0xf7,0x70,0x9d,0x10,0x50,0x44,0x87,0xfe,0x96,0x5c,0xc6,0xa4,0xa4,0xed,0x5e,0x7f,0x3d,0x90,0x19,0xbe,0x31,0xa3,0xdd
db	0x44,0xbb,0x9b,0x51,0x5a,0x06,0x1d,0x2e,0xd7,0xef,0xd1,0x81,0xb6,0xec,0xc6,0x89,0xfb,0x13,0xc5,0x21,0xef,0x9a,0x1a,0x48,0xf2,0xf8,0xb3,0xa3,0xec,0x7f,0x85,0xc1,0xc6,0x8c,0x5f,0xa9,0x30,0x38,0x25,0x1e,0x8d,0xcf,0x18,0x24,0xef,0x5a,0x9a,0x14,0x31,0xc0,0x2c,0x88,0xa5,0x3f,0x50,0x8b,0xb1,0xda,0x5d,0x26,0xd9,0xd3,0x81,0xb1
db	0xec,0xf0,0x42,0x88,0xd0,0x81,0x51,0xf9,0x1b,0xbc,0x43,0xa4,0x37,0xf1,0xd7,0x90,0x21,0x7e,0xa0,0x3e,0x63,0xfb,0x21,0xfa,0x12,0xfb,0xde,0xc7,0xbf,0xb3,0x58,0xe7,0x76,0x42,0x20,0x01,0x3d,0x66,0x80,0xf1,0xb8,0xaf,0xfa,0x7d,0x96,0x89,0x36,0x48,0x95,0xd9,0x6e,0x6d,0xe6,0x4f,0xff,0x2a,0x47,0x61,0xf2,0x04,0xb7,0x83,0x14,0xce
db	0x0a,0x3c,0x73,0x17,0x50,0x88,0x03,0x25,0x4a,0xe3,0x13,0x55,0x8b,0x7e,0x50,0x38,0xfc,0x14,0x0b,0x04,0x8e,0xa8,0x5b,0xd6,0x72,0x20,0x60,0xe9,0xaa,0x22,0x82,0x11,0xc6,0xc4,0xd7,0xb9,0xc8,0x0c,0x7e,0x05,0xfb,0x90,0xe4,0x9c,0x28,0x89,0x29,0x99,0x63,0x4d,0xec,0x7b,0x50,0xbd,0xd8,0xa3,0x5b,0x50,0x77,0x19,0x81,0x92,0xce,0x82
align	64
L$RR:
dd	3,0,-1,-5,-2,-1,-3,4
L$ONE_mont:
dd	1,0,0,-1,-1,-1,-2,0
L$ONE:
dd	1,0,0,0,0,0,0,0
db	69,67,80,95,78,73,83,90,50,53,54,32,102,111,114,32
db	120,56,54,47,83,83,69,50,44,32,67,82,89,80,84,79
db	71,65,77,83,32,98,121,32,60,97,112,112,114,111,64,111
db	112,101,110,115,115,108,46,111,114,103,62,0
align	64
global	_ecp_nistz256_mul_by_2
align	16
_ecp_nistz256_mul_by_2:
L$_ecp_nistz256_mul_by_2_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	mov	edi,DWORD [20+esp]
	mov	ebp,esi
	call	__ecp_nistz256_add
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_mul_by_3
align	16
_ecp_nistz256_mul_by_3:
L$_ecp_nistz256_mul_by_3_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	sub	esp,32
	mov	edi,esp
	mov	ebp,esi
	call	__ecp_nistz256_add
	lea	esi,[edi]
	mov	ebp,DWORD [56+esp]
	mov	edi,DWORD [52+esp]
	call	__ecp_nistz256_add
	add	esp,32
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_div_by_2
align	16
_ecp_nistz256_div_by_2:
L$_ecp_nistz256_div_by_2_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	mov	edi,DWORD [20+esp]
	call	__ecp_nistz256_div_by_2
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__ecp_nistz256_div_by_2:
	mov	ebp,DWORD [esi]
	xor	edx,edx
	mov	ebx,DWORD [4+esi]
	mov	eax,ebp
	and	ebp,1
	mov	ecx,DWORD [8+esi]
	sub	edx,ebp
	add	eax,edx
	adc	ebx,edx
	mov	DWORD [edi],eax
	adc	ecx,edx
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	eax,DWORD [12+esi]
	mov	ebx,DWORD [16+esi]
	adc	eax,0
	mov	ecx,DWORD [20+esi]
	adc	ebx,0
	mov	DWORD [12+edi],eax
	adc	ecx,0
	mov	DWORD [16+edi],ebx
	mov	DWORD [20+edi],ecx
	mov	eax,DWORD [24+esi]
	mov	ebx,DWORD [28+esi]
	adc	eax,ebp
	adc	ebx,edx
	mov	DWORD [24+edi],eax
	sbb	esi,esi
	mov	DWORD [28+edi],ebx
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
	shr	eax,1
	mov	ebp,ebx
	shl	ebx,31
	or	eax,ebx
	shr	ebp,1
	mov	ebx,ecx
	shl	ecx,31
	mov	DWORD [edi],eax
	or	ebp,ecx
	mov	eax,DWORD [16+edi]
	shr	ebx,1
	mov	ecx,edx
	shl	edx,31
	mov	DWORD [4+edi],ebp
	or	ebx,edx
	mov	ebp,DWORD [20+edi]
	shr	ecx,1
	mov	edx,eax
	shl	eax,31
	mov	DWORD [8+edi],ebx
	or	ecx,eax
	mov	ebx,DWORD [24+edi]
	shr	edx,1
	mov	eax,ebp
	shl	ebp,31
	mov	DWORD [12+edi],ecx
	or	edx,ebp
	mov	ecx,DWORD [28+edi]
	shr	eax,1
	mov	ebp,ebx
	shl	ebx,31
	mov	DWORD [16+edi],edx
	or	eax,ebx
	shr	ebp,1
	mov	ebx,ecx
	shl	ecx,31
	mov	DWORD [20+edi],eax
	or	ebp,ecx
	shr	ebx,1
	shl	esi,31
	mov	DWORD [24+edi],ebp
	or	ebx,esi
	mov	DWORD [28+edi],ebx
	ret
global	_ecp_nistz256_add
align	16
_ecp_nistz256_add:
L$_ecp_nistz256_add_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	mov	edi,DWORD [20+esp]
	call	__ecp_nistz256_add
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__ecp_nistz256_add:
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	add	eax,DWORD [ebp]
	mov	edx,DWORD [12+esi]
	adc	ebx,DWORD [4+ebp]
	mov	DWORD [edi],eax
	adc	ecx,DWORD [8+ebp]
	mov	DWORD [4+edi],ebx
	adc	edx,DWORD [12+ebp]
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	adc	eax,DWORD [16+ebp]
	mov	edx,DWORD [28+esi]
	adc	ebx,DWORD [20+ebp]
	mov	DWORD [16+edi],eax
	adc	ecx,DWORD [24+ebp]
	mov	DWORD [20+edi],ebx
	mov	esi,0
	adc	edx,DWORD [28+ebp]
	mov	DWORD [24+edi],ecx
	adc	esi,0
	mov	DWORD [28+edi],edx
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	sub	eax,-1
	mov	edx,DWORD [12+edi]
	sbb	ebx,-1
	mov	eax,DWORD [16+edi]
	sbb	ecx,-1
	mov	ebx,DWORD [20+edi]
	sbb	edx,0
	mov	ecx,DWORD [24+edi]
	sbb	eax,0
	mov	edx,DWORD [28+edi]
	sbb	ebx,0
	sbb	ecx,1
	sbb	edx,-1
	sbb	esi,0
	not	esi
	mov	eax,DWORD [edi]
	mov	ebp,esi
	mov	ebx,DWORD [4+edi]
	shr	ebp,31
	mov	ecx,DWORD [8+edi]
	sub	eax,esi
	mov	edx,DWORD [12+edi]
	sbb	ebx,esi
	mov	DWORD [edi],eax
	sbb	ecx,esi
	mov	DWORD [4+edi],ebx
	sbb	edx,0
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [16+edi]
	mov	ebx,DWORD [20+edi]
	mov	ecx,DWORD [24+edi]
	sbb	eax,0
	mov	edx,DWORD [28+edi]
	sbb	ebx,0
	mov	DWORD [16+edi],eax
	sbb	ecx,ebp
	mov	DWORD [20+edi],ebx
	sbb	edx,esi
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	ret
global	_ecp_nistz256_sub
align	16
_ecp_nistz256_sub:
L$_ecp_nistz256_sub_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	mov	edi,DWORD [20+esp]
	call	__ecp_nistz256_sub
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__ecp_nistz256_sub:
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	sub	eax,DWORD [ebp]
	mov	edx,DWORD [12+esi]
	sbb	ebx,DWORD [4+ebp]
	mov	DWORD [edi],eax
	sbb	ecx,DWORD [8+ebp]
	mov	DWORD [4+edi],ebx
	sbb	edx,DWORD [12+ebp]
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	sbb	eax,DWORD [16+ebp]
	mov	edx,DWORD [28+esi]
	sbb	ebx,DWORD [20+ebp]
	sbb	ecx,DWORD [24+ebp]
	mov	DWORD [16+edi],eax
	sbb	edx,DWORD [28+ebp]
	mov	DWORD [20+edi],ebx
	sbb	esi,esi
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	mov	eax,DWORD [edi]
	mov	ebp,esi
	mov	ebx,DWORD [4+edi]
	shr	ebp,31
	mov	ecx,DWORD [8+edi]
	add	eax,esi
	mov	edx,DWORD [12+edi]
	adc	ebx,esi
	mov	DWORD [edi],eax
	adc	ecx,esi
	mov	DWORD [4+edi],ebx
	adc	edx,0
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [16+edi]
	mov	ebx,DWORD [20+edi]
	mov	ecx,DWORD [24+edi]
	adc	eax,0
	mov	edx,DWORD [28+edi]
	adc	ebx,0
	mov	DWORD [16+edi],eax
	adc	ecx,ebp
	mov	DWORD [20+edi],ebx
	adc	edx,esi
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	ret
global	_ecp_nistz256_neg
align	16
_ecp_nistz256_neg:
L$_ecp_nistz256_neg_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	ebp,DWORD [24+esp]
	mov	edi,DWORD [20+esp]
	xor	eax,eax
	sub	esp,32
	mov	DWORD [esp],eax
	mov	esi,esp
	mov	DWORD [4+esp],eax
	mov	DWORD [8+esp],eax
	mov	DWORD [12+esp],eax
	mov	DWORD [16+esp],eax
	mov	DWORD [20+esp],eax
	mov	DWORD [24+esp],eax
	mov	DWORD [28+esp],eax
	call	__ecp_nistz256_sub
	add	esp,32
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__picup_eax:
	mov	eax,DWORD [esp]
	ret
global	_ecp_nistz256_to_mont
align	16
_ecp_nistz256_to_mont:
L$_ecp_nistz256_to_mont_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	call	__picup_eax
L$000pic:
	lea	ebp,[(L$RR-L$000pic)+eax]
	lea	eax,[_OPENSSL_ia32cap_P]
	mov	eax,DWORD [eax]
	mov	edi,DWORD [20+esp]
	call	__ecp_nistz256_mul_mont
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_from_mont
align	16
_ecp_nistz256_from_mont:
L$_ecp_nistz256_from_mont_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	call	__picup_eax
L$001pic:
	lea	ebp,[(L$ONE-L$001pic)+eax]
	lea	eax,[_OPENSSL_ia32cap_P]
	mov	eax,DWORD [eax]
	mov	edi,DWORD [20+esp]
	call	__ecp_nistz256_mul_mont
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_mul_mont
align	16
_ecp_nistz256_mul_mont:
L$_ecp_nistz256_mul_mont_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	call	__picup_eax
L$002pic:
	lea	eax,[_OPENSSL_ia32cap_P]
	mov	eax,DWORD [eax]
	mov	edi,DWORD [20+esp]
	call	__ecp_nistz256_mul_mont
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_sqr_mont
align	16
_ecp_nistz256_sqr_mont:
L$_ecp_nistz256_sqr_mont_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	call	__picup_eax
L$003pic:
	lea	eax,[_OPENSSL_ia32cap_P]
	mov	eax,DWORD [eax]
	mov	edi,DWORD [20+esp]
	mov	ebp,esi
	call	__ecp_nistz256_mul_mont
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__ecp_nistz256_mul_mont:
	and	eax,83886080
	cmp	eax,83886080
	jne	NEAR L$004mul_mont_ialu
	mov	edx,esp
	sub	esp,256
	movd	xmm7,DWORD [ebp]
	lea	ebp,[4+ebp]
	pcmpeqd	xmm6,xmm6
	psrlq	xmm6,48
	pshuflw	xmm7,xmm7,220
	and	esp,-64
	pshufd	xmm7,xmm7,220
	lea	ebx,[128+esp]
	movd	xmm0,DWORD [esi]
	pshufd	xmm0,xmm0,204
	movd	xmm1,DWORD [4+esi]
	movdqa	[ebx],xmm0
	pmuludq	xmm0,xmm7
	movd	xmm2,DWORD [8+esi]
	pshufd	xmm1,xmm1,204
	movdqa	[16+ebx],xmm1
	pmuludq	xmm1,xmm7
	movq	xmm4,xmm0
	pslldq	xmm4,6
	paddq	xmm4,xmm0
	movdqa	xmm5,xmm4
	psrldq	xmm4,10
	pand	xmm5,xmm6
	movd	xmm3,DWORD [12+esi]
	pshufd	xmm2,xmm2,204
	movdqa	[32+ebx],xmm2
	pmuludq	xmm2,xmm7
	paddq	xmm1,xmm4
	movdqa	[esp],xmm1
	movd	xmm0,DWORD [16+esi]
	pshufd	xmm3,xmm3,204
	movdqa	[48+ebx],xmm3
	pmuludq	xmm3,xmm7
	movdqa	[16+esp],xmm2
	movd	xmm1,DWORD [20+esi]
	pshufd	xmm0,xmm0,204
	movdqa	[64+ebx],xmm0
	pmuludq	xmm0,xmm7
	paddq	xmm3,xmm5
	movdqa	[32+esp],xmm3
	movd	xmm2,DWORD [24+esi]
	pshufd	xmm1,xmm1,204
	movdqa	[80+ebx],xmm1
	pmuludq	xmm1,xmm7
	movdqa	[48+esp],xmm0
	pshufd	xmm4,xmm5,177
	movd	xmm3,DWORD [28+esi]
	pshufd	xmm2,xmm2,204
	movdqa	[96+ebx],xmm2
	pmuludq	xmm2,xmm7
	movdqa	[64+esp],xmm1
	psubq	xmm4,xmm5
	movd	xmm0,DWORD [ebp]
	pshufd	xmm3,xmm3,204
	movdqa	[112+ebx],xmm3
	pmuludq	xmm3,xmm7
	pshuflw	xmm7,xmm0,220
	movdqa	xmm0,[ebx]
	pshufd	xmm7,xmm7,220
	mov	ecx,6
	lea	ebp,[4+ebp]
	jmp	NEAR L$005madd_sse2
align	16
L$005madd_sse2:
	paddq	xmm2,xmm5
	paddq	xmm3,xmm4
	movdqa	xmm1,[16+ebx]
	pmuludq	xmm0,xmm7
	movdqa	[80+esp],xmm2
	movdqa	xmm2,[32+ebx]
	pmuludq	xmm1,xmm7
	movdqa	[96+esp],xmm3
	paddq	xmm0,[esp]
	movdqa	xmm3,[48+ebx]
	pmuludq	xmm2,xmm7
	movq	xmm4,xmm0
	pslldq	xmm4,6
	paddq	xmm1,[16+esp]
	paddq	xmm4,xmm0
	movdqa	xmm5,xmm4
	psrldq	xmm4,10
	movdqa	xmm0,[64+ebx]
	pmuludq	xmm3,xmm7
	paddq	xmm1,xmm4
	paddq	xmm2,[32+esp]
	movdqa	[esp],xmm1
	movdqa	xmm1,[80+ebx]
	pmuludq	xmm0,xmm7
	paddq	xmm3,[48+esp]
	movdqa	[16+esp],xmm2
	pand	xmm5,xmm6
	movdqa	xmm2,[96+ebx]
	pmuludq	xmm1,xmm7
	paddq	xmm3,xmm5
	paddq	xmm0,[64+esp]
	movdqa	[32+esp],xmm3
	pshufd	xmm4,xmm5,177
	movdqa	xmm3,xmm7
	pmuludq	xmm2,xmm7
	movd	xmm7,DWORD [ebp]
	lea	ebp,[4+ebp]
	paddq	xmm1,[80+esp]
	psubq	xmm4,xmm5
	movdqa	[48+esp],xmm0
	pshuflw	xmm7,xmm7,220
	pmuludq	xmm3,[112+ebx]
	pshufd	xmm7,xmm7,220
	movdqa	xmm0,[ebx]
	movdqa	[64+esp],xmm1
	paddq	xmm2,[96+esp]
	dec	ecx
	jnz	NEAR L$005madd_sse2
	paddq	xmm2,xmm5
	paddq	xmm3,xmm4
	movdqa	xmm1,[16+ebx]
	pmuludq	xmm0,xmm7
	movdqa	[80+esp],xmm2
	movdqa	xmm2,[32+ebx]
	pmuludq	xmm1,xmm7
	movdqa	[96+esp],xmm3
	paddq	xmm0,[esp]
	movdqa	xmm3,[48+ebx]
	pmuludq	xmm2,xmm7
	movq	xmm4,xmm0
	pslldq	xmm4,6
	paddq	xmm1,[16+esp]
	paddq	xmm4,xmm0
	movdqa	xmm5,xmm4
	psrldq	xmm4,10
	movdqa	xmm0,[64+ebx]
	pmuludq	xmm3,xmm7
	paddq	xmm1,xmm4
	paddq	xmm2,[32+esp]
	movdqa	[esp],xmm1
	movdqa	xmm1,[80+ebx]
	pmuludq	xmm0,xmm7
	paddq	xmm3,[48+esp]
	movdqa	[16+esp],xmm2
	pand	xmm5,xmm6
	movdqa	xmm2,[96+ebx]
	pmuludq	xmm1,xmm7
	paddq	xmm3,xmm5
	paddq	xmm0,[64+esp]
	movdqa	[32+esp],xmm3
	pshufd	xmm4,xmm5,177
	movdqa	xmm3,[112+ebx]
	pmuludq	xmm2,xmm7
	paddq	xmm1,[80+esp]
	psubq	xmm4,xmm5
	movdqa	[48+esp],xmm0
	pmuludq	xmm3,xmm7
	pcmpeqd	xmm7,xmm7
	movdqa	xmm0,[esp]
	pslldq	xmm7,8
	movdqa	[64+esp],xmm1
	paddq	xmm2,[96+esp]
	paddq	xmm2,xmm5
	paddq	xmm3,xmm4
	movdqa	[80+esp],xmm2
	movdqa	[96+esp],xmm3
	movdqa	xmm1,[16+esp]
	movdqa	xmm2,[32+esp]
	movdqa	xmm3,[48+esp]
	movq	xmm4,xmm0
	pand	xmm0,xmm7
	xor	ebp,ebp
	pslldq	xmm4,6
	movq	xmm5,xmm1
	paddq	xmm0,xmm4
	pand	xmm1,xmm7
	psrldq	xmm0,6
	movd	eax,xmm0
	psrldq	xmm0,4
	paddq	xmm5,xmm0
	movdqa	xmm0,[64+esp]
	sub	eax,-1
	pslldq	xmm5,6
	movq	xmm4,xmm2
	paddq	xmm1,xmm5
	pand	xmm2,xmm7
	psrldq	xmm1,6
	mov	DWORD [edi],eax
	movd	eax,xmm1
	psrldq	xmm1,4
	paddq	xmm4,xmm1
	movdqa	xmm1,[80+esp]
	sbb	eax,-1
	pslldq	xmm4,6
	movq	xmm5,xmm3
	paddq	xmm2,xmm4
	pand	xmm3,xmm7
	psrldq	xmm2,6
	mov	DWORD [4+edi],eax
	movd	eax,xmm2
	psrldq	xmm2,4
	paddq	xmm5,xmm2
	movdqa	xmm2,[96+esp]
	sbb	eax,-1
	pslldq	xmm5,6
	movq	xmm4,xmm0
	paddq	xmm3,xmm5
	pand	xmm0,xmm7
	psrldq	xmm3,6
	mov	DWORD [8+edi],eax
	movd	eax,xmm3
	psrldq	xmm3,4
	paddq	xmm4,xmm3
	sbb	eax,0
	pslldq	xmm4,6
	movq	xmm5,xmm1
	paddq	xmm0,xmm4
	pand	xmm1,xmm7
	psrldq	xmm0,6
	mov	DWORD [12+edi],eax
	movd	eax,xmm0
	psrldq	xmm0,4
	paddq	xmm5,xmm0
	sbb	eax,0
	pslldq	xmm5,6
	movq	xmm4,xmm2
	paddq	xmm1,xmm5
	pand	xmm2,xmm7
	psrldq	xmm1,6
	movd	ebx,xmm1
	psrldq	xmm1,4
	mov	esp,edx
	paddq	xmm4,xmm1
	pslldq	xmm4,6
	paddq	xmm2,xmm4
	psrldq	xmm2,6
	movd	ecx,xmm2
	psrldq	xmm2,4
	sbb	ebx,0
	movd	edx,xmm2
	pextrw	esi,xmm2,2
	sbb	ecx,1
	sbb	edx,-1
	sbb	esi,0
	sub	ebp,esi
	add	DWORD [edi],esi
	adc	DWORD [4+edi],esi
	adc	DWORD [8+edi],esi
	adc	DWORD [12+edi],0
	adc	eax,0
	adc	ebx,0
	mov	DWORD [16+edi],eax
	adc	ecx,ebp
	mov	DWORD [20+edi],ebx
	adc	edx,esi
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	ret
align	16
L$004mul_mont_ialu:
	sub	esp,40
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [ebp]
	mov	DWORD [32+esp],edi
	mul	ebx
	mov	DWORD [esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,eax
	mov	eax,DWORD [8+esi]
	adc	edx,0
	mov	DWORD [4+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,eax
	mov	eax,DWORD [12+esi]
	adc	edx,0
	mov	DWORD [8+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,eax
	mov	eax,DWORD [16+esi]
	adc	edx,0
	mov	DWORD [12+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,eax
	mov	eax,DWORD [20+esi]
	adc	edx,0
	mov	DWORD [16+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,eax
	mov	eax,DWORD [24+esi]
	adc	edx,0
	mov	DWORD [20+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,eax
	mov	eax,DWORD [28+esi]
	adc	edx,0
	mov	DWORD [24+esp],ecx
	mov	ecx,edx
	xor	edi,edi
	mul	ebx
	add	ecx,eax
	mov	eax,DWORD [esp]
	adc	edx,0
	add	DWORD [12+esp],eax
	adc	DWORD [16+esp],0
	adc	DWORD [20+esp],0
	adc	DWORD [24+esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [4+ebp]
	sub	ecx,eax
	mov	eax,DWORD [esi]
	sbb	edx,0
	mov	DWORD [28+esp],ecx
	sbb	edi,0
	mov	DWORD [esp],edx
	mul	ebx
	add	eax,DWORD [4+esp]
	adc	edx,0
	mov	DWORD [4+esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [8+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [8+esi]
	mov	DWORD [8+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [12+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [12+esi]
	mov	DWORD [12+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [16+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [16+esi]
	mov	DWORD [16+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [20+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [20+esi]
	mov	DWORD [20+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [24+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [24+esi]
	mov	DWORD [24+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [28+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [28+esi]
	mov	DWORD [28+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [esp]
	adc	edx,0
	add	ecx,eax
	mov	eax,DWORD [4+esp]
	adc	edx,edi
	mov	edi,0
	adc	edi,0
	add	DWORD [16+esp],eax
	adc	DWORD [20+esp],0
	adc	DWORD [24+esp],0
	adc	DWORD [28+esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [8+ebp]
	sub	ecx,eax
	mov	eax,DWORD [esi]
	sbb	edx,0
	mov	DWORD [esp],ecx
	sbb	edi,0
	mov	DWORD [4+esp],edx
	mul	ebx
	add	eax,DWORD [8+esp]
	adc	edx,0
	mov	DWORD [8+esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [12+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [8+esi]
	mov	DWORD [12+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [16+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [12+esi]
	mov	DWORD [16+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [20+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [16+esi]
	mov	DWORD [20+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [24+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [20+esi]
	mov	DWORD [24+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [28+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [24+esi]
	mov	DWORD [28+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [28+esi]
	mov	DWORD [esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [4+esp]
	adc	edx,0
	add	ecx,eax
	mov	eax,DWORD [8+esp]
	adc	edx,edi
	mov	edi,0
	adc	edi,0
	add	DWORD [20+esp],eax
	adc	DWORD [24+esp],0
	adc	DWORD [28+esp],0
	adc	DWORD [esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [12+ebp]
	sub	ecx,eax
	mov	eax,DWORD [esi]
	sbb	edx,0
	mov	DWORD [4+esp],ecx
	sbb	edi,0
	mov	DWORD [8+esp],edx
	mul	ebx
	add	eax,DWORD [12+esp]
	adc	edx,0
	mov	DWORD [12+esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [16+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [8+esi]
	mov	DWORD [16+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [20+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [12+esi]
	mov	DWORD [20+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [24+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [16+esi]
	mov	DWORD [24+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [28+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [20+esi]
	mov	DWORD [28+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [24+esi]
	mov	DWORD [esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [4+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [28+esi]
	mov	DWORD [4+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [8+esp]
	adc	edx,0
	add	ecx,eax
	mov	eax,DWORD [12+esp]
	adc	edx,edi
	mov	edi,0
	adc	edi,0
	add	DWORD [24+esp],eax
	adc	DWORD [28+esp],0
	adc	DWORD [esp],0
	adc	DWORD [4+esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [16+ebp]
	sub	ecx,eax
	mov	eax,DWORD [esi]
	sbb	edx,0
	mov	DWORD [8+esp],ecx
	sbb	edi,0
	mov	DWORD [12+esp],edx
	mul	ebx
	add	eax,DWORD [16+esp]
	adc	edx,0
	mov	DWORD [16+esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [20+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [8+esi]
	mov	DWORD [20+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [24+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [12+esi]
	mov	DWORD [24+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [28+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [16+esi]
	mov	DWORD [28+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [20+esi]
	mov	DWORD [esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [4+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [24+esi]
	mov	DWORD [4+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [8+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [28+esi]
	mov	DWORD [8+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [12+esp]
	adc	edx,0
	add	ecx,eax
	mov	eax,DWORD [16+esp]
	adc	edx,edi
	mov	edi,0
	adc	edi,0
	add	DWORD [28+esp],eax
	adc	DWORD [esp],0
	adc	DWORD [4+esp],0
	adc	DWORD [8+esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [20+ebp]
	sub	ecx,eax
	mov	eax,DWORD [esi]
	sbb	edx,0
	mov	DWORD [12+esp],ecx
	sbb	edi,0
	mov	DWORD [16+esp],edx
	mul	ebx
	add	eax,DWORD [20+esp]
	adc	edx,0
	mov	DWORD [20+esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [24+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [8+esi]
	mov	DWORD [24+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [28+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [12+esi]
	mov	DWORD [28+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [16+esi]
	mov	DWORD [esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [4+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [20+esi]
	mov	DWORD [4+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [8+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [24+esi]
	mov	DWORD [8+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [12+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [28+esi]
	mov	DWORD [12+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [16+esp]
	adc	edx,0
	add	ecx,eax
	mov	eax,DWORD [20+esp]
	adc	edx,edi
	mov	edi,0
	adc	edi,0
	add	DWORD [esp],eax
	adc	DWORD [4+esp],0
	adc	DWORD [8+esp],0
	adc	DWORD [12+esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [24+ebp]
	sub	ecx,eax
	mov	eax,DWORD [esi]
	sbb	edx,0
	mov	DWORD [16+esp],ecx
	sbb	edi,0
	mov	DWORD [20+esp],edx
	mul	ebx
	add	eax,DWORD [24+esp]
	adc	edx,0
	mov	DWORD [24+esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [28+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [8+esi]
	mov	DWORD [28+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [12+esi]
	mov	DWORD [esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [4+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [16+esi]
	mov	DWORD [4+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [8+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [20+esi]
	mov	DWORD [8+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [12+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [24+esi]
	mov	DWORD [12+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [16+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [28+esi]
	mov	DWORD [16+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [20+esp]
	adc	edx,0
	add	ecx,eax
	mov	eax,DWORD [24+esp]
	adc	edx,edi
	mov	edi,0
	adc	edi,0
	add	DWORD [4+esp],eax
	adc	DWORD [8+esp],0
	adc	DWORD [12+esp],0
	adc	DWORD [16+esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [28+ebp]
	sub	ecx,eax
	mov	eax,DWORD [esi]
	sbb	edx,0
	mov	DWORD [20+esp],ecx
	sbb	edi,0
	mov	DWORD [24+esp],edx
	mul	ebx
	add	eax,DWORD [28+esp]
	adc	edx,0
	mov	DWORD [28+esp],eax
	mov	eax,DWORD [4+esi]
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [8+esi]
	mov	DWORD [esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [4+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [12+esi]
	mov	DWORD [4+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [8+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [16+esi]
	mov	DWORD [8+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [12+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [20+esi]
	mov	DWORD [12+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [16+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [24+esi]
	mov	DWORD [16+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [20+esp]
	adc	edx,0
	add	ecx,eax
	adc	edx,0
	mov	eax,DWORD [28+esi]
	mov	DWORD [20+esp],ecx
	mov	ecx,edx
	mul	ebx
	add	ecx,DWORD [24+esp]
	adc	edx,0
	add	ecx,eax
	mov	eax,DWORD [28+esp]
	adc	edx,edi
	mov	edi,0
	adc	edi,0
	mov	ebp,DWORD [32+esp]
	xor	esi,esi
	add	DWORD [8+esp],eax
	adc	DWORD [12+esp],0
	adc	DWORD [16+esp],0
	adc	DWORD [20+esp],eax
	adc	ecx,0
	adc	edx,eax
	adc	edi,0
	mov	ebx,DWORD [4+esp]
	sub	ecx,eax
	mov	eax,DWORD [esp]
	sbb	edx,0
	mov	DWORD [24+esp],ecx
	sbb	edi,0
	mov	DWORD [28+esp],edx
	mov	ecx,DWORD [8+esp]
	sub	eax,-1
	mov	edx,DWORD [12+esp]
	sbb	ebx,-1
	mov	DWORD [ebp],eax
	sbb	ecx,-1
	mov	DWORD [4+ebp],ebx
	sbb	edx,0
	mov	DWORD [8+ebp],ecx
	mov	DWORD [12+ebp],edx
	mov	eax,DWORD [16+esp]
	mov	ebx,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	sbb	eax,0
	mov	edx,DWORD [28+esp]
	sbb	ebx,0
	sbb	ecx,1
	sbb	edx,-1
	sbb	edi,0
	sub	esi,edi
	add	DWORD [ebp],edi
	adc	DWORD [4+ebp],edi
	adc	DWORD [8+ebp],edi
	adc	DWORD [12+ebp],0
	adc	eax,0
	adc	ebx,0
	mov	DWORD [16+ebp],eax
	adc	ecx,esi
	mov	DWORD [20+ebp],ebx
	adc	edx,edi
	mov	DWORD [24+ebp],ecx
	mov	edi,ebp
	mov	DWORD [28+ebp],edx
	add	esp,40
	ret
global	_ecp_nistz256_scatter_w5
align	16
_ecp_nistz256_scatter_w5:
L$_ecp_nistz256_scatter_w5_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	lea	edi,[124+ebp*4+edi]
	mov	ebp,6
L$006scatter_w5_loop:
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	lea	esi,[16+esi]
	mov	DWORD [edi-128],eax
	mov	DWORD [edi-64],ebx
	mov	DWORD [edi],ecx
	mov	DWORD [64+edi],edx
	lea	edi,[256+edi]
	dec	ebp
	jnz	NEAR L$006scatter_w5_loop
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_gather_w5
align	16
_ecp_nistz256_gather_w5:
L$_ecp_nistz256_gather_w5_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	lea	esi,[ebp*4+esi]
	neg	ebp
	sar	ebp,31
	mov	edi,DWORD [20+esp]
	lea	esi,[ebp*4+esi]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [64+esi]
	mov	ecx,DWORD [128+esi]
	mov	edx,DWORD [192+esi]
	and	eax,ebp
	and	ebx,ebp
	and	ecx,ebp
	and	edx,ebp
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [256+esi]
	mov	ebx,DWORD [320+esi]
	mov	ecx,DWORD [384+esi]
	mov	edx,DWORD [448+esi]
	and	eax,ebp
	and	ebx,ebp
	and	ecx,ebp
	and	edx,ebp
	mov	DWORD [16+edi],eax
	mov	DWORD [20+edi],ebx
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	mov	eax,DWORD [512+esi]
	mov	ebx,DWORD [576+esi]
	mov	ecx,DWORD [640+esi]
	mov	edx,DWORD [704+esi]
	and	eax,ebp
	and	ebx,ebp
	and	ecx,ebp
	and	edx,ebp
	mov	DWORD [32+edi],eax
	mov	DWORD [36+edi],ebx
	mov	DWORD [40+edi],ecx
	mov	DWORD [44+edi],edx
	mov	eax,DWORD [768+esi]
	mov	ebx,DWORD [832+esi]
	mov	ecx,DWORD [896+esi]
	mov	edx,DWORD [960+esi]
	and	eax,ebp
	and	ebx,ebp
	and	ecx,ebp
	and	edx,ebp
	mov	DWORD [48+edi],eax
	mov	DWORD [52+edi],ebx
	mov	DWORD [56+edi],ecx
	mov	DWORD [60+edi],edx
	mov	eax,DWORD [1024+esi]
	mov	ebx,DWORD [1088+esi]
	mov	ecx,DWORD [1152+esi]
	mov	edx,DWORD [1216+esi]
	and	eax,ebp
	and	ebx,ebp
	and	ecx,ebp
	and	edx,ebp
	mov	DWORD [64+edi],eax
	mov	DWORD [68+edi],ebx
	mov	DWORD [72+edi],ecx
	mov	DWORD [76+edi],edx
	mov	eax,DWORD [1280+esi]
	mov	ebx,DWORD [1344+esi]
	mov	ecx,DWORD [1408+esi]
	mov	edx,DWORD [1472+esi]
	and	eax,ebp
	and	ebx,ebp
	and	ecx,ebp
	and	edx,ebp
	mov	DWORD [80+edi],eax
	mov	DWORD [84+edi],ebx
	mov	DWORD [88+edi],ecx
	mov	DWORD [92+edi],edx
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_scatter_w7
align	16
_ecp_nistz256_scatter_w7:
L$_ecp_nistz256_scatter_w7_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	lea	edi,[ebp*1+edi]
	mov	ebp,16
L$007scatter_w7_loop:
	mov	eax,DWORD [esi]
	lea	esi,[4+esi]
	mov	BYTE [edi],al
	mov	BYTE [64+edi],ah
	shr	eax,16
	mov	BYTE [128+edi],al
	mov	BYTE [192+edi],ah
	lea	edi,[256+edi]
	dec	ebp
	jnz	NEAR L$007scatter_w7_loop
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_gather_w7
align	16
_ecp_nistz256_gather_w7:
L$_ecp_nistz256_gather_w7_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	add	esi,ebp
	neg	ebp
	sar	ebp,31
	mov	edi,DWORD [20+esp]
	lea	esi,[ebp*1+esi]
	movzx	eax,BYTE [esi]
	movzx	ebx,BYTE [64+esi]
	movzx	ecx,BYTE [128+esi]
	and	eax,ebp
	movzx	edx,BYTE [192+esi]
	and	ebx,ebp
	mov	BYTE [edi],al
	and	ecx,ebp
	mov	BYTE [1+edi],bl
	and	edx,ebp
	mov	BYTE [2+edi],cl
	mov	BYTE [3+edi],dl
	movzx	eax,BYTE [256+esi]
	movzx	ebx,BYTE [320+esi]
	movzx	ecx,BYTE [384+esi]
	and	eax,ebp
	movzx	edx,BYTE [448+esi]
	and	ebx,ebp
	mov	BYTE [4+edi],al
	and	ecx,ebp
	mov	BYTE [5+edi],bl
	and	edx,ebp
	mov	BYTE [6+edi],cl
	mov	BYTE [7+edi],dl
	movzx	eax,BYTE [512+esi]
	movzx	ebx,BYTE [576+esi]
	movzx	ecx,BYTE [640+esi]
	and	eax,ebp
	movzx	edx,BYTE [704+esi]
	and	ebx,ebp
	mov	BYTE [8+edi],al
	and	ecx,ebp
	mov	BYTE [9+edi],bl
	and	edx,ebp
	mov	BYTE [10+edi],cl
	mov	BYTE [11+edi],dl
	movzx	eax,BYTE [768+esi]
	movzx	ebx,BYTE [832+esi]
	movzx	ecx,BYTE [896+esi]
	and	eax,ebp
	movzx	edx,BYTE [960+esi]
	and	ebx,ebp
	mov	BYTE [12+edi],al
	and	ecx,ebp
	mov	BYTE [13+edi],bl
	and	edx,ebp
	mov	BYTE [14+edi],cl
	mov	BYTE [15+edi],dl
	movzx	eax,BYTE [1024+esi]
	movzx	ebx,BYTE [1088+esi]
	movzx	ecx,BYTE [1152+esi]
	and	eax,ebp
	movzx	edx,BYTE [1216+esi]
	and	ebx,ebp
	mov	BYTE [16+edi],al
	and	ecx,ebp
	mov	BYTE [17+edi],bl
	and	edx,ebp
	mov	BYTE [18+edi],cl
	mov	BYTE [19+edi],dl
	movzx	eax,BYTE [1280+esi]
	movzx	ebx,BYTE [1344+esi]
	movzx	ecx,BYTE [1408+esi]
	and	eax,ebp
	movzx	edx,BYTE [1472+esi]
	and	ebx,ebp
	mov	BYTE [20+edi],al
	and	ecx,ebp
	mov	BYTE [21+edi],bl
	and	edx,ebp
	mov	BYTE [22+edi],cl
	mov	BYTE [23+edi],dl
	movzx	eax,BYTE [1536+esi]
	movzx	ebx,BYTE [1600+esi]
	movzx	ecx,BYTE [1664+esi]
	and	eax,ebp
	movzx	edx,BYTE [1728+esi]
	and	ebx,ebp
	mov	BYTE [24+edi],al
	and	ecx,ebp
	mov	BYTE [25+edi],bl
	and	edx,ebp
	mov	BYTE [26+edi],cl
	mov	BYTE [27+edi],dl
	movzx	eax,BYTE [1792+esi]
	movzx	ebx,BYTE [1856+esi]
	movzx	ecx,BYTE [1920+esi]
	and	eax,ebp
	movzx	edx,BYTE [1984+esi]
	and	ebx,ebp
	mov	BYTE [28+edi],al
	and	ecx,ebp
	mov	BYTE [29+edi],bl
	and	edx,ebp
	mov	BYTE [30+edi],cl
	mov	BYTE [31+edi],dl
	movzx	eax,BYTE [2048+esi]
	movzx	ebx,BYTE [2112+esi]
	movzx	ecx,BYTE [2176+esi]
	and	eax,ebp
	movzx	edx,BYTE [2240+esi]
	and	ebx,ebp
	mov	BYTE [32+edi],al
	and	ecx,ebp
	mov	BYTE [33+edi],bl
	and	edx,ebp
	mov	BYTE [34+edi],cl
	mov	BYTE [35+edi],dl
	movzx	eax,BYTE [2304+esi]
	movzx	ebx,BYTE [2368+esi]
	movzx	ecx,BYTE [2432+esi]
	and	eax,ebp
	movzx	edx,BYTE [2496+esi]
	and	ebx,ebp
	mov	BYTE [36+edi],al
	and	ecx,ebp
	mov	BYTE [37+edi],bl
	and	edx,ebp
	mov	BYTE [38+edi],cl
	mov	BYTE [39+edi],dl
	movzx	eax,BYTE [2560+esi]
	movzx	ebx,BYTE [2624+esi]
	movzx	ecx,BYTE [2688+esi]
	and	eax,ebp
	movzx	edx,BYTE [2752+esi]
	and	ebx,ebp
	mov	BYTE [40+edi],al
	and	ecx,ebp
	mov	BYTE [41+edi],bl
	and	edx,ebp
	mov	BYTE [42+edi],cl
	mov	BYTE [43+edi],dl
	movzx	eax,BYTE [2816+esi]
	movzx	ebx,BYTE [2880+esi]
	movzx	ecx,BYTE [2944+esi]
	and	eax,ebp
	movzx	edx,BYTE [3008+esi]
	and	ebx,ebp
	mov	BYTE [44+edi],al
	and	ecx,ebp
	mov	BYTE [45+edi],bl
	and	edx,ebp
	mov	BYTE [46+edi],cl
	mov	BYTE [47+edi],dl
	movzx	eax,BYTE [3072+esi]
	movzx	ebx,BYTE [3136+esi]
	movzx	ecx,BYTE [3200+esi]
	and	eax,ebp
	movzx	edx,BYTE [3264+esi]
	and	ebx,ebp
	mov	BYTE [48+edi],al
	and	ecx,ebp
	mov	BYTE [49+edi],bl
	and	edx,ebp
	mov	BYTE [50+edi],cl
	mov	BYTE [51+edi],dl
	movzx	eax,BYTE [3328+esi]
	movzx	ebx,BYTE [3392+esi]
	movzx	ecx,BYTE [3456+esi]
	and	eax,ebp
	movzx	edx,BYTE [3520+esi]
	and	ebx,ebp
	mov	BYTE [52+edi],al
	and	ecx,ebp
	mov	BYTE [53+edi],bl
	and	edx,ebp
	mov	BYTE [54+edi],cl
	mov	BYTE [55+edi],dl
	movzx	eax,BYTE [3584+esi]
	movzx	ebx,BYTE [3648+esi]
	movzx	ecx,BYTE [3712+esi]
	and	eax,ebp
	movzx	edx,BYTE [3776+esi]
	and	ebx,ebp
	mov	BYTE [56+edi],al
	and	ecx,ebp
	mov	BYTE [57+edi],bl
	and	edx,ebp
	mov	BYTE [58+edi],cl
	mov	BYTE [59+edi],dl
	movzx	eax,BYTE [3840+esi]
	movzx	ebx,BYTE [3904+esi]
	movzx	ecx,BYTE [3968+esi]
	and	eax,ebp
	movzx	edx,BYTE [4032+esi]
	and	ebx,ebp
	mov	BYTE [60+edi],al
	and	ecx,ebp
	mov	BYTE [61+edi],bl
	and	edx,ebp
	mov	BYTE [62+edi],cl
	mov	BYTE [63+edi],dl
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_point_double
align	16
_ecp_nistz256_point_double:
L$_ecp_nistz256_point_double_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	sub	esp,164
	call	__picup_eax
L$008pic:
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	ebp,DWORD [edx]
L$point_double_shortcut:
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	mov	DWORD [96+esp],eax
	mov	DWORD [100+esp],ebx
	mov	DWORD [104+esp],ecx
	mov	DWORD [108+esp],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	mov	DWORD [112+esp],eax
	mov	DWORD [116+esp],ebx
	mov	DWORD [120+esp],ecx
	mov	DWORD [124+esp],edx
	mov	DWORD [160+esp],ebp
	lea	ebp,[32+esi]
	lea	esi,[32+esi]
	lea	edi,[esp]
	call	__ecp_nistz256_add
	mov	eax,DWORD [160+esp]
	mov	esi,64
	add	esi,DWORD [188+esp]
	lea	edi,[64+esp]
	mov	ebp,esi
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [160+esp]
	lea	esi,[esp]
	lea	ebp,[esp]
	lea	edi,[esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [160+esp]
	mov	ebp,DWORD [188+esp]
	lea	esi,[32+ebp]
	lea	ebp,[64+ebp]
	lea	edi,[128+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[96+esp]
	lea	ebp,[64+esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_add
	mov	edi,64
	lea	esi,[128+esp]
	lea	ebp,[128+esp]
	add	edi,DWORD [184+esp]
	call	__ecp_nistz256_add
	lea	esi,[96+esp]
	lea	ebp,[64+esp]
	lea	edi,[64+esp]
	call	__ecp_nistz256_sub
	mov	eax,DWORD [160+esp]
	lea	esi,[esp]
	lea	ebp,[esp]
	lea	edi,[128+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [160+esp]
	lea	esi,[32+esp]
	lea	ebp,[64+esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_mul_mont
	mov	edi,32
	lea	esi,[128+esp]
	add	edi,DWORD [184+esp]
	call	__ecp_nistz256_div_by_2
	lea	esi,[32+esp]
	lea	ebp,[32+esp]
	lea	edi,[128+esp]
	call	__ecp_nistz256_add
	mov	eax,DWORD [160+esp]
	lea	esi,[96+esp]
	lea	ebp,[esp]
	lea	edi,[esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[128+esp]
	lea	ebp,[32+esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_add
	lea	esi,[esp]
	lea	ebp,[esp]
	lea	edi,[128+esp]
	call	__ecp_nistz256_add
	mov	eax,DWORD [160+esp]
	lea	esi,[32+esp]
	lea	ebp,[32+esp]
	mov	edi,DWORD [184+esp]
	call	__ecp_nistz256_mul_mont
	mov	esi,edi
	lea	ebp,[128+esp]
	call	__ecp_nistz256_sub
	lea	esi,[esp]
	mov	ebp,edi
	lea	edi,[esp]
	call	__ecp_nistz256_sub
	mov	eax,DWORD [160+esp]
	mov	esi,edi
	lea	ebp,[32+esp]
	call	__ecp_nistz256_mul_mont
	mov	ebp,32
	lea	esi,[esp]
	add	ebp,DWORD [184+esp]
	mov	edi,ebp
	call	__ecp_nistz256_sub
	add	esp,164
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_point_add
align	16
_ecp_nistz256_point_add:
L$_ecp_nistz256_point_add_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [28+esp]
	sub	esp,596
	call	__picup_eax
L$009pic:
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	ebp,DWORD [edx]
	lea	edi,[192+esp]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	mov	DWORD [edi],eax
	mov	DWORD [588+esp],ebp
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	mov	DWORD [16+edi],eax
	mov	DWORD [20+edi],ebx
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	mov	DWORD [32+edi],eax
	mov	DWORD [36+edi],ebx
	mov	DWORD [40+edi],ecx
	mov	DWORD [44+edi],edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	mov	DWORD [48+edi],eax
	mov	DWORD [52+edi],ebx
	mov	DWORD [56+edi],ecx
	mov	DWORD [60+edi],edx
	mov	eax,DWORD [64+esi]
	mov	ebx,DWORD [68+esi]
	mov	ecx,DWORD [72+esi]
	mov	edx,DWORD [76+esi]
	mov	DWORD [64+edi],eax
	mov	ebp,eax
	mov	DWORD [68+edi],ebx
	or	ebp,ebx
	mov	DWORD [72+edi],ecx
	or	ebp,ecx
	mov	DWORD [76+edi],edx
	or	ebp,edx
	mov	eax,DWORD [80+esi]
	mov	ebx,DWORD [84+esi]
	mov	ecx,DWORD [88+esi]
	mov	edx,DWORD [92+esi]
	mov	DWORD [80+edi],eax
	or	ebp,eax
	mov	DWORD [84+edi],ebx
	or	ebp,ebx
	mov	DWORD [88+edi],ecx
	or	ebp,ecx
	mov	DWORD [92+edi],edx
	or	ebp,edx
	xor	eax,eax
	mov	esi,DWORD [620+esp]
	sub	eax,ebp
	or	ebp,eax
	sar	ebp,31
	mov	DWORD [580+esp],ebp
	lea	edi,[96+esp]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	mov	DWORD [16+edi],eax
	mov	DWORD [20+edi],ebx
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	mov	DWORD [32+edi],eax
	mov	DWORD [36+edi],ebx
	mov	DWORD [40+edi],ecx
	mov	DWORD [44+edi],edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	mov	DWORD [48+edi],eax
	mov	DWORD [52+edi],ebx
	mov	DWORD [56+edi],ecx
	mov	DWORD [60+edi],edx
	mov	eax,DWORD [64+esi]
	mov	ebx,DWORD [68+esi]
	mov	ecx,DWORD [72+esi]
	mov	edx,DWORD [76+esi]
	mov	DWORD [64+edi],eax
	mov	ebp,eax
	mov	DWORD [68+edi],ebx
	or	ebp,ebx
	mov	DWORD [72+edi],ecx
	or	ebp,ecx
	mov	DWORD [76+edi],edx
	or	ebp,edx
	mov	eax,DWORD [80+esi]
	mov	ebx,DWORD [84+esi]
	mov	ecx,DWORD [88+esi]
	mov	edx,DWORD [92+esi]
	mov	DWORD [80+edi],eax
	or	ebp,eax
	mov	DWORD [84+edi],ebx
	or	ebp,ebx
	mov	DWORD [88+edi],ecx
	or	ebp,ecx
	mov	DWORD [92+edi],edx
	or	ebp,edx
	xor	eax,eax
	sub	eax,ebp
	or	ebp,eax
	sar	ebp,31
	mov	DWORD [576+esp],ebp
	mov	eax,DWORD [588+esp]
	lea	esi,[256+esp]
	lea	ebp,[256+esp]
	lea	edi,[384+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[160+esp]
	lea	ebp,[160+esp]
	lea	edi,[320+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[384+esp]
	lea	ebp,[256+esp]
	lea	edi,[512+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[320+esp]
	lea	ebp,[160+esp]
	lea	edi,[544+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[128+esp]
	lea	ebp,[512+esp]
	lea	edi,[512+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[224+esp]
	lea	ebp,[544+esp]
	lea	edi,[544+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[544+esp]
	lea	ebp,[512+esp]
	lea	edi,[352+esp]
	call	__ecp_nistz256_sub
	or	ebx,eax
	mov	eax,DWORD [588+esp]
	or	ebx,ecx
	or	ebx,edx
	or	ebx,DWORD [edi]
	or	ebx,DWORD [4+edi]
	lea	esi,[96+esp]
	or	ebx,DWORD [8+edi]
	lea	ebp,[384+esp]
	or	ebx,DWORD [12+edi]
	lea	edi,[448+esp]
	mov	DWORD [584+esp],ebx
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[192+esp]
	lea	ebp,[320+esp]
	lea	edi,[480+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[480+esp]
	lea	ebp,[448+esp]
	lea	edi,[288+esp]
	call	__ecp_nistz256_sub
	or	eax,ebx
	or	eax,ecx
	or	eax,edx
	or	eax,DWORD [edi]
	or	eax,DWORD [4+edi]
	or	eax,DWORD [8+edi]
	or	eax,DWORD [12+edi]
	mov	ebx,DWORD [576+esp]
	not	ebx
	or	eax,ebx
	mov	ebx,DWORD [580+esp]
	not	ebx
	or	eax,ebx
	or	eax,DWORD [584+esp]
db	62
	jnz	NEAR L$010add_proceed
align	16
L$011add_double:
	mov	esi,DWORD [620+esp]
	mov	ebp,DWORD [588+esp]
	add	esp,432
	jmp	NEAR L$point_double_shortcut
align	16
L$010add_proceed:
	mov	eax,DWORD [588+esp]
	lea	esi,[352+esp]
	lea	ebp,[352+esp]
	lea	edi,[384+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[288+esp]
	lea	ebp,[160+esp]
	lea	edi,[64+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[288+esp]
	lea	ebp,[288+esp]
	lea	edi,[320+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[256+esp]
	lea	ebp,[64+esp]
	lea	edi,[64+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[320+esp]
	lea	ebp,[448+esp]
	lea	edi,[480+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[288+esp]
	lea	ebp,[320+esp]
	lea	edi,[416+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[480+esp]
	lea	ebp,[480+esp]
	lea	edi,[320+esp]
	call	__ecp_nistz256_add
	lea	esi,[384+esp]
	lea	ebp,[320+esp]
	lea	edi,[esp]
	call	__ecp_nistz256_sub
	lea	esi,[esp]
	lea	ebp,[416+esp]
	lea	edi,[esp]
	call	__ecp_nistz256_sub
	lea	esi,[480+esp]
	lea	ebp,[esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_sub
	mov	eax,DWORD [588+esp]
	lea	esi,[416+esp]
	lea	ebp,[512+esp]
	lea	edi,[544+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [588+esp]
	lea	esi,[352+esp]
	lea	ebp,[32+esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[32+esp]
	lea	ebp,[544+esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_sub
	mov	ebp,DWORD [576+esp]
	mov	esi,DWORD [580+esp]
	mov	edi,DWORD [616+esp]
	mov	edx,ebp
	not	ebp
	and	edx,esi
	and	ebp,esi
	not	esi
	mov	eax,edx
	and	eax,DWORD [64+esp]
	mov	ebx,ebp
	and	ebx,DWORD [256+esp]
	mov	ecx,esi
	and	ecx,DWORD [160+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [64+edi],eax
	mov	eax,edx
	and	eax,DWORD [68+esp]
	mov	ebx,ebp
	and	ebx,DWORD [260+esp]
	mov	ecx,esi
	and	ecx,DWORD [164+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [68+edi],eax
	mov	eax,edx
	and	eax,DWORD [72+esp]
	mov	ebx,ebp
	and	ebx,DWORD [264+esp]
	mov	ecx,esi
	and	ecx,DWORD [168+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [72+edi],eax
	mov	eax,edx
	and	eax,DWORD [76+esp]
	mov	ebx,ebp
	and	ebx,DWORD [268+esp]
	mov	ecx,esi
	and	ecx,DWORD [172+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [76+edi],eax
	mov	eax,edx
	and	eax,DWORD [80+esp]
	mov	ebx,ebp
	and	ebx,DWORD [272+esp]
	mov	ecx,esi
	and	ecx,DWORD [176+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [80+edi],eax
	mov	eax,edx
	and	eax,DWORD [84+esp]
	mov	ebx,ebp
	and	ebx,DWORD [276+esp]
	mov	ecx,esi
	and	ecx,DWORD [180+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [84+edi],eax
	mov	eax,edx
	and	eax,DWORD [88+esp]
	mov	ebx,ebp
	and	ebx,DWORD [280+esp]
	mov	ecx,esi
	and	ecx,DWORD [184+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [88+edi],eax
	mov	eax,edx
	and	eax,DWORD [92+esp]
	mov	ebx,ebp
	and	ebx,DWORD [284+esp]
	mov	ecx,esi
	and	ecx,DWORD [188+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [92+edi],eax
	mov	eax,edx
	and	eax,DWORD [esp]
	mov	ebx,ebp
	and	ebx,DWORD [192+esp]
	mov	ecx,esi
	and	ecx,DWORD [96+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [edi],eax
	mov	eax,edx
	and	eax,DWORD [4+esp]
	mov	ebx,ebp
	and	ebx,DWORD [196+esp]
	mov	ecx,esi
	and	ecx,DWORD [100+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [4+edi],eax
	mov	eax,edx
	and	eax,DWORD [8+esp]
	mov	ebx,ebp
	and	ebx,DWORD [200+esp]
	mov	ecx,esi
	and	ecx,DWORD [104+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [8+edi],eax
	mov	eax,edx
	and	eax,DWORD [12+esp]
	mov	ebx,ebp
	and	ebx,DWORD [204+esp]
	mov	ecx,esi
	and	ecx,DWORD [108+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [12+edi],eax
	mov	eax,edx
	and	eax,DWORD [16+esp]
	mov	ebx,ebp
	and	ebx,DWORD [208+esp]
	mov	ecx,esi
	and	ecx,DWORD [112+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [16+edi],eax
	mov	eax,edx
	and	eax,DWORD [20+esp]
	mov	ebx,ebp
	and	ebx,DWORD [212+esp]
	mov	ecx,esi
	and	ecx,DWORD [116+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [20+edi],eax
	mov	eax,edx
	and	eax,DWORD [24+esp]
	mov	ebx,ebp
	and	ebx,DWORD [216+esp]
	mov	ecx,esi
	and	ecx,DWORD [120+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [24+edi],eax
	mov	eax,edx
	and	eax,DWORD [28+esp]
	mov	ebx,ebp
	and	ebx,DWORD [220+esp]
	mov	ecx,esi
	and	ecx,DWORD [124+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [28+edi],eax
	mov	eax,edx
	and	eax,DWORD [32+esp]
	mov	ebx,ebp
	and	ebx,DWORD [224+esp]
	mov	ecx,esi
	and	ecx,DWORD [128+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [32+edi],eax
	mov	eax,edx
	and	eax,DWORD [36+esp]
	mov	ebx,ebp
	and	ebx,DWORD [228+esp]
	mov	ecx,esi
	and	ecx,DWORD [132+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [36+edi],eax
	mov	eax,edx
	and	eax,DWORD [40+esp]
	mov	ebx,ebp
	and	ebx,DWORD [232+esp]
	mov	ecx,esi
	and	ecx,DWORD [136+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [40+edi],eax
	mov	eax,edx
	and	eax,DWORD [44+esp]
	mov	ebx,ebp
	and	ebx,DWORD [236+esp]
	mov	ecx,esi
	and	ecx,DWORD [140+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [44+edi],eax
	mov	eax,edx
	and	eax,DWORD [48+esp]
	mov	ebx,ebp
	and	ebx,DWORD [240+esp]
	mov	ecx,esi
	and	ecx,DWORD [144+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [48+edi],eax
	mov	eax,edx
	and	eax,DWORD [52+esp]
	mov	ebx,ebp
	and	ebx,DWORD [244+esp]
	mov	ecx,esi
	and	ecx,DWORD [148+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [52+edi],eax
	mov	eax,edx
	and	eax,DWORD [56+esp]
	mov	ebx,ebp
	and	ebx,DWORD [248+esp]
	mov	ecx,esi
	and	ecx,DWORD [152+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [56+edi],eax
	mov	eax,edx
	and	eax,DWORD [60+esp]
	mov	ebx,ebp
	and	ebx,DWORD [252+esp]
	mov	ecx,esi
	and	ecx,DWORD [156+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [60+edi],eax
L$012add_done:
	add	esp,596
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_ecp_nistz256_point_add_affine
align	16
_ecp_nistz256_point_add_affine:
L$_ecp_nistz256_point_add_affine_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [24+esp]
	sub	esp,492
	call	__picup_eax
L$013pic:
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	ebp,DWORD [edx]
	lea	edi,[96+esp]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	mov	DWORD [edi],eax
	mov	DWORD [488+esp],ebp
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	mov	DWORD [16+edi],eax
	mov	DWORD [20+edi],ebx
	mov	DWORD [24+edi],ecx
	mov	DWORD [28+edi],edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	mov	DWORD [32+edi],eax
	mov	DWORD [36+edi],ebx
	mov	DWORD [40+edi],ecx
	mov	DWORD [44+edi],edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	mov	DWORD [48+edi],eax
	mov	DWORD [52+edi],ebx
	mov	DWORD [56+edi],ecx
	mov	DWORD [60+edi],edx
	mov	eax,DWORD [64+esi]
	mov	ebx,DWORD [68+esi]
	mov	ecx,DWORD [72+esi]
	mov	edx,DWORD [76+esi]
	mov	DWORD [64+edi],eax
	mov	ebp,eax
	mov	DWORD [68+edi],ebx
	or	ebp,ebx
	mov	DWORD [72+edi],ecx
	or	ebp,ecx
	mov	DWORD [76+edi],edx
	or	ebp,edx
	mov	eax,DWORD [80+esi]
	mov	ebx,DWORD [84+esi]
	mov	ecx,DWORD [88+esi]
	mov	edx,DWORD [92+esi]
	mov	DWORD [80+edi],eax
	or	ebp,eax
	mov	DWORD [84+edi],ebx
	or	ebp,ebx
	mov	DWORD [88+edi],ecx
	or	ebp,ecx
	mov	DWORD [92+edi],edx
	or	ebp,edx
	xor	eax,eax
	mov	esi,DWORD [520+esp]
	sub	eax,ebp
	or	ebp,eax
	sar	ebp,31
	mov	DWORD [480+esp],ebp
	lea	edi,[192+esp]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	mov	DWORD [edi],eax
	mov	ebp,eax
	mov	DWORD [4+edi],ebx
	or	ebp,ebx
	mov	DWORD [8+edi],ecx
	or	ebp,ecx
	mov	DWORD [12+edi],edx
	or	ebp,edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	mov	DWORD [16+edi],eax
	or	ebp,eax
	mov	DWORD [20+edi],ebx
	or	ebp,ebx
	mov	DWORD [24+edi],ecx
	or	ebp,ecx
	mov	DWORD [28+edi],edx
	or	ebp,edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	mov	DWORD [32+edi],eax
	or	ebp,eax
	mov	DWORD [36+edi],ebx
	or	ebp,ebx
	mov	DWORD [40+edi],ecx
	or	ebp,ecx
	mov	DWORD [44+edi],edx
	or	ebp,edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	mov	DWORD [48+edi],eax
	or	ebp,eax
	mov	DWORD [52+edi],ebx
	or	ebp,ebx
	mov	DWORD [56+edi],ecx
	or	ebp,ecx
	mov	DWORD [60+edi],edx
	or	ebp,edx
	xor	ebx,ebx
	mov	eax,DWORD [488+esp]
	sub	ebx,ebp
	lea	esi,[160+esp]
	or	ebx,ebp
	lea	ebp,[160+esp]
	sar	ebx,31
	lea	edi,[288+esp]
	mov	DWORD [484+esp],ebx
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [488+esp]
	lea	esi,[192+esp]
	mov	ebp,edi
	lea	edi,[256+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [488+esp]
	lea	esi,[160+esp]
	lea	ebp,[288+esp]
	lea	edi,[288+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[256+esp]
	lea	ebp,[96+esp]
	lea	edi,[320+esp]
	call	__ecp_nistz256_sub
	mov	eax,DWORD [488+esp]
	lea	esi,[224+esp]
	lea	ebp,[288+esp]
	lea	edi,[288+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [488+esp]
	lea	esi,[160+esp]
	lea	ebp,[320+esp]
	lea	edi,[64+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[288+esp]
	lea	ebp,[128+esp]
	lea	edi,[352+esp]
	call	__ecp_nistz256_sub
	mov	eax,DWORD [488+esp]
	lea	esi,[320+esp]
	lea	ebp,[320+esp]
	lea	edi,[384+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [488+esp]
	lea	esi,[352+esp]
	lea	ebp,[352+esp]
	lea	edi,[448+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [488+esp]
	lea	esi,[96+esp]
	lea	ebp,[384+esp]
	lea	edi,[256+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [488+esp]
	lea	esi,[320+esp]
	lea	ebp,[384+esp]
	lea	edi,[416+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[256+esp]
	lea	ebp,[256+esp]
	lea	edi,[384+esp]
	call	__ecp_nistz256_add
	lea	esi,[448+esp]
	lea	ebp,[384+esp]
	lea	edi,[esp]
	call	__ecp_nistz256_sub
	lea	esi,[esp]
	lea	ebp,[416+esp]
	lea	edi,[esp]
	call	__ecp_nistz256_sub
	lea	esi,[256+esp]
	lea	ebp,[esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_sub
	mov	eax,DWORD [488+esp]
	lea	esi,[416+esp]
	lea	ebp,[128+esp]
	lea	edi,[288+esp]
	call	__ecp_nistz256_mul_mont
	mov	eax,DWORD [488+esp]
	lea	esi,[352+esp]
	lea	ebp,[32+esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_mul_mont
	lea	esi,[32+esp]
	lea	ebp,[288+esp]
	lea	edi,[32+esp]
	call	__ecp_nistz256_sub
	mov	ebp,DWORD [480+esp]
	mov	esi,DWORD [484+esp]
	mov	edi,DWORD [512+esp]
	mov	edx,ebp
	not	ebp
	and	edx,esi
	and	ebp,esi
	not	esi
	mov	eax,edx
	and	eax,DWORD [64+esp]
	mov	ebx,ebp
	and	ebx,1
	mov	ecx,esi
	and	ecx,DWORD [160+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [64+edi],eax
	mov	eax,edx
	and	eax,DWORD [68+esp]
	mov	ecx,esi
	and	ecx,DWORD [164+esp]
	or	eax,ecx
	mov	DWORD [68+edi],eax
	mov	eax,edx
	and	eax,DWORD [72+esp]
	mov	ecx,esi
	and	ecx,DWORD [168+esp]
	or	eax,ecx
	mov	DWORD [72+edi],eax
	mov	eax,edx
	and	eax,DWORD [76+esp]
	mov	ecx,esi
	and	ecx,DWORD [172+esp]
	or	eax,ebp
	or	eax,ecx
	mov	DWORD [76+edi],eax
	mov	eax,edx
	and	eax,DWORD [80+esp]
	mov	ecx,esi
	and	ecx,DWORD [176+esp]
	or	eax,ebp
	or	eax,ecx
	mov	DWORD [80+edi],eax
	mov	eax,edx
	and	eax,DWORD [84+esp]
	mov	ecx,esi
	and	ecx,DWORD [180+esp]
	or	eax,ebp
	or	eax,ecx
	mov	DWORD [84+edi],eax
	mov	eax,edx
	and	eax,DWORD [88+esp]
	mov	ebx,ebp
	and	ebx,-2
	mov	ecx,esi
	and	ecx,DWORD [184+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [88+edi],eax
	mov	eax,edx
	and	eax,DWORD [92+esp]
	mov	ecx,esi
	and	ecx,DWORD [188+esp]
	or	eax,ecx
	mov	DWORD [92+edi],eax
	mov	eax,edx
	and	eax,DWORD [esp]
	mov	ebx,ebp
	and	ebx,DWORD [192+esp]
	mov	ecx,esi
	and	ecx,DWORD [96+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [edi],eax
	mov	eax,edx
	and	eax,DWORD [4+esp]
	mov	ebx,ebp
	and	ebx,DWORD [196+esp]
	mov	ecx,esi
	and	ecx,DWORD [100+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [4+edi],eax
	mov	eax,edx
	and	eax,DWORD [8+esp]
	mov	ebx,ebp
	and	ebx,DWORD [200+esp]
	mov	ecx,esi
	and	ecx,DWORD [104+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [8+edi],eax
	mov	eax,edx
	and	eax,DWORD [12+esp]
	mov	ebx,ebp
	and	ebx,DWORD [204+esp]
	mov	ecx,esi
	and	ecx,DWORD [108+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [12+edi],eax
	mov	eax,edx
	and	eax,DWORD [16+esp]
	mov	ebx,ebp
	and	ebx,DWORD [208+esp]
	mov	ecx,esi
	and	ecx,DWORD [112+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [16+edi],eax
	mov	eax,edx
	and	eax,DWORD [20+esp]
	mov	ebx,ebp
	and	ebx,DWORD [212+esp]
	mov	ecx,esi
	and	ecx,DWORD [116+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [20+edi],eax
	mov	eax,edx
	and	eax,DWORD [24+esp]
	mov	ebx,ebp
	and	ebx,DWORD [216+esp]
	mov	ecx,esi
	and	ecx,DWORD [120+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [24+edi],eax
	mov	eax,edx
	and	eax,DWORD [28+esp]
	mov	ebx,ebp
	and	ebx,DWORD [220+esp]
	mov	ecx,esi
	and	ecx,DWORD [124+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [28+edi],eax
	mov	eax,edx
	and	eax,DWORD [32+esp]
	mov	ebx,ebp
	and	ebx,DWORD [224+esp]
	mov	ecx,esi
	and	ecx,DWORD [128+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [32+edi],eax
	mov	eax,edx
	and	eax,DWORD [36+esp]
	mov	ebx,ebp
	and	ebx,DWORD [228+esp]
	mov	ecx,esi
	and	ecx,DWORD [132+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [36+edi],eax
	mov	eax,edx
	and	eax,DWORD [40+esp]
	mov	ebx,ebp
	and	ebx,DWORD [232+esp]
	mov	ecx,esi
	and	ecx,DWORD [136+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [40+edi],eax
	mov	eax,edx
	and	eax,DWORD [44+esp]
	mov	ebx,ebp
	and	ebx,DWORD [236+esp]
	mov	ecx,esi
	and	ecx,DWORD [140+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [44+edi],eax
	mov	eax,edx
	and	eax,DWORD [48+esp]
	mov	ebx,ebp
	and	ebx,DWORD [240+esp]
	mov	ecx,esi
	and	ecx,DWORD [144+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [48+edi],eax
	mov	eax,edx
	and	eax,DWORD [52+esp]
	mov	ebx,ebp
	and	ebx,DWORD [244+esp]
	mov	ecx,esi
	and	ecx,DWORD [148+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [52+edi],eax
	mov	eax,edx
	and	eax,DWORD [56+esp]
	mov	ebx,ebp
	and	ebx,DWORD [248+esp]
	mov	ecx,esi
	and	ecx,DWORD [152+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [56+edi],eax
	mov	eax,edx
	and	eax,DWORD [60+esp]
	mov	ebx,ebp
	and	ebx,DWORD [252+esp]
	mov	ecx,esi
	and	ecx,DWORD [156+esp]
	or	eax,ebx
	or	eax,ecx
	mov	DWORD [60+edi],eax
	add	esp,492
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
segment	.bss
common	_OPENSSL_ia32cap_P 16
    node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/md5/                                 0000775 0000000 0000000 00000000000 14746647661 0024375 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/md5/md5-586.asm                      0000664 0000000 0000000 00000024600 14746647661 0026106 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_ossl_md5_block_asm_data_order
align	16
_ossl_md5_block_asm_data_order:
L$_ossl_md5_block_asm_data_order_begin:
	push	esi
	push	edi
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	push	ebp
	shl	ecx,6
	push	ebx
	add	ecx,esi
	sub	ecx,64
	mov	eax,DWORD [edi]
	push	ecx
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
L$000start:
	; 
	; R0 section
	mov	edi,ecx
	mov	ebp,DWORD [esi]
	; R0 0
	xor	edi,edx
	and	edi,ebx
	lea	eax,[3614090360+ebp*1+eax]
	xor	edi,edx
	mov	ebp,DWORD [4+esi]
	add	eax,edi
	rol	eax,7
	mov	edi,ebx
	add	eax,ebx
	; R0 1
	xor	edi,ecx
	and	edi,eax
	lea	edx,[3905402710+ebp*1+edx]
	xor	edi,ecx
	mov	ebp,DWORD [8+esi]
	add	edx,edi
	rol	edx,12
	mov	edi,eax
	add	edx,eax
	; R0 2
	xor	edi,ebx
	and	edi,edx
	lea	ecx,[606105819+ebp*1+ecx]
	xor	edi,ebx
	mov	ebp,DWORD [12+esi]
	add	ecx,edi
	rol	ecx,17
	mov	edi,edx
	add	ecx,edx
	; R0 3
	xor	edi,eax
	and	edi,ecx
	lea	ebx,[3250441966+ebp*1+ebx]
	xor	edi,eax
	mov	ebp,DWORD [16+esi]
	add	ebx,edi
	rol	ebx,22
	mov	edi,ecx
	add	ebx,ecx
	; R0 4
	xor	edi,edx
	and	edi,ebx
	lea	eax,[4118548399+ebp*1+eax]
	xor	edi,edx
	mov	ebp,DWORD [20+esi]
	add	eax,edi
	rol	eax,7
	mov	edi,ebx
	add	eax,ebx
	; R0 5
	xor	edi,ecx
	and	edi,eax
	lea	edx,[1200080426+ebp*1+edx]
	xor	edi,ecx
	mov	ebp,DWORD [24+esi]
	add	edx,edi
	rol	edx,12
	mov	edi,eax
	add	edx,eax
	; R0 6
	xor	edi,ebx
	and	edi,edx
	lea	ecx,[2821735955+ebp*1+ecx]
	xor	edi,ebx
	mov	ebp,DWORD [28+esi]
	add	ecx,edi
	rol	ecx,17
	mov	edi,edx
	add	ecx,edx
	; R0 7
	xor	edi,eax
	and	edi,ecx
	lea	ebx,[4249261313+ebp*1+ebx]
	xor	edi,eax
	mov	ebp,DWORD [32+esi]
	add	ebx,edi
	rol	ebx,22
	mov	edi,ecx
	add	ebx,ecx
	; R0 8
	xor	edi,edx
	and	edi,ebx
	lea	eax,[1770035416+ebp*1+eax]
	xor	edi,edx
	mov	ebp,DWORD [36+esi]
	add	eax,edi
	rol	eax,7
	mov	edi,ebx
	add	eax,ebx
	; R0 9
	xor	edi,ecx
	and	edi,eax
	lea	edx,[2336552879+ebp*1+edx]
	xor	edi,ecx
	mov	ebp,DWORD [40+esi]
	add	edx,edi
	rol	edx,12
	mov	edi,eax
	add	edx,eax
	; R0 10
	xor	edi,ebx
	and	edi,edx
	lea	ecx,[4294925233+ebp*1+ecx]
	xor	edi,ebx
	mov	ebp,DWORD [44+esi]
	add	ecx,edi
	rol	ecx,17
	mov	edi,edx
	add	ecx,edx
	; R0 11
	xor	edi,eax
	and	edi,ecx
	lea	ebx,[2304563134+ebp*1+ebx]
	xor	edi,eax
	mov	ebp,DWORD [48+esi]
	add	ebx,edi
	rol	ebx,22
	mov	edi,ecx
	add	ebx,ecx
	; R0 12
	xor	edi,edx
	and	edi,ebx
	lea	eax,[1804603682+ebp*1+eax]
	xor	edi,edx
	mov	ebp,DWORD [52+esi]
	add	eax,edi
	rol	eax,7
	mov	edi,ebx
	add	eax,ebx
	; R0 13
	xor	edi,ecx
	and	edi,eax
	lea	edx,[4254626195+ebp*1+edx]
	xor	edi,ecx
	mov	ebp,DWORD [56+esi]
	add	edx,edi
	rol	edx,12
	mov	edi,eax
	add	edx,eax
	; R0 14
	xor	edi,ebx
	and	edi,edx
	lea	ecx,[2792965006+ebp*1+ecx]
	xor	edi,ebx
	mov	ebp,DWORD [60+esi]
	add	ecx,edi
	rol	ecx,17
	mov	edi,edx
	add	ecx,edx
	; R0 15
	xor	edi,eax
	and	edi,ecx
	lea	ebx,[1236535329+ebp*1+ebx]
	xor	edi,eax
	mov	ebp,DWORD [4+esi]
	add	ebx,edi
	rol	ebx,22
	mov	edi,ecx
	add	ebx,ecx
	; 
	; R1 section
	; R1 16
	xor	edi,ebx
	and	edi,edx
	lea	eax,[4129170786+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [24+esi]
	add	eax,edi
	mov	edi,ebx
	rol	eax,5
	add	eax,ebx
	; R1 17
	xor	edi,eax
	and	edi,ecx
	lea	edx,[3225465664+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [44+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,9
	add	edx,eax
	; R1 18
	xor	edi,edx
	and	edi,ebx
	lea	ecx,[643717713+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [esi]
	add	ecx,edi
	mov	edi,edx
	rol	ecx,14
	add	ecx,edx
	; R1 19
	xor	edi,ecx
	and	edi,eax
	lea	ebx,[3921069994+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [20+esi]
	add	ebx,edi
	mov	edi,ecx
	rol	ebx,20
	add	ebx,ecx
	; R1 20
	xor	edi,ebx
	and	edi,edx
	lea	eax,[3593408605+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [40+esi]
	add	eax,edi
	mov	edi,ebx
	rol	eax,5
	add	eax,ebx
	; R1 21
	xor	edi,eax
	and	edi,ecx
	lea	edx,[38016083+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [60+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,9
	add	edx,eax
	; R1 22
	xor	edi,edx
	and	edi,ebx
	lea	ecx,[3634488961+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [16+esi]
	add	ecx,edi
	mov	edi,edx
	rol	ecx,14
	add	ecx,edx
	; R1 23
	xor	edi,ecx
	and	edi,eax
	lea	ebx,[3889429448+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [36+esi]
	add	ebx,edi
	mov	edi,ecx
	rol	ebx,20
	add	ebx,ecx
	; R1 24
	xor	edi,ebx
	and	edi,edx
	lea	eax,[568446438+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [56+esi]
	add	eax,edi
	mov	edi,ebx
	rol	eax,5
	add	eax,ebx
	; R1 25
	xor	edi,eax
	and	edi,ecx
	lea	edx,[3275163606+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [12+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,9
	add	edx,eax
	; R1 26
	xor	edi,edx
	and	edi,ebx
	lea	ecx,[4107603335+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [32+esi]
	add	ecx,edi
	mov	edi,edx
	rol	ecx,14
	add	ecx,edx
	; R1 27
	xor	edi,ecx
	and	edi,eax
	lea	ebx,[1163531501+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [52+esi]
	add	ebx,edi
	mov	edi,ecx
	rol	ebx,20
	add	ebx,ecx
	; R1 28
	xor	edi,ebx
	and	edi,edx
	lea	eax,[2850285829+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [8+esi]
	add	eax,edi
	mov	edi,ebx
	rol	eax,5
	add	eax,ebx
	; R1 29
	xor	edi,eax
	and	edi,ecx
	lea	edx,[4243563512+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [28+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,9
	add	edx,eax
	; R1 30
	xor	edi,edx
	and	edi,ebx
	lea	ecx,[1735328473+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [48+esi]
	add	ecx,edi
	mov	edi,edx
	rol	ecx,14
	add	ecx,edx
	; R1 31
	xor	edi,ecx
	and	edi,eax
	lea	ebx,[2368359562+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [20+esi]
	add	ebx,edi
	mov	edi,ecx
	rol	ebx,20
	add	ebx,ecx
	; 
	; R2 section
	; R2 32
	xor	edi,edx
	xor	edi,ebx
	lea	eax,[4294588738+ebp*1+eax]
	add	eax,edi
	mov	ebp,DWORD [32+esi]
	rol	eax,4
	mov	edi,ebx
	; R2 33
	add	eax,ebx
	xor	edi,ecx
	lea	edx,[2272392833+ebp*1+edx]
	xor	edi,eax
	mov	ebp,DWORD [44+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,11
	add	edx,eax
	; R2 34
	xor	edi,ebx
	xor	edi,edx
	lea	ecx,[1839030562+ebp*1+ecx]
	add	ecx,edi
	mov	ebp,DWORD [56+esi]
	rol	ecx,16
	mov	edi,edx
	; R2 35
	add	ecx,edx
	xor	edi,eax
	lea	ebx,[4259657740+ebp*1+ebx]
	xor	edi,ecx
	mov	ebp,DWORD [4+esi]
	add	ebx,edi
	mov	edi,ecx
	rol	ebx,23
	add	ebx,ecx
	; R2 36
	xor	edi,edx
	xor	edi,ebx
	lea	eax,[2763975236+ebp*1+eax]
	add	eax,edi
	mov	ebp,DWORD [16+esi]
	rol	eax,4
	mov	edi,ebx
	; R2 37
	add	eax,ebx
	xor	edi,ecx
	lea	edx,[1272893353+ebp*1+edx]
	xor	edi,eax
	mov	ebp,DWORD [28+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,11
	add	edx,eax
	; R2 38
	xor	edi,ebx
	xor	edi,edx
	lea	ecx,[4139469664+ebp*1+ecx]
	add	ecx,edi
	mov	ebp,DWORD [40+esi]
	rol	ecx,16
	mov	edi,edx
	; R2 39
	add	ecx,edx
	xor	edi,eax
	lea	ebx,[3200236656+ebp*1+ebx]
	xor	edi,ecx
	mov	ebp,DWORD [52+esi]
	add	ebx,edi
	mov	edi,ecx
	rol	ebx,23
	add	ebx,ecx
	; R2 40
	xor	edi,edx
	xor	edi,ebx
	lea	eax,[681279174+ebp*1+eax]
	add	eax,edi
	mov	ebp,DWORD [esi]
	rol	eax,4
	mov	edi,ebx
	; R2 41
	add	eax,ebx
	xor	edi,ecx
	lea	edx,[3936430074+ebp*1+edx]
	xor	edi,eax
	mov	ebp,DWORD [12+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,11
	add	edx,eax
	; R2 42
	xor	edi,ebx
	xor	edi,edx
	lea	ecx,[3572445317+ebp*1+ecx]
	add	ecx,edi
	mov	ebp,DWORD [24+esi]
	rol	ecx,16
	mov	edi,edx
	; R2 43
	add	ecx,edx
	xor	edi,eax
	lea	ebx,[76029189+ebp*1+ebx]
	xor	edi,ecx
	mov	ebp,DWORD [36+esi]
	add	ebx,edi
	mov	edi,ecx
	rol	ebx,23
	add	ebx,ecx
	; R2 44
	xor	edi,edx
	xor	edi,ebx
	lea	eax,[3654602809+ebp*1+eax]
	add	eax,edi
	mov	ebp,DWORD [48+esi]
	rol	eax,4
	mov	edi,ebx
	; R2 45
	add	eax,ebx
	xor	edi,ecx
	lea	edx,[3873151461+ebp*1+edx]
	xor	edi,eax
	mov	ebp,DWORD [60+esi]
	add	edx,edi
	mov	edi,eax
	rol	edx,11
	add	edx,eax
	; R2 46
	xor	edi,ebx
	xor	edi,edx
	lea	ecx,[530742520+ebp*1+ecx]
	add	ecx,edi
	mov	ebp,DWORD [8+esi]
	rol	ecx,16
	mov	edi,edx
	; R2 47
	add	ecx,edx
	xor	edi,eax
	lea	ebx,[3299628645+ebp*1+ebx]
	xor	edi,ecx
	mov	ebp,DWORD [esi]
	add	ebx,edi
	mov	edi,-1
	rol	ebx,23
	add	ebx,ecx
	; 
	; R3 section
	; R3 48
	xor	edi,edx
	or	edi,ebx
	lea	eax,[4096336452+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [28+esi]
	add	eax,edi
	mov	edi,-1
	rol	eax,6
	xor	edi,ecx
	add	eax,ebx
	; R3 49
	or	edi,eax
	lea	edx,[1126891415+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [56+esi]
	add	edx,edi
	mov	edi,-1
	rol	edx,10
	xor	edi,ebx
	add	edx,eax
	; R3 50
	or	edi,edx
	lea	ecx,[2878612391+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [20+esi]
	add	ecx,edi
	mov	edi,-1
	rol	ecx,15
	xor	edi,eax
	add	ecx,edx
	; R3 51
	or	edi,ecx
	lea	ebx,[4237533241+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [48+esi]
	add	ebx,edi
	mov	edi,-1
	rol	ebx,21
	xor	edi,edx
	add	ebx,ecx
	; R3 52
	or	edi,ebx
	lea	eax,[1700485571+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [12+esi]
	add	eax,edi
	mov	edi,-1
	rol	eax,6
	xor	edi,ecx
	add	eax,ebx
	; R3 53
	or	edi,eax
	lea	edx,[2399980690+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [40+esi]
	add	edx,edi
	mov	edi,-1
	rol	edx,10
	xor	edi,ebx
	add	edx,eax
	; R3 54
	or	edi,edx
	lea	ecx,[4293915773+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [4+esi]
	add	ecx,edi
	mov	edi,-1
	rol	ecx,15
	xor	edi,eax
	add	ecx,edx
	; R3 55
	or	edi,ecx
	lea	ebx,[2240044497+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [32+esi]
	add	ebx,edi
	mov	edi,-1
	rol	ebx,21
	xor	edi,edx
	add	ebx,ecx
	; R3 56
	or	edi,ebx
	lea	eax,[1873313359+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [60+esi]
	add	eax,edi
	mov	edi,-1
	rol	eax,6
	xor	edi,ecx
	add	eax,ebx
	; R3 57
	or	edi,eax
	lea	edx,[4264355552+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [24+esi]
	add	edx,edi
	mov	edi,-1
	rol	edx,10
	xor	edi,ebx
	add	edx,eax
	; R3 58
	or	edi,edx
	lea	ecx,[2734768916+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [52+esi]
	add	ecx,edi
	mov	edi,-1
	rol	ecx,15
	xor	edi,eax
	add	ecx,edx
	; R3 59
	or	edi,ecx
	lea	ebx,[1309151649+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [16+esi]
	add	ebx,edi
	mov	edi,-1
	rol	ebx,21
	xor	edi,edx
	add	ebx,ecx
	; R3 60
	or	edi,ebx
	lea	eax,[4149444226+ebp*1+eax]
	xor	edi,ecx
	mov	ebp,DWORD [44+esi]
	add	eax,edi
	mov	edi,-1
	rol	eax,6
	xor	edi,ecx
	add	eax,ebx
	; R3 61
	or	edi,eax
	lea	edx,[3174756917+ebp*1+edx]
	xor	edi,ebx
	mov	ebp,DWORD [8+esi]
	add	edx,edi
	mov	edi,-1
	rol	edx,10
	xor	edi,ebx
	add	edx,eax
	; R3 62
	or	edi,edx
	lea	ecx,[718787259+ebp*1+ecx]
	xor	edi,eax
	mov	ebp,DWORD [36+esi]
	add	ecx,edi
	mov	edi,-1
	rol	ecx,15
	xor	edi,eax
	add	ecx,edx
	; R3 63
	or	edi,ecx
	lea	ebx,[3951481745+ebp*1+ebx]
	xor	edi,edx
	mov	ebp,DWORD [24+esp]
	add	ebx,edi
	add	esi,64
	rol	ebx,21
	mov	edi,DWORD [ebp]
	add	ebx,ecx
	add	eax,edi
	mov	edi,DWORD [4+ebp]
	add	ebx,edi
	mov	edi,DWORD [8+ebp]
	add	ecx,edi
	mov	edi,DWORD [12+ebp]
	add	edx,edi
	mov	DWORD [ebp],eax
	mov	DWORD [4+ebp],ebx
	mov	edi,DWORD [esp]
	mov	DWORD [8+ebp],ecx
	mov	DWORD [12+ebp],edx
	cmp	edi,esi
	jae	NEAR L$000start
	pop	eax
	pop	ebx
	pop	ebp
	pop	edi
	pop	esi
	ret
                                                                                                                                node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/modes/                               0000775 0000000 0000000 00000000000 14746647661 0025017 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/modes/ghash-x86.asm                  0000664 0000000 0000000 00000055610 14746647661 0027245 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_gcm_gmult_4bit_x86
align	16
_gcm_gmult_4bit_x86:
L$_gcm_gmult_4bit_x86_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	sub	esp,84
	mov	edi,DWORD [104+esp]
	mov	esi,DWORD [108+esp]
	mov	ebp,DWORD [edi]
	mov	edx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	ebx,DWORD [12+edi]
	mov	DWORD [16+esp],0
	mov	DWORD [20+esp],471859200
	mov	DWORD [24+esp],943718400
	mov	DWORD [28+esp],610271232
	mov	DWORD [32+esp],1887436800
	mov	DWORD [36+esp],1822425088
	mov	DWORD [40+esp],1220542464
	mov	DWORD [44+esp],1423966208
	mov	DWORD [48+esp],3774873600
	mov	DWORD [52+esp],4246732800
	mov	DWORD [56+esp],3644850176
	mov	DWORD [60+esp],3311403008
	mov	DWORD [64+esp],2441084928
	mov	DWORD [68+esp],2376073216
	mov	DWORD [72+esp],2847932416
	mov	DWORD [76+esp],3051356160
	mov	DWORD [esp],ebp
	mov	DWORD [4+esp],edx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],ebx
	shr	ebx,20
	and	ebx,240
	mov	ebp,DWORD [4+ebx*1+esi]
	mov	edx,DWORD [ebx*1+esi]
	mov	ecx,DWORD [12+ebx*1+esi]
	mov	ebx,DWORD [8+ebx*1+esi]
	xor	eax,eax
	mov	edi,15
	jmp	NEAR L$000x86_loop
align	16
L$000x86_loop:
	mov	al,bl
	shrd	ebx,ecx,4
	and	al,15
	shrd	ecx,edx,4
	shrd	edx,ebp,4
	shr	ebp,4
	xor	ebp,DWORD [16+eax*4+esp]
	mov	al,BYTE [edi*1+esp]
	and	al,240
	xor	ebx,DWORD [8+eax*1+esi]
	xor	ecx,DWORD [12+eax*1+esi]
	xor	edx,DWORD [eax*1+esi]
	xor	ebp,DWORD [4+eax*1+esi]
	dec	edi
	js	NEAR L$001x86_break
	mov	al,bl
	shrd	ebx,ecx,4
	and	al,15
	shrd	ecx,edx,4
	shrd	edx,ebp,4
	shr	ebp,4
	xor	ebp,DWORD [16+eax*4+esp]
	mov	al,BYTE [edi*1+esp]
	shl	al,4
	xor	ebx,DWORD [8+eax*1+esi]
	xor	ecx,DWORD [12+eax*1+esi]
	xor	edx,DWORD [eax*1+esi]
	xor	ebp,DWORD [4+eax*1+esi]
	jmp	NEAR L$000x86_loop
align	16
L$001x86_break:
	bswap	ebx
	bswap	ecx
	bswap	edx
	bswap	ebp
	mov	edi,DWORD [104+esp]
	mov	DWORD [12+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [4+edi],edx
	mov	DWORD [edi],ebp
	add	esp,84
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_gcm_ghash_4bit_x86
align	16
_gcm_ghash_4bit_x86:
L$_gcm_ghash_4bit_x86_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	sub	esp,84
	mov	ebx,DWORD [104+esp]
	mov	esi,DWORD [108+esp]
	mov	edi,DWORD [112+esp]
	mov	ecx,DWORD [116+esp]
	add	ecx,edi
	mov	DWORD [116+esp],ecx
	mov	ebp,DWORD [ebx]
	mov	edx,DWORD [4+ebx]
	mov	ecx,DWORD [8+ebx]
	mov	ebx,DWORD [12+ebx]
	mov	DWORD [16+esp],0
	mov	DWORD [20+esp],471859200
	mov	DWORD [24+esp],943718400
	mov	DWORD [28+esp],610271232
	mov	DWORD [32+esp],1887436800
	mov	DWORD [36+esp],1822425088
	mov	DWORD [40+esp],1220542464
	mov	DWORD [44+esp],1423966208
	mov	DWORD [48+esp],3774873600
	mov	DWORD [52+esp],4246732800
	mov	DWORD [56+esp],3644850176
	mov	DWORD [60+esp],3311403008
	mov	DWORD [64+esp],2441084928
	mov	DWORD [68+esp],2376073216
	mov	DWORD [72+esp],2847932416
	mov	DWORD [76+esp],3051356160
align	16
L$002x86_outer_loop:
	xor	ebx,DWORD [12+edi]
	xor	ecx,DWORD [8+edi]
	xor	edx,DWORD [4+edi]
	xor	ebp,DWORD [edi]
	mov	DWORD [12+esp],ebx
	mov	DWORD [8+esp],ecx
	mov	DWORD [4+esp],edx
	mov	DWORD [esp],ebp
	shr	ebx,20
	and	ebx,240
	mov	ebp,DWORD [4+ebx*1+esi]
	mov	edx,DWORD [ebx*1+esi]
	mov	ecx,DWORD [12+ebx*1+esi]
	mov	ebx,DWORD [8+ebx*1+esi]
	xor	eax,eax
	mov	edi,15
	jmp	NEAR L$003x86_loop
align	16
L$003x86_loop:
	mov	al,bl
	shrd	ebx,ecx,4
	and	al,15
	shrd	ecx,edx,4
	shrd	edx,ebp,4
	shr	ebp,4
	xor	ebp,DWORD [16+eax*4+esp]
	mov	al,BYTE [edi*1+esp]
	and	al,240
	xor	ebx,DWORD [8+eax*1+esi]
	xor	ecx,DWORD [12+eax*1+esi]
	xor	edx,DWORD [eax*1+esi]
	xor	ebp,DWORD [4+eax*1+esi]
	dec	edi
	js	NEAR L$004x86_break
	mov	al,bl
	shrd	ebx,ecx,4
	and	al,15
	shrd	ecx,edx,4
	shrd	edx,ebp,4
	shr	ebp,4
	xor	ebp,DWORD [16+eax*4+esp]
	mov	al,BYTE [edi*1+esp]
	shl	al,4
	xor	ebx,DWORD [8+eax*1+esi]
	xor	ecx,DWORD [12+eax*1+esi]
	xor	edx,DWORD [eax*1+esi]
	xor	ebp,DWORD [4+eax*1+esi]
	jmp	NEAR L$003x86_loop
align	16
L$004x86_break:
	bswap	ebx
	bswap	ecx
	bswap	edx
	bswap	ebp
	mov	edi,DWORD [112+esp]
	lea	edi,[16+edi]
	cmp	edi,DWORD [116+esp]
	mov	DWORD [112+esp],edi
	jb	NEAR L$002x86_outer_loop
	mov	edi,DWORD [104+esp]
	mov	DWORD [12+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [4+edi],edx
	mov	DWORD [edi],ebp
	add	esp,84
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_gcm_gmult_4bit_mmx
align	16
_gcm_gmult_4bit_mmx:
L$_gcm_gmult_4bit_mmx_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	call	L$005pic_point
L$005pic_point:
	pop	eax
	lea	eax,[(L$rem_4bit-L$005pic_point)+eax]
	movzx	ebx,BYTE [15+edi]
	xor	ecx,ecx
	mov	edx,ebx
	mov	cl,dl
	mov	ebp,14
	shl	cl,4
	and	edx,240
	movq	mm0,[8+ecx*1+esi]
	movq	mm1,[ecx*1+esi]
	movd	ebx,mm0
	jmp	NEAR L$006mmx_loop
align	16
L$006mmx_loop:
	psrlq	mm0,4
	and	ebx,15
	movq	mm2,mm1
	psrlq	mm1,4
	pxor	mm0,[8+edx*1+esi]
	mov	cl,BYTE [ebp*1+edi]
	psllq	mm2,60
	pxor	mm1,[ebx*8+eax]
	dec	ebp
	movd	ebx,mm0
	pxor	mm1,[edx*1+esi]
	mov	edx,ecx
	pxor	mm0,mm2
	js	NEAR L$007mmx_break
	shl	cl,4
	and	ebx,15
	psrlq	mm0,4
	and	edx,240
	movq	mm2,mm1
	psrlq	mm1,4
	pxor	mm0,[8+ecx*1+esi]
	psllq	mm2,60
	pxor	mm1,[ebx*8+eax]
	movd	ebx,mm0
	pxor	mm1,[ecx*1+esi]
	pxor	mm0,mm2
	jmp	NEAR L$006mmx_loop
align	16
L$007mmx_break:
	shl	cl,4
	and	ebx,15
	psrlq	mm0,4
	and	edx,240
	movq	mm2,mm1
	psrlq	mm1,4
	pxor	mm0,[8+ecx*1+esi]
	psllq	mm2,60
	pxor	mm1,[ebx*8+eax]
	movd	ebx,mm0
	pxor	mm1,[ecx*1+esi]
	pxor	mm0,mm2
	psrlq	mm0,4
	and	ebx,15
	movq	mm2,mm1
	psrlq	mm1,4
	pxor	mm0,[8+edx*1+esi]
	psllq	mm2,60
	pxor	mm1,[ebx*8+eax]
	movd	ebx,mm0
	pxor	mm1,[edx*1+esi]
	pxor	mm0,mm2
	psrlq	mm0,32
	movd	edx,mm1
	psrlq	mm1,32
	movd	ecx,mm0
	movd	ebp,mm1
	bswap	ebx
	bswap	edx
	bswap	ecx
	bswap	ebp
	emms
	mov	DWORD [12+edi],ebx
	mov	DWORD [4+edi],edx
	mov	DWORD [8+edi],ecx
	mov	DWORD [edi],ebp
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_gcm_ghash_4bit_mmx
align	16
_gcm_ghash_4bit_mmx:
L$_gcm_ghash_4bit_mmx_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	eax,DWORD [20+esp]
	mov	ebx,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	mov	edx,DWORD [32+esp]
	mov	ebp,esp
	call	L$008pic_point
L$008pic_point:
	pop	esi
	lea	esi,[(L$rem_8bit-L$008pic_point)+esi]
	sub	esp,544
	and	esp,-64
	sub	esp,16
	add	edx,ecx
	mov	DWORD [544+esp],eax
	mov	DWORD [552+esp],edx
	mov	DWORD [556+esp],ebp
	add	ebx,128
	lea	edi,[144+esp]
	lea	ebp,[400+esp]
	mov	edx,DWORD [ebx-120]
	movq	mm0,[ebx-120]
	movq	mm3,[ebx-128]
	shl	edx,4
	mov	BYTE [esp],dl
	mov	edx,DWORD [ebx-104]
	movq	mm2,[ebx-104]
	movq	mm5,[ebx-112]
	movq	[edi-128],mm0
	psrlq	mm0,4
	movq	[edi],mm3
	movq	mm7,mm3
	psrlq	mm3,4
	shl	edx,4
	mov	BYTE [1+esp],dl
	mov	edx,DWORD [ebx-88]
	movq	mm1,[ebx-88]
	psllq	mm7,60
	movq	mm4,[ebx-96]
	por	mm0,mm7
	movq	[edi-120],mm2
	psrlq	mm2,4
	movq	[8+edi],mm5
	movq	mm6,mm5
	movq	[ebp-128],mm0
	psrlq	mm5,4
	movq	[ebp],mm3
	shl	edx,4
	mov	BYTE [2+esp],dl
	mov	edx,DWORD [ebx-72]
	movq	mm0,[ebx-72]
	psllq	mm6,60
	movq	mm3,[ebx-80]
	por	mm2,mm6
	movq	[edi-112],mm1
	psrlq	mm1,4
	movq	[16+edi],mm4
	movq	mm7,mm4
	movq	[ebp-120],mm2
	psrlq	mm4,4
	movq	[8+ebp],mm5
	shl	edx,4
	mov	BYTE [3+esp],dl
	mov	edx,DWORD [ebx-56]
	movq	mm2,[ebx-56]
	psllq	mm7,60
	movq	mm5,[ebx-64]
	por	mm1,mm7
	movq	[edi-104],mm0
	psrlq	mm0,4
	movq	[24+edi],mm3
	movq	mm6,mm3
	movq	[ebp-112],mm1
	psrlq	mm3,4
	movq	[16+ebp],mm4
	shl	edx,4
	mov	BYTE [4+esp],dl
	mov	edx,DWORD [ebx-40]
	movq	mm1,[ebx-40]
	psllq	mm6,60
	movq	mm4,[ebx-48]
	por	mm0,mm6
	movq	[edi-96],mm2
	psrlq	mm2,4
	movq	[32+edi],mm5
	movq	mm7,mm5
	movq	[ebp-104],mm0
	psrlq	mm5,4
	movq	[24+ebp],mm3
	shl	edx,4
	mov	BYTE [5+esp],dl
	mov	edx,DWORD [ebx-24]
	movq	mm0,[ebx-24]
	psllq	mm7,60
	movq	mm3,[ebx-32]
	por	mm2,mm7
	movq	[edi-88],mm1
	psrlq	mm1,4
	movq	[40+edi],mm4
	movq	mm6,mm4
	movq	[ebp-96],mm2
	psrlq	mm4,4
	movq	[32+ebp],mm5
	shl	edx,4
	mov	BYTE [6+esp],dl
	mov	edx,DWORD [ebx-8]
	movq	mm2,[ebx-8]
	psllq	mm6,60
	movq	mm5,[ebx-16]
	por	mm1,mm6
	movq	[edi-80],mm0
	psrlq	mm0,4
	movq	[48+edi],mm3
	movq	mm7,mm3
	movq	[ebp-88],mm1
	psrlq	mm3,4
	movq	[40+ebp],mm4
	shl	edx,4
	mov	BYTE [7+esp],dl
	mov	edx,DWORD [8+ebx]
	movq	mm1,[8+ebx]
	psllq	mm7,60
	movq	mm4,[ebx]
	por	mm0,mm7
	movq	[edi-72],mm2
	psrlq	mm2,4
	movq	[56+edi],mm5
	movq	mm6,mm5
	movq	[ebp-80],mm0
	psrlq	mm5,4
	movq	[48+ebp],mm3
	shl	edx,4
	mov	BYTE [8+esp],dl
	mov	edx,DWORD [24+ebx]
	movq	mm0,[24+ebx]
	psllq	mm6,60
	movq	mm3,[16+ebx]
	por	mm2,mm6
	movq	[edi-64],mm1
	psrlq	mm1,4
	movq	[64+edi],mm4
	movq	mm7,mm4
	movq	[ebp-72],mm2
	psrlq	mm4,4
	movq	[56+ebp],mm5
	shl	edx,4
	mov	BYTE [9+esp],dl
	mov	edx,DWORD [40+ebx]
	movq	mm2,[40+ebx]
	psllq	mm7,60
	movq	mm5,[32+ebx]
	por	mm1,mm7
	movq	[edi-56],mm0
	psrlq	mm0,4
	movq	[72+edi],mm3
	movq	mm6,mm3
	movq	[ebp-64],mm1
	psrlq	mm3,4
	movq	[64+ebp],mm4
	shl	edx,4
	mov	BYTE [10+esp],dl
	mov	edx,DWORD [56+ebx]
	movq	mm1,[56+ebx]
	psllq	mm6,60
	movq	mm4,[48+ebx]
	por	mm0,mm6
	movq	[edi-48],mm2
	psrlq	mm2,4
	movq	[80+edi],mm5
	movq	mm7,mm5
	movq	[ebp-56],mm0
	psrlq	mm5,4
	movq	[72+ebp],mm3
	shl	edx,4
	mov	BYTE [11+esp],dl
	mov	edx,DWORD [72+ebx]
	movq	mm0,[72+ebx]
	psllq	mm7,60
	movq	mm3,[64+ebx]
	por	mm2,mm7
	movq	[edi-40],mm1
	psrlq	mm1,4
	movq	[88+edi],mm4
	movq	mm6,mm4
	movq	[ebp-48],mm2
	psrlq	mm4,4
	movq	[80+ebp],mm5
	shl	edx,4
	mov	BYTE [12+esp],dl
	mov	edx,DWORD [88+ebx]
	movq	mm2,[88+ebx]
	psllq	mm6,60
	movq	mm5,[80+ebx]
	por	mm1,mm6
	movq	[edi-32],mm0
	psrlq	mm0,4
	movq	[96+edi],mm3
	movq	mm7,mm3
	movq	[ebp-40],mm1
	psrlq	mm3,4
	movq	[88+ebp],mm4
	shl	edx,4
	mov	BYTE [13+esp],dl
	mov	edx,DWORD [104+ebx]
	movq	mm1,[104+ebx]
	psllq	mm7,60
	movq	mm4,[96+ebx]
	por	mm0,mm7
	movq	[edi-24],mm2
	psrlq	mm2,4
	movq	[104+edi],mm5
	movq	mm6,mm5
	movq	[ebp-32],mm0
	psrlq	mm5,4
	movq	[96+ebp],mm3
	shl	edx,4
	mov	BYTE [14+esp],dl
	mov	edx,DWORD [120+ebx]
	movq	mm0,[120+ebx]
	psllq	mm6,60
	movq	mm3,[112+ebx]
	por	mm2,mm6
	movq	[edi-16],mm1
	psrlq	mm1,4
	movq	[112+edi],mm4
	movq	mm7,mm4
	movq	[ebp-24],mm2
	psrlq	mm4,4
	movq	[104+ebp],mm5
	shl	edx,4
	mov	BYTE [15+esp],dl
	psllq	mm7,60
	por	mm1,mm7
	movq	[edi-8],mm0
	psrlq	mm0,4
	movq	[120+edi],mm3
	movq	mm6,mm3
	movq	[ebp-16],mm1
	psrlq	mm3,4
	movq	[112+ebp],mm4
	psllq	mm6,60
	por	mm0,mm6
	movq	[ebp-8],mm0
	movq	[120+ebp],mm3
	movq	mm6,[eax]
	mov	ebx,DWORD [8+eax]
	mov	edx,DWORD [12+eax]
align	16
L$009outer:
	xor	edx,DWORD [12+ecx]
	xor	ebx,DWORD [8+ecx]
	pxor	mm6,[ecx]
	lea	ecx,[16+ecx]
	mov	DWORD [536+esp],ebx
	movq	[528+esp],mm6
	mov	DWORD [548+esp],ecx
	xor	eax,eax
	rol	edx,8
	mov	al,dl
	mov	ebp,eax
	and	al,15
	shr	ebp,4
	pxor	mm0,mm0
	rol	edx,8
	pxor	mm1,mm1
	pxor	mm2,mm2
	movq	mm7,[16+eax*8+esp]
	movq	mm6,[144+eax*8+esp]
	mov	al,dl
	movd	ebx,mm7
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	shr	edi,4
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	mov	al,dl
	movd	ecx,mm7
	movzx	ebx,bl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	ebp,eax
	psrlq	mm6,8
	pxor	mm7,[272+edi*8+esp]
	and	al,15
	psllq	mm3,56
	shr	ebp,4
	pinsrw	mm2,WORD [ebx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+edi*8+esp]
	xor	cl,BYTE [edi*1+esp]
	mov	al,dl
	mov	edx,DWORD [536+esp]
	movd	ebx,mm7
	movzx	ecx,cl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm2
	shr	edi,4
	pinsrw	mm1,WORD [ecx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	mov	al,dl
	movd	ecx,mm7
	movzx	ebx,bl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	ebp,eax
	psrlq	mm6,8
	pxor	mm7,[272+edi*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm1
	shr	ebp,4
	pinsrw	mm0,WORD [ebx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+edi*8+esp]
	xor	cl,BYTE [edi*1+esp]
	mov	al,dl
	movd	ebx,mm7
	movzx	ecx,cl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm0
	shr	edi,4
	pinsrw	mm2,WORD [ecx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	mov	al,dl
	movd	ecx,mm7
	movzx	ebx,bl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	ebp,eax
	psrlq	mm6,8
	pxor	mm7,[272+edi*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm2
	shr	ebp,4
	pinsrw	mm1,WORD [ebx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+edi*8+esp]
	xor	cl,BYTE [edi*1+esp]
	mov	al,dl
	mov	edx,DWORD [532+esp]
	movd	ebx,mm7
	movzx	ecx,cl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm1
	shr	edi,4
	pinsrw	mm0,WORD [ecx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	mov	al,dl
	movd	ecx,mm7
	movzx	ebx,bl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	ebp,eax
	psrlq	mm6,8
	pxor	mm7,[272+edi*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm0
	shr	ebp,4
	pinsrw	mm2,WORD [ebx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+edi*8+esp]
	xor	cl,BYTE [edi*1+esp]
	mov	al,dl
	movd	ebx,mm7
	movzx	ecx,cl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm2
	shr	edi,4
	pinsrw	mm1,WORD [ecx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	mov	al,dl
	movd	ecx,mm7
	movzx	ebx,bl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	ebp,eax
	psrlq	mm6,8
	pxor	mm7,[272+edi*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm1
	shr	ebp,4
	pinsrw	mm0,WORD [ebx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+edi*8+esp]
	xor	cl,BYTE [edi*1+esp]
	mov	al,dl
	mov	edx,DWORD [528+esp]
	movd	ebx,mm7
	movzx	ecx,cl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm0
	shr	edi,4
	pinsrw	mm2,WORD [ecx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	mov	al,dl
	movd	ecx,mm7
	movzx	ebx,bl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	ebp,eax
	psrlq	mm6,8
	pxor	mm7,[272+edi*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm2
	shr	ebp,4
	pinsrw	mm1,WORD [ebx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+edi*8+esp]
	xor	cl,BYTE [edi*1+esp]
	mov	al,dl
	movd	ebx,mm7
	movzx	ecx,cl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm1
	shr	edi,4
	pinsrw	mm0,WORD [ecx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	mov	al,dl
	movd	ecx,mm7
	movzx	ebx,bl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	ebp,eax
	psrlq	mm6,8
	pxor	mm7,[272+edi*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm0
	shr	ebp,4
	pinsrw	mm2,WORD [ebx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	rol	edx,8
	pxor	mm6,[144+eax*8+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+edi*8+esp]
	xor	cl,BYTE [edi*1+esp]
	mov	al,dl
	mov	edx,DWORD [524+esp]
	movd	ebx,mm7
	movzx	ecx,cl
	psrlq	mm7,8
	movq	mm3,mm6
	mov	edi,eax
	psrlq	mm6,8
	pxor	mm7,[272+ebp*8+esp]
	and	al,15
	psllq	mm3,56
	pxor	mm6,mm2
	shr	edi,4
	pinsrw	mm1,WORD [ecx*2+esi],2
	pxor	mm7,[16+eax*8+esp]
	pxor	mm6,[144+eax*8+esp]
	xor	bl,BYTE [ebp*1+esp]
	pxor	mm7,mm3
	pxor	mm6,[400+ebp*8+esp]
	movzx	ebx,bl
	pxor	mm2,mm2
	psllq	mm1,4
	movd	ecx,mm7
	psrlq	mm7,4
	movq	mm3,mm6
	psrlq	mm6,4
	shl	ecx,4
	pxor	mm7,[16+edi*8+esp]
	psllq	mm3,60
	movzx	ecx,cl
	pxor	mm7,mm3
	pxor	mm6,[144+edi*8+esp]
	pinsrw	mm0,WORD [ebx*2+esi],2
	pxor	mm6,mm1
	movd	edx,mm7
	pinsrw	mm2,WORD [ecx*2+esi],3
	psllq	mm0,12
	pxor	mm6,mm0
	psrlq	mm7,32
	pxor	mm6,mm2
	mov	ecx,DWORD [548+esp]
	movd	ebx,mm7
	movq	mm3,mm6
	psllw	mm6,8
	psrlw	mm3,8
	por	mm6,mm3
	bswap	edx
	pshufw	mm6,mm6,27
	bswap	ebx
	cmp	ecx,DWORD [552+esp]
	jne	NEAR L$009outer
	mov	eax,DWORD [544+esp]
	mov	DWORD [12+eax],edx
	mov	DWORD [8+eax],ebx
	movq	[eax],mm6
	mov	esp,DWORD [556+esp]
	emms
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_gcm_init_clmul
align	16
_gcm_init_clmul:
L$_gcm_init_clmul_begin:
	mov	edx,DWORD [4+esp]
	mov	eax,DWORD [8+esp]
	call	L$010pic
L$010pic:
	pop	ecx
	lea	ecx,[(L$bswap-L$010pic)+ecx]
	movdqu	xmm2,[eax]
	pshufd	xmm2,xmm2,78
	pshufd	xmm4,xmm2,255
	movdqa	xmm3,xmm2
	psllq	xmm2,1
	pxor	xmm5,xmm5
	psrlq	xmm3,63
	pcmpgtd	xmm5,xmm4
	pslldq	xmm3,8
	por	xmm2,xmm3
	pand	xmm5,[16+ecx]
	pxor	xmm2,xmm5
	movdqa	xmm0,xmm2
	movdqa	xmm1,xmm0
	pshufd	xmm3,xmm0,78
	pshufd	xmm4,xmm2,78
	pxor	xmm3,xmm0
	pxor	xmm4,xmm2
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,220,0
	xorps	xmm3,xmm0
	xorps	xmm3,xmm1
	movdqa	xmm4,xmm3
	psrldq	xmm3,8
	pslldq	xmm4,8
	pxor	xmm1,xmm3
	pxor	xmm0,xmm4
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
	pshufd	xmm3,xmm2,78
	pshufd	xmm4,xmm0,78
	pxor	xmm3,xmm2
	movdqu	[edx],xmm2
	pxor	xmm4,xmm0
	movdqu	[16+edx],xmm0
db	102,15,58,15,227,8
	movdqu	[32+edx],xmm4
	ret
global	_gcm_gmult_clmul
align	16
_gcm_gmult_clmul:
L$_gcm_gmult_clmul_begin:
	mov	eax,DWORD [4+esp]
	mov	edx,DWORD [8+esp]
	call	L$011pic
L$011pic:
	pop	ecx
	lea	ecx,[(L$bswap-L$011pic)+ecx]
	movdqu	xmm0,[eax]
	movdqa	xmm5,[ecx]
	movups	xmm2,[edx]
db	102,15,56,0,197
	movups	xmm4,[32+edx]
	movdqa	xmm1,xmm0
	pshufd	xmm3,xmm0,78
	pxor	xmm3,xmm0
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,220,0
	xorps	xmm3,xmm0
	xorps	xmm3,xmm1
	movdqa	xmm4,xmm3
	psrldq	xmm3,8
	pslldq	xmm4,8
	pxor	xmm1,xmm3
	pxor	xmm0,xmm4
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
db	102,15,56,0,197
	movdqu	[eax],xmm0
	ret
global	_gcm_ghash_clmul
align	16
_gcm_ghash_clmul:
L$_gcm_ghash_clmul_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	eax,DWORD [20+esp]
	mov	edx,DWORD [24+esp]
	mov	esi,DWORD [28+esp]
	mov	ebx,DWORD [32+esp]
	call	L$012pic
L$012pic:
	pop	ecx
	lea	ecx,[(L$bswap-L$012pic)+ecx]
	movdqu	xmm0,[eax]
	movdqa	xmm5,[ecx]
	movdqu	xmm2,[edx]
db	102,15,56,0,197
	sub	ebx,16
	jz	NEAR L$013odd_tail
	movdqu	xmm3,[esi]
	movdqu	xmm6,[16+esi]
db	102,15,56,0,221
db	102,15,56,0,245
	movdqu	xmm5,[32+edx]
	pxor	xmm0,xmm3
	pshufd	xmm3,xmm6,78
	movdqa	xmm7,xmm6
	pxor	xmm3,xmm6
	lea	esi,[32+esi]
db	102,15,58,68,242,0
db	102,15,58,68,250,17
db	102,15,58,68,221,0
	movups	xmm2,[16+edx]
	nop
	sub	ebx,32
	jbe	NEAR L$014even_tail
	jmp	NEAR L$015mod_loop
align	32
L$015mod_loop:
	pshufd	xmm4,xmm0,78
	movdqa	xmm1,xmm0
	pxor	xmm4,xmm0
	nop
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,229,16
	movups	xmm2,[edx]
	xorps	xmm0,xmm6
	movdqa	xmm5,[ecx]
	xorps	xmm1,xmm7
	movdqu	xmm7,[esi]
	pxor	xmm3,xmm0
	movdqu	xmm6,[16+esi]
	pxor	xmm3,xmm1
db	102,15,56,0,253
	pxor	xmm4,xmm3
	movdqa	xmm3,xmm4
	psrldq	xmm4,8
	pslldq	xmm3,8
	pxor	xmm1,xmm4
	pxor	xmm0,xmm3
db	102,15,56,0,245
	pxor	xmm1,xmm7
	movdqa	xmm7,xmm6
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
db	102,15,58,68,242,0
	movups	xmm5,[32+edx]
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	pshufd	xmm3,xmm7,78
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm3,xmm7
	pxor	xmm1,xmm4
db	102,15,58,68,250,17
	movups	xmm2,[16+edx]
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
db	102,15,58,68,221,0
	lea	esi,[32+esi]
	sub	ebx,32
	ja	NEAR L$015mod_loop
L$014even_tail:
	pshufd	xmm4,xmm0,78
	movdqa	xmm1,xmm0
	pxor	xmm4,xmm0
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,229,16
	movdqa	xmm5,[ecx]
	xorps	xmm0,xmm6
	xorps	xmm1,xmm7
	pxor	xmm3,xmm0
	pxor	xmm3,xmm1
	pxor	xmm4,xmm3
	movdqa	xmm3,xmm4
	psrldq	xmm4,8
	pslldq	xmm3,8
	pxor	xmm1,xmm4
	pxor	xmm0,xmm3
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
	test	ebx,ebx
	jnz	NEAR L$016done
	movups	xmm2,[edx]
L$013odd_tail:
	movdqu	xmm3,[esi]
db	102,15,56,0,221
	pxor	xmm0,xmm3
	movdqa	xmm1,xmm0
	pshufd	xmm3,xmm0,78
	pshufd	xmm4,xmm2,78
	pxor	xmm3,xmm0
	pxor	xmm4,xmm2
db	102,15,58,68,194,0
db	102,15,58,68,202,17
db	102,15,58,68,220,0
	xorps	xmm3,xmm0
	xorps	xmm3,xmm1
	movdqa	xmm4,xmm3
	psrldq	xmm3,8
	pslldq	xmm4,8
	pxor	xmm1,xmm3
	pxor	xmm0,xmm4
	movdqa	xmm4,xmm0
	movdqa	xmm3,xmm0
	psllq	xmm0,5
	pxor	xmm3,xmm0
	psllq	xmm0,1
	pxor	xmm0,xmm3
	psllq	xmm0,57
	movdqa	xmm3,xmm0
	pslldq	xmm0,8
	psrldq	xmm3,8
	pxor	xmm0,xmm4
	pxor	xmm1,xmm3
	movdqa	xmm4,xmm0
	psrlq	xmm0,1
	pxor	xmm1,xmm4
	pxor	xmm4,xmm0
	psrlq	xmm0,5
	pxor	xmm0,xmm4
	psrlq	xmm0,1
	pxor	xmm0,xmm1
L$016done:
db	102,15,56,0,197
	movdqu	[eax],xmm0
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$bswap:
db	15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
db	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194
align	64
L$rem_8bit:
dw	0,450,900,582,1800,1738,1164,1358
dw	3600,4050,3476,3158,2328,2266,2716,2910
dw	7200,7650,8100,7782,6952,6890,6316,6510
dw	4656,5106,4532,4214,5432,5370,5820,6014
dw	14400,14722,15300,14854,16200,16010,15564,15630
dw	13904,14226,13780,13334,12632,12442,13020,13086
dw	9312,9634,10212,9766,9064,8874,8428,8494
dw	10864,11186,10740,10294,11640,11450,12028,12094
dw	28800,28994,29444,29382,30600,30282,29708,30158
dw	32400,32594,32020,31958,31128,30810,31260,31710
dw	27808,28002,28452,28390,27560,27242,26668,27118
dw	25264,25458,24884,24822,26040,25722,26172,26622
dw	18624,18690,19268,19078,20424,19978,19532,19854
dw	18128,18194,17748,17558,16856,16410,16988,17310
dw	21728,21794,22372,22182,21480,21034,20588,20910
dw	23280,23346,22900,22710,24056,23610,24188,24510
dw	57600,57538,57988,58182,58888,59338,58764,58446
dw	61200,61138,60564,60758,59416,59866,60316,59998
dw	64800,64738,65188,65382,64040,64490,63916,63598
dw	62256,62194,61620,61814,62520,62970,63420,63102
dw	55616,55426,56004,56070,56904,57226,56780,56334
dw	55120,54930,54484,54550,53336,53658,54236,53790
dw	50528,50338,50916,50982,49768,50090,49644,49198
dw	52080,51890,51444,51510,52344,52666,53244,52798
dw	37248,36930,37380,37830,38536,38730,38156,38094
dw	40848,40530,39956,40406,39064,39258,39708,39646
dw	36256,35938,36388,36838,35496,35690,35116,35054
dw	33712,33394,32820,33270,33976,34170,34620,34558
dw	43456,43010,43588,43910,44744,44810,44364,44174
dw	42960,42514,42068,42390,41176,41242,41820,41630
dw	46560,46114,46692,47014,45800,45866,45420,45230
dw	48112,47666,47220,47542,48376,48442,49020,48830
align	64
L$rem_4bit:
dd	0,0,0,471859200,0,943718400,0,610271232
dd	0,1887436800,0,1822425088,0,1220542464,0,1423966208
dd	0,3774873600,0,4246732800,0,3644850176,0,3311403008
dd	0,2441084928,0,2376073216,0,2847932416,0,3051356160
db	71,72,65,83,72,32,102,111,114,32,120,56,54,44,32,67
db	82,89,80,84,79,71,65,77,83,32,98,121,32,60,97,112
db	112,114,111,64,111,112,101,110,115,115,108,46,111,114,103,62
db	0
                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/poly1305/                            0000775 0000000 0000000 00000000000 14746647661 0025204 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/poly1305/poly1305-x86.asm            0000664 0000000 0000000 00000111175 14746647661 0027633 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
align	64
global	_poly1305_init
align	16
_poly1305_init:
L$_poly1305_init_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	xor	eax,eax
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],eax
	mov	DWORD [8+edi],eax
	mov	DWORD [12+edi],eax
	mov	DWORD [16+edi],eax
	mov	DWORD [20+edi],eax
	cmp	esi,0
	je	NEAR L$000nokey
	call	L$001pic_point
L$001pic_point:
	pop	ebx
	lea	eax,[(_poly1305_blocks-L$001pic_point)+ebx]
	lea	edx,[(_poly1305_emit-L$001pic_point)+ebx]
	lea	edi,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [edi]
	and	ecx,83886080
	cmp	ecx,83886080
	jne	NEAR L$002no_sse2
	lea	eax,[(__poly1305_blocks_sse2-L$001pic_point)+ebx]
	lea	edx,[(__poly1305_emit_sse2-L$001pic_point)+ebx]
	mov	ecx,DWORD [8+edi]
	test	ecx,32
	jz	NEAR L$002no_sse2
	lea	eax,[(__poly1305_blocks_avx2-L$001pic_point)+ebx]
L$002no_sse2:
	mov	edi,DWORD [20+esp]
	mov	DWORD [ebp],eax
	mov	DWORD [4+ebp],edx
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	and	eax,268435455
	and	ebx,268435452
	and	ecx,268435452
	and	edx,268435452
	mov	DWORD [24+edi],eax
	mov	DWORD [28+edi],ebx
	mov	DWORD [32+edi],ecx
	mov	DWORD [36+edi],edx
	mov	eax,1
L$000nokey:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_poly1305_blocks
align	16
_poly1305_blocks:
L$_poly1305_blocks_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
L$enter_blocks:
	and	ecx,-15
	jz	NEAR L$003nodata
	sub	esp,64
	mov	eax,DWORD [24+edi]
	mov	ebx,DWORD [28+edi]
	lea	ebp,[ecx*1+esi]
	mov	ecx,DWORD [32+edi]
	mov	edx,DWORD [36+edi]
	mov	DWORD [92+esp],ebp
	mov	ebp,esi
	mov	DWORD [36+esp],eax
	mov	eax,ebx
	shr	eax,2
	mov	DWORD [40+esp],ebx
	add	eax,ebx
	mov	ebx,ecx
	shr	ebx,2
	mov	DWORD [44+esp],ecx
	add	ebx,ecx
	mov	ecx,edx
	shr	ecx,2
	mov	DWORD [48+esp],edx
	add	ecx,edx
	mov	DWORD [52+esp],eax
	mov	DWORD [56+esp],ebx
	mov	DWORD [60+esp],ecx
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	esi,DWORD [12+edi]
	mov	edi,DWORD [16+edi]
	jmp	NEAR L$004loop
align	32
L$004loop:
	add	eax,DWORD [ebp]
	adc	ebx,DWORD [4+ebp]
	adc	ecx,DWORD [8+ebp]
	adc	esi,DWORD [12+ebp]
	lea	ebp,[16+ebp]
	adc	edi,DWORD [96+esp]
	mov	DWORD [esp],eax
	mov	DWORD [12+esp],esi
	mul	DWORD [36+esp]
	mov	DWORD [16+esp],edi
	mov	edi,eax
	mov	eax,ebx
	mov	esi,edx
	mul	DWORD [60+esp]
	add	edi,eax
	mov	eax,ecx
	adc	esi,edx
	mul	DWORD [56+esp]
	add	edi,eax
	mov	eax,DWORD [12+esp]
	adc	esi,edx
	mul	DWORD [52+esp]
	add	edi,eax
	mov	eax,DWORD [esp]
	adc	esi,edx
	mul	DWORD [40+esp]
	mov	DWORD [20+esp],edi
	xor	edi,edi
	add	esi,eax
	mov	eax,ebx
	adc	edi,edx
	mul	DWORD [36+esp]
	add	esi,eax
	mov	eax,ecx
	adc	edi,edx
	mul	DWORD [60+esp]
	add	esi,eax
	mov	eax,DWORD [12+esp]
	adc	edi,edx
	mul	DWORD [56+esp]
	add	esi,eax
	mov	eax,DWORD [16+esp]
	adc	edi,edx
	imul	eax,DWORD [52+esp]
	add	esi,eax
	mov	eax,DWORD [esp]
	adc	edi,0
	mul	DWORD [44+esp]
	mov	DWORD [24+esp],esi
	xor	esi,esi
	add	edi,eax
	mov	eax,ebx
	adc	esi,edx
	mul	DWORD [40+esp]
	add	edi,eax
	mov	eax,ecx
	adc	esi,edx
	mul	DWORD [36+esp]
	add	edi,eax
	mov	eax,DWORD [12+esp]
	adc	esi,edx
	mul	DWORD [60+esp]
	add	edi,eax
	mov	eax,DWORD [16+esp]
	adc	esi,edx
	imul	eax,DWORD [56+esp]
	add	edi,eax
	mov	eax,DWORD [esp]
	adc	esi,0
	mul	DWORD [48+esp]
	mov	DWORD [28+esp],edi
	xor	edi,edi
	add	esi,eax
	mov	eax,ebx
	adc	edi,edx
	mul	DWORD [44+esp]
	add	esi,eax
	mov	eax,ecx
	adc	edi,edx
	mul	DWORD [40+esp]
	add	esi,eax
	mov	eax,DWORD [12+esp]
	adc	edi,edx
	mul	DWORD [36+esp]
	add	esi,eax
	mov	ecx,DWORD [16+esp]
	adc	edi,edx
	mov	edx,ecx
	imul	ecx,DWORD [60+esp]
	add	esi,ecx
	mov	eax,DWORD [20+esp]
	adc	edi,0
	imul	edx,DWORD [36+esp]
	add	edx,edi
	mov	ebx,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	mov	edi,edx
	shr	edx,2
	and	edi,3
	lea	edx,[edx*4+edx]
	add	eax,edx
	adc	ebx,0
	adc	ecx,0
	adc	esi,0
	adc	edi,0
	cmp	ebp,DWORD [92+esp]
	jne	NEAR L$004loop
	mov	edx,DWORD [84+esp]
	add	esp,64
	mov	DWORD [edx],eax
	mov	DWORD [4+edx],ebx
	mov	DWORD [8+edx],ecx
	mov	DWORD [12+edx],esi
	mov	DWORD [16+edx],edi
L$003nodata:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_poly1305_emit
align	16
_poly1305_emit:
L$_poly1305_emit_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	ebp,DWORD [20+esp]
L$enter_emit:
	mov	edi,DWORD [24+esp]
	mov	eax,DWORD [ebp]
	mov	ebx,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	mov	esi,DWORD [16+ebp]
	add	eax,5
	adc	ebx,0
	adc	ecx,0
	adc	edx,0
	adc	esi,0
	shr	esi,2
	neg	esi
	and	eax,esi
	and	ebx,esi
	and	ecx,esi
	and	edx,esi
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	not	esi
	mov	eax,DWORD [ebp]
	mov	ebx,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	mov	ebp,DWORD [28+esp]
	and	eax,esi
	and	ebx,esi
	and	ecx,esi
	and	edx,esi
	or	eax,DWORD [edi]
	or	ebx,DWORD [4+edi]
	or	ecx,DWORD [8+edi]
	or	edx,DWORD [12+edi]
	add	eax,DWORD [ebp]
	adc	ebx,DWORD [4+ebp]
	adc	ecx,DWORD [8+ebp]
	adc	edx,DWORD [12+ebp]
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ebx
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
align	16
__poly1305_init_sse2:
	movdqu	xmm4,[24+edi]
	lea	edi,[48+edi]
	mov	ebp,esp
	sub	esp,224
	and	esp,-16
	movq	xmm7,[64+ebx]
	movdqa	xmm0,xmm4
	movdqa	xmm1,xmm4
	movdqa	xmm2,xmm4
	pand	xmm0,xmm7
	psrlq	xmm1,26
	psrldq	xmm2,6
	pand	xmm1,xmm7
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	psrldq	xmm4,13
	lea	edx,[144+esp]
	mov	ecx,2
L$005square:
	movdqa	[esp],xmm0
	movdqa	[16+esp],xmm1
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	movdqa	xmm6,xmm1
	movdqa	xmm5,xmm2
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm1
	paddd	xmm5,xmm2
	movdqa	[80+esp],xmm6
	movdqa	[96+esp],xmm5
	movdqa	xmm6,xmm3
	movdqa	xmm5,xmm4
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm3
	paddd	xmm5,xmm4
	movdqa	[112+esp],xmm6
	movdqa	[128+esp],xmm5
	pshufd	xmm6,xmm0,68
	movdqa	xmm5,xmm1
	pshufd	xmm1,xmm1,68
	pshufd	xmm2,xmm2,68
	pshufd	xmm3,xmm3,68
	pshufd	xmm4,xmm4,68
	movdqa	[edx],xmm6
	movdqa	[16+edx],xmm1
	movdqa	[32+edx],xmm2
	movdqa	[48+edx],xmm3
	movdqa	[64+edx],xmm4
	pmuludq	xmm4,xmm0
	pmuludq	xmm3,xmm0
	pmuludq	xmm2,xmm0
	pmuludq	xmm1,xmm0
	pmuludq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+edx]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+edx]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,[80+esp]
	pmuludq	xmm5,[edx]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+edx]
	movdqa	xmm7,[32+esp]
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+edx]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+edx]
	paddq	xmm4,xmm7
	movdqa	xmm7,[96+esp]
	pmuludq	xmm6,[edx]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+edx]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+edx]
	movdqa	xmm6,[48+esp]
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+edx]
	paddq	xmm0,xmm5
	movdqa	xmm5,[112+esp]
	pmuludq	xmm7,[edx]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+edx]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+edx]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+edx]
	movdqa	xmm5,[64+esp]
	paddq	xmm1,xmm6
	movdqa	xmm6,[128+esp]
	pmuludq	xmm5,[edx]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+edx]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+edx]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+edx]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
	dec	ecx
	jz	NEAR L$006square_break
	punpcklqdq	xmm0,[esp]
	punpcklqdq	xmm1,[16+esp]
	punpcklqdq	xmm2,[32+esp]
	punpcklqdq	xmm3,[48+esp]
	punpcklqdq	xmm4,[64+esp]
	jmp	NEAR L$005square
L$006square_break:
	psllq	xmm0,32
	psllq	xmm1,32
	psllq	xmm2,32
	psllq	xmm3,32
	psllq	xmm4,32
	por	xmm0,[esp]
	por	xmm1,[16+esp]
	por	xmm2,[32+esp]
	por	xmm3,[48+esp]
	por	xmm4,[64+esp]
	pshufd	xmm0,xmm0,141
	pshufd	xmm1,xmm1,141
	pshufd	xmm2,xmm2,141
	pshufd	xmm3,xmm3,141
	pshufd	xmm4,xmm4,141
	movdqu	[edi],xmm0
	movdqu	[16+edi],xmm1
	movdqu	[32+edi],xmm2
	movdqu	[48+edi],xmm3
	movdqu	[64+edi],xmm4
	movdqa	xmm6,xmm1
	movdqa	xmm5,xmm2
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm1
	paddd	xmm5,xmm2
	movdqu	[80+edi],xmm6
	movdqu	[96+edi],xmm5
	movdqa	xmm6,xmm3
	movdqa	xmm5,xmm4
	pslld	xmm6,2
	pslld	xmm5,2
	paddd	xmm6,xmm3
	paddd	xmm5,xmm4
	movdqu	[112+edi],xmm6
	movdqu	[128+edi],xmm5
	mov	esp,ebp
	lea	edi,[edi-48]
	ret
align	32
align	16
__poly1305_blocks_sse2:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	mov	eax,DWORD [20+edi]
	and	ecx,-16
	jz	NEAR L$007nodata
	cmp	ecx,64
	jae	NEAR L$008enter_sse2
	test	eax,eax
	jz	NEAR L$enter_blocks
align	16
L$008enter_sse2:
	call	L$009pic_point
L$009pic_point:
	pop	ebx
	lea	ebx,[(L$const_sse2-L$009pic_point)+ebx]
	test	eax,eax
	jnz	NEAR L$010base2_26
	call	__poly1305_init_sse2
	mov	eax,DWORD [edi]
	mov	ecx,DWORD [3+edi]
	mov	edx,DWORD [6+edi]
	mov	esi,DWORD [9+edi]
	mov	ebp,DWORD [13+edi]
	mov	DWORD [20+edi],1
	shr	ecx,2
	and	eax,67108863
	shr	edx,4
	and	ecx,67108863
	shr	esi,6
	and	edx,67108863
	movd	xmm0,eax
	movd	xmm1,ecx
	movd	xmm2,edx
	movd	xmm3,esi
	movd	xmm4,ebp
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	jmp	NEAR L$011base2_32
align	16
L$010base2_26:
	movd	xmm0,DWORD [edi]
	movd	xmm1,DWORD [4+edi]
	movd	xmm2,DWORD [8+edi]
	movd	xmm3,DWORD [12+edi]
	movd	xmm4,DWORD [16+edi]
	movdqa	xmm7,[64+ebx]
L$011base2_32:
	mov	eax,DWORD [32+esp]
	mov	ebp,esp
	sub	esp,528
	and	esp,-16
	lea	edi,[48+edi]
	shl	eax,24
	test	ecx,31
	jz	NEAR L$012even
	movdqu	xmm6,[esi]
	lea	esi,[16+esi]
	movdqa	xmm5,xmm6
	pand	xmm6,xmm7
	paddd	xmm0,xmm6
	movdqa	xmm6,xmm5
	psrlq	xmm5,26
	psrldq	xmm6,6
	pand	xmm5,xmm7
	paddd	xmm1,xmm5
	movdqa	xmm5,xmm6
	psrlq	xmm6,4
	pand	xmm6,xmm7
	paddd	xmm2,xmm6
	movdqa	xmm6,xmm5
	psrlq	xmm5,30
	pand	xmm5,xmm7
	psrldq	xmm6,7
	paddd	xmm3,xmm5
	movd	xmm5,eax
	paddd	xmm4,xmm6
	movd	xmm6,DWORD [12+edi]
	paddd	xmm4,xmm5
	movdqa	[esp],xmm0
	movdqa	[16+esp],xmm1
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	pmuludq	xmm0,xmm6
	pmuludq	xmm1,xmm6
	pmuludq	xmm2,xmm6
	movd	xmm5,DWORD [28+edi]
	pmuludq	xmm3,xmm6
	pmuludq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+esp]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	movd	xmm6,DWORD [92+edi]
	pmuludq	xmm5,[esp]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+esp]
	movd	xmm7,DWORD [44+edi]
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+esp]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+esp]
	paddq	xmm4,xmm7
	movd	xmm7,DWORD [108+edi]
	pmuludq	xmm6,[esp]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+esp]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+esp]
	movd	xmm6,DWORD [60+edi]
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+esp]
	paddq	xmm0,xmm5
	movd	xmm5,DWORD [124+edi]
	pmuludq	xmm7,[esp]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+esp]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+esp]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+esp]
	movd	xmm5,DWORD [76+edi]
	paddq	xmm1,xmm6
	movd	xmm6,DWORD [140+edi]
	pmuludq	xmm5,[esp]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+esp]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+esp]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
	sub	ecx,16
	jz	NEAR L$013done
L$012even:
	lea	edx,[384+esp]
	lea	eax,[esi-32]
	sub	ecx,64
	movdqu	xmm5,[edi]
	pshufd	xmm6,xmm5,68
	cmovb	esi,eax
	pshufd	xmm5,xmm5,238
	movdqa	[edx],xmm6
	lea	eax,[160+esp]
	movdqu	xmm6,[16+edi]
	movdqa	[edx-144],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[16+edx],xmm5
	movdqu	xmm5,[32+edi]
	movdqa	[edx-128],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[32+edx],xmm6
	movdqu	xmm6,[48+edi]
	movdqa	[edx-112],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[48+edx],xmm5
	movdqu	xmm5,[64+edi]
	movdqa	[edx-96],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[64+edx],xmm6
	movdqu	xmm6,[80+edi]
	movdqa	[edx-80],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[80+edx],xmm5
	movdqu	xmm5,[96+edi]
	movdqa	[edx-64],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[96+edx],xmm6
	movdqu	xmm6,[112+edi]
	movdqa	[edx-48],xmm5
	pshufd	xmm5,xmm6,68
	pshufd	xmm6,xmm6,238
	movdqa	[112+edx],xmm5
	movdqu	xmm5,[128+edi]
	movdqa	[edx-32],xmm6
	pshufd	xmm6,xmm5,68
	pshufd	xmm5,xmm5,238
	movdqa	[128+edx],xmm6
	movdqa	[edx-16],xmm5
	movdqu	xmm5,[32+esi]
	movdqu	xmm6,[48+esi]
	lea	esi,[32+esi]
	movdqa	[112+esp],xmm2
	movdqa	[128+esp],xmm3
	movdqa	[144+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	movdqa	[80+esp],xmm0
	movdqa	[96+esp],xmm1
	jbe	NEAR L$014skip_loop
	jmp	NEAR L$015loop
align	32
L$015loop:
	movdqa	xmm7,[edx-144]
	movdqa	[16+eax],xmm6
	movdqa	[32+eax],xmm2
	movdqa	[48+eax],xmm3
	movdqa	[64+eax],xmm4
	movdqa	xmm1,xmm5
	pmuludq	xmm5,xmm7
	movdqa	xmm0,xmm6
	pmuludq	xmm6,xmm7
	pmuludq	xmm2,xmm7
	pmuludq	xmm3,xmm7
	pmuludq	xmm4,xmm7
	pmuludq	xmm0,[edx-16]
	movdqa	xmm7,xmm1
	pmuludq	xmm1,[edx-128]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-112]
	paddq	xmm1,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-96]
	paddq	xmm2,xmm7
	movdqa	xmm7,[16+eax]
	pmuludq	xmm6,[edx-80]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-128]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-112]
	paddq	xmm2,xmm7
	movdqa	xmm7,[32+eax]
	pmuludq	xmm6,[edx-96]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-32]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-16]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[edx-128]
	paddq	xmm1,xmm5
	movdqa	xmm5,[48+eax]
	pmuludq	xmm7,[edx-112]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-48]
	paddq	xmm4,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[edx-32]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-16]
	paddq	xmm1,xmm6
	movdqa	xmm6,[64+eax]
	pmuludq	xmm5,[edx-128]
	paddq	xmm2,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[edx-16]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[edx-64]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[edx-48]
	paddq	xmm0,xmm7
	movdqa	xmm7,[64+ebx]
	pmuludq	xmm6,[edx-32]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqu	xmm5,[esi-32]
	movdqu	xmm6,[esi-16]
	lea	esi,[32+esi]
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	lea	eax,[esi-32]
	sub	ecx,64
	paddd	xmm5,[80+esp]
	paddd	xmm6,[96+esp]
	paddd	xmm2,[112+esp]
	paddd	xmm3,[128+esp]
	paddd	xmm4,[144+esp]
	cmovb	esi,eax
	lea	eax,[160+esp]
	movdqa	xmm7,[edx]
	movdqa	[16+esp],xmm1
	movdqa	[16+eax],xmm6
	movdqa	[32+eax],xmm2
	movdqa	[48+eax],xmm3
	movdqa	[64+eax],xmm4
	movdqa	xmm1,xmm5
	pmuludq	xmm5,xmm7
	paddq	xmm5,xmm0
	movdqa	xmm0,xmm6
	pmuludq	xmm6,xmm7
	pmuludq	xmm2,xmm7
	pmuludq	xmm3,xmm7
	pmuludq	xmm4,xmm7
	paddq	xmm6,[16+esp]
	paddq	xmm2,[32+esp]
	paddq	xmm3,[48+esp]
	paddq	xmm4,[64+esp]
	pmuludq	xmm0,[128+edx]
	movdqa	xmm7,xmm1
	pmuludq	xmm1,[16+edx]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+edx]
	paddq	xmm1,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+edx]
	paddq	xmm2,xmm7
	movdqa	xmm7,[16+eax]
	pmuludq	xmm6,[64+edx]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+edx]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+edx]
	paddq	xmm2,xmm7
	movdqa	xmm7,[32+eax]
	pmuludq	xmm6,[48+edx]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[112+edx]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[128+edx]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+edx]
	paddq	xmm1,xmm5
	movdqa	xmm5,[48+eax]
	pmuludq	xmm7,[32+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[96+edx]
	paddq	xmm4,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[112+edx]
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[128+edx]
	paddq	xmm1,xmm6
	movdqa	xmm6,[64+eax]
	pmuludq	xmm5,[16+edx]
	paddq	xmm2,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[128+edx]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[80+edx]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[96+edx]
	paddq	xmm0,xmm7
	movdqa	xmm7,[64+ebx]
	pmuludq	xmm6,[112+edx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
	movdqu	xmm5,[32+esi]
	movdqu	xmm6,[48+esi]
	lea	esi,[32+esi]
	movdqa	[112+esp],xmm2
	movdqa	[128+esp],xmm3
	movdqa	[144+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	movdqa	[80+esp],xmm0
	movdqa	[96+esp],xmm1
	ja	NEAR L$015loop
L$014skip_loop:
	pshufd	xmm7,[edx-144],16
	add	ecx,32
	jnz	NEAR L$016long_tail
	paddd	xmm5,xmm0
	paddd	xmm6,xmm1
	paddd	xmm2,[112+esp]
	paddd	xmm3,[128+esp]
	paddd	xmm4,[144+esp]
L$016long_tail:
	movdqa	[eax],xmm5
	movdqa	[16+eax],xmm6
	movdqa	[32+eax],xmm2
	movdqa	[48+eax],xmm3
	movdqa	[64+eax],xmm4
	pmuludq	xmm5,xmm7
	pmuludq	xmm6,xmm7
	pmuludq	xmm2,xmm7
	movdqa	xmm0,xmm5
	pshufd	xmm5,[edx-128],16
	pmuludq	xmm3,xmm7
	movdqa	xmm1,xmm6
	pmuludq	xmm4,xmm7
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+eax]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+eax]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+eax]
	paddq	xmm3,xmm6
	pshufd	xmm6,[edx-64],16
	pmuludq	xmm5,[eax]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+eax]
	pshufd	xmm7,[edx-112],16
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+eax]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+eax]
	paddq	xmm4,xmm7
	pshufd	xmm7,[edx-48],16
	pmuludq	xmm6,[eax]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+eax]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+eax]
	pshufd	xmm6,[edx-96],16
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+eax]
	paddq	xmm0,xmm5
	pshufd	xmm5,[edx-32],16
	pmuludq	xmm7,[eax]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+eax]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+eax]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+eax]
	pshufd	xmm5,[edx-80],16
	paddq	xmm1,xmm6
	pshufd	xmm6,[edx-16],16
	pmuludq	xmm5,[eax]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+eax]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+eax]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+eax]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+eax]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
	jz	NEAR L$017short_tail
	movdqu	xmm5,[esi-32]
	movdqu	xmm6,[esi-16]
	lea	esi,[32+esi]
	movdqa	[32+esp],xmm2
	movdqa	[48+esp],xmm3
	movdqa	[64+esp],xmm4
	movdqa	xmm2,xmm5
	movdqa	xmm3,xmm6
	psrldq	xmm2,6
	psrldq	xmm3,6
	movdqa	xmm4,xmm5
	punpcklqdq	xmm2,xmm3
	punpckhqdq	xmm4,xmm6
	punpcklqdq	xmm5,xmm6
	movdqa	xmm3,xmm2
	psrlq	xmm2,4
	psrlq	xmm3,30
	movdqa	xmm6,xmm5
	psrlq	xmm4,40
	psrlq	xmm6,26
	pand	xmm5,xmm7
	pand	xmm6,xmm7
	pand	xmm2,xmm7
	pand	xmm3,xmm7
	por	xmm4,[ebx]
	pshufd	xmm7,[edx],16
	paddd	xmm5,[80+esp]
	paddd	xmm6,[96+esp]
	paddd	xmm2,[112+esp]
	paddd	xmm3,[128+esp]
	paddd	xmm4,[144+esp]
	movdqa	[esp],xmm5
	pmuludq	xmm5,xmm7
	movdqa	[16+esp],xmm6
	pmuludq	xmm6,xmm7
	paddq	xmm0,xmm5
	movdqa	xmm5,xmm2
	pmuludq	xmm2,xmm7
	paddq	xmm1,xmm6
	movdqa	xmm6,xmm3
	pmuludq	xmm3,xmm7
	paddq	xmm2,[32+esp]
	movdqa	[32+esp],xmm5
	pshufd	xmm5,[16+edx],16
	paddq	xmm3,[48+esp]
	movdqa	[48+esp],xmm6
	movdqa	xmm6,xmm4
	pmuludq	xmm4,xmm7
	paddq	xmm4,[64+esp]
	movdqa	[64+esp],xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[48+esp]
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[32+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	pshufd	xmm6,[80+edx],16
	pmuludq	xmm5,[esp]
	paddq	xmm2,xmm7
	pmuludq	xmm6,[64+esp]
	pshufd	xmm7,[32+edx],16
	paddq	xmm1,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[32+esp]
	paddq	xmm0,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[16+esp]
	paddq	xmm4,xmm7
	pshufd	xmm7,[96+edx],16
	pmuludq	xmm6,[esp]
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[64+esp]
	paddq	xmm2,xmm6
	pmuludq	xmm5,[48+esp]
	pshufd	xmm6,[48+edx],16
	paddq	xmm1,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[16+esp]
	paddq	xmm0,xmm5
	pshufd	xmm5,[112+edx],16
	pmuludq	xmm7,[esp]
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[64+esp]
	paddq	xmm3,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[48+esp]
	paddq	xmm2,xmm5
	pmuludq	xmm7,[32+esp]
	pshufd	xmm5,[64+edx],16
	paddq	xmm1,xmm6
	pshufd	xmm6,[128+edx],16
	pmuludq	xmm5,[esp]
	paddq	xmm0,xmm7
	movdqa	xmm7,xmm6
	pmuludq	xmm6,[64+esp]
	paddq	xmm4,xmm5
	movdqa	xmm5,xmm7
	pmuludq	xmm7,[16+esp]
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm5
	pmuludq	xmm5,[32+esp]
	paddq	xmm0,xmm7
	pmuludq	xmm6,[48+esp]
	movdqa	xmm7,[64+ebx]
	paddq	xmm1,xmm5
	paddq	xmm2,xmm6
L$017short_tail:
	pshufd	xmm6,xmm4,78
	pshufd	xmm5,xmm3,78
	paddq	xmm4,xmm6
	paddq	xmm3,xmm5
	pshufd	xmm6,xmm0,78
	pshufd	xmm5,xmm1,78
	paddq	xmm0,xmm6
	paddq	xmm1,xmm5
	pshufd	xmm6,xmm2,78
	movdqa	xmm5,xmm3
	pand	xmm3,xmm7
	psrlq	xmm5,26
	paddq	xmm2,xmm6
	paddq	xmm5,xmm4
	movdqa	xmm6,xmm0
	pand	xmm0,xmm7
	psrlq	xmm6,26
	movdqa	xmm4,xmm5
	paddq	xmm6,xmm1
	psrlq	xmm5,26
	pand	xmm4,xmm7
	movdqa	xmm1,xmm6
	psrlq	xmm6,26
	paddd	xmm0,xmm5
	psllq	xmm5,2
	paddq	xmm6,xmm2
	paddq	xmm5,xmm0
	pand	xmm1,xmm7
	movdqa	xmm2,xmm6
	psrlq	xmm6,26
	pand	xmm2,xmm7
	paddd	xmm6,xmm3
	movdqa	xmm0,xmm5
	psrlq	xmm5,26
	movdqa	xmm3,xmm6
	psrlq	xmm6,26
	pand	xmm0,xmm7
	paddd	xmm1,xmm5
	pand	xmm3,xmm7
	paddd	xmm4,xmm6
L$013done:
	movd	DWORD [edi-48],xmm0
	movd	DWORD [edi-44],xmm1
	movd	DWORD [edi-40],xmm2
	movd	DWORD [edi-36],xmm3
	movd	DWORD [edi-32],xmm4
	mov	esp,ebp
L$007nodata:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
align	16
__poly1305_emit_sse2:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	ebp,DWORD [20+esp]
	cmp	DWORD [20+ebp],0
	je	NEAR L$enter_emit
	mov	eax,DWORD [ebp]
	mov	edi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	mov	esi,DWORD [16+ebp]
	mov	ebx,edi
	shl	edi,26
	shr	ebx,6
	add	eax,edi
	mov	edi,ecx
	adc	ebx,0
	shl	edi,20
	shr	ecx,12
	add	ebx,edi
	mov	edi,edx
	adc	ecx,0
	shl	edi,14
	shr	edx,18
	add	ecx,edi
	mov	edi,esi
	adc	edx,0
	shl	edi,8
	shr	esi,24
	add	edx,edi
	adc	esi,0
	mov	edi,esi
	and	esi,3
	shr	edi,2
	lea	ebp,[edi*4+edi]
	mov	edi,DWORD [24+esp]
	add	eax,ebp
	mov	ebp,DWORD [28+esp]
	adc	ebx,0
	adc	ecx,0
	adc	edx,0
	adc	esi,0
	movd	xmm0,eax
	add	eax,5
	movd	xmm1,ebx
	adc	ebx,0
	movd	xmm2,ecx
	adc	ecx,0
	movd	xmm3,edx
	adc	edx,0
	adc	esi,0
	shr	esi,2
	neg	esi
	and	eax,esi
	and	ebx,esi
	and	ecx,esi
	and	edx,esi
	mov	DWORD [edi],eax
	movd	eax,xmm0
	mov	DWORD [4+edi],ebx
	movd	ebx,xmm1
	mov	DWORD [8+edi],ecx
	movd	ecx,xmm2
	mov	DWORD [12+edi],edx
	movd	edx,xmm3
	not	esi
	and	eax,esi
	and	ebx,esi
	or	eax,DWORD [edi]
	and	ecx,esi
	or	ebx,DWORD [4+edi]
	and	edx,esi
	or	ecx,DWORD [8+edi]
	or	edx,DWORD [12+edi]
	add	eax,DWORD [ebp]
	adc	ebx,DWORD [4+ebp]
	mov	DWORD [edi],eax
	adc	ecx,DWORD [8+ebp]
	mov	DWORD [4+edi],ebx
	adc	edx,DWORD [12+ebp]
	mov	DWORD [8+edi],ecx
	mov	DWORD [12+edi],edx
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
align	16
__poly1305_init_avx2:
	vmovdqu	xmm4,[24+edi]
	lea	edi,[48+edi]
	mov	ebp,esp
	sub	esp,224
	and	esp,-16
	vmovdqa	xmm7,[64+ebx]
	vpand	xmm0,xmm4,xmm7
	vpsrlq	xmm1,xmm4,26
	vpsrldq	xmm3,xmm4,6
	vpand	xmm1,xmm1,xmm7
	vpsrlq	xmm2,xmm3,4
	vpsrlq	xmm3,xmm3,30
	vpand	xmm2,xmm2,xmm7
	vpand	xmm3,xmm3,xmm7
	vpsrldq	xmm4,xmm4,13
	lea	edx,[144+esp]
	mov	ecx,2
L$018square:
	vmovdqa	[esp],xmm0
	vmovdqa	[16+esp],xmm1
	vmovdqa	[32+esp],xmm2
	vmovdqa	[48+esp],xmm3
	vmovdqa	[64+esp],xmm4
	vpslld	xmm6,xmm1,2
	vpslld	xmm5,xmm2,2
	vpaddd	xmm6,xmm6,xmm1
	vpaddd	xmm5,xmm5,xmm2
	vmovdqa	[80+esp],xmm6
	vmovdqa	[96+esp],xmm5
	vpslld	xmm6,xmm3,2
	vpslld	xmm5,xmm4,2
	vpaddd	xmm6,xmm6,xmm3
	vpaddd	xmm5,xmm5,xmm4
	vmovdqa	[112+esp],xmm6
	vmovdqa	[128+esp],xmm5
	vpshufd	xmm5,xmm0,68
	vmovdqa	xmm6,xmm1
	vpshufd	xmm1,xmm1,68
	vpshufd	xmm2,xmm2,68
	vpshufd	xmm3,xmm3,68
	vpshufd	xmm4,xmm4,68
	vmovdqa	[edx],xmm5
	vmovdqa	[16+edx],xmm1
	vmovdqa	[32+edx],xmm2
	vmovdqa	[48+edx],xmm3
	vmovdqa	[64+edx],xmm4
	vpmuludq	xmm4,xmm4,xmm0
	vpmuludq	xmm3,xmm3,xmm0
	vpmuludq	xmm2,xmm2,xmm0
	vpmuludq	xmm1,xmm1,xmm0
	vpmuludq	xmm0,xmm5,xmm0
	vpmuludq	xmm5,xmm6,[48+edx]
	vpaddq	xmm4,xmm4,xmm5
	vpmuludq	xmm7,xmm6,[32+edx]
	vpaddq	xmm3,xmm3,xmm7
	vpmuludq	xmm5,xmm6,[16+edx]
	vpaddq	xmm2,xmm2,xmm5
	vmovdqa	xmm7,[80+esp]
	vpmuludq	xmm6,xmm6,[edx]
	vpaddq	xmm1,xmm1,xmm6
	vmovdqa	xmm5,[32+esp]
	vpmuludq	xmm7,xmm7,[64+edx]
	vpaddq	xmm0,xmm0,xmm7
	vpmuludq	xmm6,xmm5,[32+edx]
	vpaddq	xmm4,xmm4,xmm6
	vpmuludq	xmm7,xmm5,[16+edx]
	vpaddq	xmm3,xmm3,xmm7
	vmovdqa	xmm6,[96+esp]
	vpmuludq	xmm5,xmm5,[edx]
	vpaddq	xmm2,xmm2,xmm5
	vpmuludq	xmm7,xmm6,[64+edx]
	vpaddq	xmm1,xmm1,xmm7
	vmovdqa	xmm5,[48+esp]
	vpmuludq	xmm6,xmm6,[48+edx]
	vpaddq	xmm0,xmm0,xmm6
	vpmuludq	xmm7,xmm5,[16+edx]
	vpaddq	xmm4,xmm4,xmm7
	vmovdqa	xmm6,[112+esp]
	vpmuludq	xmm5,xmm5,[edx]
	vpaddq	xmm3,xmm3,xmm5
	vpmuludq	xmm7,xmm6,[64+edx]
	vpaddq	xmm2,xmm2,xmm7
	vpmuludq	xmm5,xmm6,[48+edx]
	vpaddq	xmm1,xmm1,xmm5
	vmovdqa	xmm7,[64+esp]
	vpmuludq	xmm6,xmm6,[32+edx]
	vpaddq	xmm0,xmm0,xmm6
	vmovdqa	xmm5,[128+esp]
	vpmuludq	xmm7,xmm7,[edx]
	vpaddq	xmm4,xmm4,xmm7
	vpmuludq	xmm6,xmm5,[64+edx]
	vpaddq	xmm3,xmm3,xmm6
	vpmuludq	xmm7,xmm5,[16+edx]
	vpaddq	xmm0,xmm0,xmm7
	vpmuludq	xmm6,xmm5,[32+edx]
	vpaddq	xmm1,xmm1,xmm6
	vmovdqa	xmm7,[64+ebx]
	vpmuludq	xmm5,xmm5,[48+edx]
	vpaddq	xmm2,xmm2,xmm5
	vpsrlq	xmm5,xmm3,26
	vpand	xmm3,xmm3,xmm7
	vpsrlq	xmm6,xmm0,26
	vpand	xmm0,xmm0,xmm7
	vpaddq	xmm4,xmm4,xmm5
	vpaddq	xmm1,xmm1,xmm6
	vpsrlq	xmm5,xmm4,26
	vpand	xmm4,xmm4,xmm7
	vpsrlq	xmm6,xmm1,26
	vpand	xmm1,xmm1,xmm7
	vpaddq	xmm2,xmm2,xmm6
	vpaddd	xmm0,xmm0,xmm5
	vpsllq	xmm5,xmm5,2
	vpsrlq	xmm6,xmm2,26
	vpand	xmm2,xmm2,xmm7
	vpaddd	xmm0,xmm0,xmm5
	vpaddd	xmm3,xmm3,xmm6
	vpsrlq	xmm6,xmm3,26
	vpsrlq	xmm5,xmm0,26
	vpand	xmm0,xmm0,xmm7
	vpand	xmm3,xmm3,xmm7
	vpaddd	xmm1,xmm1,xmm5
	vpaddd	xmm4,xmm4,xmm6
	dec	ecx
	jz	NEAR L$019square_break
	vpunpcklqdq	xmm0,xmm0,[esp]
	vpunpcklqdq	xmm1,xmm1,[16+esp]
	vpunpcklqdq	xmm2,xmm2,[32+esp]
	vpunpcklqdq	xmm3,xmm3,[48+esp]
	vpunpcklqdq	xmm4,xmm4,[64+esp]
	jmp	NEAR L$018square
L$019square_break:
	vpsllq	xmm0,xmm0,32
	vpsllq	xmm1,xmm1,32
	vpsllq	xmm2,xmm2,32
	vpsllq	xmm3,xmm3,32
	vpsllq	xmm4,xmm4,32
	vpor	xmm0,xmm0,[esp]
	vpor	xmm1,xmm1,[16+esp]
	vpor	xmm2,xmm2,[32+esp]
	vpor	xmm3,xmm3,[48+esp]
	vpor	xmm4,xmm4,[64+esp]
	vpshufd	xmm0,xmm0,141
	vpshufd	xmm1,xmm1,141
	vpshufd	xmm2,xmm2,141
	vpshufd	xmm3,xmm3,141
	vpshufd	xmm4,xmm4,141
	vmovdqu	[edi],xmm0
	vmovdqu	[16+edi],xmm1
	vmovdqu	[32+edi],xmm2
	vmovdqu	[48+edi],xmm3
	vmovdqu	[64+edi],xmm4
	vpslld	xmm6,xmm1,2
	vpslld	xmm5,xmm2,2
	vpaddd	xmm6,xmm6,xmm1
	vpaddd	xmm5,xmm5,xmm2
	vmovdqu	[80+edi],xmm6
	vmovdqu	[96+edi],xmm5
	vpslld	xmm6,xmm3,2
	vpslld	xmm5,xmm4,2
	vpaddd	xmm6,xmm6,xmm3
	vpaddd	xmm5,xmm5,xmm4
	vmovdqu	[112+edi],xmm6
	vmovdqu	[128+edi],xmm5
	mov	esp,ebp
	lea	edi,[edi-48]
	ret
align	32
align	16
__poly1305_blocks_avx2:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	mov	eax,DWORD [20+edi]
	and	ecx,-16
	jz	NEAR L$020nodata
	cmp	ecx,64
	jae	NEAR L$021enter_avx2
	test	eax,eax
	jz	NEAR L$enter_blocks
L$021enter_avx2:
	vzeroupper
	call	L$022pic_point
L$022pic_point:
	pop	ebx
	lea	ebx,[(L$const_sse2-L$022pic_point)+ebx]
	test	eax,eax
	jnz	NEAR L$023base2_26
	call	__poly1305_init_avx2
	mov	eax,DWORD [edi]
	mov	ecx,DWORD [3+edi]
	mov	edx,DWORD [6+edi]
	mov	esi,DWORD [9+edi]
	mov	ebp,DWORD [13+edi]
	shr	ecx,2
	and	eax,67108863
	shr	edx,4
	and	ecx,67108863
	shr	esi,6
	and	edx,67108863
	mov	DWORD [edi],eax
	mov	DWORD [4+edi],ecx
	mov	DWORD [8+edi],edx
	mov	DWORD [12+edi],esi
	mov	DWORD [16+edi],ebp
	mov	DWORD [20+edi],1
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
L$023base2_26:
	mov	eax,DWORD [32+esp]
	mov	ebp,esp
	sub	esp,448
	and	esp,-512
	vmovdqu	xmm0,[48+edi]
	lea	edx,[288+esp]
	vmovdqu	xmm1,[64+edi]
	vmovdqu	xmm2,[80+edi]
	vmovdqu	xmm3,[96+edi]
	vmovdqu	xmm4,[112+edi]
	lea	edi,[48+edi]
	vpermq	ymm0,ymm0,64
	vpermq	ymm1,ymm1,64
	vpermq	ymm2,ymm2,64
	vpermq	ymm3,ymm3,64
	vpermq	ymm4,ymm4,64
	vpshufd	ymm0,ymm0,200
	vpshufd	ymm1,ymm1,200
	vpshufd	ymm2,ymm2,200
	vpshufd	ymm3,ymm3,200
	vpshufd	ymm4,ymm4,200
	vmovdqa	[edx-128],ymm0
	vmovdqu	xmm0,[80+edi]
	vmovdqa	[edx-96],ymm1
	vmovdqu	xmm1,[96+edi]
	vmovdqa	[edx-64],ymm2
	vmovdqu	xmm2,[112+edi]
	vmovdqa	[edx-32],ymm3
	vmovdqu	xmm3,[128+edi]
	vmovdqa	[edx],ymm4
	vpermq	ymm0,ymm0,64
	vpermq	ymm1,ymm1,64
	vpermq	ymm2,ymm2,64
	vpermq	ymm3,ymm3,64
	vpshufd	ymm0,ymm0,200
	vpshufd	ymm1,ymm1,200
	vpshufd	ymm2,ymm2,200
	vpshufd	ymm3,ymm3,200
	vmovdqa	[32+edx],ymm0
	vmovd	xmm0,DWORD [edi-48]
	vmovdqa	[64+edx],ymm1
	vmovd	xmm1,DWORD [edi-44]
	vmovdqa	[96+edx],ymm2
	vmovd	xmm2,DWORD [edi-40]
	vmovdqa	[128+edx],ymm3
	vmovd	xmm3,DWORD [edi-36]
	vmovd	xmm4,DWORD [edi-32]
	vmovdqa	ymm7,[64+ebx]
	neg	eax
	test	ecx,63
	jz	NEAR L$024even
	mov	edx,ecx
	and	ecx,-64
	and	edx,63
	vmovdqu	xmm5,[esi]
	cmp	edx,32
	jb	NEAR L$025one
	vmovdqu	xmm6,[16+esi]
	je	NEAR L$026two
	vinserti128	ymm5,ymm5,[32+esi],1
	lea	esi,[48+esi]
	lea	ebx,[8+ebx]
	lea	edx,[296+esp]
	jmp	NEAR L$027tail
L$026two:
	lea	esi,[32+esi]
	lea	ebx,[16+ebx]
	lea	edx,[304+esp]
	jmp	NEAR L$027tail
L$025one:
	lea	esi,[16+esi]
	vpxor	ymm6,ymm6,ymm6
	lea	ebx,[32+eax*8+ebx]
	lea	edx,[312+esp]
	jmp	NEAR L$027tail
align	32
L$024even:
	vmovdqu	xmm5,[esi]
	vmovdqu	xmm6,[16+esi]
	vinserti128	ymm5,ymm5,[32+esi],1
	vinserti128	ymm6,ymm6,[48+esi],1
	lea	esi,[64+esi]
	sub	ecx,64
	jz	NEAR L$027tail
L$028loop:
	vmovdqa	[64+esp],ymm2
	vpsrldq	ymm2,ymm5,6
	vmovdqa	[esp],ymm0
	vpsrldq	ymm0,ymm6,6
	vmovdqa	[32+esp],ymm1
	vpunpckhqdq	ymm1,ymm5,ymm6
	vpunpcklqdq	ymm5,ymm5,ymm6
	vpunpcklqdq	ymm2,ymm2,ymm0
	vpsrlq	ymm0,ymm2,30
	vpsrlq	ymm2,ymm2,4
	vpsrlq	ymm6,ymm5,26
	vpsrlq	ymm1,ymm1,40
	vpand	ymm2,ymm2,ymm7
	vpand	ymm5,ymm5,ymm7
	vpand	ymm6,ymm6,ymm7
	vpand	ymm0,ymm0,ymm7
	vpor	ymm1,ymm1,[ebx]
	vpaddq	ymm2,ymm2,[64+esp]
	vpaddq	ymm5,ymm5,[esp]
	vpaddq	ymm6,ymm6,[32+esp]
	vpaddq	ymm0,ymm0,ymm3
	vpaddq	ymm1,ymm1,ymm4
	vpmuludq	ymm3,ymm2,[edx-96]
	vmovdqa	[32+esp],ymm6
	vpmuludq	ymm4,ymm2,[edx-64]
	vmovdqa	[96+esp],ymm0
	vpmuludq	ymm0,ymm2,[96+edx]
	vmovdqa	[128+esp],ymm1
	vpmuludq	ymm1,ymm2,[128+edx]
	vpmuludq	ymm2,ymm2,[edx-128]
	vpmuludq	ymm7,ymm5,[edx-32]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[edx]
	vpaddq	ymm4,ymm4,ymm6
	vpmuludq	ymm7,ymm5,[edx-128]
	vpaddq	ymm0,ymm0,ymm7
	vmovdqa	ymm7,[32+esp]
	vpmuludq	ymm6,ymm5,[edx-96]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[edx-64]
	vpaddq	ymm2,ymm2,ymm5
	vpmuludq	ymm6,ymm7,[edx-64]
	vpaddq	ymm3,ymm3,ymm6
	vpmuludq	ymm5,ymm7,[edx-32]
	vpaddq	ymm4,ymm4,ymm5
	vpmuludq	ymm6,ymm7,[128+edx]
	vpaddq	ymm0,ymm0,ymm6
	vmovdqa	ymm6,[96+esp]
	vpmuludq	ymm5,ymm7,[edx-128]
	vpaddq	ymm1,ymm1,ymm5
	vpmuludq	ymm7,ymm7,[edx-96]
	vpaddq	ymm2,ymm2,ymm7
	vpmuludq	ymm5,ymm6,[edx-128]
	vpaddq	ymm3,ymm3,ymm5
	vpmuludq	ymm7,ymm6,[edx-96]
	vpaddq	ymm4,ymm4,ymm7
	vpmuludq	ymm5,ymm6,[64+edx]
	vpaddq	ymm0,ymm0,ymm5
	vmovdqa	ymm5,[128+esp]
	vpmuludq	ymm7,ymm6,[96+edx]
	vpaddq	ymm1,ymm1,ymm7
	vpmuludq	ymm6,ymm6,[128+edx]
	vpaddq	ymm2,ymm2,ymm6
	vpmuludq	ymm7,ymm5,[128+edx]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[32+edx]
	vpaddq	ymm0,ymm0,ymm6
	vpmuludq	ymm7,ymm5,[edx-128]
	vpaddq	ymm4,ymm4,ymm7
	vmovdqa	ymm7,[64+ebx]
	vpmuludq	ymm6,ymm5,[64+edx]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[96+edx]
	vpaddq	ymm2,ymm2,ymm5
	vpsrlq	ymm5,ymm3,26
	vpand	ymm3,ymm3,ymm7
	vpsrlq	ymm6,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpaddq	ymm4,ymm4,ymm5
	vpaddq	ymm1,ymm1,ymm6
	vpsrlq	ymm5,ymm4,26
	vpand	ymm4,ymm4,ymm7
	vpsrlq	ymm6,ymm1,26
	vpand	ymm1,ymm1,ymm7
	vpaddq	ymm2,ymm2,ymm6
	vpaddq	ymm0,ymm0,ymm5
	vpsllq	ymm5,ymm5,2
	vpsrlq	ymm6,ymm2,26
	vpand	ymm2,ymm2,ymm7
	vpaddq	ymm0,ymm0,ymm5
	vpaddq	ymm3,ymm3,ymm6
	vpsrlq	ymm6,ymm3,26
	vpsrlq	ymm5,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpand	ymm3,ymm3,ymm7
	vpaddq	ymm1,ymm1,ymm5
	vpaddq	ymm4,ymm4,ymm6
	vmovdqu	xmm5,[esi]
	vmovdqu	xmm6,[16+esi]
	vinserti128	ymm5,ymm5,[32+esi],1
	vinserti128	ymm6,ymm6,[48+esi],1
	lea	esi,[64+esi]
	sub	ecx,64
	jnz	NEAR L$028loop
L$027tail:
	vmovdqa	[64+esp],ymm2
	vpsrldq	ymm2,ymm5,6
	vmovdqa	[esp],ymm0
	vpsrldq	ymm0,ymm6,6
	vmovdqa	[32+esp],ymm1
	vpunpckhqdq	ymm1,ymm5,ymm6
	vpunpcklqdq	ymm5,ymm5,ymm6
	vpunpcklqdq	ymm2,ymm2,ymm0
	vpsrlq	ymm0,ymm2,30
	vpsrlq	ymm2,ymm2,4
	vpsrlq	ymm6,ymm5,26
	vpsrlq	ymm1,ymm1,40
	vpand	ymm2,ymm2,ymm7
	vpand	ymm5,ymm5,ymm7
	vpand	ymm6,ymm6,ymm7
	vpand	ymm0,ymm0,ymm7
	vpor	ymm1,ymm1,[ebx]
	and	ebx,-64
	vpaddq	ymm2,ymm2,[64+esp]
	vpaddq	ymm5,ymm5,[esp]
	vpaddq	ymm6,ymm6,[32+esp]
	vpaddq	ymm0,ymm0,ymm3
	vpaddq	ymm1,ymm1,ymm4
	vpmuludq	ymm3,ymm2,[edx-92]
	vmovdqa	[32+esp],ymm6
	vpmuludq	ymm4,ymm2,[edx-60]
	vmovdqa	[96+esp],ymm0
	vpmuludq	ymm0,ymm2,[100+edx]
	vmovdqa	[128+esp],ymm1
	vpmuludq	ymm1,ymm2,[132+edx]
	vpmuludq	ymm2,ymm2,[edx-124]
	vpmuludq	ymm7,ymm5,[edx-28]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[4+edx]
	vpaddq	ymm4,ymm4,ymm6
	vpmuludq	ymm7,ymm5,[edx-124]
	vpaddq	ymm0,ymm0,ymm7
	vmovdqa	ymm7,[32+esp]
	vpmuludq	ymm6,ymm5,[edx-92]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[edx-60]
	vpaddq	ymm2,ymm2,ymm5
	vpmuludq	ymm6,ymm7,[edx-60]
	vpaddq	ymm3,ymm3,ymm6
	vpmuludq	ymm5,ymm7,[edx-28]
	vpaddq	ymm4,ymm4,ymm5
	vpmuludq	ymm6,ymm7,[132+edx]
	vpaddq	ymm0,ymm0,ymm6
	vmovdqa	ymm6,[96+esp]
	vpmuludq	ymm5,ymm7,[edx-124]
	vpaddq	ymm1,ymm1,ymm5
	vpmuludq	ymm7,ymm7,[edx-92]
	vpaddq	ymm2,ymm2,ymm7
	vpmuludq	ymm5,ymm6,[edx-124]
	vpaddq	ymm3,ymm3,ymm5
	vpmuludq	ymm7,ymm6,[edx-92]
	vpaddq	ymm4,ymm4,ymm7
	vpmuludq	ymm5,ymm6,[68+edx]
	vpaddq	ymm0,ymm0,ymm5
	vmovdqa	ymm5,[128+esp]
	vpmuludq	ymm7,ymm6,[100+edx]
	vpaddq	ymm1,ymm1,ymm7
	vpmuludq	ymm6,ymm6,[132+edx]
	vpaddq	ymm2,ymm2,ymm6
	vpmuludq	ymm7,ymm5,[132+edx]
	vpaddq	ymm3,ymm3,ymm7
	vpmuludq	ymm6,ymm5,[36+edx]
	vpaddq	ymm0,ymm0,ymm6
	vpmuludq	ymm7,ymm5,[edx-124]
	vpaddq	ymm4,ymm4,ymm7
	vmovdqa	ymm7,[64+ebx]
	vpmuludq	ymm6,ymm5,[68+edx]
	vpaddq	ymm1,ymm1,ymm6
	vpmuludq	ymm5,ymm5,[100+edx]
	vpaddq	ymm2,ymm2,ymm5
	vpsrldq	ymm5,ymm4,8
	vpsrldq	ymm6,ymm3,8
	vpaddq	ymm4,ymm4,ymm5
	vpsrldq	ymm5,ymm0,8
	vpaddq	ymm3,ymm3,ymm6
	vpsrldq	ymm6,ymm1,8
	vpaddq	ymm0,ymm0,ymm5
	vpsrldq	ymm5,ymm2,8
	vpaddq	ymm1,ymm1,ymm6
	vpermq	ymm6,ymm4,2
	vpaddq	ymm2,ymm2,ymm5
	vpermq	ymm5,ymm3,2
	vpaddq	ymm4,ymm4,ymm6
	vpermq	ymm6,ymm0,2
	vpaddq	ymm3,ymm3,ymm5
	vpermq	ymm5,ymm1,2
	vpaddq	ymm0,ymm0,ymm6
	vpermq	ymm6,ymm2,2
	vpaddq	ymm1,ymm1,ymm5
	vpaddq	ymm2,ymm2,ymm6
	vpsrlq	ymm5,ymm3,26
	vpand	ymm3,ymm3,ymm7
	vpsrlq	ymm6,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpaddq	ymm4,ymm4,ymm5
	vpaddq	ymm1,ymm1,ymm6
	vpsrlq	ymm5,ymm4,26
	vpand	ymm4,ymm4,ymm7
	vpsrlq	ymm6,ymm1,26
	vpand	ymm1,ymm1,ymm7
	vpaddq	ymm2,ymm2,ymm6
	vpaddq	ymm0,ymm0,ymm5
	vpsllq	ymm5,ymm5,2
	vpsrlq	ymm6,ymm2,26
	vpand	ymm2,ymm2,ymm7
	vpaddq	ymm0,ymm0,ymm5
	vpaddq	ymm3,ymm3,ymm6
	vpsrlq	ymm6,ymm3,26
	vpsrlq	ymm5,ymm0,26
	vpand	ymm0,ymm0,ymm7
	vpand	ymm3,ymm3,ymm7
	vpaddq	ymm1,ymm1,ymm5
	vpaddq	ymm4,ymm4,ymm6
	cmp	ecx,0
	je	NEAR L$029done
	vpshufd	xmm0,xmm0,252
	lea	edx,[288+esp]
	vpshufd	xmm1,xmm1,252
	vpshufd	xmm2,xmm2,252
	vpshufd	xmm3,xmm3,252
	vpshufd	xmm4,xmm4,252
	jmp	NEAR L$024even
align	16
L$029done:
	vmovd	DWORD [edi-48],xmm0
	vmovd	DWORD [edi-44],xmm1
	vmovd	DWORD [edi-40],xmm2
	vmovd	DWORD [edi-36],xmm3
	vmovd	DWORD [edi-32],xmm4
	vzeroupper
	mov	esp,ebp
L$020nodata:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$const_sse2:
dd	16777216,0,16777216,0,16777216,0,16777216,0
dd	0,0,0,0,0,0,0,0
dd	67108863,0,67108863,0,67108863,0,67108863,0
dd	268435455,268435452,268435452,268435452
db	80,111,108,121,49,51,48,53,32,102,111,114,32,120,56,54
db	44,32,67,82,89,80,84,79,71,65,77,83,32,98,121,32
db	60,97,112,112,114,111,64,111,112,101,110,115,115,108,46,111
db	114,103,62,0
align	4
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/rc4/                                 0000775 0000000 0000000 00000000000 14746647661 0024400 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/rc4/rc4-586.asm                      0000664 0000000 0000000 00000015515 14746647661 0026121 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_RC4
align	16
_RC4:
L$_RC4_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	edx,DWORD [24+esp]
	mov	esi,DWORD [28+esp]
	mov	ebp,DWORD [32+esp]
	xor	eax,eax
	xor	ebx,ebx
	cmp	edx,0
	je	NEAR L$000abort
	mov	al,BYTE [edi]
	mov	bl,BYTE [4+edi]
	add	edi,8
	lea	ecx,[edx*1+esi]
	sub	ebp,esi
	mov	DWORD [24+esp],ecx
	inc	al
	cmp	DWORD [256+edi],-1
	je	NEAR L$001RC4_CHAR
	mov	ecx,DWORD [eax*4+edi]
	and	edx,-4
	jz	NEAR L$002loop1
	mov	DWORD [32+esp],ebp
	test	edx,-8
	jz	NEAR L$003go4loop4
	lea	ebp,[_OPENSSL_ia32cap_P]
	bt	DWORD [ebp],26
	jnc	NEAR L$003go4loop4
	mov	ebp,DWORD [32+esp]
	and	edx,-8
	lea	edx,[edx*1+esi-8]
	mov	DWORD [edi-4],edx
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	movq	mm0,[esi]
	mov	ecx,DWORD [eax*4+edi]
	movd	mm2,DWORD [edx*4+edi]
	jmp	NEAR L$004loop_mmx_enter
align	16
L$005loop_mmx:
	add	bl,cl
	psllq	mm1,56
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	movq	mm0,[esi]
	movq	[esi*1+ebp-8],mm2
	mov	ecx,DWORD [eax*4+edi]
	movd	mm2,DWORD [edx*4+edi]
L$004loop_mmx_enter:
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm0
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,8
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,16
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,24
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,32
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,40
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	add	bl,cl
	psllq	mm1,48
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	inc	eax
	add	edx,ecx
	movzx	eax,al
	movzx	edx,dl
	pxor	mm2,mm1
	mov	ecx,DWORD [eax*4+edi]
	movd	mm1,DWORD [edx*4+edi]
	mov	edx,ebx
	xor	ebx,ebx
	mov	bl,dl
	cmp	esi,DWORD [edi-4]
	lea	esi,[8+esi]
	jb	NEAR L$005loop_mmx
	psllq	mm1,56
	pxor	mm2,mm1
	movq	[esi*1+ebp-8],mm2
	emms
	cmp	esi,DWORD [24+esp]
	je	NEAR L$006done
	jmp	NEAR L$002loop1
align	16
L$003go4loop4:
	lea	edx,[edx*1+esi-4]
	mov	DWORD [28+esp],edx
L$007loop4:
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	mov	ecx,DWORD [eax*4+edi]
	mov	ebp,DWORD [edx*4+edi]
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	ror	ebp,8
	mov	ecx,DWORD [eax*4+edi]
	or	ebp,DWORD [edx*4+edi]
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	ror	ebp,8
	mov	ecx,DWORD [eax*4+edi]
	or	ebp,DWORD [edx*4+edi]
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	ror	ebp,8
	mov	ecx,DWORD [32+esp]
	or	ebp,DWORD [edx*4+edi]
	ror	ebp,8
	xor	ebp,DWORD [esi]
	cmp	esi,DWORD [28+esp]
	mov	DWORD [esi*1+ecx],ebp
	lea	esi,[4+esi]
	mov	ecx,DWORD [eax*4+edi]
	jb	NEAR L$007loop4
	cmp	esi,DWORD [24+esp]
	je	NEAR L$006done
	mov	ebp,DWORD [32+esp]
align	16
L$002loop1:
	add	bl,cl
	mov	edx,DWORD [ebx*4+edi]
	mov	DWORD [ebx*4+edi],ecx
	mov	DWORD [eax*4+edi],edx
	add	edx,ecx
	inc	al
	and	edx,255
	mov	edx,DWORD [edx*4+edi]
	xor	dl,BYTE [esi]
	lea	esi,[1+esi]
	mov	ecx,DWORD [eax*4+edi]
	cmp	esi,DWORD [24+esp]
	mov	BYTE [esi*1+ebp-1],dl
	jb	NEAR L$002loop1
	jmp	NEAR L$006done
align	16
L$001RC4_CHAR:
	movzx	ecx,BYTE [eax*1+edi]
L$008cloop1:
	add	bl,cl
	movzx	edx,BYTE [ebx*1+edi]
	mov	BYTE [ebx*1+edi],cl
	mov	BYTE [eax*1+edi],dl
	add	dl,cl
	movzx	edx,BYTE [edx*1+edi]
	add	al,1
	xor	dl,BYTE [esi]
	lea	esi,[1+esi]
	movzx	ecx,BYTE [eax*1+edi]
	cmp	esi,DWORD [24+esp]
	mov	BYTE [esi*1+ebp-1],dl
	jb	NEAR L$008cloop1
L$006done:
	dec	al
	mov	DWORD [edi-4],ebx
	mov	BYTE [edi-8],al
L$000abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_RC4_set_key
align	16
_RC4_set_key:
L$_RC4_set_key_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	ebp,DWORD [24+esp]
	mov	esi,DWORD [28+esp]
	lea	edx,[_OPENSSL_ia32cap_P]
	lea	edi,[8+edi]
	lea	esi,[ebp*1+esi]
	neg	ebp
	xor	eax,eax
	mov	DWORD [edi-4],ebp
	bt	DWORD [edx],20
	jc	NEAR L$009c1stloop
align	16
L$010w1stloop:
	mov	DWORD [eax*4+edi],eax
	add	al,1
	jnc	NEAR L$010w1stloop
	xor	ecx,ecx
	xor	edx,edx
align	16
L$011w2ndloop:
	mov	eax,DWORD [ecx*4+edi]
	add	dl,BYTE [ebp*1+esi]
	add	dl,al
	add	ebp,1
	mov	ebx,DWORD [edx*4+edi]
	jnz	NEAR L$012wnowrap
	mov	ebp,DWORD [edi-4]
L$012wnowrap:
	mov	DWORD [edx*4+edi],eax
	mov	DWORD [ecx*4+edi],ebx
	add	cl,1
	jnc	NEAR L$011w2ndloop
	jmp	NEAR L$013exit
align	16
L$009c1stloop:
	mov	BYTE [eax*1+edi],al
	add	al,1
	jnc	NEAR L$009c1stloop
	xor	ecx,ecx
	xor	edx,edx
	xor	ebx,ebx
align	16
L$014c2ndloop:
	mov	al,BYTE [ecx*1+edi]
	add	dl,BYTE [ebp*1+esi]
	add	dl,al
	add	ebp,1
	mov	bl,BYTE [edx*1+edi]
	jnz	NEAR L$015cnowrap
	mov	ebp,DWORD [edi-4]
L$015cnowrap:
	mov	BYTE [edx*1+edi],al
	mov	BYTE [ecx*1+edi],bl
	add	cl,1
	jnc	NEAR L$014c2ndloop
	mov	DWORD [256+edi],-1
L$013exit:
	xor	eax,eax
	mov	DWORD [edi-8],eax
	mov	DWORD [edi-4],eax
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_RC4_options
align	16
_RC4_options:
L$_RC4_options_begin:
	call	L$016pic_point
L$016pic_point:
	pop	eax
	lea	eax,[(L$017opts-L$016pic_point)+eax]
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	edx,DWORD [edx]
	bt	edx,20
	jc	NEAR L$0181xchar
	bt	edx,26
	jnc	NEAR L$019ret
	add	eax,25
	ret
L$0181xchar:
	add	eax,12
L$019ret:
	ret
align	64
L$017opts:
db	114,99,52,40,52,120,44,105,110,116,41,0
db	114,99,52,40,49,120,44,99,104,97,114,41,0
db	114,99,52,40,56,120,44,109,109,120,41,0
db	82,67,52,32,102,111,114,32,120,56,54,44,32,67,82,89
db	80,84,79,71,65,77,83,32,98,121,32,60,97,112,112,114
db	111,64,111,112,101,110,115,115,108,46,111,114,103,62,0
align	64
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/ripemd/                              0000775 0000000 0000000 00000000000 14746647661 0025170 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/ripemd/rmd-586.asm                   0000664 0000000 0000000 00000070306 14746647661 0027002 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_ripemd160_block_asm_data_order
align	16
_ripemd160_block_asm_data_order:
L$_ripemd160_block_asm_data_order_begin:
	mov	edx,DWORD [4+esp]
	mov	eax,DWORD [8+esp]
	push	esi
	mov	ecx,DWORD [edx]
	push	edi
	mov	esi,DWORD [4+edx]
	push	ebp
	mov	edi,DWORD [8+edx]
	push	ebx
	sub	esp,108
L$000start:
	; 
	mov	ebx,DWORD [eax]
	mov	ebp,DWORD [4+eax]
	mov	DWORD [esp],ebx
	mov	DWORD [4+esp],ebp
	mov	ebx,DWORD [8+eax]
	mov	ebp,DWORD [12+eax]
	mov	DWORD [8+esp],ebx
	mov	DWORD [12+esp],ebp
	mov	ebx,DWORD [16+eax]
	mov	ebp,DWORD [20+eax]
	mov	DWORD [16+esp],ebx
	mov	DWORD [20+esp],ebp
	mov	ebx,DWORD [24+eax]
	mov	ebp,DWORD [28+eax]
	mov	DWORD [24+esp],ebx
	mov	DWORD [28+esp],ebp
	mov	ebx,DWORD [32+eax]
	mov	ebp,DWORD [36+eax]
	mov	DWORD [32+esp],ebx
	mov	DWORD [36+esp],ebp
	mov	ebx,DWORD [40+eax]
	mov	ebp,DWORD [44+eax]
	mov	DWORD [40+esp],ebx
	mov	DWORD [44+esp],ebp
	mov	ebx,DWORD [48+eax]
	mov	ebp,DWORD [52+eax]
	mov	DWORD [48+esp],ebx
	mov	DWORD [52+esp],ebp
	mov	ebx,DWORD [56+eax]
	mov	ebp,DWORD [60+eax]
	mov	DWORD [56+esp],ebx
	mov	DWORD [60+esp],ebp
	mov	eax,edi
	mov	ebx,DWORD [12+edx]
	mov	ebp,DWORD [16+edx]
	; 0
	xor	eax,ebx
	mov	edx,DWORD [esp]
	xor	eax,esi
	add	ecx,edx
	rol	edi,10
	add	ecx,eax
	mov	eax,esi
	rol	ecx,11
	add	ecx,ebp
	; 1
	xor	eax,edi
	mov	edx,DWORD [4+esp]
	xor	eax,ecx
	add	ebp,eax
	mov	eax,ecx
	rol	esi,10
	add	ebp,edx
	xor	eax,esi
	rol	ebp,14
	add	ebp,ebx
	; 2
	mov	edx,DWORD [8+esp]
	xor	eax,ebp
	add	ebx,edx
	rol	ecx,10
	add	ebx,eax
	mov	eax,ebp
	rol	ebx,15
	add	ebx,edi
	; 3
	xor	eax,ecx
	mov	edx,DWORD [12+esp]
	xor	eax,ebx
	add	edi,eax
	mov	eax,ebx
	rol	ebp,10
	add	edi,edx
	xor	eax,ebp
	rol	edi,12
	add	edi,esi
	; 4
	mov	edx,DWORD [16+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,5
	add	esi,ecx
	; 5
	xor	eax,ebx
	mov	edx,DWORD [20+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,esi
	rol	edi,10
	add	ecx,edx
	xor	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 6
	mov	edx,DWORD [24+esp]
	xor	eax,ecx
	add	ebp,edx
	rol	esi,10
	add	ebp,eax
	mov	eax,ecx
	rol	ebp,7
	add	ebp,ebx
	; 7
	xor	eax,esi
	mov	edx,DWORD [28+esp]
	xor	eax,ebp
	add	ebx,eax
	mov	eax,ebp
	rol	ecx,10
	add	ebx,edx
	xor	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 8
	mov	edx,DWORD [32+esp]
	xor	eax,ebx
	add	edi,edx
	rol	ebp,10
	add	edi,eax
	mov	eax,ebx
	rol	edi,11
	add	edi,esi
	; 9
	xor	eax,ebp
	mov	edx,DWORD [36+esp]
	xor	eax,edi
	add	esi,eax
	mov	eax,edi
	rol	ebx,10
	add	esi,edx
	xor	eax,ebx
	rol	esi,13
	add	esi,ecx
	; 10
	mov	edx,DWORD [40+esp]
	xor	eax,esi
	add	ecx,edx
	rol	edi,10
	add	ecx,eax
	mov	eax,esi
	rol	ecx,14
	add	ecx,ebp
	; 11
	xor	eax,edi
	mov	edx,DWORD [44+esp]
	xor	eax,ecx
	add	ebp,eax
	mov	eax,ecx
	rol	esi,10
	add	ebp,edx
	xor	eax,esi
	rol	ebp,15
	add	ebp,ebx
	; 12
	mov	edx,DWORD [48+esp]
	xor	eax,ebp
	add	ebx,edx
	rol	ecx,10
	add	ebx,eax
	mov	eax,ebp
	rol	ebx,6
	add	ebx,edi
	; 13
	xor	eax,ecx
	mov	edx,DWORD [52+esp]
	xor	eax,ebx
	add	edi,eax
	mov	eax,ebx
	rol	ebp,10
	add	edi,edx
	xor	eax,ebp
	rol	edi,7
	add	edi,esi
	; 14
	mov	edx,DWORD [56+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,9
	add	esi,ecx
	; 15
	xor	eax,ebx
	mov	edx,DWORD [60+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,-1
	rol	edi,10
	add	ecx,edx
	mov	edx,DWORD [28+esp]
	rol	ecx,8
	add	ecx,ebp
	; 16
	add	ebp,edx
	mov	edx,esi
	sub	eax,ecx
	and	edx,ecx
	and	eax,edi
	or	edx,eax
	mov	eax,DWORD [16+esp]
	rol	esi,10
	lea	ebp,[1518500249+edx*1+ebp]
	mov	edx,-1
	rol	ebp,7
	add	ebp,ebx
	; 17
	add	ebx,eax
	mov	eax,ecx
	sub	edx,ebp
	and	eax,ebp
	and	edx,esi
	or	eax,edx
	mov	edx,DWORD [52+esp]
	rol	ecx,10
	lea	ebx,[1518500249+eax*1+ebx]
	mov	eax,-1
	rol	ebx,6
	add	ebx,edi
	; 18
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	ebp,10
	lea	edi,[1518500249+edx*1+edi]
	mov	edx,-1
	rol	edi,8
	add	edi,esi
	; 19
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [40+esp]
	rol	ebx,10
	lea	esi,[1518500249+eax*1+esi]
	mov	eax,-1
	rol	esi,13
	add	esi,ecx
	; 20
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	edi,10
	lea	ecx,[1518500249+edx*1+ecx]
	mov	edx,-1
	rol	ecx,11
	add	ecx,ebp
	; 21
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,DWORD [60+esp]
	rol	esi,10
	lea	ebp,[1518500249+eax*1+ebp]
	mov	eax,-1
	rol	ebp,9
	add	ebp,ebx
	; 22
	add	ebx,edx
	mov	edx,ecx
	sub	eax,ebp
	and	edx,ebp
	and	eax,esi
	or	edx,eax
	mov	eax,DWORD [12+esp]
	rol	ecx,10
	lea	ebx,[1518500249+edx*1+ebx]
	mov	edx,-1
	rol	ebx,7
	add	ebx,edi
	; 23
	add	edi,eax
	mov	eax,ebp
	sub	edx,ebx
	and	eax,ebx
	and	edx,ecx
	or	eax,edx
	mov	edx,DWORD [48+esp]
	rol	ebp,10
	lea	edi,[1518500249+eax*1+edi]
	mov	eax,-1
	rol	edi,15
	add	edi,esi
	; 24
	add	esi,edx
	mov	edx,ebx
	sub	eax,edi
	and	edx,edi
	and	eax,ebp
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	ebx,10
	lea	esi,[1518500249+edx*1+esi]
	mov	edx,-1
	rol	esi,7
	add	esi,ecx
	; 25
	add	ecx,eax
	mov	eax,edi
	sub	edx,esi
	and	eax,esi
	and	edx,ebx
	or	eax,edx
	mov	edx,DWORD [36+esp]
	rol	edi,10
	lea	ecx,[1518500249+eax*1+ecx]
	mov	eax,-1
	rol	ecx,12
	add	ecx,ebp
	; 26
	add	ebp,edx
	mov	edx,esi
	sub	eax,ecx
	and	edx,ecx
	and	eax,edi
	or	edx,eax
	mov	eax,DWORD [20+esp]
	rol	esi,10
	lea	ebp,[1518500249+edx*1+ebp]
	mov	edx,-1
	rol	ebp,15
	add	ebp,ebx
	; 27
	add	ebx,eax
	mov	eax,ecx
	sub	edx,ebp
	and	eax,ebp
	and	edx,esi
	or	eax,edx
	mov	edx,DWORD [8+esp]
	rol	ecx,10
	lea	ebx,[1518500249+eax*1+ebx]
	mov	eax,-1
	rol	ebx,9
	add	ebx,edi
	; 28
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	ebp,10
	lea	edi,[1518500249+edx*1+edi]
	mov	edx,-1
	rol	edi,11
	add	edi,esi
	; 29
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [44+esp]
	rol	ebx,10
	lea	esi,[1518500249+eax*1+esi]
	mov	eax,-1
	rol	esi,7
	add	esi,ecx
	; 30
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [32+esp]
	rol	edi,10
	lea	ecx,[1518500249+edx*1+ecx]
	mov	edx,-1
	rol	ecx,13
	add	ecx,ebp
	; 31
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1518500249+eax*1+ebp]
	sub	edx,ecx
	rol	ebp,12
	add	ebp,ebx
	; 32
	mov	eax,DWORD [12+esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1859775393+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,11
	add	ebx,edi
	; 33
	mov	edx,DWORD [40+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1859775393+eax*1+edi]
	sub	edx,ebx
	rol	edi,13
	add	edi,esi
	; 34
	mov	eax,DWORD [56+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1859775393+edx*1+esi]
	sub	eax,edi
	rol	esi,6
	add	esi,ecx
	; 35
	mov	edx,DWORD [16+esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1859775393+eax*1+ecx]
	sub	edx,esi
	rol	ecx,7
	add	ecx,ebp
	; 36
	mov	eax,DWORD [36+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1859775393+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,14
	add	ebp,ebx
	; 37
	mov	edx,DWORD [60+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1859775393+eax*1+ebx]
	sub	edx,ebp
	rol	ebx,9
	add	ebx,edi
	; 38
	mov	eax,DWORD [32+esp]
	or	edx,ebx
	add	edi,eax
	xor	edx,ecx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[1859775393+edx*1+edi]
	sub	eax,ebx
	rol	edi,13
	add	edi,esi
	; 39
	mov	edx,DWORD [4+esp]
	or	eax,edi
	add	esi,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ebx,10
	lea	esi,[1859775393+eax*1+esi]
	sub	edx,edi
	rol	esi,15
	add	esi,ecx
	; 40
	mov	eax,DWORD [8+esp]
	or	edx,esi
	add	ecx,eax
	xor	edx,ebx
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1859775393+edx*1+ecx]
	sub	eax,esi
	rol	ecx,14
	add	ecx,ebp
	; 41
	mov	edx,DWORD [28+esp]
	or	eax,ecx
	add	ebp,edx
	xor	eax,edi
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1859775393+eax*1+ebp]
	sub	edx,ecx
	rol	ebp,8
	add	ebp,ebx
	; 42
	mov	eax,DWORD [esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1859775393+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,13
	add	ebx,edi
	; 43
	mov	edx,DWORD [24+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1859775393+eax*1+edi]
	sub	edx,ebx
	rol	edi,6
	add	edi,esi
	; 44
	mov	eax,DWORD [52+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1859775393+edx*1+esi]
	sub	eax,edi
	rol	esi,5
	add	esi,ecx
	; 45
	mov	edx,DWORD [44+esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1859775393+eax*1+ecx]
	sub	edx,esi
	rol	ecx,12
	add	ecx,ebp
	; 46
	mov	eax,DWORD [20+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1859775393+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,7
	add	ebp,ebx
	; 47
	mov	edx,DWORD [48+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,ecx
	rol	ebx,5
	add	ebx,edi
	; 48
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,11
	add	edi,esi
	; 49
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [36+esp]
	rol	ebx,10
	lea	esi,[2400959708+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,12
	add	esi,ecx
	; 50
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [44+esp]
	rol	edi,10
	lea	ecx,[2400959708+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,14
	add	ecx,ebp
	; 51
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [40+esp]
	rol	esi,10
	lea	ebp,[2400959708+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,15
	add	ebp,ebx
	; 52
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	ecx,10
	lea	ebx,[2400959708+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,14
	add	ebx,edi
	; 53
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [32+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,15
	add	edi,esi
	; 54
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [48+esp]
	rol	ebx,10
	lea	esi,[2400959708+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,9
	add	esi,ecx
	; 55
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [16+esp]
	rol	edi,10
	lea	ecx,[2400959708+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 56
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [52+esp]
	rol	esi,10
	lea	ebp,[2400959708+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,9
	add	ebp,ebx
	; 57
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [12+esp]
	rol	ecx,10
	lea	ebx,[2400959708+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,14
	add	ebx,edi
	; 58
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [28+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,5
	add	edi,esi
	; 59
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [60+esp]
	rol	ebx,10
	lea	esi,[2400959708+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,6
	add	esi,ecx
	; 60
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	edi,10
	lea	ecx,[2400959708+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 61
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [20+esp]
	rol	esi,10
	lea	ebp,[2400959708+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,6
	add	ebp,ebx
	; 62
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	ecx,10
	lea	ebx,[2400959708+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,5
	add	ebx,edi
	; 63
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [8+esp]
	rol	ebp,10
	lea	edi,[2400959708+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	sub	edx,ebp
	rol	edi,12
	add	edi,esi
	; 64
	mov	eax,DWORD [16+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[2840853838+edx*1+esi]
	sub	eax,ebx
	rol	esi,9
	add	esi,ecx
	; 65
	mov	edx,DWORD [esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[2840853838+eax*1+ecx]
	sub	edx,edi
	rol	ecx,15
	add	ecx,ebp
	; 66
	mov	eax,DWORD [20+esp]
	or	edx,esi
	add	ebp,eax
	xor	edx,ecx
	mov	eax,-1
	rol	esi,10
	lea	ebp,[2840853838+edx*1+ebp]
	sub	eax,esi
	rol	ebp,5
	add	ebp,ebx
	; 67
	mov	edx,DWORD [36+esp]
	or	eax,ecx
	add	ebx,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[2840853838+eax*1+ebx]
	sub	edx,ecx
	rol	ebx,11
	add	ebx,edi
	; 68
	mov	eax,DWORD [28+esp]
	or	edx,ebp
	add	edi,eax
	xor	edx,ebx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[2840853838+edx*1+edi]
	sub	eax,ebp
	rol	edi,6
	add	edi,esi
	; 69
	mov	edx,DWORD [48+esp]
	or	eax,ebx
	add	esi,edx
	xor	eax,edi
	mov	edx,-1
	rol	ebx,10
	lea	esi,[2840853838+eax*1+esi]
	sub	edx,ebx
	rol	esi,8
	add	esi,ecx
	; 70
	mov	eax,DWORD [8+esp]
	or	edx,edi
	add	ecx,eax
	xor	edx,esi
	mov	eax,-1
	rol	edi,10
	lea	ecx,[2840853838+edx*1+ecx]
	sub	eax,edi
	rol	ecx,13
	add	ecx,ebp
	; 71
	mov	edx,DWORD [40+esp]
	or	eax,esi
	add	ebp,edx
	xor	eax,ecx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[2840853838+eax*1+ebp]
	sub	edx,esi
	rol	ebp,12
	add	ebp,ebx
	; 72
	mov	eax,DWORD [56+esp]
	or	edx,ecx
	add	ebx,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[2840853838+edx*1+ebx]
	sub	eax,ecx
	rol	ebx,5
	add	ebx,edi
	; 73
	mov	edx,DWORD [4+esp]
	or	eax,ebp
	add	edi,edx
	xor	eax,ebx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[2840853838+eax*1+edi]
	sub	edx,ebp
	rol	edi,12
	add	edi,esi
	; 74
	mov	eax,DWORD [12+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[2840853838+edx*1+esi]
	sub	eax,ebx
	rol	esi,13
	add	esi,ecx
	; 75
	mov	edx,DWORD [32+esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[2840853838+eax*1+ecx]
	sub	edx,edi
	rol	ecx,14
	add	ecx,ebp
	; 76
	mov	eax,DWORD [44+esp]
	or	edx,esi
	add	ebp,eax
	xor	edx,ecx
	mov	eax,-1
	rol	esi,10
	lea	ebp,[2840853838+edx*1+ebp]
	sub	eax,esi
	rol	ebp,11
	add	ebp,ebx
	; 77
	mov	edx,DWORD [24+esp]
	or	eax,ecx
	add	ebx,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[2840853838+eax*1+ebx]
	sub	edx,ecx
	rol	ebx,8
	add	ebx,edi
	; 78
	mov	eax,DWORD [60+esp]
	or	edx,ebp
	add	edi,eax
	xor	edx,ebx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[2840853838+edx*1+edi]
	sub	eax,ebp
	rol	edi,5
	add	edi,esi
	; 79
	mov	edx,DWORD [52+esp]
	or	eax,ebx
	add	esi,edx
	xor	eax,edi
	mov	edx,DWORD [128+esp]
	rol	ebx,10
	lea	esi,[2840853838+eax*1+esi]
	mov	DWORD [64+esp],ecx
	rol	esi,6
	add	esi,ecx
	mov	ecx,DWORD [edx]
	mov	DWORD [68+esp],esi
	mov	DWORD [72+esp],edi
	mov	esi,DWORD [4+edx]
	mov	DWORD [76+esp],ebx
	mov	edi,DWORD [8+edx]
	mov	DWORD [80+esp],ebp
	mov	ebx,DWORD [12+edx]
	mov	ebp,DWORD [16+edx]
	; 80
	mov	edx,-1
	sub	edx,ebx
	mov	eax,DWORD [20+esp]
	or	edx,edi
	add	ecx,eax
	xor	edx,esi
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1352829926+edx*1+ecx]
	sub	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 81
	mov	edx,DWORD [56+esp]
	or	eax,esi
	add	ebp,edx
	xor	eax,ecx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1352829926+eax*1+ebp]
	sub	edx,esi
	rol	ebp,9
	add	ebp,ebx
	; 82
	mov	eax,DWORD [28+esp]
	or	edx,ecx
	add	ebx,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1352829926+edx*1+ebx]
	sub	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 83
	mov	edx,DWORD [esp]
	or	eax,ebp
	add	edi,edx
	xor	eax,ebx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1352829926+eax*1+edi]
	sub	edx,ebp
	rol	edi,11
	add	edi,esi
	; 84
	mov	eax,DWORD [36+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1352829926+edx*1+esi]
	sub	eax,ebx
	rol	esi,13
	add	esi,ecx
	; 85
	mov	edx,DWORD [8+esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1352829926+eax*1+ecx]
	sub	edx,edi
	rol	ecx,15
	add	ecx,ebp
	; 86
	mov	eax,DWORD [44+esp]
	or	edx,esi
	add	ebp,eax
	xor	edx,ecx
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1352829926+edx*1+ebp]
	sub	eax,esi
	rol	ebp,15
	add	ebp,ebx
	; 87
	mov	edx,DWORD [16+esp]
	or	eax,ecx
	add	ebx,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1352829926+eax*1+ebx]
	sub	edx,ecx
	rol	ebx,5
	add	ebx,edi
	; 88
	mov	eax,DWORD [52+esp]
	or	edx,ebp
	add	edi,eax
	xor	edx,ebx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[1352829926+edx*1+edi]
	sub	eax,ebp
	rol	edi,7
	add	edi,esi
	; 89
	mov	edx,DWORD [24+esp]
	or	eax,ebx
	add	esi,edx
	xor	eax,edi
	mov	edx,-1
	rol	ebx,10
	lea	esi,[1352829926+eax*1+esi]
	sub	edx,ebx
	rol	esi,7
	add	esi,ecx
	; 90
	mov	eax,DWORD [60+esp]
	or	edx,edi
	add	ecx,eax
	xor	edx,esi
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1352829926+edx*1+ecx]
	sub	eax,edi
	rol	ecx,8
	add	ecx,ebp
	; 91
	mov	edx,DWORD [32+esp]
	or	eax,esi
	add	ebp,edx
	xor	eax,ecx
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1352829926+eax*1+ebp]
	sub	edx,esi
	rol	ebp,11
	add	ebp,ebx
	; 92
	mov	eax,DWORD [4+esp]
	or	edx,ecx
	add	ebx,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1352829926+edx*1+ebx]
	sub	eax,ecx
	rol	ebx,14
	add	ebx,edi
	; 93
	mov	edx,DWORD [40+esp]
	or	eax,ebp
	add	edi,edx
	xor	eax,ebx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1352829926+eax*1+edi]
	sub	edx,ebp
	rol	edi,14
	add	edi,esi
	; 94
	mov	eax,DWORD [12+esp]
	or	edx,ebx
	add	esi,eax
	xor	edx,edi
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1352829926+edx*1+esi]
	sub	eax,ebx
	rol	esi,12
	add	esi,ecx
	; 95
	mov	edx,DWORD [48+esp]
	or	eax,edi
	add	ecx,edx
	xor	eax,esi
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1352829926+eax*1+ecx]
	mov	eax,edi
	rol	ecx,6
	add	ecx,ebp
	; 96
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,9
	add	ebp,ebx
	; 97
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [44+esp]
	rol	ecx,10
	lea	ebx,[1548603684+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,13
	add	ebx,edi
	; 98
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [12+esp]
	rol	ebp,10
	lea	edi,[1548603684+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,15
	add	edi,esi
	; 99
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [28+esp]
	rol	ebx,10
	lea	esi,[1548603684+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,7
	add	esi,ecx
	; 100
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	edi,10
	lea	ecx,[1548603684+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,12
	add	ecx,ebp
	; 101
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [52+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,8
	add	ebp,ebx
	; 102
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [20+esp]
	rol	ecx,10
	lea	ebx,[1548603684+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 103
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [40+esp]
	rol	ebp,10
	lea	edi,[1548603684+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,11
	add	edi,esi
	; 104
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	ebx,10
	lea	esi,[1548603684+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,7
	add	esi,ecx
	; 105
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [60+esp]
	rol	edi,10
	lea	ecx,[1548603684+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,7
	add	ecx,ebp
	; 106
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [32+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	mov	eax,esi
	rol	ebp,12
	add	ebp,ebx
	; 107
	sub	edx,esi
	and	eax,ebp
	and	edx,ecx
	or	edx,eax
	mov	eax,DWORD [48+esp]
	rol	ecx,10
	lea	ebx,[1548603684+edx*1+ebx]
	mov	edx,-1
	add	ebx,eax
	mov	eax,ecx
	rol	ebx,7
	add	ebx,edi
	; 108
	sub	edx,ecx
	and	eax,ebx
	and	edx,ebp
	or	edx,eax
	mov	eax,DWORD [16+esp]
	rol	ebp,10
	lea	edi,[1548603684+edx*1+edi]
	mov	edx,-1
	add	edi,eax
	mov	eax,ebp
	rol	edi,6
	add	edi,esi
	; 109
	sub	edx,ebp
	and	eax,edi
	and	edx,ebx
	or	edx,eax
	mov	eax,DWORD [36+esp]
	rol	ebx,10
	lea	esi,[1548603684+edx*1+esi]
	mov	edx,-1
	add	esi,eax
	mov	eax,ebx
	rol	esi,15
	add	esi,ecx
	; 110
	sub	edx,ebx
	and	eax,esi
	and	edx,edi
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	edi,10
	lea	ecx,[1548603684+edx*1+ecx]
	mov	edx,-1
	add	ecx,eax
	mov	eax,edi
	rol	ecx,13
	add	ecx,ebp
	; 111
	sub	edx,edi
	and	eax,ecx
	and	edx,esi
	or	edx,eax
	mov	eax,DWORD [8+esp]
	rol	esi,10
	lea	ebp,[1548603684+edx*1+ebp]
	mov	edx,-1
	add	ebp,eax
	sub	edx,ecx
	rol	ebp,11
	add	ebp,ebx
	; 112
	mov	eax,DWORD [60+esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1836072691+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,9
	add	ebx,edi
	; 113
	mov	edx,DWORD [20+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1836072691+eax*1+edi]
	sub	edx,ebx
	rol	edi,7
	add	edi,esi
	; 114
	mov	eax,DWORD [4+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1836072691+edx*1+esi]
	sub	eax,edi
	rol	esi,15
	add	esi,ecx
	; 115
	mov	edx,DWORD [12+esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1836072691+eax*1+ecx]
	sub	edx,esi
	rol	ecx,11
	add	ecx,ebp
	; 116
	mov	eax,DWORD [28+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1836072691+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,8
	add	ebp,ebx
	; 117
	mov	edx,DWORD [56+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,-1
	rol	ecx,10
	lea	ebx,[1836072691+eax*1+ebx]
	sub	edx,ebp
	rol	ebx,6
	add	ebx,edi
	; 118
	mov	eax,DWORD [24+esp]
	or	edx,ebx
	add	edi,eax
	xor	edx,ecx
	mov	eax,-1
	rol	ebp,10
	lea	edi,[1836072691+edx*1+edi]
	sub	eax,ebx
	rol	edi,6
	add	edi,esi
	; 119
	mov	edx,DWORD [36+esp]
	or	eax,edi
	add	esi,edx
	xor	eax,ebp
	mov	edx,-1
	rol	ebx,10
	lea	esi,[1836072691+eax*1+esi]
	sub	edx,edi
	rol	esi,14
	add	esi,ecx
	; 120
	mov	eax,DWORD [44+esp]
	or	edx,esi
	add	ecx,eax
	xor	edx,ebx
	mov	eax,-1
	rol	edi,10
	lea	ecx,[1836072691+edx*1+ecx]
	sub	eax,esi
	rol	ecx,12
	add	ecx,ebp
	; 121
	mov	edx,DWORD [32+esp]
	or	eax,ecx
	add	ebp,edx
	xor	eax,edi
	mov	edx,-1
	rol	esi,10
	lea	ebp,[1836072691+eax*1+ebp]
	sub	edx,ecx
	rol	ebp,13
	add	ebp,ebx
	; 122
	mov	eax,DWORD [48+esp]
	or	edx,ebp
	add	ebx,eax
	xor	edx,esi
	mov	eax,-1
	rol	ecx,10
	lea	ebx,[1836072691+edx*1+ebx]
	sub	eax,ebp
	rol	ebx,5
	add	ebx,edi
	; 123
	mov	edx,DWORD [8+esp]
	or	eax,ebx
	add	edi,edx
	xor	eax,ecx
	mov	edx,-1
	rol	ebp,10
	lea	edi,[1836072691+eax*1+edi]
	sub	edx,ebx
	rol	edi,14
	add	edi,esi
	; 124
	mov	eax,DWORD [40+esp]
	or	edx,edi
	add	esi,eax
	xor	edx,ebp
	mov	eax,-1
	rol	ebx,10
	lea	esi,[1836072691+edx*1+esi]
	sub	eax,edi
	rol	esi,13
	add	esi,ecx
	; 125
	mov	edx,DWORD [esp]
	or	eax,esi
	add	ecx,edx
	xor	eax,ebx
	mov	edx,-1
	rol	edi,10
	lea	ecx,[1836072691+eax*1+ecx]
	sub	edx,esi
	rol	ecx,13
	add	ecx,ebp
	; 126
	mov	eax,DWORD [16+esp]
	or	edx,ecx
	add	ebp,eax
	xor	edx,edi
	mov	eax,-1
	rol	esi,10
	lea	ebp,[1836072691+edx*1+ebp]
	sub	eax,ecx
	rol	ebp,7
	add	ebp,ebx
	; 127
	mov	edx,DWORD [52+esp]
	or	eax,ebp
	add	ebx,edx
	xor	eax,esi
	mov	edx,DWORD [32+esp]
	rol	ecx,10
	lea	ebx,[1836072691+eax*1+ebx]
	mov	eax,-1
	rol	ebx,5
	add	ebx,edi
	; 128
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [24+esp]
	rol	ebp,10
	lea	edi,[2053994217+edx*1+edi]
	mov	edx,-1
	rol	edi,15
	add	edi,esi
	; 129
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [16+esp]
	rol	ebx,10
	lea	esi,[2053994217+eax*1+esi]
	mov	eax,-1
	rol	esi,5
	add	esi,ecx
	; 130
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [4+esp]
	rol	edi,10
	lea	ecx,[2053994217+edx*1+ecx]
	mov	edx,-1
	rol	ecx,8
	add	ecx,ebp
	; 131
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,DWORD [12+esp]
	rol	esi,10
	lea	ebp,[2053994217+eax*1+ebp]
	mov	eax,-1
	rol	ebp,11
	add	ebp,ebx
	; 132
	add	ebx,edx
	mov	edx,ecx
	sub	eax,ebp
	and	edx,ebp
	and	eax,esi
	or	edx,eax
	mov	eax,DWORD [44+esp]
	rol	ecx,10
	lea	ebx,[2053994217+edx*1+ebx]
	mov	edx,-1
	rol	ebx,14
	add	ebx,edi
	; 133
	add	edi,eax
	mov	eax,ebp
	sub	edx,ebx
	and	eax,ebx
	and	edx,ecx
	or	eax,edx
	mov	edx,DWORD [60+esp]
	rol	ebp,10
	lea	edi,[2053994217+eax*1+edi]
	mov	eax,-1
	rol	edi,14
	add	edi,esi
	; 134
	add	esi,edx
	mov	edx,ebx
	sub	eax,edi
	and	edx,edi
	and	eax,ebp
	or	edx,eax
	mov	eax,DWORD [esp]
	rol	ebx,10
	lea	esi,[2053994217+edx*1+esi]
	mov	edx,-1
	rol	esi,6
	add	esi,ecx
	; 135
	add	ecx,eax
	mov	eax,edi
	sub	edx,esi
	and	eax,esi
	and	edx,ebx
	or	eax,edx
	mov	edx,DWORD [20+esp]
	rol	edi,10
	lea	ecx,[2053994217+eax*1+ecx]
	mov	eax,-1
	rol	ecx,14
	add	ecx,ebp
	; 136
	add	ebp,edx
	mov	edx,esi
	sub	eax,ecx
	and	edx,ecx
	and	eax,edi
	or	edx,eax
	mov	eax,DWORD [48+esp]
	rol	esi,10
	lea	ebp,[2053994217+edx*1+ebp]
	mov	edx,-1
	rol	ebp,6
	add	ebp,ebx
	; 137
	add	ebx,eax
	mov	eax,ecx
	sub	edx,ebp
	and	eax,ebp
	and	edx,esi
	or	eax,edx
	mov	edx,DWORD [8+esp]
	rol	ecx,10
	lea	ebx,[2053994217+eax*1+ebx]
	mov	eax,-1
	rol	ebx,9
	add	ebx,edi
	; 138
	add	edi,edx
	mov	edx,ebp
	sub	eax,ebx
	and	edx,ebx
	and	eax,ecx
	or	edx,eax
	mov	eax,DWORD [52+esp]
	rol	ebp,10
	lea	edi,[2053994217+edx*1+edi]
	mov	edx,-1
	rol	edi,12
	add	edi,esi
	; 139
	add	esi,eax
	mov	eax,ebx
	sub	edx,edi
	and	eax,edi
	and	edx,ebp
	or	eax,edx
	mov	edx,DWORD [36+esp]
	rol	ebx,10
	lea	esi,[2053994217+eax*1+esi]
	mov	eax,-1
	rol	esi,9
	add	esi,ecx
	; 140
	add	ecx,edx
	mov	edx,edi
	sub	eax,esi
	and	edx,esi
	and	eax,ebx
	or	edx,eax
	mov	eax,DWORD [28+esp]
	rol	edi,10
	lea	ecx,[2053994217+edx*1+ecx]
	mov	edx,-1
	rol	ecx,12
	add	ecx,ebp
	; 141
	add	ebp,eax
	mov	eax,esi
	sub	edx,ecx
	and	eax,ecx
	and	edx,edi
	or	eax,edx
	mov	edx,DWORD [40+esp]
	rol	esi,10
	lea	ebp,[2053994217+eax*1+ebp]
	mov	eax,-1
	rol	ebp,5
	add	ebp,ebx
	; 142
	add	ebx,edx
	mov	edx,ecx
	sub	eax,ebp
	and	edx,ebp
	and	eax,esi
	or	edx,eax
	mov	eax,DWORD [56+esp]
	rol	ecx,10
	lea	ebx,[2053994217+edx*1+ebx]
	mov	edx,-1
	rol	ebx,15
	add	ebx,edi
	; 143
	add	edi,eax
	mov	eax,ebp
	sub	edx,ebx
	and	eax,ebx
	and	edx,ecx
	or	edx,eax
	mov	eax,ebx
	rol	ebp,10
	lea	edi,[2053994217+edx*1+edi]
	xor	eax,ebp
	rol	edi,8
	add	edi,esi
	; 144
	mov	edx,DWORD [48+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,8
	add	esi,ecx
	; 145
	xor	eax,ebx
	mov	edx,DWORD [60+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,esi
	rol	edi,10
	add	ecx,edx
	xor	eax,edi
	rol	ecx,5
	add	ecx,ebp
	; 146
	mov	edx,DWORD [40+esp]
	xor	eax,ecx
	add	ebp,edx
	rol	esi,10
	add	ebp,eax
	mov	eax,ecx
	rol	ebp,12
	add	ebp,ebx
	; 147
	xor	eax,esi
	mov	edx,DWORD [16+esp]
	xor	eax,ebp
	add	ebx,eax
	mov	eax,ebp
	rol	ecx,10
	add	ebx,edx
	xor	eax,ecx
	rol	ebx,9
	add	ebx,edi
	; 148
	mov	edx,DWORD [4+esp]
	xor	eax,ebx
	add	edi,edx
	rol	ebp,10
	add	edi,eax
	mov	eax,ebx
	rol	edi,12
	add	edi,esi
	; 149
	xor	eax,ebp
	mov	edx,DWORD [20+esp]
	xor	eax,edi
	add	esi,eax
	mov	eax,edi
	rol	ebx,10
	add	esi,edx
	xor	eax,ebx
	rol	esi,5
	add	esi,ecx
	; 150
	mov	edx,DWORD [32+esp]
	xor	eax,esi
	add	ecx,edx
	rol	edi,10
	add	ecx,eax
	mov	eax,esi
	rol	ecx,14
	add	ecx,ebp
	; 151
	xor	eax,edi
	mov	edx,DWORD [28+esp]
	xor	eax,ecx
	add	ebp,eax
	mov	eax,ecx
	rol	esi,10
	add	ebp,edx
	xor	eax,esi
	rol	ebp,6
	add	ebp,ebx
	; 152
	mov	edx,DWORD [24+esp]
	xor	eax,ebp
	add	ebx,edx
	rol	ecx,10
	add	ebx,eax
	mov	eax,ebp
	rol	ebx,8
	add	ebx,edi
	; 153
	xor	eax,ecx
	mov	edx,DWORD [8+esp]
	xor	eax,ebx
	add	edi,eax
	mov	eax,ebx
	rol	ebp,10
	add	edi,edx
	xor	eax,ebp
	rol	edi,13
	add	edi,esi
	; 154
	mov	edx,DWORD [52+esp]
	xor	eax,edi
	add	esi,edx
	rol	ebx,10
	add	esi,eax
	mov	eax,edi
	rol	esi,6
	add	esi,ecx
	; 155
	xor	eax,ebx
	mov	edx,DWORD [56+esp]
	xor	eax,esi
	add	ecx,eax
	mov	eax,esi
	rol	edi,10
	add	ecx,edx
	xor	eax,edi
	rol	ecx,5
	add	ecx,ebp
	; 156
	mov	edx,DWORD [esp]
	xor	eax,ecx
	add	ebp,edx
	rol	esi,10
	add	ebp,eax
	mov	eax,ecx
	rol	ebp,15
	add	ebp,ebx
	; 157
	xor	eax,esi
	mov	edx,DWORD [12+esp]
	xor	eax,ebp
	add	ebx,eax
	mov	eax,ebp
	rol	ecx,10
	add	ebx,edx
	xor	eax,ecx
	rol	ebx,13
	add	ebx,edi
	; 158
	mov	edx,DWORD [36+esp]
	xor	eax,ebx
	add	edi,edx
	rol	ebp,10
	add	edi,eax
	mov	eax,ebx
	rol	edi,11
	add	edi,esi
	; 159
	xor	eax,ebp
	mov	edx,DWORD [44+esp]
	xor	eax,edi
	add	esi,eax
	rol	ebx,10
	add	esi,edx
	mov	edx,DWORD [128+esp]
	rol	esi,11
	add	esi,ecx
	mov	eax,DWORD [4+edx]
	add	ebx,eax
	mov	eax,DWORD [72+esp]
	add	ebx,eax
	mov	eax,DWORD [8+edx]
	add	ebp,eax
	mov	eax,DWORD [76+esp]
	add	ebp,eax
	mov	eax,DWORD [12+edx]
	add	ecx,eax
	mov	eax,DWORD [80+esp]
	add	ecx,eax
	mov	eax,DWORD [16+edx]
	add	esi,eax
	mov	eax,DWORD [64+esp]
	add	esi,eax
	mov	eax,DWORD [edx]
	add	edi,eax
	mov	eax,DWORD [68+esp]
	add	edi,eax
	mov	eax,DWORD [136+esp]
	mov	DWORD [edx],ebx
	mov	DWORD [4+edx],ebp
	mov	DWORD [8+edx],ecx
	sub	eax,1
	mov	DWORD [12+edx],esi
	mov	DWORD [16+edx],edi
	jle	NEAR L$001get_out
	mov	DWORD [136+esp],eax
	mov	edi,ecx
	mov	eax,DWORD [132+esp]
	mov	ecx,ebx
	add	eax,64
	mov	esi,ebp
	mov	DWORD [132+esp],eax
	jmp	NEAR L$000start
L$001get_out:
	add	esp,108
	pop	ebx
	pop	ebp
	pop	edi
	pop	esi
	ret
                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/sha/                                 0000775 0000000 0000000 00000000000 14746647661 0024463 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/sha/sha1-586.asm                     0000664 0000000 0000000 00000177230 14746647661 0026353 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_sha1_block_data_order
align	16
_sha1_block_data_order:
L$_sha1_block_data_order_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	esi,[_OPENSSL_ia32cap_P]
	lea	ebp,[(L$K_XX_XX-L$000pic_point)+ebp]
	mov	eax,DWORD [esi]
	mov	edx,DWORD [4+esi]
	test	edx,512
	jz	NEAR L$001x86
	mov	ecx,DWORD [8+esi]
	test	eax,16777216
	jz	NEAR L$001x86
	test	ecx,536870912
	jnz	NEAR L$shaext_shortcut
	and	edx,268435456
	and	eax,1073741824
	or	eax,edx
	cmp	eax,1342177280
	je	NEAR L$avx_shortcut
	jmp	NEAR L$ssse3_shortcut
align	16
L$001x86:
	mov	ebp,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	eax,DWORD [28+esp]
	sub	esp,76
	shl	eax,6
	add	eax,esi
	mov	DWORD [104+esp],eax
	mov	edi,DWORD [16+ebp]
	jmp	NEAR L$002loop
align	16
L$002loop:
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [16+esp],eax
	mov	DWORD [20+esp],ebx
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [32+esp],eax
	mov	DWORD [36+esp],ebx
	mov	DWORD [40+esp],ecx
	mov	DWORD [44+esp],edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	mov	DWORD [48+esp],eax
	mov	DWORD [52+esp],ebx
	mov	DWORD [56+esp],ecx
	mov	DWORD [60+esp],edx
	mov	DWORD [100+esp],esi
	mov	eax,DWORD [ebp]
	mov	ebx,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	mov	edx,DWORD [12+ebp]
	; 00_15 0
	mov	esi,ecx
	mov	ebp,eax
	rol	ebp,5
	xor	esi,edx
	add	ebp,edi
	mov	edi,DWORD [esp]
	and	esi,ebx
	ror	ebx,2
	xor	esi,edx
	lea	ebp,[1518500249+edi*1+ebp]
	add	ebp,esi
	; 00_15 1
	mov	edi,ebx
	mov	esi,ebp
	rol	ebp,5
	xor	edi,ecx
	add	ebp,edx
	mov	edx,DWORD [4+esp]
	and	edi,eax
	ror	eax,2
	xor	edi,ecx
	lea	ebp,[1518500249+edx*1+ebp]
	add	ebp,edi
	; 00_15 2
	mov	edx,eax
	mov	edi,ebp
	rol	ebp,5
	xor	edx,ebx
	add	ebp,ecx
	mov	ecx,DWORD [8+esp]
	and	edx,esi
	ror	esi,2
	xor	edx,ebx
	lea	ebp,[1518500249+ecx*1+ebp]
	add	ebp,edx
	; 00_15 3
	mov	ecx,esi
	mov	edx,ebp
	rol	ebp,5
	xor	ecx,eax
	add	ebp,ebx
	mov	ebx,DWORD [12+esp]
	and	ecx,edi
	ror	edi,2
	xor	ecx,eax
	lea	ebp,[1518500249+ebx*1+ebp]
	add	ebp,ecx
	; 00_15 4
	mov	ebx,edi
	mov	ecx,ebp
	rol	ebp,5
	xor	ebx,esi
	add	ebp,eax
	mov	eax,DWORD [16+esp]
	and	ebx,edx
	ror	edx,2
	xor	ebx,esi
	lea	ebp,[1518500249+eax*1+ebp]
	add	ebp,ebx
	; 00_15 5
	mov	eax,edx
	mov	ebx,ebp
	rol	ebp,5
	xor	eax,edi
	add	ebp,esi
	mov	esi,DWORD [20+esp]
	and	eax,ecx
	ror	ecx,2
	xor	eax,edi
	lea	ebp,[1518500249+esi*1+ebp]
	add	ebp,eax
	; 00_15 6
	mov	esi,ecx
	mov	eax,ebp
	rol	ebp,5
	xor	esi,edx
	add	ebp,edi
	mov	edi,DWORD [24+esp]
	and	esi,ebx
	ror	ebx,2
	xor	esi,edx
	lea	ebp,[1518500249+edi*1+ebp]
	add	ebp,esi
	; 00_15 7
	mov	edi,ebx
	mov	esi,ebp
	rol	ebp,5
	xor	edi,ecx
	add	ebp,edx
	mov	edx,DWORD [28+esp]
	and	edi,eax
	ror	eax,2
	xor	edi,ecx
	lea	ebp,[1518500249+edx*1+ebp]
	add	ebp,edi
	; 00_15 8
	mov	edx,eax
	mov	edi,ebp
	rol	ebp,5
	xor	edx,ebx
	add	ebp,ecx
	mov	ecx,DWORD [32+esp]
	and	edx,esi
	ror	esi,2
	xor	edx,ebx
	lea	ebp,[1518500249+ecx*1+ebp]
	add	ebp,edx
	; 00_15 9
	mov	ecx,esi
	mov	edx,ebp
	rol	ebp,5
	xor	ecx,eax
	add	ebp,ebx
	mov	ebx,DWORD [36+esp]
	and	ecx,edi
	ror	edi,2
	xor	ecx,eax
	lea	ebp,[1518500249+ebx*1+ebp]
	add	ebp,ecx
	; 00_15 10
	mov	ebx,edi
	mov	ecx,ebp
	rol	ebp,5
	xor	ebx,esi
	add	ebp,eax
	mov	eax,DWORD [40+esp]
	and	ebx,edx
	ror	edx,2
	xor	ebx,esi
	lea	ebp,[1518500249+eax*1+ebp]
	add	ebp,ebx
	; 00_15 11
	mov	eax,edx
	mov	ebx,ebp
	rol	ebp,5
	xor	eax,edi
	add	ebp,esi
	mov	esi,DWORD [44+esp]
	and	eax,ecx
	ror	ecx,2
	xor	eax,edi
	lea	ebp,[1518500249+esi*1+ebp]
	add	ebp,eax
	; 00_15 12
	mov	esi,ecx
	mov	eax,ebp
	rol	ebp,5
	xor	esi,edx
	add	ebp,edi
	mov	edi,DWORD [48+esp]
	and	esi,ebx
	ror	ebx,2
	xor	esi,edx
	lea	ebp,[1518500249+edi*1+ebp]
	add	ebp,esi
	; 00_15 13
	mov	edi,ebx
	mov	esi,ebp
	rol	ebp,5
	xor	edi,ecx
	add	ebp,edx
	mov	edx,DWORD [52+esp]
	and	edi,eax
	ror	eax,2
	xor	edi,ecx
	lea	ebp,[1518500249+edx*1+ebp]
	add	ebp,edi
	; 00_15 14
	mov	edx,eax
	mov	edi,ebp
	rol	ebp,5
	xor	edx,ebx
	add	ebp,ecx
	mov	ecx,DWORD [56+esp]
	and	edx,esi
	ror	esi,2
	xor	edx,ebx
	lea	ebp,[1518500249+ecx*1+ebp]
	add	ebp,edx
	; 00_15 15
	mov	ecx,esi
	mov	edx,ebp
	rol	ebp,5
	xor	ecx,eax
	add	ebp,ebx
	mov	ebx,DWORD [60+esp]
	and	ecx,edi
	ror	edi,2
	xor	ecx,eax
	lea	ebp,[1518500249+ebx*1+ebp]
	mov	ebx,DWORD [esp]
	add	ecx,ebp
	; 16_19 16
	mov	ebp,edi
	xor	ebx,DWORD [8+esp]
	xor	ebp,esi
	xor	ebx,DWORD [32+esp]
	and	ebp,edx
	xor	ebx,DWORD [52+esp]
	rol	ebx,1
	xor	ebp,esi
	add	eax,ebp
	mov	ebp,ecx
	ror	edx,2
	mov	DWORD [esp],ebx
	rol	ebp,5
	lea	ebx,[1518500249+eax*1+ebx]
	mov	eax,DWORD [4+esp]
	add	ebx,ebp
	; 16_19 17
	mov	ebp,edx
	xor	eax,DWORD [12+esp]
	xor	ebp,edi
	xor	eax,DWORD [36+esp]
	and	ebp,ecx
	xor	eax,DWORD [56+esp]
	rol	eax,1
	xor	ebp,edi
	add	esi,ebp
	mov	ebp,ebx
	ror	ecx,2
	mov	DWORD [4+esp],eax
	rol	ebp,5
	lea	eax,[1518500249+esi*1+eax]
	mov	esi,DWORD [8+esp]
	add	eax,ebp
	; 16_19 18
	mov	ebp,ecx
	xor	esi,DWORD [16+esp]
	xor	ebp,edx
	xor	esi,DWORD [40+esp]
	and	ebp,ebx
	xor	esi,DWORD [60+esp]
	rol	esi,1
	xor	ebp,edx
	add	edi,ebp
	mov	ebp,eax
	ror	ebx,2
	mov	DWORD [8+esp],esi
	rol	ebp,5
	lea	esi,[1518500249+edi*1+esi]
	mov	edi,DWORD [12+esp]
	add	esi,ebp
	; 16_19 19
	mov	ebp,ebx
	xor	edi,DWORD [20+esp]
	xor	ebp,ecx
	xor	edi,DWORD [44+esp]
	and	ebp,eax
	xor	edi,DWORD [esp]
	rol	edi,1
	xor	ebp,ecx
	add	edx,ebp
	mov	ebp,esi
	ror	eax,2
	mov	DWORD [12+esp],edi
	rol	ebp,5
	lea	edi,[1518500249+edx*1+edi]
	mov	edx,DWORD [16+esp]
	add	edi,ebp
	; 20_39 20
	mov	ebp,esi
	xor	edx,DWORD [24+esp]
	xor	ebp,eax
	xor	edx,DWORD [48+esp]
	xor	ebp,ebx
	xor	edx,DWORD [4+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [16+esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [20+esp]
	add	edx,ebp
	; 20_39 21
	mov	ebp,edi
	xor	ecx,DWORD [28+esp]
	xor	ebp,esi
	xor	ecx,DWORD [52+esp]
	xor	ebp,eax
	xor	ecx,DWORD [8+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [20+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [24+esp]
	add	ecx,ebp
	; 20_39 22
	mov	ebp,edx
	xor	ebx,DWORD [32+esp]
	xor	ebp,edi
	xor	ebx,DWORD [56+esp]
	xor	ebp,esi
	xor	ebx,DWORD [12+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [24+esp],ebx
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,DWORD [28+esp]
	add	ebx,ebp
	; 20_39 23
	mov	ebp,ecx
	xor	eax,DWORD [36+esp]
	xor	ebp,edx
	xor	eax,DWORD [60+esp]
	xor	ebp,edi
	xor	eax,DWORD [16+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [28+esp],eax
	lea	eax,[1859775393+esi*1+eax]
	mov	esi,DWORD [32+esp]
	add	eax,ebp
	; 20_39 24
	mov	ebp,ebx
	xor	esi,DWORD [40+esp]
	xor	ebp,ecx
	xor	esi,DWORD [esp]
	xor	ebp,edx
	xor	esi,DWORD [20+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [32+esp],esi
	lea	esi,[1859775393+edi*1+esi]
	mov	edi,DWORD [36+esp]
	add	esi,ebp
	; 20_39 25
	mov	ebp,eax
	xor	edi,DWORD [44+esp]
	xor	ebp,ebx
	xor	edi,DWORD [4+esp]
	xor	ebp,ecx
	xor	edi,DWORD [24+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [36+esp],edi
	lea	edi,[1859775393+edx*1+edi]
	mov	edx,DWORD [40+esp]
	add	edi,ebp
	; 20_39 26
	mov	ebp,esi
	xor	edx,DWORD [48+esp]
	xor	ebp,eax
	xor	edx,DWORD [8+esp]
	xor	ebp,ebx
	xor	edx,DWORD [28+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [40+esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [44+esp]
	add	edx,ebp
	; 20_39 27
	mov	ebp,edi
	xor	ecx,DWORD [52+esp]
	xor	ebp,esi
	xor	ecx,DWORD [12+esp]
	xor	ebp,eax
	xor	ecx,DWORD [32+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [44+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [48+esp]
	add	ecx,ebp
	; 20_39 28
	mov	ebp,edx
	xor	ebx,DWORD [56+esp]
	xor	ebp,edi
	xor	ebx,DWORD [16+esp]
	xor	ebp,esi
	xor	ebx,DWORD [36+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [48+esp],ebx
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,DWORD [52+esp]
	add	ebx,ebp
	; 20_39 29
	mov	ebp,ecx
	xor	eax,DWORD [60+esp]
	xor	ebp,edx
	xor	eax,DWORD [20+esp]
	xor	ebp,edi
	xor	eax,DWORD [40+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [52+esp],eax
	lea	eax,[1859775393+esi*1+eax]
	mov	esi,DWORD [56+esp]
	add	eax,ebp
	; 20_39 30
	mov	ebp,ebx
	xor	esi,DWORD [esp]
	xor	ebp,ecx
	xor	esi,DWORD [24+esp]
	xor	ebp,edx
	xor	esi,DWORD [44+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [56+esp],esi
	lea	esi,[1859775393+edi*1+esi]
	mov	edi,DWORD [60+esp]
	add	esi,ebp
	; 20_39 31
	mov	ebp,eax
	xor	edi,DWORD [4+esp]
	xor	ebp,ebx
	xor	edi,DWORD [28+esp]
	xor	ebp,ecx
	xor	edi,DWORD [48+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [60+esp],edi
	lea	edi,[1859775393+edx*1+edi]
	mov	edx,DWORD [esp]
	add	edi,ebp
	; 20_39 32
	mov	ebp,esi
	xor	edx,DWORD [8+esp]
	xor	ebp,eax
	xor	edx,DWORD [32+esp]
	xor	ebp,ebx
	xor	edx,DWORD [52+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [4+esp]
	add	edx,ebp
	; 20_39 33
	mov	ebp,edi
	xor	ecx,DWORD [12+esp]
	xor	ebp,esi
	xor	ecx,DWORD [36+esp]
	xor	ebp,eax
	xor	ecx,DWORD [56+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [4+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [8+esp]
	add	ecx,ebp
	; 20_39 34
	mov	ebp,edx
	xor	ebx,DWORD [16+esp]
	xor	ebp,edi
	xor	ebx,DWORD [40+esp]
	xor	ebp,esi
	xor	ebx,DWORD [60+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [8+esp],ebx
	lea	ebx,[1859775393+eax*1+ebx]
	mov	eax,DWORD [12+esp]
	add	ebx,ebp
	; 20_39 35
	mov	ebp,ecx
	xor	eax,DWORD [20+esp]
	xor	ebp,edx
	xor	eax,DWORD [44+esp]
	xor	ebp,edi
	xor	eax,DWORD [esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [12+esp],eax
	lea	eax,[1859775393+esi*1+eax]
	mov	esi,DWORD [16+esp]
	add	eax,ebp
	; 20_39 36
	mov	ebp,ebx
	xor	esi,DWORD [24+esp]
	xor	ebp,ecx
	xor	esi,DWORD [48+esp]
	xor	ebp,edx
	xor	esi,DWORD [4+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [16+esp],esi
	lea	esi,[1859775393+edi*1+esi]
	mov	edi,DWORD [20+esp]
	add	esi,ebp
	; 20_39 37
	mov	ebp,eax
	xor	edi,DWORD [28+esp]
	xor	ebp,ebx
	xor	edi,DWORD [52+esp]
	xor	ebp,ecx
	xor	edi,DWORD [8+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [20+esp],edi
	lea	edi,[1859775393+edx*1+edi]
	mov	edx,DWORD [24+esp]
	add	edi,ebp
	; 20_39 38
	mov	ebp,esi
	xor	edx,DWORD [32+esp]
	xor	ebp,eax
	xor	edx,DWORD [56+esp]
	xor	ebp,ebx
	xor	edx,DWORD [12+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [24+esp],edx
	lea	edx,[1859775393+ecx*1+edx]
	mov	ecx,DWORD [28+esp]
	add	edx,ebp
	; 20_39 39
	mov	ebp,edi
	xor	ecx,DWORD [36+esp]
	xor	ebp,esi
	xor	ecx,DWORD [60+esp]
	xor	ebp,eax
	xor	ecx,DWORD [16+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [28+esp],ecx
	lea	ecx,[1859775393+ebx*1+ecx]
	mov	ebx,DWORD [32+esp]
	add	ecx,ebp
	; 40_59 40
	mov	ebp,edi
	xor	ebx,DWORD [40+esp]
	xor	ebp,esi
	xor	ebx,DWORD [esp]
	and	ebp,edx
	xor	ebx,DWORD [20+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [32+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [36+esp]
	add	ebx,ebp
	; 40_59 41
	mov	ebp,edx
	xor	eax,DWORD [44+esp]
	xor	ebp,edi
	xor	eax,DWORD [4+esp]
	and	ebp,ecx
	xor	eax,DWORD [24+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [36+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [40+esp]
	add	eax,ebp
	; 40_59 42
	mov	ebp,ecx
	xor	esi,DWORD [48+esp]
	xor	ebp,edx
	xor	esi,DWORD [8+esp]
	and	ebp,ebx
	xor	esi,DWORD [28+esp]
	rol	esi,1
	add	ebp,edi
	ror	ebx,2
	mov	edi,eax
	rol	edi,5
	mov	DWORD [40+esp],esi
	lea	esi,[2400959708+ebp*1+esi]
	mov	ebp,ecx
	add	esi,edi
	and	ebp,edx
	mov	edi,DWORD [44+esp]
	add	esi,ebp
	; 40_59 43
	mov	ebp,ebx
	xor	edi,DWORD [52+esp]
	xor	ebp,ecx
	xor	edi,DWORD [12+esp]
	and	ebp,eax
	xor	edi,DWORD [32+esp]
	rol	edi,1
	add	ebp,edx
	ror	eax,2
	mov	edx,esi
	rol	edx,5
	mov	DWORD [44+esp],edi
	lea	edi,[2400959708+ebp*1+edi]
	mov	ebp,ebx
	add	edi,edx
	and	ebp,ecx
	mov	edx,DWORD [48+esp]
	add	edi,ebp
	; 40_59 44
	mov	ebp,eax
	xor	edx,DWORD [56+esp]
	xor	ebp,ebx
	xor	edx,DWORD [16+esp]
	and	ebp,esi
	xor	edx,DWORD [36+esp]
	rol	edx,1
	add	ebp,ecx
	ror	esi,2
	mov	ecx,edi
	rol	ecx,5
	mov	DWORD [48+esp],edx
	lea	edx,[2400959708+ebp*1+edx]
	mov	ebp,eax
	add	edx,ecx
	and	ebp,ebx
	mov	ecx,DWORD [52+esp]
	add	edx,ebp
	; 40_59 45
	mov	ebp,esi
	xor	ecx,DWORD [60+esp]
	xor	ebp,eax
	xor	ecx,DWORD [20+esp]
	and	ebp,edi
	xor	ecx,DWORD [40+esp]
	rol	ecx,1
	add	ebp,ebx
	ror	edi,2
	mov	ebx,edx
	rol	ebx,5
	mov	DWORD [52+esp],ecx
	lea	ecx,[2400959708+ebp*1+ecx]
	mov	ebp,esi
	add	ecx,ebx
	and	ebp,eax
	mov	ebx,DWORD [56+esp]
	add	ecx,ebp
	; 40_59 46
	mov	ebp,edi
	xor	ebx,DWORD [esp]
	xor	ebp,esi
	xor	ebx,DWORD [24+esp]
	and	ebp,edx
	xor	ebx,DWORD [44+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [56+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [60+esp]
	add	ebx,ebp
	; 40_59 47
	mov	ebp,edx
	xor	eax,DWORD [4+esp]
	xor	ebp,edi
	xor	eax,DWORD [28+esp]
	and	ebp,ecx
	xor	eax,DWORD [48+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [60+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [esp]
	add	eax,ebp
	; 40_59 48
	mov	ebp,ecx
	xor	esi,DWORD [8+esp]
	xor	ebp,edx
	xor	esi,DWORD [32+esp]
	and	ebp,ebx
	xor	esi,DWORD [52+esp]
	rol	esi,1
	add	ebp,edi
	ror	ebx,2
	mov	edi,eax
	rol	edi,5
	mov	DWORD [esp],esi
	lea	esi,[2400959708+ebp*1+esi]
	mov	ebp,ecx
	add	esi,edi
	and	ebp,edx
	mov	edi,DWORD [4+esp]
	add	esi,ebp
	; 40_59 49
	mov	ebp,ebx
	xor	edi,DWORD [12+esp]
	xor	ebp,ecx
	xor	edi,DWORD [36+esp]
	and	ebp,eax
	xor	edi,DWORD [56+esp]
	rol	edi,1
	add	ebp,edx
	ror	eax,2
	mov	edx,esi
	rol	edx,5
	mov	DWORD [4+esp],edi
	lea	edi,[2400959708+ebp*1+edi]
	mov	ebp,ebx
	add	edi,edx
	and	ebp,ecx
	mov	edx,DWORD [8+esp]
	add	edi,ebp
	; 40_59 50
	mov	ebp,eax
	xor	edx,DWORD [16+esp]
	xor	ebp,ebx
	xor	edx,DWORD [40+esp]
	and	ebp,esi
	xor	edx,DWORD [60+esp]
	rol	edx,1
	add	ebp,ecx
	ror	esi,2
	mov	ecx,edi
	rol	ecx,5
	mov	DWORD [8+esp],edx
	lea	edx,[2400959708+ebp*1+edx]
	mov	ebp,eax
	add	edx,ecx
	and	ebp,ebx
	mov	ecx,DWORD [12+esp]
	add	edx,ebp
	; 40_59 51
	mov	ebp,esi
	xor	ecx,DWORD [20+esp]
	xor	ebp,eax
	xor	ecx,DWORD [44+esp]
	and	ebp,edi
	xor	ecx,DWORD [esp]
	rol	ecx,1
	add	ebp,ebx
	ror	edi,2
	mov	ebx,edx
	rol	ebx,5
	mov	DWORD [12+esp],ecx
	lea	ecx,[2400959708+ebp*1+ecx]
	mov	ebp,esi
	add	ecx,ebx
	and	ebp,eax
	mov	ebx,DWORD [16+esp]
	add	ecx,ebp
	; 40_59 52
	mov	ebp,edi
	xor	ebx,DWORD [24+esp]
	xor	ebp,esi
	xor	ebx,DWORD [48+esp]
	and	ebp,edx
	xor	ebx,DWORD [4+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [16+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [20+esp]
	add	ebx,ebp
	; 40_59 53
	mov	ebp,edx
	xor	eax,DWORD [28+esp]
	xor	ebp,edi
	xor	eax,DWORD [52+esp]
	and	ebp,ecx
	xor	eax,DWORD [8+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [20+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [24+esp]
	add	eax,ebp
	; 40_59 54
	mov	ebp,ecx
	xor	esi,DWORD [32+esp]
	xor	ebp,edx
	xor	esi,DWORD [56+esp]
	and	ebp,ebx
	xor	esi,DWORD [12+esp]
	rol	esi,1
	add	ebp,edi
	ror	ebx,2
	mov	edi,eax
	rol	edi,5
	mov	DWORD [24+esp],esi
	lea	esi,[2400959708+ebp*1+esi]
	mov	ebp,ecx
	add	esi,edi
	and	ebp,edx
	mov	edi,DWORD [28+esp]
	add	esi,ebp
	; 40_59 55
	mov	ebp,ebx
	xor	edi,DWORD [36+esp]
	xor	ebp,ecx
	xor	edi,DWORD [60+esp]
	and	ebp,eax
	xor	edi,DWORD [16+esp]
	rol	edi,1
	add	ebp,edx
	ror	eax,2
	mov	edx,esi
	rol	edx,5
	mov	DWORD [28+esp],edi
	lea	edi,[2400959708+ebp*1+edi]
	mov	ebp,ebx
	add	edi,edx
	and	ebp,ecx
	mov	edx,DWORD [32+esp]
	add	edi,ebp
	; 40_59 56
	mov	ebp,eax
	xor	edx,DWORD [40+esp]
	xor	ebp,ebx
	xor	edx,DWORD [esp]
	and	ebp,esi
	xor	edx,DWORD [20+esp]
	rol	edx,1
	add	ebp,ecx
	ror	esi,2
	mov	ecx,edi
	rol	ecx,5
	mov	DWORD [32+esp],edx
	lea	edx,[2400959708+ebp*1+edx]
	mov	ebp,eax
	add	edx,ecx
	and	ebp,ebx
	mov	ecx,DWORD [36+esp]
	add	edx,ebp
	; 40_59 57
	mov	ebp,esi
	xor	ecx,DWORD [44+esp]
	xor	ebp,eax
	xor	ecx,DWORD [4+esp]
	and	ebp,edi
	xor	ecx,DWORD [24+esp]
	rol	ecx,1
	add	ebp,ebx
	ror	edi,2
	mov	ebx,edx
	rol	ebx,5
	mov	DWORD [36+esp],ecx
	lea	ecx,[2400959708+ebp*1+ecx]
	mov	ebp,esi
	add	ecx,ebx
	and	ebp,eax
	mov	ebx,DWORD [40+esp]
	add	ecx,ebp
	; 40_59 58
	mov	ebp,edi
	xor	ebx,DWORD [48+esp]
	xor	ebp,esi
	xor	ebx,DWORD [8+esp]
	and	ebp,edx
	xor	ebx,DWORD [28+esp]
	rol	ebx,1
	add	ebp,eax
	ror	edx,2
	mov	eax,ecx
	rol	eax,5
	mov	DWORD [40+esp],ebx
	lea	ebx,[2400959708+ebp*1+ebx]
	mov	ebp,edi
	add	ebx,eax
	and	ebp,esi
	mov	eax,DWORD [44+esp]
	add	ebx,ebp
	; 40_59 59
	mov	ebp,edx
	xor	eax,DWORD [52+esp]
	xor	ebp,edi
	xor	eax,DWORD [12+esp]
	and	ebp,ecx
	xor	eax,DWORD [32+esp]
	rol	eax,1
	add	ebp,esi
	ror	ecx,2
	mov	esi,ebx
	rol	esi,5
	mov	DWORD [44+esp],eax
	lea	eax,[2400959708+ebp*1+eax]
	mov	ebp,edx
	add	eax,esi
	and	ebp,edi
	mov	esi,DWORD [48+esp]
	add	eax,ebp
	; 20_39 60
	mov	ebp,ebx
	xor	esi,DWORD [56+esp]
	xor	ebp,ecx
	xor	esi,DWORD [16+esp]
	xor	ebp,edx
	xor	esi,DWORD [36+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [48+esp],esi
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [52+esp]
	add	esi,ebp
	; 20_39 61
	mov	ebp,eax
	xor	edi,DWORD [60+esp]
	xor	ebp,ebx
	xor	edi,DWORD [20+esp]
	xor	ebp,ecx
	xor	edi,DWORD [40+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [52+esp],edi
	lea	edi,[3395469782+edx*1+edi]
	mov	edx,DWORD [56+esp]
	add	edi,ebp
	; 20_39 62
	mov	ebp,esi
	xor	edx,DWORD [esp]
	xor	ebp,eax
	xor	edx,DWORD [24+esp]
	xor	ebp,ebx
	xor	edx,DWORD [44+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [56+esp],edx
	lea	edx,[3395469782+ecx*1+edx]
	mov	ecx,DWORD [60+esp]
	add	edx,ebp
	; 20_39 63
	mov	ebp,edi
	xor	ecx,DWORD [4+esp]
	xor	ebp,esi
	xor	ecx,DWORD [28+esp]
	xor	ebp,eax
	xor	ecx,DWORD [48+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [60+esp],ecx
	lea	ecx,[3395469782+ebx*1+ecx]
	mov	ebx,DWORD [esp]
	add	ecx,ebp
	; 20_39 64
	mov	ebp,edx
	xor	ebx,DWORD [8+esp]
	xor	ebp,edi
	xor	ebx,DWORD [32+esp]
	xor	ebp,esi
	xor	ebx,DWORD [52+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [esp],ebx
	lea	ebx,[3395469782+eax*1+ebx]
	mov	eax,DWORD [4+esp]
	add	ebx,ebp
	; 20_39 65
	mov	ebp,ecx
	xor	eax,DWORD [12+esp]
	xor	ebp,edx
	xor	eax,DWORD [36+esp]
	xor	ebp,edi
	xor	eax,DWORD [56+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [4+esp],eax
	lea	eax,[3395469782+esi*1+eax]
	mov	esi,DWORD [8+esp]
	add	eax,ebp
	; 20_39 66
	mov	ebp,ebx
	xor	esi,DWORD [16+esp]
	xor	ebp,ecx
	xor	esi,DWORD [40+esp]
	xor	ebp,edx
	xor	esi,DWORD [60+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [8+esp],esi
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [12+esp]
	add	esi,ebp
	; 20_39 67
	mov	ebp,eax
	xor	edi,DWORD [20+esp]
	xor	ebp,ebx
	xor	edi,DWORD [44+esp]
	xor	ebp,ecx
	xor	edi,DWORD [esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [12+esp],edi
	lea	edi,[3395469782+edx*1+edi]
	mov	edx,DWORD [16+esp]
	add	edi,ebp
	; 20_39 68
	mov	ebp,esi
	xor	edx,DWORD [24+esp]
	xor	ebp,eax
	xor	edx,DWORD [48+esp]
	xor	ebp,ebx
	xor	edx,DWORD [4+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [16+esp],edx
	lea	edx,[3395469782+ecx*1+edx]
	mov	ecx,DWORD [20+esp]
	add	edx,ebp
	; 20_39 69
	mov	ebp,edi
	xor	ecx,DWORD [28+esp]
	xor	ebp,esi
	xor	ecx,DWORD [52+esp]
	xor	ebp,eax
	xor	ecx,DWORD [8+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [20+esp],ecx
	lea	ecx,[3395469782+ebx*1+ecx]
	mov	ebx,DWORD [24+esp]
	add	ecx,ebp
	; 20_39 70
	mov	ebp,edx
	xor	ebx,DWORD [32+esp]
	xor	ebp,edi
	xor	ebx,DWORD [56+esp]
	xor	ebp,esi
	xor	ebx,DWORD [12+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [24+esp],ebx
	lea	ebx,[3395469782+eax*1+ebx]
	mov	eax,DWORD [28+esp]
	add	ebx,ebp
	; 20_39 71
	mov	ebp,ecx
	xor	eax,DWORD [36+esp]
	xor	ebp,edx
	xor	eax,DWORD [60+esp]
	xor	ebp,edi
	xor	eax,DWORD [16+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	mov	DWORD [28+esp],eax
	lea	eax,[3395469782+esi*1+eax]
	mov	esi,DWORD [32+esp]
	add	eax,ebp
	; 20_39 72
	mov	ebp,ebx
	xor	esi,DWORD [40+esp]
	xor	ebp,ecx
	xor	esi,DWORD [esp]
	xor	ebp,edx
	xor	esi,DWORD [20+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	mov	DWORD [32+esp],esi
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [36+esp]
	add	esi,ebp
	; 20_39 73
	mov	ebp,eax
	xor	edi,DWORD [44+esp]
	xor	ebp,ebx
	xor	edi,DWORD [4+esp]
	xor	ebp,ecx
	xor	edi,DWORD [24+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	mov	DWORD [36+esp],edi
	lea	edi,[3395469782+edx*1+edi]
	mov	edx,DWORD [40+esp]
	add	edi,ebp
	; 20_39 74
	mov	ebp,esi
	xor	edx,DWORD [48+esp]
	xor	ebp,eax
	xor	edx,DWORD [8+esp]
	xor	ebp,ebx
	xor	edx,DWORD [28+esp]
	rol	edx,1
	add	ecx,ebp
	ror	esi,2
	mov	ebp,edi
	rol	ebp,5
	mov	DWORD [40+esp],edx
	lea	edx,[3395469782+ecx*1+edx]
	mov	ecx,DWORD [44+esp]
	add	edx,ebp
	; 20_39 75
	mov	ebp,edi
	xor	ecx,DWORD [52+esp]
	xor	ebp,esi
	xor	ecx,DWORD [12+esp]
	xor	ebp,eax
	xor	ecx,DWORD [32+esp]
	rol	ecx,1
	add	ebx,ebp
	ror	edi,2
	mov	ebp,edx
	rol	ebp,5
	mov	DWORD [44+esp],ecx
	lea	ecx,[3395469782+ebx*1+ecx]
	mov	ebx,DWORD [48+esp]
	add	ecx,ebp
	; 20_39 76
	mov	ebp,edx
	xor	ebx,DWORD [56+esp]
	xor	ebp,edi
	xor	ebx,DWORD [16+esp]
	xor	ebp,esi
	xor	ebx,DWORD [36+esp]
	rol	ebx,1
	add	eax,ebp
	ror	edx,2
	mov	ebp,ecx
	rol	ebp,5
	mov	DWORD [48+esp],ebx
	lea	ebx,[3395469782+eax*1+ebx]
	mov	eax,DWORD [52+esp]
	add	ebx,ebp
	; 20_39 77
	mov	ebp,ecx
	xor	eax,DWORD [60+esp]
	xor	ebp,edx
	xor	eax,DWORD [20+esp]
	xor	ebp,edi
	xor	eax,DWORD [40+esp]
	rol	eax,1
	add	esi,ebp
	ror	ecx,2
	mov	ebp,ebx
	rol	ebp,5
	lea	eax,[3395469782+esi*1+eax]
	mov	esi,DWORD [56+esp]
	add	eax,ebp
	; 20_39 78
	mov	ebp,ebx
	xor	esi,DWORD [esp]
	xor	ebp,ecx
	xor	esi,DWORD [24+esp]
	xor	ebp,edx
	xor	esi,DWORD [44+esp]
	rol	esi,1
	add	edi,ebp
	ror	ebx,2
	mov	ebp,eax
	rol	ebp,5
	lea	esi,[3395469782+edi*1+esi]
	mov	edi,DWORD [60+esp]
	add	esi,ebp
	; 20_39 79
	mov	ebp,eax
	xor	edi,DWORD [4+esp]
	xor	ebp,ebx
	xor	edi,DWORD [28+esp]
	xor	ebp,ecx
	xor	edi,DWORD [48+esp]
	rol	edi,1
	add	edx,ebp
	ror	eax,2
	mov	ebp,esi
	rol	ebp,5
	lea	edi,[3395469782+edx*1+edi]
	add	edi,ebp
	mov	ebp,DWORD [96+esp]
	mov	edx,DWORD [100+esp]
	add	edi,DWORD [ebp]
	add	esi,DWORD [4+ebp]
	add	eax,DWORD [8+ebp]
	add	ebx,DWORD [12+ebp]
	add	ecx,DWORD [16+ebp]
	mov	DWORD [ebp],edi
	add	edx,64
	mov	DWORD [4+ebp],esi
	cmp	edx,DWORD [104+esp]
	mov	DWORD [8+ebp],eax
	mov	edi,ecx
	mov	DWORD [12+ebp],ebx
	mov	esi,edx
	mov	DWORD [16+ebp],ecx
	jb	NEAR L$002loop
	add	esp,76
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__sha1_block_data_order_shaext:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$003pic_point
L$003pic_point:
	pop	ebp
	lea	ebp,[(L$K_XX_XX-L$003pic_point)+ebp]
L$shaext_shortcut:
	mov	edi,DWORD [20+esp]
	mov	ebx,esp
	mov	esi,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	sub	esp,32
	movdqu	xmm0,[edi]
	movd	xmm1,DWORD [16+edi]
	and	esp,-32
	movdqa	xmm3,[80+ebp]
	movdqu	xmm4,[esi]
	pshufd	xmm0,xmm0,27
	movdqu	xmm5,[16+esi]
	pshufd	xmm1,xmm1,27
	movdqu	xmm6,[32+esi]
db	102,15,56,0,227
	movdqu	xmm7,[48+esi]
db	102,15,56,0,235
db	102,15,56,0,243
db	102,15,56,0,251
	jmp	NEAR L$004loop_shaext
align	16
L$004loop_shaext:
	dec	ecx
	lea	eax,[64+esi]
	movdqa	[esp],xmm1
	paddd	xmm1,xmm4
	cmovne	esi,eax
	movdqa	[16+esp],xmm0
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,0
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,0
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,0
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,0
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,0
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,1
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,1
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,1
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,1
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,1
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,2
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,2
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
db	15,56,201,229
	movdqa	xmm2,xmm0
db	15,58,204,193,2
db	15,56,200,213
	pxor	xmm4,xmm6
db	15,56,201,238
db	15,56,202,231
	movdqa	xmm1,xmm0
db	15,58,204,194,2
db	15,56,200,206
	pxor	xmm5,xmm7
db	15,56,202,236
db	15,56,201,247
	movdqa	xmm2,xmm0
db	15,58,204,193,2
db	15,56,200,215
	pxor	xmm6,xmm4
db	15,56,201,252
db	15,56,202,245
	movdqa	xmm1,xmm0
db	15,58,204,194,3
db	15,56,200,204
	pxor	xmm7,xmm5
db	15,56,202,254
	movdqu	xmm4,[esi]
	movdqa	xmm2,xmm0
db	15,58,204,193,3
db	15,56,200,213
	movdqu	xmm5,[16+esi]
db	102,15,56,0,227
	movdqa	xmm1,xmm0
db	15,58,204,194,3
db	15,56,200,206
	movdqu	xmm6,[32+esi]
db	102,15,56,0,235
	movdqa	xmm2,xmm0
db	15,58,204,193,3
db	15,56,200,215
	movdqu	xmm7,[48+esi]
db	102,15,56,0,243
	movdqa	xmm1,xmm0
db	15,58,204,194,3
	movdqa	xmm2,[esp]
db	102,15,56,0,251
db	15,56,200,202
	paddd	xmm0,[16+esp]
	jnz	NEAR L$004loop_shaext
	pshufd	xmm0,xmm0,27
	pshufd	xmm1,xmm1,27
	movdqu	[edi],xmm0
	movd	DWORD [16+edi],xmm1
	mov	esp,ebx
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__sha1_block_data_order_ssse3:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$005pic_point
L$005pic_point:
	pop	ebp
	lea	ebp,[(L$K_XX_XX-L$005pic_point)+ebp]
L$ssse3_shortcut:
	movdqa	xmm7,[ebp]
	movdqa	xmm0,[16+ebp]
	movdqa	xmm1,[32+ebp]
	movdqa	xmm2,[48+ebp]
	movdqa	xmm6,[64+ebp]
	mov	edi,DWORD [20+esp]
	mov	ebp,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	esi,esp
	sub	esp,208
	and	esp,-64
	movdqa	[112+esp],xmm0
	movdqa	[128+esp],xmm1
	movdqa	[144+esp],xmm2
	shl	edx,6
	movdqa	[160+esp],xmm7
	add	edx,ebp
	movdqa	[176+esp],xmm6
	add	ebp,64
	mov	DWORD [192+esp],edi
	mov	DWORD [196+esp],ebp
	mov	DWORD [200+esp],edx
	mov	DWORD [204+esp],esi
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
	mov	edi,DWORD [16+edi]
	mov	esi,ebx
	movdqu	xmm0,[ebp-64]
	movdqu	xmm1,[ebp-48]
	movdqu	xmm2,[ebp-32]
	movdqu	xmm3,[ebp-16]
db	102,15,56,0,198
db	102,15,56,0,206
db	102,15,56,0,214
	movdqa	[96+esp],xmm7
db	102,15,56,0,222
	paddd	xmm0,xmm7
	paddd	xmm1,xmm7
	paddd	xmm2,xmm7
	movdqa	[esp],xmm0
	psubd	xmm0,xmm7
	movdqa	[16+esp],xmm1
	psubd	xmm1,xmm7
	movdqa	[32+esp],xmm2
	mov	ebp,ecx
	psubd	xmm2,xmm7
	xor	ebp,edx
	pshufd	xmm4,xmm0,238
	and	esi,ebp
	jmp	NEAR L$006loop
align	16
L$006loop:
	ror	ebx,2
	xor	esi,edx
	mov	ebp,eax
	punpcklqdq	xmm4,xmm1
	movdqa	xmm6,xmm3
	add	edi,DWORD [esp]
	xor	ebx,ecx
	paddd	xmm7,xmm3
	movdqa	[64+esp],xmm0
	rol	eax,5
	add	edi,esi
	psrldq	xmm6,4
	and	ebp,ebx
	xor	ebx,ecx
	pxor	xmm4,xmm0
	add	edi,eax
	ror	eax,7
	pxor	xmm6,xmm2
	xor	ebp,ecx
	mov	esi,edi
	add	edx,DWORD [4+esp]
	pxor	xmm4,xmm6
	xor	eax,ebx
	rol	edi,5
	movdqa	[48+esp],xmm7
	add	edx,ebp
	and	esi,eax
	movdqa	xmm0,xmm4
	xor	eax,ebx
	add	edx,edi
	ror	edi,7
	movdqa	xmm6,xmm4
	xor	esi,ebx
	pslldq	xmm0,12
	paddd	xmm4,xmm4
	mov	ebp,edx
	add	ecx,DWORD [8+esp]
	psrld	xmm6,31
	xor	edi,eax
	rol	edx,5
	movdqa	xmm7,xmm0
	add	ecx,esi
	and	ebp,edi
	xor	edi,eax
	psrld	xmm0,30
	add	ecx,edx
	ror	edx,7
	por	xmm4,xmm6
	xor	ebp,eax
	mov	esi,ecx
	add	ebx,DWORD [12+esp]
	pslld	xmm7,2
	xor	edx,edi
	rol	ecx,5
	pxor	xmm4,xmm0
	movdqa	xmm0,[96+esp]
	add	ebx,ebp
	and	esi,edx
	pxor	xmm4,xmm7
	pshufd	xmm5,xmm1,238
	xor	edx,edi
	add	ebx,ecx
	ror	ecx,7
	xor	esi,edi
	mov	ebp,ebx
	punpcklqdq	xmm5,xmm2
	movdqa	xmm7,xmm4
	add	eax,DWORD [16+esp]
	xor	ecx,edx
	paddd	xmm0,xmm4
	movdqa	[80+esp],xmm1
	rol	ebx,5
	add	eax,esi
	psrldq	xmm7,4
	and	ebp,ecx
	xor	ecx,edx
	pxor	xmm5,xmm1
	add	eax,ebx
	ror	ebx,7
	pxor	xmm7,xmm3
	xor	ebp,edx
	mov	esi,eax
	add	edi,DWORD [20+esp]
	pxor	xmm5,xmm7
	xor	ebx,ecx
	rol	eax,5
	movdqa	[esp],xmm0
	add	edi,ebp
	and	esi,ebx
	movdqa	xmm1,xmm5
	xor	ebx,ecx
	add	edi,eax
	ror	eax,7
	movdqa	xmm7,xmm5
	xor	esi,ecx
	pslldq	xmm1,12
	paddd	xmm5,xmm5
	mov	ebp,edi
	add	edx,DWORD [24+esp]
	psrld	xmm7,31
	xor	eax,ebx
	rol	edi,5
	movdqa	xmm0,xmm1
	add	edx,esi
	and	ebp,eax
	xor	eax,ebx
	psrld	xmm1,30
	add	edx,edi
	ror	edi,7
	por	xmm5,xmm7
	xor	ebp,ebx
	mov	esi,edx
	add	ecx,DWORD [28+esp]
	pslld	xmm0,2
	xor	edi,eax
	rol	edx,5
	pxor	xmm5,xmm1
	movdqa	xmm1,[112+esp]
	add	ecx,ebp
	and	esi,edi
	pxor	xmm5,xmm0
	pshufd	xmm6,xmm2,238
	xor	edi,eax
	add	ecx,edx
	ror	edx,7
	xor	esi,eax
	mov	ebp,ecx
	punpcklqdq	xmm6,xmm3
	movdqa	xmm0,xmm5
	add	ebx,DWORD [32+esp]
	xor	edx,edi
	paddd	xmm1,xmm5
	movdqa	[96+esp],xmm2
	rol	ecx,5
	add	ebx,esi
	psrldq	xmm0,4
	and	ebp,edx
	xor	edx,edi
	pxor	xmm6,xmm2
	add	ebx,ecx
	ror	ecx,7
	pxor	xmm0,xmm4
	xor	ebp,edi
	mov	esi,ebx
	add	eax,DWORD [36+esp]
	pxor	xmm6,xmm0
	xor	ecx,edx
	rol	ebx,5
	movdqa	[16+esp],xmm1
	add	eax,ebp
	and	esi,ecx
	movdqa	xmm2,xmm6
	xor	ecx,edx
	add	eax,ebx
	ror	ebx,7
	movdqa	xmm0,xmm6
	xor	esi,edx
	pslldq	xmm2,12
	paddd	xmm6,xmm6
	mov	ebp,eax
	add	edi,DWORD [40+esp]
	psrld	xmm0,31
	xor	ebx,ecx
	rol	eax,5
	movdqa	xmm1,xmm2
	add	edi,esi
	and	ebp,ebx
	xor	ebx,ecx
	psrld	xmm2,30
	add	edi,eax
	ror	eax,7
	por	xmm6,xmm0
	xor	ebp,ecx
	movdqa	xmm0,[64+esp]
	mov	esi,edi
	add	edx,DWORD [44+esp]
	pslld	xmm1,2
	xor	eax,ebx
	rol	edi,5
	pxor	xmm6,xmm2
	movdqa	xmm2,[112+esp]
	add	edx,ebp
	and	esi,eax
	pxor	xmm6,xmm1
	pshufd	xmm7,xmm3,238
	xor	eax,ebx
	add	edx,edi
	ror	edi,7
	xor	esi,ebx
	mov	ebp,edx
	punpcklqdq	xmm7,xmm4
	movdqa	xmm1,xmm6
	add	ecx,DWORD [48+esp]
	xor	edi,eax
	paddd	xmm2,xmm6
	movdqa	[64+esp],xmm3
	rol	edx,5
	add	ecx,esi
	psrldq	xmm1,4
	and	ebp,edi
	xor	edi,eax
	pxor	xmm7,xmm3
	add	ecx,edx
	ror	edx,7
	pxor	xmm1,xmm5
	xor	ebp,eax
	mov	esi,ecx
	add	ebx,DWORD [52+esp]
	pxor	xmm7,xmm1
	xor	edx,edi
	rol	ecx,5
	movdqa	[32+esp],xmm2
	add	ebx,ebp
	and	esi,edx
	movdqa	xmm3,xmm7
	xor	edx,edi
	add	ebx,ecx
	ror	ecx,7
	movdqa	xmm1,xmm7
	xor	esi,edi
	pslldq	xmm3,12
	paddd	xmm7,xmm7
	mov	ebp,ebx
	add	eax,DWORD [56+esp]
	psrld	xmm1,31
	xor	ecx,edx
	rol	ebx,5
	movdqa	xmm2,xmm3
	add	eax,esi
	and	ebp,ecx
	xor	ecx,edx
	psrld	xmm3,30
	add	eax,ebx
	ror	ebx,7
	por	xmm7,xmm1
	xor	ebp,edx
	movdqa	xmm1,[80+esp]
	mov	esi,eax
	add	edi,DWORD [60+esp]
	pslld	xmm2,2
	xor	ebx,ecx
	rol	eax,5
	pxor	xmm7,xmm3
	movdqa	xmm3,[112+esp]
	add	edi,ebp
	and	esi,ebx
	pxor	xmm7,xmm2
	pshufd	xmm2,xmm6,238
	xor	ebx,ecx
	add	edi,eax
	ror	eax,7
	pxor	xmm0,xmm4
	punpcklqdq	xmm2,xmm7
	xor	esi,ecx
	mov	ebp,edi
	add	edx,DWORD [esp]
	pxor	xmm0,xmm1
	movdqa	[80+esp],xmm4
	xor	eax,ebx
	rol	edi,5
	movdqa	xmm4,xmm3
	add	edx,esi
	paddd	xmm3,xmm7
	and	ebp,eax
	pxor	xmm0,xmm2
	xor	eax,ebx
	add	edx,edi
	ror	edi,7
	xor	ebp,ebx
	movdqa	xmm2,xmm0
	movdqa	[48+esp],xmm3
	mov	esi,edx
	add	ecx,DWORD [4+esp]
	xor	edi,eax
	rol	edx,5
	pslld	xmm0,2
	add	ecx,ebp
	and	esi,edi
	psrld	xmm2,30
	xor	edi,eax
	add	ecx,edx
	ror	edx,7
	xor	esi,eax
	mov	ebp,ecx
	add	ebx,DWORD [8+esp]
	xor	edx,edi
	rol	ecx,5
	por	xmm0,xmm2
	add	ebx,esi
	and	ebp,edx
	movdqa	xmm2,[96+esp]
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [12+esp]
	xor	ebp,edi
	mov	esi,ebx
	pshufd	xmm3,xmm7,238
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [16+esp]
	pxor	xmm1,xmm5
	punpcklqdq	xmm3,xmm0
	xor	esi,ecx
	mov	ebp,eax
	rol	eax,5
	pxor	xmm1,xmm2
	movdqa	[96+esp],xmm5
	add	edi,esi
	xor	ebp,ecx
	movdqa	xmm5,xmm4
	ror	ebx,7
	paddd	xmm4,xmm0
	add	edi,eax
	pxor	xmm1,xmm3
	add	edx,DWORD [20+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	movdqa	xmm3,xmm1
	movdqa	[esp],xmm4
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	pslld	xmm1,2
	add	ecx,DWORD [24+esp]
	xor	esi,eax
	psrld	xmm3,30
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
	add	ecx,edx
	por	xmm1,xmm3
	add	ebx,DWORD [28+esp]
	xor	ebp,edi
	movdqa	xmm3,[64+esp]
	mov	esi,ecx
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	pshufd	xmm4,xmm0,238
	add	ebx,ecx
	add	eax,DWORD [32+esp]
	pxor	xmm2,xmm6
	punpcklqdq	xmm4,xmm1
	xor	esi,edx
	mov	ebp,ebx
	rol	ebx,5
	pxor	xmm2,xmm3
	movdqa	[64+esp],xmm6
	add	eax,esi
	xor	ebp,edx
	movdqa	xmm6,[128+esp]
	ror	ecx,7
	paddd	xmm5,xmm1
	add	eax,ebx
	pxor	xmm2,xmm4
	add	edi,DWORD [36+esp]
	xor	ebp,ecx
	mov	esi,eax
	rol	eax,5
	movdqa	xmm4,xmm2
	movdqa	[16+esp],xmm5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	pslld	xmm2,2
	add	edx,DWORD [40+esp]
	xor	esi,ebx
	psrld	xmm4,30
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
	add	edx,edi
	por	xmm2,xmm4
	add	ecx,DWORD [44+esp]
	xor	ebp,eax
	movdqa	xmm4,[80+esp]
	mov	esi,edx
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	pshufd	xmm5,xmm1,238
	add	ecx,edx
	add	ebx,DWORD [48+esp]
	pxor	xmm3,xmm7
	punpcklqdq	xmm5,xmm2
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	pxor	xmm3,xmm4
	movdqa	[80+esp],xmm7
	add	ebx,esi
	xor	ebp,edi
	movdqa	xmm7,xmm6
	ror	edx,7
	paddd	xmm6,xmm2
	add	ebx,ecx
	pxor	xmm3,xmm5
	add	eax,DWORD [52+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	movdqa	xmm5,xmm3
	movdqa	[32+esp],xmm6
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	add	eax,ebx
	pslld	xmm3,2
	add	edi,DWORD [56+esp]
	xor	esi,ecx
	psrld	xmm5,30
	mov	ebp,eax
	rol	eax,5
	add	edi,esi
	xor	ebp,ecx
	ror	ebx,7
	add	edi,eax
	por	xmm3,xmm5
	add	edx,DWORD [60+esp]
	xor	ebp,ebx
	movdqa	xmm5,[96+esp]
	mov	esi,edi
	rol	edi,5
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	pshufd	xmm6,xmm2,238
	add	edx,edi
	add	ecx,DWORD [esp]
	pxor	xmm4,xmm0
	punpcklqdq	xmm6,xmm3
	xor	esi,eax
	mov	ebp,edx
	rol	edx,5
	pxor	xmm4,xmm5
	movdqa	[96+esp],xmm0
	add	ecx,esi
	xor	ebp,eax
	movdqa	xmm0,xmm7
	ror	edi,7
	paddd	xmm7,xmm3
	add	ecx,edx
	pxor	xmm4,xmm6
	add	ebx,DWORD [4+esp]
	xor	ebp,edi
	mov	esi,ecx
	rol	ecx,5
	movdqa	xmm6,xmm4
	movdqa	[48+esp],xmm7
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	add	ebx,ecx
	pslld	xmm4,2
	add	eax,DWORD [8+esp]
	xor	esi,edx
	psrld	xmm6,30
	mov	ebp,ebx
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	add	eax,ebx
	por	xmm4,xmm6
	add	edi,DWORD [12+esp]
	xor	ebp,ecx
	movdqa	xmm6,[64+esp]
	mov	esi,eax
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	pshufd	xmm7,xmm3,238
	add	edi,eax
	add	edx,DWORD [16+esp]
	pxor	xmm5,xmm1
	punpcklqdq	xmm7,xmm4
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	pxor	xmm5,xmm6
	movdqa	[64+esp],xmm1
	add	edx,esi
	xor	ebp,ebx
	movdqa	xmm1,xmm0
	ror	eax,7
	paddd	xmm0,xmm4
	add	edx,edi
	pxor	xmm5,xmm7
	add	ecx,DWORD [20+esp]
	xor	ebp,eax
	mov	esi,edx
	rol	edx,5
	movdqa	xmm7,xmm5
	movdqa	[esp],xmm0
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	add	ecx,edx
	pslld	xmm5,2
	add	ebx,DWORD [24+esp]
	xor	esi,edi
	psrld	xmm7,30
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	por	xmm5,xmm7
	add	eax,DWORD [28+esp]
	movdqa	xmm7,[80+esp]
	ror	ecx,7
	mov	esi,ebx
	xor	ebp,edx
	rol	ebx,5
	pshufd	xmm0,xmm4,238
	add	eax,ebp
	xor	esi,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [32+esp]
	pxor	xmm6,xmm2
	punpcklqdq	xmm0,xmm5
	and	esi,ecx
	xor	ecx,edx
	ror	ebx,7
	pxor	xmm6,xmm7
	movdqa	[80+esp],xmm2
	mov	ebp,eax
	xor	esi,ecx
	rol	eax,5
	movdqa	xmm2,xmm1
	add	edi,esi
	paddd	xmm1,xmm5
	xor	ebp,ebx
	pxor	xmm6,xmm0
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [36+esp]
	and	ebp,ebx
	movdqa	xmm0,xmm6
	movdqa	[16+esp],xmm1
	xor	ebx,ecx
	ror	eax,7
	mov	esi,edi
	xor	ebp,ebx
	rol	edi,5
	pslld	xmm6,2
	add	edx,ebp
	xor	esi,eax
	psrld	xmm0,30
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [40+esp]
	and	esi,eax
	xor	eax,ebx
	ror	edi,7
	por	xmm6,xmm0
	mov	ebp,edx
	xor	esi,eax
	movdqa	xmm0,[96+esp]
	rol	edx,5
	add	ecx,esi
	xor	ebp,edi
	xor	edi,eax
	add	ecx,edx
	pshufd	xmm1,xmm5,238
	add	ebx,DWORD [44+esp]
	and	ebp,edi
	xor	edi,eax
	ror	edx,7
	mov	esi,ecx
	xor	ebp,edi
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [48+esp]
	pxor	xmm7,xmm3
	punpcklqdq	xmm1,xmm6
	and	esi,edx
	xor	edx,edi
	ror	ecx,7
	pxor	xmm7,xmm0
	movdqa	[96+esp],xmm3
	mov	ebp,ebx
	xor	esi,edx
	rol	ebx,5
	movdqa	xmm3,[144+esp]
	add	eax,esi
	paddd	xmm2,xmm6
	xor	ebp,ecx
	pxor	xmm7,xmm1
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [52+esp]
	and	ebp,ecx
	movdqa	xmm1,xmm7
	movdqa	[32+esp],xmm2
	xor	ecx,edx
	ror	ebx,7
	mov	esi,eax
	xor	ebp,ecx
	rol	eax,5
	pslld	xmm7,2
	add	edi,ebp
	xor	esi,ebx
	psrld	xmm1,30
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [56+esp]
	and	esi,ebx
	xor	ebx,ecx
	ror	eax,7
	por	xmm7,xmm1
	mov	ebp,edi
	xor	esi,ebx
	movdqa	xmm1,[64+esp]
	rol	edi,5
	add	edx,esi
	xor	ebp,eax
	xor	eax,ebx
	add	edx,edi
	pshufd	xmm2,xmm6,238
	add	ecx,DWORD [60+esp]
	and	ebp,eax
	xor	eax,ebx
	ror	edi,7
	mov	esi,edx
	xor	ebp,eax
	rol	edx,5
	add	ecx,ebp
	xor	esi,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [esp]
	pxor	xmm0,xmm4
	punpcklqdq	xmm2,xmm7
	and	esi,edi
	xor	edi,eax
	ror	edx,7
	pxor	xmm0,xmm1
	movdqa	[64+esp],xmm4
	mov	ebp,ecx
	xor	esi,edi
	rol	ecx,5
	movdqa	xmm4,xmm3
	add	ebx,esi
	paddd	xmm3,xmm7
	xor	ebp,edx
	pxor	xmm0,xmm2
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [4+esp]
	and	ebp,edx
	movdqa	xmm2,xmm0
	movdqa	[48+esp],xmm3
	xor	edx,edi
	ror	ecx,7
	mov	esi,ebx
	xor	ebp,edx
	rol	ebx,5
	pslld	xmm0,2
	add	eax,ebp
	xor	esi,ecx
	psrld	xmm2,30
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [8+esp]
	and	esi,ecx
	xor	ecx,edx
	ror	ebx,7
	por	xmm0,xmm2
	mov	ebp,eax
	xor	esi,ecx
	movdqa	xmm2,[80+esp]
	rol	eax,5
	add	edi,esi
	xor	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	pshufd	xmm3,xmm7,238
	add	edx,DWORD [12+esp]
	and	ebp,ebx
	xor	ebx,ecx
	ror	eax,7
	mov	esi,edi
	xor	ebp,ebx
	rol	edi,5
	add	edx,ebp
	xor	esi,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [16+esp]
	pxor	xmm1,xmm5
	punpcklqdq	xmm3,xmm0
	and	esi,eax
	xor	eax,ebx
	ror	edi,7
	pxor	xmm1,xmm2
	movdqa	[80+esp],xmm5
	mov	ebp,edx
	xor	esi,eax
	rol	edx,5
	movdqa	xmm5,xmm4
	add	ecx,esi
	paddd	xmm4,xmm0
	xor	ebp,edi
	pxor	xmm1,xmm3
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [20+esp]
	and	ebp,edi
	movdqa	xmm3,xmm1
	movdqa	[esp],xmm4
	xor	edi,eax
	ror	edx,7
	mov	esi,ecx
	xor	ebp,edi
	rol	ecx,5
	pslld	xmm1,2
	add	ebx,ebp
	xor	esi,edx
	psrld	xmm3,30
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [24+esp]
	and	esi,edx
	xor	edx,edi
	ror	ecx,7
	por	xmm1,xmm3
	mov	ebp,ebx
	xor	esi,edx
	movdqa	xmm3,[96+esp]
	rol	ebx,5
	add	eax,esi
	xor	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	pshufd	xmm4,xmm0,238
	add	edi,DWORD [28+esp]
	and	ebp,ecx
	xor	ecx,edx
	ror	ebx,7
	mov	esi,eax
	xor	ebp,ecx
	rol	eax,5
	add	edi,ebp
	xor	esi,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [32+esp]
	pxor	xmm2,xmm6
	punpcklqdq	xmm4,xmm1
	and	esi,ebx
	xor	ebx,ecx
	ror	eax,7
	pxor	xmm2,xmm3
	movdqa	[96+esp],xmm6
	mov	ebp,edi
	xor	esi,ebx
	rol	edi,5
	movdqa	xmm6,xmm5
	add	edx,esi
	paddd	xmm5,xmm1
	xor	ebp,eax
	pxor	xmm2,xmm4
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [36+esp]
	and	ebp,eax
	movdqa	xmm4,xmm2
	movdqa	[16+esp],xmm5
	xor	eax,ebx
	ror	edi,7
	mov	esi,edx
	xor	ebp,eax
	rol	edx,5
	pslld	xmm2,2
	add	ecx,ebp
	xor	esi,edi
	psrld	xmm4,30
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [40+esp]
	and	esi,edi
	xor	edi,eax
	ror	edx,7
	por	xmm2,xmm4
	mov	ebp,ecx
	xor	esi,edi
	movdqa	xmm4,[64+esp]
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	pshufd	xmm5,xmm1,238
	add	eax,DWORD [44+esp]
	and	ebp,edx
	xor	edx,edi
	ror	ecx,7
	mov	esi,ebx
	xor	ebp,edx
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	add	eax,ebx
	add	edi,DWORD [48+esp]
	pxor	xmm3,xmm7
	punpcklqdq	xmm5,xmm2
	xor	esi,ecx
	mov	ebp,eax
	rol	eax,5
	pxor	xmm3,xmm4
	movdqa	[64+esp],xmm7
	add	edi,esi
	xor	ebp,ecx
	movdqa	xmm7,xmm6
	ror	ebx,7
	paddd	xmm6,xmm2
	add	edi,eax
	pxor	xmm3,xmm5
	add	edx,DWORD [52+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	movdqa	xmm5,xmm3
	movdqa	[32+esp],xmm6
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	pslld	xmm3,2
	add	ecx,DWORD [56+esp]
	xor	esi,eax
	psrld	xmm5,30
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
	add	ecx,edx
	por	xmm3,xmm5
	add	ebx,DWORD [60+esp]
	xor	ebp,edi
	mov	esi,ecx
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [esp]
	xor	esi,edx
	mov	ebp,ebx
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	paddd	xmm7,xmm3
	add	eax,ebx
	add	edi,DWORD [4+esp]
	xor	ebp,ecx
	mov	esi,eax
	movdqa	[48+esp],xmm7
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [8+esp]
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [12+esp]
	xor	ebp,eax
	mov	esi,edx
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	add	ecx,edx
	mov	ebp,DWORD [196+esp]
	cmp	ebp,DWORD [200+esp]
	je	NEAR L$007done
	movdqa	xmm7,[160+esp]
	movdqa	xmm6,[176+esp]
	movdqu	xmm0,[ebp]
	movdqu	xmm1,[16+ebp]
	movdqu	xmm2,[32+ebp]
	movdqu	xmm3,[48+ebp]
	add	ebp,64
db	102,15,56,0,198
	mov	DWORD [196+esp],ebp
	movdqa	[96+esp],xmm7
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
db	102,15,56,0,206
	add	ebx,ecx
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	paddd	xmm0,xmm7
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	movdqa	[esp],xmm0
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	psubd	xmm0,xmm7
	rol	eax,5
	add	edi,esi
	xor	ebp,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
db	102,15,56,0,214
	add	ecx,edx
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	paddd	xmm1,xmm7
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	movdqa	[16+esp],xmm1
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	psubd	xmm1,xmm7
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
db	102,15,56,0,222
	add	edx,edi
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	paddd	xmm2,xmm7
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	movdqa	[32+esp],xmm2
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	psubd	xmm2,xmm7
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	add	eax,ebp
	ror	ecx,7
	add	eax,ebx
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	DWORD [8+ebp],ecx
	mov	ebx,ecx
	mov	DWORD [12+ebp],edx
	xor	ebx,edx
	mov	DWORD [16+ebp],edi
	mov	ebp,esi
	pshufd	xmm4,xmm0,238
	and	esi,ebx
	mov	ebx,ebp
	jmp	NEAR L$006loop
align	16
L$007done:
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	add	eax,ebp
	xor	esi,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	rol	eax,5
	add	edi,esi
	xor	ebp,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	rol	edi,5
	add	edx,ebp
	xor	esi,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	mov	ebp,edx
	rol	edx,5
	add	ecx,esi
	xor	ebp,eax
	ror	edi,7
	add	ecx,edx
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	rol	ecx,5
	add	ebx,ebp
	xor	esi,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	rol	ebx,5
	add	eax,esi
	xor	ebp,edx
	ror	ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	rol	eax,5
	add	edi,ebp
	xor	esi,ecx
	ror	ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	mov	ebp,edi
	rol	edi,5
	add	edx,esi
	xor	ebp,ebx
	ror	eax,7
	add	edx,edi
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	rol	edx,5
	add	ecx,ebp
	xor	esi,eax
	ror	edi,7
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	rol	ecx,5
	add	ebx,esi
	xor	ebp,edi
	ror	edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	rol	ebx,5
	add	eax,ebp
	ror	ecx,7
	add	eax,ebx
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	mov	esp,DWORD [204+esp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	DWORD [8+ebp],ecx
	mov	DWORD [12+ebp],edx
	mov	DWORD [16+ebp],edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
__sha1_block_data_order_avx:
	push	ebp
	push	ebx
	push	esi
	push	edi
	call	L$008pic_point
L$008pic_point:
	pop	ebp
	lea	ebp,[(L$K_XX_XX-L$008pic_point)+ebp]
L$avx_shortcut:
	vzeroall
	vmovdqa	xmm7,[ebp]
	vmovdqa	xmm0,[16+ebp]
	vmovdqa	xmm1,[32+ebp]
	vmovdqa	xmm2,[48+ebp]
	vmovdqa	xmm6,[64+ebp]
	mov	edi,DWORD [20+esp]
	mov	ebp,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	esi,esp
	sub	esp,208
	and	esp,-64
	vmovdqa	[112+esp],xmm0
	vmovdqa	[128+esp],xmm1
	vmovdqa	[144+esp],xmm2
	shl	edx,6
	vmovdqa	[160+esp],xmm7
	add	edx,ebp
	vmovdqa	[176+esp],xmm6
	add	ebp,64
	mov	DWORD [192+esp],edi
	mov	DWORD [196+esp],ebp
	mov	DWORD [200+esp],edx
	mov	DWORD [204+esp],esi
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
	mov	edi,DWORD [16+edi]
	mov	esi,ebx
	vmovdqu	xmm0,[ebp-64]
	vmovdqu	xmm1,[ebp-48]
	vmovdqu	xmm2,[ebp-32]
	vmovdqu	xmm3,[ebp-16]
	vpshufb	xmm0,xmm0,xmm6
	vpshufb	xmm1,xmm1,xmm6
	vpshufb	xmm2,xmm2,xmm6
	vmovdqa	[96+esp],xmm7
	vpshufb	xmm3,xmm3,xmm6
	vpaddd	xmm4,xmm0,xmm7
	vpaddd	xmm5,xmm1,xmm7
	vpaddd	xmm6,xmm2,xmm7
	vmovdqa	[esp],xmm4
	mov	ebp,ecx
	vmovdqa	[16+esp],xmm5
	xor	ebp,edx
	vmovdqa	[32+esp],xmm6
	and	esi,ebp
	jmp	NEAR L$009loop
align	16
L$009loop:
	shrd	ebx,ebx,2
	xor	esi,edx
	vpalignr	xmm4,xmm1,xmm0,8
	mov	ebp,eax
	add	edi,DWORD [esp]
	vpaddd	xmm7,xmm7,xmm3
	vmovdqa	[64+esp],xmm0
	xor	ebx,ecx
	shld	eax,eax,5
	vpsrldq	xmm6,xmm3,4
	add	edi,esi
	and	ebp,ebx
	vpxor	xmm4,xmm4,xmm0
	xor	ebx,ecx
	add	edi,eax
	vpxor	xmm6,xmm6,xmm2
	shrd	eax,eax,7
	xor	ebp,ecx
	vmovdqa	[48+esp],xmm7
	mov	esi,edi
	add	edx,DWORD [4+esp]
	vpxor	xmm4,xmm4,xmm6
	xor	eax,ebx
	shld	edi,edi,5
	add	edx,ebp
	and	esi,eax
	vpsrld	xmm6,xmm4,31
	xor	eax,ebx
	add	edx,edi
	shrd	edi,edi,7
	xor	esi,ebx
	vpslldq	xmm0,xmm4,12
	vpaddd	xmm4,xmm4,xmm4
	mov	ebp,edx
	add	ecx,DWORD [8+esp]
	xor	edi,eax
	shld	edx,edx,5
	vpsrld	xmm7,xmm0,30
	vpor	xmm4,xmm4,xmm6
	add	ecx,esi
	and	ebp,edi
	xor	edi,eax
	add	ecx,edx
	vpslld	xmm0,xmm0,2
	shrd	edx,edx,7
	xor	ebp,eax
	vpxor	xmm4,xmm4,xmm7
	mov	esi,ecx
	add	ebx,DWORD [12+esp]
	xor	edx,edi
	shld	ecx,ecx,5
	vpxor	xmm4,xmm4,xmm0
	add	ebx,ebp
	and	esi,edx
	vmovdqa	xmm0,[96+esp]
	xor	edx,edi
	add	ebx,ecx
	shrd	ecx,ecx,7
	xor	esi,edi
	vpalignr	xmm5,xmm2,xmm1,8
	mov	ebp,ebx
	add	eax,DWORD [16+esp]
	vpaddd	xmm0,xmm0,xmm4
	vmovdqa	[80+esp],xmm1
	xor	ecx,edx
	shld	ebx,ebx,5
	vpsrldq	xmm7,xmm4,4
	add	eax,esi
	and	ebp,ecx
	vpxor	xmm5,xmm5,xmm1
	xor	ecx,edx
	add	eax,ebx
	vpxor	xmm7,xmm7,xmm3
	shrd	ebx,ebx,7
	xor	ebp,edx
	vmovdqa	[esp],xmm0
	mov	esi,eax
	add	edi,DWORD [20+esp]
	vpxor	xmm5,xmm5,xmm7
	xor	ebx,ecx
	shld	eax,eax,5
	add	edi,ebp
	and	esi,ebx
	vpsrld	xmm7,xmm5,31
	xor	ebx,ecx
	add	edi,eax
	shrd	eax,eax,7
	xor	esi,ecx
	vpslldq	xmm1,xmm5,12
	vpaddd	xmm5,xmm5,xmm5
	mov	ebp,edi
	add	edx,DWORD [24+esp]
	xor	eax,ebx
	shld	edi,edi,5
	vpsrld	xmm0,xmm1,30
	vpor	xmm5,xmm5,xmm7
	add	edx,esi
	and	ebp,eax
	xor	eax,ebx
	add	edx,edi
	vpslld	xmm1,xmm1,2
	shrd	edi,edi,7
	xor	ebp,ebx
	vpxor	xmm5,xmm5,xmm0
	mov	esi,edx
	add	ecx,DWORD [28+esp]
	xor	edi,eax
	shld	edx,edx,5
	vpxor	xmm5,xmm5,xmm1
	add	ecx,ebp
	and	esi,edi
	vmovdqa	xmm1,[112+esp]
	xor	edi,eax
	add	ecx,edx
	shrd	edx,edx,7
	xor	esi,eax
	vpalignr	xmm6,xmm3,xmm2,8
	mov	ebp,ecx
	add	ebx,DWORD [32+esp]
	vpaddd	xmm1,xmm1,xmm5
	vmovdqa	[96+esp],xmm2
	xor	edx,edi
	shld	ecx,ecx,5
	vpsrldq	xmm0,xmm5,4
	add	ebx,esi
	and	ebp,edx
	vpxor	xmm6,xmm6,xmm2
	xor	edx,edi
	add	ebx,ecx
	vpxor	xmm0,xmm0,xmm4
	shrd	ecx,ecx,7
	xor	ebp,edi
	vmovdqa	[16+esp],xmm1
	mov	esi,ebx
	add	eax,DWORD [36+esp]
	vpxor	xmm6,xmm6,xmm0
	xor	ecx,edx
	shld	ebx,ebx,5
	add	eax,ebp
	and	esi,ecx
	vpsrld	xmm0,xmm6,31
	xor	ecx,edx
	add	eax,ebx
	shrd	ebx,ebx,7
	xor	esi,edx
	vpslldq	xmm2,xmm6,12
	vpaddd	xmm6,xmm6,xmm6
	mov	ebp,eax
	add	edi,DWORD [40+esp]
	xor	ebx,ecx
	shld	eax,eax,5
	vpsrld	xmm1,xmm2,30
	vpor	xmm6,xmm6,xmm0
	add	edi,esi
	and	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	vpslld	xmm2,xmm2,2
	vmovdqa	xmm0,[64+esp]
	shrd	eax,eax,7
	xor	ebp,ecx
	vpxor	xmm6,xmm6,xmm1
	mov	esi,edi
	add	edx,DWORD [44+esp]
	xor	eax,ebx
	shld	edi,edi,5
	vpxor	xmm6,xmm6,xmm2
	add	edx,ebp
	and	esi,eax
	vmovdqa	xmm2,[112+esp]
	xor	eax,ebx
	add	edx,edi
	shrd	edi,edi,7
	xor	esi,ebx
	vpalignr	xmm7,xmm4,xmm3,8
	mov	ebp,edx
	add	ecx,DWORD [48+esp]
	vpaddd	xmm2,xmm2,xmm6
	vmovdqa	[64+esp],xmm3
	xor	edi,eax
	shld	edx,edx,5
	vpsrldq	xmm1,xmm6,4
	add	ecx,esi
	and	ebp,edi
	vpxor	xmm7,xmm7,xmm3
	xor	edi,eax
	add	ecx,edx
	vpxor	xmm1,xmm1,xmm5
	shrd	edx,edx,7
	xor	ebp,eax
	vmovdqa	[32+esp],xmm2
	mov	esi,ecx
	add	ebx,DWORD [52+esp]
	vpxor	xmm7,xmm7,xmm1
	xor	edx,edi
	shld	ecx,ecx,5
	add	ebx,ebp
	and	esi,edx
	vpsrld	xmm1,xmm7,31
	xor	edx,edi
	add	ebx,ecx
	shrd	ecx,ecx,7
	xor	esi,edi
	vpslldq	xmm3,xmm7,12
	vpaddd	xmm7,xmm7,xmm7
	mov	ebp,ebx
	add	eax,DWORD [56+esp]
	xor	ecx,edx
	shld	ebx,ebx,5
	vpsrld	xmm2,xmm3,30
	vpor	xmm7,xmm7,xmm1
	add	eax,esi
	and	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	vpslld	xmm3,xmm3,2
	vmovdqa	xmm1,[80+esp]
	shrd	ebx,ebx,7
	xor	ebp,edx
	vpxor	xmm7,xmm7,xmm2
	mov	esi,eax
	add	edi,DWORD [60+esp]
	xor	ebx,ecx
	shld	eax,eax,5
	vpxor	xmm7,xmm7,xmm3
	add	edi,ebp
	and	esi,ebx
	vmovdqa	xmm3,[112+esp]
	xor	ebx,ecx
	add	edi,eax
	vpalignr	xmm2,xmm7,xmm6,8
	vpxor	xmm0,xmm0,xmm4
	shrd	eax,eax,7
	xor	esi,ecx
	mov	ebp,edi
	add	edx,DWORD [esp]
	vpxor	xmm0,xmm0,xmm1
	vmovdqa	[80+esp],xmm4
	xor	eax,ebx
	shld	edi,edi,5
	vmovdqa	xmm4,xmm3
	vpaddd	xmm3,xmm3,xmm7
	add	edx,esi
	and	ebp,eax
	vpxor	xmm0,xmm0,xmm2
	xor	eax,ebx
	add	edx,edi
	shrd	edi,edi,7
	xor	ebp,ebx
	vpsrld	xmm2,xmm0,30
	vmovdqa	[48+esp],xmm3
	mov	esi,edx
	add	ecx,DWORD [4+esp]
	xor	edi,eax
	shld	edx,edx,5
	vpslld	xmm0,xmm0,2
	add	ecx,ebp
	and	esi,edi
	xor	edi,eax
	add	ecx,edx
	shrd	edx,edx,7
	xor	esi,eax
	mov	ebp,ecx
	add	ebx,DWORD [8+esp]
	vpor	xmm0,xmm0,xmm2
	xor	edx,edi
	shld	ecx,ecx,5
	vmovdqa	xmm2,[96+esp]
	add	ebx,esi
	and	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [12+esp]
	xor	ebp,edi
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	vpalignr	xmm3,xmm0,xmm7,8
	vpxor	xmm1,xmm1,xmm5
	add	edi,DWORD [16+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	vpxor	xmm1,xmm1,xmm2
	vmovdqa	[96+esp],xmm5
	add	edi,esi
	xor	ebp,ecx
	vmovdqa	xmm5,xmm4
	vpaddd	xmm4,xmm4,xmm0
	shrd	ebx,ebx,7
	add	edi,eax
	vpxor	xmm1,xmm1,xmm3
	add	edx,DWORD [20+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	vpsrld	xmm3,xmm1,30
	vmovdqa	[esp],xmm4
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpslld	xmm1,xmm1,2
	add	ecx,DWORD [24+esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpor	xmm1,xmm1,xmm3
	add	ebx,DWORD [28+esp]
	xor	ebp,edi
	vmovdqa	xmm3,[64+esp]
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vpalignr	xmm4,xmm1,xmm0,8
	vpxor	xmm2,xmm2,xmm6
	add	eax,DWORD [32+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	vpxor	xmm2,xmm2,xmm3
	vmovdqa	[64+esp],xmm6
	add	eax,esi
	xor	ebp,edx
	vmovdqa	xmm6,[128+esp]
	vpaddd	xmm5,xmm5,xmm1
	shrd	ecx,ecx,7
	add	eax,ebx
	vpxor	xmm2,xmm2,xmm4
	add	edi,DWORD [36+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	vpsrld	xmm4,xmm2,30
	vmovdqa	[16+esp],xmm5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	vpslld	xmm2,xmm2,2
	add	edx,DWORD [40+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpor	xmm2,xmm2,xmm4
	add	ecx,DWORD [44+esp]
	xor	ebp,eax
	vmovdqa	xmm4,[80+esp]
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpalignr	xmm5,xmm2,xmm1,8
	vpxor	xmm3,xmm3,xmm7
	add	ebx,DWORD [48+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	vpxor	xmm3,xmm3,xmm4
	vmovdqa	[80+esp],xmm7
	add	ebx,esi
	xor	ebp,edi
	vmovdqa	xmm7,xmm6
	vpaddd	xmm6,xmm6,xmm2
	shrd	edx,edx,7
	add	ebx,ecx
	vpxor	xmm3,xmm3,xmm5
	add	eax,DWORD [52+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	vpsrld	xmm5,xmm3,30
	vmovdqa	[32+esp],xmm6
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	vpslld	xmm3,xmm3,2
	add	edi,DWORD [56+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	vpor	xmm3,xmm3,xmm5
	add	edx,DWORD [60+esp]
	xor	ebp,ebx
	vmovdqa	xmm5,[96+esp]
	mov	esi,edi
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpalignr	xmm6,xmm3,xmm2,8
	vpxor	xmm4,xmm4,xmm0
	add	ecx,DWORD [esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	vpxor	xmm4,xmm4,xmm5
	vmovdqa	[96+esp],xmm0
	add	ecx,esi
	xor	ebp,eax
	vmovdqa	xmm0,xmm7
	vpaddd	xmm7,xmm7,xmm3
	shrd	edi,edi,7
	add	ecx,edx
	vpxor	xmm4,xmm4,xmm6
	add	ebx,DWORD [4+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	vpsrld	xmm6,xmm4,30
	vmovdqa	[48+esp],xmm7
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vpslld	xmm4,xmm4,2
	add	eax,DWORD [8+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	vpor	xmm4,xmm4,xmm6
	add	edi,DWORD [12+esp]
	xor	ebp,ecx
	vmovdqa	xmm6,[64+esp]
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	vpalignr	xmm7,xmm4,xmm3,8
	vpxor	xmm5,xmm5,xmm1
	add	edx,DWORD [16+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	vpxor	xmm5,xmm5,xmm6
	vmovdqa	[64+esp],xmm1
	add	edx,esi
	xor	ebp,ebx
	vmovdqa	xmm1,xmm0
	vpaddd	xmm0,xmm0,xmm4
	shrd	eax,eax,7
	add	edx,edi
	vpxor	xmm5,xmm5,xmm7
	add	ecx,DWORD [20+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	vpsrld	xmm7,xmm5,30
	vmovdqa	[esp],xmm0
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpslld	xmm5,xmm5,2
	add	ebx,DWORD [24+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vpor	xmm5,xmm5,xmm7
	add	eax,DWORD [28+esp]
	vmovdqa	xmm7,[80+esp]
	shrd	ecx,ecx,7
	mov	esi,ebx
	xor	ebp,edx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,ecx
	xor	ecx,edx
	add	eax,ebx
	vpalignr	xmm0,xmm5,xmm4,8
	vpxor	xmm6,xmm6,xmm2
	add	edi,DWORD [32+esp]
	and	esi,ecx
	xor	ecx,edx
	shrd	ebx,ebx,7
	vpxor	xmm6,xmm6,xmm7
	vmovdqa	[80+esp],xmm2
	mov	ebp,eax
	xor	esi,ecx
	vmovdqa	xmm2,xmm1
	vpaddd	xmm1,xmm1,xmm5
	shld	eax,eax,5
	add	edi,esi
	vpxor	xmm6,xmm6,xmm0
	xor	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [36+esp]
	vpsrld	xmm0,xmm6,30
	vmovdqa	[16+esp],xmm1
	and	ebp,ebx
	xor	ebx,ecx
	shrd	eax,eax,7
	mov	esi,edi
	vpslld	xmm6,xmm6,2
	xor	ebp,ebx
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [40+esp]
	and	esi,eax
	vpor	xmm6,xmm6,xmm0
	xor	eax,ebx
	shrd	edi,edi,7
	vmovdqa	xmm0,[96+esp]
	mov	ebp,edx
	xor	esi,eax
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [44+esp]
	and	ebp,edi
	xor	edi,eax
	shrd	edx,edx,7
	mov	esi,ecx
	xor	ebp,edi
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edx
	xor	edx,edi
	add	ebx,ecx
	vpalignr	xmm1,xmm6,xmm5,8
	vpxor	xmm7,xmm7,xmm3
	add	eax,DWORD [48+esp]
	and	esi,edx
	xor	edx,edi
	shrd	ecx,ecx,7
	vpxor	xmm7,xmm7,xmm0
	vmovdqa	[96+esp],xmm3
	mov	ebp,ebx
	xor	esi,edx
	vmovdqa	xmm3,[144+esp]
	vpaddd	xmm2,xmm2,xmm6
	shld	ebx,ebx,5
	add	eax,esi
	vpxor	xmm7,xmm7,xmm1
	xor	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [52+esp]
	vpsrld	xmm1,xmm7,30
	vmovdqa	[32+esp],xmm2
	and	ebp,ecx
	xor	ecx,edx
	shrd	ebx,ebx,7
	mov	esi,eax
	vpslld	xmm7,xmm7,2
	xor	ebp,ecx
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [56+esp]
	and	esi,ebx
	vpor	xmm7,xmm7,xmm1
	xor	ebx,ecx
	shrd	eax,eax,7
	vmovdqa	xmm1,[64+esp]
	mov	ebp,edi
	xor	esi,ebx
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [60+esp]
	and	ebp,eax
	xor	eax,ebx
	shrd	edi,edi,7
	mov	esi,edx
	xor	ebp,eax
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,edi
	xor	edi,eax
	add	ecx,edx
	vpalignr	xmm2,xmm7,xmm6,8
	vpxor	xmm0,xmm0,xmm4
	add	ebx,DWORD [esp]
	and	esi,edi
	xor	edi,eax
	shrd	edx,edx,7
	vpxor	xmm0,xmm0,xmm1
	vmovdqa	[64+esp],xmm4
	mov	ebp,ecx
	xor	esi,edi
	vmovdqa	xmm4,xmm3
	vpaddd	xmm3,xmm3,xmm7
	shld	ecx,ecx,5
	add	ebx,esi
	vpxor	xmm0,xmm0,xmm2
	xor	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [4+esp]
	vpsrld	xmm2,xmm0,30
	vmovdqa	[48+esp],xmm3
	and	ebp,edx
	xor	edx,edi
	shrd	ecx,ecx,7
	mov	esi,ebx
	vpslld	xmm0,xmm0,2
	xor	ebp,edx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [8+esp]
	and	esi,ecx
	vpor	xmm0,xmm0,xmm2
	xor	ecx,edx
	shrd	ebx,ebx,7
	vmovdqa	xmm2,[80+esp]
	mov	ebp,eax
	xor	esi,ecx
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ebx
	xor	ebx,ecx
	add	edi,eax
	add	edx,DWORD [12+esp]
	and	ebp,ebx
	xor	ebx,ecx
	shrd	eax,eax,7
	mov	esi,edi
	xor	ebp,ebx
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,eax
	xor	eax,ebx
	add	edx,edi
	vpalignr	xmm3,xmm0,xmm7,8
	vpxor	xmm1,xmm1,xmm5
	add	ecx,DWORD [16+esp]
	and	esi,eax
	xor	eax,ebx
	shrd	edi,edi,7
	vpxor	xmm1,xmm1,xmm2
	vmovdqa	[80+esp],xmm5
	mov	ebp,edx
	xor	esi,eax
	vmovdqa	xmm5,xmm4
	vpaddd	xmm4,xmm4,xmm0
	shld	edx,edx,5
	add	ecx,esi
	vpxor	xmm1,xmm1,xmm3
	xor	ebp,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [20+esp]
	vpsrld	xmm3,xmm1,30
	vmovdqa	[esp],xmm4
	and	ebp,edi
	xor	edi,eax
	shrd	edx,edx,7
	mov	esi,ecx
	vpslld	xmm1,xmm1,2
	xor	ebp,edi
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [24+esp]
	and	esi,edx
	vpor	xmm1,xmm1,xmm3
	xor	edx,edi
	shrd	ecx,ecx,7
	vmovdqa	xmm3,[96+esp]
	mov	ebp,ebx
	xor	esi,edx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,ecx
	xor	ecx,edx
	add	eax,ebx
	add	edi,DWORD [28+esp]
	and	ebp,ecx
	xor	ecx,edx
	shrd	ebx,ebx,7
	mov	esi,eax
	xor	ebp,ecx
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ebx
	xor	ebx,ecx
	add	edi,eax
	vpalignr	xmm4,xmm1,xmm0,8
	vpxor	xmm2,xmm2,xmm6
	add	edx,DWORD [32+esp]
	and	esi,ebx
	xor	ebx,ecx
	shrd	eax,eax,7
	vpxor	xmm2,xmm2,xmm3
	vmovdqa	[96+esp],xmm6
	mov	ebp,edi
	xor	esi,ebx
	vmovdqa	xmm6,xmm5
	vpaddd	xmm5,xmm5,xmm1
	shld	edi,edi,5
	add	edx,esi
	vpxor	xmm2,xmm2,xmm4
	xor	ebp,eax
	xor	eax,ebx
	add	edx,edi
	add	ecx,DWORD [36+esp]
	vpsrld	xmm4,xmm2,30
	vmovdqa	[16+esp],xmm5
	and	ebp,eax
	xor	eax,ebx
	shrd	edi,edi,7
	mov	esi,edx
	vpslld	xmm2,xmm2,2
	xor	ebp,eax
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,edi
	xor	edi,eax
	add	ecx,edx
	add	ebx,DWORD [40+esp]
	and	esi,edi
	vpor	xmm2,xmm2,xmm4
	xor	edi,eax
	shrd	edx,edx,7
	vmovdqa	xmm4,[64+esp]
	mov	ebp,ecx
	xor	esi,edi
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edx
	xor	edx,edi
	add	ebx,ecx
	add	eax,DWORD [44+esp]
	and	ebp,edx
	xor	edx,edi
	shrd	ecx,ecx,7
	mov	esi,ebx
	xor	ebp,edx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	add	eax,ebx
	vpalignr	xmm5,xmm2,xmm1,8
	vpxor	xmm3,xmm3,xmm7
	add	edi,DWORD [48+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	vpxor	xmm3,xmm3,xmm4
	vmovdqa	[64+esp],xmm7
	add	edi,esi
	xor	ebp,ecx
	vmovdqa	xmm7,xmm6
	vpaddd	xmm6,xmm6,xmm2
	shrd	ebx,ebx,7
	add	edi,eax
	vpxor	xmm3,xmm3,xmm5
	add	edx,DWORD [52+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	vpsrld	xmm5,xmm3,30
	vmovdqa	[32+esp],xmm6
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	vpslld	xmm3,xmm3,2
	add	ecx,DWORD [56+esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	vpor	xmm3,xmm3,xmm5
	add	ebx,DWORD [60+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [esp]
	vpaddd	xmm7,xmm7,xmm3
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	vmovdqa	[48+esp],xmm7
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [4+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [8+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [12+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	mov	ebp,DWORD [196+esp]
	cmp	ebp,DWORD [200+esp]
	je	NEAR L$010done
	vmovdqa	xmm7,[160+esp]
	vmovdqa	xmm6,[176+esp]
	vmovdqu	xmm0,[ebp]
	vmovdqu	xmm1,[16+ebp]
	vmovdqu	xmm2,[32+ebp]
	vmovdqu	xmm3,[48+ebp]
	add	ebp,64
	vpshufb	xmm0,xmm0,xmm6
	mov	DWORD [196+esp],ebp
	vmovdqa	[96+esp],xmm7
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	vpshufb	xmm1,xmm1,xmm6
	mov	ebp,ecx
	shld	ecx,ecx,5
	vpaddd	xmm4,xmm0,xmm7
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	vmovdqa	[esp],xmm4
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	vpshufb	xmm2,xmm2,xmm6
	mov	ebp,edx
	shld	edx,edx,5
	vpaddd	xmm5,xmm1,xmm7
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	vmovdqa	[16+esp],xmm5
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	vpshufb	xmm3,xmm3,xmm6
	mov	ebp,edi
	shld	edi,edi,5
	vpaddd	xmm6,xmm2,xmm7
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	vmovdqa	[32+esp],xmm6
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	shrd	ecx,ecx,7
	add	eax,ebx
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	ebx,ecx
	mov	DWORD [8+ebp],ecx
	xor	ebx,edx
	mov	DWORD [12+ebp],edx
	mov	DWORD [16+ebp],edi
	mov	ebp,esi
	and	esi,ebx
	mov	ebx,ebp
	jmp	NEAR L$009loop
align	16
L$010done:
	add	ebx,DWORD [16+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [20+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	xor	esi,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [24+esp]
	xor	esi,ecx
	mov	ebp,eax
	shld	eax,eax,5
	add	edi,esi
	xor	ebp,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [28+esp]
	xor	ebp,ebx
	mov	esi,edi
	shld	edi,edi,5
	add	edx,ebp
	xor	esi,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [32+esp]
	xor	esi,eax
	mov	ebp,edx
	shld	edx,edx,5
	add	ecx,esi
	xor	ebp,eax
	shrd	edi,edi,7
	add	ecx,edx
	add	ebx,DWORD [36+esp]
	xor	ebp,edi
	mov	esi,ecx
	shld	ecx,ecx,5
	add	ebx,ebp
	xor	esi,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [40+esp]
	xor	esi,edx
	mov	ebp,ebx
	shld	ebx,ebx,5
	add	eax,esi
	xor	ebp,edx
	shrd	ecx,ecx,7
	add	eax,ebx
	add	edi,DWORD [44+esp]
	xor	ebp,ecx
	mov	esi,eax
	shld	eax,eax,5
	add	edi,ebp
	xor	esi,ecx
	shrd	ebx,ebx,7
	add	edi,eax
	add	edx,DWORD [48+esp]
	xor	esi,ebx
	mov	ebp,edi
	shld	edi,edi,5
	add	edx,esi
	xor	ebp,ebx
	shrd	eax,eax,7
	add	edx,edi
	add	ecx,DWORD [52+esp]
	xor	ebp,eax
	mov	esi,edx
	shld	edx,edx,5
	add	ecx,ebp
	xor	esi,eax
	shrd	edi,edi,7
	add	ecx,edx
	add	ebx,DWORD [56+esp]
	xor	esi,edi
	mov	ebp,ecx
	shld	ecx,ecx,5
	add	ebx,esi
	xor	ebp,edi
	shrd	edx,edx,7
	add	ebx,ecx
	add	eax,DWORD [60+esp]
	xor	ebp,edx
	mov	esi,ebx
	shld	ebx,ebx,5
	add	eax,ebp
	shrd	ecx,ecx,7
	add	eax,ebx
	vzeroall
	mov	ebp,DWORD [192+esp]
	add	eax,DWORD [ebp]
	mov	esp,DWORD [204+esp]
	add	esi,DWORD [4+ebp]
	add	ecx,DWORD [8+ebp]
	mov	DWORD [ebp],eax
	add	edx,DWORD [12+ebp]
	mov	DWORD [4+ebp],esi
	add	edi,DWORD [16+ebp]
	mov	DWORD [8+ebp],ecx
	mov	DWORD [12+ebp],edx
	mov	DWORD [16+ebp],edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$K_XX_XX:
dd	1518500249,1518500249,1518500249,1518500249
dd	1859775393,1859775393,1859775393,1859775393
dd	2400959708,2400959708,2400959708,2400959708
dd	3395469782,3395469782,3395469782,3395469782
dd	66051,67438087,134810123,202182159
db	15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0
db	83,72,65,49,32,98,108,111,99,107,32,116,114,97,110,115
db	102,111,114,109,32,102,111,114,32,120,56,54,44,32,67,82
db	89,80,84,79,71,65,77,83,32,98,121,32,60,97,112,112
db	114,111,64,111,112,101,110,115,115,108,46,111,114,103,62,0
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/sha/sha256-586.asm                   0000664 0000000 0000000 00000337545 14746647661 0026536 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_sha256_block_data_order
align	16
_sha256_block_data_order:
L$_sha256_block_data_order_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [20+esp]
	mov	edi,DWORD [24+esp]
	mov	eax,DWORD [28+esp]
	mov	ebx,esp
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	ebp,[(L$001K256-L$000pic_point)+ebp]
	sub	esp,16
	and	esp,-64
	shl	eax,6
	add	eax,edi
	mov	DWORD [esp],esi
	mov	DWORD [4+esp],edi
	mov	DWORD [8+esp],eax
	mov	DWORD [12+esp],ebx
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [edx]
	mov	ebx,DWORD [4+edx]
	test	ecx,1048576
	jnz	NEAR L$002loop
	mov	edx,DWORD [8+edx]
	test	ecx,16777216
	jz	NEAR L$003no_xmm
	and	ecx,1073741824
	and	ebx,268435968
	test	edx,536870912
	jnz	NEAR L$004shaext
	or	ecx,ebx
	and	ecx,1342177280
	cmp	ecx,1342177280
	je	NEAR L$005AVX
	test	ebx,512
	jnz	NEAR L$006SSSE3
L$003no_xmm:
	sub	eax,edi
	cmp	eax,256
	jae	NEAR L$007unrolled
	jmp	NEAR L$002loop
align	16
L$002loop:
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	bswap	eax
	mov	edx,DWORD [12+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	mov	eax,DWORD [16+edi]
	mov	ebx,DWORD [20+edi]
	mov	ecx,DWORD [24+edi]
	bswap	eax
	mov	edx,DWORD [28+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	mov	eax,DWORD [32+edi]
	mov	ebx,DWORD [36+edi]
	mov	ecx,DWORD [40+edi]
	bswap	eax
	mov	edx,DWORD [44+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	mov	eax,DWORD [48+edi]
	mov	ebx,DWORD [52+edi]
	mov	ecx,DWORD [56+edi]
	bswap	eax
	mov	edx,DWORD [60+edi]
	bswap	ebx
	push	eax
	bswap	ecx
	push	ebx
	bswap	edx
	push	ecx
	push	edx
	add	edi,64
	lea	esp,[esp-36]
	mov	DWORD [104+esp],edi
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [8+esp],ebx
	xor	ebx,ecx
	mov	DWORD [12+esp],ecx
	mov	DWORD [16+esp],edi
	mov	DWORD [esp],ebx
	mov	edx,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ebx
	mov	DWORD [28+esp],ecx
	mov	DWORD [32+esp],edi
align	16
L$00800_15:
	mov	ecx,edx
	mov	esi,DWORD [24+esp]
	ror	ecx,14
	mov	edi,DWORD [28+esp]
	xor	ecx,edx
	xor	esi,edi
	mov	ebx,DWORD [96+esp]
	ror	ecx,5
	and	esi,edx
	mov	DWORD [20+esp],edx
	xor	edx,ecx
	add	ebx,DWORD [32+esp]
	xor	esi,edi
	ror	edx,6
	mov	ecx,eax
	add	ebx,esi
	ror	ecx,9
	add	ebx,edx
	mov	edi,DWORD [8+esp]
	xor	ecx,eax
	mov	DWORD [4+esp],eax
	lea	esp,[esp-4]
	ror	ecx,11
	mov	esi,DWORD [ebp]
	xor	ecx,eax
	mov	edx,DWORD [20+esp]
	xor	eax,edi
	ror	ecx,2
	add	ebx,esi
	mov	DWORD [esp],eax
	add	edx,ebx
	and	eax,DWORD [4+esp]
	add	ebx,ecx
	xor	eax,edi
	add	ebp,4
	add	eax,ebx
	cmp	esi,3248222580
	jne	NEAR L$00800_15
	mov	ecx,DWORD [156+esp]
	jmp	NEAR L$00916_63
align	16
L$00916_63:
	mov	ebx,ecx
	mov	esi,DWORD [104+esp]
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [160+esp]
	shr	edi,10
	add	ebx,DWORD [124+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [24+esp]
	ror	ecx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	ecx,edx
	xor	esi,edi
	mov	DWORD [96+esp],ebx
	ror	ecx,5
	and	esi,edx
	mov	DWORD [20+esp],edx
	xor	edx,ecx
	add	ebx,DWORD [32+esp]
	xor	esi,edi
	ror	edx,6
	mov	ecx,eax
	add	ebx,esi
	ror	ecx,9
	add	ebx,edx
	mov	edi,DWORD [8+esp]
	xor	ecx,eax
	mov	DWORD [4+esp],eax
	lea	esp,[esp-4]
	ror	ecx,11
	mov	esi,DWORD [ebp]
	xor	ecx,eax
	mov	edx,DWORD [20+esp]
	xor	eax,edi
	ror	ecx,2
	add	ebx,esi
	mov	DWORD [esp],eax
	add	edx,ebx
	and	eax,DWORD [4+esp]
	add	ebx,ecx
	xor	eax,edi
	mov	ecx,DWORD [156+esp]
	add	ebp,4
	add	eax,ebx
	cmp	esi,3329325298
	jne	NEAR L$00916_63
	mov	esi,DWORD [356+esp]
	mov	ebx,DWORD [8+esp]
	mov	ecx,DWORD [16+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	eax,DWORD [24+esp]
	mov	ebx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	mov	edi,DWORD [360+esp]
	add	edx,DWORD [16+esi]
	add	eax,DWORD [20+esi]
	add	ebx,DWORD [24+esi]
	add	ecx,DWORD [28+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],eax
	mov	DWORD [24+esi],ebx
	mov	DWORD [28+esi],ecx
	lea	esp,[356+esp]
	sub	ebp,256
	cmp	edi,DWORD [8+esp]
	jb	NEAR L$002loop
	mov	esp,DWORD [12+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$001K256:
dd	1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298
dd	66051,67438087,134810123,202182159
db	83,72,65,50,53,54,32,98,108,111,99,107,32,116,114,97
db	110,115,102,111,114,109,32,102,111,114,32,120,56,54,44,32
db	67,82,89,80,84,79,71,65,77,83,32,98,121,32,60,97
db	112,112,114,111,64,111,112,101,110,115,115,108,46,111,114,103
db	62,0
align	16
L$007unrolled:
	lea	esp,[esp-96]
	mov	eax,DWORD [esi]
	mov	ebp,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	ebx,DWORD [12+esi]
	mov	DWORD [4+esp],ebp
	xor	ebp,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],ebx
	mov	edx,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],ebx
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	jmp	NEAR L$010grand_loop
align	16
L$010grand_loop:
	mov	ebx,DWORD [edi]
	mov	ecx,DWORD [4+edi]
	bswap	ebx
	mov	esi,DWORD [8+edi]
	bswap	ecx
	mov	DWORD [32+esp],ebx
	bswap	esi
	mov	DWORD [36+esp],ecx
	mov	DWORD [40+esp],esi
	mov	ebx,DWORD [12+edi]
	mov	ecx,DWORD [16+edi]
	bswap	ebx
	mov	esi,DWORD [20+edi]
	bswap	ecx
	mov	DWORD [44+esp],ebx
	bswap	esi
	mov	DWORD [48+esp],ecx
	mov	DWORD [52+esp],esi
	mov	ebx,DWORD [24+edi]
	mov	ecx,DWORD [28+edi]
	bswap	ebx
	mov	esi,DWORD [32+edi]
	bswap	ecx
	mov	DWORD [56+esp],ebx
	bswap	esi
	mov	DWORD [60+esp],ecx
	mov	DWORD [64+esp],esi
	mov	ebx,DWORD [36+edi]
	mov	ecx,DWORD [40+edi]
	bswap	ebx
	mov	esi,DWORD [44+edi]
	bswap	ecx
	mov	DWORD [68+esp],ebx
	bswap	esi
	mov	DWORD [72+esp],ecx
	mov	DWORD [76+esp],esi
	mov	ebx,DWORD [48+edi]
	mov	ecx,DWORD [52+edi]
	bswap	ebx
	mov	esi,DWORD [56+edi]
	bswap	ecx
	mov	DWORD [80+esp],ebx
	bswap	esi
	mov	DWORD [84+esp],ecx
	mov	DWORD [88+esp],esi
	mov	ebx,DWORD [60+edi]
	add	edi,64
	bswap	ebx
	mov	DWORD [100+esp],edi
	mov	DWORD [92+esp],ebx
	mov	ecx,edx
	mov	esi,DWORD [20+esp]
	ror	edx,14
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	ebx,DWORD [32+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1116352408+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	ebx,DWORD [36+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1899447441+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [12+esp]
	ror	edx,14
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	ebx,DWORD [40+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3049323471+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	ebx,DWORD [44+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3921009573+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [4+esp]
	ror	edx,14
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	ebx,DWORD [48+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[961987163+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [esp]
	ror	edx,14
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	ebx,DWORD [52+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1508970993+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [28+esp]
	ror	edx,14
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	ebx,DWORD [56+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2453635748+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	ebx,DWORD [60+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2870763221+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [20+esp]
	ror	edx,14
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	ebx,DWORD [64+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3624381080+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	ebx,DWORD [68+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[310598401+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [12+esp]
	ror	edx,14
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	ebx,DWORD [72+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[607225278+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	ebx,DWORD [76+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1426881987+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [4+esp]
	ror	edx,14
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	ebx,DWORD [80+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1925078388+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [esp]
	ror	edx,14
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	ebx,DWORD [84+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2162078206+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	ecx,edx
	mov	esi,DWORD [28+esp]
	ror	edx,14
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	ebx,DWORD [88+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2614888103+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	esi,edx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	ebx,DWORD [92+esp]
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3248222580+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [36+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [88+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [32+esp]
	shr	edi,10
	add	ebx,DWORD [68+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [32+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3835390401+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [40+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [92+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [36+esp]
	shr	edi,10
	add	ebx,DWORD [72+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [36+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[4022224774+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [44+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [32+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [40+esp]
	shr	edi,10
	add	ebx,DWORD [76+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [40+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[264347078+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [48+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [36+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [44+esp]
	shr	edi,10
	add	ebx,DWORD [80+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [44+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[604807628+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [52+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [40+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [48+esp]
	shr	edi,10
	add	ebx,DWORD [84+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [48+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[770255983+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [56+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [44+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [52+esp]
	shr	edi,10
	add	ebx,DWORD [88+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [52+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1249150122+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [60+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [48+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [56+esp]
	shr	edi,10
	add	ebx,DWORD [92+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [56+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1555081692+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [64+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [52+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [60+esp]
	shr	edi,10
	add	ebx,DWORD [32+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [60+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1996064986+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [68+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [56+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [64+esp]
	shr	edi,10
	add	ebx,DWORD [36+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [64+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2554220882+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [72+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [60+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [68+esp]
	shr	edi,10
	add	ebx,DWORD [40+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [68+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2821834349+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [76+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [64+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [72+esp]
	shr	edi,10
	add	ebx,DWORD [44+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [72+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2952996808+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [80+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [68+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [76+esp]
	shr	edi,10
	add	ebx,DWORD [48+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [76+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3210313671+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [84+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [72+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [80+esp]
	shr	edi,10
	add	ebx,DWORD [52+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [80+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3336571891+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [88+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [76+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [84+esp]
	shr	edi,10
	add	ebx,DWORD [56+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [84+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3584528711+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [92+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [80+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [88+esp]
	shr	edi,10
	add	ebx,DWORD [60+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [88+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[113926993+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [32+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [84+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [92+esp]
	shr	edi,10
	add	ebx,DWORD [64+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [92+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[338241895+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [36+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [88+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [32+esp]
	shr	edi,10
	add	ebx,DWORD [68+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [32+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[666307205+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [40+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [92+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [36+esp]
	shr	edi,10
	add	ebx,DWORD [72+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [36+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[773529912+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [44+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [32+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [40+esp]
	shr	edi,10
	add	ebx,DWORD [76+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [40+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1294757372+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [48+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [36+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [44+esp]
	shr	edi,10
	add	ebx,DWORD [80+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [44+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1396182291+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [52+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [40+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [48+esp]
	shr	edi,10
	add	ebx,DWORD [84+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [48+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1695183700+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [56+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [44+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [52+esp]
	shr	edi,10
	add	ebx,DWORD [88+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [52+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1986661051+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [60+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [48+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [56+esp]
	shr	edi,10
	add	ebx,DWORD [92+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [56+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2177026350+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [64+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [52+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [60+esp]
	shr	edi,10
	add	ebx,DWORD [32+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [60+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2456956037+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [68+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [56+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [64+esp]
	shr	edi,10
	add	ebx,DWORD [36+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [64+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2730485921+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [72+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [60+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [68+esp]
	shr	edi,10
	add	ebx,DWORD [40+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [68+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2820302411+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [76+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [64+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [72+esp]
	shr	edi,10
	add	ebx,DWORD [44+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [72+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3259730800+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [80+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [68+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [76+esp]
	shr	edi,10
	add	ebx,DWORD [48+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [76+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3345764771+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [84+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [72+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [80+esp]
	shr	edi,10
	add	ebx,DWORD [52+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [80+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3516065817+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [88+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [76+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [84+esp]
	shr	edi,10
	add	ebx,DWORD [56+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [84+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3600352804+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [92+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [80+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [88+esp]
	shr	edi,10
	add	ebx,DWORD [60+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [88+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[4094571909+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [32+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [84+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [92+esp]
	shr	edi,10
	add	ebx,DWORD [64+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [92+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[275423344+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [36+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [88+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [32+esp]
	shr	edi,10
	add	ebx,DWORD [68+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [32+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[430227734+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [40+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [92+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [36+esp]
	shr	edi,10
	add	ebx,DWORD [72+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [36+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[506948616+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [44+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [32+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [40+esp]
	shr	edi,10
	add	ebx,DWORD [76+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [40+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[659060556+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [48+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [36+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [44+esp]
	shr	edi,10
	add	ebx,DWORD [80+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [44+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[883997877+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [52+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [40+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [48+esp]
	shr	edi,10
	add	ebx,DWORD [84+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [48+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[958139571+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [56+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [44+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [52+esp]
	shr	edi,10
	add	ebx,DWORD [88+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [52+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1322822218+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [60+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [48+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [56+esp]
	shr	edi,10
	add	ebx,DWORD [92+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	mov	DWORD [56+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1537002063+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [64+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [52+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [60+esp]
	shr	edi,10
	add	ebx,DWORD [32+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	mov	DWORD [60+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[1747873779+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [68+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [56+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [64+esp]
	shr	edi,10
	add	ebx,DWORD [36+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [20+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [24+esp]
	xor	edx,ecx
	mov	DWORD [64+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [28+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [4+esp]
	xor	ecx,eax
	mov	DWORD [esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[1955562222+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [72+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [12+esp]
	add	ebp,ecx
	mov	ecx,DWORD [60+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [68+esp]
	shr	edi,10
	add	ebx,DWORD [40+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [16+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [20+esp]
	xor	edx,esi
	mov	DWORD [68+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [12+esp],esi
	xor	edx,esi
	add	ebx,DWORD [24+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [esp]
	xor	esi,ebp
	mov	DWORD [28+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2024104815+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [76+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,esi
	mov	esi,DWORD [64+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [72+esp]
	shr	edi,10
	add	ebx,DWORD [44+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [12+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [16+esp]
	xor	edx,ecx
	mov	DWORD [72+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [20+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [28+esp]
	xor	ecx,eax
	mov	DWORD [24+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2227730452+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [80+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [4+esp]
	add	ebp,ecx
	mov	ecx,DWORD [68+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [76+esp]
	shr	edi,10
	add	ebx,DWORD [48+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [8+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [12+esp]
	xor	edx,esi
	mov	DWORD [76+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [4+esp],esi
	xor	edx,esi
	add	ebx,DWORD [16+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [24+esp]
	xor	esi,ebp
	mov	DWORD [20+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2361852424+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [84+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,esi
	mov	esi,DWORD [72+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [80+esp]
	shr	edi,10
	add	ebx,DWORD [52+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [4+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [8+esp]
	xor	edx,ecx
	mov	DWORD [80+esp],ebx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [12+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [20+esp]
	xor	ecx,eax
	mov	DWORD [16+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[2428436474+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [88+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [28+esp]
	add	ebp,ecx
	mov	ecx,DWORD [76+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [84+esp]
	shr	edi,10
	add	ebx,DWORD [56+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [4+esp]
	xor	edx,esi
	mov	DWORD [84+esp],ebx
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [28+esp],esi
	xor	edx,esi
	add	ebx,DWORD [8+esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [16+esp]
	xor	esi,ebp
	mov	DWORD [12+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[2756734187+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	mov	ecx,DWORD [92+esp]
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,esi
	mov	esi,DWORD [80+esp]
	mov	ebx,ecx
	ror	ecx,11
	mov	edi,esi
	ror	esi,2
	xor	ecx,ebx
	shr	ebx,3
	ror	ecx,7
	xor	esi,edi
	xor	ebx,ecx
	ror	esi,17
	add	ebx,DWORD [88+esp]
	shr	edi,10
	add	ebx,DWORD [60+esp]
	mov	ecx,edx
	xor	edi,esi
	mov	esi,DWORD [28+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [esp]
	xor	edx,ecx
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	add	ebx,DWORD [4+esp]
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	ebx,edi
	ror	ecx,9
	mov	esi,eax
	mov	edi,DWORD [12+esp]
	xor	ecx,eax
	mov	DWORD [8+esp],eax
	xor	eax,edi
	ror	ecx,11
	and	ebp,eax
	lea	edx,[3204031479+edx*1+ebx]
	xor	ecx,esi
	xor	ebp,edi
	mov	esi,DWORD [32+esp]
	ror	ecx,2
	add	ebp,edx
	add	edx,DWORD [20+esp]
	add	ebp,ecx
	mov	ecx,DWORD [84+esp]
	mov	ebx,esi
	ror	esi,11
	mov	edi,ecx
	ror	ecx,2
	xor	esi,ebx
	shr	ebx,3
	ror	esi,7
	xor	ecx,edi
	xor	ebx,esi
	ror	ecx,17
	add	ebx,DWORD [92+esp]
	shr	edi,10
	add	ebx,DWORD [64+esp]
	mov	esi,edx
	xor	edi,ecx
	mov	ecx,DWORD [24+esp]
	ror	edx,14
	add	ebx,edi
	mov	edi,DWORD [28+esp]
	xor	edx,esi
	xor	ecx,edi
	ror	edx,5
	and	ecx,esi
	mov	DWORD [20+esp],esi
	xor	edx,esi
	add	ebx,DWORD [esp]
	xor	edi,ecx
	ror	edx,6
	mov	esi,ebp
	add	ebx,edi
	ror	esi,9
	mov	ecx,ebp
	mov	edi,DWORD [8+esp]
	xor	esi,ebp
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	ror	esi,11
	and	eax,ebp
	lea	edx,[3329325298+edx*1+ebx]
	xor	esi,ecx
	xor	eax,edi
	ror	esi,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,esi
	mov	esi,DWORD [96+esp]
	xor	ebp,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebp,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebp
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebp
	xor	ebp,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ebx,DWORD [24+esp]
	mov	ecx,DWORD [28+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ebx,DWORD [24+esi]
	add	ecx,DWORD [28+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [24+esi],ebx
	mov	DWORD [28+esi],ecx
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ebx
	mov	DWORD [28+esp],ecx
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$010grand_loop
	mov	esp,DWORD [108+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$004shaext:
	sub	esp,32
	movdqu	xmm1,[esi]
	lea	ebp,[128+ebp]
	movdqu	xmm2,[16+esi]
	movdqa	xmm7,[128+ebp]
	pshufd	xmm0,xmm1,27
	pshufd	xmm1,xmm1,177
	pshufd	xmm2,xmm2,27
db	102,15,58,15,202,8
	punpcklqdq	xmm2,xmm0
	jmp	NEAR L$011loop_shaext
align	16
L$011loop_shaext:
	movdqu	xmm3,[edi]
	movdqu	xmm4,[16+edi]
	movdqu	xmm5,[32+edi]
db	102,15,56,0,223
	movdqu	xmm6,[48+edi]
	movdqa	[16+esp],xmm2
	movdqa	xmm0,[ebp-128]
	paddd	xmm0,xmm3
db	102,15,56,0,231
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	nop
	movdqa	[esp],xmm1
db	15,56,203,202
	movdqa	xmm0,[ebp-112]
	paddd	xmm0,xmm4
db	102,15,56,0,239
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	lea	edi,[64+edi]
db	15,56,204,220
db	15,56,203,202
	movdqa	xmm0,[ebp-96]
	paddd	xmm0,xmm5
db	102,15,56,0,247
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm6
db	102,15,58,15,253,4
	nop
	paddd	xmm3,xmm7
db	15,56,204,229
db	15,56,203,202
	movdqa	xmm0,[ebp-80]
	paddd	xmm0,xmm6
db	15,56,205,222
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm3
db	102,15,58,15,254,4
	nop
	paddd	xmm4,xmm7
db	15,56,204,238
db	15,56,203,202
	movdqa	xmm0,[ebp-64]
	paddd	xmm0,xmm3
db	15,56,205,227
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm4
db	102,15,58,15,251,4
	nop
	paddd	xmm5,xmm7
db	15,56,204,243
db	15,56,203,202
	movdqa	xmm0,[ebp-48]
	paddd	xmm0,xmm4
db	15,56,205,236
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm5
db	102,15,58,15,252,4
	nop
	paddd	xmm6,xmm7
db	15,56,204,220
db	15,56,203,202
	movdqa	xmm0,[ebp-32]
	paddd	xmm0,xmm5
db	15,56,205,245
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm6
db	102,15,58,15,253,4
	nop
	paddd	xmm3,xmm7
db	15,56,204,229
db	15,56,203,202
	movdqa	xmm0,[ebp-16]
	paddd	xmm0,xmm6
db	15,56,205,222
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm3
db	102,15,58,15,254,4
	nop
	paddd	xmm4,xmm7
db	15,56,204,238
db	15,56,203,202
	movdqa	xmm0,[ebp]
	paddd	xmm0,xmm3
db	15,56,205,227
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm4
db	102,15,58,15,251,4
	nop
	paddd	xmm5,xmm7
db	15,56,204,243
db	15,56,203,202
	movdqa	xmm0,[16+ebp]
	paddd	xmm0,xmm4
db	15,56,205,236
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm5
db	102,15,58,15,252,4
	nop
	paddd	xmm6,xmm7
db	15,56,204,220
db	15,56,203,202
	movdqa	xmm0,[32+ebp]
	paddd	xmm0,xmm5
db	15,56,205,245
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm6
db	102,15,58,15,253,4
	nop
	paddd	xmm3,xmm7
db	15,56,204,229
db	15,56,203,202
	movdqa	xmm0,[48+ebp]
	paddd	xmm0,xmm6
db	15,56,205,222
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm3
db	102,15,58,15,254,4
	nop
	paddd	xmm4,xmm7
db	15,56,204,238
db	15,56,203,202
	movdqa	xmm0,[64+ebp]
	paddd	xmm0,xmm3
db	15,56,205,227
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm4
db	102,15,58,15,251,4
	nop
	paddd	xmm5,xmm7
db	15,56,204,243
db	15,56,203,202
	movdqa	xmm0,[80+ebp]
	paddd	xmm0,xmm4
db	15,56,205,236
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	movdqa	xmm7,xmm5
db	102,15,58,15,252,4
db	15,56,203,202
	paddd	xmm6,xmm7
	movdqa	xmm0,[96+ebp]
	paddd	xmm0,xmm5
db	15,56,203,209
	pshufd	xmm0,xmm0,14
db	15,56,205,245
	movdqa	xmm7,[128+ebp]
db	15,56,203,202
	movdqa	xmm0,[112+ebp]
	paddd	xmm0,xmm6
	nop
db	15,56,203,209
	pshufd	xmm0,xmm0,14
	cmp	eax,edi
	nop
db	15,56,203,202
	paddd	xmm2,[16+esp]
	paddd	xmm1,[esp]
	jnz	NEAR L$011loop_shaext
	pshufd	xmm2,xmm2,177
	pshufd	xmm7,xmm1,27
	pshufd	xmm1,xmm1,177
	punpckhqdq	xmm1,xmm2
db	102,15,58,15,215,8
	mov	esp,DWORD [44+esp]
	movdqu	[esi],xmm1
	movdqu	[16+esi],xmm2
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$006SSSE3:
	lea	esp,[esp-96]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [4+esp],ebx
	xor	ebx,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edi
	mov	edx,DWORD [16+esi]
	mov	edi,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	movdqa	xmm7,[256+ebp]
	jmp	NEAR L$012grand_ssse3
align	16
L$012grand_ssse3:
	movdqu	xmm0,[edi]
	movdqu	xmm1,[16+edi]
	movdqu	xmm2,[32+edi]
	movdqu	xmm3,[48+edi]
	add	edi,64
db	102,15,56,0,199
	mov	DWORD [100+esp],edi
db	102,15,56,0,207
	movdqa	xmm4,[ebp]
db	102,15,56,0,215
	movdqa	xmm5,[16+ebp]
	paddd	xmm4,xmm0
db	102,15,56,0,223
	movdqa	xmm6,[32+ebp]
	paddd	xmm5,xmm1
	movdqa	xmm7,[48+ebp]
	movdqa	[32+esp],xmm4
	paddd	xmm6,xmm2
	movdqa	[48+esp],xmm5
	paddd	xmm7,xmm3
	movdqa	[64+esp],xmm6
	movdqa	[80+esp],xmm7
	jmp	NEAR L$013ssse3_00_47
align	16
L$013ssse3_00_47:
	add	ebp,64
	mov	ecx,edx
	movdqa	xmm4,xmm1
	ror	edx,14
	mov	esi,DWORD [20+esp]
	movdqa	xmm7,xmm3
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
db	102,15,58,15,224,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,250,4
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [4+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm0,xmm7
	mov	DWORD [esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm3,250
	xor	ecx,esi
	add	edx,DWORD [32+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [12+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm0,xmm4
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [36+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [8+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm0,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	pshufd	xmm7,xmm0,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [4+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[ebp]
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm0,xmm7
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	paddd	xmm6,xmm0
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	movdqa	[32+esp],xmm6
	mov	ecx,edx
	movdqa	xmm4,xmm2
	ror	edx,14
	mov	esi,DWORD [4+esp]
	movdqa	xmm7,xmm0
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
db	102,15,58,15,225,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,251,4
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [20+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm1,xmm7
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm0,250
	xor	ecx,esi
	add	edx,DWORD [48+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [28+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm1,xmm4
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [52+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [24+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm1,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	pshufd	xmm7,xmm1,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [20+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[16+ebp]
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm1,xmm7
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	paddd	xmm6,xmm1
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	movdqa	[48+esp],xmm6
	mov	ecx,edx
	movdqa	xmm4,xmm3
	ror	edx,14
	mov	esi,DWORD [20+esp]
	movdqa	xmm7,xmm1
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
db	102,15,58,15,226,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,248,4
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [4+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm2,xmm7
	mov	DWORD [esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm1,250
	xor	ecx,esi
	add	edx,DWORD [64+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [12+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm2,xmm4
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [68+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [8+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm2,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	pshufd	xmm7,xmm2,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [4+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[32+ebp]
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm2,xmm7
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	paddd	xmm6,xmm2
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	movdqa	[64+esp],xmm6
	mov	ecx,edx
	movdqa	xmm4,xmm0
	ror	edx,14
	mov	esi,DWORD [4+esp]
	movdqa	xmm7,xmm2
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
db	102,15,58,15,227,4
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
db	102,15,58,15,249,4
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	movdqa	xmm5,xmm4
	ror	edx,6
	mov	ecx,eax
	movdqa	xmm6,xmm4
	add	edx,edi
	mov	edi,DWORD [20+esp]
	psrld	xmm4,3
	mov	esi,eax
	ror	ecx,9
	paddd	xmm3,xmm7
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	psrld	xmm6,7
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	pshufd	xmm7,xmm2,250
	xor	ecx,esi
	add	edx,DWORD [80+esp]
	pslld	xmm5,14
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm4,xmm6
	add	ebx,edx
	add	edx,DWORD [28+esp]
	psrld	xmm6,11
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm4,xmm5
	mov	esi,DWORD [esp]
	xor	edx,ecx
	pslld	xmm5,11
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	pxor	xmm4,xmm6
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	movdqa	xmm6,xmm7
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	pxor	xmm4,xmm5
	mov	ecx,ebx
	add	edx,edi
	psrld	xmm7,10
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm3,xmm4
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	psrlq	xmm6,17
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	pxor	xmm7,xmm6
	and	eax,ebx
	xor	ecx,esi
	psrlq	xmm6,2
	add	edx,DWORD [84+esp]
	xor	eax,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	eax,edx
	add	edx,DWORD [24+esp]
	pshufd	xmm7,xmm7,128
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	psrldq	xmm7,8
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	paddd	xmm3,xmm7
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	pshufd	xmm7,xmm3,80
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	movdqa	xmm6,xmm7
	ror	ecx,11
	psrld	xmm7,10
	and	ebx,eax
	psrlq	xmm6,17
	xor	ecx,esi
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	ror	ecx,2
	pxor	xmm7,xmm6
	add	ebx,edx
	add	edx,DWORD [20+esp]
	psrlq	xmm6,2
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	pxor	xmm7,xmm6
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	pshufd	xmm7,xmm7,8
	xor	esi,edi
	ror	edx,5
	movdqa	xmm6,[48+ebp]
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	pslldq	xmm7,8
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	paddd	xmm3,xmm7
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	paddd	xmm6,xmm3
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	movdqa	[80+esp],xmm6
	cmp	DWORD [64+ebp],66051
	jne	NEAR L$013ssse3_00_47
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [36+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [52+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [68+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [84+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	ror	ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	ror	ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	ror	ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	ror	edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	ror	edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	ror	edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	ror	ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	ror	ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	ror	ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	esi,DWORD [96+esp]
	xor	ebx,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebx
	xor	ebx,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ecx,DWORD [24+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [28+esp]
	mov	DWORD [24+esi],ecx
	add	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esi],edi
	mov	DWORD [28+esp],edi
	mov	edi,DWORD [100+esp]
	movdqa	xmm7,[64+ebp]
	sub	ebp,192
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$012grand_ssse3
	mov	esp,DWORD [108+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$005AVX:
	and	edx,264
	cmp	edx,264
	je	NEAR L$014AVX_BMI
	lea	esp,[esp-96]
	vzeroall
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [4+esp],ebx
	xor	ebx,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edi
	mov	edx,DWORD [16+esi]
	mov	edi,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	vmovdqa	xmm7,[256+ebp]
	jmp	NEAR L$015grand_avx
align	32
L$015grand_avx:
	vmovdqu	xmm0,[edi]
	vmovdqu	xmm1,[16+edi]
	vmovdqu	xmm2,[32+edi]
	vmovdqu	xmm3,[48+edi]
	add	edi,64
	vpshufb	xmm0,xmm0,xmm7
	mov	DWORD [100+esp],edi
	vpshufb	xmm1,xmm1,xmm7
	vpshufb	xmm2,xmm2,xmm7
	vpaddd	xmm4,xmm0,[ebp]
	vpshufb	xmm3,xmm3,xmm7
	vpaddd	xmm5,xmm1,[16+ebp]
	vpaddd	xmm6,xmm2,[32+ebp]
	vpaddd	xmm7,xmm3,[48+ebp]
	vmovdqa	[32+esp],xmm4
	vmovdqa	[48+esp],xmm5
	vmovdqa	[64+esp],xmm6
	vmovdqa	[80+esp],xmm7
	jmp	NEAR L$016avx_00_47
align	16
L$016avx_00_47:
	add	ebp,64
	vpalignr	xmm4,xmm1,xmm0,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	vpalignr	xmm7,xmm3,xmm2,4
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	vpaddd	xmm0,xmm0,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm3,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	vpaddd	xmm0,xmm0,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [36+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	vpaddd	xmm0,xmm0,xmm7
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	vpshufd	xmm7,xmm0,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	vpaddd	xmm0,xmm0,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	vpaddd	xmm6,xmm0,[ebp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	vmovdqa	[32+esp],xmm6
	vpalignr	xmm4,xmm2,xmm1,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	vpalignr	xmm7,xmm0,xmm3,4
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	vpaddd	xmm1,xmm1,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm0,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	vpaddd	xmm1,xmm1,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [52+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	vpaddd	xmm1,xmm1,xmm7
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	vpshufd	xmm7,xmm1,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	vpaddd	xmm1,xmm1,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	vpaddd	xmm6,xmm1,[16+ebp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	vmovdqa	[48+esp],xmm6
	vpalignr	xmm4,xmm3,xmm2,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	vpalignr	xmm7,xmm1,xmm0,4
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	vpaddd	xmm2,xmm2,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm1,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	vpaddd	xmm2,xmm2,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [68+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	vpaddd	xmm2,xmm2,xmm7
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	vpshufd	xmm7,xmm2,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	vpaddd	xmm2,xmm2,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	vpaddd	xmm6,xmm2,[32+ebp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	vmovdqa	[64+esp],xmm6
	vpalignr	xmm4,xmm0,xmm3,4
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	vpalignr	xmm7,xmm2,xmm1,4
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm4,7
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	vpaddd	xmm3,xmm3,xmm7
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrld	xmm7,xmm4,3
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	vpslld	xmm5,xmm4,14
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	vpxor	xmm4,xmm7,xmm6
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm2,250
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpsrld	xmm6,xmm6,11
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpxor	xmm4,xmm4,xmm5
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	vpslld	xmm5,xmm5,11
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	vpsrld	xmm6,xmm7,10
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	vpxor	xmm4,xmm4,xmm5
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	vpaddd	xmm3,xmm3,xmm4
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	vpxor	xmm6,xmm6,xmm5
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	vpsrlq	xmm7,xmm7,19
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	add	edx,DWORD [84+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	vpshufd	xmm7,xmm6,132
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	vpsrldq	xmm7,xmm7,8
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	vpaddd	xmm3,xmm3,xmm7
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	vpshufd	xmm7,xmm3,80
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	vpsrld	xmm6,xmm7,10
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	vpsrlq	xmm5,xmm7,17
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	vpxor	xmm6,xmm6,xmm5
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	vpsrlq	xmm7,xmm7,19
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	vpxor	xmm6,xmm6,xmm7
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	vpshufd	xmm7,xmm6,232
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	vpslldq	xmm7,xmm7,8
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	vpaddd	xmm3,xmm3,xmm7
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	vpaddd	xmm6,xmm3,[48+ebp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	vmovdqa	[80+esp],xmm6
	cmp	DWORD [64+ebp],66051
	jne	NEAR L$016avx_00_47
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [36+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [44+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [52+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [60+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [20+esp]
	xor	edx,ecx
	mov	edi,DWORD [24+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [16+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [4+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [28+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [12+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [16+esp]
	xor	edx,ecx
	mov	edi,DWORD [20+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [12+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [28+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [68+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [8+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [12+esp]
	xor	edx,ecx
	mov	edi,DWORD [16+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [8+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [28+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [24+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [20+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [4+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [8+esp]
	xor	edx,ecx
	mov	edi,DWORD [12+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [4+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [24+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [20+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [76+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [4+esp]
	xor	edx,ecx
	mov	edi,DWORD [8+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [20+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [16+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [12+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [28+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [esp]
	xor	edx,ecx
	mov	edi,DWORD [4+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [28+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [16+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [12+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [84+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [24+esp]
	add	eax,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [28+esp]
	xor	edx,ecx
	mov	edi,DWORD [esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [24+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,eax
	add	edx,edi
	mov	edi,DWORD [12+esp]
	mov	esi,eax
	shrd	ecx,ecx,9
	mov	DWORD [8+esp],eax
	xor	ecx,eax
	xor	eax,edi
	add	edx,DWORD [4+esp]
	shrd	ecx,ecx,11
	and	ebx,eax
	xor	ecx,esi
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	shrd	ecx,ecx,2
	add	ebx,edx
	add	edx,DWORD [20+esp]
	add	ebx,ecx
	mov	ecx,edx
	shrd	edx,edx,14
	mov	esi,DWORD [24+esp]
	xor	edx,ecx
	mov	edi,DWORD [28+esp]
	xor	esi,edi
	shrd	edx,edx,5
	and	esi,ecx
	mov	DWORD [20+esp],ecx
	xor	edx,ecx
	xor	edi,esi
	shrd	edx,edx,6
	mov	ecx,ebx
	add	edx,edi
	mov	edi,DWORD [8+esp]
	mov	esi,ebx
	shrd	ecx,ecx,9
	mov	DWORD [4+esp],ebx
	xor	ecx,ebx
	xor	ebx,edi
	add	edx,DWORD [esp]
	shrd	ecx,ecx,11
	and	eax,ebx
	xor	ecx,esi
	add	edx,DWORD [92+esp]
	xor	eax,edi
	shrd	ecx,ecx,2
	add	eax,edx
	add	edx,DWORD [16+esp]
	add	eax,ecx
	mov	esi,DWORD [96+esp]
	xor	ebx,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebx
	xor	ebx,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ecx,DWORD [24+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [28+esp]
	mov	DWORD [24+esi],ecx
	add	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esi],edi
	mov	DWORD [28+esp],edi
	mov	edi,DWORD [100+esp]
	vmovdqa	xmm7,[64+ebp]
	sub	ebp,192
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$015grand_avx
	mov	esp,DWORD [108+esp]
	vzeroall
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$014AVX_BMI:
	lea	esp,[esp-96]
	vzeroall
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edi,DWORD [12+esi]
	mov	DWORD [4+esp],ebx
	xor	ebx,ecx
	mov	DWORD [8+esp],ecx
	mov	DWORD [12+esp],edi
	mov	edx,DWORD [16+esi]
	mov	edi,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	esi,DWORD [28+esi]
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [100+esp]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esp],esi
	vmovdqa	xmm7,[256+ebp]
	jmp	NEAR L$017grand_avx_bmi
align	32
L$017grand_avx_bmi:
	vmovdqu	xmm0,[edi]
	vmovdqu	xmm1,[16+edi]
	vmovdqu	xmm2,[32+edi]
	vmovdqu	xmm3,[48+edi]
	add	edi,64
	vpshufb	xmm0,xmm0,xmm7
	mov	DWORD [100+esp],edi
	vpshufb	xmm1,xmm1,xmm7
	vpshufb	xmm2,xmm2,xmm7
	vpaddd	xmm4,xmm0,[ebp]
	vpshufb	xmm3,xmm3,xmm7
	vpaddd	xmm5,xmm1,[16+ebp]
	vpaddd	xmm6,xmm2,[32+ebp]
	vpaddd	xmm7,xmm3,[48+ebp]
	vmovdqa	[32+esp],xmm4
	vmovdqa	[48+esp],xmm5
	vmovdqa	[64+esp],xmm6
	vmovdqa	[80+esp],xmm7
	jmp	NEAR L$018avx_bmi_00_47
align	16
L$018avx_bmi_00_47:
	add	ebp,64
	vpalignr	xmm4,xmm1,xmm0,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	vpalignr	xmm7,xmm3,xmm2,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	vpaddd	xmm0,xmm0,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [32+esp]
	vpshufd	xmm7,xmm3,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [36+esp]
	vpaddd	xmm0,xmm0,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm0,xmm0,xmm7
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm0,80
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [40+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm0,xmm0,xmm7
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [44+esp]
	vpaddd	xmm6,xmm0,[ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[32+esp],xmm6
	vpalignr	xmm4,xmm2,xmm1,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	vpalignr	xmm7,xmm0,xmm3,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	vpaddd	xmm1,xmm1,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [48+esp]
	vpshufd	xmm7,xmm0,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [52+esp]
	vpaddd	xmm1,xmm1,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm1,xmm1,xmm7
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm1,80
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [56+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm1,xmm1,xmm7
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [60+esp]
	vpaddd	xmm6,xmm1,[16+ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[48+esp],xmm6
	vpalignr	xmm4,xmm3,xmm2,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	vpalignr	xmm7,xmm1,xmm0,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	vpaddd	xmm2,xmm2,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [64+esp]
	vpshufd	xmm7,xmm1,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [68+esp]
	vpaddd	xmm2,xmm2,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm2,xmm2,xmm7
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm2,80
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [72+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm2,xmm2,xmm7
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [76+esp]
	vpaddd	xmm6,xmm2,[32+ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[64+esp],xmm6
	vpalignr	xmm4,xmm0,xmm3,4
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	vpalignr	xmm7,xmm2,xmm1,4
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	vpsrld	xmm6,xmm4,7
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	vpaddd	xmm3,xmm3,xmm7
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrld	xmm7,xmm4,3
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpslld	xmm5,xmm4,14
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	vpxor	xmm4,xmm7,xmm6
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [80+esp]
	vpshufd	xmm7,xmm2,250
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	vpsrld	xmm6,xmm6,11
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm4,xmm4,xmm5
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpslld	xmm5,xmm5,11
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	vpxor	xmm4,xmm4,xmm6
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpsrld	xmm6,xmm7,10
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpxor	xmm4,xmm4,xmm5
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpsrlq	xmm5,xmm7,17
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [84+esp]
	vpaddd	xmm3,xmm3,xmm4
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm5
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpsrlq	xmm7,xmm7,19
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpxor	xmm6,xmm6,xmm7
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	vpshufd	xmm7,xmm6,132
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	vpsrldq	xmm7,xmm7,8
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	vpaddd	xmm3,xmm3,xmm7
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	vpshufd	xmm7,xmm3,80
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [88+esp]
	vpsrld	xmm6,xmm7,10
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	vpsrlq	xmm5,xmm7,17
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	vpxor	xmm6,xmm6,xmm5
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	vpsrlq	xmm7,xmm7,19
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	vpxor	xmm6,xmm6,xmm7
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	vpshufd	xmm7,xmm6,232
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	vpslldq	xmm7,xmm7,8
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	vpaddd	xmm3,xmm3,xmm7
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [92+esp]
	vpaddd	xmm6,xmm3,[48+ebp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	vmovdqa	[80+esp],xmm6
	cmp	DWORD [64+ebp],66051
	jne	NEAR L$018avx_bmi_00_47
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [32+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [36+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [40+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [44+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [48+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [52+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [56+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [60+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [16+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [24+esp]
	xor	ecx,edi
	and	edx,DWORD [20+esp]
	mov	DWORD [esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [4+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [28+esp]
	and	ebx,eax
	add	edx,DWORD [64+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [12+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [12+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [20+esp]
	xor	ecx,edi
	and	edx,DWORD [16+esp]
	mov	DWORD [28+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [24+esp]
	and	eax,ebx
	add	edx,DWORD [68+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [8+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [8+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [16+esp]
	xor	ecx,edi
	and	edx,DWORD [12+esp]
	mov	DWORD [24+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [28+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [20+esp]
	and	ebx,eax
	add	edx,DWORD [72+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [4+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [4+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [12+esp]
	xor	ecx,edi
	and	edx,DWORD [8+esp]
	mov	DWORD [20+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [24+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [16+esp]
	and	eax,ebx
	add	edx,DWORD [76+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [8+esp]
	xor	ecx,edi
	and	edx,DWORD [4+esp]
	mov	DWORD [16+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [20+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [12+esp]
	and	ebx,eax
	add	edx,DWORD [80+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [28+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [28+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [4+esp]
	xor	ecx,edi
	and	edx,DWORD [esp]
	mov	DWORD [12+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [16+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [8+esp]
	and	eax,ebx
	add	edx,DWORD [84+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [24+esp]
	lea	eax,[ecx*1+eax]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [24+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [esp]
	xor	ecx,edi
	and	edx,DWORD [28+esp]
	mov	DWORD [8+esp],eax
	or	edx,esi
	rorx	edi,eax,2
	rorx	esi,eax,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,eax,22
	xor	esi,edi
	mov	edi,DWORD [12+esp]
	xor	ecx,esi
	xor	eax,edi
	add	edx,DWORD [4+esp]
	and	ebx,eax
	add	edx,DWORD [88+esp]
	xor	ebx,edi
	add	ecx,edx
	add	edx,DWORD [20+esp]
	lea	ebx,[ecx*1+ebx]
	rorx	ecx,edx,6
	rorx	esi,edx,11
	mov	DWORD [20+esp],edx
	rorx	edi,edx,25
	xor	ecx,esi
	andn	esi,edx,DWORD [28+esp]
	xor	ecx,edi
	and	edx,DWORD [24+esp]
	mov	DWORD [4+esp],ebx
	or	edx,esi
	rorx	edi,ebx,2
	rorx	esi,ebx,13
	lea	edx,[ecx*1+edx]
	rorx	ecx,ebx,22
	xor	esi,edi
	mov	edi,DWORD [8+esp]
	xor	ecx,esi
	xor	ebx,edi
	add	edx,DWORD [esp]
	and	eax,ebx
	add	edx,DWORD [92+esp]
	xor	eax,edi
	add	ecx,edx
	add	edx,DWORD [16+esp]
	lea	eax,[ecx*1+eax]
	mov	esi,DWORD [96+esp]
	xor	ebx,edi
	mov	ecx,DWORD [12+esp]
	add	eax,DWORD [esi]
	add	ebx,DWORD [4+esi]
	add	edi,DWORD [8+esi]
	add	ecx,DWORD [12+esi]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	mov	DWORD [8+esi],edi
	mov	DWORD [12+esi],ecx
	mov	DWORD [4+esp],ebx
	xor	ebx,edi
	mov	DWORD [8+esp],edi
	mov	DWORD [12+esp],ecx
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	add	edx,DWORD [16+esi]
	add	edi,DWORD [20+esi]
	add	ecx,DWORD [24+esi]
	mov	DWORD [16+esi],edx
	mov	DWORD [20+esi],edi
	mov	DWORD [20+esp],edi
	mov	edi,DWORD [28+esp]
	mov	DWORD [24+esi],ecx
	add	edi,DWORD [28+esi]
	mov	DWORD [24+esp],ecx
	mov	DWORD [28+esi],edi
	mov	DWORD [28+esp],edi
	mov	edi,DWORD [100+esp]
	vmovdqa	xmm7,[64+ebp]
	sub	ebp,192
	cmp	edi,DWORD [104+esp]
	jb	NEAR L$017grand_avx_bmi
	mov	esp,DWORD [108+esp]
	vzeroall
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                           node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/sha/sha512-586.asm                   0000664 0000000 0000000 00000130311 14746647661 0026507 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
;extern	_OPENSSL_ia32cap_P
global	_sha512_block_data_order
align	16
_sha512_block_data_order:
L$_sha512_block_data_order_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [20+esp]
	mov	edi,DWORD [24+esp]
	mov	eax,DWORD [28+esp]
	mov	ebx,esp
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	ebp,[(L$001K512-L$000pic_point)+ebp]
	sub	esp,16
	and	esp,-64
	shl	eax,7
	add	eax,edi
	mov	DWORD [esp],esi
	mov	DWORD [4+esp],edi
	mov	DWORD [8+esp],eax
	mov	DWORD [12+esp],ebx
	lea	edx,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [edx]
	test	ecx,67108864
	jz	NEAR L$002loop_x86
	mov	edx,DWORD [4+edx]
	movq	mm0,[esi]
	and	ecx,16777216
	movq	mm1,[8+esi]
	and	edx,512
	movq	mm2,[16+esi]
	or	ecx,edx
	movq	mm3,[24+esi]
	movq	mm4,[32+esi]
	movq	mm5,[40+esi]
	movq	mm6,[48+esi]
	movq	mm7,[56+esi]
	cmp	ecx,16777728
	je	NEAR L$003SSSE3
	sub	esp,80
	jmp	NEAR L$004loop_sse2
align	16
L$004loop_sse2:
	movq	[8+esp],mm1
	movq	[16+esp],mm2
	movq	[24+esp],mm3
	movq	[40+esp],mm5
	movq	[48+esp],mm6
	pxor	mm2,mm1
	movq	[56+esp],mm7
	movq	mm3,mm0
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	add	edi,8
	mov	edx,15
	bswap	eax
	bswap	ebx
	jmp	NEAR L$00500_14_sse2
align	16
L$00500_14_sse2:
	movd	mm1,eax
	mov	eax,DWORD [edi]
	movd	mm7,ebx
	mov	ebx,DWORD [4+edi]
	add	edi,8
	bswap	eax
	bswap	ebx
	punpckldq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	mm0,mm3
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm3,mm2
	movq	mm2,mm0
	add	ebp,8
	paddq	mm3,mm6
	movq	mm6,[48+esp]
	dec	edx
	jnz	NEAR L$00500_14_sse2
	movd	mm1,eax
	movd	mm7,ebx
	punpckldq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	mm0,mm3
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm7,[192+esp]
	paddq	mm3,mm2
	movq	mm2,mm0
	add	ebp,8
	paddq	mm3,mm6
	pxor	mm0,mm0
	mov	edx,32
	jmp	NEAR L$00616_79_sse2
align	16
L$00616_79_sse2:
	movq	mm5,[88+esp]
	movq	mm1,mm7
	psrlq	mm7,1
	movq	mm6,mm5
	psrlq	mm5,6
	psllq	mm1,56
	paddq	mm0,mm3
	movq	mm3,mm7
	psrlq	mm7,6
	pxor	mm3,mm1
	psllq	mm1,7
	pxor	mm3,mm7
	psrlq	mm7,1
	pxor	mm3,mm1
	movq	mm1,mm5
	psrlq	mm5,13
	pxor	mm7,mm3
	psllq	mm6,3
	pxor	mm1,mm5
	paddq	mm7,[200+esp]
	pxor	mm1,mm6
	psrlq	mm5,42
	paddq	mm7,[128+esp]
	pxor	mm1,mm5
	psllq	mm6,42
	movq	mm5,[40+esp]
	pxor	mm1,mm6
	movq	mm6,[48+esp]
	paddq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm7,[192+esp]
	paddq	mm2,mm6
	add	ebp,8
	movq	mm5,[88+esp]
	movq	mm1,mm7
	psrlq	mm7,1
	movq	mm6,mm5
	psrlq	mm5,6
	psllq	mm1,56
	paddq	mm2,mm3
	movq	mm3,mm7
	psrlq	mm7,6
	pxor	mm3,mm1
	psllq	mm1,7
	pxor	mm3,mm7
	psrlq	mm7,1
	pxor	mm3,mm1
	movq	mm1,mm5
	psrlq	mm5,13
	pxor	mm7,mm3
	psllq	mm6,3
	pxor	mm1,mm5
	paddq	mm7,[200+esp]
	pxor	mm1,mm6
	psrlq	mm5,42
	paddq	mm7,[128+esp]
	pxor	mm1,mm5
	psllq	mm6,42
	movq	mm5,[40+esp]
	pxor	mm1,mm6
	movq	mm6,[48+esp]
	paddq	mm7,mm1
	movq	mm1,mm4
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	movq	[72+esp],mm7
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	paddq	mm7,[ebp]
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	sub	esp,8
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm7,[192+esp]
	paddq	mm0,mm6
	add	ebp,8
	dec	edx
	jnz	NEAR L$00616_79_sse2
	paddq	mm0,mm3
	movq	mm1,[8+esp]
	movq	mm3,[24+esp]
	movq	mm5,[40+esp]
	movq	mm6,[48+esp]
	movq	mm7,[56+esp]
	pxor	mm2,mm1
	paddq	mm0,[esi]
	paddq	mm1,[8+esi]
	paddq	mm2,[16+esi]
	paddq	mm3,[24+esi]
	paddq	mm4,[32+esi]
	paddq	mm5,[40+esi]
	paddq	mm6,[48+esi]
	paddq	mm7,[56+esi]
	mov	eax,640
	movq	[esi],mm0
	movq	[8+esi],mm1
	movq	[16+esi],mm2
	movq	[24+esi],mm3
	movq	[32+esi],mm4
	movq	[40+esi],mm5
	movq	[48+esi],mm6
	movq	[56+esi],mm7
	lea	esp,[eax*1+esp]
	sub	ebp,eax
	cmp	edi,DWORD [88+esp]
	jb	NEAR L$004loop_sse2
	mov	esp,DWORD [92+esp]
	emms
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	32
L$003SSSE3:
	lea	edx,[esp-64]
	sub	esp,256
	movdqa	xmm1,[640+ebp]
	movdqu	xmm0,[edi]
db	102,15,56,0,193
	movdqa	xmm3,[ebp]
	movdqa	xmm2,xmm1
	movdqu	xmm1,[16+edi]
	paddq	xmm3,xmm0
db	102,15,56,0,202
	movdqa	[edx-128],xmm3
	movdqa	xmm4,[16+ebp]
	movdqa	xmm3,xmm2
	movdqu	xmm2,[32+edi]
	paddq	xmm4,xmm1
db	102,15,56,0,211
	movdqa	[edx-112],xmm4
	movdqa	xmm5,[32+ebp]
	movdqa	xmm4,xmm3
	movdqu	xmm3,[48+edi]
	paddq	xmm5,xmm2
db	102,15,56,0,220
	movdqa	[edx-96],xmm5
	movdqa	xmm6,[48+ebp]
	movdqa	xmm5,xmm4
	movdqu	xmm4,[64+edi]
	paddq	xmm6,xmm3
db	102,15,56,0,229
	movdqa	[edx-80],xmm6
	movdqa	xmm7,[64+ebp]
	movdqa	xmm6,xmm5
	movdqu	xmm5,[80+edi]
	paddq	xmm7,xmm4
db	102,15,56,0,238
	movdqa	[edx-64],xmm7
	movdqa	[edx],xmm0
	movdqa	xmm0,[80+ebp]
	movdqa	xmm7,xmm6
	movdqu	xmm6,[96+edi]
	paddq	xmm0,xmm5
db	102,15,56,0,247
	movdqa	[edx-48],xmm0
	movdqa	[16+edx],xmm1
	movdqa	xmm1,[96+ebp]
	movdqa	xmm0,xmm7
	movdqu	xmm7,[112+edi]
	paddq	xmm1,xmm6
db	102,15,56,0,248
	movdqa	[edx-32],xmm1
	movdqa	[32+edx],xmm2
	movdqa	xmm2,[112+ebp]
	movdqa	xmm0,[edx]
	paddq	xmm2,xmm7
	movdqa	[edx-16],xmm2
	nop
align	32
L$007loop_ssse3:
	movdqa	xmm2,[16+edx]
	movdqa	[48+edx],xmm3
	lea	ebp,[128+ebp]
	movq	[8+esp],mm1
	mov	ebx,edi
	movq	[16+esp],mm2
	lea	edi,[128+edi]
	movq	[24+esp],mm3
	cmp	edi,eax
	movq	[40+esp],mm5
	cmovb	ebx,edi
	movq	[48+esp],mm6
	mov	ecx,4
	pxor	mm2,mm1
	movq	[56+esp],mm7
	pxor	mm3,mm3
	jmp	NEAR L$00800_47_ssse3
align	32
L$00800_47_ssse3:
	movdqa	xmm3,xmm5
	movdqa	xmm1,xmm2
db	102,15,58,15,208,8
	movdqa	[edx],xmm4
db	102,15,58,15,220,8
	movdqa	xmm4,xmm2
	psrlq	xmm2,7
	paddq	xmm0,xmm3
	movdqa	xmm3,xmm4
	psrlq	xmm4,1
	psllq	xmm3,56
	pxor	xmm2,xmm4
	psrlq	xmm4,7
	pxor	xmm2,xmm3
	psllq	xmm3,7
	pxor	xmm2,xmm4
	movdqa	xmm4,xmm7
	pxor	xmm2,xmm3
	movdqa	xmm3,xmm7
	psrlq	xmm4,6
	paddq	xmm0,xmm2
	movdqa	xmm2,xmm7
	psrlq	xmm3,19
	psllq	xmm2,3
	pxor	xmm4,xmm3
	psrlq	xmm3,42
	pxor	xmm4,xmm2
	psllq	xmm2,42
	pxor	xmm4,xmm3
	movdqa	xmm3,[32+edx]
	pxor	xmm4,xmm2
	movdqa	xmm2,[ebp]
	movq	mm1,mm4
	paddq	xmm0,xmm4
	movq	mm7,[edx-128]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	paddq	xmm2,xmm0
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-120]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-128],xmm2
	movdqa	xmm4,xmm6
	movdqa	xmm2,xmm3
db	102,15,58,15,217,8
	movdqa	[16+edx],xmm5
db	102,15,58,15,229,8
	movdqa	xmm5,xmm3
	psrlq	xmm3,7
	paddq	xmm1,xmm4
	movdqa	xmm4,xmm5
	psrlq	xmm5,1
	psllq	xmm4,56
	pxor	xmm3,xmm5
	psrlq	xmm5,7
	pxor	xmm3,xmm4
	psllq	xmm4,7
	pxor	xmm3,xmm5
	movdqa	xmm5,xmm0
	pxor	xmm3,xmm4
	movdqa	xmm4,xmm0
	psrlq	xmm5,6
	paddq	xmm1,xmm3
	movdqa	xmm3,xmm0
	psrlq	xmm4,19
	psllq	xmm3,3
	pxor	xmm5,xmm4
	psrlq	xmm4,42
	pxor	xmm5,xmm3
	psllq	xmm3,42
	pxor	xmm5,xmm4
	movdqa	xmm4,[48+edx]
	pxor	xmm5,xmm3
	movdqa	xmm3,[16+ebp]
	movq	mm1,mm4
	paddq	xmm1,xmm5
	movq	mm7,[edx-112]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	paddq	xmm3,xmm1
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-104]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-112],xmm3
	movdqa	xmm5,xmm7
	movdqa	xmm3,xmm4
db	102,15,58,15,226,8
	movdqa	[32+edx],xmm6
db	102,15,58,15,238,8
	movdqa	xmm6,xmm4
	psrlq	xmm4,7
	paddq	xmm2,xmm5
	movdqa	xmm5,xmm6
	psrlq	xmm6,1
	psllq	xmm5,56
	pxor	xmm4,xmm6
	psrlq	xmm6,7
	pxor	xmm4,xmm5
	psllq	xmm5,7
	pxor	xmm4,xmm6
	movdqa	xmm6,xmm1
	pxor	xmm4,xmm5
	movdqa	xmm5,xmm1
	psrlq	xmm6,6
	paddq	xmm2,xmm4
	movdqa	xmm4,xmm1
	psrlq	xmm5,19
	psllq	xmm4,3
	pxor	xmm6,xmm5
	psrlq	xmm5,42
	pxor	xmm6,xmm4
	psllq	xmm4,42
	pxor	xmm6,xmm5
	movdqa	xmm5,[edx]
	pxor	xmm6,xmm4
	movdqa	xmm4,[32+ebp]
	movq	mm1,mm4
	paddq	xmm2,xmm6
	movq	mm7,[edx-96]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	paddq	xmm4,xmm2
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-88]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-96],xmm4
	movdqa	xmm6,xmm0
	movdqa	xmm4,xmm5
db	102,15,58,15,235,8
	movdqa	[48+edx],xmm7
db	102,15,58,15,247,8
	movdqa	xmm7,xmm5
	psrlq	xmm5,7
	paddq	xmm3,xmm6
	movdqa	xmm6,xmm7
	psrlq	xmm7,1
	psllq	xmm6,56
	pxor	xmm5,xmm7
	psrlq	xmm7,7
	pxor	xmm5,xmm6
	psllq	xmm6,7
	pxor	xmm5,xmm7
	movdqa	xmm7,xmm2
	pxor	xmm5,xmm6
	movdqa	xmm6,xmm2
	psrlq	xmm7,6
	paddq	xmm3,xmm5
	movdqa	xmm5,xmm2
	psrlq	xmm6,19
	psllq	xmm5,3
	pxor	xmm7,xmm6
	psrlq	xmm6,42
	pxor	xmm7,xmm5
	psllq	xmm5,42
	pxor	xmm7,xmm6
	movdqa	xmm6,[16+edx]
	pxor	xmm7,xmm5
	movdqa	xmm5,[48+ebp]
	movq	mm1,mm4
	paddq	xmm3,xmm7
	movq	mm7,[edx-80]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	paddq	xmm5,xmm3
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-72]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-80],xmm5
	movdqa	xmm7,xmm1
	movdqa	xmm5,xmm6
db	102,15,58,15,244,8
	movdqa	[edx],xmm0
db	102,15,58,15,248,8
	movdqa	xmm0,xmm6
	psrlq	xmm6,7
	paddq	xmm4,xmm7
	movdqa	xmm7,xmm0
	psrlq	xmm0,1
	psllq	xmm7,56
	pxor	xmm6,xmm0
	psrlq	xmm0,7
	pxor	xmm6,xmm7
	psllq	xmm7,7
	pxor	xmm6,xmm0
	movdqa	xmm0,xmm3
	pxor	xmm6,xmm7
	movdqa	xmm7,xmm3
	psrlq	xmm0,6
	paddq	xmm4,xmm6
	movdqa	xmm6,xmm3
	psrlq	xmm7,19
	psllq	xmm6,3
	pxor	xmm0,xmm7
	psrlq	xmm7,42
	pxor	xmm0,xmm6
	psllq	xmm6,42
	pxor	xmm0,xmm7
	movdqa	xmm7,[32+edx]
	pxor	xmm0,xmm6
	movdqa	xmm6,[64+ebp]
	movq	mm1,mm4
	paddq	xmm4,xmm0
	movq	mm7,[edx-64]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	paddq	xmm6,xmm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-56]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-64],xmm6
	movdqa	xmm0,xmm2
	movdqa	xmm6,xmm7
db	102,15,58,15,253,8
	movdqa	[16+edx],xmm1
db	102,15,58,15,193,8
	movdqa	xmm1,xmm7
	psrlq	xmm7,7
	paddq	xmm5,xmm0
	movdqa	xmm0,xmm1
	psrlq	xmm1,1
	psllq	xmm0,56
	pxor	xmm7,xmm1
	psrlq	xmm1,7
	pxor	xmm7,xmm0
	psllq	xmm0,7
	pxor	xmm7,xmm1
	movdqa	xmm1,xmm4
	pxor	xmm7,xmm0
	movdqa	xmm0,xmm4
	psrlq	xmm1,6
	paddq	xmm5,xmm7
	movdqa	xmm7,xmm4
	psrlq	xmm0,19
	psllq	xmm7,3
	pxor	xmm1,xmm0
	psrlq	xmm0,42
	pxor	xmm1,xmm7
	psllq	xmm7,42
	pxor	xmm1,xmm0
	movdqa	xmm0,[48+edx]
	pxor	xmm1,xmm7
	movdqa	xmm7,[80+ebp]
	movq	mm1,mm4
	paddq	xmm5,xmm1
	movq	mm7,[edx-48]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	paddq	xmm7,xmm5
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-40]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-48],xmm7
	movdqa	xmm1,xmm3
	movdqa	xmm7,xmm0
db	102,15,58,15,198,8
	movdqa	[32+edx],xmm2
db	102,15,58,15,202,8
	movdqa	xmm2,xmm0
	psrlq	xmm0,7
	paddq	xmm6,xmm1
	movdqa	xmm1,xmm2
	psrlq	xmm2,1
	psllq	xmm1,56
	pxor	xmm0,xmm2
	psrlq	xmm2,7
	pxor	xmm0,xmm1
	psllq	xmm1,7
	pxor	xmm0,xmm2
	movdqa	xmm2,xmm5
	pxor	xmm0,xmm1
	movdqa	xmm1,xmm5
	psrlq	xmm2,6
	paddq	xmm6,xmm0
	movdqa	xmm0,xmm5
	psrlq	xmm1,19
	psllq	xmm0,3
	pxor	xmm2,xmm1
	psrlq	xmm1,42
	pxor	xmm2,xmm0
	psllq	xmm0,42
	pxor	xmm2,xmm1
	movdqa	xmm1,[edx]
	pxor	xmm2,xmm0
	movdqa	xmm0,[96+ebp]
	movq	mm1,mm4
	paddq	xmm6,xmm2
	movq	mm7,[edx-32]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	paddq	xmm0,xmm6
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-24]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-32],xmm0
	movdqa	xmm2,xmm4
	movdqa	xmm0,xmm1
db	102,15,58,15,207,8
	movdqa	[48+edx],xmm3
db	102,15,58,15,211,8
	movdqa	xmm3,xmm1
	psrlq	xmm1,7
	paddq	xmm7,xmm2
	movdqa	xmm2,xmm3
	psrlq	xmm3,1
	psllq	xmm2,56
	pxor	xmm1,xmm3
	psrlq	xmm3,7
	pxor	xmm1,xmm2
	psllq	xmm2,7
	pxor	xmm1,xmm3
	movdqa	xmm3,xmm6
	pxor	xmm1,xmm2
	movdqa	xmm2,xmm6
	psrlq	xmm3,6
	paddq	xmm7,xmm1
	movdqa	xmm1,xmm6
	psrlq	xmm2,19
	psllq	xmm1,3
	pxor	xmm3,xmm2
	psrlq	xmm2,42
	pxor	xmm3,xmm1
	psllq	xmm1,42
	pxor	xmm3,xmm2
	movdqa	xmm2,[16+edx]
	pxor	xmm3,xmm1
	movdqa	xmm1,[112+ebp]
	movq	mm1,mm4
	paddq	xmm7,xmm3
	movq	mm7,[edx-16]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	paddq	xmm1,xmm7
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-8]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-16],xmm1
	lea	ebp,[128+ebp]
	dec	ecx
	jnz	NEAR L$00800_47_ssse3
	movdqa	xmm1,[ebp]
	lea	ebp,[ebp-640]
	movdqu	xmm0,[ebx]
db	102,15,56,0,193
	movdqa	xmm3,[ebp]
	movdqa	xmm2,xmm1
	movdqu	xmm1,[16+ebx]
	paddq	xmm3,xmm0
db	102,15,56,0,202
	movq	mm1,mm4
	movq	mm7,[edx-128]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-120]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-128],xmm3
	movdqa	xmm4,[16+ebp]
	movdqa	xmm3,xmm2
	movdqu	xmm2,[32+ebx]
	paddq	xmm4,xmm1
db	102,15,56,0,211
	movq	mm1,mm4
	movq	mm7,[edx-112]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-104]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-112],xmm4
	movdqa	xmm5,[32+ebp]
	movdqa	xmm4,xmm3
	movdqu	xmm3,[48+ebx]
	paddq	xmm5,xmm2
db	102,15,56,0,220
	movq	mm1,mm4
	movq	mm7,[edx-96]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-88]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-96],xmm5
	movdqa	xmm6,[48+ebp]
	movdqa	xmm5,xmm4
	movdqu	xmm4,[64+ebx]
	paddq	xmm6,xmm3
db	102,15,56,0,229
	movq	mm1,mm4
	movq	mm7,[edx-80]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-72]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-80],xmm6
	movdqa	xmm7,[64+ebp]
	movdqa	xmm6,xmm5
	movdqu	xmm5,[80+ebx]
	paddq	xmm7,xmm4
db	102,15,56,0,238
	movq	mm1,mm4
	movq	mm7,[edx-64]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[32+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[56+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[24+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[8+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[32+esp]
	paddq	mm2,mm6
	movq	mm6,[40+esp]
	movq	mm1,mm4
	movq	mm7,[edx-56]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[24+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[56+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[48+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[16+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[24+esp]
	paddq	mm0,mm6
	movq	mm6,[32+esp]
	movdqa	[edx-64],xmm7
	movdqa	[edx],xmm0
	movdqa	xmm0,[80+ebp]
	movdqa	xmm7,xmm6
	movdqu	xmm6,[96+ebx]
	paddq	xmm0,xmm5
db	102,15,56,0,247
	movq	mm1,mm4
	movq	mm7,[edx-48]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[16+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[48+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[40+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[8+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[56+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[16+esp]
	paddq	mm2,mm6
	movq	mm6,[24+esp]
	movq	mm1,mm4
	movq	mm7,[edx-40]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[8+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[40+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[32+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[48+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[8+esp]
	paddq	mm0,mm6
	movq	mm6,[16+esp]
	movdqa	[edx-48],xmm0
	movdqa	[16+edx],xmm1
	movdqa	xmm1,[96+ebp]
	movdqa	xmm0,xmm7
	movdqu	xmm7,[112+ebx]
	paddq	xmm1,xmm6
db	102,15,56,0,248
	movq	mm1,mm4
	movq	mm7,[edx-32]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[32+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[24+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[56+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[40+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[esp]
	paddq	mm2,mm6
	movq	mm6,[8+esp]
	movq	mm1,mm4
	movq	mm7,[edx-24]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[56+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[24+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[16+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[48+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[32+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[56+esp]
	paddq	mm0,mm6
	movq	mm6,[esp]
	movdqa	[edx-32],xmm1
	movdqa	[32+edx],xmm2
	movdqa	xmm2,[112+ebp]
	movdqa	xmm0,[edx]
	paddq	xmm2,xmm7
	movq	mm1,mm4
	movq	mm7,[edx-16]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[48+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm0,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[16+esp],mm0
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[8+esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[40+esp]
	paddq	mm3,mm7
	movq	mm5,mm0
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm0
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[24+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm0,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm2,mm0
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm2,mm1
	pxor	mm6,mm7
	movq	mm5,[48+esp]
	paddq	mm2,mm6
	movq	mm6,[56+esp]
	movq	mm1,mm4
	movq	mm7,[edx-8]
	pxor	mm5,mm6
	psrlq	mm1,14
	movq	[40+esp],mm4
	pand	mm5,mm4
	psllq	mm4,23
	paddq	mm2,mm3
	movq	mm3,mm1
	psrlq	mm1,4
	pxor	mm5,mm6
	pxor	mm3,mm4
	psllq	mm4,23
	pxor	mm3,mm1
	movq	[8+esp],mm2
	paddq	mm7,mm5
	pxor	mm3,mm4
	psrlq	mm1,23
	paddq	mm7,[esp]
	pxor	mm3,mm1
	psllq	mm4,4
	pxor	mm3,mm4
	movq	mm4,[32+esp]
	paddq	mm3,mm7
	movq	mm5,mm2
	psrlq	mm5,28
	paddq	mm4,mm3
	movq	mm6,mm2
	movq	mm7,mm5
	psllq	mm6,25
	movq	mm1,[16+esp]
	psrlq	mm5,6
	pxor	mm7,mm6
	psllq	mm6,5
	pxor	mm7,mm5
	pxor	mm2,mm1
	psrlq	mm5,5
	pxor	mm7,mm6
	pand	mm0,mm2
	psllq	mm6,6
	pxor	mm7,mm5
	pxor	mm0,mm1
	pxor	mm6,mm7
	movq	mm5,[40+esp]
	paddq	mm0,mm6
	movq	mm6,[48+esp]
	movdqa	[edx-16],xmm2
	movq	mm1,[8+esp]
	paddq	mm0,mm3
	movq	mm3,[24+esp]
	movq	mm7,[56+esp]
	pxor	mm2,mm1
	paddq	mm0,[esi]
	paddq	mm1,[8+esi]
	paddq	mm2,[16+esi]
	paddq	mm3,[24+esi]
	paddq	mm4,[32+esi]
	paddq	mm5,[40+esi]
	paddq	mm6,[48+esi]
	paddq	mm7,[56+esi]
	movq	[esi],mm0
	movq	[8+esi],mm1
	movq	[16+esi],mm2
	movq	[24+esi],mm3
	movq	[32+esi],mm4
	movq	[40+esi],mm5
	movq	[48+esi],mm6
	movq	[56+esi],mm7
	cmp	edi,eax
	jb	NEAR L$007loop_ssse3
	mov	esp,DWORD [76+edx]
	emms
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	16
L$002loop_x86:
	mov	eax,DWORD [edi]
	mov	ebx,DWORD [4+edi]
	mov	ecx,DWORD [8+edi]
	mov	edx,DWORD [12+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [16+edi]
	mov	ebx,DWORD [20+edi]
	mov	ecx,DWORD [24+edi]
	mov	edx,DWORD [28+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [32+edi]
	mov	ebx,DWORD [36+edi]
	mov	ecx,DWORD [40+edi]
	mov	edx,DWORD [44+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [48+edi]
	mov	ebx,DWORD [52+edi]
	mov	ecx,DWORD [56+edi]
	mov	edx,DWORD [60+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [64+edi]
	mov	ebx,DWORD [68+edi]
	mov	ecx,DWORD [72+edi]
	mov	edx,DWORD [76+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [80+edi]
	mov	ebx,DWORD [84+edi]
	mov	ecx,DWORD [88+edi]
	mov	edx,DWORD [92+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [96+edi]
	mov	ebx,DWORD [100+edi]
	mov	ecx,DWORD [104+edi]
	mov	edx,DWORD [108+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	mov	eax,DWORD [112+edi]
	mov	ebx,DWORD [116+edi]
	mov	ecx,DWORD [120+edi]
	mov	edx,DWORD [124+edi]
	bswap	eax
	bswap	ebx
	bswap	ecx
	bswap	edx
	push	eax
	push	ebx
	push	ecx
	push	edx
	add	edi,128
	sub	esp,72
	mov	DWORD [204+esp],edi
	lea	edi,[8+esp]
	mov	ecx,16
dd	2784229001
align	16
L$00900_15_x86:
	mov	ecx,DWORD [40+esp]
	mov	edx,DWORD [44+esp]
	mov	esi,ecx
	shr	ecx,9
	mov	edi,edx
	shr	edx,9
	mov	ebx,ecx
	shl	esi,14
	mov	eax,edx
	shl	edi,14
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	eax,ecx
	shl	esi,4
	xor	ebx,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,4
	xor	eax,edi
	shr	edx,4
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [48+esp]
	mov	edx,DWORD [52+esp]
	mov	esi,DWORD [56+esp]
	mov	edi,DWORD [60+esp]
	add	eax,DWORD [64+esp]
	adc	ebx,DWORD [68+esp]
	xor	ecx,esi
	xor	edx,edi
	and	ecx,DWORD [40+esp]
	and	edx,DWORD [44+esp]
	add	eax,DWORD [192+esp]
	adc	ebx,DWORD [196+esp]
	xor	ecx,esi
	xor	edx,edi
	mov	esi,DWORD [ebp]
	mov	edi,DWORD [4+ebp]
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [32+esp]
	mov	edx,DWORD [36+esp]
	add	eax,esi
	adc	ebx,edi
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	DWORD [32+esp],eax
	mov	DWORD [36+esp],ebx
	mov	esi,ecx
	shr	ecx,2
	mov	edi,edx
	shr	edx,2
	mov	ebx,ecx
	shl	esi,4
	mov	eax,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	ebx,ecx
	shl	esi,21
	xor	eax,edx
	shl	edi,21
	xor	eax,esi
	shr	ecx,21
	xor	ebx,edi
	shr	edx,21
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	edi,DWORD [20+esp]
	add	eax,DWORD [esp]
	adc	ebx,DWORD [4+esp]
	or	ecx,esi
	or	edx,edi
	and	ecx,DWORD [24+esp]
	and	edx,DWORD [28+esp]
	and	esi,DWORD [8+esp]
	and	edi,DWORD [12+esp]
	or	ecx,esi
	or	edx,edi
	add	eax,ecx
	adc	ebx,edx
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	dl,BYTE [ebp]
	sub	esp,8
	lea	ebp,[8+ebp]
	cmp	dl,148
	jne	NEAR L$00900_15_x86
align	16
L$01016_79_x86:
	mov	ecx,DWORD [312+esp]
	mov	edx,DWORD [316+esp]
	mov	esi,ecx
	shr	ecx,1
	mov	edi,edx
	shr	edx,1
	mov	eax,ecx
	shl	esi,24
	mov	ebx,edx
	shl	edi,24
	xor	ebx,esi
	shr	ecx,6
	xor	eax,edi
	shr	edx,6
	xor	eax,ecx
	shl	esi,7
	xor	ebx,edx
	shl	edi,1
	xor	ebx,esi
	shr	ecx,1
	xor	eax,edi
	shr	edx,1
	xor	eax,ecx
	shl	edi,6
	xor	ebx,edx
	xor	eax,edi
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	ecx,DWORD [208+esp]
	mov	edx,DWORD [212+esp]
	mov	esi,ecx
	shr	ecx,6
	mov	edi,edx
	shr	edx,6
	mov	eax,ecx
	shl	esi,3
	mov	ebx,edx
	shl	edi,3
	xor	eax,esi
	shr	ecx,13
	xor	ebx,edi
	shr	edx,13
	xor	eax,ecx
	shl	esi,10
	xor	ebx,edx
	shl	edi,10
	xor	ebx,esi
	shr	ecx,10
	xor	eax,edi
	shr	edx,10
	xor	ebx,ecx
	shl	edi,13
	xor	eax,edx
	xor	eax,edi
	mov	ecx,DWORD [320+esp]
	mov	edx,DWORD [324+esp]
	add	eax,DWORD [esp]
	adc	ebx,DWORD [4+esp]
	mov	esi,DWORD [248+esp]
	mov	edi,DWORD [252+esp]
	add	eax,ecx
	adc	ebx,edx
	add	eax,esi
	adc	ebx,edi
	mov	DWORD [192+esp],eax
	mov	DWORD [196+esp],ebx
	mov	ecx,DWORD [40+esp]
	mov	edx,DWORD [44+esp]
	mov	esi,ecx
	shr	ecx,9
	mov	edi,edx
	shr	edx,9
	mov	ebx,ecx
	shl	esi,14
	mov	eax,edx
	shl	edi,14
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	eax,ecx
	shl	esi,4
	xor	ebx,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,4
	xor	eax,edi
	shr	edx,4
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [48+esp]
	mov	edx,DWORD [52+esp]
	mov	esi,DWORD [56+esp]
	mov	edi,DWORD [60+esp]
	add	eax,DWORD [64+esp]
	adc	ebx,DWORD [68+esp]
	xor	ecx,esi
	xor	edx,edi
	and	ecx,DWORD [40+esp]
	and	edx,DWORD [44+esp]
	add	eax,DWORD [192+esp]
	adc	ebx,DWORD [196+esp]
	xor	ecx,esi
	xor	edx,edi
	mov	esi,DWORD [ebp]
	mov	edi,DWORD [4+ebp]
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [32+esp]
	mov	edx,DWORD [36+esp]
	add	eax,esi
	adc	ebx,edi
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	add	eax,ecx
	adc	ebx,edx
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	DWORD [32+esp],eax
	mov	DWORD [36+esp],ebx
	mov	esi,ecx
	shr	ecx,2
	mov	edi,edx
	shr	edx,2
	mov	ebx,ecx
	shl	esi,4
	mov	eax,edx
	shl	edi,4
	xor	ebx,esi
	shr	ecx,5
	xor	eax,edi
	shr	edx,5
	xor	ebx,ecx
	shl	esi,21
	xor	eax,edx
	shl	edi,21
	xor	eax,esi
	shr	ecx,21
	xor	ebx,edi
	shr	edx,21
	xor	eax,ecx
	shl	esi,5
	xor	ebx,edx
	shl	edi,5
	xor	eax,esi
	xor	ebx,edi
	mov	ecx,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	edi,DWORD [20+esp]
	add	eax,DWORD [esp]
	adc	ebx,DWORD [4+esp]
	or	ecx,esi
	or	edx,edi
	and	ecx,DWORD [24+esp]
	and	edx,DWORD [28+esp]
	and	esi,DWORD [8+esp]
	and	edi,DWORD [12+esp]
	or	ecx,esi
	or	edx,edi
	add	eax,ecx
	adc	ebx,edx
	mov	DWORD [esp],eax
	mov	DWORD [4+esp],ebx
	mov	dl,BYTE [ebp]
	sub	esp,8
	lea	ebp,[8+ebp]
	cmp	dl,23
	jne	NEAR L$01016_79_x86
	mov	esi,DWORD [840+esp]
	mov	edi,DWORD [844+esp]
	mov	eax,DWORD [esi]
	mov	ebx,DWORD [4+esi]
	mov	ecx,DWORD [8+esi]
	mov	edx,DWORD [12+esi]
	add	eax,DWORD [8+esp]
	adc	ebx,DWORD [12+esp]
	mov	DWORD [esi],eax
	mov	DWORD [4+esi],ebx
	add	ecx,DWORD [16+esp]
	adc	edx,DWORD [20+esp]
	mov	DWORD [8+esi],ecx
	mov	DWORD [12+esi],edx
	mov	eax,DWORD [16+esi]
	mov	ebx,DWORD [20+esi]
	mov	ecx,DWORD [24+esi]
	mov	edx,DWORD [28+esi]
	add	eax,DWORD [24+esp]
	adc	ebx,DWORD [28+esp]
	mov	DWORD [16+esi],eax
	mov	DWORD [20+esi],ebx
	add	ecx,DWORD [32+esp]
	adc	edx,DWORD [36+esp]
	mov	DWORD [24+esi],ecx
	mov	DWORD [28+esi],edx
	mov	eax,DWORD [32+esi]
	mov	ebx,DWORD [36+esi]
	mov	ecx,DWORD [40+esi]
	mov	edx,DWORD [44+esi]
	add	eax,DWORD [40+esp]
	adc	ebx,DWORD [44+esp]
	mov	DWORD [32+esi],eax
	mov	DWORD [36+esi],ebx
	add	ecx,DWORD [48+esp]
	adc	edx,DWORD [52+esp]
	mov	DWORD [40+esi],ecx
	mov	DWORD [44+esi],edx
	mov	eax,DWORD [48+esi]
	mov	ebx,DWORD [52+esi]
	mov	ecx,DWORD [56+esi]
	mov	edx,DWORD [60+esi]
	add	eax,DWORD [56+esp]
	adc	ebx,DWORD [60+esp]
	mov	DWORD [48+esi],eax
	mov	DWORD [52+esi],ebx
	add	ecx,DWORD [64+esp]
	adc	edx,DWORD [68+esp]
	mov	DWORD [56+esi],ecx
	mov	DWORD [60+esi],edx
	add	esp,840
	sub	ebp,640
	cmp	edi,DWORD [8+esp]
	jb	NEAR L$002loop_x86
	mov	esp,DWORD [12+esp]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$001K512:
dd	3609767458,1116352408
dd	602891725,1899447441
dd	3964484399,3049323471
dd	2173295548,3921009573
dd	4081628472,961987163
dd	3053834265,1508970993
dd	2937671579,2453635748
dd	3664609560,2870763221
dd	2734883394,3624381080
dd	1164996542,310598401
dd	1323610764,607225278
dd	3590304994,1426881987
dd	4068182383,1925078388
dd	991336113,2162078206
dd	633803317,2614888103
dd	3479774868,3248222580
dd	2666613458,3835390401
dd	944711139,4022224774
dd	2341262773,264347078
dd	2007800933,604807628
dd	1495990901,770255983
dd	1856431235,1249150122
dd	3175218132,1555081692
dd	2198950837,1996064986
dd	3999719339,2554220882
dd	766784016,2821834349
dd	2566594879,2952996808
dd	3203337956,3210313671
dd	1034457026,3336571891
dd	2466948901,3584528711
dd	3758326383,113926993
dd	168717936,338241895
dd	1188179964,666307205
dd	1546045734,773529912
dd	1522805485,1294757372
dd	2643833823,1396182291
dd	2343527390,1695183700
dd	1014477480,1986661051
dd	1206759142,2177026350
dd	344077627,2456956037
dd	1290863460,2730485921
dd	3158454273,2820302411
dd	3505952657,3259730800
dd	106217008,3345764771
dd	3606008344,3516065817
dd	1432725776,3600352804
dd	1467031594,4094571909
dd	851169720,275423344
dd	3100823752,430227734
dd	1363258195,506948616
dd	3750685593,659060556
dd	3785050280,883997877
dd	3318307427,958139571
dd	3812723403,1322822218
dd	2003034995,1537002063
dd	3602036899,1747873779
dd	1575990012,1955562222
dd	1125592928,2024104815
dd	2716904306,2227730452
dd	442776044,2361852424
dd	593698344,2428436474
dd	3733110249,2756734187
dd	2999351573,3204031479
dd	3815920427,3329325298
dd	3928383900,3391569614
dd	566280711,3515267271
dd	3454069534,3940187606
dd	4000239992,4118630271
dd	1914138554,116418474
dd	2731055270,174292421
dd	3203993006,289380356
dd	320620315,460393269
dd	587496836,685471733
dd	1086792851,852142971
dd	365543100,1017036298
dd	2618297676,1126000580
dd	3409855158,1288033470
dd	4234509866,1501505948
dd	987167468,1607167915
dd	1246189591,1816402316
dd	67438087,66051
dd	202182159,134810123
db	83,72,65,53,49,50,32,98,108,111,99,107,32,116,114,97
db	110,115,102,111,114,109,32,102,111,114,32,120,56,54,44,32
db	67,82,89,80,84,79,71,65,77,83,32,98,121,32,60,97
db	112,112,114,111,64,111,112,101,110,115,115,108,46,111,114,103
db	62,0
segment	.bss
common	_OPENSSL_ia32cap_P 16
                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/whrlpool/                            0000775 0000000 0000000 00000000000 14746647661 0025556 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/whrlpool/wp-mmx.asm                  0000664 0000000 0000000 00000066114 14746647661 0027515 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_whirlpool_block_mmx
align	16
_whirlpool_block_mmx:
L$_whirlpool_block_mmx_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	esi,DWORD [20+esp]
	mov	edi,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	mov	eax,esp
	sub	esp,148
	and	esp,-64
	lea	ebx,[128+esp]
	mov	DWORD [ebx],esi
	mov	DWORD [4+ebx],edi
	mov	DWORD [8+ebx],ebp
	mov	DWORD [16+ebx],eax
	call	L$000pic_point
L$000pic_point:
	pop	ebp
	lea	ebp,[(L$001table-L$000pic_point)+ebp]
	xor	ecx,ecx
	xor	edx,edx
	movq	mm0,[esi]
	movq	mm1,[8+esi]
	movq	mm2,[16+esi]
	movq	mm3,[24+esi]
	movq	mm4,[32+esi]
	movq	mm5,[40+esi]
	movq	mm6,[48+esi]
	movq	mm7,[56+esi]
L$002outerloop:
	movq	[esp],mm0
	movq	[8+esp],mm1
	movq	[16+esp],mm2
	movq	[24+esp],mm3
	movq	[32+esp],mm4
	movq	[40+esp],mm5
	movq	[48+esp],mm6
	movq	[56+esp],mm7
	pxor	mm0,[edi]
	pxor	mm1,[8+edi]
	pxor	mm2,[16+edi]
	pxor	mm3,[24+edi]
	pxor	mm4,[32+edi]
	pxor	mm5,[40+edi]
	pxor	mm6,[48+edi]
	pxor	mm7,[56+edi]
	movq	[64+esp],mm0
	movq	[72+esp],mm1
	movq	[80+esp],mm2
	movq	[88+esp],mm3
	movq	[96+esp],mm4
	movq	[104+esp],mm5
	movq	[112+esp],mm6
	movq	[120+esp],mm7
	xor	esi,esi
	mov	DWORD [12+ebx],esi
align	16
L$003round:
	movq	mm0,[4096+esi*8+ebp]
	mov	eax,DWORD [esp]
	mov	ebx,DWORD [4+esp]
	movzx	ecx,al
	movzx	edx,ah
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[esi*8+ebp]
	movq	mm1,[7+edi*8+ebp]
	mov	eax,DWORD [8+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	movq	mm2,[6+esi*8+ebp]
	movq	mm3,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	movq	mm4,[4+esi*8+ebp]
	movq	mm5,[3+edi*8+ebp]
	mov	ebx,DWORD [12+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	movq	mm6,[2+esi*8+ebp]
	movq	mm7,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[esi*8+ebp]
	pxor	mm2,[7+edi*8+ebp]
	mov	eax,DWORD [16+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[6+esi*8+ebp]
	pxor	mm4,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[4+esi*8+ebp]
	pxor	mm6,[3+edi*8+ebp]
	mov	ebx,DWORD [20+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[2+esi*8+ebp]
	pxor	mm0,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[esi*8+ebp]
	pxor	mm3,[7+edi*8+ebp]
	mov	eax,DWORD [24+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm4,[6+esi*8+ebp]
	pxor	mm5,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[4+esi*8+ebp]
	pxor	mm7,[3+edi*8+ebp]
	mov	ebx,DWORD [28+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[2+esi*8+ebp]
	pxor	mm1,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[esi*8+ebp]
	pxor	mm4,[7+edi*8+ebp]
	mov	eax,DWORD [32+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[6+esi*8+ebp]
	pxor	mm6,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[4+esi*8+ebp]
	pxor	mm0,[3+edi*8+ebp]
	mov	ebx,DWORD [36+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[2+esi*8+ebp]
	pxor	mm2,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[esi*8+ebp]
	pxor	mm5,[7+edi*8+ebp]
	mov	eax,DWORD [40+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[6+esi*8+ebp]
	pxor	mm7,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[4+esi*8+ebp]
	pxor	mm1,[3+edi*8+ebp]
	mov	ebx,DWORD [44+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[2+esi*8+ebp]
	pxor	mm3,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[esi*8+ebp]
	pxor	mm6,[7+edi*8+ebp]
	mov	eax,DWORD [48+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[6+esi*8+ebp]
	pxor	mm0,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[4+esi*8+ebp]
	pxor	mm2,[3+edi*8+ebp]
	mov	ebx,DWORD [52+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[2+esi*8+ebp]
	pxor	mm4,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm6,[esi*8+ebp]
	pxor	mm7,[7+edi*8+ebp]
	mov	eax,DWORD [56+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[6+esi*8+ebp]
	pxor	mm1,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm2,[4+esi*8+ebp]
	pxor	mm3,[3+edi*8+ebp]
	mov	ebx,DWORD [60+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[2+esi*8+ebp]
	pxor	mm5,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[esi*8+ebp]
	pxor	mm0,[7+edi*8+ebp]
	mov	eax,DWORD [64+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[6+esi*8+ebp]
	pxor	mm2,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[4+esi*8+ebp]
	pxor	mm4,[3+edi*8+ebp]
	mov	ebx,DWORD [68+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[2+esi*8+ebp]
	pxor	mm6,[1+edi*8+ebp]
	movq	[esp],mm0
	movq	[8+esp],mm1
	movq	[16+esp],mm2
	movq	[24+esp],mm3
	movq	[32+esp],mm4
	movq	[40+esp],mm5
	movq	[48+esp],mm6
	movq	[56+esp],mm7
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[esi*8+ebp]
	pxor	mm1,[7+edi*8+ebp]
	mov	eax,DWORD [72+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm2,[6+esi*8+ebp]
	pxor	mm3,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm4,[4+esi*8+ebp]
	pxor	mm5,[3+edi*8+ebp]
	mov	ebx,DWORD [76+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm6,[2+esi*8+ebp]
	pxor	mm7,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[esi*8+ebp]
	pxor	mm2,[7+edi*8+ebp]
	mov	eax,DWORD [80+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[6+esi*8+ebp]
	pxor	mm4,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[4+esi*8+ebp]
	pxor	mm6,[3+edi*8+ebp]
	mov	ebx,DWORD [84+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[2+esi*8+ebp]
	pxor	mm0,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[esi*8+ebp]
	pxor	mm3,[7+edi*8+ebp]
	mov	eax,DWORD [88+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm4,[6+esi*8+ebp]
	pxor	mm5,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[4+esi*8+ebp]
	pxor	mm7,[3+edi*8+ebp]
	mov	ebx,DWORD [92+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm0,[2+esi*8+ebp]
	pxor	mm1,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[esi*8+ebp]
	pxor	mm4,[7+edi*8+ebp]
	mov	eax,DWORD [96+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm5,[6+esi*8+ebp]
	pxor	mm6,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[4+esi*8+ebp]
	pxor	mm0,[3+edi*8+ebp]
	mov	ebx,DWORD [100+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm1,[2+esi*8+ebp]
	pxor	mm2,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[esi*8+ebp]
	pxor	mm5,[7+edi*8+ebp]
	mov	eax,DWORD [104+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm6,[6+esi*8+ebp]
	pxor	mm7,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[4+esi*8+ebp]
	pxor	mm1,[3+edi*8+ebp]
	mov	ebx,DWORD [108+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm2,[2+esi*8+ebp]
	pxor	mm3,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[esi*8+ebp]
	pxor	mm6,[7+edi*8+ebp]
	mov	eax,DWORD [112+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm7,[6+esi*8+ebp]
	pxor	mm0,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[4+esi*8+ebp]
	pxor	mm2,[3+edi*8+ebp]
	mov	ebx,DWORD [116+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm3,[2+esi*8+ebp]
	pxor	mm4,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm6,[esi*8+ebp]
	pxor	mm7,[7+edi*8+ebp]
	mov	eax,DWORD [120+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm0,[6+esi*8+ebp]
	pxor	mm1,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm2,[4+esi*8+ebp]
	pxor	mm3,[3+edi*8+ebp]
	mov	ebx,DWORD [124+esp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm4,[2+esi*8+ebp]
	pxor	mm5,[1+edi*8+ebp]
	shr	eax,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm7,[esi*8+ebp]
	pxor	mm0,[7+edi*8+ebp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm1,[6+esi*8+ebp]
	pxor	mm2,[5+edi*8+ebp]
	shr	ebx,16
	lea	esi,[ecx*1+ecx]
	movzx	ecx,bl
	lea	edi,[edx*1+edx]
	movzx	edx,bh
	pxor	mm3,[4+esi*8+ebp]
	pxor	mm4,[3+edi*8+ebp]
	lea	esi,[ecx*1+ecx]
	movzx	ecx,al
	lea	edi,[edx*1+edx]
	movzx	edx,ah
	pxor	mm5,[2+esi*8+ebp]
	pxor	mm6,[1+edi*8+ebp]
	lea	ebx,[128+esp]
	mov	esi,DWORD [12+ebx]
	add	esi,1
	cmp	esi,10
	je	NEAR L$004roundsdone
	mov	DWORD [12+ebx],esi
	movq	[64+esp],mm0
	movq	[72+esp],mm1
	movq	[80+esp],mm2
	movq	[88+esp],mm3
	movq	[96+esp],mm4
	movq	[104+esp],mm5
	movq	[112+esp],mm6
	movq	[120+esp],mm7
	jmp	NEAR L$003round
align	16
L$004roundsdone:
	mov	esi,DWORD [ebx]
	mov	edi,DWORD [4+ebx]
	mov	eax,DWORD [8+ebx]
	pxor	mm0,[edi]
	pxor	mm1,[8+edi]
	pxor	mm2,[16+edi]
	pxor	mm3,[24+edi]
	pxor	mm4,[32+edi]
	pxor	mm5,[40+edi]
	pxor	mm6,[48+edi]
	pxor	mm7,[56+edi]
	pxor	mm0,[esi]
	pxor	mm1,[8+esi]
	pxor	mm2,[16+esi]
	pxor	mm3,[24+esi]
	pxor	mm4,[32+esi]
	pxor	mm5,[40+esi]
	pxor	mm6,[48+esi]
	pxor	mm7,[56+esi]
	movq	[esi],mm0
	movq	[8+esi],mm1
	movq	[16+esi],mm2
	movq	[24+esi],mm3
	movq	[32+esi],mm4
	movq	[40+esi],mm5
	movq	[48+esi],mm6
	movq	[56+esi],mm7
	lea	edi,[64+edi]
	sub	eax,1
	jz	NEAR L$005alldone
	mov	DWORD [4+ebx],edi
	mov	DWORD [8+ebx],eax
	jmp	NEAR L$002outerloop
L$005alldone:
	emms
	mov	esp,DWORD [16+ebx]
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
align	64
L$001table:
db	24,24,96,24,192,120,48,216
db	24,24,96,24,192,120,48,216
db	35,35,140,35,5,175,70,38
db	35,35,140,35,5,175,70,38
db	198,198,63,198,126,249,145,184
db	198,198,63,198,126,249,145,184
db	232,232,135,232,19,111,205,251
db	232,232,135,232,19,111,205,251
db	135,135,38,135,76,161,19,203
db	135,135,38,135,76,161,19,203
db	184,184,218,184,169,98,109,17
db	184,184,218,184,169,98,109,17
db	1,1,4,1,8,5,2,9
db	1,1,4,1,8,5,2,9
db	79,79,33,79,66,110,158,13
db	79,79,33,79,66,110,158,13
db	54,54,216,54,173,238,108,155
db	54,54,216,54,173,238,108,155
db	166,166,162,166,89,4,81,255
db	166,166,162,166,89,4,81,255
db	210,210,111,210,222,189,185,12
db	210,210,111,210,222,189,185,12
db	245,245,243,245,251,6,247,14
db	245,245,243,245,251,6,247,14
db	121,121,249,121,239,128,242,150
db	121,121,249,121,239,128,242,150
db	111,111,161,111,95,206,222,48
db	111,111,161,111,95,206,222,48
db	145,145,126,145,252,239,63,109
db	145,145,126,145,252,239,63,109
db	82,82,85,82,170,7,164,248
db	82,82,85,82,170,7,164,248
db	96,96,157,96,39,253,192,71
db	96,96,157,96,39,253,192,71
db	188,188,202,188,137,118,101,53
db	188,188,202,188,137,118,101,53
db	155,155,86,155,172,205,43,55
db	155,155,86,155,172,205,43,55
db	142,142,2,142,4,140,1,138
db	142,142,2,142,4,140,1,138
db	163,163,182,163,113,21,91,210
db	163,163,182,163,113,21,91,210
db	12,12,48,12,96,60,24,108
db	12,12,48,12,96,60,24,108
db	123,123,241,123,255,138,246,132
db	123,123,241,123,255,138,246,132
db	53,53,212,53,181,225,106,128
db	53,53,212,53,181,225,106,128
db	29,29,116,29,232,105,58,245
db	29,29,116,29,232,105,58,245
db	224,224,167,224,83,71,221,179
db	224,224,167,224,83,71,221,179
db	215,215,123,215,246,172,179,33
db	215,215,123,215,246,172,179,33
db	194,194,47,194,94,237,153,156
db	194,194,47,194,94,237,153,156
db	46,46,184,46,109,150,92,67
db	46,46,184,46,109,150,92,67
db	75,75,49,75,98,122,150,41
db	75,75,49,75,98,122,150,41
db	254,254,223,254,163,33,225,93
db	254,254,223,254,163,33,225,93
db	87,87,65,87,130,22,174,213
db	87,87,65,87,130,22,174,213
db	21,21,84,21,168,65,42,189
db	21,21,84,21,168,65,42,189
db	119,119,193,119,159,182,238,232
db	119,119,193,119,159,182,238,232
db	55,55,220,55,165,235,110,146
db	55,55,220,55,165,235,110,146
db	229,229,179,229,123,86,215,158
db	229,229,179,229,123,86,215,158
db	159,159,70,159,140,217,35,19
db	159,159,70,159,140,217,35,19
db	240,240,231,240,211,23,253,35
db	240,240,231,240,211,23,253,35
db	74,74,53,74,106,127,148,32
db	74,74,53,74,106,127,148,32
db	218,218,79,218,158,149,169,68
db	218,218,79,218,158,149,169,68
db	88,88,125,88,250,37,176,162
db	88,88,125,88,250,37,176,162
db	201,201,3,201,6,202,143,207
db	201,201,3,201,6,202,143,207
db	41,41,164,41,85,141,82,124
db	41,41,164,41,85,141,82,124
db	10,10,40,10,80,34,20,90
db	10,10,40,10,80,34,20,90
db	177,177,254,177,225,79,127,80
db	177,177,254,177,225,79,127,80
db	160,160,186,160,105,26,93,201
db	160,160,186,160,105,26,93,201
db	107,107,177,107,127,218,214,20
db	107,107,177,107,127,218,214,20
db	133,133,46,133,92,171,23,217
db	133,133,46,133,92,171,23,217
db	189,189,206,189,129,115,103,60
db	189,189,206,189,129,115,103,60
db	93,93,105,93,210,52,186,143
db	93,93,105,93,210,52,186,143
db	16,16,64,16,128,80,32,144
db	16,16,64,16,128,80,32,144
db	244,244,247,244,243,3,245,7
db	244,244,247,244,243,3,245,7
db	203,203,11,203,22,192,139,221
db	203,203,11,203,22,192,139,221
db	62,62,248,62,237,198,124,211
db	62,62,248,62,237,198,124,211
db	5,5,20,5,40,17,10,45
db	5,5,20,5,40,17,10,45
db	103,103,129,103,31,230,206,120
db	103,103,129,103,31,230,206,120
db	228,228,183,228,115,83,213,151
db	228,228,183,228,115,83,213,151
db	39,39,156,39,37,187,78,2
db	39,39,156,39,37,187,78,2
db	65,65,25,65,50,88,130,115
db	65,65,25,65,50,88,130,115
db	139,139,22,139,44,157,11,167
db	139,139,22,139,44,157,11,167
db	167,167,166,167,81,1,83,246
db	167,167,166,167,81,1,83,246
db	125,125,233,125,207,148,250,178
db	125,125,233,125,207,148,250,178
db	149,149,110,149,220,251,55,73
db	149,149,110,149,220,251,55,73
db	216,216,71,216,142,159,173,86
db	216,216,71,216,142,159,173,86
db	251,251,203,251,139,48,235,112
db	251,251,203,251,139,48,235,112
db	238,238,159,238,35,113,193,205
db	238,238,159,238,35,113,193,205
db	124,124,237,124,199,145,248,187
db	124,124,237,124,199,145,248,187
db	102,102,133,102,23,227,204,113
db	102,102,133,102,23,227,204,113
db	221,221,83,221,166,142,167,123
db	221,221,83,221,166,142,167,123
db	23,23,92,23,184,75,46,175
db	23,23,92,23,184,75,46,175
db	71,71,1,71,2,70,142,69
db	71,71,1,71,2,70,142,69
db	158,158,66,158,132,220,33,26
db	158,158,66,158,132,220,33,26
db	202,202,15,202,30,197,137,212
db	202,202,15,202,30,197,137,212
db	45,45,180,45,117,153,90,88
db	45,45,180,45,117,153,90,88
db	191,191,198,191,145,121,99,46
db	191,191,198,191,145,121,99,46
db	7,7,28,7,56,27,14,63
db	7,7,28,7,56,27,14,63
db	173,173,142,173,1,35,71,172
db	173,173,142,173,1,35,71,172
db	90,90,117,90,234,47,180,176
db	90,90,117,90,234,47,180,176
db	131,131,54,131,108,181,27,239
db	131,131,54,131,108,181,27,239
db	51,51,204,51,133,255,102,182
db	51,51,204,51,133,255,102,182
db	99,99,145,99,63,242,198,92
db	99,99,145,99,63,242,198,92
db	2,2,8,2,16,10,4,18
db	2,2,8,2,16,10,4,18
db	170,170,146,170,57,56,73,147
db	170,170,146,170,57,56,73,147
db	113,113,217,113,175,168,226,222
db	113,113,217,113,175,168,226,222
db	200,200,7,200,14,207,141,198
db	200,200,7,200,14,207,141,198
db	25,25,100,25,200,125,50,209
db	25,25,100,25,200,125,50,209
db	73,73,57,73,114,112,146,59
db	73,73,57,73,114,112,146,59
db	217,217,67,217,134,154,175,95
db	217,217,67,217,134,154,175,95
db	242,242,239,242,195,29,249,49
db	242,242,239,242,195,29,249,49
db	227,227,171,227,75,72,219,168
db	227,227,171,227,75,72,219,168
db	91,91,113,91,226,42,182,185
db	91,91,113,91,226,42,182,185
db	136,136,26,136,52,146,13,188
db	136,136,26,136,52,146,13,188
db	154,154,82,154,164,200,41,62
db	154,154,82,154,164,200,41,62
db	38,38,152,38,45,190,76,11
db	38,38,152,38,45,190,76,11
db	50,50,200,50,141,250,100,191
db	50,50,200,50,141,250,100,191
db	176,176,250,176,233,74,125,89
db	176,176,250,176,233,74,125,89
db	233,233,131,233,27,106,207,242
db	233,233,131,233,27,106,207,242
db	15,15,60,15,120,51,30,119
db	15,15,60,15,120,51,30,119
db	213,213,115,213,230,166,183,51
db	213,213,115,213,230,166,183,51
db	128,128,58,128,116,186,29,244
db	128,128,58,128,116,186,29,244
db	190,190,194,190,153,124,97,39
db	190,190,194,190,153,124,97,39
db	205,205,19,205,38,222,135,235
db	205,205,19,205,38,222,135,235
db	52,52,208,52,189,228,104,137
db	52,52,208,52,189,228,104,137
db	72,72,61,72,122,117,144,50
db	72,72,61,72,122,117,144,50
db	255,255,219,255,171,36,227,84
db	255,255,219,255,171,36,227,84
db	122,122,245,122,247,143,244,141
db	122,122,245,122,247,143,244,141
db	144,144,122,144,244,234,61,100
db	144,144,122,144,244,234,61,100
db	95,95,97,95,194,62,190,157
db	95,95,97,95,194,62,190,157
db	32,32,128,32,29,160,64,61
db	32,32,128,32,29,160,64,61
db	104,104,189,104,103,213,208,15
db	104,104,189,104,103,213,208,15
db	26,26,104,26,208,114,52,202
db	26,26,104,26,208,114,52,202
db	174,174,130,174,25,44,65,183
db	174,174,130,174,25,44,65,183
db	180,180,234,180,201,94,117,125
db	180,180,234,180,201,94,117,125
db	84,84,77,84,154,25,168,206
db	84,84,77,84,154,25,168,206
db	147,147,118,147,236,229,59,127
db	147,147,118,147,236,229,59,127
db	34,34,136,34,13,170,68,47
db	34,34,136,34,13,170,68,47
db	100,100,141,100,7,233,200,99
db	100,100,141,100,7,233,200,99
db	241,241,227,241,219,18,255,42
db	241,241,227,241,219,18,255,42
db	115,115,209,115,191,162,230,204
db	115,115,209,115,191,162,230,204
db	18,18,72,18,144,90,36,130
db	18,18,72,18,144,90,36,130
db	64,64,29,64,58,93,128,122
db	64,64,29,64,58,93,128,122
db	8,8,32,8,64,40,16,72
db	8,8,32,8,64,40,16,72
db	195,195,43,195,86,232,155,149
db	195,195,43,195,86,232,155,149
db	236,236,151,236,51,123,197,223
db	236,236,151,236,51,123,197,223
db	219,219,75,219,150,144,171,77
db	219,219,75,219,150,144,171,77
db	161,161,190,161,97,31,95,192
db	161,161,190,161,97,31,95,192
db	141,141,14,141,28,131,7,145
db	141,141,14,141,28,131,7,145
db	61,61,244,61,245,201,122,200
db	61,61,244,61,245,201,122,200
db	151,151,102,151,204,241,51,91
db	151,151,102,151,204,241,51,91
db	0,0,0,0,0,0,0,0
db	0,0,0,0,0,0,0,0
db	207,207,27,207,54,212,131,249
db	207,207,27,207,54,212,131,249
db	43,43,172,43,69,135,86,110
db	43,43,172,43,69,135,86,110
db	118,118,197,118,151,179,236,225
db	118,118,197,118,151,179,236,225
db	130,130,50,130,100,176,25,230
db	130,130,50,130,100,176,25,230
db	214,214,127,214,254,169,177,40
db	214,214,127,214,254,169,177,40
db	27,27,108,27,216,119,54,195
db	27,27,108,27,216,119,54,195
db	181,181,238,181,193,91,119,116
db	181,181,238,181,193,91,119,116
db	175,175,134,175,17,41,67,190
db	175,175,134,175,17,41,67,190
db	106,106,181,106,119,223,212,29
db	106,106,181,106,119,223,212,29
db	80,80,93,80,186,13,160,234
db	80,80,93,80,186,13,160,234
db	69,69,9,69,18,76,138,87
db	69,69,9,69,18,76,138,87
db	243,243,235,243,203,24,251,56
db	243,243,235,243,203,24,251,56
db	48,48,192,48,157,240,96,173
db	48,48,192,48,157,240,96,173
db	239,239,155,239,43,116,195,196
db	239,239,155,239,43,116,195,196
db	63,63,252,63,229,195,126,218
db	63,63,252,63,229,195,126,218
db	85,85,73,85,146,28,170,199
db	85,85,73,85,146,28,170,199
db	162,162,178,162,121,16,89,219
db	162,162,178,162,121,16,89,219
db	234,234,143,234,3,101,201,233
db	234,234,143,234,3,101,201,233
db	101,101,137,101,15,236,202,106
db	101,101,137,101,15,236,202,106
db	186,186,210,186,185,104,105,3
db	186,186,210,186,185,104,105,3
db	47,47,188,47,101,147,94,74
db	47,47,188,47,101,147,94,74
db	192,192,39,192,78,231,157,142
db	192,192,39,192,78,231,157,142
db	222,222,95,222,190,129,161,96
db	222,222,95,222,190,129,161,96
db	28,28,112,28,224,108,56,252
db	28,28,112,28,224,108,56,252
db	253,253,211,253,187,46,231,70
db	253,253,211,253,187,46,231,70
db	77,77,41,77,82,100,154,31
db	77,77,41,77,82,100,154,31
db	146,146,114,146,228,224,57,118
db	146,146,114,146,228,224,57,118
db	117,117,201,117,143,188,234,250
db	117,117,201,117,143,188,234,250
db	6,6,24,6,48,30,12,54
db	6,6,24,6,48,30,12,54
db	138,138,18,138,36,152,9,174
db	138,138,18,138,36,152,9,174
db	178,178,242,178,249,64,121,75
db	178,178,242,178,249,64,121,75
db	230,230,191,230,99,89,209,133
db	230,230,191,230,99,89,209,133
db	14,14,56,14,112,54,28,126
db	14,14,56,14,112,54,28,126
db	31,31,124,31,248,99,62,231
db	31,31,124,31,248,99,62,231
db	98,98,149,98,55,247,196,85
db	98,98,149,98,55,247,196,85
db	212,212,119,212,238,163,181,58
db	212,212,119,212,238,163,181,58
db	168,168,154,168,41,50,77,129
db	168,168,154,168,41,50,77,129
db	150,150,98,150,196,244,49,82
db	150,150,98,150,196,244,49,82
db	249,249,195,249,155,58,239,98
db	249,249,195,249,155,58,239,98
db	197,197,51,197,102,246,151,163
db	197,197,51,197,102,246,151,163
db	37,37,148,37,53,177,74,16
db	37,37,148,37,53,177,74,16
db	89,89,121,89,242,32,178,171
db	89,89,121,89,242,32,178,171
db	132,132,42,132,84,174,21,208
db	132,132,42,132,84,174,21,208
db	114,114,213,114,183,167,228,197
db	114,114,213,114,183,167,228,197
db	57,57,228,57,213,221,114,236
db	57,57,228,57,213,221,114,236
db	76,76,45,76,90,97,152,22
db	76,76,45,76,90,97,152,22
db	94,94,101,94,202,59,188,148
db	94,94,101,94,202,59,188,148
db	120,120,253,120,231,133,240,159
db	120,120,253,120,231,133,240,159
db	56,56,224,56,221,216,112,229
db	56,56,224,56,221,216,112,229
db	140,140,10,140,20,134,5,152
db	140,140,10,140,20,134,5,152
db	209,209,99,209,198,178,191,23
db	209,209,99,209,198,178,191,23
db	165,165,174,165,65,11,87,228
db	165,165,174,165,65,11,87,228
db	226,226,175,226,67,77,217,161
db	226,226,175,226,67,77,217,161
db	97,97,153,97,47,248,194,78
db	97,97,153,97,47,248,194,78
db	179,179,246,179,241,69,123,66
db	179,179,246,179,241,69,123,66
db	33,33,132,33,21,165,66,52
db	33,33,132,33,21,165,66,52
db	156,156,74,156,148,214,37,8
db	156,156,74,156,148,214,37,8
db	30,30,120,30,240,102,60,238
db	30,30,120,30,240,102,60,238
db	67,67,17,67,34,82,134,97
db	67,67,17,67,34,82,134,97
db	199,199,59,199,118,252,147,177
db	199,199,59,199,118,252,147,177
db	252,252,215,252,179,43,229,79
db	252,252,215,252,179,43,229,79
db	4,4,16,4,32,20,8,36
db	4,4,16,4,32,20,8,36
db	81,81,89,81,178,8,162,227
db	81,81,89,81,178,8,162,227
db	153,153,94,153,188,199,47,37
db	153,153,94,153,188,199,47,37
db	109,109,169,109,79,196,218,34
db	109,109,169,109,79,196,218,34
db	13,13,52,13,104,57,26,101
db	13,13,52,13,104,57,26,101
db	250,250,207,250,131,53,233,121
db	250,250,207,250,131,53,233,121
db	223,223,91,223,182,132,163,105
db	223,223,91,223,182,132,163,105
db	126,126,229,126,215,155,252,169
db	126,126,229,126,215,155,252,169
db	36,36,144,36,61,180,72,25
db	36,36,144,36,61,180,72,25
db	59,59,236,59,197,215,118,254
db	59,59,236,59,197,215,118,254
db	171,171,150,171,49,61,75,154
db	171,171,150,171,49,61,75,154
db	206,206,31,206,62,209,129,240
db	206,206,31,206,62,209,129,240
db	17,17,68,17,136,85,34,153
db	17,17,68,17,136,85,34,153
db	143,143,6,143,12,137,3,131
db	143,143,6,143,12,137,3,131
db	78,78,37,78,74,107,156,4
db	78,78,37,78,74,107,156,4
db	183,183,230,183,209,81,115,102
db	183,183,230,183,209,81,115,102
db	235,235,139,235,11,96,203,224
db	235,235,139,235,11,96,203,224
db	60,60,240,60,253,204,120,193
db	60,60,240,60,253,204,120,193
db	129,129,62,129,124,191,31,253
db	129,129,62,129,124,191,31,253
db	148,148,106,148,212,254,53,64
db	148,148,106,148,212,254,53,64
db	247,247,251,247,235,12,243,28
db	247,247,251,247,235,12,243,28
db	185,185,222,185,161,103,111,24
db	185,185,222,185,161,103,111,24
db	19,19,76,19,152,95,38,139
db	19,19,76,19,152,95,38,139
db	44,44,176,44,125,156,88,81
db	44,44,176,44,125,156,88,81
db	211,211,107,211,214,184,187,5
db	211,211,107,211,214,184,187,5
db	231,231,187,231,107,92,211,140
db	231,231,187,231,107,92,211,140
db	110,110,165,110,87,203,220,57
db	110,110,165,110,87,203,220,57
db	196,196,55,196,110,243,149,170
db	196,196,55,196,110,243,149,170
db	3,3,12,3,24,15,6,27
db	3,3,12,3,24,15,6,27
db	86,86,69,86,138,19,172,220
db	86,86,69,86,138,19,172,220
db	68,68,13,68,26,73,136,94
db	68,68,13,68,26,73,136,94
db	127,127,225,127,223,158,254,160
db	127,127,225,127,223,158,254,160
db	169,169,158,169,33,55,79,136
db	169,169,158,169,33,55,79,136
db	42,42,168,42,77,130,84,103
db	42,42,168,42,77,130,84,103
db	187,187,214,187,177,109,107,10
db	187,187,214,187,177,109,107,10
db	193,193,35,193,70,226,159,135
db	193,193,35,193,70,226,159,135
db	83,83,81,83,162,2,166,241
db	83,83,81,83,162,2,166,241
db	220,220,87,220,174,139,165,114
db	220,220,87,220,174,139,165,114
db	11,11,44,11,88,39,22,83
db	11,11,44,11,88,39,22,83
db	157,157,78,157,156,211,39,1
db	157,157,78,157,156,211,39,1
db	108,108,173,108,71,193,216,43
db	108,108,173,108,71,193,216,43
db	49,49,196,49,149,245,98,164
db	49,49,196,49,149,245,98,164
db	116,116,205,116,135,185,232,243
db	116,116,205,116,135,185,232,243
db	246,246,255,246,227,9,241,21
db	246,246,255,246,227,9,241,21
db	70,70,5,70,10,67,140,76
db	70,70,5,70,10,67,140,76
db	172,172,138,172,9,38,69,165
db	172,172,138,172,9,38,69,165
db	137,137,30,137,60,151,15,181
db	137,137,30,137,60,151,15,181
db	20,20,80,20,160,68,40,180
db	20,20,80,20,160,68,40,180
db	225,225,163,225,91,66,223,186
db	225,225,163,225,91,66,223,186
db	22,22,88,22,176,78,44,166
db	22,22,88,22,176,78,44,166
db	58,58,232,58,205,210,116,247
db	58,58,232,58,205,210,116,247
db	105,105,185,105,111,208,210,6
db	105,105,185,105,111,208,210,6
db	9,9,36,9,72,45,18,65
db	9,9,36,9,72,45,18,65
db	112,112,221,112,167,173,224,215
db	112,112,221,112,167,173,224,215
db	182,182,226,182,217,84,113,111
db	182,182,226,182,217,84,113,111
db	208,208,103,208,206,183,189,30
db	208,208,103,208,206,183,189,30
db	237,237,147,237,59,126,199,214
db	237,237,147,237,59,126,199,214
db	204,204,23,204,46,219,133,226
db	204,204,23,204,46,219,133,226
db	66,66,21,66,42,87,132,104
db	66,66,21,66,42,87,132,104
db	152,152,90,152,180,194,45,44
db	152,152,90,152,180,194,45,44
db	164,164,170,164,73,14,85,237
db	164,164,170,164,73,14,85,237
db	40,40,160,40,93,136,80,117
db	40,40,160,40,93,136,80,117
db	92,92,109,92,218,49,184,134
db	92,92,109,92,218,49,184,134
db	248,248,199,248,147,63,237,107
db	248,248,199,248,147,63,237,107
db	134,134,34,134,68,164,17,194
db	134,134,34,134,68,164,17,194
db	24,35,198,232,135,184,1,79
db	54,166,210,245,121,111,145,82
db	96,188,155,142,163,12,123,53
db	29,224,215,194,46,75,254,87
db	21,119,55,229,159,240,74,218
db	88,201,41,10,177,160,107,133
db	189,93,16,244,203,62,5,103
db	228,39,65,139,167,125,149,216
db	251,238,124,102,221,23,71,158
db	202,45,191,7,173,90,131,51
                                                                                                                                                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/crypto/x86cpuid.asm                         0000664 0000000 0000000 00000017252 14746647661 0026073 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_OPENSSL_ia32_cpuid
align	16
_OPENSSL_ia32_cpuid:
L$_OPENSSL_ia32_cpuid_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	xor	edx,edx
	pushfd
	pop	eax
	mov	ecx,eax
	xor	eax,2097152
	push	eax
	popfd
	pushfd
	pop	eax
	xor	ecx,eax
	xor	eax,eax
	mov	esi,DWORD [20+esp]
	mov	DWORD [8+esi],eax
	bt	ecx,21
	jnc	NEAR L$000nocpuid
	cpuid
	mov	edi,eax
	xor	eax,eax
	cmp	ebx,1970169159
	setne	al
	mov	ebp,eax
	cmp	edx,1231384169
	setne	al
	or	ebp,eax
	cmp	ecx,1818588270
	setne	al
	or	ebp,eax
	jz	NEAR L$001intel
	cmp	ebx,1752462657
	setne	al
	mov	esi,eax
	cmp	edx,1769238117
	setne	al
	or	esi,eax
	cmp	ecx,1145913699
	setne	al
	or	esi,eax
	jnz	NEAR L$001intel
	mov	eax,2147483648
	cpuid
	cmp	eax,2147483649
	jb	NEAR L$001intel
	mov	esi,eax
	mov	eax,2147483649
	cpuid
	or	ebp,ecx
	and	ebp,2049
	cmp	esi,2147483656
	jb	NEAR L$001intel
	mov	eax,2147483656
	cpuid
	movzx	esi,cl
	inc	esi
	mov	eax,1
	xor	ecx,ecx
	cpuid
	bt	edx,28
	jnc	NEAR L$002generic
	shr	ebx,16
	and	ebx,255
	cmp	ebx,esi
	ja	NEAR L$002generic
	and	edx,4026531839
	jmp	NEAR L$002generic
L$001intel:
	cmp	edi,4
	mov	esi,-1
	jb	NEAR L$003nocacheinfo
	mov	eax,4
	mov	ecx,0
	cpuid
	mov	esi,eax
	shr	esi,14
	and	esi,4095
L$003nocacheinfo:
	mov	eax,1
	xor	ecx,ecx
	cpuid
	and	edx,3220176895
	cmp	ebp,0
	jne	NEAR L$004notintel
	or	edx,1073741824
	and	ah,15
	cmp	ah,15
	jne	NEAR L$004notintel
	or	edx,1048576
L$004notintel:
	bt	edx,28
	jnc	NEAR L$002generic
	and	edx,4026531839
	cmp	esi,0
	je	NEAR L$002generic
	or	edx,268435456
	shr	ebx,16
	cmp	bl,1
	ja	NEAR L$002generic
	and	edx,4026531839
L$002generic:
	and	ebp,2048
	and	ecx,4294965247
	mov	esi,edx
	or	ebp,ecx
	cmp	edi,7
	mov	edi,DWORD [20+esp]
	jb	NEAR L$005no_extended_info
	mov	eax,7
	xor	ecx,ecx
	cpuid
	mov	DWORD [8+edi],ebx
L$005no_extended_info:
	bt	ebp,27
	jnc	NEAR L$006clear_avx
	xor	ecx,ecx
db	15,1,208
	and	eax,6
	cmp	eax,6
	je	NEAR L$007done
	cmp	eax,2
	je	NEAR L$006clear_avx
L$008clear_xmm:
	and	ebp,4261412861
	and	esi,4278190079
L$006clear_avx:
	and	ebp,4026525695
	and	DWORD [8+edi],4294967263
L$007done:
	mov	eax,esi
	mov	edx,ebp
L$000nocpuid:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
;extern	_OPENSSL_ia32cap_P
global	_OPENSSL_rdtsc
align	16
_OPENSSL_rdtsc:
L$_OPENSSL_rdtsc_begin:
	xor	eax,eax
	xor	edx,edx
	lea	ecx,[_OPENSSL_ia32cap_P]
	bt	DWORD [ecx],4
	jnc	NEAR L$009notsc
	rdtsc
L$009notsc:
	ret
global	_OPENSSL_instrument_halt
align	16
_OPENSSL_instrument_halt:
L$_OPENSSL_instrument_halt_begin:
	lea	ecx,[_OPENSSL_ia32cap_P]
	bt	DWORD [ecx],4
	jnc	NEAR L$010nohalt
dd	2421723150
	and	eax,3
	jnz	NEAR L$010nohalt
	pushfd
	pop	eax
	bt	eax,9
	jnc	NEAR L$010nohalt
	rdtsc
	push	edx
	push	eax
	hlt
	rdtsc
	sub	eax,DWORD [esp]
	sbb	edx,DWORD [4+esp]
	add	esp,8
	ret
L$010nohalt:
	xor	eax,eax
	xor	edx,edx
	ret
global	_OPENSSL_far_spin
align	16
_OPENSSL_far_spin:
L$_OPENSSL_far_spin_begin:
	pushfd
	pop	eax
	bt	eax,9
	jnc	NEAR L$011nospin
	mov	eax,DWORD [4+esp]
	mov	ecx,DWORD [8+esp]
dd	2430111262
	xor	eax,eax
	mov	edx,DWORD [ecx]
	jmp	NEAR L$012spin
align	16
L$012spin:
	inc	eax
	cmp	edx,DWORD [ecx]
	je	NEAR L$012spin
dd	529567888
	ret
L$011nospin:
	xor	eax,eax
	xor	edx,edx
	ret
global	_OPENSSL_wipe_cpu
align	16
_OPENSSL_wipe_cpu:
L$_OPENSSL_wipe_cpu_begin:
	xor	eax,eax
	xor	edx,edx
	lea	ecx,[_OPENSSL_ia32cap_P]
	mov	ecx,DWORD [ecx]
	bt	DWORD [ecx],1
	jnc	NEAR L$013no_x87
	and	ecx,83886080
	cmp	ecx,83886080
	jne	NEAR L$014no_sse2
	pxor	xmm0,xmm0
	pxor	xmm1,xmm1
	pxor	xmm2,xmm2
	pxor	xmm3,xmm3
	pxor	xmm4,xmm4
	pxor	xmm5,xmm5
	pxor	xmm6,xmm6
	pxor	xmm7,xmm7
L$014no_sse2:
dd	4007259865,4007259865,4007259865,4007259865,2430851995
L$013no_x87:
	lea	eax,[4+esp]
	ret
global	_OPENSSL_atomic_add
align	16
_OPENSSL_atomic_add:
L$_OPENSSL_atomic_add_begin:
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [8+esp]
	push	ebx
	nop
	mov	eax,DWORD [edx]
L$015spin:
	lea	ebx,[ecx*1+eax]
	nop
dd	447811568
	jne	NEAR L$015spin
	mov	eax,ebx
	pop	ebx
	ret
global	_OPENSSL_cleanse
align	16
_OPENSSL_cleanse:
L$_OPENSSL_cleanse_begin:
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [8+esp]
	xor	eax,eax
	cmp	ecx,7
	jae	NEAR L$016lot
	cmp	ecx,0
	je	NEAR L$017ret
L$018little:
	mov	BYTE [edx],al
	sub	ecx,1
	lea	edx,[1+edx]
	jnz	NEAR L$018little
L$017ret:
	ret
align	16
L$016lot:
	test	edx,3
	jz	NEAR L$019aligned
	mov	BYTE [edx],al
	lea	ecx,[ecx-1]
	lea	edx,[1+edx]
	jmp	NEAR L$016lot
L$019aligned:
	mov	DWORD [edx],eax
	lea	ecx,[ecx-4]
	test	ecx,-4
	lea	edx,[4+edx]
	jnz	NEAR L$019aligned
	cmp	ecx,0
	jne	NEAR L$018little
	ret
global	_CRYPTO_memcmp
align	16
_CRYPTO_memcmp:
L$_CRYPTO_memcmp_begin:
	push	esi
	push	edi
	mov	esi,DWORD [12+esp]
	mov	edi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	xor	eax,eax
	xor	edx,edx
	cmp	ecx,0
	je	NEAR L$020no_data
L$021loop:
	mov	dl,BYTE [esi]
	lea	esi,[1+esi]
	xor	dl,BYTE [edi]
	lea	edi,[1+edi]
	or	al,dl
	dec	ecx
	jnz	NEAR L$021loop
	neg	eax
	shr	eax,31
L$020no_data:
	pop	edi
	pop	esi
	ret
global	_OPENSSL_instrument_bus
align	16
_OPENSSL_instrument_bus:
L$_OPENSSL_instrument_bus_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	eax,0
	lea	edx,[_OPENSSL_ia32cap_P]
	bt	DWORD [edx],4
	jnc	NEAR L$022nogo
	bt	DWORD [edx],19
	jnc	NEAR L$022nogo
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	rdtsc
	mov	esi,eax
	mov	ebx,0
	clflush	[edi]
db	240
	add	DWORD [edi],ebx
	jmp	NEAR L$023loop
align	16
L$023loop:
	rdtsc
	mov	edx,eax
	sub	eax,esi
	mov	esi,edx
	mov	ebx,eax
	clflush	[edi]
db	240
	add	DWORD [edi],eax
	lea	edi,[4+edi]
	sub	ecx,1
	jnz	NEAR L$023loop
	mov	eax,DWORD [24+esp]
L$022nogo:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_OPENSSL_instrument_bus2
align	16
_OPENSSL_instrument_bus2:
L$_OPENSSL_instrument_bus2_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	eax,0
	lea	edx,[_OPENSSL_ia32cap_P]
	bt	DWORD [edx],4
	jnc	NEAR L$024nogo
	bt	DWORD [edx],19
	jnc	NEAR L$024nogo
	mov	edi,DWORD [20+esp]
	mov	ecx,DWORD [24+esp]
	mov	ebp,DWORD [28+esp]
	rdtsc
	mov	esi,eax
	mov	ebx,0
	clflush	[edi]
db	240
	add	DWORD [edi],ebx
	rdtsc
	mov	edx,eax
	sub	eax,esi
	mov	esi,edx
	mov	ebx,eax
	jmp	NEAR L$025loop2
align	16
L$025loop2:
	clflush	[edi]
db	240
	add	DWORD [edi],eax
	sub	ebp,1
	jz	NEAR L$026done2
	rdtsc
	mov	edx,eax
	sub	eax,esi
	mov	esi,edx
	cmp	eax,ebx
	mov	ebx,eax
	mov	edx,0
	setne	dl
	sub	ecx,edx
	lea	edi,[edx*4+edi]
	jnz	NEAR L$025loop2
L$026done2:
	mov	eax,DWORD [24+esp]
	sub	eax,ecx
L$024nogo:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_OPENSSL_ia32_rdrand_bytes
align	16
_OPENSSL_ia32_rdrand_bytes:
L$_OPENSSL_ia32_rdrand_bytes_begin:
	push	edi
	push	ebx
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	ebx,DWORD [16+esp]
	cmp	ebx,0
	je	NEAR L$027done
	mov	ecx,8
L$028loop:
db	15,199,242
	jc	NEAR L$029break
	loop	L$028loop
	jmp	NEAR L$027done
align	16
L$029break:
	cmp	ebx,4
	jb	NEAR L$030tail
	mov	DWORD [edi],edx
	lea	edi,[4+edi]
	add	eax,4
	sub	ebx,4
	jz	NEAR L$027done
	mov	ecx,8
	jmp	NEAR L$028loop
align	16
L$030tail:
	mov	BYTE [edi],dl
	lea	edi,[1+edi]
	inc	eax
	shr	edx,8
	dec	ebx
	jnz	NEAR L$030tail
L$027done:
	xor	edx,edx
	pop	ebx
	pop	edi
	ret
global	_OPENSSL_ia32_rdseed_bytes
align	16
_OPENSSL_ia32_rdseed_bytes:
L$_OPENSSL_ia32_rdseed_bytes_begin:
	push	edi
	push	ebx
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	ebx,DWORD [16+esp]
	cmp	ebx,0
	je	NEAR L$031done
	mov	ecx,8
L$032loop:
db	15,199,250
	jc	NEAR L$033break
	loop	L$032loop
	jmp	NEAR L$031done
align	16
L$033break:
	cmp	ebx,4
	jb	NEAR L$034tail
	mov	DWORD [edi],edx
	lea	edi,[4+edi]
	add	eax,4
	sub	ebx,4
	jz	NEAR L$031done
	mov	ecx,8
	jmp	NEAR L$032loop
align	16
L$034tail:
	mov	BYTE [edi],dl
	lea	edi,[1+edi]
	inc	eax
	shr	edx,8
	dec	ebx
	jnz	NEAR L$034tail
L$031done:
	xor	edx,edx
	pop	ebx
	pop	edi
	ret
segment	.bss
common	_OPENSSL_ia32cap_P 16
segment	.CRT$XCU data align=4
extern	_OPENSSL_cpuid_setup
dd	_OPENSSL_cpuid_setup
                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/engines/                                    0000775 0000000 0000000 00000000000 14746647661 0024020 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/engines/e_padlock-x86.asm                   0000664 0000000 0000000 00000041535 14746647661 0027076 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        %ifidn __OUTPUT_FORMAT__,obj
section	code	use32 class=code align=64
%elifidn __OUTPUT_FORMAT__,win32
$@feat.00 equ 1
section	.text	code align=64
%else
section	.text	code
%endif
global	_padlock_capability
align	16
_padlock_capability:
L$_padlock_capability_begin:
	push	ebx
	pushfd
	pop	eax
	mov	ecx,eax
	xor	eax,2097152
	push	eax
	popfd
	pushfd
	pop	eax
	xor	ecx,eax
	xor	eax,eax
	bt	ecx,21
	jnc	NEAR L$000noluck
	cpuid
	xor	eax,eax
	cmp	ebx,0x746e6543
	jne	NEAR L$001zhaoxin
	cmp	edx,0x48727561
	jne	NEAR L$000noluck
	cmp	ecx,0x736c7561
	jne	NEAR L$000noluck
	jmp	NEAR L$002zhaoxinEnd
L$001zhaoxin:
	cmp	ebx,0x68532020
	jne	NEAR L$000noluck
	cmp	edx,0x68676e61
	jne	NEAR L$000noluck
	cmp	ecx,0x20206961
	jne	NEAR L$000noluck
L$002zhaoxinEnd:
	mov	eax,3221225472
	cpuid
	mov	edx,eax
	xor	eax,eax
	cmp	edx,3221225473
	jb	NEAR L$000noluck
	mov	eax,1
	cpuid
	or	eax,15
	xor	ebx,ebx
	and	eax,4095
	cmp	eax,1791
	sete	bl
	mov	eax,3221225473
	push	ebx
	cpuid
	pop	ebx
	mov	eax,edx
	shl	ebx,4
	and	eax,4294967279
	or	eax,ebx
L$000noluck:
	pop	ebx
	ret
global	_padlock_key_bswap
align	16
_padlock_key_bswap:
L$_padlock_key_bswap_begin:
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [240+edx]
	inc	ecx
	shl	ecx,2
L$003bswap_loop:
	mov	eax,DWORD [edx]
	bswap	eax
	mov	DWORD [edx],eax
	lea	edx,[4+edx]
	sub	ecx,1
	jnz	NEAR L$003bswap_loop
	ret
global	_padlock_verify_context
align	16
_padlock_verify_context:
L$_padlock_verify_context_begin:
	mov	edx,DWORD [4+esp]
	lea	eax,[L$padlock_saved_context]
	pushfd
	call	__padlock_verify_ctx
L$004verify_pic_point:
	lea	esp,[4+esp]
	ret
align	16
__padlock_verify_ctx:
	bt	DWORD [4+esp],30
	jnc	NEAR L$005verified
	cmp	edx,DWORD [eax]
	je	NEAR L$005verified
	pushfd
	popfd
L$005verified:
	mov	DWORD [eax],edx
	ret
global	_padlock_reload_key
align	16
_padlock_reload_key:
L$_padlock_reload_key_begin:
	pushfd
	popfd
	ret
global	_padlock_aes_block
align	16
_padlock_aes_block:
L$_padlock_aes_block_begin:
	push	edi
	push	esi
	push	ebx
	mov	edi,DWORD [16+esp]
	mov	esi,DWORD [20+esp]
	mov	edx,DWORD [24+esp]
	mov	ecx,1
	lea	ebx,[32+edx]
	lea	edx,[16+edx]
db	243,15,167,200
	pop	ebx
	pop	esi
	pop	edi
	ret
global	_padlock_ecb_encrypt
align	16
_padlock_ecb_encrypt:
L$_padlock_ecb_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$006ecb_abort
	test	ecx,15
	jnz	NEAR L$006ecb_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$007ecb_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$008ecb_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$008ecb_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	cmp	ecx,ebx
	ja	NEAR L$009ecb_loop
	mov	eax,esi
	cmp	ebp,esp
	cmove	eax,edi
	add	eax,ecx
	neg	eax
	and	eax,4095
	cmp	eax,128
	mov	eax,-128
	cmovae	eax,ebx
	and	ebx,eax
	jz	NEAR L$010ecb_unaligned_tail
	jmp	NEAR L$009ecb_loop
align	16
L$009ecb_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$011ecb_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$011ecb_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,200
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$012ecb_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$012ecb_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jz	NEAR L$013ecb_break
	cmp	ecx,ebx
	jae	NEAR L$009ecb_loop
L$010ecb_unaligned_tail:
	xor	eax,eax
	cmp	esp,ebp
	cmove	eax,ecx
	sub	esp,eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$009ecb_loop
align	16
L$013ecb_break:
	cmp	esp,ebp
	je	NEAR L$014ecb_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$015ecb_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$015ecb_bzero
L$014ecb_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$016ecb_exit
align	16
L$008ecb_aligned:
	lea	ebp,[ecx*1+esi]
	neg	ebp
	and	ebp,4095
	xor	eax,eax
	cmp	ebp,128
	mov	ebp,127
	cmovae	ebp,eax
	and	ebp,ecx
	sub	ecx,ebp
	jz	NEAR L$017ecb_aligned_tail
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,200
	test	ebp,ebp
	jz	NEAR L$016ecb_exit
L$017ecb_aligned_tail:
	mov	ecx,ebp
	lea	ebp,[esp-24]
	mov	esp,ebp
	mov	eax,ebp
	sub	esp,ecx
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$009ecb_loop
L$016ecb_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$006ecb_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_cbc_encrypt
align	16
_padlock_cbc_encrypt:
L$_padlock_cbc_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$018cbc_abort
	test	ecx,15
	jnz	NEAR L$018cbc_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$019cbc_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$020cbc_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$020cbc_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	cmp	ecx,ebx
	ja	NEAR L$021cbc_loop
	mov	eax,esi
	cmp	ebp,esp
	cmove	eax,edi
	add	eax,ecx
	neg	eax
	and	eax,4095
	cmp	eax,64
	mov	eax,-64
	cmovae	eax,ebx
	and	ebx,eax
	jz	NEAR L$022cbc_unaligned_tail
	jmp	NEAR L$021cbc_loop
align	16
L$021cbc_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$023cbc_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$023cbc_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,208
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$024cbc_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$024cbc_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jz	NEAR L$025cbc_break
	cmp	ecx,ebx
	jae	NEAR L$021cbc_loop
L$022cbc_unaligned_tail:
	xor	eax,eax
	cmp	esp,ebp
	cmove	eax,ecx
	sub	esp,eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$021cbc_loop
align	16
L$025cbc_break:
	cmp	esp,ebp
	je	NEAR L$026cbc_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$027cbc_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$027cbc_bzero
L$026cbc_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$028cbc_exit
align	16
L$020cbc_aligned:
	lea	ebp,[ecx*1+esi]
	neg	ebp
	and	ebp,4095
	xor	eax,eax
	cmp	ebp,64
	mov	ebp,63
	cmovae	ebp,eax
	and	ebp,ecx
	sub	ecx,ebp
	jz	NEAR L$029cbc_aligned_tail
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,208
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	test	ebp,ebp
	jz	NEAR L$028cbc_exit
L$029cbc_aligned_tail:
	mov	ecx,ebp
	lea	ebp,[esp-24]
	mov	esp,ebp
	mov	eax,ebp
	sub	esp,ecx
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	mov	eax,edi
	mov	ebx,ecx
	shr	ecx,2
	lea	edi,[esp]
db	243,165
	mov	esi,esp
	mov	edi,eax
	mov	ecx,ebx
	jmp	NEAR L$021cbc_loop
L$028cbc_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$018cbc_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_cfb_encrypt
align	16
_padlock_cfb_encrypt:
L$_padlock_cfb_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$030cfb_abort
	test	ecx,15
	jnz	NEAR L$030cfb_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$031cfb_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$032cfb_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$032cfb_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	jmp	NEAR L$033cfb_loop
align	16
L$033cfb_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$034cfb_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$034cfb_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,224
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$035cfb_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$035cfb_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jnz	NEAR L$033cfb_loop
	cmp	esp,ebp
	je	NEAR L$036cfb_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$037cfb_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$037cfb_bzero
L$036cfb_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$038cfb_exit
align	16
L$032cfb_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,224
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
L$038cfb_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$030cfb_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_ofb_encrypt
align	16
_padlock_ofb_encrypt:
L$_padlock_ofb_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$039ofb_abort
	test	ecx,15
	jnz	NEAR L$039ofb_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$040ofb_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	xor	ebx,ebx
	test	DWORD [edx],32
	jnz	NEAR L$041ofb_aligned
	test	edi,15
	setz	al
	test	esi,15
	setz	bl
	test	eax,ebx
	jnz	NEAR L$041ofb_aligned
	neg	eax
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	jmp	NEAR L$042ofb_loop
align	16
L$042ofb_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	test	edi,15
	cmovnz	edi,esp
	test	esi,15
	jz	NEAR L$043ofb_inp_aligned
	shr	ecx,2
db	243,165
	sub	edi,ebx
	mov	ecx,ebx
	mov	esi,edi
L$043ofb_inp_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,232
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	test	edi,15
	jz	NEAR L$044ofb_out_aligned
	mov	ecx,ebx
	lea	esi,[esp]
	shr	ecx,2
db	243,165
	sub	edi,ebx
L$044ofb_out_aligned:
	mov	esi,DWORD [4+ebp]
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jnz	NEAR L$042ofb_loop
	cmp	esp,ebp
	je	NEAR L$045ofb_done
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$046ofb_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$046ofb_bzero
L$045ofb_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	jmp	NEAR L$047ofb_exit
align	16
L$041ofb_aligned:
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,232
	movaps	xmm0,[eax]
	movaps	[edx-16],xmm0
L$047ofb_exit:
	mov	eax,1
	lea	esp,[4+esp]
L$039ofb_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_ctr32_encrypt
align	16
_padlock_ctr32_encrypt:
L$_padlock_ctr32_encrypt_begin:
	push	ebp
	push	ebx
	push	esi
	push	edi
	mov	edi,DWORD [20+esp]
	mov	esi,DWORD [24+esp]
	mov	edx,DWORD [28+esp]
	mov	ecx,DWORD [32+esp]
	test	edx,15
	jnz	NEAR L$048ctr32_abort
	test	ecx,15
	jnz	NEAR L$048ctr32_abort
	lea	eax,[L$padlock_saved_context]
	pushfd
	cld
	call	__padlock_verify_ctx
L$049ctr32_pic_point:
	lea	edx,[16+edx]
	xor	eax,eax
	movq	mm0,[edx-16]
	mov	ebx,512
	not	eax
	lea	ebp,[esp-24]
	cmp	ecx,ebx
	cmovc	ebx,ecx
	and	eax,ebx
	mov	ebx,ecx
	neg	eax
	and	ebx,511
	lea	esp,[ebp*1+eax]
	mov	eax,512
	cmovz	ebx,eax
	mov	eax,ebp
	and	ebp,-16
	and	esp,-16
	mov	DWORD [16+ebp],eax
	jmp	NEAR L$050ctr32_loop
align	16
L$050ctr32_loop:
	mov	DWORD [ebp],edi
	mov	DWORD [4+ebp],esi
	mov	DWORD [8+ebp],ecx
	mov	ecx,ebx
	mov	DWORD [12+ebp],ebx
	mov	ecx,DWORD [edx-4]
	xor	edi,edi
	mov	eax,DWORD [edx-8]
L$051ctr32_prepare:
	mov	DWORD [12+edi*1+esp],ecx
	bswap	ecx
	movq	[edi*1+esp],mm0
	inc	ecx
	mov	DWORD [8+edi*1+esp],eax
	bswap	ecx
	lea	edi,[16+edi]
	cmp	edi,ebx
	jb	NEAR L$051ctr32_prepare
	mov	DWORD [edx-4],ecx
	lea	esi,[esp]
	lea	edi,[esp]
	mov	ecx,ebx
	lea	eax,[edx-16]
	lea	ebx,[16+edx]
	shr	ecx,4
db	243,15,167,200
	mov	edi,DWORD [ebp]
	mov	ebx,DWORD [12+ebp]
	mov	esi,DWORD [4+ebp]
	xor	ecx,ecx
L$052ctr32_xor:
	movups	xmm1,[ecx*1+esi]
	lea	ecx,[16+ecx]
	pxor	xmm1,[ecx*1+esp-16]
	movups	[ecx*1+edi-16],xmm1
	cmp	ecx,ebx
	jb	NEAR L$052ctr32_xor
	mov	ecx,DWORD [8+ebp]
	add	edi,ebx
	add	esi,ebx
	sub	ecx,ebx
	mov	ebx,512
	jnz	NEAR L$050ctr32_loop
	pxor	xmm0,xmm0
	lea	eax,[esp]
L$053ctr32_bzero:
	movaps	[eax],xmm0
	lea	eax,[16+eax]
	cmp	ebp,eax
	ja	NEAR L$053ctr32_bzero
L$054ctr32_done:
	mov	ebp,DWORD [16+ebp]
	lea	esp,[24+ebp]
	mov	eax,1
	lea	esp,[4+esp]
	emms
L$048ctr32_abort:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret
global	_padlock_xstore
align	16
_padlock_xstore:
L$_padlock_xstore_begin:
	push	edi
	mov	edi,DWORD [8+esp]
	mov	edx,DWORD [12+esp]
db	15,167,192
	pop	edi
	ret
align	16
__win32_segv_handler:
	mov	eax,1
	mov	edx,DWORD [4+esp]
	mov	ecx,DWORD [12+esp]
	cmp	DWORD [edx],3221225477
	jne	NEAR L$055ret
	add	DWORD [184+ecx],4
	mov	eax,0
L$055ret:
	ret
%if	__NASM_VERSION_ID__ >= 0x02030000
safeseh	__win32_segv_handler
%endif
global	_padlock_sha1_oneshot
align	16
_padlock_sha1_oneshot:
L$_padlock_sha1_oneshot_begin:
	push	edi
	push	esi
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	push	__win32_segv_handler
db	100,255,48
db	100,137,32
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	mov	eax,DWORD [16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	mov	DWORD [16+esp],eax
	xor	eax,eax
db	243,15,166,200
	movaps	xmm0,[esp]
	mov	eax,DWORD [16+esp]
	mov	esp,edx
db	100,143,5,0,0,0,0
	lea	esp,[4+esp]
	mov	edi,DWORD [16+esp]
	movups	[edi],xmm0
	mov	DWORD [16+edi],eax
	pop	esi
	pop	edi
	ret
global	_padlock_sha1_blocks
align	16
_padlock_sha1_blocks:
L$_padlock_sha1_blocks_begin:
	push	edi
	push	esi
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	edx,esp
	mov	ecx,DWORD [20+esp]
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	mov	eax,DWORD [16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	mov	DWORD [16+esp],eax
	mov	eax,-1
db	243,15,166,200
	movaps	xmm0,[esp]
	mov	eax,DWORD [16+esp]
	mov	esp,edx
	mov	edi,DWORD [12+esp]
	movups	[edi],xmm0
	mov	DWORD [16+edi],eax
	pop	esi
	pop	edi
	ret
global	_padlock_sha256_oneshot
align	16
_padlock_sha256_oneshot:
L$_padlock_sha256_oneshot_begin:
	push	edi
	push	esi
	xor	eax,eax
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	push	__win32_segv_handler
db	100,255,48
db	100,137,32
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	movups	xmm1,[16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	movaps	[16+esp],xmm1
	xor	eax,eax
db	243,15,166,208
	movaps	xmm0,[esp]
	movaps	xmm1,[16+esp]
	mov	esp,edx
db	100,143,5,0,0,0,0
	lea	esp,[4+esp]
	mov	edi,DWORD [16+esp]
	movups	[edi],xmm0
	movups	[16+edi],xmm1
	pop	esi
	pop	edi
	ret
global	_padlock_sha256_blocks
align	16
_padlock_sha256_blocks:
L$_padlock_sha256_blocks_begin:
	push	edi
	push	esi
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	movups	xmm1,[16+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	movaps	[16+esp],xmm1
	mov	eax,-1
db	243,15,166,208
	movaps	xmm0,[esp]
	movaps	xmm1,[16+esp]
	mov	esp,edx
	mov	edi,DWORD [12+esp]
	movups	[edi],xmm0
	movups	[16+edi],xmm1
	pop	esi
	pop	edi
	ret
global	_padlock_sha512_blocks
align	16
_padlock_sha512_blocks:
L$_padlock_sha512_blocks_begin:
	push	edi
	push	esi
	mov	edi,DWORD [12+esp]
	mov	esi,DWORD [16+esp]
	mov	ecx,DWORD [20+esp]
	mov	edx,esp
	add	esp,-128
	movups	xmm0,[edi]
	and	esp,-16
	movups	xmm1,[16+edi]
	movups	xmm2,[32+edi]
	movups	xmm3,[48+edi]
	movaps	[esp],xmm0
	mov	edi,esp
	movaps	[16+esp],xmm1
	movaps	[32+esp],xmm2
	movaps	[48+esp],xmm3
db	243,15,166,224
	movaps	xmm0,[esp]
	movaps	xmm1,[16+esp]
	movaps	xmm2,[32+esp]
	movaps	xmm3,[48+esp]
	mov	esp,edx
	mov	edi,DWORD [12+esp]
	movups	[edi],xmm0
	movups	[16+edi],xmm1
	movups	[32+edi],xmm2
	movups	[48+edi],xmm3
	pop	esi
	pop	edi
	ret
db	86,73,65,32,80,97,100,108,111,99,107,32,120,56,54,32
db	109,111,100,117,108,101,44,32,67,82,89,80,84,79,71,65
db	77,83,32,98,121,32,60,97,112,112,114,111,64,111,112,101
db	110,115,115,108,46,111,114,103,62,0
align	16
section	.data align=4
align	4
L$padlock_saved_context:
dd	0
                                                                                                                                                                   node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/                                    0000775 0000000 0000000 00000000000 14746647661 0024013 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/crypto/                             0000775 0000000 0000000 00000000000 14746647661 0025333 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/crypto/bn_conf.h                    0000664 0000000 0000000 00000001505 14746647661 0027111 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /* WARNING: do not edit! */
/* Generated by makefile from include/crypto/bn_conf.h.in */
/*
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OSSL_CRYPTO_BN_CONF_H
# define OSSL_CRYPTO_BN_CONF_H
# pragma once

/*
 * The contents of this file are not used in the UEFI build, as
 * both 32-bit and 64-bit builds are supported from a single run
 * of the Configure script.
 */

/* Should we define BN_DIV2W here? */

/* Only one for the following should be defined */
#undef SIXTY_FOUR_BIT_LONG
#undef SIXTY_FOUR_BIT
#define THIRTY_TWO_BIT

#endif
                                                                                                                                                                                           node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/crypto/dso_conf.h                   0000664 0000000 0000000 00000001061 14746647661 0027274 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /* WARNING: do not edit! */
/* Generated by makefile from include/crypto/dso_conf.h.in */
/*
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OSSL_CRYPTO_DSO_CONF_H
# define OSSL_CRYPTO_DSO_CONF_H
# pragma once

# define DSO_WIN32
# define DSO_EXTENSION ".dll"
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/                            0000775 0000000 0000000 00000000000 14746647661 0025476 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/asn1.h                      0000664 0000000 0000000 00000166762 14746647661 0026533 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/asn1.h.in
 *
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_ASN1_H
# define OPENSSL_ASN1_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_ASN1_H
# endif

# include <time.h>
# include <openssl/e_os2.h>
# include <openssl/opensslconf.h>
# include <openssl/bio.h>
# include <openssl/safestack.h>
# include <openssl/asn1err.h>
# include <openssl/symhacks.h>

# include <openssl/types.h>
# include <openssl/bn.h>

# ifdef OPENSSL_BUILD_SHLIBCRYPTO
#  undef OPENSSL_EXTERN
#  define OPENSSL_EXTERN OPENSSL_EXPORT
# endif

#ifdef  __cplusplus
extern "C" {
#endif

# define V_ASN1_UNIVERSAL                0x00
# define V_ASN1_APPLICATION              0x40
# define V_ASN1_CONTEXT_SPECIFIC         0x80
# define V_ASN1_PRIVATE                  0xc0

# define V_ASN1_CONSTRUCTED              0x20
# define V_ASN1_PRIMITIVE_TAG            0x1f
# define V_ASN1_PRIMATIVE_TAG /*compat*/ V_ASN1_PRIMITIVE_TAG

# define V_ASN1_APP_CHOOSE               -2/* let the recipient choose */
# define V_ASN1_OTHER                    -3/* used in ASN1_TYPE */
# define V_ASN1_ANY                      -4/* used in ASN1 template code */

# define V_ASN1_UNDEF                    -1
/* ASN.1 tag values */
# define V_ASN1_EOC                      0
# define V_ASN1_BOOLEAN                  1 /**/
# define V_ASN1_INTEGER                  2
# define V_ASN1_BIT_STRING               3
# define V_ASN1_OCTET_STRING             4
# define V_ASN1_NULL                     5
# define V_ASN1_OBJECT                   6
# define V_ASN1_OBJECT_DESCRIPTOR        7
# define V_ASN1_EXTERNAL                 8
# define V_ASN1_REAL                     9
# define V_ASN1_ENUMERATED               10
# define V_ASN1_UTF8STRING               12
# define V_ASN1_SEQUENCE                 16
# define V_ASN1_SET                      17
# define V_ASN1_NUMERICSTRING            18 /**/
# define V_ASN1_PRINTABLESTRING          19
# define V_ASN1_T61STRING                20
# define V_ASN1_TELETEXSTRING            20/* alias */
# define V_ASN1_VIDEOTEXSTRING           21 /**/
# define V_ASN1_IA5STRING                22
# define V_ASN1_UTCTIME                  23
# define V_ASN1_GENERALIZEDTIME          24 /**/
# define V_ASN1_GRAPHICSTRING            25 /**/
# define V_ASN1_ISO64STRING              26 /**/
# define V_ASN1_VISIBLESTRING            26/* alias */
# define V_ASN1_GENERALSTRING            27 /**/
# define V_ASN1_UNIVERSALSTRING          28 /**/
# define V_ASN1_BMPSTRING                30

/*
 * NB the constants below are used internally by ASN1_INTEGER
 * and ASN1_ENUMERATED to indicate the sign. They are *not* on
 * the wire tag values.
 */

# define V_ASN1_NEG                      0x100
# define V_ASN1_NEG_INTEGER              (2 | V_ASN1_NEG)
# define V_ASN1_NEG_ENUMERATED           (10 | V_ASN1_NEG)

/* For use with d2i_ASN1_type_bytes() */
# define B_ASN1_NUMERICSTRING    0x0001
# define B_ASN1_PRINTABLESTRING  0x0002
# define B_ASN1_T61STRING        0x0004
# define B_ASN1_TELETEXSTRING    0x0004
# define B_ASN1_VIDEOTEXSTRING   0x0008
# define B_ASN1_IA5STRING        0x0010
# define B_ASN1_GRAPHICSTRING    0x0020
# define B_ASN1_ISO64STRING      0x0040
# define B_ASN1_VISIBLESTRING    0x0040
# define B_ASN1_GENERALSTRING    0x0080
# define B_ASN1_UNIVERSALSTRING  0x0100
# define B_ASN1_OCTET_STRING     0x0200
# define B_ASN1_BIT_STRING       0x0400
# define B_ASN1_BMPSTRING        0x0800
# define B_ASN1_UNKNOWN          0x1000
# define B_ASN1_UTF8STRING       0x2000
# define B_ASN1_UTCTIME          0x4000
# define B_ASN1_GENERALIZEDTIME  0x8000
# define B_ASN1_SEQUENCE         0x10000
/* For use with ASN1_mbstring_copy() */
# define MBSTRING_FLAG           0x1000
# define MBSTRING_UTF8           (MBSTRING_FLAG)
# define MBSTRING_ASC            (MBSTRING_FLAG|1)
# define MBSTRING_BMP            (MBSTRING_FLAG|2)
# define MBSTRING_UNIV           (MBSTRING_FLAG|4)
# define SMIME_OLDMIME           0x400
# define SMIME_CRLFEOL           0x800
# define SMIME_STREAM            0x1000

/* Stacks for types not otherwise defined in this header */
SKM_DEFINE_STACK_OF_INTERNAL(X509_ALGOR, X509_ALGOR, X509_ALGOR)
#define sk_X509_ALGOR_num(sk) OPENSSL_sk_num(ossl_check_const_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_value(sk, idx) ((X509_ALGOR *)OPENSSL_sk_value(ossl_check_const_X509_ALGOR_sk_type(sk), (idx)))
#define sk_X509_ALGOR_new(cmp) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_new(ossl_check_X509_ALGOR_compfunc_type(cmp)))
#define sk_X509_ALGOR_new_null() ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_new_null())
#define sk_X509_ALGOR_new_reserve(cmp, n) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_new_reserve(ossl_check_X509_ALGOR_compfunc_type(cmp), (n)))
#define sk_X509_ALGOR_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_X509_ALGOR_sk_type(sk), (n))
#define sk_X509_ALGOR_free(sk) OPENSSL_sk_free(ossl_check_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_zero(sk) OPENSSL_sk_zero(ossl_check_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_delete(sk, i) ((X509_ALGOR *)OPENSSL_sk_delete(ossl_check_X509_ALGOR_sk_type(sk), (i)))
#define sk_X509_ALGOR_delete_ptr(sk, ptr) ((X509_ALGOR *)OPENSSL_sk_delete_ptr(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr)))
#define sk_X509_ALGOR_push(sk, ptr) OPENSSL_sk_push(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_pop(sk) ((X509_ALGOR *)OPENSSL_sk_pop(ossl_check_X509_ALGOR_sk_type(sk)))
#define sk_X509_ALGOR_shift(sk) ((X509_ALGOR *)OPENSSL_sk_shift(ossl_check_X509_ALGOR_sk_type(sk)))
#define sk_X509_ALGOR_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_X509_ALGOR_sk_type(sk),ossl_check_X509_ALGOR_freefunc_type(freefunc))
#define sk_X509_ALGOR_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr), (idx))
#define sk_X509_ALGOR_set(sk, idx, ptr) ((X509_ALGOR *)OPENSSL_sk_set(ossl_check_X509_ALGOR_sk_type(sk), (idx), ossl_check_X509_ALGOR_type(ptr)))
#define sk_X509_ALGOR_find(sk, ptr) OPENSSL_sk_find(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr))
#define sk_X509_ALGOR_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_type(ptr), pnum)
#define sk_X509_ALGOR_sort(sk) OPENSSL_sk_sort(ossl_check_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_X509_ALGOR_sk_type(sk))
#define sk_X509_ALGOR_dup(sk) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_dup(ossl_check_const_X509_ALGOR_sk_type(sk)))
#define sk_X509_ALGOR_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(X509_ALGOR) *)OPENSSL_sk_deep_copy(ossl_check_const_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_copyfunc_type(copyfunc), ossl_check_X509_ALGOR_freefunc_type(freefunc)))
#define sk_X509_ALGOR_set_cmp_func(sk, cmp) ((sk_X509_ALGOR_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_X509_ALGOR_sk_type(sk), ossl_check_X509_ALGOR_compfunc_type(cmp)))



# define ASN1_STRING_FLAG_BITS_LEFT 0x08/* Set if 0x07 has bits left value */
/*
 * This indicates that the ASN1_STRING is not a real value but just a place
 * holder for the location where indefinite length constructed data should be
 * inserted in the memory buffer
 */
# define ASN1_STRING_FLAG_NDEF 0x010

/*
 * This flag is used by the CMS code to indicate that a string is not
 * complete and is a place holder for content when it had all been accessed.
 * The flag will be reset when content has been written to it.
 */

# define ASN1_STRING_FLAG_CONT 0x020
/*
 * This flag is used by ASN1 code to indicate an ASN1_STRING is an MSTRING
 * type.
 */
# define ASN1_STRING_FLAG_MSTRING 0x040
/* String is embedded and only content should be freed */
# define ASN1_STRING_FLAG_EMBED 0x080
/* String should be parsed in RFC 5280's time format */
# define ASN1_STRING_FLAG_X509_TIME 0x100
/* This is the base type that holds just about everything :-) */
struct asn1_string_st {
    int length;
    int type;
    unsigned char *data;
    /*
     * The value of the following field depends on the type being held.  It
     * is mostly being used for BIT_STRING so if the input data has a
     * non-zero 'unused bits' value, it will be handled correctly
     */
    long flags;
};

/*
 * ASN1_ENCODING structure: this is used to save the received encoding of an
 * ASN1 type. This is useful to get round problems with invalid encodings
 * which can break signatures.
 */

typedef struct ASN1_ENCODING_st {
    unsigned char *enc;         /* DER encoding */
    long len;                   /* Length of encoding */
    int modified;               /* set to 1 if 'enc' is invalid */
} ASN1_ENCODING;

/* Used with ASN1 LONG type: if a long is set to this it is omitted */
# define ASN1_LONG_UNDEF 0x7fffffffL

# define STABLE_FLAGS_MALLOC     0x01
/*
 * A zero passed to ASN1_STRING_TABLE_new_add for the flags is interpreted
 * as "don't change" and STABLE_FLAGS_MALLOC is always set. By setting
 * STABLE_FLAGS_MALLOC only we can clear the existing value. Use the alias
 * STABLE_FLAGS_CLEAR to reflect this.
 */
# define STABLE_FLAGS_CLEAR      STABLE_FLAGS_MALLOC
# define STABLE_NO_MASK          0x02
# define DIRSTRING_TYPE  \
 (B_ASN1_PRINTABLESTRING|B_ASN1_T61STRING|B_ASN1_BMPSTRING|B_ASN1_UTF8STRING)
# define PKCS9STRING_TYPE (DIRSTRING_TYPE|B_ASN1_IA5STRING)

struct asn1_string_table_st {
    int nid;
    long minsize;
    long maxsize;
    unsigned long mask;
    unsigned long flags;
};

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_STRING_TABLE, ASN1_STRING_TABLE, ASN1_STRING_TABLE)
#define sk_ASN1_STRING_TABLE_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_value(sk, idx) ((ASN1_STRING_TABLE *)OPENSSL_sk_value(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk), (idx)))
#define sk_ASN1_STRING_TABLE_new(cmp) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_new(ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp)))
#define sk_ASN1_STRING_TABLE_new_null() ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_new_null())
#define sk_ASN1_STRING_TABLE_new_reserve(cmp, n) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp), (n)))
#define sk_ASN1_STRING_TABLE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_STRING_TABLE_sk_type(sk), (n))
#define sk_ASN1_STRING_TABLE_free(sk) OPENSSL_sk_free(ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_delete(sk, i) ((ASN1_STRING_TABLE *)OPENSSL_sk_delete(ossl_check_ASN1_STRING_TABLE_sk_type(sk), (i)))
#define sk_ASN1_STRING_TABLE_delete_ptr(sk, ptr) ((ASN1_STRING_TABLE *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr)))
#define sk_ASN1_STRING_TABLE_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_pop(sk) ((ASN1_STRING_TABLE *)OPENSSL_sk_pop(ossl_check_ASN1_STRING_TABLE_sk_type(sk)))
#define sk_ASN1_STRING_TABLE_shift(sk) ((ASN1_STRING_TABLE *)OPENSSL_sk_shift(ossl_check_ASN1_STRING_TABLE_sk_type(sk)))
#define sk_ASN1_STRING_TABLE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_STRING_TABLE_sk_type(sk),ossl_check_ASN1_STRING_TABLE_freefunc_type(freefunc))
#define sk_ASN1_STRING_TABLE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr), (idx))
#define sk_ASN1_STRING_TABLE_set(sk, idx, ptr) ((ASN1_STRING_TABLE *)OPENSSL_sk_set(ossl_check_ASN1_STRING_TABLE_sk_type(sk), (idx), ossl_check_ASN1_STRING_TABLE_type(ptr)))
#define sk_ASN1_STRING_TABLE_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr))
#define sk_ASN1_STRING_TABLE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_type(ptr), pnum)
#define sk_ASN1_STRING_TABLE_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk))
#define sk_ASN1_STRING_TABLE_dup(sk) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_dup(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk)))
#define sk_ASN1_STRING_TABLE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_STRING_TABLE) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_copyfunc_type(copyfunc), ossl_check_ASN1_STRING_TABLE_freefunc_type(freefunc)))
#define sk_ASN1_STRING_TABLE_set_cmp_func(sk, cmp) ((sk_ASN1_STRING_TABLE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp)))


/* size limits: this stuff is taken straight from RFC2459 */

# define ub_name                         32768
# define ub_common_name                  64
# define ub_locality_name                128
# define ub_state_name                   128
# define ub_organization_name            64
# define ub_organization_unit_name       64
# define ub_title                        64
# define ub_email_address                128

/*
 * Declarations for template structures: for full definitions see asn1t.h
 */
typedef struct ASN1_TEMPLATE_st ASN1_TEMPLATE;
typedef struct ASN1_TLC_st ASN1_TLC;
/* This is just an opaque pointer */
typedef struct ASN1_VALUE_st ASN1_VALUE;

/* Declare ASN1 functions: the implement macro in in asn1t.h */

/*
 * The mysterious 'extern' that's passed to some macros is innocuous,
 * and is there to quiet pre-C99 compilers that may complain about empty
 * arguments in macro calls.
 */

# define DECLARE_ASN1_FUNCTIONS_attr(attr, type)                            \
    DECLARE_ASN1_FUNCTIONS_name_attr(attr, type, type)
# define DECLARE_ASN1_FUNCTIONS(type)                                       \
    DECLARE_ASN1_FUNCTIONS_attr(extern, type)

# define DECLARE_ASN1_ALLOC_FUNCTIONS_attr(attr, type)                      \
    DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, type)
# define DECLARE_ASN1_ALLOC_FUNCTIONS(type)                                 \
    DECLARE_ASN1_ALLOC_FUNCTIONS_attr(extern, type)

# define DECLARE_ASN1_FUNCTIONS_name_attr(attr, type, name)                 \
    DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, name)                \
    DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(attr, type, name)
# define DECLARE_ASN1_FUNCTIONS_name(type, name)                            \
    DECLARE_ASN1_FUNCTIONS_name_attr(extern, type, name)

# define DECLARE_ASN1_ENCODE_FUNCTIONS_attr(attr, type, itname, name)       \
    DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(attr, type, name)               \
    DECLARE_ASN1_ITEM_attr(attr, itname)
# define DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)                  \
    DECLARE_ASN1_ENCODE_FUNCTIONS_attr(extern, type, itname, name)

# define DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(attr, type, name)          \
    DECLARE_ASN1_ENCODE_FUNCTIONS_attr(attr, type, name, name)
# define DECLARE_ASN1_ENCODE_FUNCTIONS_name(type, name) \
    DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(extern, type, name)

# define DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(attr, type, name)          \
    attr type *d2i_##name(type **a, const unsigned char **in, long len);    \
    attr int i2d_##name(const type *a, unsigned char **out);
# define DECLARE_ASN1_ENCODE_FUNCTIONS_only(type, name)                     \
    DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(extern, type, name)

# define DECLARE_ASN1_NDEF_FUNCTION_attr(attr, name)                        \
    attr int i2d_##name##_NDEF(const name *a, unsigned char **out);
# define DECLARE_ASN1_NDEF_FUNCTION(name)                                   \
    DECLARE_ASN1_NDEF_FUNCTION_attr(extern, name)

# define DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, name)           \
    attr type *name##_new(void);                                            \
    attr void name##_free(type *a);
# define DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name)                      \
    DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(extern, type, name)

# define DECLARE_ASN1_DUP_FUNCTION_attr(attr, type)                         \
    DECLARE_ASN1_DUP_FUNCTION_name_attr(attr, type, type)
# define DECLARE_ASN1_DUP_FUNCTION(type)                                    \
    DECLARE_ASN1_DUP_FUNCTION_attr(extern, type)

# define DECLARE_ASN1_DUP_FUNCTION_name_attr(attr, type, name)              \
    attr type *name##_dup(const type *a);
# define DECLARE_ASN1_DUP_FUNCTION_name(type, name)                         \
    DECLARE_ASN1_DUP_FUNCTION_name_attr(extern, type, name)

# define DECLARE_ASN1_PRINT_FUNCTION_attr(attr, stname)                     \
    DECLARE_ASN1_PRINT_FUNCTION_fname_attr(attr, stname, stname)
# define DECLARE_ASN1_PRINT_FUNCTION(stname)                                \
    DECLARE_ASN1_PRINT_FUNCTION_attr(extern, stname)

# define DECLARE_ASN1_PRINT_FUNCTION_fname_attr(attr, stname, fname)        \
    attr int fname##_print_ctx(BIO *out, const stname *x, int indent,       \
                               const ASN1_PCTX *pctx);
# define DECLARE_ASN1_PRINT_FUNCTION_fname(stname, fname)                   \
    DECLARE_ASN1_PRINT_FUNCTION_fname_attr(extern, stname, fname)

# define D2I_OF(type) type *(*)(type **,const unsigned char **,long)
# define I2D_OF(type) int (*)(const type *,unsigned char **)

# define CHECKED_D2I_OF(type, d2i) \
    ((d2i_of_void*) (1 ? d2i : ((D2I_OF(type))0)))
# define CHECKED_I2D_OF(type, i2d) \
    ((i2d_of_void*) (1 ? i2d : ((I2D_OF(type))0)))
# define CHECKED_NEW_OF(type, xnew) \
    ((void *(*)(void)) (1 ? xnew : ((type *(*)(void))0)))
# define CHECKED_PTR_OF(type, p) \
    ((void*) (1 ? p : (type*)0))
# define CHECKED_PPTR_OF(type, p) \
    ((void**) (1 ? p : (type**)0))

# define TYPEDEF_D2I_OF(type) typedef type *d2i_of_##type(type **,const unsigned char **,long)
# define TYPEDEF_I2D_OF(type) typedef int i2d_of_##type(const type *,unsigned char **)
# define TYPEDEF_D2I2D_OF(type) TYPEDEF_D2I_OF(type); TYPEDEF_I2D_OF(type)

typedef void *d2i_of_void(void **, const unsigned char **, long);
typedef int i2d_of_void(const void *, unsigned char **);

/*-
 * The following macros and typedefs allow an ASN1_ITEM
 * to be embedded in a structure and referenced. Since
 * the ASN1_ITEM pointers need to be globally accessible
 * (possibly from shared libraries) they may exist in
 * different forms. On platforms that support it the
 * ASN1_ITEM structure itself will be globally exported.
 * Other platforms will export a function that returns
 * an ASN1_ITEM pointer.
 *
 * To handle both cases transparently the macros below
 * should be used instead of hard coding an ASN1_ITEM
 * pointer in a structure.
 *
 * The structure will look like this:
 *
 * typedef struct SOMETHING_st {
 *      ...
 *      ASN1_ITEM_EXP *iptr;
 *      ...
 * } SOMETHING;
 *
 * It would be initialised as e.g.:
 *
 * SOMETHING somevar = {...,ASN1_ITEM_ref(X509),...};
 *
 * and the actual pointer extracted with:
 *
 * const ASN1_ITEM *it = ASN1_ITEM_ptr(somevar.iptr);
 *
 * Finally an ASN1_ITEM pointer can be extracted from an
 * appropriate reference with: ASN1_ITEM_rptr(X509). This
 * would be used when a function takes an ASN1_ITEM * argument.
 *
 */


/*
 * Platforms that can't easily handle shared global variables are declared as
 * functions returning ASN1_ITEM pointers.
 */

/* ASN1_ITEM pointer exported type */
typedef const ASN1_ITEM *ASN1_ITEM_EXP (void);

/* Macro to obtain ASN1_ITEM pointer from exported type */
# define ASN1_ITEM_ptr(iptr) (iptr())

/* Macro to include ASN1_ITEM pointer from base type */
# define ASN1_ITEM_ref(iptr) (iptr##_it)

# define ASN1_ITEM_rptr(ref) (ref##_it())

# define DECLARE_ASN1_ITEM_attr(attr, name)                                 \
    attr const ASN1_ITEM * name##_it(void);
# define DECLARE_ASN1_ITEM(name)                                            \
    DECLARE_ASN1_ITEM_attr(extern, name)

/* Parameters used by ASN1_STRING_print_ex() */

/*
 * These determine which characters to escape: RFC2253 special characters,
 * control characters and MSB set characters
 */

# define ASN1_STRFLGS_ESC_2253           1
# define ASN1_STRFLGS_ESC_CTRL           2
# define ASN1_STRFLGS_ESC_MSB            4

/* Lower 8 bits are reserved as an output type specifier */
# define ASN1_DTFLGS_TYPE_MASK    0x0FUL
# define ASN1_DTFLGS_RFC822       0x00UL
# define ASN1_DTFLGS_ISO8601      0x01UL

/*
 * This flag determines how we do escaping: normally RC2253 backslash only,
 * set this to use backslash and quote.
 */

# define ASN1_STRFLGS_ESC_QUOTE          8

/* These three flags are internal use only. */

/* Character is a valid PrintableString character */
# define CHARTYPE_PRINTABLESTRING        0x10
/* Character needs escaping if it is the first character */
# define CHARTYPE_FIRST_ESC_2253         0x20
/* Character needs escaping if it is the last character */
# define CHARTYPE_LAST_ESC_2253          0x40

/*
 * NB the internal flags are safely reused below by flags handled at the top
 * level.
 */

/*
 * If this is set we convert all character strings to UTF8 first
 */

# define ASN1_STRFLGS_UTF8_CONVERT       0x10

/*
 * If this is set we don't attempt to interpret content: just assume all
 * strings are 1 byte per character. This will produce some pretty odd
 * looking output!
 */

# define ASN1_STRFLGS_IGNORE_TYPE        0x20

/* If this is set we include the string type in the output */
# define ASN1_STRFLGS_SHOW_TYPE          0x40

/*
 * This determines which strings to display and which to 'dump' (hex dump of
 * content octets or DER encoding). We can only dump non character strings or
 * everything. If we don't dump 'unknown' they are interpreted as character
 * strings with 1 octet per character and are subject to the usual escaping
 * options.
 */

# define ASN1_STRFLGS_DUMP_ALL           0x80
# define ASN1_STRFLGS_DUMP_UNKNOWN       0x100

/*
 * These determine what 'dumping' does, we can dump the content octets or the
 * DER encoding: both use the RFC2253 #XXXXX notation.
 */

# define ASN1_STRFLGS_DUMP_DER           0x200

/*
 * This flag specifies that RC2254 escaping shall be performed.
 */
#define ASN1_STRFLGS_ESC_2254           0x400

/*
 * All the string flags consistent with RFC2253, escaping control characters
 * isn't essential in RFC2253 but it is advisable anyway.
 */

# define ASN1_STRFLGS_RFC2253    (ASN1_STRFLGS_ESC_2253 | \
                                ASN1_STRFLGS_ESC_CTRL | \
                                ASN1_STRFLGS_ESC_MSB | \
                                ASN1_STRFLGS_UTF8_CONVERT | \
                                ASN1_STRFLGS_DUMP_UNKNOWN | \
                                ASN1_STRFLGS_DUMP_DER)


struct asn1_type_st {
    int type;
    union {
        char *ptr;
        ASN1_BOOLEAN boolean;
        ASN1_STRING *asn1_string;
        ASN1_OBJECT *object;
        ASN1_INTEGER *integer;
        ASN1_ENUMERATED *enumerated;
        ASN1_BIT_STRING *bit_string;
        ASN1_OCTET_STRING *octet_string;
        ASN1_PRINTABLESTRING *printablestring;
        ASN1_T61STRING *t61string;
        ASN1_IA5STRING *ia5string;
        ASN1_GENERALSTRING *generalstring;
        ASN1_BMPSTRING *bmpstring;
        ASN1_UNIVERSALSTRING *universalstring;
        ASN1_UTCTIME *utctime;
        ASN1_GENERALIZEDTIME *generalizedtime;
        ASN1_VISIBLESTRING *visiblestring;
        ASN1_UTF8STRING *utf8string;
        /*
         * set and sequence are left complete and still contain the set or
         * sequence bytes
         */
        ASN1_STRING *set;
        ASN1_STRING *sequence;
        ASN1_VALUE *asn1_value;
    } value;
};

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_TYPE, ASN1_TYPE, ASN1_TYPE)
#define sk_ASN1_TYPE_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_value(sk, idx) ((ASN1_TYPE *)OPENSSL_sk_value(ossl_check_const_ASN1_TYPE_sk_type(sk), (idx)))
#define sk_ASN1_TYPE_new(cmp) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_new(ossl_check_ASN1_TYPE_compfunc_type(cmp)))
#define sk_ASN1_TYPE_new_null() ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_new_null())
#define sk_ASN1_TYPE_new_reserve(cmp, n) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_TYPE_compfunc_type(cmp), (n)))
#define sk_ASN1_TYPE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_TYPE_sk_type(sk), (n))
#define sk_ASN1_TYPE_free(sk) OPENSSL_sk_free(ossl_check_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_delete(sk, i) ((ASN1_TYPE *)OPENSSL_sk_delete(ossl_check_ASN1_TYPE_sk_type(sk), (i)))
#define sk_ASN1_TYPE_delete_ptr(sk, ptr) ((ASN1_TYPE *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr)))
#define sk_ASN1_TYPE_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_pop(sk) ((ASN1_TYPE *)OPENSSL_sk_pop(ossl_check_ASN1_TYPE_sk_type(sk)))
#define sk_ASN1_TYPE_shift(sk) ((ASN1_TYPE *)OPENSSL_sk_shift(ossl_check_ASN1_TYPE_sk_type(sk)))
#define sk_ASN1_TYPE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_TYPE_sk_type(sk),ossl_check_ASN1_TYPE_freefunc_type(freefunc))
#define sk_ASN1_TYPE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr), (idx))
#define sk_ASN1_TYPE_set(sk, idx, ptr) ((ASN1_TYPE *)OPENSSL_sk_set(ossl_check_ASN1_TYPE_sk_type(sk), (idx), ossl_check_ASN1_TYPE_type(ptr)))
#define sk_ASN1_TYPE_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr))
#define sk_ASN1_TYPE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_type(ptr), pnum)
#define sk_ASN1_TYPE_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_TYPE_sk_type(sk))
#define sk_ASN1_TYPE_dup(sk) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_dup(ossl_check_const_ASN1_TYPE_sk_type(sk)))
#define sk_ASN1_TYPE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_TYPE) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_copyfunc_type(copyfunc), ossl_check_ASN1_TYPE_freefunc_type(freefunc)))
#define sk_ASN1_TYPE_set_cmp_func(sk, cmp) ((sk_ASN1_TYPE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_TYPE_sk_type(sk), ossl_check_ASN1_TYPE_compfunc_type(cmp)))


typedef STACK_OF(ASN1_TYPE) ASN1_SEQUENCE_ANY;

DECLARE_ASN1_ENCODE_FUNCTIONS_name(ASN1_SEQUENCE_ANY, ASN1_SEQUENCE_ANY)
DECLARE_ASN1_ENCODE_FUNCTIONS_name(ASN1_SEQUENCE_ANY, ASN1_SET_ANY)

/* This is used to contain a list of bit names */
typedef struct BIT_STRING_BITNAME_st {
    int bitnum;
    const char *lname;
    const char *sname;
} BIT_STRING_BITNAME;

# define B_ASN1_TIME \
                        B_ASN1_UTCTIME | \
                        B_ASN1_GENERALIZEDTIME

# define B_ASN1_PRINTABLE \
                        B_ASN1_NUMERICSTRING| \
                        B_ASN1_PRINTABLESTRING| \
                        B_ASN1_T61STRING| \
                        B_ASN1_IA5STRING| \
                        B_ASN1_BIT_STRING| \
                        B_ASN1_UNIVERSALSTRING|\
                        B_ASN1_BMPSTRING|\
                        B_ASN1_UTF8STRING|\
                        B_ASN1_SEQUENCE|\
                        B_ASN1_UNKNOWN

# define B_ASN1_DIRECTORYSTRING \
                        B_ASN1_PRINTABLESTRING| \
                        B_ASN1_TELETEXSTRING|\
                        B_ASN1_BMPSTRING|\
                        B_ASN1_UNIVERSALSTRING|\
                        B_ASN1_UTF8STRING

# define B_ASN1_DISPLAYTEXT \
                        B_ASN1_IA5STRING| \
                        B_ASN1_VISIBLESTRING| \
                        B_ASN1_BMPSTRING|\
                        B_ASN1_UTF8STRING

DECLARE_ASN1_ALLOC_FUNCTIONS_name(ASN1_TYPE, ASN1_TYPE)
DECLARE_ASN1_ENCODE_FUNCTIONS(ASN1_TYPE, ASN1_ANY, ASN1_TYPE)

int ASN1_TYPE_get(const ASN1_TYPE *a);
void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);

ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_OBJECT, ASN1_OBJECT, ASN1_OBJECT)
#define sk_ASN1_OBJECT_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_value(sk, idx) ((ASN1_OBJECT *)OPENSSL_sk_value(ossl_check_const_ASN1_OBJECT_sk_type(sk), (idx)))
#define sk_ASN1_OBJECT_new(cmp) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_new(ossl_check_ASN1_OBJECT_compfunc_type(cmp)))
#define sk_ASN1_OBJECT_new_null() ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_new_null())
#define sk_ASN1_OBJECT_new_reserve(cmp, n) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_OBJECT_compfunc_type(cmp), (n)))
#define sk_ASN1_OBJECT_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_OBJECT_sk_type(sk), (n))
#define sk_ASN1_OBJECT_free(sk) OPENSSL_sk_free(ossl_check_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_delete(sk, i) ((ASN1_OBJECT *)OPENSSL_sk_delete(ossl_check_ASN1_OBJECT_sk_type(sk), (i)))
#define sk_ASN1_OBJECT_delete_ptr(sk, ptr) ((ASN1_OBJECT *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr)))
#define sk_ASN1_OBJECT_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_pop(sk) ((ASN1_OBJECT *)OPENSSL_sk_pop(ossl_check_ASN1_OBJECT_sk_type(sk)))
#define sk_ASN1_OBJECT_shift(sk) ((ASN1_OBJECT *)OPENSSL_sk_shift(ossl_check_ASN1_OBJECT_sk_type(sk)))
#define sk_ASN1_OBJECT_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_OBJECT_sk_type(sk),ossl_check_ASN1_OBJECT_freefunc_type(freefunc))
#define sk_ASN1_OBJECT_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr), (idx))
#define sk_ASN1_OBJECT_set(sk, idx, ptr) ((ASN1_OBJECT *)OPENSSL_sk_set(ossl_check_ASN1_OBJECT_sk_type(sk), (idx), ossl_check_ASN1_OBJECT_type(ptr)))
#define sk_ASN1_OBJECT_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr))
#define sk_ASN1_OBJECT_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_type(ptr), pnum)
#define sk_ASN1_OBJECT_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_OBJECT_sk_type(sk))
#define sk_ASN1_OBJECT_dup(sk) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_dup(ossl_check_const_ASN1_OBJECT_sk_type(sk)))
#define sk_ASN1_OBJECT_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_OBJECT) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_copyfunc_type(copyfunc), ossl_check_ASN1_OBJECT_freefunc_type(freefunc)))
#define sk_ASN1_OBJECT_set_cmp_func(sk, cmp) ((sk_ASN1_OBJECT_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_OBJECT_sk_type(sk), ossl_check_ASN1_OBJECT_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS(ASN1_OBJECT)

ASN1_STRING *ASN1_STRING_new(void);
void ASN1_STRING_free(ASN1_STRING *a);
void ASN1_STRING_clear_free(ASN1_STRING *a);
int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
DECLARE_ASN1_DUP_FUNCTION(ASN1_STRING)
ASN1_STRING *ASN1_STRING_type_new(int type);
int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
  /*
   * Since this is used to store all sorts of things, via macros, for now,
   * make its data void *
   */
int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
int ASN1_STRING_length(const ASN1_STRING *x);
# ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 void ASN1_STRING_length_set(ASN1_STRING *x, int n);
# endif
int ASN1_STRING_type(const ASN1_STRING *x);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 unsigned char *ASN1_STRING_data(ASN1_STRING *x);
# endif
const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x);

DECLARE_ASN1_FUNCTIONS(ASN1_BIT_STRING)
int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                          const unsigned char *flags, int flags_len);

int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                               BIT_STRING_BITNAME *tbl, int indent);
int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                            BIT_STRING_BITNAME *tbl);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_INTEGER, ASN1_INTEGER, ASN1_INTEGER)
#define sk_ASN1_INTEGER_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_value(sk, idx) ((ASN1_INTEGER *)OPENSSL_sk_value(ossl_check_const_ASN1_INTEGER_sk_type(sk), (idx)))
#define sk_ASN1_INTEGER_new(cmp) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_new(ossl_check_ASN1_INTEGER_compfunc_type(cmp)))
#define sk_ASN1_INTEGER_new_null() ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_new_null())
#define sk_ASN1_INTEGER_new_reserve(cmp, n) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_INTEGER_compfunc_type(cmp), (n)))
#define sk_ASN1_INTEGER_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_INTEGER_sk_type(sk), (n))
#define sk_ASN1_INTEGER_free(sk) OPENSSL_sk_free(ossl_check_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_delete(sk, i) ((ASN1_INTEGER *)OPENSSL_sk_delete(ossl_check_ASN1_INTEGER_sk_type(sk), (i)))
#define sk_ASN1_INTEGER_delete_ptr(sk, ptr) ((ASN1_INTEGER *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr)))
#define sk_ASN1_INTEGER_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_pop(sk) ((ASN1_INTEGER *)OPENSSL_sk_pop(ossl_check_ASN1_INTEGER_sk_type(sk)))
#define sk_ASN1_INTEGER_shift(sk) ((ASN1_INTEGER *)OPENSSL_sk_shift(ossl_check_ASN1_INTEGER_sk_type(sk)))
#define sk_ASN1_INTEGER_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_INTEGER_sk_type(sk),ossl_check_ASN1_INTEGER_freefunc_type(freefunc))
#define sk_ASN1_INTEGER_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr), (idx))
#define sk_ASN1_INTEGER_set(sk, idx, ptr) ((ASN1_INTEGER *)OPENSSL_sk_set(ossl_check_ASN1_INTEGER_sk_type(sk), (idx), ossl_check_ASN1_INTEGER_type(ptr)))
#define sk_ASN1_INTEGER_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr))
#define sk_ASN1_INTEGER_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_type(ptr), pnum)
#define sk_ASN1_INTEGER_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_INTEGER_sk_type(sk))
#define sk_ASN1_INTEGER_dup(sk) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_dup(ossl_check_const_ASN1_INTEGER_sk_type(sk)))
#define sk_ASN1_INTEGER_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_INTEGER) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_copyfunc_type(copyfunc), ossl_check_ASN1_INTEGER_freefunc_type(freefunc)))
#define sk_ASN1_INTEGER_set_cmp_func(sk, cmp) ((sk_ASN1_INTEGER_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_INTEGER_sk_type(sk), ossl_check_ASN1_INTEGER_compfunc_type(cmp)))



DECLARE_ASN1_FUNCTIONS(ASN1_INTEGER)
ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                long length);
DECLARE_ASN1_DUP_FUNCTION(ASN1_INTEGER)
int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);

DECLARE_ASN1_FUNCTIONS(ASN1_ENUMERATED)

int ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                               int offset_day, long offset_sec);
int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);

int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                               time_t t);
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                               time_t t, int offset_day,
                                               long offset_sec);
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);

int ASN1_TIME_diff(int *pday, int *psec,
                   const ASN1_TIME *from, const ASN1_TIME *to);

DECLARE_ASN1_FUNCTIONS(ASN1_OCTET_STRING)
DECLARE_ASN1_DUP_FUNCTION(ASN1_OCTET_STRING)
int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                          const ASN1_OCTET_STRING *b);
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
                          int len);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_UTF8STRING, ASN1_UTF8STRING, ASN1_UTF8STRING)
#define sk_ASN1_UTF8STRING_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_value(sk, idx) ((ASN1_UTF8STRING *)OPENSSL_sk_value(ossl_check_const_ASN1_UTF8STRING_sk_type(sk), (idx)))
#define sk_ASN1_UTF8STRING_new(cmp) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_new(ossl_check_ASN1_UTF8STRING_compfunc_type(cmp)))
#define sk_ASN1_UTF8STRING_new_null() ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_new_null())
#define sk_ASN1_UTF8STRING_new_reserve(cmp, n) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_UTF8STRING_compfunc_type(cmp), (n)))
#define sk_ASN1_UTF8STRING_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_UTF8STRING_sk_type(sk), (n))
#define sk_ASN1_UTF8STRING_free(sk) OPENSSL_sk_free(ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_delete(sk, i) ((ASN1_UTF8STRING *)OPENSSL_sk_delete(ossl_check_ASN1_UTF8STRING_sk_type(sk), (i)))
#define sk_ASN1_UTF8STRING_delete_ptr(sk, ptr) ((ASN1_UTF8STRING *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr)))
#define sk_ASN1_UTF8STRING_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_pop(sk) ((ASN1_UTF8STRING *)OPENSSL_sk_pop(ossl_check_ASN1_UTF8STRING_sk_type(sk)))
#define sk_ASN1_UTF8STRING_shift(sk) ((ASN1_UTF8STRING *)OPENSSL_sk_shift(ossl_check_ASN1_UTF8STRING_sk_type(sk)))
#define sk_ASN1_UTF8STRING_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_UTF8STRING_sk_type(sk),ossl_check_ASN1_UTF8STRING_freefunc_type(freefunc))
#define sk_ASN1_UTF8STRING_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr), (idx))
#define sk_ASN1_UTF8STRING_set(sk, idx, ptr) ((ASN1_UTF8STRING *)OPENSSL_sk_set(ossl_check_ASN1_UTF8STRING_sk_type(sk), (idx), ossl_check_ASN1_UTF8STRING_type(ptr)))
#define sk_ASN1_UTF8STRING_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr))
#define sk_ASN1_UTF8STRING_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_type(ptr), pnum)
#define sk_ASN1_UTF8STRING_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_UTF8STRING_sk_type(sk))
#define sk_ASN1_UTF8STRING_dup(sk) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_dup(ossl_check_const_ASN1_UTF8STRING_sk_type(sk)))
#define sk_ASN1_UTF8STRING_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_UTF8STRING) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_copyfunc_type(copyfunc), ossl_check_ASN1_UTF8STRING_freefunc_type(freefunc)))
#define sk_ASN1_UTF8STRING_set_cmp_func(sk, cmp) ((sk_ASN1_UTF8STRING_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_check_ASN1_UTF8STRING_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS(ASN1_VISIBLESTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_UNIVERSALSTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_UTF8STRING)
DECLARE_ASN1_FUNCTIONS(ASN1_NULL)
DECLARE_ASN1_FUNCTIONS(ASN1_BMPSTRING)

int UTF8_getc(const unsigned char *str, int len, unsigned long *val);
int UTF8_putc(unsigned char *str, int len, unsigned long value);

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_GENERALSTRING, ASN1_GENERALSTRING, ASN1_GENERALSTRING)
#define sk_ASN1_GENERALSTRING_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_value(sk, idx) ((ASN1_GENERALSTRING *)OPENSSL_sk_value(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk), (idx)))
#define sk_ASN1_GENERALSTRING_new(cmp) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_new(ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp)))
#define sk_ASN1_GENERALSTRING_new_null() ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_new_null())
#define sk_ASN1_GENERALSTRING_new_reserve(cmp, n) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp), (n)))
#define sk_ASN1_GENERALSTRING_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_GENERALSTRING_sk_type(sk), (n))
#define sk_ASN1_GENERALSTRING_free(sk) OPENSSL_sk_free(ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_delete(sk, i) ((ASN1_GENERALSTRING *)OPENSSL_sk_delete(ossl_check_ASN1_GENERALSTRING_sk_type(sk), (i)))
#define sk_ASN1_GENERALSTRING_delete_ptr(sk, ptr) ((ASN1_GENERALSTRING *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr)))
#define sk_ASN1_GENERALSTRING_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_pop(sk) ((ASN1_GENERALSTRING *)OPENSSL_sk_pop(ossl_check_ASN1_GENERALSTRING_sk_type(sk)))
#define sk_ASN1_GENERALSTRING_shift(sk) ((ASN1_GENERALSTRING *)OPENSSL_sk_shift(ossl_check_ASN1_GENERALSTRING_sk_type(sk)))
#define sk_ASN1_GENERALSTRING_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_GENERALSTRING_sk_type(sk),ossl_check_ASN1_GENERALSTRING_freefunc_type(freefunc))
#define sk_ASN1_GENERALSTRING_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr), (idx))
#define sk_ASN1_GENERALSTRING_set(sk, idx, ptr) ((ASN1_GENERALSTRING *)OPENSSL_sk_set(ossl_check_ASN1_GENERALSTRING_sk_type(sk), (idx), ossl_check_ASN1_GENERALSTRING_type(ptr)))
#define sk_ASN1_GENERALSTRING_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr))
#define sk_ASN1_GENERALSTRING_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_type(ptr), pnum)
#define sk_ASN1_GENERALSTRING_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk))
#define sk_ASN1_GENERALSTRING_dup(sk) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_dup(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk)))
#define sk_ASN1_GENERALSTRING_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_GENERALSTRING) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_copyfunc_type(copyfunc), ossl_check_ASN1_GENERALSTRING_freefunc_type(freefunc)))
#define sk_ASN1_GENERALSTRING_set_cmp_func(sk, cmp) ((sk_ASN1_GENERALSTRING_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, ASN1_PRINTABLE)

DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, DIRECTORYSTRING)
DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, DISPLAYTEXT)
DECLARE_ASN1_FUNCTIONS(ASN1_PRINTABLESTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_T61STRING)
DECLARE_ASN1_FUNCTIONS(ASN1_IA5STRING)
DECLARE_ASN1_FUNCTIONS(ASN1_GENERALSTRING)
DECLARE_ASN1_FUNCTIONS(ASN1_UTCTIME)
DECLARE_ASN1_FUNCTIONS(ASN1_GENERALIZEDTIME)
DECLARE_ASN1_FUNCTIONS(ASN1_TIME)

DECLARE_ASN1_DUP_FUNCTION(ASN1_TIME)
DECLARE_ASN1_DUP_FUNCTION(ASN1_UTCTIME)
DECLARE_ASN1_DUP_FUNCTION(ASN1_GENERALIZEDTIME)

DECLARE_ASN1_ITEM(ASN1_OCTET_STRING_NDEF)

ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                         int offset_day, long offset_sec);
int ASN1_TIME_check(const ASN1_TIME *t);
ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                   ASN1_GENERALIZEDTIME **out);
int ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
int ASN1_TIME_normalize(ASN1_TIME *s);
int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);

int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);

int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                const char *sn, const char *ln);

int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);

int ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
long ASN1_INTEGER_get(const ASN1_INTEGER *a);
ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);

int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);


int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);

/* General */
/* given a string, return the correct type, max is the maximum length */
int ASN1_PRINTABLE_type(const unsigned char *s, int max);

unsigned long ASN1_tag2bit(int tag);

/* SPECIALS */
int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                    int *pclass, long omax);
int ASN1_check_infinite_end(unsigned char **p, long len);
int ASN1_const_check_infinite_end(const unsigned char **p, long len);
void ASN1_put_object(unsigned char **pp, int constructed, int length,
                     int tag, int xclass);
int ASN1_put_eoc(unsigned char **pp);
int ASN1_object_size(int constructed, int length, int tag);

/* Used to implement other functions */
void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, const void *x);

# define ASN1_dup_of(type,i2d,d2i,x) \
    ((type*)ASN1_dup(CHECKED_I2D_OF(type, i2d), \
                     CHECKED_D2I_OF(type, d2i), \
                     CHECKED_PTR_OF(const type, x)))

void *ASN1_item_dup(const ASN1_ITEM *it, const void *x);
int ASN1_item_sign_ex(const ASN1_ITEM *it, X509_ALGOR *algor1,
                      X509_ALGOR *algor2, ASN1_BIT_STRING *signature,
                      const void *data, const ASN1_OCTET_STRING *id,
                      EVP_PKEY *pkey, const EVP_MD *md, OSSL_LIB_CTX *libctx,
                      const char *propq);
int ASN1_item_verify_ex(const ASN1_ITEM *it, const X509_ALGOR *alg,
                        const ASN1_BIT_STRING *signature, const void *data,
                        const ASN1_OCTET_STRING *id, EVP_PKEY *pkey,
                        OSSL_LIB_CTX *libctx, const char *propq);

/* ASN1 alloc/free macros for when a type is only used internally */

# define M_ASN1_new_of(type) (type *)ASN1_item_new(ASN1_ITEM_rptr(type))
# define M_ASN1_free_of(x, type) \
                ASN1_item_free(CHECKED_PTR_OF(type, x), ASN1_ITEM_rptr(type))

# ifndef OPENSSL_NO_STDIO
void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);

#  define ASN1_d2i_fp_of(type,xnew,d2i,in,x) \
    ((type*)ASN1_d2i_fp(CHECKED_NEW_OF(type, xnew), \
                        CHECKED_D2I_OF(type, d2i), \
                        in, \
                        CHECKED_PPTR_OF(type, x)))

void *ASN1_item_d2i_fp_ex(const ASN1_ITEM *it, FILE *in, void *x,
                          OSSL_LIB_CTX *libctx, const char *propq);
void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, const void *x);

#  define ASN1_i2d_fp_of(type,i2d,out,x) \
    (ASN1_i2d_fp(CHECKED_I2D_OF(type, i2d), \
                 out, \
                 CHECKED_PTR_OF(const type, x)))

int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, const void *x);
int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
# endif

int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);

void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);

#  define ASN1_d2i_bio_of(type,xnew,d2i,in,x) \
    ((type*)ASN1_d2i_bio( CHECKED_NEW_OF(type, xnew), \
                          CHECKED_D2I_OF(type, d2i), \
                          in, \
                          CHECKED_PPTR_OF(type, x)))

void *ASN1_item_d2i_bio_ex(const ASN1_ITEM *it, BIO *in, void *pval,
                           OSSL_LIB_CTX *libctx, const char *propq);
void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *pval);
int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, const void *x);

#  define ASN1_i2d_bio_of(type,i2d,out,x) \
    (ASN1_i2d_bio(CHECKED_I2D_OF(type, i2d), \
                  out, \
                  CHECKED_PTR_OF(const type, x)))

int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, const void *x);
BIO *ASN1_item_i2d_mem_bio(const ASN1_ITEM *it, const ASN1_VALUE *val);
int ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
int ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm);
int ASN1_TIME_print_ex(BIO *bp, const ASN1_TIME *tm, unsigned long flags);
int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                  unsigned char *buf, int off);
int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                    int dump);
const char *ASN1_tag2str(int tag);

/* Used to load and write Netscape format cert */

int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);

int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
                                  unsigned char *data, int len);
int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                  unsigned char *data, int max_len);

void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);

ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it,
                            ASN1_OCTET_STRING **oct);

void ASN1_STRING_set_default_mask(unsigned long mask);
int ASN1_STRING_set_default_mask_asc(const char *p);
unsigned long ASN1_STRING_get_default_mask(void);
int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                       int inform, unsigned long mask);
int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask,
                        long minsize, long maxsize);

ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                    const unsigned char *in, int inlen,
                                    int inform, int nid);
ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid);
int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
void ASN1_STRING_TABLE_cleanup(void);

/* ASN1 template functions */

/* Old API compatible functions */
ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it);
ASN1_VALUE *ASN1_item_new_ex(const ASN1_ITEM *it, OSSL_LIB_CTX *libctx,
                             const char *propq);
void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
ASN1_VALUE *ASN1_item_d2i_ex(ASN1_VALUE **val, const unsigned char **in,
                             long len, const ASN1_ITEM *it,
                             OSSL_LIB_CTX *libctx, const char *propq);
ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
                          long len, const ASN1_ITEM *it);
int ASN1_item_i2d(const ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
int ASN1_item_ndef_i2d(const ASN1_VALUE *val, unsigned char **out,
                       const ASN1_ITEM *it);

void ASN1_add_oid_module(void);
void ASN1_add_stable_module(void);

ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf);
ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
int ASN1_str2mask(const char *str, unsigned long *pmask);

/* ASN1 Print flags */

/* Indicate missing OPTIONAL fields */
# define ASN1_PCTX_FLAGS_SHOW_ABSENT             0x001
/* Mark start and end of SEQUENCE */
# define ASN1_PCTX_FLAGS_SHOW_SEQUENCE           0x002
/* Mark start and end of SEQUENCE/SET OF */
# define ASN1_PCTX_FLAGS_SHOW_SSOF               0x004
/* Show the ASN1 type of primitives */
# define ASN1_PCTX_FLAGS_SHOW_TYPE               0x008
/* Don't show ASN1 type of ANY */
# define ASN1_PCTX_FLAGS_NO_ANY_TYPE             0x010
/* Don't show ASN1 type of MSTRINGs */
# define ASN1_PCTX_FLAGS_NO_MSTRING_TYPE         0x020
/* Don't show field names in SEQUENCE */
# define ASN1_PCTX_FLAGS_NO_FIELD_NAME           0x040
/* Show structure names of each SEQUENCE field */
# define ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME  0x080
/* Don't show structure name even at top level */
# define ASN1_PCTX_FLAGS_NO_STRUCT_NAME          0x100

int ASN1_item_print(BIO *out, const ASN1_VALUE *ifld, int indent,
                    const ASN1_ITEM *it, const ASN1_PCTX *pctx);
ASN1_PCTX *ASN1_PCTX_new(void);
void ASN1_PCTX_free(ASN1_PCTX *p);
unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);

ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
void ASN1_SCTX_free(ASN1_SCTX *p);
const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p);
const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p);
unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p);
void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
void *ASN1_SCTX_get_app_data(ASN1_SCTX *p);

const BIO_METHOD *BIO_f_asn1(void);

/* cannot constify val because of CMS_stream() */
BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);

int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                        const ASN1_ITEM *it);
int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                              const char *hdr, const ASN1_ITEM *it);
/* cannot constify val because of CMS_dataFinal() */
int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                     int ctype_nid, int econt_nid,
                     STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it);
int SMIME_write_ASN1_ex(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                        int ctype_nid, int econt_nid,
                        STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it,
                        OSSL_LIB_CTX *libctx, const char *propq);
ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
ASN1_VALUE *SMIME_read_ASN1_ex(BIO *bio, int flags, BIO **bcont,
                               const ASN1_ITEM *it, ASN1_VALUE **x,
                               OSSL_LIB_CTX *libctx, const char *propq);
int SMIME_crlf_copy(BIO *in, BIO *out, int flags);
int SMIME_text(BIO *in, BIO *out);

const ASN1_ITEM *ASN1_ITEM_lookup(const char *name);
const ASN1_ITEM *ASN1_ITEM_get(size_t i);

/* Legacy compatibility */
# define DECLARE_ASN1_FUNCTIONS_fname(type, itname, name) \
         DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
         DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)
# define DECLARE_ASN1_FUNCTIONS_const(type) DECLARE_ASN1_FUNCTIONS(type)
# define DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name) \
         DECLARE_ASN1_ENCODE_FUNCTIONS(type, name)
# define I2D_OF_const(type) I2D_OF(type)
# define ASN1_dup_of_const(type,i2d,d2i,x) ASN1_dup_of(type,i2d,d2i,x)
# define ASN1_i2d_fp_of_const(type,i2d,out,x) ASN1_i2d_fp_of(type,i2d,out,x)
# define ASN1_i2d_bio_of_const(type,i2d,out,x) ASN1_i2d_bio_of(type,i2d,out,x)

# ifdef  __cplusplus
}
# endif
#endif
              node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/asn1t.h                     0000664 0000000 0000000 00000106141 14746647661 0026700 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/asn1t.h.in
 *
 * Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_ASN1T_H
# define OPENSSL_ASN1T_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_ASN1T_H
# endif

# include <stddef.h>
# include <openssl/e_os2.h>
# include <openssl/asn1.h>

# ifdef OPENSSL_BUILD_SHLIBCRYPTO
#  undef OPENSSL_EXTERN
#  define OPENSSL_EXTERN OPENSSL_EXPORT
# endif

/* ASN1 template defines, structures and functions */

#ifdef  __cplusplus
extern "C" {
#endif

/*-
 * These are the possible values for the itype field of the
 * ASN1_ITEM structure and determine how it is interpreted.
 *
 * For PRIMITIVE types the underlying type
 * determines the behaviour if items is NULL.
 *
 * Otherwise templates must contain a single
 * template and the type is treated in the
 * same way as the type specified in the template.
 *
 * For SEQUENCE types the templates field points
 * to the members, the size field is the
 * structure size.
 *
 * For CHOICE types the templates field points
 * to each possible member (typically a union)
 * and the 'size' field is the offset of the
 * selector.
 *
 * The 'funcs' field is used for application-specific
 * data and functions.
 *
 * The EXTERN type uses a new style d2i/i2d.
 * The new style should be used where possible
 * because it avoids things like the d2i IMPLICIT
 * hack.
 *
 * MSTRING is a multiple string type, it is used
 * for a CHOICE of character strings where the
 * actual strings all occupy an ASN1_STRING
 * structure. In this case the 'utype' field
 * has a special meaning, it is used as a mask
 * of acceptable types using the B_ASN1 constants.
 *
 * NDEF_SEQUENCE is the same as SEQUENCE except
 * that it will use indefinite length constructed
 * encoding if requested.
 *
 */

# define ASN1_ITYPE_PRIMITIVE            0x0
# define ASN1_ITYPE_SEQUENCE             0x1
# define ASN1_ITYPE_CHOICE               0x2
/* unused value                          0x3 */
# define ASN1_ITYPE_EXTERN               0x4
# define ASN1_ITYPE_MSTRING              0x5
# define ASN1_ITYPE_NDEF_SEQUENCE        0x6

/* Macro to obtain ASN1_ADB pointer from a type (only used internally) */
# define ASN1_ADB_ptr(iptr) ((const ASN1_ADB *)((iptr)()))

/* Macros for start and end of ASN1_ITEM definition */

# define ASN1_ITEM_start(itname) \
        const ASN1_ITEM * itname##_it(void) \
        { \
                static const ASN1_ITEM local_it = {

# define static_ASN1_ITEM_start(itname) \
        static ASN1_ITEM_start(itname)

# define ASN1_ITEM_end(itname) \
                }; \
        return &local_it; \
        }

/* Macros to aid ASN1 template writing */

# define ASN1_ITEM_TEMPLATE(tname) \
        static const ASN1_TEMPLATE tname##_item_tt

# define ASN1_ITEM_TEMPLATE_END(tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_PRIMITIVE,\
                -1,\
                &tname##_item_tt,\
                0,\
                NULL,\
                0,\
                #tname \
        ASN1_ITEM_end(tname)
# define static_ASN1_ITEM_TEMPLATE_END(tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_PRIMITIVE,\
                -1,\
                &tname##_item_tt,\
                0,\
                NULL,\
                0,\
                #tname \
        ASN1_ITEM_end(tname)

/* This is a ASN1 type which just embeds a template */

/*-
 * This pair helps declare a SEQUENCE. We can do:
 *
 *      ASN1_SEQUENCE(stname) = {
 *              ... SEQUENCE components ...
 *      } ASN1_SEQUENCE_END(stname)
 *
 *      This will produce an ASN1_ITEM called stname_it
 *      for a structure called stname.
 *
 *      If you want the same structure but a different
 *      name then use:
 *
 *      ASN1_SEQUENCE(itname) = {
 *              ... SEQUENCE components ...
 *      } ASN1_SEQUENCE_END_name(stname, itname)
 *
 *      This will create an item called itname_it using
 *      a structure called stname.
 */

# define ASN1_SEQUENCE(tname) \
        static const ASN1_TEMPLATE tname##_seq_tt[]

# define ASN1_SEQUENCE_END(stname) ASN1_SEQUENCE_END_name(stname, stname)

# define static_ASN1_SEQUENCE_END(stname) static_ASN1_SEQUENCE_END_name(stname, stname)

# define ASN1_SEQUENCE_END_name(stname, tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #tname \
        ASN1_ITEM_end(tname)

# define static_ASN1_SEQUENCE_END_name(stname, tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define ASN1_NDEF_SEQUENCE(tname) \
        ASN1_SEQUENCE(tname)

# define ASN1_NDEF_SEQUENCE_cb(tname, cb) \
        ASN1_SEQUENCE_cb(tname, cb)

# define ASN1_SEQUENCE_cb(tname, cb) \
        static const ASN1_AUX tname##_aux = {NULL, 0, 0, 0, cb, 0, NULL}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_const_cb(tname, const_cb) \
        static const ASN1_AUX tname##_aux = \
            {NULL, ASN1_AFLG_CONST_CB, 0, 0, NULL, 0, const_cb}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_cb_const_cb(tname, cb, const_cb) \
        static const ASN1_AUX tname##_aux = \
            {NULL, ASN1_AFLG_CONST_CB, 0, 0, cb, 0, const_cb}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_ref(tname, cb) \
        static const ASN1_AUX tname##_aux = {NULL, ASN1_AFLG_REFCOUNT, offsetof(tname, references), offsetof(tname, lock), cb, 0, NULL}; \
        ASN1_SEQUENCE(tname)

# define ASN1_SEQUENCE_enc(tname, enc, cb) \
        static const ASN1_AUX tname##_aux = {NULL, ASN1_AFLG_ENCODING, 0, 0, cb, offsetof(tname, enc), NULL}; \
        ASN1_SEQUENCE(tname)

# define ASN1_NDEF_SEQUENCE_END(tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_NDEF_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(tname),\
                #tname \
        ASN1_ITEM_end(tname)
# define static_ASN1_NDEF_SEQUENCE_END(tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_NDEF_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(tname),\
                #tname \
        ASN1_ITEM_end(tname)


# define ASN1_SEQUENCE_END_enc(stname, tname) ASN1_SEQUENCE_END_ref(stname, tname)

# define ASN1_SEQUENCE_END_cb(stname, tname) ASN1_SEQUENCE_END_ref(stname, tname)
# define static_ASN1_SEQUENCE_END_cb(stname, tname) static_ASN1_SEQUENCE_END_ref(stname, tname)

# define ASN1_SEQUENCE_END_ref(stname, tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #tname \
        ASN1_ITEM_end(tname)
# define static_ASN1_SEQUENCE_END_ref(stname, tname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define ASN1_NDEF_SEQUENCE_END_cb(stname, tname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_NDEF_SEQUENCE,\
                V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

/*-
 * This pair helps declare a CHOICE type. We can do:
 *
 *      ASN1_CHOICE(chname) = {
 *              ... CHOICE options ...
 *      ASN1_CHOICE_END(chname)
 *
 *      This will produce an ASN1_ITEM called chname_it
 *      for a structure called chname. The structure
 *      definition must look like this:
 *      typedef struct {
 *              int type;
 *              union {
 *                      ASN1_SOMETHING *opt1;
 *                      ASN1_SOMEOTHER *opt2;
 *              } value;
 *      } chname;
 *
 *      the name of the selector must be 'type'.
 *      to use an alternative selector name use the
 *      ASN1_CHOICE_END_selector() version.
 */

# define ASN1_CHOICE(tname) \
        static const ASN1_TEMPLATE tname##_ch_tt[]

# define ASN1_CHOICE_cb(tname, cb) \
        static const ASN1_AUX tname##_aux = {NULL, 0, 0, 0, cb, 0, NULL}; \
        ASN1_CHOICE(tname)

# define ASN1_CHOICE_END(stname) ASN1_CHOICE_END_name(stname, stname)

# define static_ASN1_CHOICE_END(stname) static_ASN1_CHOICE_END_name(stname, stname)

# define ASN1_CHOICE_END_name(stname, tname) ASN1_CHOICE_END_selector(stname, tname, type)

# define static_ASN1_CHOICE_END_name(stname, tname) static_ASN1_CHOICE_END_selector(stname, tname, type)

# define ASN1_CHOICE_END_selector(stname, tname, selname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define static_ASN1_CHOICE_END_selector(stname, tname, selname) \
        ;\
        static_ASN1_ITEM_start(tname) \
                ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

# define ASN1_CHOICE_END_cb(stname, tname, selname) \
        ;\
        ASN1_ITEM_start(tname) \
                ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ASN1_ITEM_end(tname)

/* This helps with the template wrapper form of ASN1_ITEM */

# define ASN1_EX_TEMPLATE_TYPE(flags, tag, name, type) { \
        (flags), (tag), 0,\
        #name, ASN1_ITEM_ref(type) }

/* These help with SEQUENCE or CHOICE components */

/* used to declare other types */

# define ASN1_EX_TYPE(flags, tag, stname, field, type) { \
        (flags), (tag), offsetof(stname, field),\
        #field, ASN1_ITEM_ref(type) }

/* implicit and explicit helper macros */

# define ASN1_IMP_EX(stname, field, type, tag, ex) \
         ASN1_EX_TYPE(ASN1_TFLG_IMPLICIT | (ex), tag, stname, field, type)

# define ASN1_EXP_EX(stname, field, type, tag, ex) \
         ASN1_EX_TYPE(ASN1_TFLG_EXPLICIT | (ex), tag, stname, field, type)

/* Any defined by macros: the field used is in the table itself */

# define ASN1_ADB_OBJECT(tblname) { ASN1_TFLG_ADB_OID, -1, 0, #tblname, tblname##_adb }
# define ASN1_ADB_INTEGER(tblname) { ASN1_TFLG_ADB_INT, -1, 0, #tblname, tblname##_adb }

/* Plain simple type */
# define ASN1_SIMPLE(stname, field, type) ASN1_EX_TYPE(0,0, stname, field, type)
/* Embedded simple type */
# define ASN1_EMBED(stname, field, type) ASN1_EX_TYPE(ASN1_TFLG_EMBED,0, stname, field, type)

/* OPTIONAL simple type */
# define ASN1_OPT(stname, field, type) ASN1_EX_TYPE(ASN1_TFLG_OPTIONAL, 0, stname, field, type)
# define ASN1_OPT_EMBED(stname, field, type) ASN1_EX_TYPE(ASN1_TFLG_OPTIONAL|ASN1_TFLG_EMBED, 0, stname, field, type)

/* IMPLICIT tagged simple type */
# define ASN1_IMP(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, 0)
# define ASN1_IMP_EMBED(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_EMBED)

/* IMPLICIT tagged OPTIONAL simple type */
# define ASN1_IMP_OPT(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL)
# define ASN1_IMP_OPT_EMBED(stname, field, type, tag) ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL|ASN1_TFLG_EMBED)

/* Same as above but EXPLICIT */

# define ASN1_EXP(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, 0)
# define ASN1_EXP_EMBED(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_EMBED)
# define ASN1_EXP_OPT(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL)
# define ASN1_EXP_OPT_EMBED(stname, field, type, tag) ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL|ASN1_TFLG_EMBED)

/* SEQUENCE OF type */
# define ASN1_SEQUENCE_OF(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SEQUENCE_OF, 0, stname, field, type)

/* OPTIONAL SEQUENCE OF */
# define ASN1_SEQUENCE_OF_OPT(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SEQUENCE_OF|ASN1_TFLG_OPTIONAL, 0, stname, field, type)

/* Same as above but for SET OF */

# define ASN1_SET_OF(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SET_OF, 0, stname, field, type)

# define ASN1_SET_OF_OPT(stname, field, type) \
                ASN1_EX_TYPE(ASN1_TFLG_SET_OF|ASN1_TFLG_OPTIONAL, 0, stname, field, type)

/* Finally compound types of SEQUENCE, SET, IMPLICIT, EXPLICIT and OPTIONAL */

# define ASN1_IMP_SET_OF(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF)

# define ASN1_EXP_SET_OF(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF)

# define ASN1_IMP_SET_OF_OPT(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF|ASN1_TFLG_OPTIONAL)

# define ASN1_EXP_SET_OF_OPT(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SET_OF|ASN1_TFLG_OPTIONAL)

# define ASN1_IMP_SEQUENCE_OF(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF)

# define ASN1_IMP_SEQUENCE_OF_OPT(stname, field, type, tag) \
                        ASN1_IMP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF|ASN1_TFLG_OPTIONAL)

# define ASN1_EXP_SEQUENCE_OF(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF)

# define ASN1_EXP_SEQUENCE_OF_OPT(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_SEQUENCE_OF|ASN1_TFLG_OPTIONAL)

/* EXPLICIT using indefinite length constructed form */
# define ASN1_NDEF_EXP(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_NDEF)

/* EXPLICIT OPTIONAL using indefinite length constructed form */
# define ASN1_NDEF_EXP_OPT(stname, field, type, tag) \
                        ASN1_EXP_EX(stname, field, type, tag, ASN1_TFLG_OPTIONAL|ASN1_TFLG_NDEF)

/* Macros for the ASN1_ADB structure */

# define ASN1_ADB(name) \
        static const ASN1_ADB_TABLE name##_adbtbl[]

# define ASN1_ADB_END(name, flags, field, adb_cb, def, none) \
        ;\
        static const ASN1_ITEM *name##_adb(void) \
        { \
        static const ASN1_ADB internal_adb = \
                {\
                flags,\
                offsetof(name, field),\
                adb_cb,\
                name##_adbtbl,\
                sizeof(name##_adbtbl) / sizeof(ASN1_ADB_TABLE),\
                def,\
                none\
                }; \
                return (const ASN1_ITEM *) &internal_adb; \
        } \
        void dummy_function(void)

# define ADB_ENTRY(val, template) {val, template}

# define ASN1_ADB_TEMPLATE(name) \
        static const ASN1_TEMPLATE name##_tt

/*
 * This is the ASN1 template structure that defines a wrapper round the
 * actual type. It determines the actual position of the field in the value
 * structure, various flags such as OPTIONAL and the field name.
 */

struct ASN1_TEMPLATE_st {
    unsigned long flags;        /* Various flags */
    long tag;                   /* tag, not used if no tagging */
    unsigned long offset;       /* Offset of this field in structure */
    const char *field_name;     /* Field name */
    ASN1_ITEM_EXP *item;        /* Relevant ASN1_ITEM or ASN1_ADB */
};

/* Macro to extract ASN1_ITEM and ASN1_ADB pointer from ASN1_TEMPLATE */

# define ASN1_TEMPLATE_item(t) (t->item_ptr)
# define ASN1_TEMPLATE_adb(t) (t->item_ptr)

typedef struct ASN1_ADB_TABLE_st ASN1_ADB_TABLE;
typedef struct ASN1_ADB_st ASN1_ADB;

struct ASN1_ADB_st {
    unsigned long flags;        /* Various flags */
    unsigned long offset;       /* Offset of selector field */
    int (*adb_cb)(long *psel);  /* Application callback */
    const ASN1_ADB_TABLE *tbl;  /* Table of possible types */
    long tblcount;              /* Number of entries in tbl */
    const ASN1_TEMPLATE *default_tt; /* Type to use if no match */
    const ASN1_TEMPLATE *null_tt; /* Type to use if selector is NULL */
};

struct ASN1_ADB_TABLE_st {
    long value;                 /* NID for an object or value for an int */
    const ASN1_TEMPLATE tt;     /* item for this value */
};

/* template flags */

/* Field is optional */
# define ASN1_TFLG_OPTIONAL      (0x1)

/* Field is a SET OF */
# define ASN1_TFLG_SET_OF        (0x1 << 1)

/* Field is a SEQUENCE OF */
# define ASN1_TFLG_SEQUENCE_OF   (0x2 << 1)

/*
 * Special case: this refers to a SET OF that will be sorted into DER order
 * when encoded *and* the corresponding STACK will be modified to match the
 * new order.
 */
# define ASN1_TFLG_SET_ORDER     (0x3 << 1)

/* Mask for SET OF or SEQUENCE OF */
# define ASN1_TFLG_SK_MASK       (0x3 << 1)

/*
 * These flags mean the tag should be taken from the tag field. If EXPLICIT
 * then the underlying type is used for the inner tag.
 */

/* IMPLICIT tagging */
# define ASN1_TFLG_IMPTAG        (0x1 << 3)

/* EXPLICIT tagging, inner tag from underlying type */
# define ASN1_TFLG_EXPTAG        (0x2 << 3)

# define ASN1_TFLG_TAG_MASK      (0x3 << 3)

/* context specific IMPLICIT */
# define ASN1_TFLG_IMPLICIT      (ASN1_TFLG_IMPTAG|ASN1_TFLG_CONTEXT)

/* context specific EXPLICIT */
# define ASN1_TFLG_EXPLICIT      (ASN1_TFLG_EXPTAG|ASN1_TFLG_CONTEXT)

/*
 * If tagging is in force these determine the type of tag to use. Otherwise
 * the tag is determined by the underlying type. These values reflect the
 * actual octet format.
 */

/* Universal tag */
# define ASN1_TFLG_UNIVERSAL     (0x0<<6)
/* Application tag */
# define ASN1_TFLG_APPLICATION   (0x1<<6)
/* Context specific tag */
# define ASN1_TFLG_CONTEXT       (0x2<<6)
/* Private tag */
# define ASN1_TFLG_PRIVATE       (0x3<<6)

# define ASN1_TFLG_TAG_CLASS     (0x3<<6)

/*
 * These are for ANY DEFINED BY type. In this case the 'item' field points to
 * an ASN1_ADB structure which contains a table of values to decode the
 * relevant type
 */

# define ASN1_TFLG_ADB_MASK      (0x3<<8)

# define ASN1_TFLG_ADB_OID       (0x1<<8)

# define ASN1_TFLG_ADB_INT       (0x1<<9)

/*
 * This flag when present in a SEQUENCE OF, SET OF or EXPLICIT causes
 * indefinite length constructed encoding to be used if required.
 */

# define ASN1_TFLG_NDEF          (0x1<<11)

/* Field is embedded and not a pointer */
# define ASN1_TFLG_EMBED         (0x1 << 12)

/* This is the actual ASN1 item itself */

struct ASN1_ITEM_st {
    char itype;                 /* The item type, primitive, SEQUENCE, CHOICE
                                 * or extern */
    long utype;                 /* underlying type */
    const ASN1_TEMPLATE *templates; /* If SEQUENCE or CHOICE this contains
                                     * the contents */
    long tcount;                /* Number of templates if SEQUENCE or CHOICE */
    const void *funcs;          /* further data and type-specific functions */
    /* funcs can be ASN1_PRIMITIVE_FUNCS*, ASN1_EXTERN_FUNCS*, or ASN1_AUX* */
    long size;                  /* Structure size (usually) */
    const char *sname;          /* Structure name */
};

/*
 * Cache for ASN1 tag and length, so we don't keep re-reading it for things
 * like CHOICE
 */

struct ASN1_TLC_st {
    char valid;                 /* Values below are valid */
    int ret;                    /* return value */
    long plen;                  /* length */
    int ptag;                   /* class value */
    int pclass;                 /* class value */
    int hdrlen;                 /* header length */
};

/* Typedefs for ASN1 function pointers */
typedef int ASN1_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                        const ASN1_ITEM *it, int tag, int aclass, char opt,
                        ASN1_TLC *ctx);

typedef int ASN1_ex_d2i_ex(ASN1_VALUE **pval, const unsigned char **in, long len,
                           const ASN1_ITEM *it, int tag, int aclass, char opt,
                           ASN1_TLC *ctx, OSSL_LIB_CTX *libctx,
                           const char *propq);
typedef int ASN1_ex_i2d(const ASN1_VALUE **pval, unsigned char **out,
                        const ASN1_ITEM *it, int tag, int aclass);
typedef int ASN1_ex_new_func(ASN1_VALUE **pval, const ASN1_ITEM *it);
typedef int ASN1_ex_new_ex_func(ASN1_VALUE **pval, const ASN1_ITEM *it,
                                OSSL_LIB_CTX *libctx, const char *propq);
typedef void ASN1_ex_free_func(ASN1_VALUE **pval, const ASN1_ITEM *it);

typedef int ASN1_ex_print_func(BIO *out, const ASN1_VALUE **pval,
                               int indent, const char *fname,
                               const ASN1_PCTX *pctx);

typedef int ASN1_primitive_i2c(const ASN1_VALUE **pval, unsigned char *cont,
                               int *putype, const ASN1_ITEM *it);
typedef int ASN1_primitive_c2i(ASN1_VALUE **pval, const unsigned char *cont,
                               int len, int utype, char *free_cont,
                               const ASN1_ITEM *it);
typedef int ASN1_primitive_print(BIO *out, const ASN1_VALUE **pval,
                                 const ASN1_ITEM *it, int indent,
                                 const ASN1_PCTX *pctx);

typedef struct ASN1_EXTERN_FUNCS_st {
    void *app_data;
    ASN1_ex_new_func *asn1_ex_new;
    ASN1_ex_free_func *asn1_ex_free;
    ASN1_ex_free_func *asn1_ex_clear;
    ASN1_ex_d2i *asn1_ex_d2i;
    ASN1_ex_i2d *asn1_ex_i2d;
    ASN1_ex_print_func *asn1_ex_print;
    ASN1_ex_new_ex_func *asn1_ex_new_ex;
    ASN1_ex_d2i_ex *asn1_ex_d2i_ex;
} ASN1_EXTERN_FUNCS;

typedef struct ASN1_PRIMITIVE_FUNCS_st {
    void *app_data;
    unsigned long flags;
    ASN1_ex_new_func *prim_new;
    ASN1_ex_free_func *prim_free;
    ASN1_ex_free_func *prim_clear;
    ASN1_primitive_c2i *prim_c2i;
    ASN1_primitive_i2c *prim_i2c;
    ASN1_primitive_print *prim_print;
} ASN1_PRIMITIVE_FUNCS;

/*
 * This is the ASN1_AUX structure: it handles various miscellaneous
 * requirements. For example the use of reference counts and an informational
 * callback. The "informational callback" is called at various points during
 * the ASN1 encoding and decoding. It can be used to provide minor
 * customisation of the structures used. This is most useful where the
 * supplied routines *almost* do the right thing but need some extra help at
 * a few points. If the callback returns zero then it is assumed a fatal
 * error has occurred and the main operation should be abandoned. If major
 * changes in the default behaviour are required then an external type is
 * more appropriate.
 * For the operations ASN1_OP_I2D_PRE, ASN1_OP_I2D_POST, ASN1_OP_PRINT_PRE, and
 * ASN1_OP_PRINT_POST, meanwhile a variant of the callback with const parameter
 * 'in' is provided to make clear statically that its input is not modified. If
 * and only if this variant is in use the flag ASN1_AFLG_CONST_CB must be set.
 */

typedef int ASN1_aux_cb(int operation, ASN1_VALUE **in, const ASN1_ITEM *it,
                        void *exarg);
typedef int ASN1_aux_const_cb(int operation, const ASN1_VALUE **in,
                              const ASN1_ITEM *it, void *exarg);

typedef struct ASN1_AUX_st {
    void *app_data;
    int flags;
    int ref_offset;             /* Offset of reference value */
    int ref_lock;               /* Offset of lock value */
    ASN1_aux_cb *asn1_cb;
    int enc_offset;             /* Offset of ASN1_ENCODING structure */
    ASN1_aux_const_cb *asn1_const_cb; /* for ASN1_OP_I2D_ and ASN1_OP_PRINT_ */
} ASN1_AUX;

/* For print related callbacks exarg points to this structure */
typedef struct ASN1_PRINT_ARG_st {
    BIO *out;
    int indent;
    const ASN1_PCTX *pctx;
} ASN1_PRINT_ARG;

/* For streaming related callbacks exarg points to this structure */
typedef struct ASN1_STREAM_ARG_st {
    /* BIO to stream through */
    BIO *out;
    /* BIO with filters appended */
    BIO *ndef_bio;
    /* Streaming I/O boundary */
    unsigned char **boundary;
} ASN1_STREAM_ARG;

/* Flags in ASN1_AUX */

/* Use a reference count */
# define ASN1_AFLG_REFCOUNT      1
/* Save the encoding of structure (useful for signatures) */
# define ASN1_AFLG_ENCODING      2
/* The Sequence length is invalid */
# define ASN1_AFLG_BROKEN        4
/* Use the new asn1_const_cb */
# define ASN1_AFLG_CONST_CB      8

/* operation values for asn1_cb */

# define ASN1_OP_NEW_PRE         0
# define ASN1_OP_NEW_POST        1
# define ASN1_OP_FREE_PRE        2
# define ASN1_OP_FREE_POST       3
# define ASN1_OP_D2I_PRE         4
# define ASN1_OP_D2I_POST        5
# define ASN1_OP_I2D_PRE         6
# define ASN1_OP_I2D_POST        7
# define ASN1_OP_PRINT_PRE       8
# define ASN1_OP_PRINT_POST      9
# define ASN1_OP_STREAM_PRE      10
# define ASN1_OP_STREAM_POST     11
# define ASN1_OP_DETACHED_PRE    12
# define ASN1_OP_DETACHED_POST   13
# define ASN1_OP_DUP_PRE         14
# define ASN1_OP_DUP_POST        15
# define ASN1_OP_GET0_LIBCTX     16
# define ASN1_OP_GET0_PROPQ      17

/* Macro to implement a primitive type */
# define IMPLEMENT_ASN1_TYPE(stname) IMPLEMENT_ASN1_TYPE_ex(stname, stname, 0)
# define IMPLEMENT_ASN1_TYPE_ex(itname, vname, ex) \
                                ASN1_ITEM_start(itname) \
                                        ASN1_ITYPE_PRIMITIVE, V_##vname, NULL, 0, NULL, ex, #itname \
                                ASN1_ITEM_end(itname)

/* Macro to implement a multi string type */
# define IMPLEMENT_ASN1_MSTRING(itname, mask) \
                                ASN1_ITEM_start(itname) \
                                        ASN1_ITYPE_MSTRING, mask, NULL, 0, NULL, sizeof(ASN1_STRING), #itname \
                                ASN1_ITEM_end(itname)

# define IMPLEMENT_EXTERN_ASN1(sname, tag, fptrs) \
        ASN1_ITEM_start(sname) \
                ASN1_ITYPE_EXTERN, \
                tag, \
                NULL, \
                0, \
                &fptrs, \
                0, \
                #sname \
        ASN1_ITEM_end(sname)

/* Macro to implement standard functions in terms of ASN1_ITEM structures */

# define IMPLEMENT_ASN1_FUNCTIONS(stname) IMPLEMENT_ASN1_FUNCTIONS_fname(stname, stname, stname)

# define IMPLEMENT_ASN1_FUNCTIONS_name(stname, itname) IMPLEMENT_ASN1_FUNCTIONS_fname(stname, itname, itname)

# define IMPLEMENT_ASN1_FUNCTIONS_ENCODE_name(stname, itname) \
                        IMPLEMENT_ASN1_FUNCTIONS_ENCODE_fname(stname, itname, itname)

# define IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(stname) \
                IMPLEMENT_ASN1_ALLOC_FUNCTIONS_pfname(static, stname, stname, stname)

# define IMPLEMENT_ASN1_ALLOC_FUNCTIONS(stname) \
                IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, stname, stname)

# define IMPLEMENT_ASN1_ALLOC_FUNCTIONS_pfname(pre, stname, itname, fname) \
        pre stname *fname##_new(void) \
        { \
                return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
        } \
        pre void fname##_free(stname *a) \
        { \
                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
        }

# define IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname) \
        stname *fname##_new(void) \
        { \
                return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
        } \
        void fname##_free(stname *a) \
        { \
                ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
        }

# define IMPLEMENT_ASN1_FUNCTIONS_fname(stname, itname, fname) \
        IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
        IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname)

# define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
        stname *d2i_##fname(stname **a, const unsigned char **in, long len) \
        { \
                return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
        } \
        int i2d_##fname(const stname *a, unsigned char **out) \
        { \
                return ASN1_item_i2d((const ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
        }

# define IMPLEMENT_ASN1_NDEF_FUNCTION(stname) \
        int i2d_##stname##_NDEF(const stname *a, unsigned char **out) \
        { \
                return ASN1_item_ndef_i2d((const ASN1_VALUE *)a, out, ASN1_ITEM_rptr(stname));\
        }

# define IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(stname) \
        static stname *d2i_##stname(stname **a, \
                                   const unsigned char **in, long len) \
        { \
                return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, \
                                               ASN1_ITEM_rptr(stname)); \
        } \
        static int i2d_##stname(const stname *a, unsigned char **out) \
        { \
                return ASN1_item_i2d((const ASN1_VALUE *)a, out, \
                                     ASN1_ITEM_rptr(stname)); \
        }

# define IMPLEMENT_ASN1_DUP_FUNCTION(stname) \
        stname * stname##_dup(const stname *x) \
        { \
        return ASN1_item_dup(ASN1_ITEM_rptr(stname), x); \
        }

# define IMPLEMENT_ASN1_PRINT_FUNCTION(stname) \
        IMPLEMENT_ASN1_PRINT_FUNCTION_fname(stname, stname, stname)

# define IMPLEMENT_ASN1_PRINT_FUNCTION_fname(stname, itname, fname) \
        int fname##_print_ctx(BIO *out, const stname *x, int indent, \
                                                const ASN1_PCTX *pctx) \
        { \
                return ASN1_item_print(out, (const ASN1_VALUE *)x, indent, \
                        ASN1_ITEM_rptr(itname), pctx); \
        }

/* external definitions for primitive types */

DECLARE_ASN1_ITEM(ASN1_BOOLEAN)
DECLARE_ASN1_ITEM(ASN1_TBOOLEAN)
DECLARE_ASN1_ITEM(ASN1_FBOOLEAN)
DECLARE_ASN1_ITEM(ASN1_SEQUENCE)
DECLARE_ASN1_ITEM(CBIGNUM)
DECLARE_ASN1_ITEM(BIGNUM)
DECLARE_ASN1_ITEM(INT32)
DECLARE_ASN1_ITEM(ZINT32)
DECLARE_ASN1_ITEM(UINT32)
DECLARE_ASN1_ITEM(ZUINT32)
DECLARE_ASN1_ITEM(INT64)
DECLARE_ASN1_ITEM(ZINT64)
DECLARE_ASN1_ITEM(UINT64)
DECLARE_ASN1_ITEM(ZUINT64)

# ifndef OPENSSL_NO_DEPRECATED_3_0
/*
 * LONG and ZLONG are strongly discouraged for use as stored data, as the
 * underlying C type (long) differs in size depending on the architecture.
 * They are designed with 32-bit longs in mind.
 */
DECLARE_ASN1_ITEM(LONG)
DECLARE_ASN1_ITEM(ZLONG)
# endif

SKM_DEFINE_STACK_OF_INTERNAL(ASN1_VALUE, ASN1_VALUE, ASN1_VALUE)
#define sk_ASN1_VALUE_num(sk) OPENSSL_sk_num(ossl_check_const_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_value(sk, idx) ((ASN1_VALUE *)OPENSSL_sk_value(ossl_check_const_ASN1_VALUE_sk_type(sk), (idx)))
#define sk_ASN1_VALUE_new(cmp) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_new(ossl_check_ASN1_VALUE_compfunc_type(cmp)))
#define sk_ASN1_VALUE_new_null() ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_new_null())
#define sk_ASN1_VALUE_new_reserve(cmp, n) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_new_reserve(ossl_check_ASN1_VALUE_compfunc_type(cmp), (n)))
#define sk_ASN1_VALUE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_ASN1_VALUE_sk_type(sk), (n))
#define sk_ASN1_VALUE_free(sk) OPENSSL_sk_free(ossl_check_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_zero(sk) OPENSSL_sk_zero(ossl_check_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_delete(sk, i) ((ASN1_VALUE *)OPENSSL_sk_delete(ossl_check_ASN1_VALUE_sk_type(sk), (i)))
#define sk_ASN1_VALUE_delete_ptr(sk, ptr) ((ASN1_VALUE *)OPENSSL_sk_delete_ptr(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr)))
#define sk_ASN1_VALUE_push(sk, ptr) OPENSSL_sk_push(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_pop(sk) ((ASN1_VALUE *)OPENSSL_sk_pop(ossl_check_ASN1_VALUE_sk_type(sk)))
#define sk_ASN1_VALUE_shift(sk) ((ASN1_VALUE *)OPENSSL_sk_shift(ossl_check_ASN1_VALUE_sk_type(sk)))
#define sk_ASN1_VALUE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_ASN1_VALUE_sk_type(sk),ossl_check_ASN1_VALUE_freefunc_type(freefunc))
#define sk_ASN1_VALUE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr), (idx))
#define sk_ASN1_VALUE_set(sk, idx, ptr) ((ASN1_VALUE *)OPENSSL_sk_set(ossl_check_ASN1_VALUE_sk_type(sk), (idx), ossl_check_ASN1_VALUE_type(ptr)))
#define sk_ASN1_VALUE_find(sk, ptr) OPENSSL_sk_find(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr))
#define sk_ASN1_VALUE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_type(ptr), pnum)
#define sk_ASN1_VALUE_sort(sk) OPENSSL_sk_sort(ossl_check_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_ASN1_VALUE_sk_type(sk))
#define sk_ASN1_VALUE_dup(sk) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_dup(ossl_check_const_ASN1_VALUE_sk_type(sk)))
#define sk_ASN1_VALUE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(ASN1_VALUE) *)OPENSSL_sk_deep_copy(ossl_check_const_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_copyfunc_type(copyfunc), ossl_check_ASN1_VALUE_freefunc_type(freefunc)))
#define sk_ASN1_VALUE_set_cmp_func(sk, cmp) ((sk_ASN1_VALUE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_ASN1_VALUE_sk_type(sk), ossl_check_ASN1_VALUE_compfunc_type(cmp)))



/* Functions used internally by the ASN1 code */

int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);

int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                     const ASN1_ITEM *it, int tag, int aclass, char opt,
                     ASN1_TLC *ctx);

int ASN1_item_ex_i2d(const ASN1_VALUE **pval, unsigned char **out,
                     const ASN1_ITEM *it, int tag, int aclass);

/* Legacy compatibility */
# define IMPLEMENT_ASN1_FUNCTIONS_const(name) IMPLEMENT_ASN1_FUNCTIONS(name)
# define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(stname, itname, fname) \
         IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname)

#ifdef  __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/bio.h                       0000664 0000000 0000000 00000115644 14746647661 0026433 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/bio.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */


#ifndef OPENSSL_BIO_H
# define OPENSSL_BIO_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_BIO_H
# endif

# include <openssl/e_os2.h>

# ifndef OPENSSL_NO_STDIO
#  include <stdio.h>
# endif
# include <stdarg.h>

# include <openssl/crypto.h>
# include <openssl/bioerr.h>
# include <openssl/core.h>

#ifdef  __cplusplus
extern "C" {
#endif

/* There are the classes of BIOs */
# define BIO_TYPE_DESCRIPTOR     0x0100 /* socket, fd, connect or accept */
# define BIO_TYPE_FILTER         0x0200
# define BIO_TYPE_SOURCE_SINK    0x0400

/* These are the 'types' of BIOs */
# define BIO_TYPE_NONE             0
# define BIO_TYPE_MEM            ( 1|BIO_TYPE_SOURCE_SINK)
# define BIO_TYPE_FILE           ( 2|BIO_TYPE_SOURCE_SINK)

# define BIO_TYPE_FD             ( 4|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_SOCKET         ( 5|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_NULL           ( 6|BIO_TYPE_SOURCE_SINK)
# define BIO_TYPE_SSL            ( 7|BIO_TYPE_FILTER)
# define BIO_TYPE_MD             ( 8|BIO_TYPE_FILTER)
# define BIO_TYPE_BUFFER         ( 9|BIO_TYPE_FILTER)
# define BIO_TYPE_CIPHER         (10|BIO_TYPE_FILTER)
# define BIO_TYPE_BASE64         (11|BIO_TYPE_FILTER)
# define BIO_TYPE_CONNECT        (12|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_ACCEPT         (13|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)

# define BIO_TYPE_NBIO_TEST      (16|BIO_TYPE_FILTER)/* server proxy BIO */
# define BIO_TYPE_NULL_FILTER    (17|BIO_TYPE_FILTER)
# define BIO_TYPE_BIO            (19|BIO_TYPE_SOURCE_SINK)/* half a BIO pair */
# define BIO_TYPE_LINEBUFFER     (20|BIO_TYPE_FILTER)
# define BIO_TYPE_DGRAM          (21|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# define BIO_TYPE_ASN1           (22|BIO_TYPE_FILTER)
# define BIO_TYPE_COMP           (23|BIO_TYPE_FILTER)
# ifndef OPENSSL_NO_SCTP
#  define BIO_TYPE_DGRAM_SCTP    (24|BIO_TYPE_SOURCE_SINK|BIO_TYPE_DESCRIPTOR)
# endif
# define BIO_TYPE_CORE_TO_PROV   (25|BIO_TYPE_SOURCE_SINK)

#define BIO_TYPE_START           128

/*
 * BIO_FILENAME_READ|BIO_CLOSE to open or close on free.
 * BIO_set_fp(in,stdin,BIO_NOCLOSE);
 */
# define BIO_NOCLOSE             0x00
# define BIO_CLOSE               0x01

/*
 * These are used in the following macros and are passed to BIO_ctrl()
 */
# define BIO_CTRL_RESET          1/* opt - rewind/zero etc */
# define BIO_CTRL_EOF            2/* opt - are we at the eof */
# define BIO_CTRL_INFO           3/* opt - extra tit-bits */
# define BIO_CTRL_SET            4/* man - set the 'IO' type */
# define BIO_CTRL_GET            5/* man - get the 'IO' type */
# define BIO_CTRL_PUSH           6/* opt - internal, used to signify change */
# define BIO_CTRL_POP            7/* opt - internal, used to signify change */
# define BIO_CTRL_GET_CLOSE      8/* man - set the 'close' on free */
# define BIO_CTRL_SET_CLOSE      9/* man - set the 'close' on free */
# define BIO_CTRL_PENDING        10/* opt - is their more data buffered */
# define BIO_CTRL_FLUSH          11/* opt - 'flush' buffered output */
# define BIO_CTRL_DUP            12/* man - extra stuff for 'duped' BIO */
# define BIO_CTRL_WPENDING       13/* opt - number of bytes still to write */
# define BIO_CTRL_SET_CALLBACK   14/* opt - set callback function */
# define BIO_CTRL_GET_CALLBACK   15/* opt - set callback function */

# define BIO_CTRL_PEEK           29/* BIO_f_buffer special */
# define BIO_CTRL_SET_FILENAME   30/* BIO_s_file special */

/* dgram BIO stuff */
# define BIO_CTRL_DGRAM_CONNECT       31/* BIO dgram special */
# define BIO_CTRL_DGRAM_SET_CONNECTED 32/* allow for an externally connected
                                         * socket to be passed in */
# define BIO_CTRL_DGRAM_SET_RECV_TIMEOUT 33/* setsockopt, essentially */
# define BIO_CTRL_DGRAM_GET_RECV_TIMEOUT 34/* getsockopt, essentially */
# define BIO_CTRL_DGRAM_SET_SEND_TIMEOUT 35/* setsockopt, essentially */
# define BIO_CTRL_DGRAM_GET_SEND_TIMEOUT 36/* getsockopt, essentially */

# define BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP 37/* flag whether the last */
# define BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP 38/* I/O operation timed out */

/* #ifdef IP_MTU_DISCOVER */
# define BIO_CTRL_DGRAM_MTU_DISCOVER       39/* set DF bit on egress packets */
/* #endif */

# define BIO_CTRL_DGRAM_QUERY_MTU          40/* as kernel for current MTU */
# define BIO_CTRL_DGRAM_GET_FALLBACK_MTU   47
# define BIO_CTRL_DGRAM_GET_MTU            41/* get cached value for MTU */
# define BIO_CTRL_DGRAM_SET_MTU            42/* set cached value for MTU.
                                              * want to use this if asking
                                              * the kernel fails */

# define BIO_CTRL_DGRAM_MTU_EXCEEDED       43/* check whether the MTU was
                                              * exceed in the previous write
                                              * operation */

# define BIO_CTRL_DGRAM_GET_PEER           46
# define BIO_CTRL_DGRAM_SET_PEER           44/* Destination for the data */

# define BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT   45/* Next DTLS handshake timeout
                                              * to adjust socket timeouts */
# define BIO_CTRL_DGRAM_SET_DONT_FRAG      48

# define BIO_CTRL_DGRAM_GET_MTU_OVERHEAD   49

/* Deliberately outside of OPENSSL_NO_SCTP - used in bss_dgram.c */
#  define BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE    50
# ifndef OPENSSL_NO_SCTP
/* SCTP stuff */
#  define BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY                51
#  define BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY               52
#  define BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD               53
#  define BIO_CTRL_DGRAM_SCTP_GET_SNDINFO         60
#  define BIO_CTRL_DGRAM_SCTP_SET_SNDINFO         61
#  define BIO_CTRL_DGRAM_SCTP_GET_RCVINFO         62
#  define BIO_CTRL_DGRAM_SCTP_SET_RCVINFO         63
#  define BIO_CTRL_DGRAM_SCTP_GET_PRINFO                  64
#  define BIO_CTRL_DGRAM_SCTP_SET_PRINFO                  65
#  define BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN               70
# endif

# define BIO_CTRL_DGRAM_SET_PEEK_MODE      71

/*
 * internal BIO:
 * # define BIO_CTRL_SET_KTLS_SEND                 72
 * # define BIO_CTRL_SET_KTLS_SEND_CTRL_MSG        74
 * # define BIO_CTRL_CLEAR_KTLS_CTRL_MSG           75
 */

# define BIO_CTRL_GET_KTLS_SEND                 73
# define BIO_CTRL_GET_KTLS_RECV                 76

# define BIO_CTRL_DGRAM_SCTP_WAIT_FOR_DRY       77
# define BIO_CTRL_DGRAM_SCTP_MSG_WAITING        78

/* BIO_f_prefix controls */
# define BIO_CTRL_SET_PREFIX                    79
# define BIO_CTRL_SET_INDENT                    80
# define BIO_CTRL_GET_INDENT                    81

# ifndef OPENSSL_NO_KTLS
#  define BIO_get_ktls_send(b)         \
     (BIO_ctrl(b, BIO_CTRL_GET_KTLS_SEND, 0, NULL) > 0)
#  define BIO_get_ktls_recv(b)         \
     (BIO_ctrl(b, BIO_CTRL_GET_KTLS_RECV, 0, NULL) > 0)
# else
#  define BIO_get_ktls_send(b)  (0)
#  define BIO_get_ktls_recv(b)  (0)
# endif

/* modifiers */
# define BIO_FP_READ             0x02
# define BIO_FP_WRITE            0x04
# define BIO_FP_APPEND           0x08
# define BIO_FP_TEXT             0x10

# define BIO_FLAGS_READ          0x01
# define BIO_FLAGS_WRITE         0x02
# define BIO_FLAGS_IO_SPECIAL    0x04
# define BIO_FLAGS_RWS (BIO_FLAGS_READ|BIO_FLAGS_WRITE|BIO_FLAGS_IO_SPECIAL)
# define BIO_FLAGS_SHOULD_RETRY  0x08
# ifndef OPENSSL_NO_DEPRECATED_3_0
/* This #define was replaced by an internal constant and should not be used. */
#  define BIO_FLAGS_UPLINK       0
# endif

# define BIO_FLAGS_BASE64_NO_NL  0x100

/*
 * This is used with memory BIOs:
 * BIO_FLAGS_MEM_RDONLY means we shouldn't free up or change the data in any way;
 * BIO_FLAGS_NONCLEAR_RST means we shouldn't clear data on reset.
 */
# define BIO_FLAGS_MEM_RDONLY    0x200
# define BIO_FLAGS_NONCLEAR_RST  0x400
# define BIO_FLAGS_IN_EOF        0x800

/* the BIO FLAGS values 0x1000 to 0x4000 are reserved for internal KTLS flags */

typedef union bio_addr_st BIO_ADDR;
typedef struct bio_addrinfo_st BIO_ADDRINFO;

int BIO_get_new_index(void);
void BIO_set_flags(BIO *b, int flags);
int BIO_test_flags(const BIO *b, int flags);
void BIO_clear_flags(BIO *b, int flags);

# define BIO_get_flags(b) BIO_test_flags(b, ~(0x0))
# define BIO_set_retry_special(b) \
                BIO_set_flags(b, (BIO_FLAGS_IO_SPECIAL|BIO_FLAGS_SHOULD_RETRY))
# define BIO_set_retry_read(b) \
                BIO_set_flags(b, (BIO_FLAGS_READ|BIO_FLAGS_SHOULD_RETRY))
# define BIO_set_retry_write(b) \
                BIO_set_flags(b, (BIO_FLAGS_WRITE|BIO_FLAGS_SHOULD_RETRY))

/* These are normally used internally in BIOs */
# define BIO_clear_retry_flags(b) \
                BIO_clear_flags(b, (BIO_FLAGS_RWS|BIO_FLAGS_SHOULD_RETRY))
# define BIO_get_retry_flags(b) \
                BIO_test_flags(b, (BIO_FLAGS_RWS|BIO_FLAGS_SHOULD_RETRY))

/* These should be used by the application to tell why we should retry */
# define BIO_should_read(a)              BIO_test_flags(a, BIO_FLAGS_READ)
# define BIO_should_write(a)             BIO_test_flags(a, BIO_FLAGS_WRITE)
# define BIO_should_io_special(a)        BIO_test_flags(a, BIO_FLAGS_IO_SPECIAL)
# define BIO_retry_type(a)               BIO_test_flags(a, BIO_FLAGS_RWS)
# define BIO_should_retry(a)             BIO_test_flags(a, BIO_FLAGS_SHOULD_RETRY)

/*
 * The next three are used in conjunction with the BIO_should_io_special()
 * condition.  After this returns true, BIO *BIO_get_retry_BIO(BIO *bio, int
 * *reason); will walk the BIO stack and return the 'reason' for the special
 * and the offending BIO. Given a BIO, BIO_get_retry_reason(bio) will return
 * the code.
 */
/*
 * Returned from the SSL bio when the certificate retrieval code had an error
 */
# define BIO_RR_SSL_X509_LOOKUP          0x01
/* Returned from the connect BIO when a connect would have blocked */
# define BIO_RR_CONNECT                  0x02
/* Returned from the accept BIO when an accept would have blocked */
# define BIO_RR_ACCEPT                   0x03

/* These are passed by the BIO callback */
# define BIO_CB_FREE     0x01
# define BIO_CB_READ     0x02
# define BIO_CB_WRITE    0x03
# define BIO_CB_PUTS     0x04
# define BIO_CB_GETS     0x05
# define BIO_CB_CTRL     0x06

/*
 * The callback is called before and after the underling operation, The
 * BIO_CB_RETURN flag indicates if it is after the call
 */
# define BIO_CB_RETURN   0x80
# define BIO_CB_return(a) ((a)|BIO_CB_RETURN)
# define BIO_cb_pre(a)   (!((a)&BIO_CB_RETURN))
# define BIO_cb_post(a)  ((a)&BIO_CB_RETURN)

# ifndef OPENSSL_NO_DEPRECATED_3_0
typedef long (*BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,
                                long argl, long ret);
OSSL_DEPRECATEDIN_3_0 BIO_callback_fn BIO_get_callback(const BIO *b);
OSSL_DEPRECATEDIN_3_0 void BIO_set_callback(BIO *b, BIO_callback_fn callback);
OSSL_DEPRECATEDIN_3_0 long BIO_debug_callback(BIO *bio, int cmd,
                                               const char *argp, int argi,
                                               long argl, long ret);
# endif

typedef long (*BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,
                                   size_t len, int argi,
                                   long argl, int ret, size_t *processed);
BIO_callback_fn_ex BIO_get_callback_ex(const BIO *b);
void BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);
long BIO_debug_callback_ex(BIO *bio, int oper, const char *argp, size_t len,
                           int argi, long argl, int ret, size_t *processed);

char *BIO_get_callback_arg(const BIO *b);
void BIO_set_callback_arg(BIO *b, char *arg);

typedef struct bio_method_st BIO_METHOD;

const char *BIO_method_name(const BIO *b);
int BIO_method_type(const BIO *b);

typedef int BIO_info_cb(BIO *, int, int);
typedef BIO_info_cb bio_info_cb;  /* backward compatibility */

SKM_DEFINE_STACK_OF_INTERNAL(BIO, BIO, BIO)
#define sk_BIO_num(sk) OPENSSL_sk_num(ossl_check_const_BIO_sk_type(sk))
#define sk_BIO_value(sk, idx) ((BIO *)OPENSSL_sk_value(ossl_check_const_BIO_sk_type(sk), (idx)))
#define sk_BIO_new(cmp) ((STACK_OF(BIO) *)OPENSSL_sk_new(ossl_check_BIO_compfunc_type(cmp)))
#define sk_BIO_new_null() ((STACK_OF(BIO) *)OPENSSL_sk_new_null())
#define sk_BIO_new_reserve(cmp, n) ((STACK_OF(BIO) *)OPENSSL_sk_new_reserve(ossl_check_BIO_compfunc_type(cmp), (n)))
#define sk_BIO_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_BIO_sk_type(sk), (n))
#define sk_BIO_free(sk) OPENSSL_sk_free(ossl_check_BIO_sk_type(sk))
#define sk_BIO_zero(sk) OPENSSL_sk_zero(ossl_check_BIO_sk_type(sk))
#define sk_BIO_delete(sk, i) ((BIO *)OPENSSL_sk_delete(ossl_check_BIO_sk_type(sk), (i)))
#define sk_BIO_delete_ptr(sk, ptr) ((BIO *)OPENSSL_sk_delete_ptr(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr)))
#define sk_BIO_push(sk, ptr) OPENSSL_sk_push(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_pop(sk) ((BIO *)OPENSSL_sk_pop(ossl_check_BIO_sk_type(sk)))
#define sk_BIO_shift(sk) ((BIO *)OPENSSL_sk_shift(ossl_check_BIO_sk_type(sk)))
#define sk_BIO_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_BIO_sk_type(sk),ossl_check_BIO_freefunc_type(freefunc))
#define sk_BIO_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr), (idx))
#define sk_BIO_set(sk, idx, ptr) ((BIO *)OPENSSL_sk_set(ossl_check_BIO_sk_type(sk), (idx), ossl_check_BIO_type(ptr)))
#define sk_BIO_find(sk, ptr) OPENSSL_sk_find(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr))
#define sk_BIO_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_BIO_sk_type(sk), ossl_check_BIO_type(ptr), pnum)
#define sk_BIO_sort(sk) OPENSSL_sk_sort(ossl_check_BIO_sk_type(sk))
#define sk_BIO_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_BIO_sk_type(sk))
#define sk_BIO_dup(sk) ((STACK_OF(BIO) *)OPENSSL_sk_dup(ossl_check_const_BIO_sk_type(sk)))
#define sk_BIO_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(BIO) *)OPENSSL_sk_deep_copy(ossl_check_const_BIO_sk_type(sk), ossl_check_BIO_copyfunc_type(copyfunc), ossl_check_BIO_freefunc_type(freefunc)))
#define sk_BIO_set_cmp_func(sk, cmp) ((sk_BIO_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_BIO_sk_type(sk), ossl_check_BIO_compfunc_type(cmp)))



/* Prefix and suffix callback in ASN1 BIO */
typedef int asn1_ps_func (BIO *b, unsigned char **pbuf, int *plen,
                          void *parg);

typedef void (*BIO_dgram_sctp_notification_handler_fn) (BIO *b,
                                                        void *context,
                                                        void *buf);
# ifndef OPENSSL_NO_SCTP
/* SCTP parameter structs */
struct bio_dgram_sctp_sndinfo {
    uint16_t snd_sid;
    uint16_t snd_flags;
    uint32_t snd_ppid;
    uint32_t snd_context;
};

struct bio_dgram_sctp_rcvinfo {
    uint16_t rcv_sid;
    uint16_t rcv_ssn;
    uint16_t rcv_flags;
    uint32_t rcv_ppid;
    uint32_t rcv_tsn;
    uint32_t rcv_cumtsn;
    uint32_t rcv_context;
};

struct bio_dgram_sctp_prinfo {
    uint16_t pr_policy;
    uint32_t pr_value;
};
# endif

/*
 * #define BIO_CONN_get_param_hostname BIO_ctrl
 */

# define BIO_C_SET_CONNECT                       100
# define BIO_C_DO_STATE_MACHINE                  101
# define BIO_C_SET_NBIO                          102
/* # define BIO_C_SET_PROXY_PARAM                   103 */
# define BIO_C_SET_FD                            104
# define BIO_C_GET_FD                            105
# define BIO_C_SET_FILE_PTR                      106
# define BIO_C_GET_FILE_PTR                      107
# define BIO_C_SET_FILENAME                      108
# define BIO_C_SET_SSL                           109
# define BIO_C_GET_SSL                           110
# define BIO_C_SET_MD                            111
# define BIO_C_GET_MD                            112
# define BIO_C_GET_CIPHER_STATUS                 113
# define BIO_C_SET_BUF_MEM                       114
# define BIO_C_GET_BUF_MEM_PTR                   115
# define BIO_C_GET_BUFF_NUM_LINES                116
# define BIO_C_SET_BUFF_SIZE                     117
# define BIO_C_SET_ACCEPT                        118
# define BIO_C_SSL_MODE                          119
# define BIO_C_GET_MD_CTX                        120
/* # define BIO_C_GET_PROXY_PARAM                   121 */
# define BIO_C_SET_BUFF_READ_DATA                122/* data to read first */
# define BIO_C_GET_CONNECT                       123
# define BIO_C_GET_ACCEPT                        124
# define BIO_C_SET_SSL_RENEGOTIATE_BYTES         125
# define BIO_C_GET_SSL_NUM_RENEGOTIATES          126
# define BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT       127
# define BIO_C_FILE_SEEK                         128
# define BIO_C_GET_CIPHER_CTX                    129
# define BIO_C_SET_BUF_MEM_EOF_RETURN            130/* return end of input
                                                     * value */
# define BIO_C_SET_BIND_MODE                     131
# define BIO_C_GET_BIND_MODE                     132
# define BIO_C_FILE_TELL                         133
# define BIO_C_GET_SOCKS                         134
# define BIO_C_SET_SOCKS                         135

# define BIO_C_SET_WRITE_BUF_SIZE                136/* for BIO_s_bio */
# define BIO_C_GET_WRITE_BUF_SIZE                137
# define BIO_C_MAKE_BIO_PAIR                     138
# define BIO_C_DESTROY_BIO_PAIR                  139
# define BIO_C_GET_WRITE_GUARANTEE               140
# define BIO_C_GET_READ_REQUEST                  141
# define BIO_C_SHUTDOWN_WR                       142
# define BIO_C_NREAD0                            143
# define BIO_C_NREAD                             144
# define BIO_C_NWRITE0                           145
# define BIO_C_NWRITE                            146
# define BIO_C_RESET_READ_REQUEST                147
# define BIO_C_SET_MD_CTX                        148

# define BIO_C_SET_PREFIX                        149
# define BIO_C_GET_PREFIX                        150
# define BIO_C_SET_SUFFIX                        151
# define BIO_C_GET_SUFFIX                        152

# define BIO_C_SET_EX_ARG                        153
# define BIO_C_GET_EX_ARG                        154

# define BIO_C_SET_CONNECT_MODE                  155

# define BIO_set_app_data(s,arg)         BIO_set_ex_data(s,0,arg)
# define BIO_get_app_data(s)             BIO_get_ex_data(s,0)

# define BIO_set_nbio(b,n)             BIO_ctrl(b,BIO_C_SET_NBIO,(n),NULL)

# ifndef OPENSSL_NO_SOCK
/* IP families we support, for BIO_s_connect() and BIO_s_accept() */
/* Note: the underlying operating system may not support some of them */
#  define BIO_FAMILY_IPV4                         4
#  define BIO_FAMILY_IPV6                         6
#  define BIO_FAMILY_IPANY                        256

/* BIO_s_connect() */
#  define BIO_set_conn_hostname(b,name) BIO_ctrl(b,BIO_C_SET_CONNECT,0, \
                                                 (char *)(name))
#  define BIO_set_conn_port(b,port)     BIO_ctrl(b,BIO_C_SET_CONNECT,1, \
                                                 (char *)(port))
#  define BIO_set_conn_address(b,addr)  BIO_ctrl(b,BIO_C_SET_CONNECT,2, \
                                                 (char *)(addr))
#  define BIO_set_conn_ip_family(b,f)   BIO_int_ctrl(b,BIO_C_SET_CONNECT,3,f)
#  define BIO_get_conn_hostname(b)      ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,0))
#  define BIO_get_conn_port(b)          ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,1))
#  define BIO_get_conn_address(b)       ((const BIO_ADDR *)BIO_ptr_ctrl(b,BIO_C_GET_CONNECT,2))
#  define BIO_get_conn_ip_family(b)     BIO_ctrl(b,BIO_C_GET_CONNECT,3,NULL)
#  define BIO_set_conn_mode(b,n)        BIO_ctrl(b,BIO_C_SET_CONNECT_MODE,(n),NULL)

/* BIO_s_accept() */
#  define BIO_set_accept_name(b,name)   BIO_ctrl(b,BIO_C_SET_ACCEPT,0, \
                                                 (char *)(name))
#  define BIO_set_accept_port(b,port)   BIO_ctrl(b,BIO_C_SET_ACCEPT,1, \
                                                 (char *)(port))
#  define BIO_get_accept_name(b)        ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,0))
#  define BIO_get_accept_port(b)        ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,1))
#  define BIO_get_peer_name(b)          ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,2))
#  define BIO_get_peer_port(b)          ((const char *)BIO_ptr_ctrl(b,BIO_C_GET_ACCEPT,3))
/* #define BIO_set_nbio(b,n)    BIO_ctrl(b,BIO_C_SET_NBIO,(n),NULL) */
#  define BIO_set_nbio_accept(b,n)      BIO_ctrl(b,BIO_C_SET_ACCEPT,2,(n)?(void *)"a":NULL)
#  define BIO_set_accept_bios(b,bio)    BIO_ctrl(b,BIO_C_SET_ACCEPT,3, \
                                                 (char *)(bio))
#  define BIO_set_accept_ip_family(b,f) BIO_int_ctrl(b,BIO_C_SET_ACCEPT,4,f)
#  define BIO_get_accept_ip_family(b)   BIO_ctrl(b,BIO_C_GET_ACCEPT,4,NULL)

/* Aliases kept for backward compatibility */
#  define BIO_BIND_NORMAL                 0
#  define BIO_BIND_REUSEADDR              BIO_SOCK_REUSEADDR
#  define BIO_BIND_REUSEADDR_IF_UNUSED    BIO_SOCK_REUSEADDR
#  define BIO_set_bind_mode(b,mode) BIO_ctrl(b,BIO_C_SET_BIND_MODE,mode,NULL)
#  define BIO_get_bind_mode(b)    BIO_ctrl(b,BIO_C_GET_BIND_MODE,0,NULL)
# endif /* OPENSSL_NO_SOCK */

# define BIO_do_connect(b)       BIO_do_handshake(b)
# define BIO_do_accept(b)        BIO_do_handshake(b)

# define BIO_do_handshake(b)     BIO_ctrl(b,BIO_C_DO_STATE_MACHINE,0,NULL)

/* BIO_s_datagram(), BIO_s_fd(), BIO_s_socket(), BIO_s_accept() and BIO_s_connect() */
# define BIO_set_fd(b,fd,c)      BIO_int_ctrl(b,BIO_C_SET_FD,c,fd)
# define BIO_get_fd(b,c)         BIO_ctrl(b,BIO_C_GET_FD,0,(char *)(c))

/* BIO_s_file() */
# define BIO_set_fp(b,fp,c)      BIO_ctrl(b,BIO_C_SET_FILE_PTR,c,(char *)(fp))
# define BIO_get_fp(b,fpp)       BIO_ctrl(b,BIO_C_GET_FILE_PTR,0,(char *)(fpp))

/* BIO_s_fd() and BIO_s_file() */
# define BIO_seek(b,ofs) (int)BIO_ctrl(b,BIO_C_FILE_SEEK,ofs,NULL)
# define BIO_tell(b)     (int)BIO_ctrl(b,BIO_C_FILE_TELL,0,NULL)

/*
 * name is cast to lose const, but might be better to route through a
 * function so we can do it safely
 */
# ifdef CONST_STRICT
/*
 * If you are wondering why this isn't defined, its because CONST_STRICT is
 * purely a compile-time kludge to allow const to be checked.
 */
int BIO_read_filename(BIO *b, const char *name);
# else
#  define BIO_read_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_READ,(char *)(name))
# endif
# define BIO_write_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_WRITE,name)
# define BIO_append_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_APPEND,name)
# define BIO_rw_filename(b,name) (int)BIO_ctrl(b,BIO_C_SET_FILENAME, \
                BIO_CLOSE|BIO_FP_READ|BIO_FP_WRITE,name)

/*
 * WARNING WARNING, this ups the reference count on the read bio of the SSL
 * structure.  This is because the ssl read BIO is now pointed to by the
 * next_bio field in the bio.  So when you free the BIO, make sure you are
 * doing a BIO_free_all() to catch the underlying BIO.
 */
# define BIO_set_ssl(b,ssl,c)    BIO_ctrl(b,BIO_C_SET_SSL,c,(char *)(ssl))
# define BIO_get_ssl(b,sslp)     BIO_ctrl(b,BIO_C_GET_SSL,0,(char *)(sslp))
# define BIO_set_ssl_mode(b,client)      BIO_ctrl(b,BIO_C_SSL_MODE,client,NULL)
# define BIO_set_ssl_renegotiate_bytes(b,num) \
        BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_BYTES,num,NULL)
# define BIO_get_num_renegotiates(b) \
        BIO_ctrl(b,BIO_C_GET_SSL_NUM_RENEGOTIATES,0,NULL)
# define BIO_set_ssl_renegotiate_timeout(b,seconds) \
        BIO_ctrl(b,BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT,seconds,NULL)

/* defined in evp.h */
/* #define BIO_set_md(b,md)     BIO_ctrl(b,BIO_C_SET_MD,1,(char *)(md)) */

# define BIO_get_mem_data(b,pp)  BIO_ctrl(b,BIO_CTRL_INFO,0,(char *)(pp))
# define BIO_set_mem_buf(b,bm,c) BIO_ctrl(b,BIO_C_SET_BUF_MEM,c,(char *)(bm))
# define BIO_get_mem_ptr(b,pp)   BIO_ctrl(b,BIO_C_GET_BUF_MEM_PTR,0, \
                                          (char *)(pp))
# define BIO_set_mem_eof_return(b,v) \
                                BIO_ctrl(b,BIO_C_SET_BUF_MEM_EOF_RETURN,v,NULL)

/* For the BIO_f_buffer() type */
# define BIO_get_buffer_num_lines(b)     BIO_ctrl(b,BIO_C_GET_BUFF_NUM_LINES,0,NULL)
# define BIO_set_buffer_size(b,size)     BIO_ctrl(b,BIO_C_SET_BUFF_SIZE,size,NULL)
# define BIO_set_read_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,0)
# define BIO_set_write_buffer_size(b,size) BIO_int_ctrl(b,BIO_C_SET_BUFF_SIZE,size,1)
# define BIO_set_buffer_read_data(b,buf,num) BIO_ctrl(b,BIO_C_SET_BUFF_READ_DATA,num,buf)

/* Don't use the next one unless you know what you are doing :-) */
# define BIO_dup_state(b,ret)    BIO_ctrl(b,BIO_CTRL_DUP,0,(char *)(ret))

# define BIO_reset(b)            (int)BIO_ctrl(b,BIO_CTRL_RESET,0,NULL)
# define BIO_eof(b)              (int)BIO_ctrl(b,BIO_CTRL_EOF,0,NULL)
# define BIO_set_close(b,c)      (int)BIO_ctrl(b,BIO_CTRL_SET_CLOSE,(c),NULL)
# define BIO_get_close(b)        (int)BIO_ctrl(b,BIO_CTRL_GET_CLOSE,0,NULL)
# define BIO_pending(b)          (int)BIO_ctrl(b,BIO_CTRL_PENDING,0,NULL)
# define BIO_wpending(b)         (int)BIO_ctrl(b,BIO_CTRL_WPENDING,0,NULL)
/* ...pending macros have inappropriate return type */
size_t BIO_ctrl_pending(BIO *b);
size_t BIO_ctrl_wpending(BIO *b);
# define BIO_flush(b)            (int)BIO_ctrl(b,BIO_CTRL_FLUSH,0,NULL)
# define BIO_get_info_callback(b,cbp) (int)BIO_ctrl(b,BIO_CTRL_GET_CALLBACK,0, \
                                                   cbp)
# define BIO_set_info_callback(b,cb) (int)BIO_callback_ctrl(b,BIO_CTRL_SET_CALLBACK,cb)

/* For the BIO_f_buffer() type */
# define BIO_buffer_get_num_lines(b) BIO_ctrl(b,BIO_CTRL_GET,0,NULL)
# define BIO_buffer_peek(b,s,l) BIO_ctrl(b,BIO_CTRL_PEEK,(l),(s))

/* For BIO_s_bio() */
# define BIO_set_write_buf_size(b,size) (int)BIO_ctrl(b,BIO_C_SET_WRITE_BUF_SIZE,size,NULL)
# define BIO_get_write_buf_size(b,size) (size_t)BIO_ctrl(b,BIO_C_GET_WRITE_BUF_SIZE,size,NULL)
# define BIO_make_bio_pair(b1,b2)   (int)BIO_ctrl(b1,BIO_C_MAKE_BIO_PAIR,0,b2)
# define BIO_destroy_bio_pair(b)    (int)BIO_ctrl(b,BIO_C_DESTROY_BIO_PAIR,0,NULL)
# define BIO_shutdown_wr(b) (int)BIO_ctrl(b, BIO_C_SHUTDOWN_WR, 0, NULL)
/* macros with inappropriate type -- but ...pending macros use int too: */
# define BIO_get_write_guarantee(b) (int)BIO_ctrl(b,BIO_C_GET_WRITE_GUARANTEE,0,NULL)
# define BIO_get_read_request(b)    (int)BIO_ctrl(b,BIO_C_GET_READ_REQUEST,0,NULL)
size_t BIO_ctrl_get_write_guarantee(BIO *b);
size_t BIO_ctrl_get_read_request(BIO *b);
int BIO_ctrl_reset_read_request(BIO *b);

/* ctrl macros for dgram */
# define BIO_ctrl_dgram_connect(b,peer)  \
                     (int)BIO_ctrl(b,BIO_CTRL_DGRAM_CONNECT,0, (char *)(peer))
# define BIO_ctrl_set_connected(b,peer) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_SET_CONNECTED, 0, (char *)(peer))
# define BIO_dgram_recv_timedout(b) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP, 0, NULL)
# define BIO_dgram_send_timedout(b) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP, 0, NULL)
# define BIO_dgram_get_peer(b,peer) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_GET_PEER, 0, (char *)(peer))
# define BIO_dgram_set_peer(b,peer) \
         (int)BIO_ctrl(b, BIO_CTRL_DGRAM_SET_PEER, 0, (char *)(peer))
# define BIO_dgram_get_mtu_overhead(b) \
         (unsigned int)BIO_ctrl((b), BIO_CTRL_DGRAM_GET_MTU_OVERHEAD, 0, NULL)

/* ctrl macros for BIO_f_prefix */
# define BIO_set_prefix(b,p) BIO_ctrl((b), BIO_CTRL_SET_PREFIX, 0, (void *)(p))
# define BIO_set_indent(b,i) BIO_ctrl((b), BIO_CTRL_SET_INDENT, (i), NULL)
# define BIO_get_indent(b) BIO_ctrl((b), BIO_CTRL_GET_INDENT, 0, NULL)

#define BIO_get_ex_new_index(l, p, newf, dupf, freef) \
    CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, l, p, newf, dupf, freef)
int BIO_set_ex_data(BIO *bio, int idx, void *data);
void *BIO_get_ex_data(const BIO *bio, int idx);
uint64_t BIO_number_read(BIO *bio);
uint64_t BIO_number_written(BIO *bio);

/* For BIO_f_asn1() */
int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
                        asn1_ps_func *prefix_free);
int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
                        asn1_ps_func **pprefix_free);
int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
                        asn1_ps_func *suffix_free);
int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
                        asn1_ps_func **psuffix_free);

const BIO_METHOD *BIO_s_file(void);
BIO *BIO_new_file(const char *filename, const char *mode);
BIO *BIO_new_from_core_bio(OSSL_LIB_CTX *libctx, OSSL_CORE_BIO *corebio);
# ifndef OPENSSL_NO_STDIO
BIO *BIO_new_fp(FILE *stream, int close_flag);
# endif
BIO *BIO_new_ex(OSSL_LIB_CTX *libctx, const BIO_METHOD *method);
BIO *BIO_new(const BIO_METHOD *type);
int BIO_free(BIO *a);
void BIO_set_data(BIO *a, void *ptr);
void *BIO_get_data(BIO *a);
void BIO_set_init(BIO *a, int init);
int BIO_get_init(BIO *a);
void BIO_set_shutdown(BIO *a, int shut);
int BIO_get_shutdown(BIO *a);
void BIO_vfree(BIO *a);
int BIO_up_ref(BIO *a);
int BIO_read(BIO *b, void *data, int dlen);
int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
int BIO_gets(BIO *bp, char *buf, int size);
int BIO_get_line(BIO *bio, char *buf, int size);
int BIO_write(BIO *b, const void *data, int dlen);
int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);
int BIO_puts(BIO *bp, const char *buf);
int BIO_indent(BIO *b, int indent, int max);
long BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);
long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
void *BIO_ptr_ctrl(BIO *bp, int cmd, long larg);
long BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);
BIO *BIO_push(BIO *b, BIO *append);
BIO *BIO_pop(BIO *b);
void BIO_free_all(BIO *a);
BIO *BIO_find_type(BIO *b, int bio_type);
BIO *BIO_next(BIO *b);
void BIO_set_next(BIO *b, BIO *next);
BIO *BIO_get_retry_BIO(BIO *bio, int *reason);
int BIO_get_retry_reason(BIO *bio);
void BIO_set_retry_reason(BIO *bio, int reason);
BIO *BIO_dup_chain(BIO *in);

int BIO_nread0(BIO *bio, char **buf);
int BIO_nread(BIO *bio, char **buf, int num);
int BIO_nwrite0(BIO *bio, char **buf);
int BIO_nwrite(BIO *bio, char **buf, int num);

const BIO_METHOD *BIO_s_mem(void);
const BIO_METHOD *BIO_s_secmem(void);
BIO *BIO_new_mem_buf(const void *buf, int len);
# ifndef OPENSSL_NO_SOCK
const BIO_METHOD *BIO_s_socket(void);
const BIO_METHOD *BIO_s_connect(void);
const BIO_METHOD *BIO_s_accept(void);
# endif
const BIO_METHOD *BIO_s_fd(void);
const BIO_METHOD *BIO_s_log(void);
const BIO_METHOD *BIO_s_bio(void);
const BIO_METHOD *BIO_s_null(void);
const BIO_METHOD *BIO_f_null(void);
const BIO_METHOD *BIO_f_buffer(void);
const BIO_METHOD *BIO_f_readbuffer(void);
const BIO_METHOD *BIO_f_linebuffer(void);
const BIO_METHOD *BIO_f_nbio_test(void);
const BIO_METHOD *BIO_f_prefix(void);
const BIO_METHOD *BIO_s_core(void);
# ifndef OPENSSL_NO_DGRAM
const BIO_METHOD *BIO_s_datagram(void);
int BIO_dgram_non_fatal_error(int error);
BIO *BIO_new_dgram(int fd, int close_flag);
#  ifndef OPENSSL_NO_SCTP
const BIO_METHOD *BIO_s_datagram_sctp(void);
BIO *BIO_new_dgram_sctp(int fd, int close_flag);
int BIO_dgram_is_sctp(BIO *bio);
int BIO_dgram_sctp_notification_cb(BIO *b,
                BIO_dgram_sctp_notification_handler_fn handle_notifications,
                void *context);
int BIO_dgram_sctp_wait_for_dry(BIO *b);
int BIO_dgram_sctp_msg_waiting(BIO *b);
#  endif
# endif

# ifndef OPENSSL_NO_SOCK
int BIO_sock_should_retry(int i);
int BIO_sock_non_fatal_error(int error);
int BIO_socket_wait(int fd, int for_read, time_t max_time);
# endif
int BIO_wait(BIO *bio, time_t max_time, unsigned int nap_milliseconds);
int BIO_do_connect_retry(BIO *bio, int timeout, int nap_milliseconds);

int BIO_fd_should_retry(int i);
int BIO_fd_non_fatal_error(int error);
int BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
                void *u, const void *s, int len);
int BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
                       void *u, const void *s, int len, int indent);
int BIO_dump(BIO *b, const void *bytes, int len);
int BIO_dump_indent(BIO *b, const void *bytes, int len, int indent);
# ifndef OPENSSL_NO_STDIO
int BIO_dump_fp(FILE *fp, const void *s, int len);
int BIO_dump_indent_fp(FILE *fp, const void *s, int len, int indent);
# endif
int BIO_hex_string(BIO *out, int indent, int width, const void *data,
                   int datalen);

# ifndef OPENSSL_NO_SOCK
BIO_ADDR *BIO_ADDR_new(void);
int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
                     const void *where, size_t wherelen, unsigned short port);
void BIO_ADDR_free(BIO_ADDR *);
void BIO_ADDR_clear(BIO_ADDR *ap);
int BIO_ADDR_family(const BIO_ADDR *ap);
int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l);
unsigned short BIO_ADDR_rawport(const BIO_ADDR *ap);
char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric);
char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric);
char *BIO_ADDR_path_string(const BIO_ADDR *ap);

const BIO_ADDRINFO *BIO_ADDRINFO_next(const BIO_ADDRINFO *bai);
int BIO_ADDRINFO_family(const BIO_ADDRINFO *bai);
int BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai);
int BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai);
const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai);
void BIO_ADDRINFO_free(BIO_ADDRINFO *bai);

enum BIO_hostserv_priorities {
    BIO_PARSE_PRIO_HOST, BIO_PARSE_PRIO_SERV
};
int BIO_parse_hostserv(const char *hostserv, char **host, char **service,
                       enum BIO_hostserv_priorities hostserv_prio);
enum BIO_lookup_type {
    BIO_LOOKUP_CLIENT, BIO_LOOKUP_SERVER
};
int BIO_lookup(const char *host, const char *service,
               enum BIO_lookup_type lookup_type,
               int family, int socktype, BIO_ADDRINFO **res);
int BIO_lookup_ex(const char *host, const char *service,
                  int lookup_type, int family, int socktype, int protocol,
                  BIO_ADDRINFO **res);
int BIO_sock_error(int sock);
int BIO_socket_ioctl(int fd, long type, void *arg);
int BIO_socket_nbio(int fd, int mode);
int BIO_sock_init(void);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define BIO_sock_cleanup() while(0) continue
# endif
int BIO_set_tcp_ndelay(int sock, int turn_on);
# ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 struct hostent *BIO_gethostbyname(const char *name);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_port(const char *str, unsigned short *port_ptr);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_host_ip(const char *str, unsigned char *ip);
OSSL_DEPRECATEDIN_1_1_0 int BIO_get_accept_socket(char *host_port, int mode);
OSSL_DEPRECATEDIN_1_1_0 int BIO_accept(int sock, char **ip_port);
# endif

union BIO_sock_info_u {
    BIO_ADDR *addr;
};
enum BIO_sock_info_type {
    BIO_SOCK_INFO_ADDRESS
};
int BIO_sock_info(int sock,
                  enum BIO_sock_info_type type, union BIO_sock_info_u *info);

#  define BIO_SOCK_REUSEADDR    0x01
#  define BIO_SOCK_V6_ONLY      0x02
#  define BIO_SOCK_KEEPALIVE    0x04
#  define BIO_SOCK_NONBLOCK     0x08
#  define BIO_SOCK_NODELAY      0x10

int BIO_socket(int domain, int socktype, int protocol, int options);
int BIO_connect(int sock, const BIO_ADDR *addr, int options);
int BIO_bind(int sock, const BIO_ADDR *addr, int options);
int BIO_listen(int sock, const BIO_ADDR *addr, int options);
int BIO_accept_ex(int accept_sock, BIO_ADDR *addr, int options);
int BIO_closesocket(int sock);

BIO *BIO_new_socket(int sock, int close_flag);
BIO *BIO_new_connect(const char *host_port);
BIO *BIO_new_accept(const char *host_port);
# endif /* OPENSSL_NO_SOCK*/

BIO *BIO_new_fd(int fd, int close_flag);

int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
                     BIO **bio2, size_t writebuf2);
/*
 * If successful, returns 1 and in *bio1, *bio2 two BIO pair endpoints.
 * Otherwise returns 0 and sets *bio1 and *bio2 to NULL. Size 0 uses default
 * value.
 */

void BIO_copy_next_retry(BIO *b);

/*
 * long BIO_ghbn_ctrl(int cmd,int iarg,char *parg);
 */

# define ossl_bio__attr__(x)
# if defined(__GNUC__) && defined(__STDC_VERSION__) \
    && !defined(__MINGW32__) && !defined(__MINGW64__) \
    && !defined(__APPLE__)
    /*
     * Because we support the 'z' modifier, which made its appearance in C99,
     * we can't use __attribute__ with pre C99 dialects.
     */
#  if __STDC_VERSION__ >= 199901L
#   undef ossl_bio__attr__
#   define ossl_bio__attr__ __attribute__
#   if __GNUC__*10 + __GNUC_MINOR__ >= 44
#    define ossl_bio__printf__ __gnu_printf__
#   else
#    define ossl_bio__printf__ __printf__
#   endif
#  endif
# endif
int BIO_printf(BIO *bio, const char *format, ...)
ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 3)));
int BIO_vprintf(BIO *bio, const char *format, va_list args)
ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 0)));
int BIO_snprintf(char *buf, size_t n, const char *format, ...)
ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 4)));
int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 0)));
# undef ossl_bio__attr__
# undef ossl_bio__printf__


BIO_METHOD *BIO_meth_new(int type, const char *name);
void BIO_meth_free(BIO_METHOD *biom);
int (*BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int);
int (*BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
                                                size_t *);
int BIO_meth_set_write(BIO_METHOD *biom,
                       int (*write) (BIO *, const char *, int));
int BIO_meth_set_write_ex(BIO_METHOD *biom,
                       int (*bwrite) (BIO *, const char *, size_t, size_t *));
int (*BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int);
int (*BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *);
int BIO_meth_set_read(BIO_METHOD *biom,
                      int (*read) (BIO *, char *, int));
int BIO_meth_set_read_ex(BIO_METHOD *biom,
                         int (*bread) (BIO *, char *, size_t, size_t *));
int (*BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *);
int BIO_meth_set_puts(BIO_METHOD *biom,
                      int (*puts) (BIO *, const char *));
int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
int BIO_meth_set_gets(BIO_METHOD *biom,
                      int (*ossl_gets) (BIO *, char *, int));
long (*BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *);
int BIO_meth_set_ctrl(BIO_METHOD *biom,
                      long (*ctrl) (BIO *, int, long, void *));
int (*BIO_meth_get_create(const BIO_METHOD *bion)) (BIO *);
int BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *));
int (*BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *);
int BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *));
long (*BIO_meth_get_callback_ctrl(const BIO_METHOD *biom))
                                 (BIO *, int, BIO_info_cb *);
int BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
                               long (*callback_ctrl) (BIO *, int,
                                                      BIO_info_cb *));

# ifdef  __cplusplus
}
# endif
#endif
                                                                                            node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/cmp.h                       0000664 0000000 0000000 00000120243 14746647661 0026430 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/cmp.h.in
 *
 * Copyright 2007-2023 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright Nokia 2007-2019
 * Copyright Siemens AG 2015-2019
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_CMP_H
# define OPENSSL_CMP_H

# include <openssl/opensslconf.h>
# ifndef OPENSSL_NO_CMP

#  include <openssl/crmf.h>
#  include <openssl/cmperr.h>
#  include <openssl/cmp_util.h>
#  include <openssl/http.h>

/* explicit #includes not strictly needed since implied by the above: */
#  include <openssl/types.h>
#  include <openssl/safestack.h>
#  include <openssl/x509.h>
#  include <openssl/x509v3.h>

#  ifdef __cplusplus
extern "C" {
#  endif

#  define OSSL_CMP_PVNO 2

/*-
 *   PKIFailureInfo ::= BIT STRING {
 *   -- since we can fail in more than one way!
 *   -- More codes may be added in the future if/when required.
 *       badAlg              (0),
 *       -- unrecognized or unsupported Algorithm Identifier
 *       badMessageCheck     (1),
 *       -- integrity check failed (e.g., signature did not verify)
 *       badRequest          (2),
 *       -- transaction not permitted or supported
 *       badTime             (3),
 *       -- messageTime was not sufficiently close to the system time,
 *       -- as defined by local policy
 *       badCertId           (4),
 *       -- no certificate could be found matching the provided criteria
 *       badDataFormat       (5),
 *       -- the data submitted has the wrong format
 *       wrongAuthority      (6),
 *       -- the authority indicated in the request is different from the
 *       -- one creating the response token
 *       incorrectData       (7),
 *       -- the requester's data is incorrect (for notary services)
 *       missingTimeStamp    (8),
 *       -- when the timestamp is missing but should be there
 *       -- (by policy)
 *       badPOP              (9),
 *       -- the proof-of-possession failed
 *       certRevoked         (10),
 *          -- the certificate has already been revoked
 *       certConfirmed       (11),
 *          -- the certificate has already been confirmed
 *       wrongIntegrity      (12),
 *          -- invalid integrity, password based instead of signature or
 *          -- vice versa
 *       badRecipientNonce   (13),
 *          -- invalid recipient nonce, either missing or wrong value
 *       timeNotAvailable    (14),
 *          -- the TSA's time source is not available
 *       unacceptedPolicy    (15),
 *          -- the requested TSA policy is not supported by the TSA.
 *       unacceptedExtension (16),
 *          -- the requested extension is not supported by the TSA.
 *       addInfoNotAvailable (17),
 *          -- the additional information requested could not be
 *          -- understood or is not available
 *       badSenderNonce      (18),
 *          -- invalid sender nonce, either missing or wrong size
 *       badCertTemplate     (19),
 *          -- invalid cert. template or missing mandatory information
 *       signerNotTrusted    (20),
 *          -- signer of the message unknown or not trusted
 *       transactionIdInUse  (21),
 *          -- the transaction identifier is already in use
 *       unsupportedVersion  (22),
 *          -- the version of the message is not supported
 *       notAuthorized       (23),
 *          -- the sender was not authorized to make the preceding
 *          -- request or perform the preceding action
 *       systemUnavail       (24),
 *       -- the request cannot be handled due to system unavailability
 *       systemFailure       (25),
 *       -- the request cannot be handled due to system failure
 *       duplicateCertReq    (26)
 *       -- certificate cannot be issued because a duplicate
 *       -- certificate already exists
 *   }
 */
#  define OSSL_CMP_PKIFAILUREINFO_badAlg 0
#  define OSSL_CMP_PKIFAILUREINFO_badMessageCheck 1
#  define OSSL_CMP_PKIFAILUREINFO_badRequest 2
#  define OSSL_CMP_PKIFAILUREINFO_badTime 3
#  define OSSL_CMP_PKIFAILUREINFO_badCertId 4
#  define OSSL_CMP_PKIFAILUREINFO_badDataFormat 5
#  define OSSL_CMP_PKIFAILUREINFO_wrongAuthority 6
#  define OSSL_CMP_PKIFAILUREINFO_incorrectData 7
#  define OSSL_CMP_PKIFAILUREINFO_missingTimeStamp 8
#  define OSSL_CMP_PKIFAILUREINFO_badPOP 9
#  define OSSL_CMP_PKIFAILUREINFO_certRevoked 10
#  define OSSL_CMP_PKIFAILUREINFO_certConfirmed 11
#  define OSSL_CMP_PKIFAILUREINFO_wrongIntegrity 12
#  define OSSL_CMP_PKIFAILUREINFO_badRecipientNonce 13
#  define OSSL_CMP_PKIFAILUREINFO_timeNotAvailable 14
#  define OSSL_CMP_PKIFAILUREINFO_unacceptedPolicy 15
#  define OSSL_CMP_PKIFAILUREINFO_unacceptedExtension 16
#  define OSSL_CMP_PKIFAILUREINFO_addInfoNotAvailable 17
#  define OSSL_CMP_PKIFAILUREINFO_badSenderNonce 18
#  define OSSL_CMP_PKIFAILUREINFO_badCertTemplate 19
#  define OSSL_CMP_PKIFAILUREINFO_signerNotTrusted 20
#  define OSSL_CMP_PKIFAILUREINFO_transactionIdInUse 21
#  define OSSL_CMP_PKIFAILUREINFO_unsupportedVersion 22
#  define OSSL_CMP_PKIFAILUREINFO_notAuthorized 23
#  define OSSL_CMP_PKIFAILUREINFO_systemUnavail 24
#  define OSSL_CMP_PKIFAILUREINFO_systemFailure 25
#  define OSSL_CMP_PKIFAILUREINFO_duplicateCertReq 26
#  define OSSL_CMP_PKIFAILUREINFO_MAX 26
#  define OSSL_CMP_PKIFAILUREINFO_MAX_BIT_PATTERN \
    ((1 << (OSSL_CMP_PKIFAILUREINFO_MAX + 1)) - 1)
#  if OSSL_CMP_PKIFAILUREINFO_MAX_BIT_PATTERN > INT_MAX
#   error CMP_PKIFAILUREINFO_MAX bit pattern does not fit in type int
#  endif

typedef ASN1_BIT_STRING OSSL_CMP_PKIFAILUREINFO;

#  define OSSL_CMP_CTX_FAILINFO_badAlg (1 << 0)
#  define OSSL_CMP_CTX_FAILINFO_badMessageCheck (1 << 1)
#  define OSSL_CMP_CTX_FAILINFO_badRequest (1 << 2)
#  define OSSL_CMP_CTX_FAILINFO_badTime (1 << 3)
#  define OSSL_CMP_CTX_FAILINFO_badCertId (1 << 4)
#  define OSSL_CMP_CTX_FAILINFO_badDataFormat (1 << 5)
#  define OSSL_CMP_CTX_FAILINFO_wrongAuthority (1 << 6)
#  define OSSL_CMP_CTX_FAILINFO_incorrectData (1 << 7)
#  define OSSL_CMP_CTX_FAILINFO_missingTimeStamp (1 << 8)
#  define OSSL_CMP_CTX_FAILINFO_badPOP (1 << 9)
#  define OSSL_CMP_CTX_FAILINFO_certRevoked (1 << 10)
#  define OSSL_CMP_CTX_FAILINFO_certConfirmed (1 << 11)
#  define OSSL_CMP_CTX_FAILINFO_wrongIntegrity (1 << 12)
#  define OSSL_CMP_CTX_FAILINFO_badRecipientNonce (1 << 13)
#  define OSSL_CMP_CTX_FAILINFO_timeNotAvailable (1 << 14)
#  define OSSL_CMP_CTX_FAILINFO_unacceptedPolicy (1 << 15)
#  define OSSL_CMP_CTX_FAILINFO_unacceptedExtension (1 << 16)
#  define OSSL_CMP_CTX_FAILINFO_addInfoNotAvailable (1 << 17)
#  define OSSL_CMP_CTX_FAILINFO_badSenderNonce (1 << 18)
#  define OSSL_CMP_CTX_FAILINFO_badCertTemplate (1 << 19)
#  define OSSL_CMP_CTX_FAILINFO_signerNotTrusted (1 << 20)
#  define OSSL_CMP_CTX_FAILINFO_transactionIdInUse (1 << 21)
#  define OSSL_CMP_CTX_FAILINFO_unsupportedVersion (1 << 22)
#  define OSSL_CMP_CTX_FAILINFO_notAuthorized (1 << 23)
#  define OSSL_CMP_CTX_FAILINFO_systemUnavail (1 << 24)
#  define OSSL_CMP_CTX_FAILINFO_systemFailure (1 << 25)
#  define OSSL_CMP_CTX_FAILINFO_duplicateCertReq (1 << 26)

/*-
 *   PKIStatus ::= INTEGER {
 *       accepted                (0),
 *       -- you got exactly what you asked for
 *       grantedWithMods        (1),
 *       -- you got something like what you asked for; the
 *       -- requester is responsible for ascertaining the differences
 *       rejection              (2),
 *       -- you don't get it, more information elsewhere in the message
 *       waiting                (3),
 *       -- the request body part has not yet been processed; expect to
 *       -- hear more later (note: proper handling of this status
 *       -- response MAY use the polling req/rep PKIMessages specified
 *       -- in Section 5.3.22; alternatively, polling in the underlying
 *       -- transport layer MAY have some utility in this regard)
 *       revocationWarning      (4),
 *       -- this message contains a warning that a revocation is
 *       -- imminent
 *       revocationNotification (5),
 *       -- notification that a revocation has occurred
 *       keyUpdateWarning       (6)
 *       -- update already done for the oldCertId specified in
 *       -- CertReqMsg
 *   }
 */
#  define OSSL_CMP_PKISTATUS_request                -3
#  define OSSL_CMP_PKISTATUS_trans                  -2
#  define OSSL_CMP_PKISTATUS_unspecified            -1
#  define OSSL_CMP_PKISTATUS_accepted               0
#  define OSSL_CMP_PKISTATUS_grantedWithMods        1
#  define OSSL_CMP_PKISTATUS_rejection              2
#  define OSSL_CMP_PKISTATUS_waiting                3
#  define OSSL_CMP_PKISTATUS_revocationWarning      4
#  define OSSL_CMP_PKISTATUS_revocationNotification 5
#  define OSSL_CMP_PKISTATUS_keyUpdateWarning       6

typedef ASN1_INTEGER OSSL_CMP_PKISTATUS;
DECLARE_ASN1_ITEM(OSSL_CMP_PKISTATUS)

#  define OSSL_CMP_CERTORENCCERT_CERTIFICATE 0
#  define OSSL_CMP_CERTORENCCERT_ENCRYPTEDCERT 1

/* data type declarations */
typedef struct ossl_cmp_ctx_st OSSL_CMP_CTX;
typedef struct ossl_cmp_pkiheader_st OSSL_CMP_PKIHEADER;
DECLARE_ASN1_FUNCTIONS(OSSL_CMP_PKIHEADER)
typedef struct ossl_cmp_msg_st OSSL_CMP_MSG;
DECLARE_ASN1_DUP_FUNCTION(OSSL_CMP_MSG)
DECLARE_ASN1_ENCODE_FUNCTIONS(OSSL_CMP_MSG, OSSL_CMP_MSG, OSSL_CMP_MSG)
typedef struct ossl_cmp_certstatus_st OSSL_CMP_CERTSTATUS;
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_CERTSTATUS, OSSL_CMP_CERTSTATUS, OSSL_CMP_CERTSTATUS)
#define sk_OSSL_CMP_CERTSTATUS_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_value(sk, idx) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk), (idx)))
#define sk_OSSL_CMP_CERTSTATUS_new(cmp) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp)))
#define sk_OSSL_CMP_CERTSTATUS_new_null() ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_CERTSTATUS_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_CERTSTATUS_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (n))
#define sk_OSSL_CMP_CERTSTATUS_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_delete(sk, i) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (i)))
#define sk_OSSL_CMP_CERTSTATUS_delete_ptr(sk, ptr) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr)))
#define sk_OSSL_CMP_CERTSTATUS_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_pop(sk) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define sk_OSSL_CMP_CERTSTATUS_shift(sk) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define sk_OSSL_CMP_CERTSTATUS_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk),ossl_check_OSSL_CMP_CERTSTATUS_freefunc_type(freefunc))
#define sk_OSSL_CMP_CERTSTATUS_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr), (idx))
#define sk_OSSL_CMP_CERTSTATUS_set(sk, idx, ptr) ((OSSL_CMP_CERTSTATUS *)OPENSSL_sk_set(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (idx), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr)))
#define sk_OSSL_CMP_CERTSTATUS_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define sk_OSSL_CMP_CERTSTATUS_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_type(ptr), pnum)
#define sk_OSSL_CMP_CERTSTATUS_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define sk_OSSL_CMP_CERTSTATUS_dup(sk) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define sk_OSSL_CMP_CERTSTATUS_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_CERTSTATUS) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_CERTSTATUS_freefunc_type(freefunc)))
#define sk_OSSL_CMP_CERTSTATUS_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_CERTSTATUS_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp)))

typedef struct ossl_cmp_itav_st OSSL_CMP_ITAV;
DECLARE_ASN1_DUP_FUNCTION(OSSL_CMP_ITAV)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_ITAV, OSSL_CMP_ITAV, OSSL_CMP_ITAV)
#define sk_OSSL_CMP_ITAV_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_value(sk, idx) ((OSSL_CMP_ITAV *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk), (idx)))
#define sk_OSSL_CMP_ITAV_new(cmp) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp)))
#define sk_OSSL_CMP_ITAV_new_null() ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_ITAV_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_ITAV_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_ITAV_sk_type(sk), (n))
#define sk_OSSL_CMP_ITAV_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_delete(sk, i) ((OSSL_CMP_ITAV *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_ITAV_sk_type(sk), (i)))
#define sk_OSSL_CMP_ITAV_delete_ptr(sk, ptr) ((OSSL_CMP_ITAV *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr)))
#define sk_OSSL_CMP_ITAV_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_pop(sk) ((OSSL_CMP_ITAV *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_ITAV_sk_type(sk)))
#define sk_OSSL_CMP_ITAV_shift(sk) ((OSSL_CMP_ITAV *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_ITAV_sk_type(sk)))
#define sk_OSSL_CMP_ITAV_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_ITAV_sk_type(sk),ossl_check_OSSL_CMP_ITAV_freefunc_type(freefunc))
#define sk_OSSL_CMP_ITAV_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr), (idx))
#define sk_OSSL_CMP_ITAV_set(sk, idx, ptr) ((OSSL_CMP_ITAV *)OPENSSL_sk_set(ossl_check_OSSL_CMP_ITAV_sk_type(sk), (idx), ossl_check_OSSL_CMP_ITAV_type(ptr)))
#define sk_OSSL_CMP_ITAV_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr))
#define sk_OSSL_CMP_ITAV_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_type(ptr), pnum)
#define sk_OSSL_CMP_ITAV_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk))
#define sk_OSSL_CMP_ITAV_dup(sk) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk)))
#define sk_OSSL_CMP_ITAV_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_ITAV) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_ITAV_freefunc_type(freefunc)))
#define sk_OSSL_CMP_ITAV_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_ITAV_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp)))

typedef struct ossl_cmp_revrepcontent_st OSSL_CMP_REVREPCONTENT;
typedef struct ossl_cmp_pkisi_st OSSL_CMP_PKISI;
DECLARE_ASN1_FUNCTIONS(OSSL_CMP_PKISI)
DECLARE_ASN1_DUP_FUNCTION(OSSL_CMP_PKISI)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_PKISI, OSSL_CMP_PKISI, OSSL_CMP_PKISI)
#define sk_OSSL_CMP_PKISI_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_value(sk, idx) ((OSSL_CMP_PKISI *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk), (idx)))
#define sk_OSSL_CMP_PKISI_new(cmp) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp)))
#define sk_OSSL_CMP_PKISI_new_null() ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_PKISI_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_PKISI_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_PKISI_sk_type(sk), (n))
#define sk_OSSL_CMP_PKISI_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_delete(sk, i) ((OSSL_CMP_PKISI *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_PKISI_sk_type(sk), (i)))
#define sk_OSSL_CMP_PKISI_delete_ptr(sk, ptr) ((OSSL_CMP_PKISI *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr)))
#define sk_OSSL_CMP_PKISI_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_pop(sk) ((OSSL_CMP_PKISI *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_PKISI_sk_type(sk)))
#define sk_OSSL_CMP_PKISI_shift(sk) ((OSSL_CMP_PKISI *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_PKISI_sk_type(sk)))
#define sk_OSSL_CMP_PKISI_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_PKISI_sk_type(sk),ossl_check_OSSL_CMP_PKISI_freefunc_type(freefunc))
#define sk_OSSL_CMP_PKISI_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr), (idx))
#define sk_OSSL_CMP_PKISI_set(sk, idx, ptr) ((OSSL_CMP_PKISI *)OPENSSL_sk_set(ossl_check_OSSL_CMP_PKISI_sk_type(sk), (idx), ossl_check_OSSL_CMP_PKISI_type(ptr)))
#define sk_OSSL_CMP_PKISI_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr))
#define sk_OSSL_CMP_PKISI_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_type(ptr), pnum)
#define sk_OSSL_CMP_PKISI_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk))
#define sk_OSSL_CMP_PKISI_dup(sk) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk)))
#define sk_OSSL_CMP_PKISI_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_PKISI) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_PKISI_freefunc_type(freefunc)))
#define sk_OSSL_CMP_PKISI_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_PKISI_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp)))

typedef struct ossl_cmp_certrepmessage_st OSSL_CMP_CERTREPMESSAGE;
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_CERTREPMESSAGE, OSSL_CMP_CERTREPMESSAGE, OSSL_CMP_CERTREPMESSAGE)
#define sk_OSSL_CMP_CERTREPMESSAGE_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_value(sk, idx) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (idx)))
#define sk_OSSL_CMP_CERTREPMESSAGE_new(cmp) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp)))
#define sk_OSSL_CMP_CERTREPMESSAGE_new_null() ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_CERTREPMESSAGE_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_CERTREPMESSAGE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (n))
#define sk_OSSL_CMP_CERTREPMESSAGE_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_delete(sk, i) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (i)))
#define sk_OSSL_CMP_CERTREPMESSAGE_delete_ptr(sk, ptr) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr)))
#define sk_OSSL_CMP_CERTREPMESSAGE_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_pop(sk) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define sk_OSSL_CMP_CERTREPMESSAGE_shift(sk) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define sk_OSSL_CMP_CERTREPMESSAGE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk),ossl_check_OSSL_CMP_CERTREPMESSAGE_freefunc_type(freefunc))
#define sk_OSSL_CMP_CERTREPMESSAGE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr), (idx))
#define sk_OSSL_CMP_CERTREPMESSAGE_set(sk, idx, ptr) ((OSSL_CMP_CERTREPMESSAGE *)OPENSSL_sk_set(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (idx), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr)))
#define sk_OSSL_CMP_CERTREPMESSAGE_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define sk_OSSL_CMP_CERTREPMESSAGE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr), pnum)
#define sk_OSSL_CMP_CERTREPMESSAGE_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define sk_OSSL_CMP_CERTREPMESSAGE_dup(sk) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define sk_OSSL_CMP_CERTREPMESSAGE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_CERTREPMESSAGE) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_CERTREPMESSAGE_freefunc_type(freefunc)))
#define sk_OSSL_CMP_CERTREPMESSAGE_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_CERTREPMESSAGE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp)))

typedef struct ossl_cmp_pollrep_st OSSL_CMP_POLLREP;
typedef STACK_OF(OSSL_CMP_POLLREP) OSSL_CMP_POLLREPCONTENT;
typedef struct ossl_cmp_certresponse_st OSSL_CMP_CERTRESPONSE;
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CMP_CERTRESPONSE, OSSL_CMP_CERTRESPONSE, OSSL_CMP_CERTRESPONSE)
#define sk_OSSL_CMP_CERTRESPONSE_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_value(sk, idx) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_value(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk), (idx)))
#define sk_OSSL_CMP_CERTRESPONSE_new(cmp) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_new(ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp)))
#define sk_OSSL_CMP_CERTRESPONSE_new_null() ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_new_null())
#define sk_OSSL_CMP_CERTRESPONSE_new_reserve(cmp, n) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp), (n)))
#define sk_OSSL_CMP_CERTRESPONSE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (n))
#define sk_OSSL_CMP_CERTRESPONSE_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_delete(sk, i) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_delete(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (i)))
#define sk_OSSL_CMP_CERTRESPONSE_delete_ptr(sk, ptr) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr)))
#define sk_OSSL_CMP_CERTRESPONSE_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_pop(sk) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_pop(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define sk_OSSL_CMP_CERTRESPONSE_shift(sk) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_shift(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define sk_OSSL_CMP_CERTRESPONSE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk),ossl_check_OSSL_CMP_CERTRESPONSE_freefunc_type(freefunc))
#define sk_OSSL_CMP_CERTRESPONSE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr), (idx))
#define sk_OSSL_CMP_CERTRESPONSE_set(sk, idx, ptr) ((OSSL_CMP_CERTRESPONSE *)OPENSSL_sk_set(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (idx), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr)))
#define sk_OSSL_CMP_CERTRESPONSE_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define sk_OSSL_CMP_CERTRESPONSE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr), pnum)
#define sk_OSSL_CMP_CERTRESPONSE_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define sk_OSSL_CMP_CERTRESPONSE_dup(sk) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define sk_OSSL_CMP_CERTRESPONSE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CMP_CERTRESPONSE) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_copyfunc_type(copyfunc), ossl_check_OSSL_CMP_CERTRESPONSE_freefunc_type(freefunc)))
#define sk_OSSL_CMP_CERTRESPONSE_set_cmp_func(sk, cmp) ((sk_OSSL_CMP_CERTRESPONSE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp)))

typedef STACK_OF(ASN1_UTF8STRING) OSSL_CMP_PKIFREETEXT;

/*
 * function DECLARATIONS
 */

/* from cmp_asn.c */
OSSL_CMP_ITAV *OSSL_CMP_ITAV_create(ASN1_OBJECT *type, ASN1_TYPE *value);
void OSSL_CMP_ITAV_set0(OSSL_CMP_ITAV *itav, ASN1_OBJECT *type,
                        ASN1_TYPE *value);
ASN1_OBJECT *OSSL_CMP_ITAV_get0_type(const OSSL_CMP_ITAV *itav);
ASN1_TYPE *OSSL_CMP_ITAV_get0_value(const OSSL_CMP_ITAV *itav);
int OSSL_CMP_ITAV_push0_stack_item(STACK_OF(OSSL_CMP_ITAV) **itav_sk_p,
                                   OSSL_CMP_ITAV *itav);
void OSSL_CMP_ITAV_free(OSSL_CMP_ITAV *itav);
void OSSL_CMP_MSG_free(OSSL_CMP_MSG *msg);

/* from cmp_ctx.c */
OSSL_CMP_CTX *OSSL_CMP_CTX_new(OSSL_LIB_CTX *libctx, const char *propq);
void OSSL_CMP_CTX_free(OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_reinit(OSSL_CMP_CTX *ctx);
/* CMP general options: */
#  define OSSL_CMP_OPT_LOG_VERBOSITY 0
/* CMP transfer options: */
#  define OSSL_CMP_OPT_KEEP_ALIVE 10
#  define OSSL_CMP_OPT_MSG_TIMEOUT 11
#  define OSSL_CMP_OPT_TOTAL_TIMEOUT 12
/* CMP request options: */
#  define OSSL_CMP_OPT_VALIDITY_DAYS 20
#  define OSSL_CMP_OPT_SUBJECTALTNAME_NODEFAULT 21
#  define OSSL_CMP_OPT_SUBJECTALTNAME_CRITICAL 22
#  define OSSL_CMP_OPT_POLICIES_CRITICAL 23
#  define OSSL_CMP_OPT_POPO_METHOD 24
#  define OSSL_CMP_OPT_IMPLICIT_CONFIRM 25
#  define OSSL_CMP_OPT_DISABLE_CONFIRM 26
#  define OSSL_CMP_OPT_REVOCATION_REASON 27
/* CMP protection options: */
#  define OSSL_CMP_OPT_UNPROTECTED_SEND 30
#  define OSSL_CMP_OPT_UNPROTECTED_ERRORS 31
#  define OSSL_CMP_OPT_OWF_ALGNID 32
#  define OSSL_CMP_OPT_MAC_ALGNID 33
#  define OSSL_CMP_OPT_DIGEST_ALGNID 34
#  define OSSL_CMP_OPT_IGNORE_KEYUSAGE 35
#  define OSSL_CMP_OPT_PERMIT_TA_IN_EXTRACERTS_FOR_IR 36
int OSSL_CMP_CTX_set_option(OSSL_CMP_CTX *ctx, int opt, int val);
int OSSL_CMP_CTX_get_option(const OSSL_CMP_CTX *ctx, int opt);
/* CMP-specific callback for logging and outputting the error queue: */
int OSSL_CMP_CTX_set_log_cb(OSSL_CMP_CTX *ctx, OSSL_CMP_log_cb_t cb);
#  define OSSL_CMP_CTX_set_log_verbosity(ctx, level) \
    OSSL_CMP_CTX_set_option(ctx, OSSL_CMP_OPT_LOG_VERBOSITY, level)
void OSSL_CMP_CTX_print_errors(const OSSL_CMP_CTX *ctx);
/* message transfer: */
int OSSL_CMP_CTX_set1_serverPath(OSSL_CMP_CTX *ctx, const char *path);
int OSSL_CMP_CTX_set1_server(OSSL_CMP_CTX *ctx, const char *address);
int OSSL_CMP_CTX_set_serverPort(OSSL_CMP_CTX *ctx, int port);
int OSSL_CMP_CTX_set1_proxy(OSSL_CMP_CTX *ctx, const char *name);
int OSSL_CMP_CTX_set1_no_proxy(OSSL_CMP_CTX *ctx, const char *names);
int OSSL_CMP_CTX_set_http_cb(OSSL_CMP_CTX *ctx, OSSL_HTTP_bio_cb_t cb);
int OSSL_CMP_CTX_set_http_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
void *OSSL_CMP_CTX_get_http_cb_arg(const OSSL_CMP_CTX *ctx);
typedef OSSL_CMP_MSG *(*OSSL_CMP_transfer_cb_t) (OSSL_CMP_CTX *ctx,
                                                 const OSSL_CMP_MSG *req);
int OSSL_CMP_CTX_set_transfer_cb(OSSL_CMP_CTX *ctx, OSSL_CMP_transfer_cb_t cb);
int OSSL_CMP_CTX_set_transfer_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
void *OSSL_CMP_CTX_get_transfer_cb_arg(const OSSL_CMP_CTX *ctx);
/* server authentication: */
int OSSL_CMP_CTX_set1_srvCert(OSSL_CMP_CTX *ctx, X509 *cert);
int OSSL_CMP_CTX_set1_expected_sender(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_set0_trustedStore(OSSL_CMP_CTX *ctx, X509_STORE *store);
X509_STORE *OSSL_CMP_CTX_get0_trustedStore(const OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_set1_untrusted(OSSL_CMP_CTX *ctx, STACK_OF(X509) *certs);
STACK_OF(X509) *OSSL_CMP_CTX_get0_untrusted(const OSSL_CMP_CTX *ctx);
/* client authentication: */
int OSSL_CMP_CTX_set1_cert(OSSL_CMP_CTX *ctx, X509 *cert);
int OSSL_CMP_CTX_build_cert_chain(OSSL_CMP_CTX *ctx, X509_STORE *own_trusted,
                                  STACK_OF(X509) *candidates);
int OSSL_CMP_CTX_set1_pkey(OSSL_CMP_CTX *ctx, EVP_PKEY *pkey);
int OSSL_CMP_CTX_set1_referenceValue(OSSL_CMP_CTX *ctx,
                                     const unsigned char *ref, int len);
int OSSL_CMP_CTX_set1_secretValue(OSSL_CMP_CTX *ctx,
                                  const unsigned char *sec, int len);
/* CMP message header and extra certificates: */
int OSSL_CMP_CTX_set1_recipient(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_push0_geninfo_ITAV(OSSL_CMP_CTX *ctx, OSSL_CMP_ITAV *itav);
int OSSL_CMP_CTX_reset_geninfo_ITAVs(OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_set1_extraCertsOut(OSSL_CMP_CTX *ctx,
                                    STACK_OF(X509) *extraCertsOut);
/* certificate template: */
int OSSL_CMP_CTX_set0_newPkey(OSSL_CMP_CTX *ctx, int priv, EVP_PKEY *pkey);
EVP_PKEY *OSSL_CMP_CTX_get0_newPkey(const OSSL_CMP_CTX *ctx, int priv);
int OSSL_CMP_CTX_set1_issuer(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_set1_subjectName(OSSL_CMP_CTX *ctx, const X509_NAME *name);
int OSSL_CMP_CTX_push1_subjectAltName(OSSL_CMP_CTX *ctx,
                                      const GENERAL_NAME *name);
int OSSL_CMP_CTX_set0_reqExtensions(OSSL_CMP_CTX *ctx, X509_EXTENSIONS *exts);
int OSSL_CMP_CTX_reqExtensions_have_SAN(OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_push0_policy(OSSL_CMP_CTX *ctx, POLICYINFO *pinfo);
int OSSL_CMP_CTX_set1_oldCert(OSSL_CMP_CTX *ctx, X509 *cert);
int OSSL_CMP_CTX_set1_p10CSR(OSSL_CMP_CTX *ctx, const X509_REQ *csr);
/* misc body contents: */
int OSSL_CMP_CTX_push0_genm_ITAV(OSSL_CMP_CTX *ctx, OSSL_CMP_ITAV *itav);
/* certificate confirmation: */
typedef int (*OSSL_CMP_certConf_cb_t) (OSSL_CMP_CTX *ctx, X509 *cert,
                                       int fail_info, const char **txt);
int OSSL_CMP_certConf_cb(OSSL_CMP_CTX *ctx, X509 *cert, int fail_info,
                         const char **text);
int OSSL_CMP_CTX_set_certConf_cb(OSSL_CMP_CTX *ctx, OSSL_CMP_certConf_cb_t cb);
int OSSL_CMP_CTX_set_certConf_cb_arg(OSSL_CMP_CTX *ctx, void *arg);
void *OSSL_CMP_CTX_get_certConf_cb_arg(const OSSL_CMP_CTX *ctx);
/* result fetching: */
int OSSL_CMP_CTX_get_status(const OSSL_CMP_CTX *ctx);
OSSL_CMP_PKIFREETEXT *OSSL_CMP_CTX_get0_statusString(const OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_get_failInfoCode(const OSSL_CMP_CTX *ctx);
#  define OSSL_CMP_PKISI_BUFLEN 1024
X509 *OSSL_CMP_CTX_get0_newCert(const OSSL_CMP_CTX *ctx);
STACK_OF(X509) *OSSL_CMP_CTX_get1_newChain(const OSSL_CMP_CTX *ctx);
STACK_OF(X509) *OSSL_CMP_CTX_get1_caPubs(const OSSL_CMP_CTX *ctx);
STACK_OF(X509) *OSSL_CMP_CTX_get1_extraCertsIn(const OSSL_CMP_CTX *ctx);
int OSSL_CMP_CTX_set1_transactionID(OSSL_CMP_CTX *ctx,
                                    const ASN1_OCTET_STRING *id);
int OSSL_CMP_CTX_set1_senderNonce(OSSL_CMP_CTX *ctx,
                                  const ASN1_OCTET_STRING *nonce);

/* from cmp_status.c */
char *OSSL_CMP_CTX_snprint_PKIStatus(const OSSL_CMP_CTX *ctx, char *buf,
                                     size_t bufsize);
char *OSSL_CMP_snprint_PKIStatusInfo(const OSSL_CMP_PKISI *statusInfo,
                                     char *buf, size_t bufsize);
OSSL_CMP_PKISI *
OSSL_CMP_STATUSINFO_new(int status, int fail_info, const char *text);

/* from cmp_hdr.c */
ASN1_OCTET_STRING *OSSL_CMP_HDR_get0_transactionID(const
                                                   OSSL_CMP_PKIHEADER *hdr);
ASN1_OCTET_STRING *OSSL_CMP_HDR_get0_recipNonce(const OSSL_CMP_PKIHEADER *hdr);

/* from cmp_msg.c */
OSSL_CMP_PKIHEADER *OSSL_CMP_MSG_get0_header(const OSSL_CMP_MSG *msg);
int OSSL_CMP_MSG_get_bodytype(const OSSL_CMP_MSG *msg);
int OSSL_CMP_MSG_update_transactionID(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
int OSSL_CMP_MSG_update_recipNonce(OSSL_CMP_CTX *ctx, OSSL_CMP_MSG *msg);
OSSL_CRMF_MSG *OSSL_CMP_CTX_setup_CRM(OSSL_CMP_CTX *ctx, int for_KUR, int rid);
OSSL_CMP_MSG *OSSL_CMP_MSG_read(const char *file, OSSL_LIB_CTX *libctx,
                                const char *propq);
int OSSL_CMP_MSG_write(const char *file, const OSSL_CMP_MSG *msg);
OSSL_CMP_MSG *d2i_OSSL_CMP_MSG_bio(BIO *bio, OSSL_CMP_MSG **msg);
int i2d_OSSL_CMP_MSG_bio(BIO *bio, const OSSL_CMP_MSG *msg);

/* from cmp_vfy.c */
int OSSL_CMP_validate_msg(OSSL_CMP_CTX *ctx, const OSSL_CMP_MSG *msg);
int OSSL_CMP_validate_cert_path(const OSSL_CMP_CTX *ctx,
                                X509_STORE *trusted_store, X509 *cert);

/* from cmp_http.c */
OSSL_CMP_MSG *OSSL_CMP_MSG_http_perform(OSSL_CMP_CTX *ctx,
                                        const OSSL_CMP_MSG *req);

/* from cmp_server.c */
typedef struct ossl_cmp_srv_ctx_st OSSL_CMP_SRV_CTX;
OSSL_CMP_MSG *OSSL_CMP_SRV_process_request(OSSL_CMP_SRV_CTX *srv_ctx,
                                           const OSSL_CMP_MSG *req);
OSSL_CMP_MSG * OSSL_CMP_CTX_server_perform(OSSL_CMP_CTX *client_ctx,
                                           const OSSL_CMP_MSG *req);
OSSL_CMP_SRV_CTX *OSSL_CMP_SRV_CTX_new(OSSL_LIB_CTX *libctx, const char *propq);
void OSSL_CMP_SRV_CTX_free(OSSL_CMP_SRV_CTX *srv_ctx);
typedef OSSL_CMP_PKISI *(*OSSL_CMP_SRV_cert_request_cb_t)
    (OSSL_CMP_SRV_CTX *srv_ctx, const OSSL_CMP_MSG *req, int certReqId,
     const OSSL_CRMF_MSG *crm, const X509_REQ *p10cr,
     X509 **certOut, STACK_OF(X509) **chainOut, STACK_OF(X509) **caPubs);
typedef OSSL_CMP_PKISI *(*OSSL_CMP_SRV_rr_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                                const OSSL_CMP_MSG *req,
                                                const X509_NAME *issuer,
                                                const ASN1_INTEGER *serial);
typedef int (*OSSL_CMP_SRV_genm_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                      const OSSL_CMP_MSG *req,
                                      const STACK_OF(OSSL_CMP_ITAV) *in,
                                      STACK_OF(OSSL_CMP_ITAV) **out);
typedef void (*OSSL_CMP_SRV_error_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                        const OSSL_CMP_MSG *req,
                                        const OSSL_CMP_PKISI *statusInfo,
                                        const ASN1_INTEGER *errorCode,
                                        const OSSL_CMP_PKIFREETEXT *errDetails);
typedef int (*OSSL_CMP_SRV_certConf_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                          const OSSL_CMP_MSG *req,
                                          int certReqId,
                                          const ASN1_OCTET_STRING *certHash,
                                          const OSSL_CMP_PKISI *si);
typedef int (*OSSL_CMP_SRV_pollReq_cb_t)(OSSL_CMP_SRV_CTX *srv_ctx,
                                         const OSSL_CMP_MSG *req, int certReqId,
                                         OSSL_CMP_MSG **certReq,
                                         int64_t *check_after);
int OSSL_CMP_SRV_CTX_init(OSSL_CMP_SRV_CTX *srv_ctx, void *custom_ctx,
                          OSSL_CMP_SRV_cert_request_cb_t process_cert_request,
                          OSSL_CMP_SRV_rr_cb_t process_rr,
                          OSSL_CMP_SRV_genm_cb_t process_genm,
                          OSSL_CMP_SRV_error_cb_t process_error,
                          OSSL_CMP_SRV_certConf_cb_t process_certConf,
                          OSSL_CMP_SRV_pollReq_cb_t process_pollReq);
OSSL_CMP_CTX *OSSL_CMP_SRV_CTX_get0_cmp_ctx(const OSSL_CMP_SRV_CTX *srv_ctx);
void *OSSL_CMP_SRV_CTX_get0_custom_ctx(const OSSL_CMP_SRV_CTX *srv_ctx);
int OSSL_CMP_SRV_CTX_set_send_unprotected_errors(OSSL_CMP_SRV_CTX *srv_ctx,
                                                 int val);
int OSSL_CMP_SRV_CTX_set_accept_unprotected(OSSL_CMP_SRV_CTX *srv_ctx, int val);
int OSSL_CMP_SRV_CTX_set_accept_raverified(OSSL_CMP_SRV_CTX *srv_ctx, int val);
int OSSL_CMP_SRV_CTX_set_grant_implicit_confirm(OSSL_CMP_SRV_CTX *srv_ctx,
                                                int val);

/* from cmp_client.c */
X509 *OSSL_CMP_exec_certreq(OSSL_CMP_CTX *ctx, int req_type,
                            const OSSL_CRMF_MSG *crm);
#  define OSSL_CMP_IR    0
#  define OSSL_CMP_CR    2
#  define OSSL_CMP_P10CR 4
#  define OSSL_CMP_KUR   7
#  define OSSL_CMP_exec_IR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_IR, NULL)
#  define OSSL_CMP_exec_CR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_CR, NULL)
#  define OSSL_CMP_exec_P10CR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_P10CR, NULL)
#  define OSSL_CMP_exec_KUR_ses(ctx) \
    OSSL_CMP_exec_certreq(ctx, OSSL_CMP_KUR, NULL)
int OSSL_CMP_try_certreq(OSSL_CMP_CTX *ctx, int req_type,
                         const OSSL_CRMF_MSG *crm, int *checkAfter);
int OSSL_CMP_exec_RR_ses(OSSL_CMP_CTX *ctx);
STACK_OF(OSSL_CMP_ITAV) *OSSL_CMP_exec_GENM_ses(OSSL_CMP_CTX *ctx);

#  ifdef  __cplusplus
}
#  endif
# endif /* !defined(OPENSSL_NO_CMP) */
#endif /* !defined(OPENSSL_CMP_H) */
                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/cms.h                       0000664 0000000 0000000 00000102441 14746647661 0026433 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/cms.h.in
 *
 * Copyright 2008-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_CMS_H
# define OPENSSL_CMS_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_CMS_H
# endif

# include <openssl/opensslconf.h>

# ifndef OPENSSL_NO_CMS
# include <openssl/x509.h>
# include <openssl/x509v3.h>
# include <openssl/cmserr.h>
# ifdef __cplusplus
extern "C" {
# endif

typedef struct CMS_ContentInfo_st CMS_ContentInfo;
typedef struct CMS_SignerInfo_st CMS_SignerInfo;
typedef struct CMS_CertificateChoices CMS_CertificateChoices;
typedef struct CMS_RevocationInfoChoice_st CMS_RevocationInfoChoice;
typedef struct CMS_RecipientInfo_st CMS_RecipientInfo;
typedef struct CMS_ReceiptRequest_st CMS_ReceiptRequest;
typedef struct CMS_Receipt_st CMS_Receipt;
typedef struct CMS_RecipientEncryptedKey_st CMS_RecipientEncryptedKey;
typedef struct CMS_OtherKeyAttribute_st CMS_OtherKeyAttribute;

SKM_DEFINE_STACK_OF_INTERNAL(CMS_SignerInfo, CMS_SignerInfo, CMS_SignerInfo)
#define sk_CMS_SignerInfo_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_value(sk, idx) ((CMS_SignerInfo *)OPENSSL_sk_value(ossl_check_const_CMS_SignerInfo_sk_type(sk), (idx)))
#define sk_CMS_SignerInfo_new(cmp) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_new(ossl_check_CMS_SignerInfo_compfunc_type(cmp)))
#define sk_CMS_SignerInfo_new_null() ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_new_null())
#define sk_CMS_SignerInfo_new_reserve(cmp, n) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_new_reserve(ossl_check_CMS_SignerInfo_compfunc_type(cmp), (n)))
#define sk_CMS_SignerInfo_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_SignerInfo_sk_type(sk), (n))
#define sk_CMS_SignerInfo_free(sk) OPENSSL_sk_free(ossl_check_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_delete(sk, i) ((CMS_SignerInfo *)OPENSSL_sk_delete(ossl_check_CMS_SignerInfo_sk_type(sk), (i)))
#define sk_CMS_SignerInfo_delete_ptr(sk, ptr) ((CMS_SignerInfo *)OPENSSL_sk_delete_ptr(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr)))
#define sk_CMS_SignerInfo_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_pop(sk) ((CMS_SignerInfo *)OPENSSL_sk_pop(ossl_check_CMS_SignerInfo_sk_type(sk)))
#define sk_CMS_SignerInfo_shift(sk) ((CMS_SignerInfo *)OPENSSL_sk_shift(ossl_check_CMS_SignerInfo_sk_type(sk)))
#define sk_CMS_SignerInfo_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_SignerInfo_sk_type(sk),ossl_check_CMS_SignerInfo_freefunc_type(freefunc))
#define sk_CMS_SignerInfo_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr), (idx))
#define sk_CMS_SignerInfo_set(sk, idx, ptr) ((CMS_SignerInfo *)OPENSSL_sk_set(ossl_check_CMS_SignerInfo_sk_type(sk), (idx), ossl_check_CMS_SignerInfo_type(ptr)))
#define sk_CMS_SignerInfo_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr))
#define sk_CMS_SignerInfo_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_type(ptr), pnum)
#define sk_CMS_SignerInfo_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_SignerInfo_sk_type(sk))
#define sk_CMS_SignerInfo_dup(sk) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_dup(ossl_check_const_CMS_SignerInfo_sk_type(sk)))
#define sk_CMS_SignerInfo_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_SignerInfo) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_copyfunc_type(copyfunc), ossl_check_CMS_SignerInfo_freefunc_type(freefunc)))
#define sk_CMS_SignerInfo_set_cmp_func(sk, cmp) ((sk_CMS_SignerInfo_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_SignerInfo_sk_type(sk), ossl_check_CMS_SignerInfo_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(CMS_RecipientEncryptedKey, CMS_RecipientEncryptedKey, CMS_RecipientEncryptedKey)
#define sk_CMS_RecipientEncryptedKey_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_value(sk, idx) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_value(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk), (idx)))
#define sk_CMS_RecipientEncryptedKey_new(cmp) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_new(ossl_check_CMS_RecipientEncryptedKey_compfunc_type(cmp)))
#define sk_CMS_RecipientEncryptedKey_new_null() ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_new_null())
#define sk_CMS_RecipientEncryptedKey_new_reserve(cmp, n) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_new_reserve(ossl_check_CMS_RecipientEncryptedKey_compfunc_type(cmp), (n)))
#define sk_CMS_RecipientEncryptedKey_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), (n))
#define sk_CMS_RecipientEncryptedKey_free(sk) OPENSSL_sk_free(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_delete(sk, i) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_delete(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), (i)))
#define sk_CMS_RecipientEncryptedKey_delete_ptr(sk, ptr) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_delete_ptr(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr)))
#define sk_CMS_RecipientEncryptedKey_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_pop(sk) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_pop(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk)))
#define sk_CMS_RecipientEncryptedKey_shift(sk) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_shift(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk)))
#define sk_CMS_RecipientEncryptedKey_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk),ossl_check_CMS_RecipientEncryptedKey_freefunc_type(freefunc))
#define sk_CMS_RecipientEncryptedKey_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr), (idx))
#define sk_CMS_RecipientEncryptedKey_set(sk, idx, ptr) ((CMS_RecipientEncryptedKey *)OPENSSL_sk_set(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), (idx), ossl_check_CMS_RecipientEncryptedKey_type(ptr)))
#define sk_CMS_RecipientEncryptedKey_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr))
#define sk_CMS_RecipientEncryptedKey_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_type(ptr), pnum)
#define sk_CMS_RecipientEncryptedKey_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk))
#define sk_CMS_RecipientEncryptedKey_dup(sk) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_dup(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk)))
#define sk_CMS_RecipientEncryptedKey_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_RecipientEncryptedKey) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_copyfunc_type(copyfunc), ossl_check_CMS_RecipientEncryptedKey_freefunc_type(freefunc)))
#define sk_CMS_RecipientEncryptedKey_set_cmp_func(sk, cmp) ((sk_CMS_RecipientEncryptedKey_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_RecipientEncryptedKey_sk_type(sk), ossl_check_CMS_RecipientEncryptedKey_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(CMS_RecipientInfo, CMS_RecipientInfo, CMS_RecipientInfo)
#define sk_CMS_RecipientInfo_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_value(sk, idx) ((CMS_RecipientInfo *)OPENSSL_sk_value(ossl_check_const_CMS_RecipientInfo_sk_type(sk), (idx)))
#define sk_CMS_RecipientInfo_new(cmp) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_new(ossl_check_CMS_RecipientInfo_compfunc_type(cmp)))
#define sk_CMS_RecipientInfo_new_null() ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_new_null())
#define sk_CMS_RecipientInfo_new_reserve(cmp, n) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_new_reserve(ossl_check_CMS_RecipientInfo_compfunc_type(cmp), (n)))
#define sk_CMS_RecipientInfo_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_RecipientInfo_sk_type(sk), (n))
#define sk_CMS_RecipientInfo_free(sk) OPENSSL_sk_free(ossl_check_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_delete(sk, i) ((CMS_RecipientInfo *)OPENSSL_sk_delete(ossl_check_CMS_RecipientInfo_sk_type(sk), (i)))
#define sk_CMS_RecipientInfo_delete_ptr(sk, ptr) ((CMS_RecipientInfo *)OPENSSL_sk_delete_ptr(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr)))
#define sk_CMS_RecipientInfo_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_pop(sk) ((CMS_RecipientInfo *)OPENSSL_sk_pop(ossl_check_CMS_RecipientInfo_sk_type(sk)))
#define sk_CMS_RecipientInfo_shift(sk) ((CMS_RecipientInfo *)OPENSSL_sk_shift(ossl_check_CMS_RecipientInfo_sk_type(sk)))
#define sk_CMS_RecipientInfo_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_RecipientInfo_sk_type(sk),ossl_check_CMS_RecipientInfo_freefunc_type(freefunc))
#define sk_CMS_RecipientInfo_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr), (idx))
#define sk_CMS_RecipientInfo_set(sk, idx, ptr) ((CMS_RecipientInfo *)OPENSSL_sk_set(ossl_check_CMS_RecipientInfo_sk_type(sk), (idx), ossl_check_CMS_RecipientInfo_type(ptr)))
#define sk_CMS_RecipientInfo_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr))
#define sk_CMS_RecipientInfo_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_type(ptr), pnum)
#define sk_CMS_RecipientInfo_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_RecipientInfo_sk_type(sk))
#define sk_CMS_RecipientInfo_dup(sk) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_dup(ossl_check_const_CMS_RecipientInfo_sk_type(sk)))
#define sk_CMS_RecipientInfo_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_RecipientInfo) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_copyfunc_type(copyfunc), ossl_check_CMS_RecipientInfo_freefunc_type(freefunc)))
#define sk_CMS_RecipientInfo_set_cmp_func(sk, cmp) ((sk_CMS_RecipientInfo_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_RecipientInfo_sk_type(sk), ossl_check_CMS_RecipientInfo_compfunc_type(cmp)))
SKM_DEFINE_STACK_OF_INTERNAL(CMS_RevocationInfoChoice, CMS_RevocationInfoChoice, CMS_RevocationInfoChoice)
#define sk_CMS_RevocationInfoChoice_num(sk) OPENSSL_sk_num(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_value(sk, idx) ((CMS_RevocationInfoChoice *)OPENSSL_sk_value(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk), (idx)))
#define sk_CMS_RevocationInfoChoice_new(cmp) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_new(ossl_check_CMS_RevocationInfoChoice_compfunc_type(cmp)))
#define sk_CMS_RevocationInfoChoice_new_null() ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_new_null())
#define sk_CMS_RevocationInfoChoice_new_reserve(cmp, n) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_new_reserve(ossl_check_CMS_RevocationInfoChoice_compfunc_type(cmp), (n)))
#define sk_CMS_RevocationInfoChoice_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), (n))
#define sk_CMS_RevocationInfoChoice_free(sk) OPENSSL_sk_free(ossl_check_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_zero(sk) OPENSSL_sk_zero(ossl_check_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_delete(sk, i) ((CMS_RevocationInfoChoice *)OPENSSL_sk_delete(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), (i)))
#define sk_CMS_RevocationInfoChoice_delete_ptr(sk, ptr) ((CMS_RevocationInfoChoice *)OPENSSL_sk_delete_ptr(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr)))
#define sk_CMS_RevocationInfoChoice_push(sk, ptr) OPENSSL_sk_push(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_pop(sk) ((CMS_RevocationInfoChoice *)OPENSSL_sk_pop(ossl_check_CMS_RevocationInfoChoice_sk_type(sk)))
#define sk_CMS_RevocationInfoChoice_shift(sk) ((CMS_RevocationInfoChoice *)OPENSSL_sk_shift(ossl_check_CMS_RevocationInfoChoice_sk_type(sk)))
#define sk_CMS_RevocationInfoChoice_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CMS_RevocationInfoChoice_sk_type(sk),ossl_check_CMS_RevocationInfoChoice_freefunc_type(freefunc))
#define sk_CMS_RevocationInfoChoice_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr), (idx))
#define sk_CMS_RevocationInfoChoice_set(sk, idx, ptr) ((CMS_RevocationInfoChoice *)OPENSSL_sk_set(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), (idx), ossl_check_CMS_RevocationInfoChoice_type(ptr)))
#define sk_CMS_RevocationInfoChoice_find(sk, ptr) OPENSSL_sk_find(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr))
#define sk_CMS_RevocationInfoChoice_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_type(ptr), pnum)
#define sk_CMS_RevocationInfoChoice_sort(sk) OPENSSL_sk_sort(ossl_check_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk))
#define sk_CMS_RevocationInfoChoice_dup(sk) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_dup(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk)))
#define sk_CMS_RevocationInfoChoice_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CMS_RevocationInfoChoice) *)OPENSSL_sk_deep_copy(ossl_check_const_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_copyfunc_type(copyfunc), ossl_check_CMS_RevocationInfoChoice_freefunc_type(freefunc)))
#define sk_CMS_RevocationInfoChoice_set_cmp_func(sk, cmp) ((sk_CMS_RevocationInfoChoice_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CMS_RevocationInfoChoice_sk_type(sk), ossl_check_CMS_RevocationInfoChoice_compfunc_type(cmp)))


DECLARE_ASN1_FUNCTIONS(CMS_ContentInfo)
DECLARE_ASN1_FUNCTIONS(CMS_ReceiptRequest)
DECLARE_ASN1_PRINT_FUNCTION(CMS_ContentInfo)

CMS_ContentInfo *CMS_ContentInfo_new_ex(OSSL_LIB_CTX *libctx, const char *propq);

# define CMS_SIGNERINFO_ISSUER_SERIAL    0
# define CMS_SIGNERINFO_KEYIDENTIFIER    1

# define CMS_RECIPINFO_NONE              -1
# define CMS_RECIPINFO_TRANS             0
# define CMS_RECIPINFO_AGREE             1
# define CMS_RECIPINFO_KEK               2
# define CMS_RECIPINFO_PASS              3
# define CMS_RECIPINFO_OTHER             4

/* S/MIME related flags */

# define CMS_TEXT                        0x1
# define CMS_NOCERTS                     0x2
# define CMS_NO_CONTENT_VERIFY           0x4
# define CMS_NO_ATTR_VERIFY              0x8
# define CMS_NOSIGS                      \
                        (CMS_NO_CONTENT_VERIFY|CMS_NO_ATTR_VERIFY)
# define CMS_NOINTERN                    0x10
# define CMS_NO_SIGNER_CERT_VERIFY       0x20
# define CMS_NOVERIFY                    0x20
# define CMS_DETACHED                    0x40
# define CMS_BINARY                      0x80
# define CMS_NOATTR                      0x100
# define CMS_NOSMIMECAP                  0x200
# define CMS_NOOLDMIMETYPE               0x400
# define CMS_CRLFEOL                     0x800
# define CMS_STREAM                      0x1000
# define CMS_NOCRL                       0x2000
# define CMS_PARTIAL                     0x4000
# define CMS_REUSE_DIGEST                0x8000
# define CMS_USE_KEYID                   0x10000
# define CMS_DEBUG_DECRYPT               0x20000
# define CMS_KEY_PARAM                   0x40000
# define CMS_ASCIICRLF                   0x80000
# define CMS_CADES                       0x100000
# define CMS_USE_ORIGINATOR_KEYID        0x200000

const ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms);

BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont);
int CMS_dataFinal(CMS_ContentInfo *cms, BIO *bio);

ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms);
int CMS_is_detached(CMS_ContentInfo *cms);
int CMS_set_detached(CMS_ContentInfo *cms, int detached);

# ifdef OPENSSL_PEM_H
DECLARE_PEM_rw(CMS, CMS_ContentInfo)
# endif
int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms);
CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms);
int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms);

BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms);
int i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags);
int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
                             int flags);
CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont);
CMS_ContentInfo *SMIME_read_CMS_ex(BIO *bio, int flags, BIO **bcont, CMS_ContentInfo **ci);
int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags);

int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,
              unsigned int flags);

CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
                          STACK_OF(X509) *certs, BIO *data,
                          unsigned int flags);
CMS_ContentInfo *CMS_sign_ex(X509 *signcert, EVP_PKEY *pkey,
                             STACK_OF(X509) *certs, BIO *data,
                             unsigned int flags, OSSL_LIB_CTX *ctx,
                             const char *propq);

CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
                                  X509 *signcert, EVP_PKEY *pkey,
                                  STACK_OF(X509) *certs, unsigned int flags);

int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags);
CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags);
CMS_ContentInfo *CMS_data_create_ex(BIO *in, unsigned int flags,
                                    OSSL_LIB_CTX *ctx, const char *propq);

int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                      unsigned int flags);
CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
                                   unsigned int flags);
CMS_ContentInfo *CMS_digest_create_ex(BIO *in, const EVP_MD *md,
                                      unsigned int flags, OSSL_LIB_CTX *ctx,
                                      const char *propq);

int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
                              const unsigned char *key, size_t keylen,
                              BIO *dcont, BIO *out, unsigned int flags);

CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
                                           const unsigned char *key,
                                           size_t keylen, unsigned int flags);
CMS_ContentInfo *CMS_EncryptedData_encrypt_ex(BIO *in, const EVP_CIPHER *cipher,
                                              const unsigned char *key,
                                              size_t keylen, unsigned int flags,
                                              OSSL_LIB_CTX *ctx,
                                              const char *propq);

int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
                               const unsigned char *key, size_t keylen);

int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
               X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags);

int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
                       STACK_OF(X509) *certs,
                       X509_STORE *store, unsigned int flags);

STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms);

CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in,
                             const EVP_CIPHER *cipher, unsigned int flags);
CMS_ContentInfo *CMS_encrypt_ex(STACK_OF(X509) *certs, BIO *in,
                                const EVP_CIPHER *cipher, unsigned int flags,
                                OSSL_LIB_CTX *ctx, const char *propq);

int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,
                BIO *dcont, BIO *out, unsigned int flags);

int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert);
int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo *cms, EVP_PKEY *pk,
                                   X509 *cert, X509 *peer);
int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
                         unsigned char *key, size_t keylen,
                         const unsigned char *id, size_t idlen);
int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
                              unsigned char *pass, ossl_ssize_t passlen);

STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms);
int CMS_RecipientInfo_type(CMS_RecipientInfo *ri);
EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);
CMS_ContentInfo *CMS_AuthEnvelopedData_create(const EVP_CIPHER *cipher);
CMS_ContentInfo *
CMS_AuthEnvelopedData_create_ex(const EVP_CIPHER *cipher, OSSL_LIB_CTX *ctx,
                                const char *propq);
CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher);
CMS_ContentInfo *CMS_EnvelopedData_create_ex(const EVP_CIPHER *cipher,
                                             OSSL_LIB_CTX *ctx,
                                             const char *propq);

CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
                                           X509 *recip, unsigned int flags);
CMS_RecipientInfo *CMS_add1_recipient(CMS_ContentInfo *cms, X509 *recip,
     EVP_PKEY *originatorPrivKey, X509 * originator, unsigned int flags);
int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);
int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);
int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
                                     EVP_PKEY **pk, X509 **recip,
                                     X509_ALGOR **palg);
int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
                                          ASN1_OCTET_STRING **keyid,
                                          X509_NAME **issuer,
                                          ASN1_INTEGER **sno);

CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
                                          unsigned char *key, size_t keylen,
                                          unsigned char *id, size_t idlen,
                                          ASN1_GENERALIZEDTIME *date,
                                          ASN1_OBJECT *otherTypeId,
                                          ASN1_TYPE *otherType);

int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
                                    X509_ALGOR **palg,
                                    ASN1_OCTET_STRING **pid,
                                    ASN1_GENERALIZEDTIME **pdate,
                                    ASN1_OBJECT **potherid,
                                    ASN1_TYPE **pothertype);

int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
                               unsigned char *key, size_t keylen);

int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
                                   const unsigned char *id, size_t idlen);

int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
                                    unsigned char *pass,
                                    ossl_ssize_t passlen);

CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,
                                               int iter, int wrap_nid,
                                               int pbe_nid,
                                               unsigned char *pass,
                                               ossl_ssize_t passlen,
                                               const EVP_CIPHER *kekciph);

int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
int CMS_RecipientInfo_encrypt(const CMS_ContentInfo *cms, CMS_RecipientInfo *ri);

int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                   unsigned int flags);
CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags);

int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid);
const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms);

CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms);
int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert);
int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert);
STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms);

CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms);
int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl);
int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);
STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms);

int CMS_SignedData_init(CMS_ContentInfo *cms);
CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
                                X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
                                unsigned int flags);
EVP_PKEY_CTX *CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si);
EVP_MD_CTX *CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si);
STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms);

void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer);
int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
                                  ASN1_OCTET_STRING **keyid,
                                  X509_NAME **issuer, ASN1_INTEGER **sno);
int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert);
int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                           unsigned int flags);
void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
                              X509 **signer, X509_ALGOR **pdig,
                              X509_ALGOR **psig);
ASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si);
int CMS_SignerInfo_sign(CMS_SignerInfo *si);
int CMS_SignerInfo_verify(CMS_SignerInfo *si);
int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain);

int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs);
int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
                            int algnid, int keysize);
int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap);

int CMS_signed_get_attr_count(const CMS_SignerInfo *si);
int CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                               int lastpos);
int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
                               int lastpos);
X509_ATTRIBUTE *CMS_signed_get_attr(const CMS_SignerInfo *si, int loc);
X509_ATTRIBUTE *CMS_signed_delete_attr(CMS_SignerInfo *si, int loc);
int CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                const ASN1_OBJECT *obj, int type,
                                const void *bytes, int len);
int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
                                int nid, int type,
                                const void *bytes, int len);
int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
                                const char *attrname, int type,
                                const void *bytes, int len);
void *CMS_signed_get0_data_by_OBJ(const CMS_SignerInfo *si,
                                  const ASN1_OBJECT *oid,
                                  int lastpos, int type);

int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si);
int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                 int lastpos);
int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
                                 const ASN1_OBJECT *obj, int lastpos);
X509_ATTRIBUTE *CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc);
X509_ATTRIBUTE *CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc);
int CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                  const ASN1_OBJECT *obj, int type,
                                  const void *bytes, int len);
int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
                                  int nid, int type,
                                  const void *bytes, int len);
int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
                                  const char *attrname, int type,
                                  const void *bytes, int len);
void *CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
                                    int lastpos, int type);

int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);
CMS_ReceiptRequest *CMS_ReceiptRequest_create0(
    unsigned char *id, int idlen, int allorfirst,
    STACK_OF(GENERAL_NAMES) *receiptList,
    STACK_OF(GENERAL_NAMES) *receiptsTo);
CMS_ReceiptRequest *CMS_ReceiptRequest_create0_ex(
    unsigned char *id, int idlen, int allorfirst,
    STACK_OF(GENERAL_NAMES) *receiptList,
    STACK_OF(GENERAL_NAMES) *receiptsTo,
    OSSL_LIB_CTX *ctx);

int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);
void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
                                    ASN1_STRING **pcid,
                                    int *pallorfirst,
                                    STACK_OF(GENERAL_NAMES) **plist,
                                    STACK_OF(GENERAL_NAMES) **prto);
int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
                                    X509_ALGOR **palg,
                                    ASN1_OCTET_STRING **pukm);
STACK_OF(CMS_RecipientEncryptedKey)
*CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri);

int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
                                        X509_ALGOR **pubalg,
                                        ASN1_BIT_STRING **pubkey,
                                        ASN1_OCTET_STRING **keyid,
                                        X509_NAME **issuer,
                                        ASN1_INTEGER **sno);

int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert);

int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
                                      ASN1_OCTET_STRING **keyid,
                                      ASN1_GENERALIZEDTIME **tm,
                                      CMS_OtherKeyAttribute **other,
                                      X509_NAME **issuer, ASN1_INTEGER **sno);
int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
                                       X509 *cert);
int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk);
int CMS_RecipientInfo_kari_set0_pkey_and_peer(CMS_RecipientInfo *ri, EVP_PKEY *pk, X509 *peer);
EVP_CIPHER_CTX *CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri);
int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
                                   CMS_RecipientInfo *ri,
                                   CMS_RecipientEncryptedKey *rek);

int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
                          ASN1_OCTET_STRING *ukm, int keylen);

/* Backward compatibility for spelling errors. */
# define CMS_R_UNKNOWN_DIGEST_ALGORITM CMS_R_UNKNOWN_DIGEST_ALGORITHM
# define CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE \
    CMS_R_UNSUPPORTED_RECIPIENTINFO_TYPE

#  ifdef  __cplusplus
}
#  endif
# endif
#endif
                                                                                                                                                                                                                               node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/conf.h                      0000664 0000000 0000000 00000024365 14746647661 0026606 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/conf.h.in
 *
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef  OPENSSL_CONF_H
# define OPENSSL_CONF_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_CONF_H
# endif

# include <openssl/bio.h>
# include <openssl/lhash.h>
# include <openssl/safestack.h>
# include <openssl/e_os2.h>
# include <openssl/types.h>
# include <openssl/conferr.h>

#ifdef  __cplusplus
extern "C" {
#endif

typedef struct {
    char *section;
    char *name;
    char *value;
} CONF_VALUE;

SKM_DEFINE_STACK_OF_INTERNAL(CONF_VALUE, CONF_VALUE, CONF_VALUE)
#define sk_CONF_VALUE_num(sk) OPENSSL_sk_num(ossl_check_const_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_value(sk, idx) ((CONF_VALUE *)OPENSSL_sk_value(ossl_check_const_CONF_VALUE_sk_type(sk), (idx)))
#define sk_CONF_VALUE_new(cmp) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_new(ossl_check_CONF_VALUE_compfunc_type(cmp)))
#define sk_CONF_VALUE_new_null() ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_new_null())
#define sk_CONF_VALUE_new_reserve(cmp, n) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_new_reserve(ossl_check_CONF_VALUE_compfunc_type(cmp), (n)))
#define sk_CONF_VALUE_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_CONF_VALUE_sk_type(sk), (n))
#define sk_CONF_VALUE_free(sk) OPENSSL_sk_free(ossl_check_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_zero(sk) OPENSSL_sk_zero(ossl_check_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_delete(sk, i) ((CONF_VALUE *)OPENSSL_sk_delete(ossl_check_CONF_VALUE_sk_type(sk), (i)))
#define sk_CONF_VALUE_delete_ptr(sk, ptr) ((CONF_VALUE *)OPENSSL_sk_delete_ptr(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr)))
#define sk_CONF_VALUE_push(sk, ptr) OPENSSL_sk_push(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_pop(sk) ((CONF_VALUE *)OPENSSL_sk_pop(ossl_check_CONF_VALUE_sk_type(sk)))
#define sk_CONF_VALUE_shift(sk) ((CONF_VALUE *)OPENSSL_sk_shift(ossl_check_CONF_VALUE_sk_type(sk)))
#define sk_CONF_VALUE_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_CONF_VALUE_sk_type(sk),ossl_check_CONF_VALUE_freefunc_type(freefunc))
#define sk_CONF_VALUE_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr), (idx))
#define sk_CONF_VALUE_set(sk, idx, ptr) ((CONF_VALUE *)OPENSSL_sk_set(ossl_check_CONF_VALUE_sk_type(sk), (idx), ossl_check_CONF_VALUE_type(ptr)))
#define sk_CONF_VALUE_find(sk, ptr) OPENSSL_sk_find(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr))
#define sk_CONF_VALUE_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_type(ptr), pnum)
#define sk_CONF_VALUE_sort(sk) OPENSSL_sk_sort(ossl_check_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_CONF_VALUE_sk_type(sk))
#define sk_CONF_VALUE_dup(sk) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_dup(ossl_check_const_CONF_VALUE_sk_type(sk)))
#define sk_CONF_VALUE_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(CONF_VALUE) *)OPENSSL_sk_deep_copy(ossl_check_const_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_copyfunc_type(copyfunc), ossl_check_CONF_VALUE_freefunc_type(freefunc)))
#define sk_CONF_VALUE_set_cmp_func(sk, cmp) ((sk_CONF_VALUE_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_CONF_VALUE_sk_type(sk), ossl_check_CONF_VALUE_compfunc_type(cmp)))
DEFINE_LHASH_OF_INTERNAL(CONF_VALUE);
#define lh_CONF_VALUE_new(hfn, cmp) ((LHASH_OF(CONF_VALUE) *)OPENSSL_LH_new(ossl_check_CONF_VALUE_lh_hashfunc_type(hfn), ossl_check_CONF_VALUE_lh_compfunc_type(cmp)))
#define lh_CONF_VALUE_free(lh) OPENSSL_LH_free(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_flush(lh) OPENSSL_LH_flush(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_insert(lh, ptr) ((CONF_VALUE *)OPENSSL_LH_insert(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_CONF_VALUE_lh_plain_type(ptr)))
#define lh_CONF_VALUE_delete(lh, ptr) ((CONF_VALUE *)OPENSSL_LH_delete(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_const_CONF_VALUE_lh_plain_type(ptr)))
#define lh_CONF_VALUE_retrieve(lh, ptr) ((CONF_VALUE *)OPENSSL_LH_retrieve(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_const_CONF_VALUE_lh_plain_type(ptr)))
#define lh_CONF_VALUE_error(lh) OPENSSL_LH_error(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_num_items(lh) OPENSSL_LH_num_items(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_node_stats_bio(lh, out) OPENSSL_LH_node_stats_bio(ossl_check_const_CONF_VALUE_lh_type(lh), out)
#define lh_CONF_VALUE_node_usage_stats_bio(lh, out) OPENSSL_LH_node_usage_stats_bio(ossl_check_const_CONF_VALUE_lh_type(lh), out)
#define lh_CONF_VALUE_stats_bio(lh, out) OPENSSL_LH_stats_bio(ossl_check_const_CONF_VALUE_lh_type(lh), out)
#define lh_CONF_VALUE_get_down_load(lh) OPENSSL_LH_get_down_load(ossl_check_CONF_VALUE_lh_type(lh))
#define lh_CONF_VALUE_set_down_load(lh, dl) OPENSSL_LH_set_down_load(ossl_check_CONF_VALUE_lh_type(lh), dl)
#define lh_CONF_VALUE_doall(lh, dfn) OPENSSL_LH_doall(ossl_check_CONF_VALUE_lh_type(lh), ossl_check_CONF_VALUE_lh_doallfunc_type(dfn))


struct conf_st;
struct conf_method_st;
typedef struct conf_method_st CONF_METHOD;

# ifndef OPENSSL_NO_DEPRECATED_3_0
#  include <openssl/conftypes.h>
# endif

/* Module definitions */
typedef struct conf_imodule_st CONF_IMODULE;
typedef struct conf_module_st CONF_MODULE;

STACK_OF(CONF_MODULE);
STACK_OF(CONF_IMODULE);

/* DSO module function typedefs */
typedef int conf_init_func (CONF_IMODULE *md, const CONF *cnf);
typedef void conf_finish_func (CONF_IMODULE *md);

# define CONF_MFLAGS_IGNORE_ERRORS       0x1
# define CONF_MFLAGS_IGNORE_RETURN_CODES 0x2
# define CONF_MFLAGS_SILENT              0x4
# define CONF_MFLAGS_NO_DSO              0x8
# define CONF_MFLAGS_IGNORE_MISSING_FILE 0x10
# define CONF_MFLAGS_DEFAULT_SECTION     0x20

int CONF_set_default_method(CONF_METHOD *meth);
void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash);
LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
                                long *eline);
# ifndef OPENSSL_NO_STDIO
LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
                                   long *eline);
# endif
LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
                                    long *eline);
STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
                                       const char *section);
char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
                      const char *name);
long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
                     const char *name);
void CONF_free(LHASH_OF(CONF_VALUE) *conf);
#ifndef OPENSSL_NO_STDIO
int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);
#endif
int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);
#ifndef OPENSSL_NO_DEPRECATED_1_1_0
OSSL_DEPRECATEDIN_1_1_0 void OPENSSL_config(const char *config_name);
#endif

#ifndef OPENSSL_NO_DEPRECATED_1_1_0
# define OPENSSL_no_config() \
    OPENSSL_init_crypto(OPENSSL_INIT_NO_LOAD_CONFIG, NULL)
#endif

/*
 * New conf code.  The semantics are different from the functions above. If
 * that wasn't the case, the above functions would have been replaced
 */

CONF *NCONF_new_ex(OSSL_LIB_CTX *libctx, CONF_METHOD *meth);
OSSL_LIB_CTX *NCONF_get0_libctx(const CONF *conf);
CONF *NCONF_new(CONF_METHOD *meth);
CONF_METHOD *NCONF_default(void);
#ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 CONF_METHOD *NCONF_WIN32(void);
#endif
void NCONF_free(CONF *conf);
void NCONF_free_data(CONF *conf);

int NCONF_load(CONF *conf, const char *file, long *eline);
# ifndef OPENSSL_NO_STDIO
int NCONF_load_fp(CONF *conf, FILE *fp, long *eline);
# endif
int NCONF_load_bio(CONF *conf, BIO *bp, long *eline);
STACK_OF(OPENSSL_CSTRING) *NCONF_get_section_names(const CONF *conf);
STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf,
                                        const char *section);
char *NCONF_get_string(const CONF *conf, const char *group, const char *name);
int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
                       long *result);
#ifndef OPENSSL_NO_STDIO
int NCONF_dump_fp(const CONF *conf, FILE *out);
#endif
int NCONF_dump_bio(const CONF *conf, BIO *out);

#define NCONF_get_number(c,g,n,r) NCONF_get_number_e(c,g,n,r)

/* Module functions */

int CONF_modules_load(const CONF *cnf, const char *appname,
                      unsigned long flags);
int CONF_modules_load_file_ex(OSSL_LIB_CTX *libctx, const char *filename,
                              const char *appname, unsigned long flags);
int CONF_modules_load_file(const char *filename, const char *appname,
                           unsigned long flags);
void CONF_modules_unload(int all);
void CONF_modules_finish(void);
#ifndef OPENSSL_NO_DEPRECATED_1_1_0
# define CONF_modules_free() while(0) continue
#endif
int CONF_module_add(const char *name, conf_init_func *ifunc,
                    conf_finish_func *ffunc);

const char *CONF_imodule_get_name(const CONF_IMODULE *md);
const char *CONF_imodule_get_value(const CONF_IMODULE *md);
void *CONF_imodule_get_usr_data(const CONF_IMODULE *md);
void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data);
CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md);
unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md);
void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags);
void *CONF_module_get_usr_data(CONF_MODULE *pmod);
void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);

char *CONF_get1_default_config_file(void);

int CONF_parse_list(const char *list, int sep, int nospc,
                    int (*list_cb) (const char *elem, int len, void *usr),
                    void *arg);

void OPENSSL_load_builtin_modules(void);


# ifdef  __cplusplus
}
# endif
#endif
                                                                                                                                                                                                                                                                           node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/configuration.h             0000664 0000000 0000000 00000006030 14746647661 0030515 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/configuration.h.in
 *
 * Copyright 2016-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */

#ifndef OPENSSL_CONFIGURATION_H
# define OPENSSL_CONFIGURATION_H
# pragma once

# ifdef  __cplusplus
extern "C" {
# endif

# ifdef OPENSSL_ALGORITHM_DEFINES
#  error OPENSSL_ALGORITHM_DEFINES no longer supported
# endif

/*
 * OpenSSL was configured with the following options:
 */

# ifndef OPENSSL_SYS_WIN32
#  define OPENSSL_SYS_WIN32 1
# endif
# define OPENSSL_CONFIGURED_API 30000
# ifndef OPENSSL_RAND_SEED_OS
#  define OPENSSL_RAND_SEED_OS
# endif
# ifndef OPENSSL_THREADS
#  define OPENSSL_THREADS
# endif
# ifndef OPENSSL_NO_AFALGENG
#  define OPENSSL_NO_AFALGENG
# endif
# ifndef OPENSSL_NO_ASAN
#  define OPENSSL_NO_ASAN
# endif
# ifndef OPENSSL_NO_COMP
#  define OPENSSL_NO_COMP
# endif
# ifndef OPENSSL_NO_CRYPTO_MDEBUG
#  define OPENSSL_NO_CRYPTO_MDEBUG
# endif
# ifndef OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE
#  define OPENSSL_NO_CRYPTO_MDEBUG_BACKTRACE
# endif
# ifndef OPENSSL_NO_DEVCRYPTOENG
#  define OPENSSL_NO_DEVCRYPTOENG
# endif
# ifndef OPENSSL_NO_EC_NISTP_64_GCC_128
#  define OPENSSL_NO_EC_NISTP_64_GCC_128
# endif
# ifndef OPENSSL_NO_EGD
#  define OPENSSL_NO_EGD
# endif
# ifndef OPENSSL_NO_EXTERNAL_TESTS
#  define OPENSSL_NO_EXTERNAL_TESTS
# endif
# ifndef OPENSSL_NO_FUZZ_AFL
#  define OPENSSL_NO_FUZZ_AFL
# endif
# ifndef OPENSSL_NO_FUZZ_LIBFUZZER
#  define OPENSSL_NO_FUZZ_LIBFUZZER
# endif
# ifndef OPENSSL_NO_KTLS
#  define OPENSSL_NO_KTLS
# endif
# ifndef OPENSSL_NO_LOADERENG
#  define OPENSSL_NO_LOADERENG
# endif
# ifndef OPENSSL_NO_MD2
#  define OPENSSL_NO_MD2
# endif
# ifndef OPENSSL_NO_MSAN
#  define OPENSSL_NO_MSAN
# endif
# ifndef OPENSSL_NO_RC5
#  define OPENSSL_NO_RC5
# endif
# ifndef OPENSSL_NO_SCTP
#  define OPENSSL_NO_SCTP
# endif
# ifndef OPENSSL_NO_SSL3
#  define OPENSSL_NO_SSL3
# endif
# ifndef OPENSSL_NO_SSL3_METHOD
#  define OPENSSL_NO_SSL3_METHOD
# endif
# ifndef OPENSSL_NO_TRACE
#  define OPENSSL_NO_TRACE
# endif
# ifndef OPENSSL_NO_UBSAN
#  define OPENSSL_NO_UBSAN
# endif
# ifndef OPENSSL_NO_UNIT_TEST
#  define OPENSSL_NO_UNIT_TEST
# endif
# ifndef OPENSSL_NO_UPLINK
#  define OPENSSL_NO_UPLINK
# endif
# ifndef OPENSSL_NO_WEAK_SSL_CIPHERS
#  define OPENSSL_NO_WEAK_SSL_CIPHERS
# endif
# ifndef OPENSSL_NO_DYNAMIC_ENGINE
#  define OPENSSL_NO_DYNAMIC_ENGINE
# endif


/* Generate 80386 code? */
# undef I386_ONLY

/*
 * The following are cipher-specific, but are part of the public API.
 */
# if !defined(OPENSSL_SYS_UEFI)
#  define BN_LLONG
/* Only one for the following should be defined */
#  undef SIXTY_FOUR_BIT_LONG
#  undef SIXTY_FOUR_BIT
#  define THIRTY_TWO_BIT
# endif

# define RC4_INT unsigned int

# ifdef  __cplusplus
}
# endif

#endif                          /* OPENSSL_CONFIGURATION_H */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/crmf.h                      0000664 0000000 0000000 00000034464 14746647661 0026611 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*-
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/crmf.h.in
 *
 * Copyright 2007-2021 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright Nokia 2007-2019
 * Copyright Siemens AG 2015-2019
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 *
 * CRMF (RFC 4211) implementation by M. Peylo, M. Viljanen, and D. von Oheimb.
 */



#ifndef OPENSSL_CRMF_H
# define OPENSSL_CRMF_H

# include <openssl/opensslconf.h>

# ifndef OPENSSL_NO_CRMF
#  include <openssl/opensslv.h>
#  include <openssl/safestack.h>
#  include <openssl/crmferr.h>
#  include <openssl/x509v3.h> /* for GENERAL_NAME etc. */

/* explicit #includes not strictly needed since implied by the above: */
#  include <openssl/types.h>
#  include <openssl/x509.h>

#  ifdef __cplusplus
extern "C" {
#  endif

#  define OSSL_CRMF_POPOPRIVKEY_THISMESSAGE          0
#  define OSSL_CRMF_POPOPRIVKEY_SUBSEQUENTMESSAGE    1
#  define OSSL_CRMF_POPOPRIVKEY_DHMAC                2
#  define OSSL_CRMF_POPOPRIVKEY_AGREEMAC             3
#  define OSSL_CRMF_POPOPRIVKEY_ENCRYPTEDKEY         4

#  define OSSL_CRMF_SUBSEQUENTMESSAGE_ENCRCERT       0
#  define OSSL_CRMF_SUBSEQUENTMESSAGE_CHALLENGERESP  1

typedef struct ossl_crmf_encryptedvalue_st OSSL_CRMF_ENCRYPTEDVALUE;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_ENCRYPTEDVALUE)
typedef struct ossl_crmf_msg_st OSSL_CRMF_MSG;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_MSG)
DECLARE_ASN1_DUP_FUNCTION(OSSL_CRMF_MSG)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CRMF_MSG, OSSL_CRMF_MSG, OSSL_CRMF_MSG)
#define sk_OSSL_CRMF_MSG_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_value(sk, idx) ((OSSL_CRMF_MSG *)OPENSSL_sk_value(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk), (idx)))
#define sk_OSSL_CRMF_MSG_new(cmp) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_new(ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp)))
#define sk_OSSL_CRMF_MSG_new_null() ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_new_null())
#define sk_OSSL_CRMF_MSG_new_reserve(cmp, n) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp), (n)))
#define sk_OSSL_CRMF_MSG_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CRMF_MSG_sk_type(sk), (n))
#define sk_OSSL_CRMF_MSG_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_delete(sk, i) ((OSSL_CRMF_MSG *)OPENSSL_sk_delete(ossl_check_OSSL_CRMF_MSG_sk_type(sk), (i)))
#define sk_OSSL_CRMF_MSG_delete_ptr(sk, ptr) ((OSSL_CRMF_MSG *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr)))
#define sk_OSSL_CRMF_MSG_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_pop(sk) ((OSSL_CRMF_MSG *)OPENSSL_sk_pop(ossl_check_OSSL_CRMF_MSG_sk_type(sk)))
#define sk_OSSL_CRMF_MSG_shift(sk) ((OSSL_CRMF_MSG *)OPENSSL_sk_shift(ossl_check_OSSL_CRMF_MSG_sk_type(sk)))
#define sk_OSSL_CRMF_MSG_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CRMF_MSG_sk_type(sk),ossl_check_OSSL_CRMF_MSG_freefunc_type(freefunc))
#define sk_OSSL_CRMF_MSG_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr), (idx))
#define sk_OSSL_CRMF_MSG_set(sk, idx, ptr) ((OSSL_CRMF_MSG *)OPENSSL_sk_set(ossl_check_OSSL_CRMF_MSG_sk_type(sk), (idx), ossl_check_OSSL_CRMF_MSG_type(ptr)))
#define sk_OSSL_CRMF_MSG_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr))
#define sk_OSSL_CRMF_MSG_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_type(ptr), pnum)
#define sk_OSSL_CRMF_MSG_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk))
#define sk_OSSL_CRMF_MSG_dup(sk) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk)))
#define sk_OSSL_CRMF_MSG_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CRMF_MSG) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_copyfunc_type(copyfunc), ossl_check_OSSL_CRMF_MSG_freefunc_type(freefunc)))
#define sk_OSSL_CRMF_MSG_set_cmp_func(sk, cmp) ((sk_OSSL_CRMF_MSG_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp)))

typedef struct ossl_crmf_attributetypeandvalue_st OSSL_CRMF_ATTRIBUTETYPEANDVALUE;
typedef struct ossl_crmf_pbmparameter_st OSSL_CRMF_PBMPARAMETER;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_PBMPARAMETER)
typedef struct ossl_crmf_poposigningkey_st OSSL_CRMF_POPOSIGNINGKEY;
typedef struct ossl_crmf_certrequest_st OSSL_CRMF_CERTREQUEST;
typedef struct ossl_crmf_certid_st OSSL_CRMF_CERTID;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_CERTID)
DECLARE_ASN1_DUP_FUNCTION(OSSL_CRMF_CERTID)
SKM_DEFINE_STACK_OF_INTERNAL(OSSL_CRMF_CERTID, OSSL_CRMF_CERTID, OSSL_CRMF_CERTID)
#define sk_OSSL_CRMF_CERTID_num(sk) OPENSSL_sk_num(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_value(sk, idx) ((OSSL_CRMF_CERTID *)OPENSSL_sk_value(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk), (idx)))
#define sk_OSSL_CRMF_CERTID_new(cmp) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_new(ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp)))
#define sk_OSSL_CRMF_CERTID_new_null() ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_new_null())
#define sk_OSSL_CRMF_CERTID_new_reserve(cmp, n) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_new_reserve(ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp), (n)))
#define sk_OSSL_CRMF_CERTID_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (n))
#define sk_OSSL_CRMF_CERTID_free(sk) OPENSSL_sk_free(ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_zero(sk) OPENSSL_sk_zero(ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_delete(sk, i) ((OSSL_CRMF_CERTID *)OPENSSL_sk_delete(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (i)))
#define sk_OSSL_CRMF_CERTID_delete_ptr(sk, ptr) ((OSSL_CRMF_CERTID *)OPENSSL_sk_delete_ptr(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr)))
#define sk_OSSL_CRMF_CERTID_push(sk, ptr) OPENSSL_sk_push(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_pop(sk) ((OSSL_CRMF_CERTID *)OPENSSL_sk_pop(ossl_check_OSSL_CRMF_CERTID_sk_type(sk)))
#define sk_OSSL_CRMF_CERTID_shift(sk) ((OSSL_CRMF_CERTID *)OPENSSL_sk_shift(ossl_check_OSSL_CRMF_CERTID_sk_type(sk)))
#define sk_OSSL_CRMF_CERTID_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_OSSL_CRMF_CERTID_sk_type(sk),ossl_check_OSSL_CRMF_CERTID_freefunc_type(freefunc))
#define sk_OSSL_CRMF_CERTID_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr), (idx))
#define sk_OSSL_CRMF_CERTID_set(sk, idx, ptr) ((OSSL_CRMF_CERTID *)OPENSSL_sk_set(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (idx), ossl_check_OSSL_CRMF_CERTID_type(ptr)))
#define sk_OSSL_CRMF_CERTID_find(sk, ptr) OPENSSL_sk_find(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define sk_OSSL_CRMF_CERTID_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_type(ptr), pnum)
#define sk_OSSL_CRMF_CERTID_sort(sk) OPENSSL_sk_sort(ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk))
#define sk_OSSL_CRMF_CERTID_dup(sk) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_dup(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk)))
#define sk_OSSL_CRMF_CERTID_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(OSSL_CRMF_CERTID) *)OPENSSL_sk_deep_copy(ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_copyfunc_type(copyfunc), ossl_check_OSSL_CRMF_CERTID_freefunc_type(freefunc)))
#define sk_OSSL_CRMF_CERTID_set_cmp_func(sk, cmp) ((sk_OSSL_CRMF_CERTID_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp)))


typedef struct ossl_crmf_pkipublicationinfo_st OSSL_CRMF_PKIPUBLICATIONINFO;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_PKIPUBLICATIONINFO)
typedef struct ossl_crmf_singlepubinfo_st OSSL_CRMF_SINGLEPUBINFO;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_SINGLEPUBINFO)
typedef struct ossl_crmf_certtemplate_st OSSL_CRMF_CERTTEMPLATE;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_CERTTEMPLATE)
typedef STACK_OF(OSSL_CRMF_MSG) OSSL_CRMF_MSGS;
DECLARE_ASN1_FUNCTIONS(OSSL_CRMF_MSGS)

typedef struct ossl_crmf_optionalvalidity_st OSSL_CRMF_OPTIONALVALIDITY;

/* crmf_pbm.c */
OSSL_CRMF_PBMPARAMETER *OSSL_CRMF_pbmp_new(OSSL_LIB_CTX *libctx, size_t slen,
                                           int owfnid, size_t itercnt,
                                           int macnid);
int OSSL_CRMF_pbm_new(OSSL_LIB_CTX *libctx, const char *propq,
                      const OSSL_CRMF_PBMPARAMETER *pbmp,
                      const unsigned char *msg, size_t msglen,
                      const unsigned char *sec, size_t seclen,
                      unsigned char **mac, size_t *maclen);

/* crmf_lib.c */
int OSSL_CRMF_MSG_set1_regCtrl_regToken(OSSL_CRMF_MSG *msg,
                                        const ASN1_UTF8STRING *tok);
ASN1_UTF8STRING
*OSSL_CRMF_MSG_get0_regCtrl_regToken(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regCtrl_authenticator(OSSL_CRMF_MSG *msg,
                                             const ASN1_UTF8STRING *auth);
ASN1_UTF8STRING
*OSSL_CRMF_MSG_get0_regCtrl_authenticator(const OSSL_CRMF_MSG *msg);
int
OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo(OSSL_CRMF_PKIPUBLICATIONINFO *pi,
                                                     OSSL_CRMF_SINGLEPUBINFO *spi);
#  define OSSL_CRMF_PUB_METHOD_DONTCARE 0
#  define OSSL_CRMF_PUB_METHOD_X500     1
#  define OSSL_CRMF_PUB_METHOD_WEB      2
#  define OSSL_CRMF_PUB_METHOD_LDAP     3
int OSSL_CRMF_MSG_set0_SinglePubInfo(OSSL_CRMF_SINGLEPUBINFO *spi,
                                     int method, GENERAL_NAME *nm);
#  define OSSL_CRMF_PUB_ACTION_DONTPUBLISH   0
#  define OSSL_CRMF_PUB_ACTION_PLEASEPUBLISH 1
int OSSL_CRMF_MSG_set_PKIPublicationInfo_action(OSSL_CRMF_PKIPUBLICATIONINFO *pi,
                                                int action);
int OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo(OSSL_CRMF_MSG *msg,
                                                  const OSSL_CRMF_PKIPUBLICATIONINFO *pi);
OSSL_CRMF_PKIPUBLICATIONINFO
*OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey(OSSL_CRMF_MSG *msg,
                                               const X509_PUBKEY *pubkey);
X509_PUBKEY
*OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regCtrl_oldCertID(OSSL_CRMF_MSG *msg,
                                         const OSSL_CRMF_CERTID *cid);
OSSL_CRMF_CERTID
*OSSL_CRMF_MSG_get0_regCtrl_oldCertID(const OSSL_CRMF_MSG *msg);
OSSL_CRMF_CERTID *OSSL_CRMF_CERTID_gen(const X509_NAME *issuer,
                                       const ASN1_INTEGER *serial);

int OSSL_CRMF_MSG_set1_regInfo_utf8Pairs(OSSL_CRMF_MSG *msg,
                                         const ASN1_UTF8STRING *utf8pairs);
ASN1_UTF8STRING
*OSSL_CRMF_MSG_get0_regInfo_utf8Pairs(const OSSL_CRMF_MSG *msg);
int OSSL_CRMF_MSG_set1_regInfo_certReq(OSSL_CRMF_MSG *msg,
                                       const OSSL_CRMF_CERTREQUEST *cr);
OSSL_CRMF_CERTREQUEST
*OSSL_CRMF_MSG_get0_regInfo_certReq(const OSSL_CRMF_MSG *msg);

int OSSL_CRMF_MSG_set0_validity(OSSL_CRMF_MSG *crm,
                                ASN1_TIME *notBefore, ASN1_TIME *notAfter);
int OSSL_CRMF_MSG_set_certReqId(OSSL_CRMF_MSG *crm, int rid);
int OSSL_CRMF_MSG_get_certReqId(const OSSL_CRMF_MSG *crm);
int OSSL_CRMF_MSG_set0_extensions(OSSL_CRMF_MSG *crm, X509_EXTENSIONS *exts);

int OSSL_CRMF_MSG_push0_extension(OSSL_CRMF_MSG *crm, X509_EXTENSION *ext);
#  define OSSL_CRMF_POPO_NONE       -1
#  define OSSL_CRMF_POPO_RAVERIFIED 0
#  define OSSL_CRMF_POPO_SIGNATURE  1
#  define OSSL_CRMF_POPO_KEYENC     2
#  define OSSL_CRMF_POPO_KEYAGREE   3
int OSSL_CRMF_MSG_create_popo(int meth, OSSL_CRMF_MSG *crm,
                              EVP_PKEY *pkey, const EVP_MD *digest,
                              OSSL_LIB_CTX *libctx, const char *propq);
int OSSL_CRMF_MSGS_verify_popo(const OSSL_CRMF_MSGS *reqs,
                               int rid, int acceptRAVerified,
                               OSSL_LIB_CTX *libctx, const char *propq);
OSSL_CRMF_CERTTEMPLATE *OSSL_CRMF_MSG_get0_tmpl(const OSSL_CRMF_MSG *crm);
const ASN1_INTEGER
*OSSL_CRMF_CERTTEMPLATE_get0_serialNumber(const OSSL_CRMF_CERTTEMPLATE *tmpl);
const X509_NAME
*OSSL_CRMF_CERTTEMPLATE_get0_subject(const OSSL_CRMF_CERTTEMPLATE *tmpl);
const X509_NAME
*OSSL_CRMF_CERTTEMPLATE_get0_issuer(const OSSL_CRMF_CERTTEMPLATE *tmpl);
X509_EXTENSIONS
*OSSL_CRMF_CERTTEMPLATE_get0_extensions(const OSSL_CRMF_CERTTEMPLATE *tmpl);
const X509_NAME
*OSSL_CRMF_CERTID_get0_issuer(const OSSL_CRMF_CERTID *cid);
const ASN1_INTEGER
*OSSL_CRMF_CERTID_get0_serialNumber(const OSSL_CRMF_CERTID *cid);
int OSSL_CRMF_CERTTEMPLATE_fill(OSSL_CRMF_CERTTEMPLATE *tmpl,
                                EVP_PKEY *pubkey,
                                const X509_NAME *subject,
                                const X509_NAME *issuer,
                                const ASN1_INTEGER *serial);
X509
*OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert(const OSSL_CRMF_ENCRYPTEDVALUE *ecert,
                                       OSSL_LIB_CTX *libctx, const char *propq,
                                       EVP_PKEY *pkey);

#  ifdef __cplusplus
}
#  endif
# endif /* !defined(OPENSSL_NO_CRMF) */
#endif /* !defined(OPENSSL_CRMF_H) */
                                                                                                                                                                                                            node-23.7.0/deps/openssl/config/archs/VC-WIN32/asm_avx2/include/openssl/crypto.h                    0000664 0000000 0000000 00000056611 14746647661 0027200 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /*
 * WARNING: do not edit!
 * Generated by makefile from include/openssl/crypto.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef OPENSSL_CRYPTO_H
# define OPENSSL_CRYPTO_H
# pragma once

# include <openssl/macros.h>
# ifndef OPENSSL_NO_DEPRECATED_3_0
#  define HEADER_CRYPTO_H
# endif

# include <stdlib.h>
# include <time.h>

# include <openssl/e_os2.h>

# ifndef OPENSSL_NO_STDIO
#  include <stdio.h>
# endif

# include <openssl/safestack.h>
# include <openssl/opensslv.h>
# include <openssl/types.h>
# include <openssl/opensslconf.h>
# include <openssl/cryptoerr.h>
# include <openssl/core.h>

# ifdef CHARSET_EBCDIC
#  include <openssl/ebcdic.h>
# endif

/*
 * Resolve problems on some operating systems with symbol names that clash
 * one way or another
 */
# include <openssl/symhacks.h>

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  include <openssl/opensslv.h>
# endif

#ifdef  __cplusplus
extern "C" {
#endif

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
#  define SSLeay                  OpenSSL_version_num
#  define SSLeay_version          OpenSSL_version
#  define SSLEAY_VERSION_NUMBER   OPENSSL_VERSION_NUMBER
#  define SSLEAY_VERSION          OPENSSL_VERSION
#  define SSLEAY_CFLAGS           OPENSSL_CFLAGS
#  define SSLEAY_BUILT_ON         OPENSSL_BUILT_ON
#  define SSLEAY_PLATFORM         OPENSSL_PLATFORM
#  define SSLEAY_DIR              OPENSSL_DIR

/*
 * Old type for allocating dynamic locks. No longer used. Use the new thread
 * API instead.
 */
typedef struct {
    int dummy;
} CRYPTO_dynlock;

# endif /* OPENSSL_NO_DEPRECATED_1_1_0 */

typedef void CRYPTO_RWLOCK;

CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void);
__owur int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
__owur int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);

int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);
int CRYPTO_atomic_or(uint64_t *val, uint64_t op, uint64_t *ret,
                     CRYPTO_RWLOCK *lock);
int CRYPTO_atomic_load(uint64_t *val, uint64_t *ret, CRYPTO_RWLOCK *lock);

/* No longer needed, so this is a no-op */
#define OPENSSL_malloc_init() while(0) continue

# define OPENSSL_malloc(num) \
        CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_zalloc(num) \
        CRYPTO_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_realloc(addr, num) \
        CRYPTO_realloc(addr, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_clear_realloc(addr, old_num, num) \
        CRYPTO_clear_realloc(addr, old_num, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_clear_free(addr, num) \
        CRYPTO_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_free(addr) \
        CRYPTO_free(addr, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_memdup(str, s) \
        CRYPTO_memdup((str), s, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_strdup(str) \
        CRYPTO_strdup(str, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_strndup(str, n) \
        CRYPTO_strndup(str, n, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_malloc(num) \
        CRYPTO_secure_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_zalloc(num) \
        CRYPTO_secure_zalloc(num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_free(addr) \
        CRYPTO_secure_free(addr, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_clear_free(addr, num) \
        CRYPTO_secure_clear_free(addr, num, OPENSSL_FILE, OPENSSL_LINE)
# define OPENSSL_secure_actual_size(ptr) \
        CRYPTO_secure_actual_size(ptr)

size_t OPENSSL_strlcpy(char *dst, const char *src, size_t siz);
size_t OPENSSL_strlcat(char *dst, const char *src, size_t siz);
size_t OPENSSL_strnlen(const char *str, size_t maxlen);
int OPENSSL_buf2hexstr_ex(char *str, size_t str_n, size_t *strlength,
                          const unsigned char *buf, size_t buflen,
                          const char sep);
char *OPENSSL_buf2hexstr(const unsigned char *buf, long buflen);
int OPENSSL_hexstr2buf_ex(unsigned char *buf, size_t buf_n, size_t *buflen,
                          const char *str, const char sep);
unsigned char *OPENSSL_hexstr2buf(const char *str, long *buflen);
int OPENSSL_hexchar2int(unsigned char c);
int OPENSSL_strcasecmp(const char *s1, const char *s2);
int OPENSSL_strncasecmp(const char *s1, const char *s2, size_t n);

# define OPENSSL_MALLOC_MAX_NELEMS(type)  (((1U<<(sizeof(int)*8-1))-1)/sizeof(type))

/*
 * These functions return the values of OPENSSL_VERSION_MAJOR,
 * OPENSSL_VERSION_MINOR, OPENSSL_VERSION_PATCH, OPENSSL_VERSION_PRE_RELEASE
 * and OPENSSL_VERSION_BUILD_METADATA, respectively.
 */
unsigned int OPENSSL_version_major(void);
unsigned int OPENSSL_version_minor(void);
unsigned int OPENSSL_version_patch(void);
const char *OPENSSL_version_pre_release(void);
const char *OPENSSL_version_build_metadata(void);

unsigned long OpenSSL_version_num(void);
const char *OpenSSL_version(int type);
# define OPENSSL_VERSION                0
# define OPENSSL_CFLAGS                 1
# define OPENSSL_BUILT_ON               2
# define OPENSSL_PLATFORM               3
# define OPENSSL_DIR                    4
# define OPENSSL_ENGINES_DIR            5
# define OPENSSL_VERSION_STRING         6
# define OPENSSL_FULL_VERSION_STRING    7
# define OPENSSL_MODULES_DIR            8
# define OPENSSL_CPU_INFO               9

const char *OPENSSL_info(int type);
/*
 * The series starts at 1001 to avoid confusion with the OpenSSL_version
 * types.
 */
# define OPENSSL_INFO_CONFIG_DIR                1001
# define OPENSSL_INFO_ENGINES_DIR               1002
# define OPENSSL_INFO_MODULES_DIR               1003
# define OPENSSL_INFO_DSO_EXTENSION             1004
# define OPENSSL_INFO_DIR_FILENAME_SEPARATOR    1005
# define OPENSSL_INFO_LIST_SEPARATOR            1006
# define OPENSSL_INFO_SEED_SOURCE               1007
# define OPENSSL_INFO_CPU_SETTINGS              1008

int OPENSSL_issetugid(void);

struct crypto_ex_data_st {
    OSSL_LIB_CTX *ctx;
    STACK_OF(void) *sk;
};

SKM_DEFINE_STACK_OF_INTERNAL(void, void, void)
#define sk_void_num(sk) OPENSSL_sk_num(ossl_check_const_void_sk_type(sk))
#define sk_void_value(sk, idx) ((void *)OPENSSL_sk_value(ossl_check_const_void_sk_type(sk), (idx)))
#define sk_void_new(cmp) ((STACK_OF(void) *)OPENSSL_sk_new(ossl_check_void_compfunc_type(cmp)))
#define sk_void_new_null() ((STACK_OF(void) *)OPENSSL_sk_new_null())
#define sk_void_new_reserve(cmp, n) ((STACK_OF(void) *)OPENSSL_sk_new_reserve(ossl_check_void_compfunc_type(cmp), (n)))
#define sk_void_reserve(sk, n) OPENSSL_sk_reserve(ossl_check_void_sk_type(sk), (n))
#define sk_void_free(sk) OPENSSL_sk_free(ossl_check_void_sk_type(sk))
#define sk_void_zero(sk) OPENSSL_sk_zero(ossl_check_void_sk_type(sk))
#define sk_void_delete(sk, i) ((void *)OPENSSL_sk_delete(ossl_check_void_sk_type(sk), (i)))
#define sk_void_delete_ptr(sk, ptr) ((void *)OPENSSL_sk_delete_ptr(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr)))
#define sk_void_push(sk, ptr) OPENSSL_sk_push(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_unshift(sk, ptr) OPENSSL_sk_unshift(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_pop(sk) ((void *)OPENSSL_sk_pop(ossl_check_void_sk_type(sk)))
#define sk_void_shift(sk) ((void *)OPENSSL_sk_shift(ossl_check_void_sk_type(sk)))
#define sk_void_pop_free(sk, freefunc) OPENSSL_sk_pop_free(ossl_check_void_sk_type(sk),ossl_check_void_freefunc_type(freefunc))
#define sk_void_insert(sk, ptr, idx) OPENSSL_sk_insert(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr), (idx))
#define sk_void_set(sk, idx, ptr) ((void *)OPENSSL_sk_set(ossl_check_void_sk_type(sk), (idx), ossl_check_void_type(ptr)))
#define sk_void_find(sk, ptr) OPENSSL_sk_find(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_find_ex(sk, ptr) OPENSSL_sk_find_ex(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr))
#define sk_void_find_all(sk, ptr, pnum) OPENSSL_sk_find_all(ossl_check_void_sk_type(sk), ossl_check_void_type(ptr), pnum)
#define sk_void_sort(sk) OPENSSL_sk_sort(ossl_check_void_sk_type(sk))
#define sk_void_is_sorted(sk) OPENSSL_sk_is_sorted(ossl_check_const_void_sk_type(sk))
#define sk_void_dup(sk) ((STACK_OF(void) *)OPENSSL_sk_dup(ossl_check_const_void_sk_type(sk)))
#define sk_void_deep_copy(sk, copyfunc, freefunc) ((STACK_OF(void) *)OPENSSL_sk_deep_copy(ossl_check_const_void_sk_type(sk), ossl_check_void_copyfunc_type(copyfunc), ossl_check_void_freefunc_type(freefunc)))
#define sk_void_set_cmp_func(sk, cmp) ((sk_void_compfunc)OPENSSL_sk_set_cmp_func(ossl_check_void_sk_type(sk), ossl_check_void_compfunc_type(cmp)))



/*
 * Per class, we have a STACK of function pointers.
 */
# define CRYPTO_EX_INDEX_SSL              0
# define CRYPTO_EX_INDEX_SSL_CTX          1
# define CRYPTO_EX_INDEX_SSL_SESSION      2
# define CRYPTO_EX_INDEX_X509             3
# define CRYPTO_EX_INDEX_X509_STORE       4
# define CRYPTO_EX_INDEX_X509_STORE_CTX   5
# define CRYPTO_EX_INDEX_DH               6
# define CRYPTO_EX_INDEX_DSA              7
# define CRYPTO_EX_INDEX_EC_KEY           8
# define CRYPTO_EX_INDEX_RSA              9
# define CRYPTO_EX_INDEX_ENGINE          10
# define CRYPTO_EX_INDEX_UI              11
# define CRYPTO_EX_INDEX_BIO             12
# define CRYPTO_EX_INDEX_APP             13
# define CRYPTO_EX_INDEX_UI_METHOD       14
# define CRYPTO_EX_INDEX_RAND_DRBG       15
# define CRYPTO_EX_INDEX_DRBG            CRYPTO_EX_INDEX_RAND_DRBG
# define CRYPTO_EX_INDEX_OSSL_LIB_CTX    16
# define CRYPTO_EX_INDEX_EVP_PKEY        17
# define CRYPTO_EX_INDEX__COUNT          18

typedef void CRYPTO_EX_new (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                           int idx, long argl, void *argp);
typedef void CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                             int idx, long argl, void *argp);
typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
                           void **from_d, int idx, long argl, void *argp);
__owur int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
                                   CRYPTO_EX_new *new_func,
                                   CRYPTO_EX_dup *dup_func,
                                   CRYPTO_EX_free *free_func);
/* No longer use an index. */
int CRYPTO_free_ex_index(int class_index, int idx);

/*
 * Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a
 * given class (invokes whatever per-class callbacks are applicable)
 */
int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
                       const CRYPTO_EX_DATA *from);

void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);

/* Allocate a single item in the CRYPTO_EX_DATA variable */
int CRYPTO_alloc_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad,
                         int idx);

/*
 * Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular
 * index (relative to the class type involved)
 */
int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx);

# ifndef OPENSSL_NO_DEPRECATED_1_1_0
/*
 * This function cleans up all "ex_data" state. It mustn't be called under
 * potential race-conditions.
 */
# define CRYPTO_cleanup_all_ex_data() while(0) continue

/*
 * The old locking functions have been removed completely without compatibility
 * macros. This is because the old functions either could not properly report
 * errors, or the returned error values were not clearly documented.
 * Replacing the locking functions with no-ops would cause race condition
 * issues in the affected applications. It is far better for them to fail at
 * compile time.
 * On the other hand, the locking callbacks are no longer used.  Consequently,
 * the callback management functions can be safely replaced with no-op macros.
 */
#  define CRYPTO_num_locks()            (1)
#  define CRYPTO_set_locking_callback(func)
#  define CRYPTO_get_locking_callback()         (NULL)
#  define CRYPTO_set_add_lock_callback(func)
#  define CRYPTO_get_add_lock_callback()        (NULL)

/*
 * These defines where used in combination with the old locking callbacks,
 * they are not called anymore, but old code that's not called might still
 * use them.
 */
#  define CRYPTO_LOCK             1
#  define CRYPTO_UNLOCK           2
#  define CRYPTO_READ             4
#  define CRYPTO_WRITE            8

/* This structure is no longer used */
typedef struct crypto_threadid_st {
    int dummy;
} CRYPTO_THREADID;
/* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
#  define CRYPTO_THREADID_set_numeric(id, val)
#  define CRYPTO_THREADID_set_pointer(id, ptr)
#  define CRYPTO_THREADID_set_callback(threadid_func)   (0)
#  define CRYPTO_THREADID_get_callback()                (NULL)
#  define CRYPTO_THREADID_current(id)
#  define CRYPTO_THREADID_cmp(a, b)                     (-1)
#  define CRYPTO_THREADID_cpy(dest, src)
#  define CRYPTO_THREADID_hash(id)                      (0UL)

#  ifndef OPENSSL_NO_DEPRECATED_1_0_0
#   define CRYPTO_set_id_callback(func)
#   define CRYPTO_get_id_callback()                     (NULL)
#   define CRYPTO_thread_id()                           (0UL)
#  endif /* OPENSSL_NO_DEPRECATED_1_0_0 */

#  define CRYPTO_set_dynlock_create_callback(dyn_create_function)
#  define CRYPTO_set_dynlock_lock_callback(dyn_lock_function)
#  define CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function)
#  define CRYPTO_get_dynlock_create_callback()          (NULL)
#  define CRYPTO_get_dynlock_lock_callback()            (NULL)
#  define CRYPTO_get_dynlock_destroy_callback()         (NULL)
# endif /* OPENSSL_NO_DEPRECATED_1_1_0 */

typedef void *(*CRYPTO_malloc_fn)(size_t num, const char *file, int line);
typedef void *(*CRYPTO_realloc_fn)(void *addr, size_t num, const char *file,
                                   int line);
typedef void (*CRYPTO_free_fn)(void *addr, const char *file, int line);
int CRYPTO_set_mem_functions(CRYPTO_malloc_fn malloc_fn,
                             CRYPTO_realloc_fn realloc_fn,
                             CRYPTO_free_fn free_fn);
void CRYPTO_get_mem_functions(CRYPTO_malloc_fn *malloc_fn,
                              CRYPTO_realloc_fn *realloc_fn,
                              CRYPTO_free_fn *free_fn);

void *CRYPTO_malloc(size_t num, const char *file, int line);
void *CRYPTO_zalloc(size_t num, const char *file, int line);
void *CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
char *CRYPTO_strdup(const char *str, const char *file, int line);
char *CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
void CRYPTO_free(void *ptr, const char *file, int line);
void CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
void *CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
void *CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
                           const char *file, int line);

int CRYPTO_secure_malloc_init(size_t sz, size_t minsize);
int CRYPTO_secure_malloc_done(void);
void *CRYPTO_secure_malloc(size_t num, const char *file, int line);
void *CRYPTO_secure_zalloc(size_t num, const char *file, int line);
void CRYPTO_secure_free(void *ptr, const char *file, int line);
void CRYPTO_secure_clear_free(void *ptr, size_t num,
                              const char *file, int line);
int CRYPTO_secure_allocated(const void *ptr);
int CRYPTO_secure_malloc_initialized(void);
size_t CRYPTO_secure_actual_size(void *ptr);
size_t CRYPTO_secure_used(void);

void OPENSSL_cleanse(void *ptr, size_t len);

# ifndef OPENSSL_NO_CRYPTO_MDEBUG
/*
 * The following can be used to detect memory leaks in the library. If
 * used, it turns on malloc checking
 */
# define CRYPTO_MEM_CHECK_OFF     0x0   /* Control only */
# define CRYPTO_MEM_CHECK_ON      0x1   /* Control and mode bit */
# define CRYPTO_MEM_CHECK_ENABLE  0x2   /* Control and mode bit */
# define CRYPTO_MEM_CHECK_DISABLE 0x3   /* Control only */

void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
#  ifndef OPENSSL_NO_DEPRECATED_3_0
#    define OPENSSL_mem_debug_push(info) \
         CRYPTO_mem_debug_push(info, OPENSSL_FILE, OPENSSL_LINE)
#    define OPENSSL_mem_debug_pop() \
         CRYPTO_mem_debug_pop()
#  endif
#  ifndef OPENSSL_NO_DEPRECATED_3_0
OSSL_DEPRECATEDIN_3_0 int CRYPTO_set_mem_debug(int flag);
OSSL_DEPREC