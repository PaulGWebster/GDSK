
  {3.8788003528783584000000000e+16, "3878800352878358", 17},
  {2.3607528655875024714250515e-144, "23607528655875025", -143},
  {2.2484175386476317543263568e-33, "22484175386476318", -32},
  {7.9494497876988623663848746e+177, "7949449787698862", 178},
  {1.0006596441517455944069492e-233, "10006596441517456", -232},
  {1.5078114200257766373769112e-210, "15078114200257766", -209},
  {2.7247318544029238190458736e+79, "27247318544029238", 80},
  {8.6821793572412975977750962e+134, "8682179357241298", 135},
  {2.0451347421362750788151068e-305, "2045134742136275", -304},
  {5.0652635078484605193181552e+298, "50652635078484605", 299},
  {3.5487146335146462225089248e+146, "35487146335146462", 147},
  {1.4652475491053957745032461e+228, "14652475491053958", 229},
  {1.1820869035308330422688891e+253, "1182086903530833", 254},
  {7.3786654722059245216666790e+270, "73786654722059245", 271},
  {1.2784438865964389150605730e-05, "12784438865964389", -4},
  {1.1260223365323041939297852e+76, "11260223365323042", 77},
  {3.0064589797946859213577685e-161, "3006458979794686", -160},
  {7.1278474814796850328509084e-274, "7127847481479685", -273},
  {1.9138176927540451772074102e-193, "19138176927540452", -192},
  {1.7080123264136715515603467e+254, "17080123264136716", 255},
  {1.0128674352554365851531013e-48, "10128674352554366", -47},
  {1.5746533458599044227748128e-74, "15746533458599044", -73},
  {1.4356753015031468224474901e-286, "14356753015031468", -285},
  {1.7082399493327295743535374e+183, "17082399493327296", 184},
  {2.1630780537313775561449605e-169, "21630780537313776", -168},
  {1.3042193795284507958541045e-102, "13042193795284508", -101},
  {2.2508422963575406309743350e-187, "22508422963575406", -186},
  {1.2781494282149883487885685e+296, "12781494282149883", 297},
  {1.1652156016851935783932939e-101, "11652156016851936", -100},
  {5.2584380525996558746107319e-104, "5258438052599656", -103},
  {2.6016556457739001847669915e-112, "26016556457739", -111},
  {4.0483520563321593844402564e-165, "40483520563321594", -164},
  {1.8391212161286411021059130e-87, "1839121216128641", -86},
  {3.8686838579782488894139861e+171, "3868683857978249", 172},
  {3.0441790904278562730767049e-41, "30441790904278563", -40},
  {1.1852500182076946605241405e+61, "11852500182076947", 62},
  {5.6878788923367522656917572e+06, "5687878892336752", 7},
  {1.8145402657011261212415657e-96, "18145402657011261", -95},
  {8.1007309457514843059564723e-277, "8100730945751484", -276},
  {3.4319763296610049307728328e-178, "3431976329661005", -177},
  {3.7286067911091282831645264e-125, "37286067911091283", -124},
  {4.7754308024223348494782568e+120, "4775430802422335", 121},
  {8.2652814511712108425026459e-187, "8265281451171211", -186},
  {4.5009711314141871865294934e+235, "4500971131414187", 236},
  {1.1975263566200747456384844e+81, "11975263566200747", 82},
  {2.1912205332455379839227017e-94, "2191220533245538", -93},
  {6.8066790056485196497614400e-150, "680667900564852", -149},
  {7.6532510092805852153219348e+00, "7653251009280585", 1},
  {5.8934764994149391523545950e+192, "5893476499414939", 193},
  {1.7601549752926385816638673e-233, "17601549752926386", -232},
  {1.2776040793671005439851740e-140, "12776040793671005", -139},
  {1.1211504527941206369241439e+192, "11211504527941206", 193},
  {1.4801602577064320976271500e-108, "14801602577064321", -107},
  {1.8343061719179892316302213e+27, "18343061719179892", 28},
  {4.8340273910966647365659748e-57, "4834027391096665", -56},
  {1.6054682076865613202201200e+130, "16054682076865613", 131},
  {4.7314453872969042192620705e-198, "4731445387296904", -197},
  {1.8011037730905786786379616e+104, "18011037730905787", 105},
  {5.7209241481870006347843777e-165, "5720924148187001", -164},
  {9.9935798648223598526634320e-238, "999357986482236", -237},
  {6.7116255211784933219926161e-132, "6711625521178493", -131},
  {1.4856797461161849599927966e-302, "1485679746116185", -301},
  {4.9592744534475668601938258e-65, "4959274453447567", -64},
  {2.7609769614045734987254534e-78, "27609769614045735", -77},
  {1.4854592053582722150713684e-27, "14854592053582722", -26},
  {1.2993697469512501670595848e+127, "12993697469512502", 128},
  {1.1462231162781570221211648e+25, "1146223116278157", 26},
  {7.5912036779565237728899277e-195, "7591203677956524", -194},
  {6.9708231123586018524761843e+193, "6970823112358602", 194},
  {5.9521565513546649180530032e+104, "5952156551354665", 105},
  {2.0336710972190689090715351e+298, "2033671097219069", 299},
  {9.6558600912981717776327843e+178, "9655860091298172", 179},
  {2.2096345907644480461209600e+24, "2209634590764448", 25},
  {8.3401402167117879266145681e+215, "8340140216711788", 216},
  {1.8940665180528481594780692e-137, "18940665180528482", -136},
  {2.9254241891597778175406543e-131, "2925424189159778", -130},
  {9.2400197518671618964842565e-75, "9240019751867162", -74},
  {3.7830623680005310859164778e-143, "3783062368000531", -142},
  {1.6271692949510145154833431e-279, "16271692949510145", -278},
  {1.1546236333680123492487881e+139, "11546236333680123", 140},
  {1.7447241198866297565560162e+196, "17447241198866298", 197},
  {3.2693003682659701780721662e+02, "326930036826597", 3},
  {5.7717413128498046778201232e+116, "5771741312849805", 117},
  {1.4683110010515235339424062e-124, "14683110010515235", -123},
  {1.7034585876598510352562932e+295, "1703458587659851", 296},
  {4.0787914494035825160404883e-238, "40787914494035825", -237},
  {3.1595276787150790479586270e-223, "3159527678715079", -222},
  {2.9328152883369752894924022e-122, "29328152883369753", -121},
  {1.2807860902878131596632046e+262, "12807860902878132", 263},
  {7.2613836679245281549226511e+181, "7261383667924528", 182},
  {3.2430511107228348967524845e-90, "3243051110722835", -89},
  {4.6096153803979490878617877e+276, "4609615380397949", 277},
  {1.8806552556018648427513556e-89, "1880655255601865", -88},
  {1.4243553714734075668292484e+49, "14243553714734076", 50},
  {8.3204194146979658133766499e+264, "8320419414697966", 265},
  {2.5635647921469328515983794e+158, "2563564792146933", 159},
  {3.7341773959736512207373501e-110, "3734177395973651", -109},
  {1.5323785559441160194284090e-26, "1532378555944116", -25},
  {9.6358051561642265678060792e+214, "9635805156164227", 215},
  {1.8072632960564778065818882e+171, "18072632960564778", 172},
  {9.1515827482275768707363380e-57, "9151582748227577", -56},
  {7.3462177241301747871663081e+154, "7346217724130175", 155},
  {1.1773299424820578350406690e-257, "11773299424820578", -256},
  {6.8481378770086370500679230e+233, "6848137877008637", 234},
  {1.1686780022879125775228853e-45, "11686780022879126", -44},
  {1.2779655034197864405696492e+167, "12779655034197864", 168},
  {5.0504140153448563747634085e-159, "5050414015344856", -158},
  {3.0393552797359169451272220e+45, "3039355279735917", 46},
  {2.1820371536580347647904530e-286, "21820371536580348", -285},
  {1.5712084814152200622115691e+246, "157120848141522", 247},
  {2.4059572658445471756650608e+31, "2405957265844547", 32},
  {3.5433533442243480013675412e-100, "3543353344224348", -99},
  {4.1145791848389534992350241e+135, "41145791848389535", 136},
  {4.9648155201871793573537642e+182, "49648155201871794", 183},
  {1.8098318847752944212397824e-240, "18098318847752944", -239},
  {1.1491941547872508629339604e-105, "11491941547872509", -104},
  {2.0759468592749915491137417e-129, "20759468592749915", -128},
  {4.9667068327826717169691240e+295, "4966706832782672", 296},
  {2.7000257872586324796252764e+41, "27000257872586325", 42},
  {1.3901688627422305201170670e+48, "13901688627422305", 49},
  {1.9319317701591134583611913e-22, "19319317701591135", -21},
  {7.0852625422069457418512342e+222, "7085262542206946", 223},
  {8.2568732707328724664029121e-272, "8256873270732872", -271},
  {1.3093819671488245151384575e-171, "13093819671488245", -170},
  {2.5498582861406979703191472e-222, "2549858286140698", -221},
  {2.6876352885653074267756401e+254, "26876352885653074", 255},
  {3.4611179384666901364720438e+102, "346111793846669", 103},
  {3.6058167861571263205026664e-68, "36058167861571263", -67},
  {3.1273968430234808689235067e+28, "3127396843023481", 29},
  {8.5126993879335048516594134e-82, "8512699387933505", -81},
  {7.8081252814204996211868999e+240, "78081252814205", 241},
  {4.0073165351969888151933993e+144, "4007316535196989", 145},
  {9.0506728337165038562032878e-11, "9050672833716504", -10},
  {6.8448854171018318909180000e-09, "6844885417101832", -8},
  {9.7694610791967353040645595e-218, "9769461079196735", -217},
  {1.2343080508837244073468994e-247, "12343080508837244", -246},
  {2.7856731409115461145690697e-254, "2785673140911546", -253},
  {3.0897635450473171098696414e+44, "3089763545047317", 45},
  {5.5879553520772210589838898e-25, "5587955352077221", -24},
  {1.0727147714502066097046303e+209, "10727147714502066", 210},
  {1.1384174788806515949323895e-200, "11384174788806516", -199},
  {1.7020156269381365352140363e+96, "17020156269381365", 97},
  {5.9281568112493089763023904e-248, "5928156811249309", -247},
  {2.2379929295408618525051123e-217, "2237992929540862", -216},
  {4.2456329993126065493617211e+248, "42456329993126065", 249},
  {1.1370371212085582828206479e+278, "11370371212085583", 279},
  {1.1332040406171307456773235e-13, "11332040406171307", -12},
  {1.4775423698188826904206656e+203, "14775423698188827", 204},
  {4.2289615126890272650968935e+170, "4228961512689027", 171},
  {4.8856194057449952777767552e+107, "4885619405744995", 108},
  {4.1665524302294635693541940e-191, "41665524302294636", -190},
  {6.2901554638519023399112484e+01, "6290155463851902", 2},
  {4.0036436986353102672325505e+72, "400364369863531", 73},
  {1.9537893627263597124632242e-242, "19537893627263597", -241},
  {2.7993944282724977254760332e-198, "27993944282724977", -197},
  {1.5185660221427031581361154e-11, "1518566022142703", -10},
  {8.1067055951075096395411773e-63, "810670559510751", -62},
  {1.9041108002155412872523752e-238, "19041108002155413", -237},
  {6.0221013101536640029267885e+188, "6022101310153664", 189},
  {9.1429502335103623483941123e-25, "9142950233510362", -24},
  {3.9646686815265662693265961e-140, "39646686815265663", -139},
  {2.9684179677381156984325860e-67, "2968417967738116", -66},
  {6.3273596894110959738996883e+289, "6327359689411096", 290},
  {1.2365950054817851360008950e-108, "12365950054817851", -107},
  {7.8686165332267495768062838e-259, "786861653322675", -258},
  {1.7202587267551846350086039e-170, "17202587267551846", -169},
  {5.5351279268388896384860397e-286, "553512792683889", -285},
  {2.2512745291819817682950608e+242, "2251274529181982", 243},
  {8.0460383951217752947057914e+132, "8046038395121775", 133},
  {1.4225411703754682219815869e-257, "14225411703754682", -256},
  {5.5549610481068094758506077e+51, "55549610481068095", 52},
  {7.5945633157908749693763355e+258, "7594563315790875", 259},
  {8.2021613228486358889327286e+268, "8202161322848636", 269},
  {3.0741127040728953339358346e+262, "30741127040728953", 263},
  {2.5976636286144314934570657e-276, "25976636286144315", -275},
  {1.6146726050930643688232122e-290, "16146726050930644", -289},
  {3.4834438227793821156622523e+299, "3483443822779382", 300},
  {2.6865172293205976244266956e-94, "26865172293205976", -93},
  {1.3453192444327980580319666e-96, "1345319244432798", -95},
  {6.3428048601282059680287204e+200, "6342804860128206", 201},
  {1.0825090245211271574966595e+248, "10825090245211272", 249},
  {5.1343870695240101315339372e-23, "513438706952401", -22},
  {6.8608839984416461043668981e-232, "6860883998441646", -231},
  {1.5500783137671280889395213e-121, "1550078313767128", -120},
  {1.6491201785211637775994574e+110, "16491201785211638", 111},
  {5.6438249258095427360112579e-13, "5643824925809543", -12},
  {4.5436499278934434187249281e+02, "45436499278934434", 3},
  {1.5626882077762756298055283e-277, "15626882077762756", -276},
  {1.2269885092709147798730393e+108, "12269885092709148", 109},
  {1.7465708550992975636432832e+253, "17465708550992976", 254},
  {8.9403391409976920024335525e+292, "8940339140997692", 293},
  {1.1999583466081975256689218e-32, "11999583466081975", -31},
  {1.0318105152072733330172267e+128, "10318105152072733", 129},
  {8.0536160546363280915222076e-33, "8053616054636328", -32},
  {5.5399928030404820743582637e-282, "5539992803040482", -281},
  {2.4589823561075643314014677e-60, "24589823561075643", -59},
  {7.1327473071758408212873659e+215, "7132747307175841", 216},
  {7.9623436692510399863032189e-273, "796234366925104", -272},
  {4.4248264795813832997516727e+160, "4424826479581383", 161},
  {2.1068433363720727716741759e-131, "21068433363720728", -130},
  {8.2170880502168970861938502e+130, "8217088050216897", 131},
  {1.7430810918138386490314014e-165, "17430810918138386", -164},
  {1.1735413375936181347517683e-278, "11735413375936181", -277},
  {1.3344956975441386840578283e-154, "13344956975441387", -153},
  {4.6183646347884085082757172e+70, "46183646347884085", 71},
  {8.4068736939745062863959990e+297, "8406873693974506", 298},
  {9.3813886184421349546758299e+289, "9381388618442135", 290},
  {9.9668788171586101657058208e+83, "996687881715861", 84},
  {2.1277711050588367899382253e+292, "2127771105058837", 293},
  {9.4199425463114536380561638e+225, "9419942546311454", 226},
  {2.0633934421576057295851176e-189, "20633934421576057", -188},
  {5.7370908161777009240789955e-294, "5737090816177701", -293},
  {6.1261474080677645139070321e+67, "6126147408067765", 68},
  {3.1390602772281571382694755e-106, "3139060277228157", -105},
  {3.3991106964327573724359646e+66, "3399110696432757", 67},
  {2.2389135061434013028755485e+92, "22389135061434013", 93},
  {6.7407055177597984833787554e+230, "67407055177597985", 231},
  {5.7398889974260025133690527e+186, "57398889974260025", 187},
  {5.2545383299940557740489553e-36, "5254538329994056", -35},
  {6.7636801640840553261798190e+115, "6763680164084055", 116},
  {4.6932550689768312433964121e-299, "4693255068976831", -298},
  {3.6538918250357946784884513e+75, "3653891825035795", 76},
  {7.5228049249407433339944647e-22, "7522804924940743", -21},
  {3.3755209568876045105405851e+189, "33755209568876045", 190},
  {4.1453546151272417963279085e+253, "4145354615127242", 254},
  {3.4698409486890601562500000e+13, "346984094868906", 14},
  {9.2900924938858292318818206e-46, "929009249388583", -45},
  {2.0295941928776881647908622e+74, "20295941928776882", 75},
  {2.5071908541826715940072537e+259, "25071908541826716", 260},
  {6.6996938159724409092376418e+222, "6699693815972441", 223},
  {9.9922946222514011482612295e+36, "9992294622251401", 37},
  {3.9448474098741706296729222e-256, "39448474098741706", -255},
  {1.4538802003731150486431095e-112, "1453880200373115", -111},
  {9.3281759404035686287423402e-45, "9328175940403569", -44},
  {2.2349891132305709482621352e-117, "2234989113230571", -116},
  {2.4654968887294820214809185e-140, "2465496888729482", -139},
  {1.9623738163996697920677535e-154, "19623738163996698", -153},
  {2.2284838067863644467474014e-188, "22284838067863644", -187},
  {1.1909639220142817507031144e-87, "11909639220142818", -86},
  {1.4041899815287305493808273e-114, "14041899815287305", -113},
  {2.3353560962587644642109591e+89, "23353560962587645", 90},
  {2.6575363113830840762724600e-104, "2657536311383084", -103},
  {1.1252844892835594859513203e-61, "11252844892835595", -60},
  {2.6063029866482879015790370e+237, "2606302986648288", 238},
  {7.2256198164804799121420916e-247, "722561981648048", -246},
  {5.5941504848732665777788498e+03, "5594150484873267", 4},
  {2.3677844098875327730459718e+257, "23677844098875328", 258},
  {6.7194847474906713165968237e+92, "6719484747490671", 93},
  {6.6156937436342048628065226e+211, "6615693743634205", 212},
  {6.2355385870217969877557129e-186, "6235538587021797", -185},
  {2.6287426953801476795007442e-32, "26287426953801477", -31},
  {8.7219849955414373078675281e+131, "8721984995541437", 132},
  {2.6970583023145301681333309e+34, "269705830231453", 35},
  {4.3456947374806408323818902e+164, "4345694737480641", 165},
  {1.9094079639929211179050663e+201, "1909407963992921", 202},
  {2.6630327920919271432356203e+281, "2663032792091927", 282},
  {2.1453486400261060367112794e+118, "2145348640026106", 119},
  {1.8157994777340858883712863e-161, "1815799477734086", -160},
  {3.0873782284569457640581449e-40, "30873782284569458", -39},
  {5.4651823609277520707978788e+258, "5465182360927752", 259},
  {8.0237847129184142546315779e+287, "8023784712918414", 288},
  {2.8757839596485175252398294e-289, "28757839596485175", -288},
  {2.0614438777002897437617458e+224, "20614438777002897", 225},
  {1.0695642776020674866976914e+36, "10695642776020675", 37},
  {2.9039101687978771371671969e-130, "2903910168797877", -129},
  {1.4813911198396135998018381e+280, "14813911198396136", 281},
  {4.8190310544311338847816545e-29, "4819031054431134", -28},
  {1.5335427893127559609719688e-163, "1533542789312756", -162},
  {2.6103875658822016513816678e-115, "26103875658822017", -114},
  {1.1679953325799210947336859e+134, "1167995332579921", 135},
  {2.8468674349824339592947418e+132, "2846867434982434", 133},
  {3.3682610444024788490005411e-233, "3368261044402479", -232},
  {2.0760194351605328534051920e+55, "20760194351605329", 56},
  {1.1870401874199660392504939e-291, "1187040187419966", -290},
  {2.8436441570167438776376883e-271, "2843644157016744", -270},
  {9.9088860901237754232239673e+181, "9908886090123775", 182},
  {3.1718157315657863128270970e-134, "31718157315657863", -133},
  {1.0513202934456762234419509e-262, "10513202934456762", -261},
  {4.0042164866277037978592272e+266, "4004216486627704", 267},
  {5.4850871913789675220298381e+302, "54850871913789675", 303},
  {2.8006377861572015312955196e+229, "28006377861572015", 230},
  {3.1785834336217587889763803e+134, "31785834336217588", 135},
  {3.7618834823529136887905581e+96, "37618834823529137", 97},
  {7.8685309324884288428819836e+148, "7868530932488429", 149},
  {5.4790270528825034077274853e-51, "5479027052882503", -50},
  {8.4708578415277528123224668e-148, "8470857841527753", -147},
  {3.6485335727042179902955532e+57, "3648533572704218", 58},
  {8.3726796571320996639963143e-66, "83726796571321", -65},
  {1.9498366598867363300162658e-04, "19498366598867363", -3},
  {5.0536192924272763732460212e+134, "5053619292427276", 135},
  {6.9338472463468579048479249e+111, "6933847246346858", 112},
  {1.9260297170368604848481638e+62, "19260297170368605", 63},
  {2.1689281841203620921968676e+167, "2168928184120362", 168},
  {1.4667383713198890257796723e-228, "1466738371319889", -227},
  {9.9574941594979109044425391e+302, "9957494159497911", 303},
  {3.0117257853670010550900232e-09, "3011725785367001", -8},
  {1.0677481314644056750679361e-105, "10677481314644057", -104},
  {8.1278396566138867824961620e-188, "8127839656613887", -187},
  {1.5720701144997229576110840e+09, "1572070114499723", 10},
  {8.8210325877498298159239088e+42, "882103258774983", 43},
  {3.3802670780021306116179435e-106, "33802670780021306", -105},
  {5.0509159829541096228535831e-68, "505091598295411", -67},
  {7.9964562502602327166528610e-20, "7996456250260233", -19},
  {2.4096827579090871299190440e+225, "2409682757909087", 226},
  {1.9922366231930101302037646e-291, "199223662319301", -290},
  {5.2448571446895173630474900e-102, "5244857144689517", -101},
  {3.8224372250351277378963686e-300, "3822437225035128", -299},
  {3.7006180832490304628527955e-164, "37006180832490305", -163},
  {2.2300340086174117473277797e+179, "22300340086174117", 180},
  {3.1911062194764115794873086e-263, "31911062194764116", -262},
  {5.3998324119870483479697514e-295, "5399832411987048", -294},
  {1.2892713321552739234973594e-259, "12892713321552739", -258},
  {1.5495593232976669042795227e-96, "1549559323297667", -95},
  {6.2020545351603787822902409e+140, "6202054535160379", 141},
  {3.5191311659238423495857044e-20, "35191311659238423", -19},
  {1.3072200241683768853814279e-202, "13072200241683769", -201},
  {9.9616580261398557517901083e-232, "9961658026139856", -231},
  {2.5518732478762843819559772e+75, "25518732478762844", 76},
  {1.8039211813627112573285546e+172, "18039211813627113", 173},
  {1.2766263499127895457795811e-145, "12766263499127895", -144},
  {7.0958933193817151617165219e+218, "7095893319381715", 219},
  {1.6652153024855544345535477e+289, "16652153024855544", 290},
  {1.3363949711020744659483020e-18, "13363949711020745", -17},
  {1.5445869937406296235678192e-177, "15445869937406296", -176},
  {1.9737401262207204836668251e-72, "19737401262207205", -71},
  {3.2030381222217960386884275e+50, "3203038122221796", 51},
  {5.5180858709732217979353363e-99, "5518085870973222", -98},
  {7.7774297431013498211497763e-212, "777742974310135", -211},
  {6.4314662090156283223044094e-74, "6431466209015628", -73},
  {2.6683515049024767025130242e-193, "26683515049024767", -192},
  {1.3616995834496000026010197e+173, "13616995834496", 174},
  {1.0741093663624730780838943e+40, "10741093663624731", 41},
  {4.3785898573659645831071498e-126, "43785898573659646", -125},
  {6.3239050594066988721831835e-39, "6323905059406699", -38},
  {1.3822589925575739109828090e+110, "13822589925575739", 111},
  {1.9994133070903433087870185e-05, "19994133070903433", -4},
  {4.9381594619868255930276311e-85, "49381594619868256", -84},
  {3.2365942315647868782474714e-26, "3236594231564787", -25},
  {3.9005148402119755911528027e-288, "39005148402119756", -287},
  {1.8268666505091559815225223e+124, "1826866650509156", 125},
  {1.7385644273863774634848062e+43, "17385644273863775", 44},
  {5.7232264468714948600086080e-297, "5723226446871495", -296},
  {1.8756728579200711613156494e-255, "18756728579200712", -254},
  {1.1238802789032086073036581e-106, "11238802789032086", -105},
  {1.6189766107435964979824864e-167, "16189766107435965", -166},
  {6.7230164928165324453619531e+149, "6723016492816532", 150},
  {2.1298923998669893831998049e+163, "21298923998669894", 164},
  {2.0630122517964576737432568e+198, "20630122517964577", 199},
  {4.9493845783688335360000000e+18, "4949384578368834", 19},
  {1.3885731023578400545099795e+72, "138857310235784", 73},
  {3.6894703328807962157998310e-103, "3689470332880796", -102},
  {8.8319905906898264301466893e-114, "8831990590689826", -113},
  {9.7556277649078607820453410e+108, "975562776490786", 109},
  {4.8642268666124435209468806e-131, "4864226866612444", -130},
  {1.6597164558433835965968960e+219, "16597164558433836", 220},
  {2.1860523462944726212129387e-150, "21860523462944726", -149},
  {2.5932820923992382210823651e-208, "25932820923992382", -207},
  {1.3182532237671467443558974e+216, "13182532237671467", 217},
  {8.0629001386745442616978432e-252, "8062900138674544", -251},
  {3.5150191064996358773769201e-266, "3515019106499636", -265},
  {3.5474923387701982648070841e-80, "3547492338770198", -79},
  {1.0749495512795408360686066e-91, "10749495512795408", -90},
  {2.8691853828877099852310112e+100, "286918538288771", 101},
  {2.9253375644187333826096165e+00, "29253375644187334", 1},
  {7.0351640362414587027132793e+266, "7035164036241459", 267},
  {1.6423492273765928648513801e+91, "1642349227376593", 92},
  {3.8840592954935112106958681e-126, "3884059295493511", -125},
  {5.9673716359314436026521893e+250, "5967371635931444", 251},
  {1.4641254216980241345010981e-295, "14641254216980241", -294},
  {2.4289824144553664934128636e-105, "24289824144553665", -104},
  {8.1908879918754694053040131e+107, "819088799187547", 108},
  {1.6528544749997483380116563e+214, "16528544749997483", 215},
  {4.3097116746991792141845712e-102, "4309711674699179", -101},
  {3.4999194322569448092562440e-170, "3499919432256945", -169},
  {1.2622360209133114029302690e-254, "12622360209133114", -253},
  {1.0872151200703177465022778e+109, "10872151200703177", 110},
  {4.8494903750111718203163660e+124, "4849490375011172", 125},
  {3.9338621513689617628811212e-235, "3933862151368962", -234},
  {4.5211021372739723973724329e-157, "45211021372739724", -156},
  {3.0453508953353288846499932e+211, "3045350895335329", 212},
  {2.7255775032710525036002197e+70, "27255775032710525", 71},
  {2.0965954547693813847594465e+109, "20965954547693814", 110},
  {2.2776678134859176342309316e-286, "22776678134859176", -285},
  {9.9562707804703918709447827e+224, "9956270780470392", 225},
  {1.8873680919531478900488513e-151, "1887368091953148", -150},
  {1.3040824109042259737240867e-55, "1304082410904226", -54},
  {7.5692894209510947596552997e-78, "7569289420951095", -77},
  {1.0155464487617572521415135e-109, "10155464487617573", -108},
  {4.4636650044736721020258888e-48, "4463665004473672", -47},
  {3.0476629319082631137202710e+80, "3047662931908263", 81},
  {3.8768842719880399243197032e-218, "387688427198804", -217},
  {7.8278433654858976121374889e+261, "7827843365485898", 262},
  {4.0694880430565209388732910e+09, "4069488043056521", 10},
  {8.3511542891287897678427433e-283, "835115428912879", -282},
  {1.8411086285501516403895922e-200, "18411086285501516", -199},
  {9.0933230265321796801897693e-137, "909332302653218", -136},
  {8.3740809313402398210422095e-78, "837408093134024", -77},
  {2.1954009925510392714394590e-46, "21954009925510393", -45},
  {1.2930446400275964435971605e-169, "12930446400275964", -168},
  {2.6203715748769045021291312e+54, "26203715748769045", 55},
  {2.9178189847180338488931764e+201, "2917818984718034", 202},
  {1.5915426887484886125277397e+215, "15915426887484886", 216},
  {1.0164006894893109181323451e-13, "10164006894893109", -12},
  {5.5445574437377300384202533e-125, "554455744373773", -124},
  {1.2424242025234100000000000e+14, "124242420252341", 15},
  {1.4020072434334815915967972e+218, "14020072434334816", 219},
  {5.3777538266213467640900435e-120, "5377753826621347", -119},
  {7.9767687695903214319606304e-83, "7976768769590321", -82},
  {1.1376051285972023405491708e-274, "11376051285972023", -273},
  {1.2824062271989998197556818e+193, "12824062271989998", 194},
  {1.9168671652704480162071929e-38, "1916867165270448", -37},
  {4.8428007054938332923862019e-179, "4842800705493833", -178},
  {2.6784307077065876113885067e+292, "26784307077065876", 293},
  {2.2572051007160602241142557e-180, "22572051007160602", -179},
  {8.1511017517760177826645072e-103, "8151101751776018", -102},
  {4.0439946511731929795410981e-105, "4043994651173193", -104},
  {1.6257390566811798850231895e+98, "162573905668118", 99},
  {8.9891488803933466203132899e+77, "8989148880393347", 78},
  {4.1180652123366027192733173e+229, "41180652123366027", 230},
  {1.2388122955051516162594947e-231, "12388122955051516", -230},
  {2.1304393334619841994625730e+255, "2130439333461984", 256},
  {2.4385398013256178951424371e-92, "2438539801325618", -91},
  {1.9520002857675906367562450e+233, "19520002857675906", 234},
  {4.7915280062679610595015809e+147, "4791528006267961", 148},
  {2.1714311083481004210905077e+119, "21714311083481004", 120},
  {8.3507582446090435172155858e+54, "8350758244609044", 55},
  {2.6839551698695952605494727e+151, "2683955169869595", 152},
  {6.9500917912560981653797373e+73, "6950091791256098", 74},
  {3.5257064250761473355244168e+220, "35257064250761473", 221},
  {5.4101557584361503116705186e-49, "541015575843615", -48},
  {9.3484255377543594330137404e-153, "9348425537754359", -152},
  {4.7061664801988028739666632e+157, "4706166480198803", 158},
  {1.5029054274778516924423829e+111, "15029054274778517", 112},
  {3.2442405864099858966556688e-274, "3244240586409986", -273},
  {2.9159846279832971094141721e+70, "2915984627983297", 71},
  {6.6659185056521199843938795e-221, "666591850565212", -220},
  {3.8989898066449001829004375e-129, "38989898066449", -128},
  {2.4849799452344332874193269e-161, "24849799452344333", -160},
  {2.4763940514925600913132447e-116, "247639405149256", -115},
  {1.6409266460736818470851598e-12, "16409266460736818", -11},
  {1.0287650722771939162019655e+202, "1028765072277194", 203},
  {4.4280150326865827547699351e-301, "4428015032686583", -300},
  {8.8130938241436692972032527e+243, "881309382414367", 244},
  {1.8636593798550177812158280e-279, "18636593798550178", -278},
  {2.9204826048117920190063168e-252, "2920482604811792", -251},
  {3.0655201956258864263300931e-66, "30655201956258864", -65},
  {1.6723494205874780587156559e-191, "1672349420587478", -190},
  {1.0342109860460212133994761e+106, "10342109860460212", 107},
  {4.3501618971931272172898048e-118, "4350161897193127", -117},
  {2.6763988958343924921904481e-19, "26763988958343925", -18},
  {6.9137888162622388335876167e+04, "6913788816262239", 5},
  {2.5517364316604651984963291e+135, "25517364316604652", 136},
  {1.7833133001303497747931093e+66, "17833133001303498", 67},
  {1.1175436030831348720001853e+208, "11175436030831349", 209},
  {5.0697720207332083586049540e-53, "5069772020733208", -52},
  {7.6085698538739839265051961e+279, "7608569853873984", 280},
  {2.1476034455595728197630857e-125, "21476034455595728", -124},
  {1.9858299591974599009863053e-200, "198582995919746", -199},
  {1.5866014570465361309955300e-198, "15866014570465361", -197},
  {2.3625878898812566528499072e+136, "23625878898812567", 137},
  {1.1681402425545117240768435e+216, "11681402425545117", 217},
  {7.3797245242144291565738011e-126, "7379724524214429", -125},
  {2.8332311973605912274971291e+61, "2833231197360591", 62},
  {5.8712287285677237216031703e+70, "5871228728567724", 71},
  {2.1327538753275990426323368e-277, "2132753875327599", -276},
  {4.9437145022239876761900904e+94, "4943714502223988", 95},
  {2.0444854112138212673137676e-29, "20444854112138213", -28},
  {9.9074077870369121956507302e+207, "9907407787036912", 208},
  {8.0304253879784682052276420e-17, "8030425387978468", -16},
  {5.9047734797045930969218852e+122, "5904773479704593", 123},
  {1.7617659359731786754456716e+186, "17617659359731787", 187},
  {1.6130426003415469066739727e-139, "16130426003415469", -138},
  {2.7716330203105231682650570e-94, "2771633020310523", -93},
  {1.5500166533268819350093405e-125, "1550016653326882", -124},
  {2.1482805340715981461258240e+25, "2148280534071598", 26},
  {3.0771735398670250413064852e-122, "3077173539867025", -121},
  {7.2027880396175580642398449e-53, "7202788039617558", -52},
  {3.8791459656799645657102634e-260, "38791459656799646", -259},
  {1.5835470303661325686634650e-233, "15835470303661326", -232},
  {9.2115785860170801312714885e+122, "921157858601708", 123},
  {1.4395115019961037824576390e-300, "14395115019961038", -299},
  {2.9728612678694894749727781e-292, "29728612678694895", -291},
  {1.7776919803504856229803344e-111, "17776919803504856", -110},
  {4.1250833349810260801027251e-78, "4125083334981026", -77},
  {5.9876469486061909654228924e+101, "5987646948606191", 102},
  {1.3517054457892722591869029e+99, "13517054457892723", 100},
  {2.5607978488997515506810449e+289, "25607978488997516", 290},
  {6.0807636048313898114448289e+260, "608076360483139", 261},
  {4.5245726937099224223150730e-231, "45245726937099224", -230},
  {4.8079052183679907184218513e+182, "4807905218367991", 183},
  {1.8724096471193576145100807e+201, "18724096471193576", 202},
  {9.2989321919728130629436051e-247, "9298932191972813", -246},
  {1.7353973595386652483636159e-164, "17353973595386652", -163},
  {9.8857935403100413274894640e+216, "9885793540310041", 217},
  {8.3983655080894378541869610e-190, "8398365508089438", -189},
  {8.3242672862883091137740723e+140, "8324267286288309", 141},
  {2.4379978479436362204246791e-02, "24379978479436362", -1},
  {4.5237574385068786664296055e+274, "4523757438506879", 275},
  {9.7558230921210692857825410e+55, "9755823092121069", 56},
  {1.9477788412099054763795310e-50, "19477788412099055", -49},
  {1.8436841443071631235209596e+143, "18436841443071631", 144},
  {4.7669474486022545714632544e+267, "4766947448602255", 268},
  {6.0002911303993204888584908e-111, "60002911303993205", -110},
  {8.1454401910825174695467223e-170, "8145440191082517", -169},
  {2.2648348085231670758788527e-217, "2264834808523167", -216},
  {5.7738592338685876112172539e-189, "5773859233868588", -188},
  {8.3313639304594429147748806e+298, "8331363930459443", 299},
  {2.0897770753258269465840166e+130, "2089777075325827", 131},
  {1.1151210907007270655043581e+72, "1115121090700727", 73},
  {7.4426511133336136978167584e+211, "7442651113333614", 212},
  {5.3134998792570121040614525e+230, "5313499879257012", 231},
  {6.8738959506876738016195862e-43, "6873895950687674", -42},
  {6.4238254099617087833967068e+256, "6423825409961709", 257},
  {2.0427309071198950429240241e-25, "2042730907119895", -24},
  {2.0780588570726279503459417e+216, "2078058857072628", 217},
  {2.3376400955059816853808294e+97, "23376400955059817", 98},
  {1.6632519898484844309050661e-61, "16632519898484844", -60},
  {1.1824064347674676262231907e+226, "11824064347674676", 227},
  {3.1328448082231749735916046e-22, "3132844808223175", -21},
  {2.7943528422906544738688833e+72, "27943528422906545", 73},
  {1.1166294029121258921175119e+98, "11166294029121259", 99},
  {3.7494337971980587384176640e+25, "37494337971980587", 26},
  {7.4655756436327572338746396e+102, "7465575643632757", 103},
  {8.2673266469179734807178720e-31, "8267326646917973", -30},
  {1.6357118991885219802263872e-10, "1635711899188522", -9},
  {1.5070353157066637346815058e-272, "15070353157066637", -271},
  {1.9688408906497890910051346e-40, "1968840890649789", -39},
  {2.9672947107430007080072687e-33, "29672947107430007", -32},
  {3.4105732689168299141229568e+274, "341057326891683", 275},
  {6.6996408817041105024090042e-296, "669964088170411", -295},
  {1.2926346902754728327090373e-148, "12926346902754728", -147},
  {2.0251001087697184960175294e-255, "20251001087697185", -254},
  {4.5182727915224013845205618e+53, "4518272791522401", 54},
  {2.2814437211392872017408325e+126, "22814437211392872", 127},
  {3.8383595846604751023657452e+27, "3838359584660475", 28},
  {1.4676865994447235597547225e-176, "14676865994447236", -175},
  {5.8474906933412000428537649e+133, "58474906933412", 134},
  {1.1427223015354630168686745e-284, "1142722301535463", -283},
  {4.4785243977159851591912417e-238, "4478524397715985", -237},
  {2.4779587703052310936794130e+33, "2477958770305231", 34},
  {8.8044237707399421279589374e-209, "8804423770739942", -208},
  {5.1146018924701129429362913e+245, "5114601892470113", 246},
  {2.0983489868843003077004692e-26, "20983489868843003", -25},
  {1.7157333407967801971775001e+276, "17157333407967802", 277},
  {3.5298001036379981062897943e-113, "3529800103637998", -112},
  {1.9339647395083887944048304e+234, "19339647395083888", 235},
  {3.9615706280693998041230230e+92, "39615706280694", 93},
  {1.5314240363817244311358931e+105, "15314240363817244", 106},
  {1.9265017493710227559691031e-200, "19265017493710228", -199},
  {2.3332297065583533088708970e-279, "23332297065583533", -278},
  {3.0902158356642745802399486e-285, "30902158356642746", -284},
  {9.8557232932318165873435397e-100, "9855723293231817", -99},
  {1.5681879453231336899717358e+240, "15681879453231337", 241},
  {2.8105699445513723791013817e+72, "28105699445513724", 73},
  {6.1047749974524513702790804e+140, "6104774997452451", 141},
  {1.2470307862510866436489637e-273, "12470307862510866", -272},
  {6.4565941426014286247449238e-186, "6456594142601429", -185},
  {1.3930429527131743933612978e+133, "13930429527131744", 134},
  {2.9369567263775524963788201e-257, "29369567263775525", -256},
  {1.3859052272354600117873179e-282, "138590522723546", -281},
  {6.6014088196652728706640845e-152, "6601408819665273", -151},
  {2.9632037466914901253011464e+137, "296320374669149", 138},
  {6.2885129558684126321032499e-65, "6288512955868413", -64},
  {3.8383440884992690980104110e-31, "3838344088499269", -30},
  {3.2294136490530208326254622e-138, "3229413649053021", -137},
  {4.5757455587856183041230923e-254, "4575745558785618", -253},
  {1.2926229655566419597545737e+252, "1292622965556642", 253},
  {4.0401543130703147249946268e-242, "4040154313070315", -241},
  {1.8745776013089574894446029e+137, "18745776013089575", 138},
  {1.3823735341695396491751967e+75, "13823735341695396", 76},
  {1.9353071390193126986051874e-290, "19353071390193127", -289},
  {5.9338298604772745312309716e-137, "5933829860477275", -136},
  {5.1907576993385464240026991e-21, "51907576993385464", -20},
  {4.9228613604796044448935821e-175, "49228613604796044", -174},
  {3.9414238541192700219394867e-104, "394142385411927", -103},
  {1.0632061359598493794411209e-107, "10632061359598494", -106},
  {1.1273400483522716741318710e+57, "11273400483522717", 58},
  {5.7164734789035524938493677e-279, "57164734789035525", -278},
  {1.3039531963329741259348288e-33, "13039531963329741", -32},
  {4.3892782479671673428048264e+240, "4389278247967167", 241},
  {1.4943325122878287148183399e-182, "14943325122878287", -181},
  {2.7735778829662190118051978e+187, "2773577882966219", 188},
  {7.3760279578855084894483788e-168, "73760279578855085", -167},
  {1.3227838812590524535567336e-115, "13227838812590525", -114},
  {1.9019764078054578045694349e-21, "19019764078054578", -20},
  {1.1554866626157505497597411e-35, "11554866626157505", -34},
  {7.8286047972046735370603975e-186, "7828604797204674", -185},
  {4.0342238473321429882942641e-153, "4034223847332143", -152},
  {2.1220988799738318728232788e-236, "2122098879973832", -235},
  {1.1362997344582979464347959e-135, "1136299734458298", -134},
  {4.5842515381174293213266918e-185, "4584251538117429", -184},
  {1.4893167670702938045619951e-97, "14893167670702938", -96},
  {1.3196918785077012780215835e+197, "13196918785077013", 198},
  {2.8845225698215135681695184e+141, "28845225698215136", 142},
  {8.3978158396099241466204681e-232, "8397815839609924", -231},
  {1.1640093969101432923924009e+277, "11640093969101433", 278},
  {1.7350279741078289935719706e+264, "1735027974107829", 265},
  {7.5732644517626460091768690e-27, "7573264451762646", -26},
  {1.4081976736936706944604127e-24, "14081976736936707", -23},
  {5.9682518057052657886110735e+48, "5968251805705266", 49},
  {1.1246659175560154044166035e-89, "11246659175560154", -88},
  {2.6877490193082316010862221e-124, "26877490193082316", -123},
  {1.1790542926771872855901905e+122, "11790542926771873", 123},
  {3.4207534931775349512952240e+245, "3420753493177535", 246},
  {1.5808729745713870726832938e+220, "1580872974571387", 221},
  {2.0650458450533340397927244e-69, "2065045845053334", -68},
  {2.9477983311455176733291709e+81, "29477983311455177", 82},
  {1.2221146844857170303212438e+120, "1222114684485717", 121},
  {4.1663242906352656139318669e-87, "4166324290635266", -86},
  {6.7132952712105228818474005e-90, "6713295271210523", -89},
  {9.0622409894924076705006731e-49, "9062240989492408", -48},
  {6.5566440642521278824866571e+158, "6556644064252128", 159},
  {8.1353911962909418441734829e+291, "8135391196290942", 292},
  {3.6735555547104103344346315e+211, "36735555547104103", 212},
  {5.7144702792988926868850569e+295, "5714470279298893", 296},
  {7.5311726364873901137524776e+168, "753117263648739", 169},
  {1.6202105572654923081491700e+229, "16202105572654923", 230},
  {8.3310418694542950970010749e-12, "8331041869454295", -11},
  {3.5873212104962447678698389e+66, "3587321210496245", 67},
  {3.1242689793842706698744391e-124, "31242689793842707", -123},
  {3.7249972782993574083929816e+173, "37249972782993574", 174},
  {7.5970486366595859585430897e+217, "7597048636659586", 218},
  {6.5432186332726860471539610e-69, "6543218633272686", -68},
  {3.7995567092232553783465205e-22, "37995567092232554", -21},
  {4.1077621825610387603230921e+34, "41077621825610388", 35},
  {4.4540794869863056039887477e-105, "44540794869863056", -104},
  {4.1783841261399014241469825e+242, "41783841261399014", 243},
  {2.3157862091873657454001418e+138, "23157862091873657", 139},
  {1.3202818769993618942363270e-257, "13202818769993619", -256},
  {7.1141891066099646216100570e+133, "7114189106609965", 134},
  {2.9985461617583297836510738e-189, "29985461617583298", -188},
  {1.2707617973042142357264258e+100, "12707617973042142", 101},
  {7.3740202114515546558045179e+52, "7374020211451555", 53},
  {1.8753215165854432457315455e-117, "18753215165854432", -116},
  {7.8807758784707212920653383e-106, "7880775878470721", -105},
  {3.0513818134623145277668546e+258, "30513818134623145", 259},
  {7.7115157967584686466705470e+117, "7711515796758469", 118},
  {4.4781231501724957459706636e+58, "4478123150172496", 59},
  {9.1523217979414262379263340e-257, "9152321797941426", -256},
  {8.5748447813170305386136488e+237, "857484478131703", 238},
  {1.8715165608877043501578896e-01, "18715165608877044", 0},
  {4.4171150860746309626847506e+05, "4417115086074631", 6},
  {1.1145203734342390317702591e-205, "1114520373434239", -204},
  {3.7564336080229007467925895e-120, "3756433608022901", -119},
  {1.9963580240409706675461645e+301, "19963580240409707", 302},
  {3.6496644066022709867520310e+284, "3649664406602271", 285},
  {1.8617980113160492181735949e+195, "18617980113160492", 196},
  {8.4615636421760664848612995e-43, "8461563642176066", -42},
  {1.8219662779687086873166781e+177, "18219662779687087", 178},
  {2.1878624559243849575941986e+111, "2187862455924385", 112},
  {9.4251124951222709829372067e-99, "9425112495122271", -98},
  {1.1357712167088888213015537e-179, "11357712167088888", -178},
  {8.6788912306991497163744071e-31, "867889123069915", -30},
  {8.9992793052574478230569725e-222, "8999279305257448", -221},
  {1.4684792377402453896068136e-95, "14684792377402454", -94},
  {5.9311148679491005866548563e-240, "5931114867949101", -239},
  {4.9149945035085667325117948e+163, "4914994503508567", 164},
  {1.6442595813492320427372376e+40, "1644259581349232", 41},
  {2.6513849198098827407303098e-254, "26513849198098827", -253},
  {4.4410175144368680179887915e+114, "4441017514436868", 115},
  {2.5279372573264665865266430e-203, "25279372573264666", -202},
  {2.8089457039357000698448497e-04, "28089457039357", -3},
  {4.1064343814640179975088476e-171, "4106434381464018", -170},
  {5.6308422269620836401357504e+229, "5630842226962084", 230},
  {6.8769684943753830625732813e-307, "6876968494375383", -306},
  {1.1267782341864694383923176e-135, "11267782341864694", -134},
  {2.2390184357799070003534985e+250, "2239018435779907", 251},
  {3.4172203404749202675731648e+222, "341722034047492", 223},
  {2.7191558030531658939285466e+236, "2719155803053166", 237},
  {1.7720681192643117548034677e+63, "17720681192643118", 64},
  {3.8846896967061285675783965e+86, "38846896967061286", 87},
  {2.2453369837056229388404819e-68, "2245336983705623", -67},
  {9.8535488772252559143863401e-306, "9853548877225256", -305},
  {2.0105788531636691050282599e-184, "2010578853163669", -183},
  {2.5518220977198923067941217e-140, "25518220977198923", -139},
  {1.7783792720594178046735229e+74, "17783792720594178", 75},
  {6.9657205021176634763117206e+307, "6965720502117663", 308},
  {3.0528250667136587849682914e-120, "30528250667136588", -119},
  {6.6452043121540930567176653e+237, "6645204312154093", 238},
  {2.7601216038136716490612130e-119, "27601216038136716", -118},
  {2.7049168962183379367739132e+104, "2704916896218338", 105},
  {9.3718721884000977963513272e-185, "9371872188400098", -184},
  {2.5166977506727554917358802e-100, "25166977506727555", -99},
  {2.3170913521643679646316129e-201, "2317091352164368", -200},
  {9.3024023818818757256503687e-137, "9302402381881876", -136},
  {1.2925766595691175482047087e-30, "12925766595691175", -29},
  {6.2981906939599807485838670e+186, "6298190693959981", 187},
  {1.8496990683106253906228512e+168, "18496990683106254", 169},
  {1.4225049395845896261747511e-238, "14225049395845896", -237},
  {6.0195526053550100462684219e-168, "601955260535501", -167},
  {3.2368385717980972906216603e-267, "32368385717980973", -266},
  {2.4491275333455450112000000e+19, "2449127533345545", 20},
  {9.2323515282979001580400699e-264, "92323515282979", -263},
  {5.9379352580341090965612905e+77, "5937935258034109", 78},
  {2.9503792995881129969429224e-233, "2950379299588113", -232},
  {2.0202809283129297867890834e+304, "20202809283129298", 305},
  {2.8568585505548094383978959e+259, "28568585505548094", 260},
  {8.8925220668785773666366782e-97, "8892522066878577", -96},
  {1.7925246028116046817858196e+284, "17925246028116047", 285},
  {3.9303832640840595610691174e+30, "39303832640840596", 31},
  {1.2152000237272340551901676e+64, "1215200023727234", 65},
  {2.8170874868338844168039037e-290, "28170874868338844", -289},
  {1.0846253950590311342498877e-285, "10846253950590311", -284},
  {9.0848296717228984832763672e+08, "9084829671722898", 9},
  {3.2537269624375948268484332e+99, "3253726962437595", 100},
  {9.2847812824717843460428934e-250, "9284781282471784", -249},
  {8.0111185976633639929844465e+110, "8011118597663364", 111},
  {2.9840376837949324326710734e-183, "29840376837949324", -182},
  {1.5148147559062176513529157e+305, "15148147559062177", 306},
  {5.2697431531229001961644169e+307, "52697431531229", 308},
  {4.3148656714782322192122053e-268, "4314865671478232", -267},
  {9.2747370664928278899716471e+298, "9274737066492828", 299},
  {3.5856142251295572109238266e-298, "3585614225129557", -297},
  {4.8531155835833286197633524e-225, "48531155835833286", -224},
  {4.3535133590101920000000000e+15, "4353513359010192", 16},
  {1.1119893314714825418478826e-209, "11119893314714825", -208},
  {5.9931173118073368042076669e+305, "5993117311807337", 306},
  {1.1302292185460196933369856e+25, "11302292185460197", 26},
  {4.0629545848374214625516171e-231, "40629545848374215", -230},
  {4.4630384955175817284736996e-171, "4463038495517582", -170},
  {2.8132570389059351596465808e-217, "2813257038905935", -216},
  {2.3567736944888972456172434e+126, "23567736944888972", 127},
  {1.6499030145521740881957943e-155, "1649903014552174", -154},
  {9.5107458507828499111688045e-57, "951074585078285", -56},
  {2.1137527277373579357586655e+288, "2113752727737358", 289},
  {5.4200073255885510598330288e+194, "5420007325588551", 195},
  {1.5184646495323941678371166e-234, "15184646495323942", -233},
  {2.0587234454685322641973827e-100, "20587234454685323", -99},
  {3.5663236455773884882636182e-215, "35663236455773885", -214},
  {2.3743488702233190663986299e+268, "2374348870223319", 269},
  {2.0213849275422134205964072e+273, "20213849275422134", 274},
  {8.3171550158059645593617403e-287, "8317155015805965", -286},
  {4.2802220477969440305795536e+159, "4280222047796944", 160},
  {1.1228760125485746515129744e-192, "11228760125485747", -191},
  {4.0962717408923383951317567e-261, "4096271740892338", -260},
  {1.6835123304409621100205406e+162, "16835123304409621", 163},
  {1.5083288966624259732270613e+304, "1508328896662426", 305},
  {1.4603815286126755334298827e-126, "14603815286126755", -125},
  {1.7558395646866662885630544e+299, "17558395646866663", 300},
  {7.2344677006831641807139089e-86, "7234467700683164", -85},
  {2.0608365405733114418709985e-100, "20608365405733114", -99},
  {1.1498157806960109784300627e+277, "1149815780696011", 278},
  {8.5809868396768417968750000e+12, "8580986839676842", 13},
  {6.5276200198120785503919192e+57, "6527620019812079", 58},
  {2.0307887471552088526275133e-171, "20307887471552089", -170},
  {2.0423861197249527773244720e-103, "20423861197249528", -102},
  {2.3569706142778786704775297e-12, "23569706142778787", -11},
  {2.7601861292088009327264554e-157, "2760186129208801", -156},
  {1.3853472354272907378514723e+259, "13853472354272907", 260},
  {7.5332748657482078383914613e+67, "7533274865748208", 68},
  {1.5607178391105612437744367e-99, "15607178391105612", -98},
  {1.8731253445827353654626935e-263, "18731253445827354", -262},
  {1.8561884483216808356194117e+251, "18561884483216808", 252},
  {7.6454077267022639330485345e-59, "7645407726702264", -58},
  {2.4580969176540994117038525e+82, "24580969176540994", 83},
  {4.7741547483217806292690993e+137, "4774154748321781", 138},
  {9.5371287996283786974494460e+170, "9537128799628379", 171},
  {1.5873246389747341425961566e+277, "15873246389747341", 278},
  {7.9041281214756312717894428e+207, "7904128121475631", 208},
  {5.3537876641041198858094950e+37, "535378766410412", 38},
  {1.4674504359233980857925933e-208, "1467450435923398", -207},
  {1.7219008109254871221134260e+167, "1721900810925487", 168},
  {1.9384335424622448561824177e-132, "1938433542462245", -131},
  {3.2466309966574007577192619e-283, "32466309966574008", -282},
  {2.8081000790146437983167395e-168, "2808100079014644", -167},
  {4.5175835992604636030132627e+126, "45175835992604636", 127},
  {1.5945673049731837189746386e-03, "15945673049731837", -2},
  {6.6092082653944152223363938e-242, "6609208265394415", -241},
  {1.2512613755199763821149460e+148, "12512613755199764", 149},
  {3.3021670632935166933695876e+195, "33021670632935167", 196},
  {6.9763828478287248584445673e+80, "6976382847828725", 81},
  {1.4237160165425857711650468e-160, "14237160165425858", -159},
  {8.2999387893294839730358889e-78, "8299938789329484", -77},
  {5.6590871666549520593506191e-167, "5659087166654952", -166},
  {2.1816094772999516093691295e-307, "21816094772999516", -306},
  {5.5579674412041540471739716e+190, "5557967441204154", 191},
  {8.1348726025382555643038592e+302, "8134872602538256", 303},
  {4.5167870096485272644261873e+275, "4516787009648527", 276},
  {4.3059264732720931945481835e-130, "4305926473272093", -129},
  {1.5666985137168968076581842e+66, "15666985137168968", 67},
  {1.6429020383931009552381401e-60, "1642902038393101", -59},
  {2.0288318650600556210849824e+106, "20288318650600556", 107},
  {4.7487336418048891263422006e+185, "4748733641804889", 186},
  {5.9197007873404314751557054e-297, "59197007873404315", -296},
  {1.6859472842677676821724950e-269, "16859472842677677", -268},
  {6.7215827095536207994442542e-19, "6721582709553621", -18},
  {9.3332097886345365720184619e-116, "9333209788634537", -115},
  {1.5242065895844828062246461e-267, "15242065895844828", -266},
  {1.3345254025840780306538099e+66, "1334525402584078", 67},
  {6.8307478938662493437784182e+267, "6830747893866249", 268},
  {4.1043689905601039373836392e-134, "4104368990560104", -133},
  {2.2565816509959227781089913e+234, "22565816509959228", 235},
  {6.3858824959124576480032107e-37, "6385882495912458", -36},
  {1.4758626837070033962610391e+242, "14758626837070034", 243},
  {7.1256293469904500433455202e-71, "712562934699045", -70},
  {6.9913537416871375041961693e+289, "69913537416871375", 290},
  {3.1081654294392427117507054e-75, "31081654294392427", -74},
  {1.1915950523377326075883550e+235, "11915950523377326", 236},
  {4.6081115968688444980175523e+169, "46081115968688445", 170},
  {1.6070746904280772187209230e+222, "16070746904280772", 223},
  {5.5521227635046439682161103e-251, "5552122763504644", -250},
  {1.9935365753399671980810729e+42, "19935365753399672", 43},
  {2.5421426743882278843830098e-30, "2542142674388228", -29},
  {4.2991738329068002627207540e-48, "42991738329068", -47},
  {3.0439278945195776959576110e-200, "30439278945195777", -199},
  {8.4663777035455994416828609e-211, "84663777035456", -210},
  {1.0769316184266926175203918e+271, "10769316184266926", 272},
  {1.9843929047837384442507422e+59, "19843929047837384", 60},
  {5.2616226883527069027825777e-71, "5261622688352707", -70},
  {2.7600058114294570844374379e+298, "2760005811429457", 299},
  {3.6992282438363339811474360e-25, "3699228243836334", -24},
  {4.8581812342699633275529751e+285, "4858181234269963", 286},
  {1.5628094625234539670873488e+152, "1562809462523454", 153},
  {1.6679155972660530034189037e+130, "1667915597266053", 131},
  {2.6242259589790756048592607e+181, "26242259589790756", 182},
  {3.4005966712106499276214773e-79, "340059667121065", -78},
  {1.7091070433309665539495499e+280, "17091070433309666", 281},
  {1.2194465310636160048634526e+272, "1219446531063616", 273},
  {3.7470483627539426296876777e+226, "37470483627539426", 227},
  {1.9798856931911509018391371e+06, "1979885693191151", 7},
  {1.8567220494463868137315235e-221, "18567220494463868", -220},
  {1.0766492242530479537857026e-147, "1076649224253048", -146},
  {2.6293412612524912186722791e-76, "26293412612524912", -75},
  {1.3336249199053742636571491e+31, "13336249199053743", 32},
  {1.9249700660240511995663504e-159, "19249700660240512", -158},
  {6.9406246092334143582435018e-247, "6940624609233414", -246},
  {4.9661282998897601314998264e-191, "496612829988976", -190},
  {7.6486537366161353702952931e+195, "7648653736616135", 196},
  {3.4685643801028458873859106e+78, "3468564380102846", 79},
  {1.9982388707306476179597962e-218, "19982388707306476", -217},
  {5.5860453845470468955433778e-161, "5586045384547047", -160},
  {4.5722922526852199653998421e+55, "457229225268522", 56},
  {2.4059740358559546236083548e-02, "24059740358559546", -1},
  {7.2990405478948951938435658e-62, "7299040547894895", -61},
  {6.9459795743995313355543972e-277, "6945979574399531", -276},
  {1.9803856465665225303939965e+198, "19803856465665225", 199},
  {1.7030622895532285145696705e-24, "17030622895532285", -23},
  {1.4491330132093326828448469e-07, "14491330132093327", -6},
  {6.8738851758185643865773368e-295, "6873885175818564", -294},
  {2.7121360969534705454184237e+269, "27121360969534705", 270},
  {1.7105168434909552457034550e+55, "17105168434909552", 56},
  {1.6203193449432491691288644e+91, "16203193449432492", 92},
  {5.1119115678081183535027325e+198, "5111911567808118", 199},
  {1.1233635017814957922993942e+127, "11233635017814958", 128},
  {2.1313600573952045404795861e+214, "21313600573952045", 215},
  {3.1692508754587333610956176e+242, "31692508754587334", 243},
  {1.1973578817916278451749744e-240, "11973578817916278", -239},
  {8.7506562829049849448854987e-144, "8750656282904985", -143},
  {6.4630987503389652935530397e+143, "6463098750338965", 144},
  {1.3680543607045486709657582e-17, "13680543607045487", -16},
  {4.4872538445836416670650796e-69, "44872538445836417", -68},
  {1.4307408433365408645952667e+104, "14307408433365409", 105},
  {5.3576260785618697474935115e+143, "535762607856187", 144},
  {1.5583916764588506278111809e-221, "15583916764588506", -220},
  {3.7164007111503264002950894e-204, "37164007111503264", -203},
  {3.5639698089902331938344192e+242, "3563969808990233", 243},
  {1.0672941301688816000000000e+16, "10672941301688816", 17},
  {9.0393032417426642492427245e-203, "9039303241742664", -202},
  {7.8978569738121130000000000e+15, "7897856973812113", 16},
  {8.4842594324168985809217748e-54, "8484259432416899", -53},
  {3.3734922553739251682240362e-235, "3373492255373925", -234},
  {9.4380915817585191886854441e-180, "943809158175852", -179},
  {8.2687542455269507020034786e+194, "8268754245526951", 195},
  {1.8003594539391972500000000e+15, "18003594539391972", 16},
  {1.6825038916684029615307337e-142, "1682503891668403", -141},
  {2.1067842291436854087245837e-184, "21067842291436854", -183},
  {3.2512531572730494192343685e+162, "32512531572730494", 163},
  {4.8859570858610956133097708e-182, "48859570858610956", -181},
  {4.6673984408532336351711330e+52, "46673984408532336", 53},
  {6.6065681649929973045168836e-57, "6606568164992997", -56},
  {1.3200460243495352443461517e+224, "13200460243495352", 225},
  {1.7990703575014830677988212e+78, "1799070357501483", 79},
  {3.7684963391648956230309159e+185, "37684963391648956", 186},
  {7.1636595378275255688459456e-231, "7163659537827526", -230},
  {4.4622337739924210937500000e+13, "4462233773992421", 14},
  {1.1729533594712392888123241e-51, "11729533594712393", -50},
  {4.1559349433536579836419038e+99, "4155934943353658", 100},
  {3.0431715041998761471126882e+260, "3043171504199876", 261},
  {1.4739806657220410233978150e+306, "1473980665722041", 307},
  {1.2050504398261768243834861e+241, "12050504398261768", 242},
  {4.0670767708988230735827886e+284, "4067076770898823", 285},
  {5.4650501136211053834838322e-108, "54650501136211054", -107},
  {6.9175300570995800010866310e+160, "691753005709958", 161},
  {1.5396756297685463777429864e-226, "15396756297685464", -225},
  {5.8649597681316393461466874e+91, "5864959768131639", 92},
  {3.9493054719307490374476597e+87, "3949305471930749", 88},
  {5.8689960513377203384267294e-158, "586899605133772", -157},
  {8.0416757775915197188646031e+279, "804167577759152", 280},
  {1.9204925305115783298863090e+234, "19204925305115783", 235},
  {5.6644349222072044016735155e+188, "5664434922207204", 189},
  {1.1465418294989581023163538e-115, "1146541829498958", -114},
  {9.9310981154935591574926427e+297, "9931098115493559", 298},
  {2.0140085266622215094553527e-20, "20140085266622215", -19},
  {2.5905464065726815299174400e+23, "25905464065726815", 24},
  {8.2015198731186888712492220e+37, "8201519873118689", 38},
  {3.0905695651152052577186221e-173, "30905695651152053", -172},
  {1.4103634755357699546131478e+221, "141036347553577", 222},
  {1.1397004955830852535942829e+46, "11397004955830853", 47},
  {4.6124538290732699250049875e+282, "461245382907327", 283},
  {3.9744116516621448441599246e-147, "3974411651662145", -146},
  {1.0380487651998580151887661e+96, "1038048765199858", 97},
  {2.3671373723724691640609941e-94, "23671373723724692", -93},
  {5.9262791245031504304722502e+306, "592627912450315", 307},
  {2.4281907312747624527553680e+151, "24281907312747625", 152},
  {3.0578730683592962832573070e+239, "30578730683592963", 240},
  {6.9510830043762128644239834e-270, "6951083004376213", -269},
  {8.5372604742368649130960223e+145, "8537260474236865", 146},
  {1.3063385951135819296065238e-94, "1306338595113582", -93},
  {1.7376365949138681243947661e-134, "17376365949138681", -133},
  {1.7291498544194513797120000e+21, "17291498544194514", 22},
  {6.7378784881657069955587854e-280, "6737878488165707", -279},
  {1.9331315142579106047450023e-82, "19331315142579106", -81},
  {1.4606802645220551972963949e+84, "14606802645220552", 85},
  {1.2020216404582040761987657e+148, "12020216404582041", 149},
  {2.1639453656034968554260022e-97, "21639453656034969", -96},
  {3.2613989562216878230189140e-220, "3261398956221688", -219},
  {7.3530527400057208905417376e-267, "7353052740005721", -266},
  {5.9473311759555834002285999e+29, "59473311759555834", 30},
  {1.7096513117611078608386992e+57, "1709651311761108", 58},
  {1.5952744659596037722198714e-69, "15952744659596038", -68},
  {8.9347652293517694691548166e+88, "893476522935177", 89},
  {2.0541748363184467017735431e-168, "20541748363184467", -167},
  {6.7601738725878029801278410e-230, "6760173872587803", -229},
  {1.4160269464582724345037459e-231, "14160269464582724", -230},
  {1.2298244793469368833522288e-269, "12298244793469369", -268},
  {6.1898711570324620583155900e-52, "6189871157032462", -51},
  {4.5340887253791996256780274e+206, "45340887253791996", 207},
  {7.3870417988437533591554701e-205, "7387041798843753", -204},
  {8.7098719387872527180719991e+164, "8709871938787253", 165},
  {1.9009926943614304168167894e+110, "19009926943614304", 111},
  {7.1616991760977145482248155e-94, "7161699176097715", -93},
  {4.4655739962576531505573272e+211, "4465573996257653", 212},
  {1.2607682663864876038090345e+121, "12607682663864876", 122},
  {4.6536177475914665522883921e-254, "46536177475914666", -253},
  {1.3974809426754862847722377e+208, "13974809426754863", 209},
  {2.0028129691642007653053849e+146, "20028129691642008", 147},
  {7.2370236003399459793744839e+236, "7237023600339946", 237},
  {2.0069560887119323111148194e+163, "20069560887119323", 164},
  {1.1238355965298561119745857e-64, "11238355965298561", -63},
  {1.1212078777338702856930303e+83, "11212078777338703", 84},
  {1.7354398940124191884230903e-14, "17354398940124192", -13},
  {1.0144401377107947142644335e+158, "10144401377107947", 159},
  {1.2866240593625003091357402e-179, "12866240593625003", -178},
  {4.1361606843525922274887157e-295, "4136160684352592", -294},
  {5.2391808968553249926138056e-171, "5239180896855325", -170},
  {4.6359641195943252931580547e+213, "4635964119594325", 214},
  {4.7175854903437790029077270e+252, "4717585490343779", 253},
  {4.4236902887837949646820410e-105, "4423690288783795", -104},
  {9.9600401203065004236395188e+197, "99600401203065", 198},
  {8.9766128506950210483415794e-87, "8976612850695021", -86},
  {1.1827137770301744560802083e+250, "11827137770301745", 251},
  {4.7764706417554127341976750e-233, "4776470641755413", -232},
  {6.8702099288508031281683965e+81, "6870209928850803", 82},
  {3.5676587190129048940274169e-224, "3567658719012905", -223},
  {2.2763181358064178045176493e-275, "22763181358064178", -274},
  {4.3016927559737715933376515e+94, "43016927559737716", 95},
  {1.8603524798444335945565790e+88, "18603524798444336", 89},
  {4.3449690842908480976671073e+219, "4344969084290848", 220},
  {8.1293570324226237553905429e-293, "8129357032422624", -292},
  {1.3429380782062331900350785e-139, "13429380782062332", -138},
  {3.8384405367228264380517309e-143, "38384405367228264", -142},
  {8.9836366417758521888324301e-170, "8983636641775852", -169},
  {1.8615242596670938829609174e-248, "1861524259667094", -247},
  {7.1288819603078281482754791e-16, "7128881960307828", -15},
  {3.5225793826728517906483876e-58, "3522579382672852", -57},
  {1.7369688965703734988982855e-20, "17369688965703735", -19},
  {1.4388772557996130302041057e-249, "1438877255799613", -248},
  {3.4720924743933762485352720e-205, "34720924743933762", -204},
  {3.9514189463770361836109826e+220, "3951418946377036", 221},
  {2.0379117193764249023437707e+237, "2037911719376425", 238},
  {1.2730959209519028560370542e+187, "12730959209519029", 188},
  {1.3003504122036371928290604e-73, "13003504122036372", -72},
  {5.9466884422920483659683020e-87, "5946688442292048", -86},
  {1.9287553318991555424140107e-235, "19287553318991555", -234},
  {4.9939106490900084444767904e-217, "49939106490900084", -216},
  {4.7532910287102107737092285e+32, "4753291028710211", 33},
  {5.4425667077876710302685908e-300, "5442566707787671", -299},
  {2.0846467291976975293894647e-268, "20846467291976975", -267},
  {3.2026601543226574696815422e-91, "32026601543226575", -90},
  {7.2667549845420958684355211e+191, "7266754984542096", 192},
  {1.0803515401418948383827207e+109, "10803515401418948", 110},
  {5.1998148949230641084049755e+297, "5199814894923064", 298},
  {1.6240302300399156294843185e-254, "16240302300399156", -253},
  {4.5556851837375668788820100e-215, "4555685183737567", -214},
  {1.6463973978498815531799073e+183, "16463973978498816", 184},
  {5.0820333950060807168483734e+07, "5082033395006081", 8},
  {1.2407992812333135092221542e+112, "12407992812333135", 113},
  {4.4304324248691432383909621e-164, "4430432424869143", -163},
  {6.8886896910924724110200830e+246, "68886896910924724", 247},
  {4.7295528203761062718220825e+52, "47295528203761063", 53},
  {1.8616943973373168591074175e-268, "18616943973373169", -267},
  {6.4009926364807379924946150e-46, "6400992636480738", -45},
  {2.8531061185983135947180278e+76, "28531061185983136", 77},
  {1.4919221819150984655127368e-238, "14919221819150985", -237},
  {3.1885401635882332252289862e-133, "31885401635882332", -132},
  {1.1120019706872016190808675e-103, "11120019706872016", -102},
  {1.3207447194822769598844428e+271, "1320744719482277", 272},
  {1.2603241838139558227127372e-284, "12603241838139558", -283},
  {2.1953951261038592845942219e-01, "21953951261038593", 0},
  {2.8715217673816658336539098e+282, "2871521767381666", 283},
  {1.6305121067039049052417242e-81, "1630512106703905", -80},
  {1.1022780886612455891221255e-132, "11022780886612456", -131},
  {3.3972235515990441620555880e-104, "3397223551599044", -103},
  {5.7363886860938859172165394e+04, "5736388686093886", 5},
  {3.4943409896499347590906692e+91, "3494340989649935", 92},
  {1.5517356011540907689890849e-09, "15517356011540908", -8},
  {7.7877940210654723349005266e+258, "7787794021065472", 259},
  {8.0740800565585237842612359e+34, "8074080056558524", 35},
  {1.7888583387999401664569897e-15, "178885833879994", -14},
  {3.1139496839904390868039465e+37, "3113949683990439", 38},
  {1.2021587729250044952875728e+97, "12021587729250045", 98},
  {6.6944941962148922300148387e+158, "6694494196214892", 159},
  {5.1790093945141032778767129e+279, "5179009394514103", 280},
  {2.1231568988204793431889043e-261, "21231568988204793", -260},
  {7.3922315020266188679479000e-85, "7392231502026619", -84},
  {2.1809321230659292488305789e-76, "21809321230659292", -75},
  {2.3274703604226315048923454e-108, "23274703604226315", -107},
  {4.6782998225849939015600020e-229, "4678299822584994", -228},
  {2.8288864323859666331062232e-177, "28288864323859666", -176},
  {2.1626722816155876479053521e+306, "21626722816155876", 307},
  {3.9279705163428262050366998e-258, "3927970516342826", -257},
  {9.1439862534557850109129455e-270, "9143986253455785", -269},
  {2.2150438846596571127540399e+180, "2215043884659657", 181},
  {1.4569346502071574580660990e+180, "14569346502071575", 181},
  {1.0215760005789122140049711e-199, "10215760005789122", -198},
  {2.7552608203532660686361459e-22, "2755260820353266", -21},
  {6.3641072033424484595032881e-124, "63641072033424485", -123},
  {2.5770159777261358300058049e+262, "2577015977726136", 263},
  {4.6694550719435558848901874e-13, "4669455071943556", -12},
  {2.7541812675580048176744445e-285, "2754181267558005", -284},
  {1.0359352570488724503208164e+111, "10359352570488725", 112},
  {5.9185028341000250519795166e+218, "5918502834100025", 219},
  {8.6621647968791696949965864e+57, "866216479687917", 58},
  {4.6163152830537322865392679e+266, "46163152830537323", 267},
  {7.1606462274278845228341908e-90, "71606462274278845", -89},
  {3.1291682488561684387083277e-74, "31291682488561684", -73},
  {3.0694112264941376185344637e+67, "30694112264941376", 68},
  {5.1556559509899971046894661e-181, "5155655950989997", -180},
  {1.6019906021898960304329673e+184, "1601990602189896", 185},
  {7.9532296743164972465849555e-80, "7953229674316497", -79},
  {1.0563108052766011332366892e-99, "10563108052766011", -98},
  {3.5969564013167890111005034e+134, "3596956401316789", 135},
  {7.0934546738739413206900026e+130, "7093454673873941", 131},
  {1.5605748138670332974848431e+60, "15605748138670333", 61},
  {3.5143439093958671466711583e-153, "3514343909395867", -152},
  {2.4390370022965289655924624e-71, "2439037002296529", -70},
  {2.3269344362933889995892189e-203, "2326934436293389", -202},
  {6.3734360942897778134964877e-70, "6373436094289778", -69},
  {3.6855565521488653496687669e-93, "36855565521488653", -92},
  {1.0147468986833672796619351e-157, "10147468986833673", -156},
  {2.3577267294178833775586003e+229, "23577267294178834", 230},
  {3.5893043951981948228666091e-108, "3589304395198195", -107},
  {4.5930422439147625080720114e+39, "45930422439147625", 40},
  {1.7038584332412905837496353e-157, "17038584332412906", -156},
  {1.8410430173273045613533596e-123, "18410430173273046", -122},
  {6.0204495228631857087840884e-153, "6020449522863186", -152},
  {5.7615447661131151360000000e+18, "5761544766113115", 19},
  {7.5264845166574537174448124e+265, "7526484516657454", 266},
  {1.6509222890063502516796883e+276, "16509222890063503", 277},
  {1.0340500687477027509247589e-135, "10340500687477028", -134},
  {7.3705779504427114316059667e-48, "7370577950442711", -47},
  {9.2352353320542986971127787e-185, "9235235332054299", -184},
  {7.8231346779550280152688972e-63, "7823134677955028", -62},
  {8.7857419316285112309581985e+158, "8785741931628511", 159},
  {6.6798255450418493814127056e+51, "667982554504185", 52},
  {5.9892526891145350860198384e-153, "5989252689114535", -152},
  {1.6560490276763915697346093e+74, "16560490276763916", 75},
  {2.4405366837561682586965617e+03, "24405366837561683", 4},
  {2.2941343191597122408250262e+190, "22941343191597122", 191},
  {3.4188959073298185694800020e-138, "34188959073298186", -137},
  {4.1441013005418491963040424e+54, "4144101300541849", 55},
  {2.1875649689513542207011388e+204, "21875649689513542", 205},
  {1.4284350867796378683246079e+262, "14284350867796379", 263},
  {1.1234399601585036020773742e-11, "11234399601585036", -10},
  {1.7083143971630403718155996e+82, "17083143971630404", 83},
  {4.2403559451715619711883920e-120, "4240355945171562", -119},
  {8.5524029608509790015712458e-262, "8552402960850979", -261},
  {1.4521366995655612797187216e+165, "14521366995655613", 166},
  {1.9574401731373572656602566e-181, "19574401731373573", -180},
  {2.4792745639678459289234975e+154, "2479274563967846", 155},
  {1.7940004000485469933187165e-291, "1794000400048547", -290},
  {4.4580402900799505657650016e-125, "44580402900799506", -124},
  {7.9028379428237360411711172e+298, "7902837942823736", 299},
  {4.4180850201165609367364019e+51, "4418085020116561", 52},
  {6.8084635990165340683639211e+84, "6808463599016534", 85},
  {3.7813404585426389076198412e-234, "3781340458542639", -233},
  {2.9558991169272498452371846e-254, "295589911692725", -253},
  {7.7578424978782700902494918e+257, "775784249787827", 258},
  {6.4014783707866505422156090e-278, "640147837078665", -277},
  {4.4639031553327206673638324e+210, "44639031553327207", 211},
  {9.2197081586234552200616945e-262, "9219708158623455", -261},
  {1.8159592209563519351368905e+139, "1815959220956352", 140},
  {6.3429767370455309462605532e-146, "6342976737045531", -145},
  {1.5845848617430909814066546e-130, "1584584861743091", -129},
  {9.0448869034675498930746657e+135, "904488690346755", 136},
  {3.7541914119480164918087311e-06, "37541914119480165", -5},
  {4.0023038316348060400555392e+196, "4002303831634806", 197},
  {8.9941461179807902328381655e+247, "899414611798079", 248},
  {3.1735138049037634354300928e-290, "31735138049037634", -289},
  {1.4451473719528211707304007e-289, "14451473719528212", -288},
  {3.5273581744921705154942447e-61, "35273581744921705", -60},
  {2.7080882973578776146136275e+118, "27080882973578776", 119},
  {3.5757902980811940454185176e-12, "3575790298081194", -11},
  {5.5061266866615355572866788e+168, "55061266866615356", 169},
  {1.4199756654436446957777223e+280, "14199756654436447", 281},
  {1.8561748517516105244352862e+121, "18561748517516105", 122},
  {2.0568019527887169735890996e-214, "2056801952788717", -213},
  {9.9457219189621734468221475e-155, "9945721918962173", -154},
  {3.7875087143459942369480649e+186, "3787508714345994", 187},
  {8.3745946848156244967264590e-193, "83745946848156245", -192},
  {1.6954343341903224882116774e+03, "16954343341903225", 4},
  {2.8168307219905323852778444e-234, "28168307219905324", -233},
  {5.3406020101450378266609637e-39, "5340602010145038", -38},
  {1.2562706162599566361137283e+232, "12562706162599566", 233},
  {1.2423506421262447080013697e-105, "12423506421262447", -104},
  {9.4258355206758938306015934e+116, "9425835520675894", 117},
  {3.3772478115388997726623726e-254, "33772478115388998", -253},
  {1.3826632562594236835723490e+158, "13826632562594237", 159},
  {1.4160103250968869323582075e+246, "1416010325096887", 247},
  {1.7462733651490947146080832e+243, "17462733651490947", 244},
  {1.1057416130852526747467140e+202, "11057416130852527", 203},
  {1.5597126409715131092147542e+197, "1559712640971513", 198},
  {1.6794244629865909620605900e+273, "1679424462986591", 274},
  {2.2507801988142051540443662e+46, "22507801988142052", 47},
  {1.3807422564763019779231600e-169, "1380742256476302", -168},
  {3.6503595372894762403451130e+38, "3650359537289476", 39},
  {5.0811798510372732103462417e-244, "5081179851037273", -243},
  {2.2479053833124900716215624e-302, "224790538331249", -301},
  {8.5996322005358915663704886e-278, "8599632200535892", -277},
  {4.0949831969895631408842322e-202, "4094983196989563", -201},
  {9.7340406072728441901449448e-246, "9734040607272844", -245},
  {9.2777130515513956553957628e-202, "9277713051551396", -201},
  {6.0690258742914198986359483e+87, "606902587429142", 88},
  {1.1438395392571368124113461e+305, "11438395392571368", 306},
  {8.4460400239801410652815103e-29, "8446040023980141", -28},
  {8.9132647767900054437395717e+105, "8913264776790005", 106},
  {8.5322117679779352180361206e-285, "8532211767977935", -284},
  {8.1795042710351078859530832e+43, "8179504271035108", 44},
  {2.4490271171580381080648231e-263, "2449027117158038", -262},
  {1.9855121281939014131854388e+142, "19855121281939014", 143},
  {8.8363480112699332431287762e-243, "8836348011269933", -242},
  {2.8062145587881139282009319e+212, "2806214558788114", 213},
  {2.4716288299745778406165774e-35, "2471628829974578", -34},
  {2.3211683605546988109002865e+49, "23211683605546988", 50},
  {4.7770437176876703446331936e+87, "477704371768767", 88},
  {1.1204154472108668741280396e+254, "11204154472108669", 255},
  {7.3383690360055995512090876e+177, "73383690360056", 178},
  {5.5631421766815373745188703e+52, "5563142176681537", 53},
  {7.3286543471208446903645256e-65, "7328654347120845", -64},
  {5.0110714323153223785007760e-233, "5011071432315322", -232},
  {2.0050771246914780270416381e-47, "2005077124691478", -46},
  {4.4813534933507555331717234e+74, "44813534933507555", 75},
  {5.0322309051490096007408183e-29, "50322309051490096", -28},
  {3.8856552053658625469939845e-26, "38856552053658625", -25},
  {6.1685849052784509042895772e-236, "6168584905278451", -235},
  {1.7951512722390895657415641e+165, "17951512722390896", 166},
  {1.1751799745451884034085886e+212, "11751799745451884", 213},
  {1.1819882120730686671694794e-05, "11819882120730687", -4},
  {1.4337762867383654140454743e-91, "14337762867383654", -90},
  {3.2399764301728371662037549e+285, "3239976430172837", 286},
  {4.2479432590673999867211928e+78, "42479432590674", 79},
  {8.8579427512710806588971235e-187, "8857942751271081", -186},
  {2.1122388708721712929369958e+158, "21122388708721713", 159},
  {1.3951306270945545783584391e-298, "13951306270945546", -297},
  {8.7464473119341729386053559e-266, "8746447311934173", -265},
  {5.3169664105569723120169066e+172, "5316966410556972", 173},
  {2.6200598627413733917863541e+234, "26200598627413734", 235},
  {2.0650880434134418718720000e+21, "2065088043413442", 22},
  {2.8032443379859484723626758e+236, "28032443379859485", 237},
  {2.9469074162077921042427013e+54, "2946907416207792", 55},
  {2.7971585923615149488379952e-52, "2797158592361515", -51},
  {1.3580509614164638560565963e-125, "13580509614164639", -124},
  {1.6220196112105850605288815e+159, "1622019611210585", 160},
  {1.0633905213792376740626699e-302, "10633905213792377", -301},
  {1.9008347450853388671875000e+12, "19008347450853389", 13},
  {1.3133048008773813567036208e-71, "13133048008773814", -70},
  {2.5713196301954154682386968e-136, "25713196301954155", -135},
  {1.6756412810186639369206470e-144, "1675641281018664", -143},
  {3.4552549800022935909701406e-192, "34552549800022936", -191},
  {1.4995135571255570324561701e-207, "1499513557125557", -206},
  {8.2483405492246663329762563e+103, "8248340549224666", 104},
  {1.4270310731009657181044027e+180, "14270310731009657", 181},
  {7.6827379334952392686568217e-42, "7682737933495239", -41},
  {2.0891221539264557579151861e-58, "20891221539264558", -57},
  {6.0551913455982264381508033e-217, "60551913455982264", -216},
  {3.5939997036542026891504949e+272, "35939997036542027", 273},
  {1.6568587364224532096665706e-275, "16568587364224532", -274},
  {4.6992586408026914083435606e+253, "46992586408026914", 254},
  {6.8132586773266389071416816e+67, "6813258677326639", 68},
  {5.4758483253442812033195963e-02, "5475848325344281", -1},
  {9.2408774518532199813242285e+170, "924087745185322", 171},
  {9.4879746448493299862155423e+88, "948797464484933", 89},
  {2.9017574885400736377331645e-104, "29017574885400736", -103},
  {1.2261355546753024921059658e-24, "12261355546753025", -23},
  {1.0030550406428435700290409e-36, "10030550406428436", -35},
  {4.8077861625839317737839667e-302, "4807786162583932", -301},
  {1.2001631320656197290062514e-126, "12001631320656197", -125},
  {4.0321844529358072592128461e+180, "40321844529358073", 181},
  {6.8147389304360564754301994e+190, "68147389304360565", 191},
  {1.1891127201289342286811099e+304, "11891127201289342", 305},
  {2.6886334436623178999508752e+37, "2688633443662318", 38},
  {7.0446319172617413080965123e+167, "7044631917261741", 168},
  {1.8478288281233084941737979e-98, "18478288281233085", -97},
  {2.4171602806390874129742512e+134, "24171602806390874", 135},
  {6.5827124963719769205343418e-69, "6582712496371977", -68},
  {2.3339369873417027543913276e-88, "23339369873417028", -87},
  {1.9387248684370856757232758e+189, "19387248684370857", 190},
  {2.8171982038824431331027073e-93, "2817198203882443", -92},
  {5.5805629945033181231765799e+95, "5580562994503318", 96},
  {3.0507524865481753952400257e+69, "30507524865481754", 70},
  {2.6478726801198955135507624e-248, "26478726801198955", -247},
  {2.1726227485246907261827449e+125, "21726227485246907", 126},
  {2.3370260599505264165183181e+244, "23370260599505264", 245},
  {2.3444272099476561570533128e+175, "2344427209947656", 176},
  {8.0985508951201998756139951e+186, "80985508951202", 187},
  {3.2240794654214455543138761e-90, "32240794654214456", -89},
  {6.3687063515841679293711592e+170, "6368706351584168", 171},
  {1.0653070787420568938499617e+291, "10653070787420569", 292},
  {5.3680699169570567069010924e-178, "5368069916957057", -177},
  {5.9934091506689137880490211e-227, "5993409150668914", -226},
  {3.5780717696745246078062856e-154, "35780717696745246", -153},
  {7.2819177041476872555033193e-55, "7281917704147687", -54},
  {1.2698645551246084501070412e+106, "12698645551246085", 107},
  {2.5515137888291800805774652e+67, "255151378882918", 68},
  {1.7638876701155397521217022e+112, "17638876701155398", 113},
  {1.9309283701715764371237355e+174, "19309283701715764", 175},
  {9.9038484668323781079379842e+03, "9903848466832378", 4},
  {4.5474790700087206524168988e+298, "4547479070008721", 299},
  {1.3568967880111484811138352e-90, "13568967880111485", -89},
  {2.9837825547012511668304909e-307, "2983782554701251", -306},
  {4.9179345123667734035167336e-59, "4917934512366773", -58},
  {1.5633871656840322363444519e+133, "15633871656840322", 134},
  {9.0472312997206004677176243e-14, "90472312997206", -13},
  {2.0317523302988874757654698e+79, "20317523302988875", 80},
  {1.5822064966150088914353537e-12, "15822064966150089", -11},
  {7.9445259082908523316810768e-157, "7944525908290852", -156},
  {9.6634585731423478019605147e-122, "9663458573142348", -121},
  {2.6131611202541365674575889e+206, "26131611202541366", 207},
  {1.1770512938906581699848175e+08, "11770512938906582", 9},
  {4.3360686148149283042983646e-216, "4336068614814928", -215},
  {6.9284600884204493979732886e-221, "6928460088420449", -220},
  {1.4597050923893953635998774e-74, "14597050923893954", -73},
  {1.0936769010838256527575914e+60, "10936769010838257", 61},
  {2.3920025531772240776202919e+186, "2392002553177224", 187},
  {4.8170160483068296746160064e-184, "481701604830683", -183},
  {6.4426765695103477641344692e-261, "6442676569510348", -260},
  {3.5403803522047071754288326e-201, "3540380352204707", -200},
  {2.8121887120034630178144976e-74, "2812188712003463", -73},
  {5.0744776641204818420812572e-126, "5074477664120482", -125},
  {1.2573346457425648055149601e+182, "12573346457425648", 183},
  {1.1062079223383394137604254e-119, "11062079223383394", -118},
  {1.1993048274566693784753451e+58, "11993048274566694", 59},
  {1.3440643211737131995220222e-265, "13440643211737132", -264},
  {1.4025127384847517727004682e+263, "14025127384847518", 264},
  {1.1757325525548764276209388e+241, "11757325525548764", 242},
  {5.8815480229085867187500000e+13, "5881548022908587", 14},
  {3.9299682391813505699484439e-117, "39299682391813506", -116},
  {1.0152679695397398023497835e-107, "10152679695397398", -106},
  {2.3147493824908844544552267e+04, "23147493824908845", 5},
  {2.1520877198985829597611297e-166, "2152087719898583", -165},
  {8.3329050241943441413222112e-216, "8332905024194344", -215},
  {5.6312106757661736451271202e-189, "5631210675766174", -188},
  {4.0387867537694124363325691e-246, "40387867537694124", -245},
  {2.7631556104973120731776211e-227, "2763155610497312", -226},
  {7.6480220373685225701192904e-96, "7648022037368523", -95},
  {1.0227288413872689293782558e-76, "1022728841387269", -75},
  {1.1512931758802249955616028e-241, "1151293175880225", -240},
  {2.4028071587633884532427341e+266, "24028071587633885", 267},
  {8.0753279920672371418840061e-57, "8075327992067237", -56},
  {1.9574337384980856205543343e-233, "19574337384980856", -232},
  {1.0689286221637953976872277e-70, "10689286221637954", -69},
  {1.2516708330258735477123054e-135, "12516708330258735", -134},
  {9.5894288069671382700789816e+117, "9589428806967138", 118},
  {7.5607918123597615251509742e+288, "7560791812359762", 289},
  {1.1088155150554813136181860e-226, "11088155150554813", -225},
  {4.3207304862332949859889843e-231, "4320730486233295", -230},
  {2.8877217845747842911913820e+123, "2887721784574784", 124},
  {1.4045930204160278857424716e-99, "14045930204160279", -98},
  {9.4090281948441153798912189e-298, "9409028194844115", -297},
  {9.8216249394462402744021345e+37, "982162493944624", 38},
  {4.8232061738871624934083534e-73, "48232061738871625", -72},
  {4.3609890764925484800000000e+17, "43609890764925485", 18},
  {3.8967640461079941732317836e-38, "3896764046107994", -37},
  {1.1635080197665533718776673e+92, "11635080197665534", 93},
  {1.9504853928297028043651276e+214, "19504853928297028", 215},
  {2.4794053160280869876494690e-204, "2479405316028087", -203},
  {4.9153130505601805972701110e-288, "49153130505601806", -287},
  {9.9528800578708190549087351e-210, "9952880057870819", -209},
  {7.0825571814986542262988778e-05, "7082557181498654", -4},
  {8.7458418387559563232584420e-90, "8745841838755956", -89},
  {2.1308793884890402439639542e+128, "21308793884890402", 129},
  {2.1981465616019432015534553e-63, "21981465616019432", -62},
  {4.5592251886562875460596191e-170, "45592251886562875", -169},
  {4.1821641681378391930314164e-267, "4182164168137839", -266},
  {2.2281127471837257726143843e+264, "22281127471837258", 265},
  {1.2653269273386923979211087e+136, "12653269273386924", 137},
  {5.8607219863037948738387238e+176, "5860721986303795", 177},
  {9.6428997692335653449644949e+259, "9642899769233565", 260},
  {1.7038419842856856902160871e-246, "17038419842856857", -245},
  {1.2835962076479205096416128e+32, "12835962076479205", 33},
  {1.7269430686035545860714017e-239, "17269430686035546", -238},
  {1.3034618623231114005637891e+126, "13034618623231114", 127},
  {2.3497233996690977694633181e+213, "23497233996690978", 214},
  {4.8221337384319453469854198e-52, "4822133738431945", -51},
  {3.9589814589158013154531052e+59, "39589814589158013", 60},
  {3.6370855319771560612816060e-80, "3637085531977156", -79},
  {4.0235186002427150903619373e+170, "4023518600242715", 171},
  {6.0039560738372719357508745e+182, "6003956073837272", 183},
  {1.1516214266872043862221405e+214, "11516214266872044", 215},
  {5.6961656593734964828999620e-87, "56961656593734965", -86},
  {4.3688676139734373883179807e+239, "4368867613973437", 240},
  {8.4330438872304061291316451e+241, "8433043887230406", 242},
  {3.0520255721133413555644576e-282, "30520255721133414", -281},
  {1.3671521076619215430273650e-107, "13671521076619215", -106},
  {1.1958626164532200909176538e+30, "11958626164532201", 31},
  {9.9399613988386717405982393e+214, "9939961398838672", 215},
  {1.0884261124617679493111543e+93, "1088426112461768", 94},
  {2.8525756605689699759823788e-265, "285257566056897", -264},
  {2.6896017743658966795085468e+293, "26896017743658967", 294},
  {5.5053908977051912115114098e+64, "5505390897705191", 65},
  {8.5345848435437172587253313e+146, "8534584843543717", 147},
  {7.0328074703816941133961727e-250, "7032807470381694", -249},
  {3.7640145978701100575116762e-116, "376401459787011", -115},
  {2.0608836253067830451198865e-284, "2060883625306783", -283},
  {2.9692482819450318673173959e-49, "2969248281945032", -48},
  {5.2735012647239000450178690e+47, "52735012647239", 48},
  {1.2220381925204727832671112e-214, "12220381925204728", -213},
  {1.3826675946059907926526582e+187, "13826675946059908", 188},
  {1.8943125973768657437330123e-244, "18943125973768657", -243},
  {9.9948238320055545680721134e-20, "9994823832005555", -19},
  {5.0258344470731474221357575e+73, "50258344470731474", 74},
  {7.4937064097692005111315096e-306, "74937064097692", -305},
  {4.9690780168079751554304313e+226, "4969078016807975", 227},
  {5.7180918837161583243432539e-111, "5718091883716158", -110},
  {3.6018371470409490129999953e+199, "3601837147040949", 200},
  {7.5057680124991986634229589e+137, "7505768012499199", 138},
  {3.1492874834509030065315801e+237, "3149287483450903", 238},
  {7.7719939006364967609730328e-256, "7771993900636497", -255},
  {2.7332916659931490507386972e-144, "2733291665993149", -143},
  {3.4018516323098044488017528e-133, "34018516323098044", -132},
  {2.0251032210891611977101162e-162, "20251032210891612", -161},
  {1.6557438467918978665459391e-200, "1655743846791898", -199},
  {3.0342487143672765561479562e+211, "30342487143672766", 212},
  {8.6788179365917084875616866e+62, "8678817936591708", 63},
  {4.1679667611038027272707178e-120, "4167966761103803", -119},
  {4.2909928458208678490170466e-192, "4290992845820868", -191},
  {1.0659069742080936688131372e-66, "10659069742080937", -65},
  {8.0310238864357265919037790e+96, "8031023886435727", 97},
  {2.8146942701347764390917690e-40, "28146942701347764", -39},
  {1.0003135720596986257970429e-135, "10003135720596986", -134},
  {8.0727425050747152492952367e-98, "8072742505074715", -97},
  {1.6861571351413029427038757e+76, "1686157135141303", 77},
  {3.2067875502193078645164347e-245, "3206787550219308", -244},
  {1.4580160771087437868118286e+08, "14580160771087438", 9},
  {1.7689078573006154771230289e-72, "17689078573006155", -71},
  {3.2559772404715499573837280e+240, "325597724047155", 241},
  {1.1010532361782246908633824e-210, "11010532361782247", -209},
  {1.7726816382317163657070657e-114, "17726816382317164", -113},
  {6.5143724911718850783821498e+269, "6514372491171885", 270},
  {1.5468595578028315978970901e+109, "15468595578028316", 110},
  {5.0764555721446834758565991e-304, "50764555721446835", -303},
  {8.0225207276496725156151341e-265, "8022520727649673", -264},
  {1.1616133170037336708218880e+24, "11616133170037337", 25},
  {4.0500285618462053236284716e-59, "4050028561846205", -58},
  {1.3839411798188875004747418e-274, "13839411798188875", -273},
  {2.2712082756522745186051618e+188, "22712082756522745", 189},
  {1.1175213531088682749443665e-23, "11175213531088683", -22},
  {3.2065541495750194109801804e+63, "32065541495750194", 64},
  {4.7121138973680502903962511e-244, "471211389736805", -243},
  {1.9705097247704168046913021e+247, "19705097247704168", 248},
  {1.0213430929150792945200410e-142, "10213430929150793", -141},
  {9.1821648624996787603548905e+185, "9182164862499679", 186},
  {2.4932690998111568509105877e-101, "2493269099811157", -100},
  {2.7685786561243873092398383e+147, "27685786561243873", 148},
  {7.8680880851836234607290638e-190, "7868088085183623", -189},
  {2.5410980337664170082706877e+259, "2541098033766417", 260},
  {1.5327626930896538420553524e+53, "15327626930896538", 54},
  {1.5616975246639919071083963e-133, "1561697524663992", -132},
  {9.0546676587661140994749128e+54, "9054667658766114", 55},
  {8.2614397017445039899120682e-63, "8261439701744504", -62},
  {4.9710019569044802754459374e-41, "497100195690448", -40},
  {1.9526355134134301956568959e+92, "19526355134134302", 93},
  {9.7934984352585299166234270e-181, "979349843525853", -180},
  {3.7019400589841881432177775e+184, "3701940058984188", 185},
  {2.7618874204674898995786964e+258, "276188742046749", 259},
  {1.1402767993704695375918137e+60, "11402767993704695", 61},
  {6.8866081050124619994144394e-57, "6886608105012462", -56},
  {1.8054028690394791009403226e+235, "1805402869039479", 236},
  {6.5192937653439877476966069e-231, "6519293765343988", -230},
  {6.2851699698108841997503920e-209, "6285169969810884", -208},
  {1.2257596652064093465144326e+244, "12257596652064093", 245},
  {4.0541379258489642911450473e+124, "40541379258489643", 125},
  {2.3618791052689764979743961e+257, "23618791052689765", 258},
  {1.9586018896827636017461950e-115, "19586018896827636", -114},
  {3.6891933845873484019901742e+278, "36891933845873484", 279},
  {3.5677703318272228468497986e-50, "3567770331827223", -49},
  {1.3244898225423118019489041e-61, "13244898225423118", -60},
  {1.6313047746573866569627636e+88, "16313047746573867", 89},
  {1.4280317153300087274102434e-52, "14280317153300087", -51},
  {2.5670982398342135302648703e-287, "25670982398342135", -286},
  {1.5780914701880110455738837e+184, "1578091470188011", 185},
  {1.1548384530573206683792208e+118, "11548384530573207", 119},
  {6.9826721124702554077727450e+117, "6982672112470255", 118},
  {7.5431142706762188710700067e+86, "7543114270676219", 87},
  {1.0852624583399466320545534e+158, "10852624583399466", 159},
  {1.8308011785112679973600338e-172, "1830801178511268", -171},
  {1.7055227570139575967484761e-201, "17055227570139576", -200},
  {4.6771255775464407213218036e+158, "4677125577546441", 159},
  {6.4859881122141703189137043e+84, "648598811221417", 85},
  {7.0347383439340657118577257e+233, "7034738343934066", 234},
  {1.0918217146815254774709767e-99, "10918217146815255", -98},
  {7.3601894174419057864721743e-187, "7360189417441906", -186},
  {2.8992992495098057096992793e-208, "28992992495098057", -207},
  {8.9687714439383688191856058e-107, "8968771443938369", -106},
  {5.3848820165708036223530216e+186, "5384882016570804", 187},
  {4.4695752577561465963755129e+120, "44695752577561466", 121},
  {5.8286206387823614026884048e-103, "5828620638782361", -102},
  {8.2122163337520354089037626e+187, "8212216333752035", 188},
  {8.5630424864809535114774144e-104, "8563042486480954", -103},
  {1.2682280802459632333125976e+175, "12682280802459632", 176},
  {2.2914360291926801122574009e-39, "229143602919268", -38},
  {4.9340092032902458350539272e-299, "4934009203290246", -298},
  {3.9767184308670071350262042e+40, "3976718430867007", 41},
  {1.1521750997443854697864590e-183, "11521750997443855", -182},
  {1.5301868694821282805472709e-294, "15301868694821283", -293},
  {2.2813476707838914422581153e+184, "22813476707838914", 185},
  {1.4697057869986689953419937e-112, "1469705786998669", -111},
  {3.5799512925347476693638429e+162, "35799512925347477", 163},
  {5.3400411652057456990405626e+01, "5340041165205746", 2},
  {1.0646854702594470776232241e-184, "10646854702594471", -183},
  {5.9434880487177625542128608e-102, "59434880487177626", -101},
  {4.3509813301249361833733093e+193, "4350981330124936", 194},
  {1.0916777609201352222577473e+165, "10916777609201352", 166},
  {1.3720988826439762979167926e+256, "13720988826439763", 257},
  {1.5702838432677973533037698e+252, "15702838432677974", 253},
  {2.8728467567507279783277445e+140, "2872846756750728", 141},
  {5.3064628353118460568906983e+79, "5306462835311846", 80},
  {3.5416824614782508343907891e+206, "3541682461478251", 207},
  {3.5804077877885031556906166e-161, "3580407787788503", -160},
  {1.9584500447235104580350554e-28, "19584500447235105", -27},
  {1.7709902464240265904698406e-257, "17709902464240266", -256},
  {7.5519070674126835397512735e+202, "75519070674126835", 203},
  {6.7337430364248054103689470e-108, "67337430364248054", -107},
  {4.6829691279894558618916240e+155, "4682969127989456", 156},
  {7.5092293984788423792964182e-211, "7509229398478842", -210},
  {2.5633982234465527508297168e-228, "25633982234465528", -227},
  {7.7825703731242549363049845e+125, "7782570373124255", 126},
  {5.2026907140389618633705472e+157, "5202690714038962", 158},
  {1.3305711469931606071263409e+208, "13305711469931606", 209},
  {8.0671035103227540000000000e+15, "8067103510322754", 16},
  {7.4736105193302207562917228e-98, "7473610519330221", -97},
  {7.8543880511544356143724294e+100, "7854388051154436", 101},
  {3.2308738414221556893534679e-138, "32308738414221557", -137},
  {5.6042402515599156615006364e-161, "5604240251559916", -160},
  {9.0066426841882742138638675e+116, "9006642684188274", 117},
  {2.1700793145592346042948161e+72, "21700793145592346", 73},
  {2.9857673226404585685152371e-51, "29857673226404586", -50},
  {5.8872501770834577314896636e-260, "5887250177083458", -259},
  {1.0216195178352345646952357e+256, "10216195178352346", 257},
  {1.4123214106259269283864055e-40, "1412321410625927", -39},
  {4.9741324830444948747754097e+05, "4974132483044495", 6},
  {9.7652701793910317119915890e+151, "9765270179391032", 152},
  {4.3694154753257879399410699e-131, "4369415475325788", -130},
  {9.3069730040590746087501471e-87, "9306973004059075", -86},
  {1.1112897161724076510983582e+153, "11112897161724077", 154},
  {5.2785993800070051246391594e-33, "5278599380007005", -32},
  {3.0460011544363860546003531e+162, "3046001154436386", 163},
  {6.0563264222961621885748851e-160, "6056326422296162", -159},
  {2.1030946683560054691946015e-203, "21030946683560055", -202},
  {3.4586830117887402121498370e-295, "345868301178874", -294},
  {2.6035420772118920518376802e-184, "2603542077211892", -183},
  {2.9843247321551049145414417e+244, "2984324732155105", 245},
  {1.9611467220519258679631202e+272, "1961146722051926", 273},
  {6.5056521785957818371647099e+176, "6505652178595782", 177},
  {1.1760550388072617117845875e-192, "11760550388072617", -191},
  {4.3023334600914280234825824e+86, "4302333460091428", 87},
  {1.4942677165510274337183003e-18, "14942677165510274", -17},
  {7.9449277082106140435420860e-216, "7944927708210614", -215},
  {1.6549340167028358948822722e+158, "1654934016702836", 159},
  {5.0958339847526209771475544e+266, "5095833984752621", 267},
  {1.4668826662709280141004653e+145, "1466882666270928", 146},
  {2.5028743178752620881549957e+52, "2502874317875262", 53},
  {2.9857505004232071501202102e+87, "2985750500423207", 88},
  {1.6718118232877543128870883e+246, "16718118232877543", 247},
  {1.4001835855520833340924628e-81, "14001835855520833", -80},
  {3.7142043264198744453520875e+267, "37142043264198744", 268},
  {9.0407085922437269764078796e+161, "9040708592243727", 162},
  {2.0392716249225623840553273e-206, "20392716249225624", -205},
  {4.9036843977983170619686694e-77, "4903684397798317", -76},
  {3.3964390999668355539252067e+258, "33964390999668356", 259},
  {1.2561613020878924169674174e+178, "12561613020878924", 179},
  {4.1864743535828407980817572e-121, "4186474353582841", -120},
  {7.7950700080449182448587059e-38, "7795070008044918", -37},
  {4.6807784868501315478728448e+245, "4680778486850132", 246},
  {2.8702395553870665023853338e+156, "28702395553870665", 157},
  {3.7809470584652168997520125e+258, "3780947058465217", 259},
  {1.1156393697216591816718023e-40, "11156393697216592", -39},
  {3.0368577512231483180795960e-252, "30368577512231483", -251},
  {4.6382344452738484363518141e+61, "46382344452738484", 62},
  {1.0445038790257670719273013e+73, "1044503879025767", 74},
  {1.0971817619136923949826898e+188, "10971817619136924", 189},
  {2.7150065064091899566561371e+306, "271500650640919", 307},
  {2.1895812579684733961046342e-132, "21895812579684734", -131},
  {5.2872658350039697449827698e-216, "528726583500397", -215},
  {6.5010871034130005586908469e-96, "65010871034130006", -95},
  {2.6346836846944106805569886e-160, "26346836846944107", -159},
  {3.6585730374881247438076813e+263, "3658573037488125", 264},
  {1.4486081873624310392449520e-219, "1448608187362431", -218},
  {1.8921680088332934836830981e+295, "18921680088332935", 296},
  {7.9617974554840970621238241e+55, "7961797455484097", 56},
  {1.8581123187663443661679708e+210, "18581123187663444", 211},
  {9.2613573440863525334378061e+248, "9261357344086353", 249},
  {2.2030070378966394470400000e+20, "22030070378966394", 21},
  {2.0642717564072110428512236e+89, "2064271756407211", 90},
  {3.8709071478066441207603895e+162, "3870907147806644", 163},
  {1.3067070800524732203962820e-186, "13067070800524732", -185},
  {1.0166620923485930869176791e+214, "10166620923485931", 215},
  {9.2424792062767085932875517e-102, "9242479206276709", -101},
  {1.4833810328634179422054580e+276, "1483381032863418", 277},
  {6.6221432309069813789129024e-256, "6622143230906981", -255},
  {5.8695813075844700851169377e-21, "586958130758447", -20},
  {5.6004564154656716916747486e-82, "5600456415465672", -81},
  {1.4306244393212318921396673e+94, "14306244393212319", 95},
  {2.8203400550982938602409888e-189, "2820340055098294", -188},
  {2.4939844309634499468043448e+179, "249398443096345", 180},
  {7.2770507381723540121620324e-66, "7277050738172354", -65},
  {9.5171165686394835059448739e-228, "9517116568639484", -227},
  {2.2569216980605462506949082e-250, "22569216980605463", -249},
  {4.6841905675878793210430086e+300, "46841905675878793", 301},
  {4.1642780185549881623940011e+60, "4164278018554988", 61},
  {8.6003100552808557383378447e+182, "8600310055280856", 183},
  {5.8823497065918008965684236e+280, "5882349706591801", 281},
  {1.5333144214003377449771557e+144, "15333144214003377", 145},
  {7.9616711018887134259285725e+244, "7961671101888713", 245},
  {2.4763374696097484172958023e+39, "24763374696097484", 40},
  {1.5625518743202442269985283e-62, "15625518743202442", -61},
  {7.5492022414923589669105800e+287, "7549202241492359", 288},
  {3.0128043852172796641646088e-120, "30128043852172797", -119},
  {1.9320378250665064572635211e+238, "19320378250665065", 239},
  {1.9005017974821048896425706e-298, "19005017974821049", -297},
  {1.1856712382006875838529561e+48, "11856712382006876", 49},
  {4.0267418842444054214220911e+164, "40267418842444054", 165},
  {1.9474117545045410106947059e-92, "1947411754504541", -91},
  {4.7834290034991992865359617e+115, "4783429003499199", 116},
  {9.7756967351090259227307487e+210, "9775696735109026", 211},
  {4.2053660910463855828518689e+99, "42053660910463856", 100},
  {3.5422348391482964356397251e+79, "35422348391482964", 80},
  {4.1727790635425934239915507e-54, "41727790635425934", -53},
  {1.3489156647181365107205729e-179, "13489156647181365", -178},
  {8.0921432304206482513109222e+03, "8092143230420648", 4},
  {6.8729565693126672337630860e-64, "6872956569312667", -63},
  {2.4952649587596909288278657e+149, "2495264958759691", 150},
  {2.2116750176199531106577201e+142, "2211675017619953", 143},
  {3.5177077838995929326415535e-01, "3517707783899593", 0},
  {1.4300937062694102167305716e-260, "14300937062694102", -259},
  {2.4452780487067302323411079e+274, "24452780487067302", 275},
  {7.5977632054296840483574378e-197, "7597763205429684", -196},
  {8.4314677349360164807876711e+36, "8431467734936016", 37},
  {8.2287230061426578503480656e-04, "8228723006142658", -3},
  {3.8246608461475647923119570e-04, "3824660846147565", -3},
  {1.4978715967859115871097297e+276, "14978715967859116", 277},
  {1.9309058623644149615075783e+82, "1930905862364415", 83},
  {1.1539087965022290079922359e+53, "1153908796502229", 54},
  {8.5116240220444872773746176e-155, "8511624022044487", -154},
  {1.0006186301418679526088519e-202, "1000618630141868", -201},
  {3.2013563667278416812513435e-262, "32013563667278417", -261},
  {1.0606806617324205746377233e-187, "10606806617324206", -186},
  {8.8524523739510216605673683e+140, "8852452373951022", 141},
  {2.2646884904414574676477900e+239, "22646884904414575", 240},
  {2.0202120190448036258098824e+86, "20202120190448036", 87},
  {2.6394379442116119346711757e+250, "2639437944211612", 251},
  {4.4120219272612786077936793e-156, "44120219272612786", -155},
  {3.3040654211971319413709515e-96, "3304065421197132", -95},
  {1.4214062570508403200000000e+17, "14214062570508403", 18},
  {8.1707973497327427121286042e+160, "8170797349732743", 161},
  {7.2271625347721985920651214e-274, "7227162534772199", -273},
  {3.8606944495417016113848097e+132, "38606944495417016", 133},
  {6.1781898825600613633923786e+01, "61781898825600614", 2},
  {1.4635134894895817436757983e-204, "14635134894895817", -203},
  {1.6438521988215129223824322e-278, "1643852198821513", -277},
  {7.0201291114750566657002378e+115, "7020129111475057", 116},
  {1.1163464737233574296648015e-237, "11163464737233574", -236},
  {6.8476733590881353650659320e-235, "6847673359088135", -234},
  {6.6310539923065272024033117e+205, "6631053992306527", 206},
  {3.1437778984492618201234912e-124, "3143777898449262", -123},
  {1.1825540894129980814617192e-77, "1182554089412998", -76},
  {9.6153711045056793268929241e-89, "961537110450568", -88},
  {3.2792613966624271455110132e-114, "3279261396662427", -113},
  {1.9928026912628311253933768e-28, "19928026912628311", -27},
  {2.1558280512256567752625185e+206, "21558280512256568", 207},
  {7.9200080067980894731372542e+162, "792000800679809", 163},
  {8.8733954992295370653218906e+202, "8873395499229537", 203},
  {1.3821820233833622951541638e+165, "13821820233833623", 166},
  {3.8487281000986582238351482e-136, "3848728100098658", -135},
  {1.3701990178650358205347119e+225, "13701990178650358", 226},
  {1.8722400064835309949525708e-170, "1872240006483531", -169},
  {1.1988744070273570020663231e+250, "1198874407027357", 251},
  {4.6428428827761808176427271e+229, "4642842882776181", 230},
  {5.0912891828063151740491225e+149, "5091289182806315", 150},
  {1.4052055196856221577686750e-73, "14052055196856222", -72},
  {4.0188135490334688683856294e+287, "4018813549033469", 288},
  {6.5935456384703997325037134e+246, "65935456384704", 247},
  {1.2904550711630239887008218e-193, "1290455071163024", -192},
  {1.0307098315422598105264556e+150, "10307098315422598", 151},
  {2.6509921578885857646405657e-118, "26509921578885858", -117},
  {4.1830845800262888461616562e-153, "4183084580026289", -152},
  {4.2819273669917067231475853e+188, "4281927366991707", 189},
  {1.8847493222629714193550406e+289, "18847493222629714", 290},
  {1.3155769529202941755008201e+146, "13155769529202942", 147},
  {3.8188305775231315266591914e+289, "38188305775231315", 290},
  {8.6834287665224067036419956e-66, "8683428766522407", -65},
  {7.1546028678209194299572973e-182, "715460286782092", -181},
  {1.1953808290800108637213794e-121, "11953808290800109", -120},
  {5.5753791607467888249362957e+101, "5575379160746789", 102},
  {7.6218999768697691473822799e-178, "7621899976869769", -177},
  {2.5206551687185910448510811e+201, "2520655168718591", 202},
  {7.3094394705297766815857152e-254, "7309439470529777", -253},
  {2.8660334441553762197389981e+209, "28660334441553762", 210},
  {1.7620927915986419307698013e+244, "1762092791598642", 245},
  {2.9562666510105242795382040e-130, "29562666510105243", -129},
  {7.2264469876471243110103605e-26, "7226446987647124", -25},
  {2.0533033370490413154585035e+112, "20533033370490413", 113},
  {2.1067461269953232819528224e-119, "21067461269953233", -118},
  {9.8494524375623964730760623e+80, "9849452437562396", 81},
  {3.0151935310570456160559504e+172, "30151935310570456", 173},
  {9.9637656056640025120417125e+91, "9963765605664003", 92},
  {6.2961102037708263708995339e+178, "62961102037708264", 179},
  {1.3390256391263929567412501e+128, "1339025639126393", 129},
  {1.3655783385174965440814077e+135, "13655783385174965", 136},
  {4.4711690607412443611687273e-246, "44711690607412444", -245},
  {3.7214050551014642034478736e-78, "3721405055101464", -77},
  {4.7988712525747911389938895e-273, "4798871252574791", -272},
  {5.8324410123168375625310916e-249, "5832441012316838", -248},
  {1.2848598770801926164136709e+211, "12848598770801926", 212},
  {3.0999140145502045160496906e-84, "30999140145502045", -83},
  {2.2413400880060077049786589e-129, "22413400880060077", -128},
  {3.9989323732508027856891021e-208, "3998932373250803", -207},
  {4.1380397645765923962148548e-63, "41380397645765924", -62},
  {4.4827090112068832687438145e+114, "4482709011206883", 115},
  {7.5677290220461956805483158e+52, "7567729022046196", 53},
  {2.4528797727978618781900401e-119, "2452879772797862", -118},
  {9.6026239458125140190801728e-201, "9602623945812514", -200},
  {3.7265042141486724574545664e+202, "37265042141486725", 203},
  {1.2915312644021069838903332e+180, "1291531264402107", 181},
  {1.0024413100089434025412463e-169, "10024413100089434", -168},
  {3.5888327591839208619065821e+47, "3588832759183921", 48},
  {7.1067252504728423938968243e+59, "7106725250472842", 60},
  {4.8529206721688796168116351e-96, "485292067216888", -95},
  {1.9928856277427917812019587e+06, "19928856277427918", 7},
  {3.6852219564585953254035839e-298, "36852219564585953", -297},
  {8.9494298585856381395106723e-137, "8949429858585638", -136},
  {8.3994590752086754452406785e-285, "8399459075208675", -284},
  {9.7333129845836340332031250e+11, "9733312984583634", 12},
  {6.5942345998022134881466627e+05, "6594234599802213", 6},
  {5.3857605723957623499117806e-67, "53857605723957623", -66},
  {8.4906269333460203948617302e-54, "849062693334602", -53},
  {2.6249776387283197822270689e+260, "262497763872832", 261},
  {3.2191586384802969875569661e-302, "3219158638480297", -301},
  {2.3168274127185947183030615e+41, "23168274127185947", 42},
  {4.2841057925529797119252261e-150, "42841057925529797", -149},
  {5.2962968891221136063395944e-23, "5296296889122114", -22},
  {3.6897237800457947139571966e-240, "36897237800457947", -239},
  {3.7012583796571375502511573e-175, "37012583796571376", -174},
  {8.9700651079718347167968750e+11, "8970065107971835", 12},
  {4.8287421321348017772988150e-108, "4828742132134802", -107},
  {6.2656103976621988943256752e-260, "6265610397662199", -259},
  {4.6301242691563461974323486e+293, "4630124269156346", 294},
  {1.0049042631880600797400313e+280, "100490426318806", 281},
  {8.3834020732982477176797641e-296, "8383402073298248", -295},
  {4.3677594757120196928931721e-255, "436775947571202", -254},
  {6.7474777511910821068800000e+20, "6747477751191082", 21},
  {1.7396552236047467449319778e+83, "17396552236047467", 84},
  {1.8265915229932488323725419e-206, "18265915229932488", -205},
  {8.2247404988970296066650051e+168, "822474049889703", 169},
  {3.4542414057220025000000000e+14, "34542414057220025", 15},
  {3.6373809535656622599404274e+112, "36373809535656623", 113},
  {1.5018332672184840544583680e+24, "1501833267218484", 25},
  {2.9094871147108723531534469e+289, "29094871147108724", 290},
  {5.5949565309575028403052144e+306, "5594956530957503", 307},
  {3.6179490197546837056311799e-234, "36179490197546837", -233},
  {1.4118116935755608554896289e+248, "14118116935755609", 249},
  {2.2121931521287183236923677e+85, "22121931521287183", 86},
  {2.8923105534875543021349888e+166, "28923105534875543", 167},
  {5.0917543697467082177057839e-216, "5091754369746708", -215},
  {3.1108233487906308138327404e-166, "3110823348790631", -165},
  {2.0656510083869332447648048e+06, "20656510083869332", 7},
  {4.3903961524463377864907602e-135, "4390396152446338", -134},
  {7.9510757474410209677891284e+297, "7951075747441021", 298},
  {1.3577160987778948974609375e+11, "13577160987778949", 12},
  {1.3270389543252426010165635e+98, "13270389543252426", 99},
  {8.6099875058482115891099411e-09, "8609987505848212", -8},
  {1.8526529808903289926135779e+267, "1852652980890329", 268},
  {1.1803579055778676240862637e+162, "11803579055778676", 163},
  {6.7772306959429043530874536e-196, "6777230695942904", -195},
  {4.2897404276365795628815659e+87, "428974042763658", 88},
  {1.0422769831695841483114192e+44, "10422769831695841", 45},
  {1.4085673205496129007970705e-13, "1408567320549613", -12},
  {2.9327198404637174978337518e-211, "29327198404637175", -210},
  {4.6840475045077089515869738e+254, "4684047504507709", 255},
  {5.9281432177070137737521384e+138, "5928143217707014", 139},
  {4.3423478166963285984780096e+185, "43423478166963286", 186},
  {6.2943474188296066044339818e-110, "6294347418829607", -109},
  {7.2028865801423805427229546e+50, "72028865801423805", 51},
  {4.7451250498060989227641287e-182, "4745125049806099", -181},
  {6.9309783453528468501055366e+92, "6930978345352847", 93},
  {1.0145696942420824695523262e-187, "10145696942420825", -186},
  {9.0449993520269956195390348e+50, "9044999352026996", 51},
  {4.7565403283976026551716792e-244, "47565403283976027", -243},
  {3.7271804329816010171236457e+118, "3727180432981601", 119},
  {1.6770684695565818460361083e+140, "16770684695565818", 141},
  {8.9308034168957041650635049e+176, "8930803416895704", 177},
  {1.2555534954902727278337027e+100, "12555534954902727", 101},
  {1.3035789004956227625059581e+64, "13035789004956228", 65},
  {3.0890864819170216080603125e-261, "30890864819170216", -260},
  {3.5487804051552364967194283e+90, "35487804051552365", 91},
  {2.5563210910315054737830034e+78, "25563210910315055", 79},
  {2.1753278733322046336969160e-296, "21753278733322046", -295},
  {2.5207878090322060963801119e+285, "2520787809032206", 286},
  {6.9018360577592296733653531e-55, "690183605775923", -54},
  {7.0264673792385897700766278e+170, "702646737923859", 171},
  {3.3747821406529829295957518e-89, "3374782140652983", -88},
  {4.1789345068909836480863795e-04, "41789345068909836", -3},
  {3.3709321881894292514252668e+174, "33709321881894293", 175},
  {1.7347910999070910594143534e+299, "1734791099907091", 300},
  {2.9667289077007280273437500e+12, "2966728907700728", 13},
  {6.8256429827541858976719688e-193, "6825642982754186", -192},
  {2.9790501191941459034533100e+96, "2979050119194146", 97},
  {4.9283967899355827833672183e-92, "4928396789935583", -91},
  {4.6601280759724517350851977e-242, "4660128075972452", -241},
  {1.3219003471310926367336735e-222, "13219003471310926", -221},
  {7.2230163436392240918959170e-09, "7223016343639224", -8},
  {7.6965390698387789537710117e+173, "7696539069838779", 174},
  {6.1018440091425048483738925e+259, "6101844009142505", 260},
  {4.0302586618929745518271311e-217, "40302586618929746", -216},
  {1.3261349968401778140772255e+265, "13261349968401778", 266},
  {1.0068786740078063279806756e-78, "10068786740078063", -77},
  {1.1741449219034166457604481e-57, "11741449219034166", -56},
  {6.2189963752379086490688299e+206, "6218996375237909", 207},
  {2.0590304439863686752982717e+217, "20590304439863687", 218},
  {3.6038643477349281760760355e+250, "3603864347734928", 251},
  {6.9865982230332883430098681e-166, "6986598223033288", -165},
  {2.7127354093506729557269546e-237, "2712735409350673", -236},
  {6.1905424757369952874656510e+243, "6190542475736995", 244},
  {6.2756459233753822412845381e-214, "6275645923375382", -213},
  {4.2397454839815778150693978e+115, "4239745483981578", 116},
  {7.2125852626298475192570823e+132, "7212585262629848", 133},
  {1.2901653090283797468597633e-239, "12901653090283797", -238},
  {1.2285535057930211057620375e-50, "1228553505793021", -49},
  {2.4867407798842474019900562e-97, "24867407798842474", -96},
  {6.9262620271941699979701853e+143, "692626202719417", 144},
  {3.1742910520848767243908443e-250, "3174291052084877", -249},
  {7.2852873902060490434032992e+40, "7285287390206049", 41},
  {1.2695513666322930429011593e+66, "1269551366632293", 67},
  {5.7814649269323128401235740e+170, "5781464926932313", 171},
  {1.3873809334195033805786305e+206, "13873809334195034", 207},
  {1.0213324654221302912082347e-184, "10213324654221303", -183},
  {2.9232420290875590889025183e-192, "2923242029087559", -191},
  {4.5882435425973787470754118e-243, "4588243542597379", -242},
  {2.6484889649772131355351647e-164, "2648488964977213", -163},
  {6.3168939771032373243452455e-176, "6316893977103237", -175},
  {7.7813614322451865148394124e-42, "7781361432245187", -41},
  {5.5788023270488658905764604e+45, "5578802327048866", 46},
  {1.2181749162428250190469374e-241, "1218174916242825", -240},
  {1.1844505159926861629962853e+106, "11844505159926862", 107},
  {8.2178966059665028536074240e+24, "8217896605966503", 25},
  {2.8078764285538578614648436e-28, "2807876428553858", -27},
  {1.7406934311821591705280490e-106, "17406934311821592", -105},
  {1.5826019404072188442720561e+265, "15826019404072188", 266},
  {1.2565406862811502645936980e+226, "12565406862811503", 227},
  {4.2838089182087085424013184e-152, "42838089182087085", -151},
  {1.8346125730116788548308928e+187, "1834612573011679", 188},
  {2.3399823154499730075599040e-62, "2339982315449973", -61},
  {3.3222602654008297609979642e+85, "332226026540083", 86},
  {1.6118713545872501135210234e+139, "161187135458725", 140},
  {3.7779331607460454482534269e-20, "37779331607460454", -19},
  {4.0860773231587243831478813e-101, "40860773231587244", -100},
  {1.3036195948035063907525890e+49, "13036195948035064", 50},
  {8.2358115681162150219742086e-240, "8235811568116215", -239},
  {1.0881558729484084703885140e+175, "10881558729484085", 176},
  {3.1897254949797919554711718e+215, "3189725494979792", 216},
  {4.3601198282955202494464000e+22, "436011982829552", 23},
  {6.1239889991876420357498714e+178, "6123988999187642", 179},
  {7.5923467121014214667190845e+267, "75923467121014215", 268},
  {1.1800634922383271066662589e+197, "11800634922383271", 198},
  {1.3302854546194006717260435e-71, "13302854546194007", -70},
  {4.1436903199392493651499858e-115, "4143690319939249", -114},
  {1.1025405085221903183627990e+227, "11025405085221903", 228},
  {3.7717832652319813103367748e-61, "3771783265231981", -60},
  {5.4166113552561563849888546e+139, "5416611355256156", 140},
  {3.9877727160770383139675135e+114, "39877727160770383", 115},
  {1.7561843565440878344464654e-158, "17561843565440878", -157},
  {1.0265062749212941002886658e+157, "10265062749212941", 158},
  {1.4309732444757124412527302e+78, "14309732444757124", 79},
  {2.4411485923020031615089506e+113, "2441148592302003", 114},
  {7.3291732987914246009191844e-153, "7329173298791425", -152},
  {1.5699580231652736352614165e-20, "15699580231652736", -19},
  {1.2324461558769895260722733e-117, "12324461558769895", -116},
  {1.3080315004676775367054007e+188, "13080315004676775", 189},
  {3.6267056781972380322045224e+169, "3626705678197238", 170},
  {5.7075657780582872647839883e+233, "5707565778058287", 234},
  {5.2431177915083557898112103e-210, "5243117791508356", -209},
  {2.4538539919473226853600439e-77, "24538539919473227", -76},
  {4.4864117245237020146633129e+228, "4486411724523702", 229},
  {7.6984431261505368545178284e-235, "7698443126150537", -234},
  {2.9225728869980660541926719e-81, "2922572886998066", -80},
  {9.1114638011448849921647814e-106, "9111463801144885", -105},
  {7.4925207323836602032120227e+71, "749252073238366", 72},
  {5.5246162478887294772387983e+76, "55246162478887295", 77},
  {3.3331964673498032410701831e+159, "33331964673498032", 160},
  {1.8801513715155284946066362e+145, "18801513715155285", 146},
  {2.5541517062119613503837450e-148, "25541517062119614", -147},
  {1.3054345050835980795983763e+37, "1305434505083598", 38},
  {3.6067108789367325059556828e-210, "36067108789367325", -209},
  {2.7826845334342173880276763e+237, "27826845334342174", 238},
  {2.9644469206483350991133949e+57, "2964446920648335", 58},
  {1.8206353611507662443698561e+264, "18206353611507662", 265},
  {1.0639120688981455476966053e+260, "10639120688981455", 261},
  {1.2286869255953479288794836e-250, "1228686925595348", -249},
  {1.3584461877148006111383438e+07, "13584461877148006", 8},
  {2.5092368667936976563411401e+142, "25092368667936977", 143},
  {2.1456399941754983704778468e+100, "21456399941754984", 101},
  {1.0079188182314370798694229e+147, "1007918818231437", 148},
  {7.5638344177336179069120593e+34, "7563834417733618", 35},
  {4.7323718554929397466999892e-26, "473237185549294", -25},
  {2.6926583590975544367573735e-143, "26926583590975544", -142},
  {8.1014905504757860423591526e+26, "8101490550475786", 27},
  {5.5693181116449634520865755e+165, "55693181116449635", 166},
  {1.1101765902252107081382742e-226, "11101765902252107", -225},
  {4.7605915460540002723683548e-195, "4760591546054", -194},
  {1.2789164040439532677143245e-189, "12789164040439533", -188},
  {7.2332861435879220872849032e+119, "7233286143587922", 120},
  {2.7374752101552903796649566e-88, "27374752101552904", -87},
  {1.1677130353188348280464301e-198, "11677130353188348", -197},
  {4.1733313098879328540183293e+91, "4173331309887933", 92},
  {1.5078420775054413312453413e+236, "15078420775054413", 237},
  {5.2237179768417456171677147e-83, "52237179768417456", -82},
  {1.5203811544810001637979695e+61, "15203811544810002", 62},
  {1.0818326746695678053099937e-254, "10818326746695678", -253},
  {2.8105245993735299725385989e+77, "281052459937353", 78},
  {3.3853885523270286936221281e-84, "33853885523270287", -83},
  {5.0618126852120910839128189e-25, "5061812685212091", -24},
  {8.9678362453460652094485753e-300, "8967836245346065", -299},
  {8.7118562070767792496900494e+103, "871185620707678", 104},
  {1.0026086550369900394909922e+47, "100260865503699", 48},
  {6.4215285716673374524662824e+196, "64215285716673375", 197},
  {3.1567298278400008400436112e+156, "3156729827840001", 157},
  {1.4551544385474960360961096e-255, "1455154438547496", -254},
  {3.9740258675651876656030185e+226, "39740258675651877", 227},
  {4.4501932931214164671224724e+126, "44501932931214165", 127},
  {7.6992474817007963608280865e-150, "7699247481700796", -149},
  {9.9423016370871554056032625e+61, "9942301637087155", 62},
  {1.1305534908357999249934967e+103, "11305534908358", 104},
  {1.2189605407974470617673702e-120, "1218960540797447", -119},
  {2.8235223616079290303444655e-64, "2823522361607929", -63},
  {1.0817999310645602395311503e+307, "10817999310645602", 308},
  {3.4755973412550102964189468e-151, "347559734125501", -150},
  {3.5910136055976035733619287e+286, "35910136055976036", 287},
  {7.8990564065912693466037458e+261, "789905640659127", 262},
  {2.0805538196630906605606021e+275, "20805538196630907", 276},
  {1.2243761812877082561219056e-09, "12243761812877083", -8},
  {1.3821032540956850340113773e-44, "1382103254095685", -43},
  {4.3436758688637207834404031e-170, "4343675868863721", -169},
  {5.6088788690195640017335312e+140, "5608878869019564", 141},
  {4.1117694738456277870988185e-295, "4111769473845628", -294},
  {4.9979813669532905009840128e+25, "49979813669532905", 26},
  {6.1053077894849695164339958e-117, "61053077894849695", -116},
  {5.7394528750176165366251913e-235, "57394528750176165", -234},
  {1.1969597732150926651847694e+46, "11969597732150927", 47},
  {1.2847486832229975098376882e-210, "12847486832229975", -209},
  {1.1899064274254914045521128e-110, "11899064274254914", -109},
  {8.8094814259658059850353863e-100, "8809481425965806", -99},
  {7.7621644000448945306686822e-278, "7762164400044895", -277},
  {5.3622550556556277737706608e-245, "5362255055655628", -244},
  {4.4296718345122746048168704e+136, "44296718345122746", 137},
  {1.9028190267400794265435712e-290, "19028190267400794", -289},
  {1.4684104194525798400000000e+17, "146841041945258", 18},
  {2.7155851724927993292818744e-57, "27155851724927993", -56},
  {9.2169516748271654082615552e-256, "9216951674827165", -255},
  {6.0732577199185800469236672e+196, "607325771991858", 197},
  {9.1151925515395492465249656e+290, "9115192551539549", 291},
  {2.5305197191053903602667445e+113, "25305197191053904", 114},
  {6.4169849403693762612356190e+61, "6416984940369376", 62},
  {1.0282375096590852018586569e+68, "10282375096590852", 69},
  {8.7603661255274095997011732e+174, "876036612552741", 175},
  {2.5460075879737677833616338e-166, "25460075879737678", -165},
  {7.3116465602419976522671615e+149, "7311646560241998", 150},
  {1.1915859711799364938251626e-50, "11915859711799365", -49},
  {1.2705574384864443108309955e+253, "12705574384864443", 254},
  {1.4227879399078564615478324e-269, "14227879399078565", -268},
  {1.2991982259763389934954226e-64, "1299198225976339", -63},
  {4.1622162518782721777426440e+303, "4162216251878272", 304},
  {3.1733296135298733635674203e-261, "31733296135298734", -260},
  {1.2619248237776723830704447e-65, "12619248237776724", -64},
  {1.4979830258084592276954447e-299, "14979830258084592", -298},
  {1.1041374232467013339149375e-93, "11041374232467013", -92},
  {1.2308337424699479293456084e+171, "1230833742469948", 172},
  {7.3340009995183813411232533e-11, "7334000999518381", -10},
  {9.9786894405461437960176784e-214, "9978689440546144", -213},
  {1.4658014726960951960414434e+297, "14658014726960952", 298},
  {9.9640762992433407449653553e+138, "9964076299243341", 139},
  {3.3789206395935750247690189e-100, "3378920639593575", -99},
  {7.9460367554522543969424681e-304, "7946036755452254", -303},
  {7.8052570540538901047826973e+28, "780525705405389", 29},
  {5.6458074239965036081766263e-40, "5645807423996504", -39},
  {3.2814755479151327649955674e+302, "32814755479151328", 303},
  {1.9655626671459859488801012e-140, "1965562667145986", -139},
  {7.1639087946944831259582089e+177, "7163908794694483", 178},
  {4.7115544196603054707381030e-217, "47115544196603055", -216},
  {7.8748575745505732487751558e-159, "7874857574550573", -158},
  {4.4792520599459290111589664e-185, "4479252059945929", -184},
  {2.1299714490838869159428804e-237, "2129971449083887", -236},
  {3.0967153582638405126215185e-79, "30967153582638405", -78},
  {4.7469860517650534865554330e+242, "47469860517650535", 243},
  {1.3127810359755543126304349e-111, "13127810359755543", -110},
  {4.2190992272684406804164079e-241, "4219099227268441", -240},
  {1.1838089560943832585086018e+290, "11838089560943833", 291},
  {2.5810887210937062263838015e+02, "2581088721093706", 3},
  {3.0680950357484428216064747e-190, "3068095035748443", -189},
  {6.2891699177636252367683533e-83, "6289169917763625", -82},
  {1.3078997920487654001874862e-303, "13078997920487654", -302},
  {6.9689916176008216935153217e+36, "6968991617600822", 37},
  {3.3804354654182774273449216e+162, "33804354654182774", 163},
  {8.1057634486789097324668091e+46, "810576344867891", 47},
  {6.8332648553015834058386530e-66, "6833264855301583", -65},
  {2.1878322573552126947517437e-239, "21878322573552127", -238},
  {3.2543317345420604931400243e-28, "32543317345420605", -27},
  {8.7494554845594669461820139e-203, "8749455484559467", -202},
  {1.5199481934426530157265618e-264, "1519948193442653", -263},
  {1.3375711993765561658865610e+63, "13375711993765562", 64},
  {5.1180084522103649556462186e+189, "5118008452210365", 190},
  {1.2490183561550306135475477e+243, "12490183561550306", 244},
  {1.2123863602569211704989324e-58, "12123863602569212", -57},
  {1.1177030011188515495071547e-67, "11177030011188515", -66},
  {2.2532425266402352335680676e+272, "22532425266402352", 273},
  {4.6136492993503859386380545e-268, "4613649299350386", -267},
  {6.3824561554745677626800925e+38, "6382456155474568", 39},
  {9.7803127605064065727911016e-223, "9780312760506407", -222},
  {2.2289945368005048506083978e-60, "22289945368005049", -59},
  {5.0552724970480014222333093e-181, "5055272497048001", -180},
  {1.8813943828136128923687348e+206, "1881394382813613", 207},
  {6.3466858049825469121296922e+84, "6346685804982547", 85},
  {9.3214812829120908649638860e-213, "9321481282912091", -212},
  {1.7067613580039436567528755e-136, "17067613580039437", -135},
  {8.7467910827472778061414400e+23, "8746791082747278", 24},
  {3.3545048562773846358510681e-183, "33545048562773846", -182},
  {1.7375310837016870588076239e-99, "1737531083701687", -98},
  {7.2053606197640754845928681e-161, "7205360619764075", -160},
  {7.9242419961323812500000000e+14, "7924241996132381", 15},
  {4.0444225400532472198406790e+288, "4044422540053247", 289},
  {2.0405121446556918254377286e+80, "20405121446556918", 81},
  {2.1206525738563498533505545e-119, "21206525738563499", -118},
  {4.4786563760100769020146898e+35, "4478656376010077", 36},
  {5.7296884189745676800000000e+17, "5729688418974568", 18},
  {2.9002743755902992426972805e-163, "2900274375590299", -162},
  {5.0958765639218223227072244e-212, "5095876563921822", -211},
  {1.5045582670035989140125171e+59, "1504558267003599", 60},
  {2.8334063272915561746082249e-120, "28334063272915562", -119},
  {1.5701182673921631882837140e-170, "15701182673921632", -169},
  {1.9930885783511932548541958e-194, "19930885783511933", -193},
  {1.5801622831397834698139351e-130, "15801622831397835", -129},
  {1.9239891383703264991607503e+267, "19239891383703265", 268},
  {9.5567782729569232148733895e+306, "9556778272956923", 307},
  {5.3995450476858785448980936e+302, "53995450476858785", 303},
  {3.9199800846700860554465644e-62, "3919980084670086", -61},
  {4.6582641713992825716571622e-45, "46582641713992826", -44},
  {1.5150415626683604071558913e-189, "15150415626683604", -188},
  {3.8656644585091346511101549e+54, "38656644585091347", 55},
  {7.9590859971836600825983618e-280, "795908599718366", -279},
  {3.1574441635898477058186415e-286, "31574441635898477", -285},
  {8.9385713302924362267522338e+48, "8938571330292436", 49},
  {1.1337822965080478046239237e+58, "11337822965080478", 59},
  {4.0460339557103214280786574e-01, "40460339557103214", 0},
  {9.0116833000349473244253298e-169, "9011683300034947", -168},
  {3.6003515002668701619049836e+182, "360035150026687", 183},
  {2.0886041857149044823208818e+288, "20886041857149045", 289},
  {9.4203642189937531406660961e-27, "9420364218993753", -26},
  {8.2091827945900450369796421e+145, "8209182794590045", 146},
  {2.4512206491920915722346418e+306, "24512206491920916", 307},
  {1.1851978337480514158753572e-171, "11851978337480514", -170},
  {1.3432888428987519304990648e+293, "1343288842898752", 294},
  {1.3275793405015585218514140e-104, "13275793405015585", -103},
  {2.2636286894481042819257653e+123, "22636286894481043", 124},
  {1.2189116436217088392542792e+129, "12189116436217088", 130},
  {1.1183198509624282951898265e+172, "11183198509624283", 173},
  {8.1464431961036373940280729e-196, "8146443196103637", -195},
  {3.5544419678415676114798755e-171, "35544419678415676", -170},
  {1.2242880996291819318880197e-168, "1224288099629182", -167},
  {1.1316568269832072047458935e+143, "11316568269832072", 144},
  {1.0668355915166504138964648e+278, "10668355915166504", 279},
  {1.0710408726623763644754690e+28, "10710408726623764", 29},
  {3.8778992331809973432704396e+72, "3877899233180997", 73},
  {5.0145866705273107806117214e-89, "5014586670527311", -88},
  {2.5947156861271403273350283e+188, "25947156861271403", 189},
  {1.0657024547765815453983356e+134, "10657024547765815", 135},
  {5.4179921768629104127070346e+54, "54179921768629104", 55},
  {1.1267116881467812814291808e+208, "11267116881467813", 209},
  {1.4311143265161327669933864e-207, "14311143265161328", -206},
  {5.8778224349724717435746218e-161, "5877822434972472", -160},
  {1.9257754050665942679062723e+290, "19257754050665943", 291},
  {3.5391948304056419797641871e+281, "3539194830405642", 282},
  {5.0635045195161692031319142e-111, "5063504519516169", -110},
  {1.4206294562786769526663989e+208, "1420629456278677", 209},
  {8.4131259962212253490166161e-06, "8413125996221225", -5},
  {9.9854586599734472763856480e+152, "9985458659973447", 153},
  {3.3584148113134879548719173e-26, "3358414811313488", -25},
  {7.0081320037382536627359545e-139, "7008132003738254", -138},
  {1.4172359645890244969957917e-70, "14172359645890245", -69},
  {7.5760692482800850822824070e-55, "7576069248280085", -54},
  {6.0475321663205800569770180e-302, "604753216632058", -301},
  {1.2749271709011341007264190e-164, "12749271709011341", -163},
  {1.3602466772418301064605948e-42, "13602466772418301", -41},
  {2.1473557401715692775926414e-106, "21473557401715693", -105},
  {4.7837567233182962673845183e-285, "4783756723318296", -284},
  {2.7123964218894909635981483e+156, "2712396421889491", 157},
  {4.4469324318329505614748362e+271, "44469324318329506", 272},
  {7.4486950285035562314527094e+258, "7448695028503556", 259},
  {1.1974769775729722900471067e-224, "11974769775729723", -223},
  {1.8974756677883512469652020e-236, "18974756677883512", -235},
  {5.8505159926901676896770997e-38, "5850515992690168", -37},
  {4.2309781467874876170753851e+02, "42309781467874876", 3},
  {8.2536252201645341269988686e-224, "8253625220164534", -223},
  {1.9885495440724785761767157e-04, "19885495440724786", -3},
  {3.5317591814991939067602378e+212, "3531759181499194", 213},
  {1.0662386076494041994880122e-11, "10662386076494042", -10},
  {8.1838794997468187646800116e+253, "8183879499746819", 254},
  {1.9822839581127765726351852e+27, "19822839581127766", 28},
  {2.2577143757312229306492412e+115, "2257714375731223", 116},
  {2.2455103009475345745264715e-66, "22455103009475346", -65},
  {1.7057394249125161482958003e-281, "1705739424912516", -280},
  {3.0457939418004402843353791e+244, "304579394180044", 245},
  {7.0679810085883111944992961e+83, "7067981008588311", 84},
  {7.1352120082038547925214801e+236, "7135212008203855", 237},
  {2.7970740811283540532066497e-306, "2797074081128354", -305},
  {2.4626608494861051465561681e-67, "2462660849486105", -66},
  {1.6260091099282575832813466e+194, "16260091099282576", 195},
  {1.0926740277527470963425280e+24, "10926740277527471", 25},
  {9.1118490344914304224377056e-178, "911184903449143", -177},
  {6.0648796499339388130255067e+184, "6064879649933939", 185},
  {1.3978163336362099951516967e+32, "139781633363621", 33},
  {2.9543244135796882892619390e+144, "29543244135796883", 145},
  {4.2759613377575273250846046e-51, "42759613377575273", -50},
  {1.3525968776990303279118529e-138, "13525968776990303", -137},
  {8.8773357154495855438263733e-300, "8877335715449586", -299},
  {1.5644343964596697530832663e-38, "15644343964596698", -37},
  {5.2150127266566570598353688e-51, "5215012726656657", -50},
  {2.2563892595132904176658898e+59, "22563892595132904", 60},
  {2.2931843368044198488620868e-195, "229318433680442", -194},
  {7.5435432785300444286875736e+78, "7543543278530044", 79},
  {1.2542101903941578408613516e-77, "12542101903941578", -76},
  {1.3742347217344849503772659e-130, "1374234721734485", -129},
  {3.0814731064239994823281646e-126, "30814731064239995", -125},
  {6.5279330143551605271527005e-293, "652793301435516", -292},
  {2.3882311961670402926150838e-231, "23882311961670403", -230},
  {8.5317078712264423379279289e-154, "8531707871226442", -153},
  {3.7318564901029014720937812e-54, "37318564901029015", -53},
  {9.1244945411382152161440354e-152, "9124494541138215", -151},
  {2.1712407996770828359566621e+286, "2171240799677083", 287},
  {1.5268840530509730400232112e-104, "1526884053050973", -103},
  {1.5699459333979837883893522e-307, "15699459333979838", -306},
  {1.5379394495059502700470174e-271, "15379394495059503", -270},
  {4.3627040072152665580098333e+186, "4362704007215267", 187},
  {5.9568046100297906527740128e+212, "5956804610029791", 213},
  {7.5980327058139196346252663e+191, "759803270581392", 192},
  {9.5773572273829069494941959e-174, "9577357227382907", -173},
  {8.3062220889075801433775946e-213, "830622208890758", -212},
  {7.0179741447121594990283654e-203, "701797414471216", -202},
  {2.1286093976958185454734960e+84, "21286093976958185", 85},
  {2.0447446330522124189883471e+06, "20447446330522124", 7},
  {5.9920825496361280297814765e+260, "5992082549636128", 261},
  {1.6170481373040403276645060e-184, "16170481373040403", -183},
  {2.1256404374771990250843705e-237, "2125640437477199", -236},
  {1.1232416767626939696329788e-38, "1123241676762694", -37},
  {2.5877328814105562837380754e+135, "25877328814105563", 136},
  {2.9629374106955661580453861e-277, "2962937410695566", -276},
  {1.3015462458992440783956846e-223, "1301546245899244", -222},
  {1.1282756323147849755660353e+306, "1128275632314785", 307},
  {4.0796446079136199282385579e+80, "407964460791362", 81},
  {1.5991058291233286156240412e-208, "15991058291233286", -207},
  {3.8701746439521999652137649e+214, "38701746439522", 215},
  {2.0232363002680432095066810e-168, "20232363002680432", -167},
  {6.5254585450580425493381219e+185, "6525458545058043", 186},
  {1.7922928809364061945856000e+22, "17922928809364062", 23},
  {1.0909683066676517279694784e-06, "10909683066676517", -5},
  {5.5559291135473869698419626e+99, "5555929113547387", 100},
  {3.4931085477239960957177323e+87, "3493108547723996", 88},
  {5.9656730546075024357287578e+211, "5965673054607502", 212},
  {1.1543956136591994222779313e+110, "11543956136591994", 111},
  {2.1293919763872594724415173e+84, "21293919763872595", 85},
  {1.5339356858213818552973303e-238, "15339356858213819", -237},
  {1.5179048001304200963347646e+184, "15179048001304201", 185},
  {3.0035857017813708947958830e+118, "3003585701781371", 119},
  {1.0489521954853664645343736e+165, "10489521954853665", 166},
  {1.2207416781421016824474718e-11, "12207416781421017", -10},
  {2.2665604858176172559430860e-291, "22665604858176173", -290},
  {5.2403001513752343221575560e-182, "5240300151375234", -181},
  {1.9633365461468399685502343e-72, "196333654614684", -71},
  {2.5186657110670557416024803e-162, "25186657110670557", -161},
  {1.0605837738318390504962654e-36, "1060583773831839", -35},
  {2.3481392319628154349556087e+90, "23481392319628154", 91},
  {4.3862067187878164181478648e+86, "43862067187878164", 87},
  {8.4651397263969728147703687e-130, "8465139726396973", -129},
  {3.7048210776232973974978989e-209, "37048210776232974", -208},
  {5.4452128665442521843265268e+210, "5445212866544252", 211},
  {4.2108185590500860806387072e-110, "4210818559050086", -109},
  {1.1637721756880300945857395e+257, "11637721756880301", 258},
  {2.1606716247612518310546875e+10, "2160671624761252", 11},
  {2.4979058020580673206101516e-236, "24979058020580673", -235},
  {1.8527911343223938564737703e-233, "18527911343223939", -232},
  {2.5008681798185895414390226e+61, "25008681798185895", 62},
  {9.0845512234993834527957194e+213, "9084551223499383", 214},
  {3.4900556687987923889700264e+254, "34900556687987924", 255},
  {3.4589936076885208853511744e-48, "3458993607688521", -47},
  {1.1519652622502911073241852e-206, "11519652622502911", -205},
  {2.1261911266296869116636600e-92, "2126191126629687", -91},
  {7.0018111862968647067554865e+180, "7001811186296865", 181},
  {6.8084367215904990568106701e-66, "6808436721590499", -65},
  {4.2527656921672145696077630e-98, "42527656921672146", -97},
  {4.2787364428294089878346859e-230, "4278736442829409", -229},
  {4.4806962949857920000000000e+15, "4480696294985792", 16},
  {1.4192866770457701873924787e+210, "14192866770457702", 211},
  {1.7641114904220238510798497e-174, "17641114904220239", -173},
  {1.1801671877225007471263556e+159, "11801671877225007", 160},
  {1.8552500152698535357984490e+142, "18552500152698535", 143},
  {3.1381658629973088796921876e-263, "3138165862997309", -262},
  {6.6096653712069376872154328e-204, "6609665371206938", -203},
  {1.5214968041006237691453362e+172, "15214968041006238", 173},
  {5.7206379499687633729473703e-186, "5720637949968763", -185},
  {5.1030057466025393506974992e+306, "51030057466025394", 307},
  {3.2449894831575948141009678e-131, "3244989483157595", -130},
  {3.2564996621455621327629096e+198, "3256499662145562", 199},
  {1.4033893061288305921754047e+161, "14033893061288306", 162},
  {1.1357599083001490741754851e-222, "1135759908300149", -221},
  {1.5469565998642123265206873e+156, "15469565998642123", 157},
  {2.0052315994743817912585243e-132, "20052315994743818", -131},
  {3.7069288249750266092887393e-117, "37069288249750266", -116},
  {7.5901694248841652925661540e+107, "7590169424884165", 108},
  {9.3288261497745458828315712e+155, "9328826149774546", 156},
  {1.4210422623828284312837132e+35, "14210422623828284", 36},
  {2.2628293709755265742648181e+216, "22628293709755266", 217},
  {2.1794759859539448291385628e-132, "21794759859539448", -131},
  {8.5146903587478432984397524e-260, "8514690358747843", -259},
  {2.8751616365611531859952668e-139, "2875161636561153", -138},
  {9.1405365604344382827462429e+185, "9140536560434438", 186},
  {3.0911476717690037348340177e+174, "30911476717690037", 175},
  {1.4824445797385016676486633e+178, "14824445797385017", 179},
  {2.5560252340788667358463835e-11, "25560252340788667", -10},
  {3.3070612508457213363852504e+220, "33070612508457213", 221},
  {5.9206036332873003459158373e+285, "59206036332873", 286},
  {6.5889056381448518184331228e+84, "6588905638144852", 85},
  {1.1848858530348425893865596e-42, "11848858530348426", -41},
  {9.2352303644040351308321292e+272, "9235230364404035", 273},
  {2.3462220773265649829450876e+117, "2346222077326565", 118},
  {1.5178934165528841121755052e-193, "1517893416552884", -192},
  {6.7867010864011043679007398e-292, "6786701086401104", -291},
  {6.1762836340584062433851118e+168, "6176283634058406", 169},
  {4.2540175851389856761271639e+161, "42540175851389857", 162},
  {2.5532367425905400032829110e+213, "255323674259054", 214},
  {2.2765143561018587143414229e+154, "22765143561018587", 155},
  {1.3136846608659409617341712e+70, "1313684660865941", 71},
  {2.0556218137784542473695383e-101, "20556218137784542", -100},
  {2.2527573522652956990956325e+114, "22527573522652957", 115},
  {4.1810922462557145518633659e-130, "41810922462557146", -129},
  {7.9158299095406567377095795e+115, "7915829909540657", 116},
  {4.5108484817186368235614392e+146, "4510848481718637", 147},
  {2.3293588476710756304261973e-216, "23293588476710756", -215},
  {7.0193533803400673028948762e-89, "7019353380340067", -88},
  {9.1731540690049397276937032e+213, "917315406900494", 214},
  {1.6662332659723288585469437e+306, "1666233265972329", 307},
  {3.8156740347070657336860742e-270, "3815674034707066", -269},
  {3.0562315442991168965447057e+114, "3056231544299117", 115},
  {4.8592413536683126916064211e+305, "4859241353668313", 306},
  {6.8654607603426435697751953e-180, "68654607603426436", -179},
  {4.8643882761106039734216274e+58, "4864388276110604", 59},
  {5.7015519218423124075475470e-282, "57015519218423124", -281},
  {2.7748869834570070804639924e-249, "2774886983457007", -248},
  {1.0659476368658087479931974e+133, "10659476368658087", 134},
  {1.4743178538278394945048388e-127, "14743178538278395", -126},
  {7.3618068759867923006983084e+29, "7361806875986792", 30},
  {2.7576465740620840649001727e-200, "2757646574062084", -199},
  {9.3919635259628038212871251e-299, "9391963525962804", -298},
  {8.5714609151191091733609888e-128, "8571460915119109", -127},
  {1.3729361633080946199580870e+292, "13729361633080946", 293},
  {6.6430429337039303915542663e-121, "664304293370393", -120},
  {3.6538729881262583280982624e-269, "3653872988126258", -268},
  {1.2037945324363567559783075e+133, "12037945324363568", 134},
  {5.4168828066431052516315096e-245, "5416882806643105", -244},
  {1.9753065800273925112229279e-01, "19753065800273925", 0},
  {8.3605246490081575973367058e-13, "8360524649008158", -12},
  {1.2449286897134509055403732e+103, "1244928689713451", 104},
  {1.1349053468684582590352097e-121, "11349053468684583", -120},
  {8.5563079702786420618379742e+167, "8556307970278642", 168},
  {1.8544687692465903135722165e-215, "18544687692465903", -214},
  {1.2572887671259260049826056e+49, "1257288767125926", 50},
  {5.7441747976988973133020494e-91, "5744174797698897", -90},
  {4.1718000130753075569760991e-255, "41718000130753076", -254},
  {7.5759745408873201217602092e-181, "757597454088732", -180},
  {1.5695733044021446758870519e-92, "15695733044021447", -91},
  {1.2681624450718905583306965e-300, "12681624450718906", -299},
  {1.4053197891041043140290642e+187, "14053197891041043", 188},
  {1.9133537686209331936453739e+114, "19133537686209332", 115},
  {3.1367414378678733127651579e+202, "31367414378678733", 203},
  {3.2915885832577762509848418e-28, "32915885832577763", -27},
  {8.1911652623782816081694402e+105, "8191165262378282", 106},
  {1.7148685191040974415500092e-15, "17148685191040974", -14},
  {3.0785843472314325165386949e+274, "30785843472314325", 275},
  {4.1797077928349097472207107e-19, "41797077928349097", -18},
  {1.5451091810526398125527618e+124, "15451091810526398", 125},
  {7.9895655684520897921174765e+02, "798956556845209", 3},
  {2.1082170656302371344003239e-63, "2108217065630237", -62},
  {1.2048712244380948649126428e+194, "12048712244380949", 195},
  {8.7043892499446861042389352e+28, "8704389249944686", 29},
  {1.5248833855511914614488944e-02, "15248833855511915", -1},
  {1.1981541775544353506553672e-173, "11981541775544354", -172},
  {9.0071122630347273108838563e+89, "9007112263034727", 90},
  {4.4140859153728998501629763e+77, "44140859153729", 78},
  {4.0659217313022023917273190e-121, "4065921731302202", -120},
  {1.5596816088287091804101846e-177, "15596816088287092", -176},
  {2.4809061602388194243299383e-193, "24809061602388194", -192},
  {1.3869894407084284900934222e-129, "13869894407084285", -128},
  {2.2506165608717092732218269e+201, "22506165608717093", 202},
  {2.1393426267406259653795500e-137, "2139342626740626", -136},
  {3.1652308314772761287000004e+232, "3165230831477276", 233},
  {1.7919271915126442909240723e+08, "17919271915126443", 9},
  {2.1290050434963221302752755e-256, "2129005043496322", -255},
  {4.1037529048158537159705320e+205, "4103752904815854", 206},
  {4.4119327705039994566919212e-116, "44119327705039995", -115},
  {2.9207916922523111010181088e+107, "2920791692252311", 108},
  {3.2237141815771510459291668e-142, "3223714181577151", -141},
  {3.3942318759549336971422246e+121, "33942318759549337", 122},
  {1.0522126024754440065245223e+132, "1052212602475444", 133},
  {1.0274020646787467098631777e+121, "10274020646787467", 122},
  {3.2588480023024517433390382e+156, "32588480023024517", 157},
  {1.2415391092414191869088168e+125, "12415391092414192", 126},
  {4.8149840989299185095780962e+115, "48149840989299185", 116},
  {1.6844214544625724000963366e+104, "16844214544625724", 105},
  {1.4886317801476127383782621e-43, "14886317801476127", -42},
  {2.9860743145821474357845510e-208, "29860743145821474", -207},
  {4.6636991253202261406755884e-29, "4663699125320226", -28},
  {6.1862475894739103881207332e+156, "61862475894739104", 157},
  {1.1633377570519871474730708e-257, "11633377570519871", -256},
  {6.9452101865017686018896377e-213, "6945210186501769", -212},
  {8.7373823311413347255438566e+05, "8737382331141335", 6},
  {1.1511321057220908068421721e+109, "11511321057220908", 110},
  {2.3326430597908131042262031e-34, "2332643059790813", -33},
  {7.1312219612940703095103783e-181, "713122196129407", -180},
  {6.3216849543446495601976293e+237, "63216849543446496", 238},
  {5.7844472004917453976012111e+153, "57844472004917454", 154},
  {6.4359322372431303930504468e-114, "64359322372431304", -113},
  {3.3994160778727084976198141e-247, "33994160778727085", -246},
  {1.0493263527091236247983550e+274, "10493263527091236", 275},
  {2.7480238140682910032248840e-300, "2748023814068291", -299},
  {7.2114987934731291196335325e+223, "7211498793473129", 224},
  {4.0038328552051436990488395e+52, "40038328552051437", 53},
  {5.4282144100573318186413530e+109, "5428214410057332", 110},
  {2.6017820359934536758745269e+286, "26017820359934537", 287},
  {9.5455959526279245684888244e+293, "9545595952627925", 294},
  {3.4230777791753963028718905e-185, "3423077779175396", -184},
  {1.8282596271939302128986957e-117, "18282596271939302", -116},
  {9.2422676683102617915986832e+56, "9242267668310262", 57},
  {2.0727002928349520854383759e+108, "2072700292834952", 109},
  {1.1545917298438992309570312e+11, "11545917298438992", 12},
  {2.3261851593030603464032544e-102, "23261851593030603", -101},
  {1.9427876161294096725271429e+298, "19427876161294097", 299},
  {2.3555838159298942456517470e-133, "23555838159298942", -132},
  {1.3177037029314469527565137e-12, "1317703702931447", -11},
  {6.9721376516639201916890873e+178, "697213765166392", 179},
  {3.0929917362425224674303124e-196, "30929917362425225", -195},
  {1.0612904782443330979710435e-97, "10612904782443331", -96},
  {7.2439619660957076255222486e-219, "7243961966095708", -218},
  {6.4883578028379375268741569e+01, "6488357802837938", 2},
  {2.0371657798946005465737956e-58, "20371657798946005", -57},
  {1.8448874923843477106606455e-106, "18448874923843477", -105},
  {2.3606021364177077938348556e-82, "23606021364177078", -81},
  {2.7293926406933002447057193e-211, "27293926406933002", -210},
  {2.3124046380513226562500000e+13, "23124046380513227", 14},
  {4.9123417479364804685358433e+274, "49123417479364805", 275},
  {2.1071153662105023948928548e-44, "21071153662105024", -43},
  {3.5394811198608006918914882e+30, "35394811198608007", 31},
  {2.4308567507957415160346706e+56, "24308567507957415", 57},
  {9.9313717956191041120056043e-98, "9931371795619104", -97},
  {4.9318963551972041239541318e-20, "4931896355197204", -19},
  {4.8823836883401290446459015e-73, "4882383688340129", -72},
  {6.5415467385686119011764568e+122, "6541546738568612", 123},
  {9.4203270110089540602340052e-250, "9420327011008954", -249},
  {2.2594095901288009375000000e+14, "2259409590128801", 15},
  {1.5907171609398462791200000e-74, "15907171609398463", -73},
  {6.2543880273183227823982942e+87, "6254388027318323", 88},
  {3.4715062938822101847036437e+249, "347150629388221", 250},
  {2.0177888164336584865543589e-07, "20177888164336585", -6},
  {4.5183453075199515338358931e-54, "45183453075199515", -53},
  {1.7616538120504274641537010e+127, "17616538120504275", 128},
  {5.4741119436231768952536746e-252, "5474111943623177", -251},
  {7.0698972082379948153577469e+267, "7069897208237995", 268},
  {4.3364817956360426123526388e+120, "43364817956360426", 121},
  {4.8979865556394837077888589e+210, "48979865556394837", 211},
  {3.6313368151400299443407587e+58, "363133681514003", 59},
  {2.5114701641231020668818553e-127, "2511470164123102", -126},
  {8.0054951234573153601032387e-280, "8005495123457315", -279},
  {1.0102018644384569615877176e+181, "1010201864438457", 182},
  {1.3546913241085451820918982e-202, "13546913241085452", -201},
  {4.1872978392412275444183267e-160, "41872978392412275", -159},
  {3.5204872051041832726389421e-112, "35204872051041833", -111},
  {1.6405102123233088890661005e+90, "1640510212323309", 91},
  {1.9696015587300561903662210e-87, "19696015587300562", -86},
  {5.1841678561633785600000000e+17, "51841678561633786", 18},
  {6.1665319359022086309962649e+58, "6166531935902209", 59},
  {1.2564350125693388790778426e+306, "12564350125693389", 307},
  {3.3108462873649429687500000e+13, "3310846287364943", 14},
  {3.4251791043721102214264154e+43, "342517910437211", 44},
  {1.1316605298172486328125000e+13, "11316605298172486", 14},
  {8.1855541899668665356287468e+36, "8185554189966867", 37},
  {2.0161797301012599924766511e+33, "201617973010126", 34},
  {1.9436186549371107601328215e-294, "19436186549371108", -293},
  {6.1894157414730415894930833e+307, "6189415741473042", 308},
  {1.9149408499445379349291889e-185, "1914940849944538", -184},
  {4.1360943287800532670786315e+195, "41360943287800533", 196},
  {2.1375762839383578596907607e-120, "2137576283938358", -119},
  {7.0146809135829613099292599e-94, "7014680913582961", -93},
  {8.5013375688325465452837272e+226, "8501337568832547", 227},
  {6.9217994847737268068701482e+256, "6921799484773727", 257},
  {2.4842553043303020388066216e+01, "2484255304330302", 2},
  {5.3205762597980633315870269e+296, "5320576259798063", 297},
  {4.0424992363603926951819821e+55, "40424992363603927", 56},
  {7.3162629042762415708992319e-230, "7316262904276242", -229},
  {4.8318821810192587500000000e+14, "4831882181019259", 15},
  {1.5175253649611725169521772e-144, "15175253649611725", -143},
  {1.0948081377573067105194460e-66, "10948081377573067", -65},
  {5.1813784051918853691672258e+59, "5181378405191885", 60},
  {1.7144509695188859939575195e+10, "1714450969518886", 11},
  {1.8595908959003002493567694e-253, "18595908959003002", -252},
  {9.5497124840171637063003120e+204, "9549712484017164", 205},
  {6.0388608771860809782640270e-38, "6038860877186081", -37},
  {2.6591634924108048259826448e-62, "2659163492410805", -61},
  {1.9746606670642677213901361e+113, "19746606670642677", 114},
  {7.1637046829130810488648475e+307, "7163704682913081", 308},
  {1.7071971092961035762407530e+30, "17071971092961036", 31},
  {3.1983092453277726129274357e+187, "31983092453277726", 188},
  {1.5521961727004868434984923e+307, "15521961727004868", 308},
  {1.2450434746594693930593666e+107, "12450434746594694", 108},
  {1.3598487967942083043333500e-298, "13598487967942083", -297},
  {1.1645238987538319001140949e-162, "1164523898753832", -161},
  {9.3523072458218333446976572e-116, "9352307245821833", -115},
  {3.0637658709264666180283045e+78, "30637658709264666", 79},
  {1.7059240912279568520905141e-203, "17059240912279569", -202},
  {6.1622650828858174146488021e-167, "61622650828858174", -166},
  {2.4399644096284074877637762e-225, "24399644096284075", -224},
  {5.1314257551993322710441748e-44, "5131425755199332", -43},
  {2.3601768151721941286684746e-45, "2360176815172194", -44},
  {3.9731691657849659299862245e-260, "3973169165784966", -259},
  {1.0800071160701493136924012e-104, "10800071160701493", -103},
  {2.2922933182907905617313523e-57, "22922933182907906", -56},
  {3.3148093701991018440553249e-43, "3314809370199102", -42},
  {1.4944942780350638229003649e-126, "14944942780350638", -125},
  {1.8903172096711007856315297e+273, "18903172096711008", 274},
  {7.8422559420573800084137021e+301, "784225594205738", 302},
  {4.9349466260760001550676849e-237, "4934946626076", -236},
  {4.1045296499042226047452720e-134, "41045296499042226", -133},
  {8.5694300172703142104082965e+183, "8569430017270314", 184},
  {3.4595917807267277718844783e-199, "3459591780726728", -198},
  {3.6597865562948045347838817e-98, "36597865562948045", -97},
  {9.6047061456885464156357642e+67, "9604706145688546", 68},
  {6.4373917513998680543916712e+58, "6437391751399868", 59},
  {7.6284181889300344804346098e-72, "7628418188930034", -71},
  {1.5783101496480993279500669e+56, "15783101496480993", 57},
  {5.1198745337878469999046844e-299, "5119874533787847", -298},
  {9.7125322971432507507627683e+45, "9712532297143251", 46},
  {2.4956375812041309280333228e-231, "2495637581204131", -230},
  {2.2426257314126883513146162e-80, "22426257314126884", -79},
  {4.7124900305256256665789931e+38, "4712490030525626", 39},
  {4.6078378855003243331348880e-173, "4607837885500324", -172},
  {4.4583862951999652327535247e+251, "4458386295199965", 252},
  {5.5933395587456805715664503e-88, "5593339558745681", -87},
  {3.0005643870717709967285131e-207, "3000564387071771", -206},
  {2.5446278203046132251831710e+192, "2544627820304613", 193},
  {8.6687620146700659588173302e-43, "8668762014670066", -42},
  {4.1578486299663157893063879e-69, "4157848629966316", -68},
  {2.6125019377555002348616108e-123, "26125019377555002", -122},
  {1.2893571080560777170249748e-195, "12893571080560777", -194},
  {1.7272288660827097318308317e+137, "17272288660827097", 138},
  {2.7186098219461370232539637e+155, "2718609821946137", 156},
  {1.7509597903941053072176630e+199, "17509597903941053", 200},
  {7.5318674534103539827592304e+153, "7531867453410354", 154},
  {1.6320791693356479029493704e+305, "1632079169335648", 306},
  {7.5336497930917771061179565e+255, "7533649793091777", 256},
  {2.0197976478569369009317211e-265, "2019797647856937", -264},
  {6.4442959454585690088622086e-36, "6444295945458569", -35},
  {1.0077671324367641722047872e-265, "10077671324367642", -264},
  {4.0792405461686810571091701e+117, "4079240546168681", 118},
  {5.3383961714463163458819225e-235, "5338396171446316", -234},
  {3.1175425855805420786278343e+235, "3117542585580542", 236},
  {1.0311274559158849621073347e-80, "1031127455915885", -79},
  {1.7711410687150162684543573e-56, "17711410687150163", -55},
  {1.2963338552531727697741276e+104, "12963338552531728", 105},
  {7.5415875508648089506189612e+264, "7541587550864809", 265},
  {1.8125605975106923397439874e-187, "18125605975106923", -186},
  {2.0100417612881328659614010e-229, "2010041761288133", -228},
  {1.7377699895724189459169451e+243, "1737769989572419", 244},
  {2.5464915415010235656604461e-272, "25464915415010236", -271},
  {2.9783273376703752450846985e+81, "29783273376703752", 82},
  {4.9899880871618170418488088e-29, "4989988087161817", -28},
  {1.2013098983619299459446376e-227, "120130989836193", -226},
  {4.6853326746043346268338985e+138, "46853326746043346", 139},
  {4.7374963326985175287959889e-127, "47374963326985175", -126},
  {6.8597124223121671305988651e-138, "6859712422312167", -137},
  {3.1611748607469444291377663e+37, "31611748607469444", 38},
  {1.6948720439162870883237399e-85, "1694872043916287", -84},
  {2.0943543131377731320896503e+141, "2094354313137773", 142},
  {2.9502376240949710848000000e+19, "2950237624094971", 20},
  {2.7479425220574787309361980e+71, "27479425220574787", 72},
  {1.5806969675962675005639464e+175, "15806969675962675", 176},
  {1.5359118366772110389882949e+276, "1535911836677211", 277},
  {1.8530698404914501806467809e-51, "18530698404914502", -50},
  {1.3475205321634962513162483e+223, "13475205321634963", 224},
  {2.8376934416400879506496695e-82, "2837693441640088", -81},
  {2.2503034682218184596273695e+61, "22503034682218185", 62},
  {9.2411505285493010820062879e-42, "9241150528549301", -41},
  {1.1683887255062454968679603e+143, "11683887255062455", 144},
  {8.5680123537334581751053723e-41, "8568012353733458", -40},
  {1.2401384616126535624461949e-281, "12401384616126536", -280},
  {1.6809767667389081616885735e+252, "16809767667389082", 253},
  {5.3535879524471190536673643e+292, "5353587952447119", 293},
  {4.3138787539490261808225123e+260, "4313878753949026", 261},
  {1.8330578092454594478080000e+21, "18330578092454594", 22},
  {3.7300456738592432306400633e-74, "3730045673859243", -73},
  {6.4212161105631817582433534e-153, "6421216110563182", -152},
  {5.0239733653990067404800000e+20, "5023973365399007", 21},
  {5.9043572308724729202075215e-167, "5904357230872473", -166},
  {1.9856154124959896369387966e+160, "19856154124959896", 161},
  {1.6323861090008680965897027e+65, "1632386109000868", 66},
  {4.2606263008421224199481929e-54, "42606263008421224", -53},
  {2.6521153389390280985277373e-173, "2652115338939028", -172},
  {4.7654991792506476286915292e+43, "4765499179250648", 44},
  {2.4712267360027455325080328e-294, "24712267360027455", -293},
  {1.9965520844947741053368586e-30, "1996552084494774", -29},
  {9.4756730514340171096358058e-187, "9475673051434017", -186},
  {8.3858626197704139485532291e+188, "8385862619770414", 189},
  {1.6297538537987872263860067e-10, "16297538537987872", -9},
  {1.0605525893229647830186596e+85, "10605525893229648", 86},
  {1.1898219865656805447358598e-27, "11898219865656805", -26},
  {5.2438548362427485717444267e+52, "5243854836242749", 53},
  {3.9564206615983700189241256e-231, "395642066159837", -230},
  {8.0614118215014989063940114e+294, "8061411821501499", 295},
  {4.2249581803923563266793382e+230, "4224958180392356", 231},
  {6.3003433780470111730515932e-206, "6300343378047011", -205},
  {1.5079684384876746676712611e-288, "15079684384876747", -287},
  {1.0244962129820604655414542e+161, "10244962129820605", 162},
  {3.8173864673630459035504066e-50, "3817386467363046", -49},
  {1.2891584471947455811906497e-57, "12891584471947456", -56},
  {3.6739262144503013732305251e+275, "36739262144503014", 276},
  {7.9509627594892351457054705e-45, "7950962759489235", -44},
  {1.6264791226766222148701474e-151, "16264791226766222", -150},
  {2.8817453046127692930406843e-233, "28817453046127693", -232},
  {4.8474581310397388333781143e+69, "4847458131039739", 70},
  {5.8497061219982914040442007e+159, "58497061219982914", 160},
  {1.1049554666498362357268344e+94, "11049554666498362", 95},
  {5.0304638863184759582084515e+62, "5030463886318476", 63},
  {7.0071014880267824924936781e-142, "7007101488026782", -141},
  {1.4510538538875406043388680e-183, "14510538538875406", -182},
  {3.8061415087178641918742951e-253, "3806141508717864", -252},
  {1.3908406846207097104126719e+77, "13908406846207097", 78},
  {8.6636095132714493358292294e-302, "8663609513271449", -301},
  {3.7528310009938765938588094e-294, "37528310009938766", -293},
  {1.5027586067215343962068602e-260, "15027586067215344", -259},
  {9.4648034903323573149059092e+206, "9464803490332357", 207},
  {2.1980747488916372459857260e+121, "21980747488916372", 122},
  {2.2150871659834244530144951e+178, "22150871659834245", 179},
  {2.3375317484209052838322958e-276, "23375317484209053", -275},
  {3.2076806664450513644940680e+63, "32076806664450514", 64},
  {9.3782601724550341512924231e-06, "9378260172455034", -5},
  {2.8345019511606317290124516e+202, "28345019511606317", 203},
  {1.4694587086661335145897601e+280, "14694587086661335", 281},
  {9.5857332437831843665793739e-225, "9585733243783184", -224},
  {1.2176501285125931976511155e-141, "12176501285125932", -140},
  {3.2139614143548758425600000e+20, "3213961414354876", 21},
  {8.7085741362496437467484178e+193, "8708574136249644", 194},
  {3.5499575442286260943433422e-07, "3549957544228626", -6},
  {8.7775999319507514268204494e-298, "8777599931950751", -297},
  {6.4924042629617744782241018e-171, "64924042629617745", -170},
  {1.3814357373310406774948964e-204, "13814357373310407", -203},
  {2.4810346561744862226889994e-283, "2481034656174486", -282},
  {8.6115318337172360134656000e+22, "8611531833717236", 23},
  {4.5097582518556538690164276e-293, "4509758251855654", -292},
  {2.6168382536104170468489701e+214, "2616838253610417", 215},
  {1.0840113286300695802137346e-154, "10840113286300696", -153},
  {1.7887544874688240017500696e+34, "1788754487468824", 35},
  {8.5494805538184811690962526e+235, "8549480553818481", 236},
  {7.1801872214282666364410179e-226, "7180187221428267", -225},
  {9.9703585816653043428189641e+296, "9970358581665304", 297},
  {6.0566746098214292032269057e-04, "6056674609821429", -3},
  {5.2735056052139757463342790e+154, "5273505605213976", 155},
  {5.6991719538522844541048381e+208, "5699171953852284", 209},
  {4.0905973056485835830670078e-159, "40905973056485836", -158},
  {6.9467249814199645559874565e-41, "6946724981419965", -40},
  {5.9258845329563290945881313e+231, "5925884532956329", 232},
  {4.1846763750154643820575897e-212, "41846763750154644", -211},
  {8.2357476207487660872523095e+158, "8235747620748766", 159},
  {1.8586100019876191372858492e+110, "1858610001987619", 111},
  {1.5112246511797820192130972e+221, "1511224651179782", 222},
  {2.1947770315839377245875642e-108, "21947770315839377", -107},
  {2.6087380259245405758089134e-39, "26087380259245406", -38},
  {1.2215823622203151478289411e+135, "12215823622203151", 136},
  {3.3783443943151548610721041e-234, "3378344394315155", -233},
  {4.0249611403511455235770649e+265, "40249611403511455", 266},
  {3.6882528861781094241084758e+94, "36882528861781094", 95},
  {2.5068308097112381379830371e+127, "2506830809711238", 128},
  {1.5261525895921872581759252e-94, "15261525895921873", -93},
  {2.1928458725884446174108978e+190, "21928458725884446", 191},
  {1.4640817315940980244459671e+193, "1464081731594098", 194},
  {2.5278610451435813465802103e-241, "25278610451435813", -240},
  {1.4136864584405687397047366e+184, "14136864584405687", 185},
  {1.4743345921899939833841817e-254, "1474334592189994", -253},
  {5.4388804465760201702530982e-228, "543888044657602", -227},
  {3.1925255837765004850195650e+220, "31925255837765005", 221},
  {4.5671120899917913207964331e-219, "45671120899917913", -218},
  {1.6443435192019799092438835e-216, "164434351920198", -215},
  {1.6095831419144334325545631e+268, "16095831419144334", 269},
  {3.4285202551251154122562824e-116, "34285202551251154", -115},
  {3.0993041794160663573537091e-62, "30993041794160664", -61},
  {1.4535889073496533037179551e-196, "14535889073496533", -195},
  {3.4089386534444251353794168e+292, "3408938653444425", 293},
  {4.2569286173171741403655453e-144, "4256928617317174", -143},
  {3.3170639055021678254355993e-186, "3317063905502168", -185},
  {3.9440009783194864844800000e+21, "39440009783194865", 22},
  {3.6305959639501920277917798e+142, "3630595963950192", 143},
  {1.2052790407923882788586973e-268, "12052790407923883", -267},
  {8.1850819485906416795799453e-77, "8185081948590642", -76},
  {2.4775258184043323071683634e-242, "24775258184043323", -241},
  {1.0182011101926544658958642e+154, "10182011101926545", 155},
  {2.3940553555005264505613917e+124, "23940553555005265", 125},
  {1.1394622722575691518855840e-294, "11394622722575692", -293},
  {9.2288752927338282372268669e-178, "9228875292733828", -177},
  {4.0118704118939948809571172e+203, "4011870411893995", 204},
  {1.6619755621691614236808464e-115, "16619755621691614", -114},
  {2.1569267940376234921177394e-252, "21569267940376235", -251},
  {5.3201640180605870589181518e+106, "5320164018060587", 107},
  {1.0778616185079396594665365e+64, "10778616185079397", 65},
  {5.3892599449943610444293983e+59, "5389259944994361", 60},
  {8.5706747546623572713133991e-254, "8570674754662357", -253},
  {7.2267832113989181862689391e+153, "7226783211398918", 154},
  {3.3698754648714434861968946e-21, "33698754648714435", -20},
  {2.6694378835602833327940541e+63, "26694378835602833", 64},
  {1.1382839916935295736502292e-176, "11382839916935296", -175},
  {4.1059346953603401479331080e-153, "410593469536034", -152},
  {2.0306334100710242077457680e-64, "20306334100710242", -63},
  {9.6691390898069970021625819e-161, "9669139089806997", -160},
  {7.5837797105568950729524881e+253, "7583779710556895", 254},
  {1.1927685409140590305331651e-266, "1192768540914059", -265},
  {4.6205116900188040869579894e-57, "4620511690018804", -56},
  {2.0827156819708518225636614e+263, "20827156819708518", 264},
  {2.0899212068478044084577235e-91, "20899212068478044", -90},
  {7.7506303494734052916597340e-108, "7750630349473405", -107},
  {6.2340707011340418085919125e+54, "6234070701134042", 55},
  {1.8591008242954083762533435e-27, "18591008242954084", -26},
  {1.7688449017861429042620173e+230, "1768844901786143", 231},
  {4.0105469912626645443097354e+235, "40105469912626645", 236},
  {2.4917208024699185296320252e+129, "24917208024699185", 130},
  {1.2115877524391245027217774e-222, "12115877524391245", -221},
  {5.5016652409200847148895264e+08, "5501665240920085", 9},
  {3.4577208895661548253979898e+178, "3457720889566155", 179},
  {3.3462263604714448487772678e+172, "3346226360471445", 173},
  {8.5530037235058280154365338e-150, "8553003723505828", -149},
  {1.1304424129590298317387894e+103, "11304424129590298", 104},
  {4.0303220720663499025178243e+271, "403032207206635", 272},
  {5.8967172202426013329617022e+97, "5896717220242601", 98},
  {9.1299128320079558900833150e-257, "9129912832007956", -256},
  {4.1042063441267735499490883e-63, "41042063441267735", -62},
  {1.1415840263743597669245849e-188, "11415840263743598", -187},
  {5.9933203395435325955639615e-220, "59933203395435326", -219},
  {5.8850855732825385545142881e-154, "58850855732825386", -153},
  {5.3321917810693993978736770e+104, "53321917810693994", 105},
  {3.2180210256268364421503124e-291, "32180210256268364", -290},
  {5.4745719120524645765770238e+40, "5474571912052465", 41},
  {8.0301403852404451142447966e+213, "8030140385240445", 214},
  {4.1996027837285089081450004e-66, "4199602783728509", -65},
  {4.0007935606373402338391421e-146, "40007935606373402", -145},
  {3.8735423920064806333696211e-93, "3873542392006481", -92},
  {1.4546140202525399067342812e+37, "145461402025254", 38},
  {3.5485557457031677694235140e+112, "35485557457031678", 113},
  {2.1387451456663709266482535e+242, "2138745145666371", 243},
  {9.9288287905309484644793904e+219, "9928828790530948", 220},
  {8.9891662201111849064487670e-223, "8989166220111185", -222},
  {9.1307718999797291678198913e-200, "9130771899979729", -199},
  {4.4634405057917244233066427e+288, "44634405057917244", 289},
  {1.3644378087208733732243091e+156, "13644378087208734", 157},
  {5.8172400738582824232255836e-46, "58172400738582824", -45},
  {2.6778175925480748531968901e+27, "2677817592548075", 28},
  {2.7926400439566926270418395e+304, "27926400439566926", 305},
  {1.6693376519659464842729547e+231, "16693376519659465", 232},
  {1.1063050563843153337611477e+297, "11063050563843153", 298},
  {2.5591443341055318692466973e+147, "2559144334105532", 148},
  {2.2204367278435974774153842e-193, "22204367278435975", -192},
  {6.9377448560994707550335052e-121, "6937744856099471", -120},
  {3.4930515841110238757232991e+70, "3493051584111024", 71},
  {1.1592367077062759622917553e-290, "1159236707706276", -289},
  {2.3707189127002735017780532e+229, "23707189127002735", 230},
  {4.0442779001367300676729604e-260, "404427790013673", -259},
  {1.8525565937718269934117176e+297, "1852556593771827", 298},
  {5.4259520426601370729064631e-285, "5425952042660137", -284},
  {6.5223217075799401618346459e-21, "652232170757994", -20},
  {1.7470707045813895609830745e+57, "17470707045813896", 58},
  {7.6900405678342824619112706e+143, "76900405678342825", 144},
  {2.6366397613395891912395051e+226, "2636639761339589", 227},
  {2.8890975847797412607479991e-282, "28890975847797413", -281},
  {1.8827055529095718749369563e-200, "1882705552909572", -199},
  {1.1517345180737969535270083e-286, "1151734518073797", -285},
  {6.1315491597826860959958045e-181, "6131549159782686", -180},
  {4.7082804739218226368875036e-297, "47082804739218226", -296},
  {2.0698724555662556085735559e+06, "20698724555662556", 7},
  {6.1017490530221935755652122e-75, "6101749053022194", -74},
  {1.8110548693610036531840086e+73, "18110548693610037", 74},
  {5.2213010887001526355735220e+272, "52213010887001526", 273},
  {6.3233891750659657693756977e+91, "6323389175065966", 92},
  {1.2050857725859997768179596e-239, "12050857725859998", -238},
  {1.9787780694559547016787918e-284, "19787780694559547", -283},
  {9.0440729165271527934411433e-286, "9044072916527153", -285},
  {6.5285010421222409951668337e-157, "6528501042122241", -156},
  {2.4883743056045777378751379e-298, "24883743056045777", -297},
  {6.3350457940574885104391221e+171, "63350457940574885", 172},
  {5.7362247354592003570517824e+126, "57362247354592", 127},
  {1.8805648635794219350206012e+206, "1880564863579422", 207},
  {1.9299643191033486673114138e+233, "19299643191033487", 234},
  {5.9597458445566934575508124e-09, "59597458445566935", -8},
  {8.8337330052580636120464971e+172, "8833733005258064", 173},
  {1.0168220286192399926188488e+246, "101682202861924", 247},
  {2.2297867056322113357669740e-275, "22297867056322113", -274},
  {1.1889231478689185736863834e+212, "11889231478689186", 213},
  {9.5044380941511553521884824e+97, "9504438094151155", 98},
  {6.9406219415861664293891094e-283, "6940621941586166", -282},
  {9.2755208864407348916787189e-257, "9275520886440735", -256},
  {3.1076993249016270656844787e-164, "3107699324901627", -163},
  {1.6080717757718061552114746e+101, "1608071775771806", 102},
  {4.7217787875229980531865708e+267, "4721778787522998", 268},
  {2.8685132230412134043735168e-124, "28685132230412134", -123},
  {6.1165380604078757731155297e-137, "6116538060407876", -136},
  {3.9441806253938581871622451e+189, "3944180625393858", 190},
  {8.4755220607579309984748185e-260, "8475522060757931", -259},
  {1.7460198329181115835677651e-151, "17460198329181116", -150},
  {3.5559940293896445675954503e+252, "35559940293896446", 253},
  {1.0252288381944131851196289e+10, "10252288381944132", 11},
  {3.2292139616549633794686358e-215, "32292139616549634", -214},
  {3.7707376971351005859375000e+12, "37707376971351006", 13},
  {1.2203716079199397910129732e+205, "12203716079199398", 206},
  {1.3538848740618292460381345e-103, "13538848740618292", -102},
  {2.8323315642803953594624439e+135, "28323315642803954", 136},
  {7.0595129969926876241074199e+276, "7059512996992688", 277},
  {3.0531411963569903644606901e+270, "30531411963569904", 271},
  {5.6190933822526634345351733e-106, "5619093382252663", -105},
  {8.0336306442203059550958940e+276, "8033630644220306", 277},
  {2.2461075586886284448900682e+181, "22461075586886284", 182},
  {7.0172050376024576025630723e+148, "7017205037602458", 149},
  {3.9283594576760313858011630e-55, "39283594576760314", -54},
  {7.2290670235098180755470444e+241, "7229067023509818", 242},
  {3.5432845673933578510071460e+136, "3543284567393358", 137},
  {2.5455184862812150658845300e+216, "2545518486281215", 217},
  {1.7219174374993902662686395e-76, "17219174374993903", -75},
  {3.5280670588876951112575251e-27, "3528067058887695", -26},
  {1.8989657586875215756837436e+165, "18989657586875216", 166},
  {8.1144680561553576660156250e+11, "8114468056155358", 12},
  {2.3333313691919169425964355e+09, "2333331369191917", 10},
  {6.3233372789936617568867158e-195, "6323337278993662", -194},
  {1.6337240380599067435377954e-92, "16337240380599067", -91},
  {8.0628489447525385683335007e+76, "8062848944752539", 77},
  {1.3341290372245117907226800e-179, "13341290372245118", -178},
  {3.1953166929439965077599451e+230, "31953166929439965", 231},
  {8.9945420810330314879701543e-163, "8994542081033031", -162},
  {6.9253569651238411273670629e-209, "6925356965123841", -208},
  {1.6834942390839673939924904e+267, "16834942390839674", 268},
  {1.8189316271444926730751752e-131, "18189316271444927", -130},
  {8.8954001706029261715652000e+130, "8895400170602926", 131},
  {2.4173918662543568712563112e-78, "2417391866254357", -77},
  {2.6883237892831556584285896e-230, "26883237892831557", -229},
  {3.0420667588791637901577863e-189, "30420667588791638", -188},
  {1.3113484338159487225167646e+269, "13113484338159487", 270},
  {6.3935849227442989516844388e-135, "6393584922744299", -134},
  {5.5316533353861472404403452e-292, "5531653335386147", -291},
  {1.9852972413583760352283014e+118, "1985297241358376", 119},
  {2.0609722477086827695536632e-223, "20609722477086828", -222},
  {1.1449857683415796040421066e+60, "11449857683415796", 61},
  {3.8148639898126332580408918e+134, "3814863989812633", 135},
  {3.3276352108036829351868630e-87, "3327635210803683", -86},
  {2.2306702324270500310204253e-174, "223067023242705", -173},
  {4.8785277567605674952130803e+147, "48785277567605675", 148},
  {2.2865025761412793555623095e-188, "22865025761412794", -187},
  {6.6275280170680911875809060e+232, "6627528017068091", 233},
  {1.1419431124772940870551595e-264, "1141943112477294", -263},
  {3.9582899735174652535276666e+67, "3958289973517465", 68},
  {9.7339299370640815868944736e-135, "9733929937064082", -134},
  {4.9135831062662923896679444e+144, "49135831062662924", 145},
  {1.1644522401895478419014779e+64, "11644522401895478", 65},
  {9.1181177173250019774423593e+83, "9118117717325002", 84},
  {2.9229910536660833382621847e+46, "29229910536660833", 47},
  {4.3183032381593830384829435e-212, "4318303238159383", -211},
  {1.1859667847361345558242735e-141, "11859667847361346", -140},
  {2.1465889675805170901501972e-97, "2146588967580517", -96},
  {2.7407524026102238056567960e-61, "27407524026102238", -60},
  {6.7604995189771513091162006e-174, "6760499518977151", -173},
  {6.0187751859658849857470975e+49, "6018775185965885", 50},
  {6.6875278497543693306638451e+38, "6687527849754369", 39},
  {7.4934332259459041323968355e-76, "7493433225945904", -75},
  {5.6027545697571725556594943e-215, "5602754569757173", -214},
  {2.1146908498700855935535611e+217, "21146908498700856", 218},
  {1.8184488141646859137566891e+90, "1818448814164686", 91},
  {1.8619425472681828417999635e-253, "18619425472681828", -252},
  {1.7297843617469228485376649e+295, "17297843617469228", 296},
  {1.2536934597766541431755051e-180, "12536934597766541", -179},
  {9.9420674579956678059685837e-47, "9942067457995668", -46},
  {1.6449019782893072149830896e+165, "16449019782893072", 166},
  {5.2282517551644948156614808e-43, "5228251755164495", -42},
  {7.3810311189982109374680246e+68, "7381031118998211", 69},
  {7.0393669774702755168163433e-212, "7039366977470276", -211},
  {2.7200823109269639574241104e+98, "2720082310926964", 99},
  {2.4263216541690749316967293e-240, "2426321654169075", -239},
  {5.7859937860970524613463041e+98, "5785993786097052", 99},
  {8.8377388281365301362919508e+244, "883773882813653", 245},
  {7.7333726946006704416207808e-226, "773337269460067", -225},
  {7.3106986372013983072268567e+152, "7310698637201398", 153},
  {9.0471335499191774207237883e+211, "9047133549919177", 212},
  {2.0587576454087400617031376e-216, "205875764540874", -215},
  {8.5101399778718908416000000e+21, "8510139977871891", 22},
  {1.1942663134101034114796396e+301, "11942663134101034", 302},
  {2.1332294400509885961415216e+46, "21332294400509886", 47},
  {5.9356336571418394494015497e+72, "59356336571418394", 73},
  {1.2863835158461591741807431e-270, "12863835158461592", -269},
  {2.0704799200435952059666400e-43, "20704799200435952", -42},
  {4.2954406340932042250924308e+158, "4295440634093204", 159},
  {8.9511367966882393082971660e-121, "895113679668824", -120},
  {2.7011671380418232862565528e+245, "27011671380418233", 246},
  {3.2127508904557179094656978e-196, "3212750890455718", -195},
  {6.0018183624902827783702004e+144, "6001818362490283", 145},
  {4.4603524596428431386761144e+191, "4460352459642843", 192},
  {1.5000215596623063577171708e-244, "15000215596623064", -243},
  {2.7724876403956701548898362e-173, "277248764039567", -172},
  {4.0764043371827985557461676e-154, "40764043371827986", -153},
  {3.1605872436960732380644309e+77, "3160587243696073", 78},
  {1.6800118684701285340632040e-76, "16800118684701285", -75},
  {1.9277268342342144902058522e-121, "19277268342342145", -120},
  {3.3989798539399129600000000e+17, "3398979853939913", 18},
  {5.0869914113478950505170916e+168, "5086991411347895", 169},
  {7.9909619679667861318803856e-204, "7990961967966786", -203},
  {1.3039735018237451194116648e+135, "13039735018237451", 136},
  {7.5788575373524353859579037e+295, "7578857537352435", 296},
  {1.7447627842095779543717539e-11, "1744762784209578", -10},
  {2.7743827103426535000000000e+15, "27743827103426535", 16},
  {8.9132938654288489972531695e+92, "8913293865428849", 93},
  {8.0828148128115114612906674e-58, "8082814812811511", -57},
  {3.2124302124522925518773843e-146, "32124302124522926", -145},
  {9.8256648596555273448161110e+190, "9825664859655527", 191},
  {3.1113166008337315636405715e+81, "31113166008337316", 82},
  {1.4774471916655084426540302e-22, "14774471916655084", -21},
  {1.0331377886449444811364335e-193, "10331377886449445", -192},
  {4.7054102692110905531000653e-148, "47054102692110906", -147},
  {4.9772680568642640942075027e+219, "4977268056864264", 220},
  {1.4356566312853797602626655e-56, "14356566312853798", -55},
  {6.3411599932961736187089295e-190, "6341159993296174", -189},
  {5.5731922357032695979593695e-06, "557319223570327", -5},
  {3.7896461144340189525518542e-19, "3789646114434019", -18},
  {5.6075960349992931945820810e+81, "5607596034999293", 82},
  {2.8127593869125045193673478e+38, "28127593869125045", 39},
  {8.7666046239965590927935357e-231, "8766604623996559", -230},
  {2.7675300470845949594261148e-18, "2767530047084595", -17},
  {7.9298251441891997470476943e+64, "79298251441892", 65},
  {4.8918953809714813231283760e+82, "4891895380971481", 83},
  {4.4453188595280985872156687e-08, "44453188595280986", -7},
  {1.1840671308118021673654327e+271, "11840671308118022", 272},
  {2.2182309334767289016144271e-210, "2218230933476729", -209},
  {1.1357437919481575843156602e-201, "11357437919481576", -200},
  {2.8335581295449950389351704e+109, "2833558129544995", 110},
  {2.4070965461405945039508650e-272, "24070965461405945", -271},
  {9.6492829948351178318262100e+06, "9649282994835118", 7},
  {3.8990967461990883827175076e-251, "3899096746199088", -250},
  {5.8512329787798258988198035e+79, "5851232978779826", 80},
  {4.0853243815556757152080536e+07, "4085324381555676", 8},
  {9.6388208003844493749966478e+200, "963882080038445", 201},
  {1.9543366936417623260324590e+80, "19543366936417623", 81},
  {4.3266672467249345602049804e-10, "43266672467249346", -9},
  {5.7261157858528073026546645e-42, "5726115785852807", -41},
  {9.6634767180281880675409435e+112, "9663476718028188", 113},
  {1.1304097605778737722959156e+223, "11304097605778738", 224},
  {2.2861859715063890310019146e-106, "2286185971506389", -105},
  {1.0651140558023279043830143e-249, "10651140558023279", -248},
  {5.5210467681939709695580239e-189, "5521046768193971", -188},
  {1.0748061187520918410040457e-30, "10748061187520918", -29},
  {2.5299222899821177981621602e-223, "25299222899821178", -222},
  {1.4521968280091290438723108e+278, "1452196828009129", 279},
  {5.6061178920808042519174657e+285, "5606117892080804", 286},
  {3.9069136575327330111531567e+301, "3906913657532733", 302},
  {1.1691498663944033299785309e+91, "11691498663944033", 92},
  {2.8598096230630318093598010e+106, "2859809623063032", 107},
  {8.7467719666854131484719038e+137, "8746771966685413", 138},
  {9.7979573014017749046830956e-173, "9797957301401775", -172},
  {8.3587002412594398532078076e+295, "835870024125944", 296},
  {4.5342632237229340213012233e-253, "4534263223722934", -252},
  {3.2890851008875043059419159e+174, "32890851008875043", 175},
  {1.0519876144630687051011867e+144, "10519876144630687", 145},
  {3.1703901815729805417414280e+138, "31703901815729805", 139},
  {5.1389683734874795655050568e-83, "51389683734874796", -82},
  {3.5061456816403178767695473e+298, "3506145681640318", 299},
  {4.4125672533129179125926033e-07, "4412567253312918", -6},
  {1.7116605309031484402401120e-136, "17116605309031484", -135},
  {3.5462528373214107261990088e+236, "35462528373214107", 237},
  {1.6408619717972099854206097e-159, "164086197179721", -158},
  {4.5208188059561501792497093e-21, "452081880595615", -20},
  {4.2432713129652473985641506e+63, "42432713129652474", 64},
  {1.0604549749245980468750000e+13, "1060454974924598", 14},
  {4.7579795979436466982128822e+207, "47579795979436467", 208},
  {6.2240591496157447849174487e+244, "6224059149615745", 245},
  {2.8352185546286286450744997e-106, "28352185546286286", -105},
  {7.5240637508618704077025743e-71, "752406375086187", -70},
  {8.9414696232730428486677906e-118, "8941469623273043", -117},
  {1.3649666035853442870280204e-53, "13649666035853443", -52},
  {8.8897522885846521872716226e+93, "8889752288584652", 94},
  {3.2525818738951892533673786e-298, "32525818738951893", -297},
  {2.1466648503351999974781313e+133, "21466648503352", 134},
  {1.2777189881637033114734148e+212, "12777189881637033", 213},
  {4.7281739032940209162114722e+147, "4728173903294021", 148},
  {7.2445109252994419977525670e+167, "7244510925299442", 168},
  {3.6073236079425719422156800e+23, "3607323607942572", 24},
  {4.2614326781570601622499945e-167, "426143267815706", -166},
  {1.8076253584588905521826470e-16, "18076253584588906", -15},
  {3.7523739270211976799080830e+172, "3752373927021198", 173},
  {3.4566541034892065742116315e+93, "34566541034892066", 94},
  {8.1675611074173867891390082e-302, "8167561107417387", -301},
  {2.7024387655375743062212069e-101, "27024387655375743", -100},
  {8.0644580134074243749458625e-38, "8064458013407424", -37},
  {1.8920234505138969441387436e-244, "1892023450513897", -243},
  {2.5740115105092529302080840e+203, "2574011510509253", 204},
  {4.9684727216594414068397587e+101, "49684727216594414", 102},
  {1.0936676781274799349353139e+229, "109366767812748", 230},
  {4.7814477275217616353553011e+305, "4781447727521762", 306},
  {3.3495790001811192752908844e-168, "33495790001811193", -167},
  {1.7606216963585554338867206e-166, "17606216963585554", -165},
  {3.7523408150605012323983295e+44, "3752340815060501", 45},
  {5.1758927421259847458281371e+238, "5175892742125985", 239},
  {1.1949909240733813615920839e+113, "11949909240733814", 114},
  {1.0203641850644744098890916e+298, "10203641850644744", 299},
  {2.0666128456129821657595879e-28, "2066612845612982", -27},
  {2.1030729382920131193598806e-206, "2103072938292013", -205},
  {1.2802204217900292840482941e-253, "12802204217900293", -252},
  {2.5809692409529543213938287e+182, "25809692409529543", 183},
  {4.8906142293436716104127656e-117, "48906142293436716", -116},
  {4.9249754799138899724094054e+106, "492497547991389", 107},
  {2.1383218271821465213120966e+294, "21383218271821465", 295},
  {8.2290667221227117857690763e-59, "8229066722122712", -58},
  {2.4559800009247404331382879e-42, "24559800009247404", -41},
  {7.1388151686363088133357508e-263, "7138815168636309", -262},
  {1.7298624988580213119742220e-273, "17298624988580213", -272},
  {4.6870530464372923075546913e-180, "4687053046437292", -179},
  {2.2397398310741405555595780e+146, "22397398310741406", 147},
  {2.2029991155693117367067836e+272, "22029991155693117", 273},
  {1.1628855440392426169524865e+169, "11628855440392426", 170},
  {2.4642186736411979015453696e-275, "2464218673641198", -274},
  {7.0028289913131219599434297e-244, "7002828991313122", -243},
  {6.9574174352670632336899009e-185, "6957417435267063", -184},
  {4.7346744354347205542406483e-257, "47346744354347206", -256},
  {4.6718888102256813084056919e-133, "4671888810225681", -132},
  {1.1433652887804016813597269e-69, "11433652887804017", -68},
  {5.1260536564031979173460976e+175, "5126053656403198", 176},
  {7.0009613487319629763084614e-82, "7000961348731963", -81},
  {2.8321782502811937586952221e+142, "2832178250281194", 143},
  {4.3101785064629175944199407e-66, "43101785064629176", -65},
  {7.2622489418818420190048867e+246, "7262248941881842", 247},
  {5.6021376904972100667047551e-265, "560213769049721", -264},
  {1.9564885513190027254486675e+127, "19564885513190027", 128},
  {9.0975132839965484346528793e-229, "9097513283996548", -228},
  {5.5397832083305066344653651e-262, "5539783208330507", -261},
  {2.2421301367004176753452855e+104, "22421301367004177", 105},
  {3.0183437754137504101692782e-101, "30183437754137504", -100},
  {4.3550836706822109004759378e-271, "4355083670682211", -270},
  {1.6290628342565968526417651e-40, "16290628342565969", -39},
  {1.7119412735033908221844835e-291, "1711941273503391", -290},
  {2.9851130946452103857045495e+68, "29851130946452104", 69},
  {1.3585095144920475095836467e-80, "13585095144920475", -79},
  {2.2002413128346574568318253e-92, "22002413128346575", -91},
  {8.7676275020241808725545563e-232, "8767627502024181", -231},
  {1.6662521832605607456163151e-86, "16662521832605607", -85},
  {9.6853144404477970915959441e+82, "9685314440447797", 83},
  {6.3670042252783758850179154e+239, "6367004225278376", 240},
  {2.2480123186471034634612929e+33, "22480123186471035", 34},
  {1.1057878903927225097069254e+80, "11057878903927225", 81},
  {7.5824050694688462549310067e+173, "7582405069468846", 174},
  {2.2875531994264322265176543e-285, "22875531994264322", -284},
  {3.6483032397653540932610524e-57, "3648303239765354", -56},
  {2.0280722159277727092241157e+224, "20280722159277727", 225},
  {4.4872658778227386189452365e-218, "44872658778227386", -217},
  {6.6031532732572591484605725e+187, "6603153273257259", 188},
  {3.5583231623589231280777718e-220, "3558323162358923", -219},
  {3.5303720634910945889647915e-04, "35303720634910946", -3},
  {1.7105875404666996323665050e-25, "17105875404666996", -24},
  {1.6007218960318426080457650e-232, "16007218960318426", -231},
  {7.3954381424632895369047336e-107, "739543814246329", -106},
  {4.7170329344736071250870128e-175, "4717032934473607", -174},
  {8.5464504571162918400000000e+17, "8546450457116292", 18},
  {9.9563218534216411705228321e+294, "9956321853421641", 295},
  {1.6109144445237292688849575e+174, "16109144445237293", 175},
  {1.0866213335864390061495266e+175, "1086621333586439", 176},
  {8.4965474374730065743192399e+70, "8496547437473007", 71},
  {9.0541119594322874761388525e-82, "9054111959432287", -81},
  {5.4651089683762941891491090e+283, "5465108968376294", 284},
  {3.2568871024108274366104512e-65, "32568871024108274", -64},
  {7.8504153261246472129873828e-270, "7850415326124647", -269},
  {1.6450030150020658603117932e-158, "16450030150020659", -157},
  {3.6595479423677229310691885e-264, "3659547942367723", -263},
  {1.2199067706325459589686147e-157, "1219906770632546", -156},
  {4.8809052123315039842015815e+69, "4880905212331504", 70},
  {1.9546195116666656977136162e+306, "19546195116666657", 307},
  {6.2435767557345994966536776e-29, "62435767557346", -28},
  {1.3963647717836047169526385e-238, "13963647717836047", -237},
  {2.6030724930044043271966135e+73, "26030724930044043", 74},
  {1.2405581244467275127545592e-173, "12405581244467275", -172},
  {4.6940883952662296317465952e-66, "46940883952662296", -65},
  {2.7382881557431674744341741e+237, "27382881557431675", 238},
  {1.9010115163050134044559867e-143, "19010115163050134", -142},
  {2.0171583179343818178993396e+273, "20171583179343818", 274},
  {1.7738670689189533014287367e+50, "17738670689189533", 51},
  {1.2167623277212922141032855e-58, "12167623277212922", -57},
  {1.5693411330717356338469681e-212, "15693411330717356", -211},
  {3.1970138221288307614769605e+230, "31970138221288308", 231},
  {7.9129831263544582641499868e+255, "7912983126354458", 256},
  {3.1604922879868116000000000e+16, "31604922879868116", 17},
  {5.7142443378048156607320601e+73, "5714244337804816", 74},
  {1.2110229492856960792695883e+207, "12110229492856961", 208},
  {1.4456313672981529706708381e+265, "1445631367298153", 266},
  {8.0423355999165199338878214e+273, "804233559991652", 274},
  {6.6142009298565971832595655e-174, "6614200929856597", -173},
  {9.2497244058101235764452680e-91, "9249724405810124", -90},
  {2.9284366719412097154418007e+04, "29284366719412097", 5},
  {1.1748195074377512718138904e-147, "11748195074377513", -146},
  {8.0316575768559016983387486e+105, "8031657576855902", 106},
  {3.3615293156844516592948986e+87, "33615293156844517", 88},
  {8.9251892412725725308709633e-231, "8925189241272573", -230},
  {1.6469531885373828765076637e+111, "1646953188537383", 112},
  {3.8620129685509492260901387e-200, "3862012968550949", -199},
  {1.0558143216566191963484327e-40, "10558143216566192", -39},
  {1.1120933971557185141559816e-147, "11120933971557185", -146},
  {2.2354792217407885087842094e+232, "22354792217407885", 233},
  {1.4967739262441578806431311e+119, "14967739262441579", 120},
  {5.1608037829365845971643726e+196, "5160803782936585", 197},
  {1.1313064240604336065453392e-33, "11313064240604336", -32},
  {3.9290507507085420207064726e+219, "3929050750708542", 220},
  {3.5435962504081686469423118e+264, "35435962504081686", 265},
  {1.4491765919510337423712057e+50, "14491765919510337", 51},
  {2.1259582544069838999978665e-263, "2125958254406984", -262},
  {1.4907316835261756851423441e-95, "14907316835261757", -94},
  {2.9802667074794250920308425e+170, "2980266707479425", 171},
  {2.5509141649194394220879548e+110, "25509141649194394", 111},
  {2.9180874177681887969698715e+242, "2918087417768189", 243},
  {1.7470532217968909457650993e-166, "1747053221796891", -165},
  {6.5640240927305480232767717e-160, "6564024092730548", -159},
  {2.5220171015138076535657471e+160, "25220171015138077", 161},
  {8.4859496313831897576964978e+88, "848594963138319", 89},
  {6.5196966871969288480755116e-285, "6519696687196929", -284},
  {1.7621919150391581727287305e-241, "17621919150391582", -240},
  {4.5395706775088967875503248e-160, "4539570677508897", -159},
  {5.8274747073633428611432215e+233, "5827474707363343", 234},
  {1.2540080221250259099285552e-33, "12540080221250259", -32},
  {5.6663261620407107045811415e+289, "5666326162040711", 290},
  {8.1978843601296134124822856e+01, "8197884360129613", 2},
  {1.6228166475531474258334405e-191, "16228166475531474", -190},
  {1.9637985367197689042818439e-79, "1963798536719769", -78},
  {8.5699315548360672379210541e-104, "8569931554836067", -103},
  {9.5802850626974203453985778e-67, "958028506269742", -66},
  {2.3188486586432889574773948e-292, "2318848658643289", -291},
  {1.6905077225965180336157773e-124, "1690507722596518", -123},
  {1.6947311161001906247737627e+207, "16947311161001906", 208},
  {4.9117908974039670743071074e-225, "4911790897403967", -224},
  {5.4193940570685258932315368e+117, "5419394057068526", 118},
  {6.9538049189455808328465344e+166, "6953804918945581", 167},
  {3.7954063865454486750076821e-35, "37954063865454487", -34},
  {5.4719616147858361820522500e-161, "5471961614785836", -160},
  {8.1308028272837882843660929e+146, "8130802827283788", 147},
  {4.6708281744379890989761229e+78, "4670828174437989", 79},
  {9.0377123204000193296912408e-153, "9037712320400019", -152},
  {7.9271744169298760041295483e-282, "7927174416929876", -281},
  {1.2978306431480196727297603e-181, "12978306431480197", -180},
  {3.6032218027444367693359652e+182, "3603221802744437", 183},
  {1.1075994574277169186995413e-36, "1107599457427717", -35},
  {1.7505795750534499652632068e-207, "175057957505345", -206},
  {3.1128506257906550977983696e+271, "3112850625790655", 272},
  {5.4895998846387629242459116e+256, "5489599884638763", 257},
  {4.0289282878893897788128253e+161, "402892828788939", 162},
  {5.1929910375254562039833151e-05, "5192991037525456", -4},
  {2.4874144482650452021169149e-192, "24874144482650452", -191},
  {8.4085504336426436449389779e+272, "8408550433642644", 273},
  {2.7330136824605846997258639e+41, "27330136824605847", 42},
  {3.5693219128430257390218627e-60, "3569321912843026", -59},
  {8.2740711642629477663665218e+41, "8274071164262948", 42},
  {2.0100721518161067203311111e+232, "20100721518161067", 233},
  {1.8246847391704339815940647e+72, "1824684739170434", 73},
  {1.3254458660989903036005115e+275, "13254458660989903", 276},
  {7.7953497998993849635270211e-64, "7795349799899385", -63},
  {6.8599593808092965706085205e+285, "6859959380809297", 286},
  {3.3000982834235967881611271e+114, "3300098283423597", 115},
  {2.7398871151282103826559622e-179, "27398871151282104", -178},
  {3.8424888920669828174077201e-206, "3842488892066983", -205},
  {1.4441447656182086885598926e+113, "14441447656182087", 114},
  {2.9506244598120732284651123e+203, "29506244598120732", 204},
  {3.3103531999581942558932296e-58, "3310353199958194", -57},
  {1.4343963313333708478331881e-111, "14343963313333708", -110},
  {5.0972434475590293880351320e+182, "50972434475590294", 183},
  {1.2528477535570220871891676e-149, "1252847753557022", -148},
  {4.8584859010427287612581208e-206, "4858485901042729", -205},
  {4.6817713686820051833713312e+131, "4681771368682005", 132},
  {8.6081405094084803354617907e+83, "860814050940848", 84},
  {9.0551101531491444662224725e+35, "9055110153149144", 36},
  {1.2504158649025341266097305e+60, "12504158649025341", 61},
  {1.6679445002691238749571654e+125, "16679445002691239", 126},
  {6.9732454092171883461488005e-241, "6973245409217188", -240},
  {9.6764217448588595659591256e+166, "967642174485886", 167},
  {3.8484569264921311781545604e+153, "3848456926492131", 154},
  {1.0933419989242428979534938e-142, "10933419989242429", -141},
  {1.2900391439624192059336152e-162, "12900391439624192", -161},
  {1.4575075615943440642094487e+281, "1457507561594344", 282},
  {3.0224609446328716296822986e+64, "30224609446328716", 65},
  {2.0057378215571439183939617e-01, "2005737821557144", 0},
  {4.3200183207745016133211216e-38, "43200183207745016", -37},
  {4.0564545211026466473295458e+30, "40564545211026466", 31},
  {2.3928454619997547133576339e+152, "23928454619997547", 153},
  {9.6221189370602285754235805e-291, "9622118937060229", -290},
  {1.1055238687277998316404210e+47, "11055238687277998", 48},
  {3.5835059541735822643724457e+161, "35835059541735823", 162},
  {8.9387455314589279846400000e+21, "8938745531458928", 22},
  {1.6449079536001801042458547e-242, "16449079536001801", -241},
  {1.4008003886058173189791517e-210, "14008003886058173", -209},
  {1.1260488906325091166956150e+95, "11260488906325091", 96},
  {7.5227678730917325388541954e-63, "7522767873091733", -62},
  {1.3600083036106592630207159e-30, "13600083036106593", -29},
  {9.8117596300801723345003870e+241, "9811759630080172", 242},
  {2.0321437183744829440000000e+18, "2032143718374483", 19},
  {4.9804560890008210827260072e+279, "4980456089000821", 280},
  {1.4457947216218033000204711e+233, "14457947216218033", 234},
  {8.3748078602680197810700779e-113, "837480786026802", -112},
  {1.1660500515884045410156250e+11, "11660500515884045", 12},
  {1.2533060164440539901017115e+190, "1253306016444054", 191},
  {3.7779461499762029328350125e-179, "3777946149976203", -178},
  {6.0092155474047088297552041e+299, "6009215547404709", 300},
  {5.4733824191612228084153014e+281, "5473382419161223", 282},
  {3.9409627584353355762212471e+177, "39409627584353356", 178},
  {2.6758638790455351629670488e-168, "2675863879045535", -167},
  {4.6530965236036304896000000e+20, "46530965236036305", 21},
  {2.8959072037120849405926585e+229, "2895907203712085", 230},
  {2.2747343504490048109511595e-38, "22747343504490048", -37},
  {7.3709498973748754082472651e-125, "7370949897374875", -124},
  {1.4466973576978822698354571e-85, "14466973576978823", -84},
  {9.5991444267874002095262026e+282, "95991444267874", 283},
  {1.2610088926462866769975309e-142, "12610088926462867", -141},
  {7.5935165320551675989091077e-30, "7593516532055168", -29},
  {1.1907554219495622643430423e-101, "11907554219495623", -100},
  {7.4789038054596656962782375e+244, "7478903805459666", 245},
  {5.2848939188849083904721147e+168, "5284893918884908", 169},
  {6.2944925502645984261131606e-21, "62944925502645984", -20},
  {1.5755665071296129223104946e-66, "1575566507129613", -65},
  {4.3845910924988513183593750e+11, "43845910924988513", 12},
  {3.1018113059000434063116549e+110, "31018113059000434", 111},
  {2.9886229195558197343735297e-13, "29886229195558197", -12},
  {1.8302704814030223551113674e+187, "18302704814030224", 188},
  {9.0900372296028779039056252e-172, "9090037229602878", -171},
  {3.4264067602263977449104823e+248, "34264067602263977", 249},
  {7.7001229891984849062183319e+241, "7700122989198485", 242},
  {6.3601610297624373309101103e+284, "6360161029762437", 285},
  {6.1855395137926232685014513e+228, "6185539513792623", 229},
  {1.7306162280777335751765464e+156, "17306162280777336", 157},
  {5.0069949942406677233996729e+196, "5006994994240668", 197},
  {1.6684770473515539990216894e+00, "1668477047351554", 1},
  {3.2076959526695200638997693e+276, "320769595266952", 277},
  {1.6421584969333037851250464e+198, "16421584969333038", 199},
  {1.3716466324592467701689988e+199, "13716466324592468", 200},
  {1.2404933033761994324164690e+41, "12404933033761994", 42},
  {6.2533427330809343631023260e-124, "6253342733080934", -123},
  {1.0800287068653962714120279e+291, "10800287068653963", 292},
  {4.1905631700907090479777921e+84, "4190563170090709", 85},
  {5.6099767079191099233325975e+285, "560997670791911", 286},
  {8.4131405345707027622147723e+194, "8413140534570703", 195},
  {5.5783379215924330149662200e+54, "5578337921592433", 55},
  {1.7600227866398056095370442e-70, "17600227866398056", -69},
  {1.6427535019862329368364184e-94, "1642753501986233", -93},
  {2.7772879387897201069268580e+36, "277728793878972", 37},
  {1.3363702474643775627397283e-166, "13363702474643776", -165},
  {1.0771799953006160799605056e-103, "10771799953006161", -102},
  {1.5070835693903774562515054e+229, "15070835693903775", 230},
  {7.6140536371582634689293738e+101, "7614053637158263", 102},
  {1.3119079047398726353412205e-149, "13119079047398726", -148},
  {2.7379355488524296335587703e-125, "27379355488524296", -124},
  {4.8697798951484096734665951e-149, "486977989514841", -148},
  {3.8771792254548217426015360e+156, "3877179225454822", 157},
  {1.1387614011599908503077347e-196, "11387614011599909", -195},
  {1.3179352150490200347224982e+52, "131793521504902", 53},
  {1.1489889457920578432753955e-302, "11489889457920578", -301},
  {9.7902718818876351824132026e-117, "9790271881887635", -116},
  {7.4973720216274451693856148e-32, "7497372021627445", -31},
  {4.0188096991732846558980734e+68, "40188096991732847", 69},
  {1.5400910752442150885935283e+160, "1540091075244215", 161},
  {6.4294604021527505990013612e-128, "6429460402152751", -127},
  {1.6934397518134195110738782e-63, "16934397518134195", -62},
  {6.7680781596162162317806612e-267, "6768078159616216", -266},
  {1.8562014560163771648952570e+61, "18562014560163772", 62},
  {6.3617084879273877777175648e+267, "6361708487927388", 268},
  {1.9813032376810637434589700e-147, "19813032376810637", -146},
  {4.7557001215515613687832774e+131, "4755700121551561", 132},
  {3.2832419748209951428035110e-39, "3283241974820995", -38},
  {2.4440425735795491953645311e-116, "24440425735795492", -115},
  {1.7615153789625351991641331e+278, "17615153789625352", 279},
  {2.5128206598961424519268518e+287, "25128206598961425", 288},
  {4.5191829635031052281262264e-73, "4519182963503105", -72},
  {1.9402022381471220869570971e+06, "1940202238147122", 7},
  {5.5902284359676872180592406e-106, "5590228435967687", -105},
  {2.6753024593153754590443138e+37, "26753024593153755", 38},
  {2.4958007870001700456816280e-215, "249580078700017", -214},
  {3.9070390516485000215637490e+151, "39070390516485", 152},
  {2.0904080876762782694539774e-114, "20904080876762783", -113},
  {1.9923358385236874900709618e-191, "19923358385236875", -190},
  {1.5315300099708739502918608e+226, "1531530009970874", 227},
  {2.1781940734010121313551532e+178, "2178194073401012", 179},
  {3.6258566951466798990683272e-126, "362585669514668", -125},
  {4.2034934926524685676916937e-79, "42034934926524686", -78},
  {5.3014765397446501973982141e+298, "530147653974465", 299},
  {9.2630062056171280427356096e+76, "9263006205617128", 77},
  {4.8533827070726393503121843e+39, "48533827070726394", 40},
  {7.0242586687826528414732635e-165, "7024258668782653", -164},
  {6.2550102568207408285933748e-180, "6255010256820741", -179},
  {5.3649872237875906862278246e+26, "5364987223787591", 27},
  {4.7335921374280534801749339e+240, "47335921374280535", 241},
  {2.5273709683710656855130663e+306, "25273709683710657", 307},
  {7.9230409194166007094029735e+278, "7923040919416601", 279},
  {9.9107287220493866139557223e-48, "9910728722049387", -47},
  {1.3343759589344643678998636e+00, "13343759589344644", 1},
  {2.9234647095354539804452872e-232, "2923464709535454", -231},
  {2.4314412032639856718276198e+26, "24314412032639857", 27},
  {2.0356869587317487457767129e+02, "20356869587317487", 3},
  {1.4941278092843735115638744e-123, "14941278092843735", -122},
  {9.9178225102235695221909054e-254, "991782251022357", -253},
  {1.2421380136034982807557302e-10, "12421380136034983", -9},
  {1.3806802106179844550815539e+213, "13806802106179845", 214},
  {6.6210875623467005925283781e+208, "6621087562346701", 209},
  {3.0441587879259070631255543e-262, "3044158787925907", -261},
  {3.3632085942583399794718469e+53, "336320859425834", 54},
  {1.9391563998242846683775985e-280, "19391563998242847", -279},
  {2.2339113302800747125112529e-158, "22339113302800747", -157},
  {2.2297488225612112903855132e-136, "22297488225612113", -135},
  {3.3528831553246058250240000e+21, "3352883155324606", 22},
  {1.1252779824019494276980180e-260, "11252779824019494", -259},
  {5.5639928490015648867418112e+25, "5563992849001565", 26},
  {8.7607321168454205669504924e+157, "876073211684542", 158},
  {2.5256352787910056646347624e-23, "25256352787910057", -22},
  {1.7895011021288079664888113e+62, "1789501102128808", 63},
  {3.8233774283725112795463680e+24, "38233774283725113", 25},
  {2.6765005566487421210448535e-306, "2676500556648742", -305},
  {9.0234103100711039621189366e+111, "9023410310071104", 112},
  {5.5242333518285179035950152e-200, "5524233351828518", -199},
  {2.0910232074708260263622475e+277, "2091023207470826", 278},
  {5.2215305642551919575685000e+109, "5221530564255192", 110},
  {1.8942477022031431862948325e-230, "18942477022031432", -229},
  {3.7502743549117091020844408e-71, "3750274354911709", -70},
  {1.3996704309308325934934196e+36, "13996704309308326", 37},
  {2.0666898678515287906567296e-67, "20666898678515288", -66},
  {9.2026217205058149699360350e-10, "9202621720505815", -9},
  {4.5108495066840173986636390e+100, "45108495066840174", 101},
  {1.6234935646364288099922869e-146, "16234935646364288", -145},
  {6.8985929505535402673304957e+172, "689859295055354", 173},
  {9.4926013941274739524461429e-239, "9492601394127474", -238},
  {6.4328762113718028982798221e+150, "6432876211371803", 151},
  {1.0964403483429572448015379e+204, "10964403483429572", 205},
  {7.1966998270410891251088002e+97, "7196699827041089", 98},
  {5.1372243437643669494718779e+02, "5137224343764367", 3},
  {6.3838883194626755525691491e+207, "6383888319462676", 208},
  {4.9233323912256002492843369e-273, "49233323912256", -272},
  {4.1111588394451955106879997e+262, "41111588394451955", 263},
  {2.6561241164691557397239840e-178, "2656124116469156", -177},
  {2.8155965565555736189497204e+226, "28155965565555736", 227},
  {2.2461113033674753071296331e+105, "22461113033674753", 106},
  {3.0664048150503225053372639e+187, "30664048150503225", 188},
  {2.5712113907652810551435136e+30, "2571211390765281", 31},
  {1.6638858845278116001486568e-11, "16638858845278116", -10},
  {2.5375980590200112671065657e-176, "25375980590200113", -175},
  {7.4783840096406571034798421e-252, "7478384009640657", -251},
  {4.3053591990894096585495456e-59, "430535919908941", -58},
  {6.7052958336674487279306791e-101, "6705295833667449", -100},
  {2.5491944491628078204054376e+166, "25491944491628078", 167},
  {2.1515778135239958048413991e-231, "21515778135239958", -230},
  {1.1257417633503370805351643e-146, "1125741763350337", -145},
  {8.7323495971821671344527927e+266, "8732349597182167", 267},
  {9.6081843285956762675098905e+101, "9608184328595676", 102},
  {7.3423598586732115481342429e-155, "73423598586732115", -154},
  {7.1996788557740568355368533e+273, "7199678855774057", 274},
  {1.5196741627420076379328125e-229, "15196741627420076", -228},
  {7.6499542819444673212168610e-261, "7649954281944467", -260},
  {4.7657417373555725097656250e+11, "47657417373555725", 12},
  {1.9547185747671997974882472e+94, "19547185747671998", 95},
  {4.3263143442398365243600645e-294, "43263143442398365", -293},
  {1.4835226572442905775326829e-296, "14835226572442906", -295},
  {4.3677669050083754830400213e-167, "43677669050083755", -166},
  {6.3644526647438448645589411e+304, "6364452664743845", 305},
  {2.5349171904675956726074219e+10, "25349171904675957", 11},
  {3.0520640927086297141640020e-279, "30520640927086297", -278},
  {1.3672518141567601804154244e-14, "13672518141567602", -13},
  {1.7730568655292937074194267e+280, "17730568655292937", 281},
  {4.3428962043501934996784389e+97, "43428962043501935", 98},
  {4.8170341613263597501218036e-131, "481703416132636", -130},
  {4.2620386960504893968523885e-182, "42620386960504894", -181},
  {1.5476581614167093926440477e-82, "15476581614167094", -81},
  {1.6330885250660972452837942e-195, "16330885250660972", -194},
  {4.2187227245310794238508994e-214, "42187227245310794", -213},
  {3.0970195802199674565682392e+233, "30970195802199675", 234},
  {1.2277775658773351008493243e-220, "12277775658773351", -219},
  {8.0208106739290744806304724e+114, "8020810673929074", 115},
  {3.0116804258039387635694865e-28, "30116804258039388", -27},
  {7.4344046619030531094281848e-260, "7434404661903053", -259},
  {5.6455673795015124382212663e-242, "56455673795015124", -241},
  {1.0363417357924660009390202e-120, "1036341735792466", -119},
  {1.6635865152423288644970686e-108, "16635865152423289", -107},
  {1.5180371106731953409428482e-199, "15180371106731953", -198},
  {2.6458585875847540252786463e-06, "2645858587584754", -5},
  {4.4026440494878212738049580e-90, "4402644049487821", -89},
  {3.1894270186570761276974903e-73, "3189427018657076", -72},
  {1.4335447001148107064198118e-251, "14335447001148107", -250},
  {5.5384055693182003122521493e-19, "55384055693182", -18},
  {1.4642730836322218771516426e+44, "14642730836322219", 45},
  {4.4926746572097916193546724e+34, "4492674657209792", 35},
  {8.2405684811305311958728704e+25, "8240568481130531", 26},
  {9.1684132145514892223656796e-143, "916841321455149", -142},
  {2.3490035742531794282407622e-110, "23490035742531794", -109},
  {2.7667405857877816335567208e+275, "27667405857877816", 276},
  {5.7017483589605070778045657e+94, "5701748358960507", 95},
  {7.5626112634911572754752571e+50, "7562611263491157", 51},
  {1.0063773848533111646141869e-02, "10063773848533112", -1},
  {1.7926036365320410099503886e-245, "1792603636532041", -244},
  {2.7116068544623847246803705e-300, "27116068544623847", -299},
  {1.6536213994459609224345190e-101, "1653621399445961", -100},
  {9.9904057277513707103397986e+67, "9990405727751371", 68},
  {7.6358610954441689352500613e+225, "7635861095444169", 226},
  {8.7940570586070062558468664e+31, "8794057058607006", 32},
  {3.1307930835331038721785899e-76, "3130793083533104", -75},
  {3.7592200868557874224980975e-158, "37592200868557874", -157},
  {4.0438888550271554004961061e+119, "40438888550271554", 120},
  {1.2770541992388524373075131e-158, "12770541992388524", -157},
  {4.1231429270612607547011093e+240, "4123142927061261", 241},
  {1.6059908967235358828003172e-133, "16059908967235359", -132},
  {3.5012509008851624478211229e-199, "35012509008851624", -198},
  {3.3240291162062420845031738e+09, "3324029116206242", 10},
  {4.5522163004737435724489112e+199, "45522163004737436", 200},
  {4.2169614782111423708979080e-19, "42169614782111424", -18},
  {7.1786276225274590541656820e-272, "7178627622527459", -271},
  {1.6815183905603829002006706e+53, "1681518390560383", 54},
  {8.3181151031002060261901240e-220, "8318115103100206", -219},
  {1.6120639787859152807008131e+132, "16120639787859153", 133},
  {1.8036381435502783624051290e-124, "18036381435502784", -123},
  {1.4371134037111955506492253e-24, "14371134037111956", -23},
  {1.4029932877445547243299742e-106, "14029932877445547", -105},
  {1.8958788948062609354092807e-11, "1895878894806261", -10},
  {5.8336300311606346386747951e+205, "5833630031160635", 206},
  {1.8666494103119358669266335e-136, "1866649410311936", -135},
  {1.3839642415311070657385407e+285, "1383964241531107", 286},
  {1.8038122459881121282751756e+128, "1803812245988112", 129},
  {2.5136440649435277225124248e+232, "25136440649435277", 233},
  {7.3460874117082760040661315e+184, "7346087411708276", 185},
  {5.9458411267062562391527393e+265, "5945841126706256", 266},
  {8.6010070475248643556876845e+42, "8601007047524864", 43},
  {3.1164646988986163213038194e+69, "31164646988986163", 70},
  {2.5187488269006871534921135e-92, "2518748826900687", -91},
  {9.5332594492152863769083260e+172, "9533259449215286", 173},
  {2.0778377130147718941293182e-58, "2077837713014772", -57},
  {8.9249776338329064022043495e+179, "8924977633832906", 180},
  {2.2439874038625627412635432e-214, "22439874038625627", -213},
  {5.6001574705489335680623562e-274, "5600157470548934", -273},
  {1.6476351742568021739694298e-167, "16476351742568022", -166},
  {2.0965018254033321928651915e+39, "20965018254033322", 40},
  {9.5356485498870831322279792e-282, "9535648549887083", -281},
  {1.8355482148725005561490794e+171, "18355482148725006", 172},
  {1.2903609475873224897899639e-126, "12903609475873225", -125},
  {2.1473751386586107801384431e-174, "2147375138658611", -173},
  {2.0682701306416322238715002e+98, "20682701306416322", 99},
  {2.3747181462886483542545954e+64, "23747181462886484", 65},
  {2.4903825400665341683648703e+138, "24903825400665342", 139},
  {6.4018246946707903436949410e+157, "640182469467079", 158},
  {4.0682244578199727131525246e-81, "40682244578199727", -80},
  {3.3211615637545845215861351e-217, "33211615637545845", -216},
  {1.7863459073633953610274198e-71, "17863459073633954", -70},
  {7.5818981068465976798437665e+261, "7581898106846598", 262},
  {1.9319839628371263048790303e-190, "19319839628371263", -189},
  {1.1037898230813835304827839e-109, "11037898230813835", -108},
  {3.6717733395121956440354994e+85, "36717733395121956", 86},
  {2.8699625018562254916630383e+142, "28699625018562255", 143},
  {1.9757740511703171915126612e-251, "1975774051170317", -250},
  {7.5545538022380888066583087e+213, "7554553802238089", 214},
  {5.0415051900248809443415818e+27, "5041505190024881", 28},
  {7.6199326491440279206753241e+298, "7619932649144028", 299},
  {3.5056635128804704063642874e+127, "35056635128804704", 128},
  {3.7014534149674590398556373e+277, "3701453414967459", 278},
  {3.4820356504069630449193928e-85, "3482035650406963", -84},
  {3.3974859927692136790339438e+56, "33974859927692137", 57},
  {1.8875996528867597004461342e+225, "18875996528867597", 226},
  {8.3912274010374519116688020e-200, "8391227401037452", -199},
  {4.0944633935236590854057908e-76, "4094463393523659", -75},
  {1.9748805199618107919847930e+203, "19748805199618108", 204},
  {2.9284872422062898174568178e-92, "29284872422062898", -91},
  {2.1099306200868732211796629e-260, "21099306200868732", -259},
  {2.1914018295375332516095965e-91, "21914018295375333", -90},
  {4.4803710867818242452527402e-141, "4480371086781824", -140},
  {8.2903820254045709000427954e+40, "8290382025404571", 41},
  {4.8307107789264012740039927e+60, "4830710778926401", 61},
  {9.4578188279141449185094209e-231, "9457818827914145", -230},
  {3.5360200184995195533614129e+60, "35360200184995196", 61},
  {4.1871711446839971638518140e+209, "4187171144683997", 210},
  {1.8163680507467322969856611e-83, "18163680507467323", -82},
  {5.0178018489812699817748202e+224, "501780184898127", 225},
  {5.3267998104993539393759423e+161, "5326799810499354", 162},
  {3.9757624103628360396104593e+184, "3975762410362836", 185},
  {2.8746155210176745471842128e-95, "28746155210176745", -94},
  {1.2867790845493882473930249e-304, "12867790845493882", -303},
  {4.7462094082077379295320272e-297, "4746209408207738", -296},
  {8.1490237884212292515826994e+277, "814902378842123", 278},
  {1.0395665269473845864291108e+136, "10395665269473846", 137},
  {2.5864634135468349019071714e-200, "2586463413546835", -199},
  {8.7333480751871595308621537e-250, "873334807518716", -249},
  {1.4402659053790547325769122e-226, "14402659053790547", -225},
  {3.1547768779435754553087672e+238, "31547768779435755", 239},
  {1.2974125767231830674312939e+45, "1297412576723183", 46},
  {3.5960469620636915359438262e-59, "35960469620636915", -58},
  {5.5932290177589243077028747e-189, "5593229017758924", -188},
  {3.6716358730508888010051978e-41, "3671635873050889", -40},
  {8.5798028331373075888961693e-293, "8579802833137308", -292},
  {5.1376765934481867296458448e+283, "5137676593448187", 284},
  {1.4518652909437134022781443e-294, "14518652909437134", -293},
  {1.8410541108722041932326062e+141, "18410541108722042", 142},
  {8.9257772226545881554925233e+87, "8925777222654588", 88},
  {1.8341303396290431441034603e-28, "18341303396290431", -27},
  {3.0155543842731476411366592e+307, "30155543842731476", 308},
  {2.6304786409480519078546923e+197, "2630478640948052", 198},
  {2.6583715231068659423489333e-131, "2658371523106866", -130},
  {1.6583001639783886292037327e-164, "16583001639783886", -163},
  {1.4262517410176971436592228e+211, "14262517410176971", 212},
  {3.6343273501001223655066321e-43, "3634327350100122", -42},
  {1.1928555031183327920794669e+192, "11928555031183328", 193},
  {3.3695845021968877277779321e-267, "33695845021968877", -266},
  {1.4798724560062090128518779e+165, "1479872456006209", 166},
  {3.3571356483373396941177475e+64, "33571356483373397", 65},
  {7.5064834468728659444814360e-117, "7506483446872866", -116},
  {6.6913801045041365071231047e-200, "6691380104504137", -199},
  {5.4431086929098100404131009e-09, "544310869290981", -8},
  {1.3061110347555495593971222e+96, "13061110347555496", 97},
  {9.1808254860480443479457196e+281, "9180825486048044", 282},
  {6.5287537423133354499153838e-153, "6528753742313335", -152},
  {5.0870187908002063410775266e-158, "5087018790800206", -157},
  {2.1535574511227630263025072e-30, "2153557451122763", -29},
  {1.4791740641343058174479844e+138, "14791740641343058", 139},
  {6.4935550148457062473094728e+280, "6493555014845706", 281},
  {6.3638838619857618268355726e+49, "6363883861985762", 50},
  {4.8853160773925531581135021e-10, "4885316077392553", -9},
  {7.5236076342693452632232574e-06, "7523607634269345", -5},
  {1.0911517344524324054247101e-133, "10911517344524324", -132},
  {2.5967283971191865246962138e-290, "25967283971191865", -289},
  {5.5266995592191488824091526e+138, "5526699559219149", 139},
  {8.0824200234495782377561660e-128, "8082420023449578", -127},
  {1.5298009345027332154037519e-248, "15298009345027332", -247},
  {5.1583147247808288111522166e-21, "5158314724780829", -20},
  {7.4101790150057975527512381e-245, "7410179015005798", -244},
  {9.6259658149667089783564879e-27, "9625965814966709", -26},
  {4.1872719126540225625293591e+275, "41872719126540226", 276},
  {3.6181119891391392045278918e+230, "3618111989139139", 231},
  {3.5365906579157850356308923e-144, "3536590657915785", -143},
  {1.4359852004328802298405075e-158, "14359852004328802", -157},
  {1.3817971940319320201508882e-92, "1381797194031932", -91},
  {1.0573908196090234738590924e-229, "10573908196090235", -228},
  {1.1365825232643955356920772e-147, "11365825232643955", -146},
  {7.2111847168179972668004068e-245, "7211184716817997", -244},
  {2.3091345968453330796846108e-257, "2309134596845333", -256},
  {9.0851214918170306149186266e-130, "908512149181703", -129},
  {1.2934528111485737744472436e+214, "12934528111485738", 215},
  {1.2659475142469198886328107e+268, "12659475142469199", 269},
  {1.7181541350712235391989869e-292, "17181541350712235", -291},
  {2.9336030210864782460334394e-77, "29336030210864782", -76},
  {2.3500822854442264161116498e+165, "23500822854442264", 166},
  {9.7666484918103036606914704e-210, "9766648491810304", -209},
  {7.0038101396807604626361085e-53, "700381013968076", -52},
  {6.1150779108903385963348810e+32, "61150779108903386", 33},
  {3.4934597938003868004591379e+280, "3493459793800387", 281},
  {3.6366398597133149782809329e+99, "3636639859713315", 100},
  {1.4269190080765241498555492e+159, "14269190080765241", 160},
  {1.6313525525267967077207159e+58, "16313525525267967", 59},
  {3.3077618273782093183399411e+02, "33077618273782093", 3},
  {6.3181979071626823870152748e-69, "6318197907162682", -68},
  {1.0170725467114243886323321e+204, "10170725467114244", 205},
  {5.6397492408147574143218570e+105, "5639749240814757", 106},
  {4.1205498462383328337887977e+50, "4120549846238333", 51},
  {1.9554250996113606549911771e-234, "19554250996113607", -233},
  {1.3040900605282368472109886e+265, "13040900605282368", 266},
  {3.4164081127582059339161996e+140, "3416408112758206", 141},
  {1.1830130631183009938107857e+184, "1183013063118301", 185},
  {8.9749967018408637363013840e+38, "8974996701840864", 39},
  {1.6883424012360121824516645e-184, "16883424012360122", -183},
  {7.6342487789499829040544237e-303, "7634248778949983", -302},
  {9.1110341544492849376301292e-167, "9111034154449285", -166},
  {1.7668469254050668328943166e-110, "17668469254050668", -109},
  {1.0651399833984140705598346e+200, "1065139983398414", 201},
  {3.7638043652196596675174145e+285, "37638043652196597", 286},
  {1.2355643516847889361267241e+254, "1235564351684789", 255},
  {5.5520578747857957678814906e-255, "5552057874785796", -254},
  {9.4165291499131175906692179e+81, "9416529149913118", 82},
  {9.9141072095205796317307102e+131, "991410720952058", 132},
  {9.8013631469201794609268232e-19, "980136314692018", -18},
  {1.8626367441004535105993035e-157, "18626367441004535", -156},
  {5.6902419289656345458674832e-191, "5690241928965635", -190},
  {1.7740465539958656657864352e-198, "17740465539958657", -197},
  {5.5865105540578208072625851e-288, "5586510554057821", -287},
  {3.7910134562571589240382171e-110, "3791013456257159", -109},
  {4.4865905019586418796263855e+80, "4486590501958642", 81},
  {2.5226540532006893168663991e-95, "25226540532006893", -94},
  {4.4291893630755354048340418e+250, "44291893630755354", 251},
  {5.3038205950069161846616598e-49, "5303820595006916", -48},
  {8.3601928235870483124119154e+244, "8360192823587048", 245},
  {3.1232352343322294783825587e-196, "31232352343322295", -195},
  {8.1106962503516687946094200e-229, "8110696250351669", -228},
  {3.2317310202676026117853692e-70, "32317310202676026", -69},
  {3.2384544375087836003217473e-142, "32384544375087836", -141},
  {1.2882381099580466487892200e+98, "12882381099580466", 99},
  {2.8721263283000054171230915e-234, "28721263283000054", -233},
  {1.6854330311414672986582654e+271, "16854330311414673", 272},
  {1.0894707716685416499767436e-262, "10894707716685416", -261},
  {5.5753602790281935564918216e-51, "5575360279028194", -50},
  {6.3318875657352800923966409e+201, "633188756573528", 202},
  {9.9591963915687300450969092e+110, "995919639156873", 111},
  {1.9468061143980237134196105e+304, "19468061143980237", 305},
  {1.8060999561291514301885881e-14, "18060999561291514", -13},
  {2.7263488189003017213556402e-22, "27263488189003017", -21},
  {4.6552355663193737131043971e-129, "4655235566319374", -128},
  {9.5619193001451735490862330e-191, "9561919300145174", -190},
  {1.1907423451112097216997237e-11, "11907423451112097", -10},
  {1.7106156673753490988074257e+204, "1710615667375349", 205},
  {7.0447482202176212250056032e+176, "7044748220217621", 177},
  {5.1499160307924066182995710e+99, "5149916030792407", 100},
  {3.8323489080155909236403533e+109, "3832348908015591", 110},
  {2.5381742426767674582080812e+171, "25381742426767675", 172},
  {2.0157785571046404839973401e-302, "20157785571046405", -301},
  {2.6849658049648252450726704e-134, "26849658049648252", -133},
  {8.1588122240923317496334691e-57, "8158812224092332", -56},
  {7.8527230886172355988289056e+93, "7852723088617236", 94},
  {7.9490354878574863952069579e+248, "7949035487857486", 249},
  {4.1906333050317265698036984e+289, "4190633305031727", 290},
  {3.8868311607492051745935842e+251, "3886831160749205", 252},
  {2.1518962597488663623474659e+292, "21518962597488664", 293},
  {8.9971115034558754961142456e+98, "8997111503455875", 99},
  {3.6332845465501268728712319e+245, "3633284546550127", 246},
  {8.7656572343034785048265134e+110, "8765657234303479", 111},
  {4.1234414848514408932726429e+276, "4123441484851441", 277},
  {5.2082012770295333538560134e+71, "5208201277029533", 72},
  {1.0273738270212850626713473e+301, "10273738270212851", 302},
  {1.3418670003193740490768418e+272, "1341867000319374", 273},
  {1.2349121855521346688418101e-37, "12349121855521347", -36},
  {1.7092087785645250664287677e+92, "1709208778564525", 93},
  {5.7952599913498895794660810e-18, "57952599913498896", -17},
  {1.1993944862897505042432000e+22, "11993944862897505", 23},
  {3.1022657735460445748222925e-201, "31022657735460446", -200},
  {1.0038132264027494242723395e-74, "10038132264027494", -73},
  {3.0890695130093154990758835e-81, "30890695130093155", -80},
  {5.1472249634606456310984052e-26, "51472249634606456", -25},
  {7.3120478576053825751649309e+260, "7312047857605383", 261},
  {1.2202676978914053701101302e+239, "12202676978914054", 240},
  {5.5290097751155773843244409e+247, "55290097751155774", 248},
  {4.9615450172306621933103173e-79, "4961545017230662", -78},
  {2.2998738976467646304963935e-60, "22998738976467646", -59},
  {1.6774714603574502952437100e-255, "16774714603574503", -254},
  {1.3260987522840128452850069e+290, "13260987522840128", 291},
  {2.2053294610148421685792649e-54, "22053294610148422", -53},
  {8.0059329900062698792876174e+141, "800593299000627", 142},
  {5.7375939469146822335096702e+112, "5737593946914682", 113},
  {5.3604277055093432301207340e-229, "5360427705509343", -228},
  {3.8365830492521216436411493e-84, "38365830492521216", -83},
  {2.3663911606559705644204608e-264, "23663911606559706", -263},
  {6.0062603416239293417272968e-226, "6006260341623929", -225},
  {3.1851529499531526935144958e+96, "31851529499531527", 97},
  {4.0931595040736864039032469e-246, "40931595040736864", -245},
  {1.3195221690750369428763240e-292, "1319522169075037", -291},
  {3.0948484248170735828317781e-237, "30948484248170736", -236},
  {1.2617550774533226658463914e-216, "12617550774533227", -215},
  {5.3749327817759405344141351e+301, "5374932781775941", 302},
  {2.7331340014494892082179229e-114, "27331340014494892", -113},
  {9.6762351070773371041740627e-162, "9676235107077337", -161},
  {1.0695216092684421693440000e+22, "10695216092684422", 23},
  {1.5754589570007953192306339e-106, "15754589570007953", -105},
  {3.6411415592848968000000000e+16, "3641141559284897", 17},
  {8.1613386457629999753019983e-279, "8161338645763", -278},
  {1.1830543214018122235843752e-65, "11830543214018122", -64},
  {1.0633406390079151496725555e+67, "10633406390079151", 68},
  {6.2296370314240058642895673e-221, "6229637031424006", -220},
  {9.0520410373881871174940144e+303, "9052041037388187", 304},
  {6.5147807817966440819010629e-78, "6514780781796644", -77},
  {1.1820931928419226098817348e-52, "11820931928419226", -51},
  {8.6366494149050003826757625e+180, "8636649414905", 181},
  {9.3362051466959827958002610e-45, "9336205146695983", -44},
  {1.0553475851895795649094149e-267, "10553475851895796", -266},
  {8.0001254375681747627249458e+281, "8000125437568175", 282},
  {2.5717639119555397714058683e-280, "257176391195554", -279},
  {4.5934319491315831809956987e+131, "4593431949131583", 132},
  {1.0848537364457256631576917e-214, "10848537364457257", -213},
  {5.1363983742276733783468691e+284, "51363983742276734", 285},
  {2.5503248566884325555292889e+04, "25503248566884326", 5},
  {2.7566750070289174233614092e+47, "27566750070289174", 48},
  {7.3200685137721053768182894e-16, "7320068513772105", -15},
  {3.6034375267230027144625933e+219, "3603437526723003", 220},
  {3.9897093111541157107228522e+226, "39897093111541157", 227},
  {8.3477494086675999884212065e+68, "83477494086676", 69},
  {9.4125583141335856571969100e+122, "9412558314133586", 123},
  {4.0158226865827247976789829e-78, "4015822686582725", -77},
  {3.2927305049068909029835801e+80, "3292730504906891", 81},
  {6.6521569158450260505890742e-229, "6652156915845026", -228},
  {1.6010870231695909036045455e-72, "1601087023169591", -71},
  {1.6337878645561162678160815e+234, "16337878645561163", 235},
  {2.8648974318927383821607369e+60, "28648974318927384", 61},
  {7.0499738015155183493721906e-82, "7049973801515518", -81},
  {1.4024725985028343076630195e-99, "14024725985028343", -98},
  {1.7992687017131649840338970e+196, "1799268701713165", 197},
  {2.1013505376315058696214060e-231, "2101350537631506", -230},
  {4.1933244530598904464464801e-149, "41933244530598904", -148},
  {7.0943058149386102477615818e+115, "709430581493861", 116},
  {7.3534707041887614287076119e-34, "73534707041887614", -33},
  {4.1532777885663070802032320e-182, "4153277788566307", -181},
  {3.6851829039026444473672884e+213, "36851829039026444", 214},
  {3.9456848340770364947969666e+91, "39456848340770365", 92},
  {2.5523229066645354357279939e-104, "25523229066645354", -103},
  {2.9016491846019697755130640e-36, "29016491846019698", -35},
  {3.3465389471725728183635116e-08, "3346538947172573", -7},
  {1.7206796391993267868609316e-239, "17206796391993268", -238},
  {8.0356264250473910968910019e+303, "8035626425047391", 304},
  {6.0341671824572450452403205e+293, "6034167182457245", 294},
  {5.9586538291319060773933382e-188, "5958653829131906", -187},
  {7.9042650544670442747618539e+238, "7904265054467044", 239},
  {4.9416177863112869600107366e-222, "4941617786311287", -221},
  {7.0897742055846091742959124e-203, "7089774205584609", -202},
  {8.9035464719747703836978492e+169, "890354647197477", 170},
  {2.0902382493364269037060344e+270, "2090238249336427", 271},
  {1.0696508336984892319839482e-78, "10696508336984892", -77},
  {4.7173295015770834626711689e+191, "47173295015770835", 192},
  {3.8906958906293855982068508e+79, "38906958906293856", 80},
  {2.2621420993125564437193103e+118, "22621420993125564", 119},
  {5.0211859516240542371324986e+124, "5021185951624054", 125},
  {2.3825521075424677422687827e-40, "23825521075424677", -39},
  {9.8519165473713091556445212e-214, "9851916547371309", -213},
  {1.4166185058932754479560775e-208, "14166185058932754", -207},
  {3.9647030568778314332648602e-38, "39647030568778314", -37},
  {6.3478301949813519782227309e+211, "6347830194981352", 212},
  {8.4595945612161197245793584e-246, "845959456121612", -245},
  {2.0998055625659062858203630e-69, "20998055625659063", -68},
  {4.1346814111445414746230067e+95, "41346814111445415", 96},
  {1.5271391753232814273242768e+106, "15271391753232814", 107},
  {1.2738682846198312252220447e-291, "12738682846198312", -290},
  {1.1428079673319062541767397e+286, "11428079673319063", 287},
  {1.2368713554021656796940621e+61, "12368713554021657", 62},
  {4.0011210736514860688146496e-172, "4001121073651486", -171},
  {1.4611707415337772117472685e-18, "14611707415337772", -17},
  {9.1287565697698474054844761e-157, "9128756569769847", -156},
  {1.4898115057660042605469319e-271, "14898115057660043", -270},
  {1.7096359636664043401268776e-52, "17096359636664043", -51},
  {1.5133465739189080699603953e+199, "1513346573918908", 200},
  {2.2602054000511763295546023e-101, "22602054000511763", -100},
  {5.8143676204472075803723021e+227, "5814367620447208", 228},
  {1.9651570347673251458631939e-79, "1965157034767325", -78},
  {4.7504333976610648499049417e+214, "4750433397661065", 215},
  {5.2550887159375822244710982e-140, "5255088715937582", -139},
  {1.2846278961431957594170388e+85, "12846278961431958", 86},
  {8.0143016968888053894042969e+09, "8014301696888805", 10},
  {2.7227429354298947390345961e-232, "27227429354298947", -231},
  {2.1470599869704146715782467e+29, "21470599869704147", 30},
  {1.7570671997252763328564235e+114, "17570671997252763", 115},
  {3.1501814987112790702738593e-296, "3150181498711279", -295},
  {2.1901106608454719068673821e-88, "2190110660845472", -87},
  {5.7184595361444570828875506e+187, "5718459536144457", 188},
  {1.0048034107957028759538313e-138, "10048034107957029", -137},
  {2.5394571972831648889808600e-26, "2539457197283165", -25},
  {2.6234393028739066970136685e+120, "26234393028739067", 121},
  {4.0757848778931851884217545e+187, "4075784877893185", 188},
  {1.9955749589548389859124785e+260, "1995574958954839", 261},
  {1.1843315294739116349304029e-178, "11843315294739116", -177},
  {3.4776832875279524621801204e-56, "34776832875279525", -55},
  {1.9914034504650474200760320e+24, "19914034504650474", 25},
  {2.2199985571666609762380087e+157, "2219998557166661", 158},
  {1.4978829842742413586348203e+210, "14978829842742414", 211},
  {2.8392671014422194257634322e+71, "28392671014422194", 72},
  {2.8151012690481639930056073e+45, "2815101269048164", 46},
  {1.5142288525428272855145575e+60, "15142288525428273", 61},
  {1.5092097305454399422456730e-208, "150920973054544", -207},
  {1.1369029745079005282728617e-238, "11369029745079005", -237},
  {7.2093513524462101480560685e-214, "720935135244621", -213},
  {1.8042977522357195552648415e-240, "18042977522357196", -239},
  {3.3768059641902193051794228e+178, "3376805964190219", 179},
  {1.0476407835017309363616075e-119, "1047640783501731", -118},
  {2.7782477613532271528331547e+138, "2778247761353227", 139},
  {1.9937657348076606372402503e-277, "19937657348076606", -276},
  {9.1510633509955748415845108e+272, "9151063350995575", 273},
  {1.0952837071596408395547631e+107, "10952837071596408", 108},
  {2.9215555114974416162579754e-103, "29215555114974416", -102},
  {1.5959886681240399703837980e+121, "159598866812404", 122},
  {1.0504259838168946180096000e+22, "10504259838168946", 23},
  {2.3100419306548159730823653e-242, "2310041930654816", -241},
  {1.4027880691433315978185989e-137, "14027880691433316", -136},
  {2.6576553386874048392325539e+62, "2657655338687405", 63},
  {1.9710245323705813139849163e-158, "19710245323705813", -157},
  {2.2168299220042516762533174e+262, "22168299220042517", 263},
  {6.4363992244944346484449388e-157, "6436399224494435", -156},
  {1.6272250420470102188672203e-10, "16272250420470102", -9},
  {6.7301830621327802635907549e+252, "673018306213278", 253},
  {1.6717533018645347644887720e+254, "16717533018645348", 255},
  {9.1613583761260771794641146e+226, "9161358376126077", 227},
  {2.6921595930194506027093077e-224, "26921595930194506", -223},
  {5.0925986647575675754756376e+265, "50925986647575676", 266},
  {3.3106397399365677071284865e-99, "33106397399365677", -98},
  {1.9446546048123828584387342e+180, "19446546048123829", 181},
  {1.7961143242659026475213732e-121, "17961143242659026", -120},
  {8.0095978146630262037108352e-302, "8009597814663026", -301},
  {2.0905325015342458273995353e-153, "20905325015342458", -152},
  {7.2692394616739125828205331e+88, "7269239461673913", 89},
  {6.0543432998780643888575752e-219, "6054343299878064", -218},
  {1.6857526550316913730695409e-102, "16857526550316914", -101},
  {1.2749368764334641000470885e-45, "12749368764334641", -44},
  {2.9273744496760813239704441e+171, "29273744496760813", 172},
  {1.8960097953669718512137947e+90, "18960097953669719", 91},
  {6.2768796451947628395816909e+224, "6276879645194763", 225},
  {2.3359126516968706668624359e+99, "23359126516968707", 100},
  {6.2910280832392468417233263e+161, "6291028083239247", 162},
  {9.9677914406883714940122790e-149, "9967791440688371", -148},
  {4.7026329964204191911013894e+184, "4702632996420419", 185},
  {4.6030749543232357083206777e-119, "46030749543232357", -118},
  {4.2602544710699705241904930e-277, "42602544710699705", -276},
  {1.9384957723587379569666447e+102, "1938495772358738", 103},
  {2.5302007362466662440399300e-166, "25302007362466662", -165},
  {9.5096749139109649206866622e+289, "9509674913910965", 290},
  {5.6128474834087131250000000e+14, "5612847483408713", 15},
  {4.3993857785586675093541264e+123, "43993857785586675", 124},
  {7.8037818242483174896764820e-198, "7803781824248317", -197},
  {1.0427738060989124120970837e-26, "10427738060989124", -25},
  {3.9500082936196165426424226e-174, "39500082936196165", -173},
  {4.9549888338218666980285906e+30, "49549888338218667", 31},
  {1.7781011451142214368348046e+243, "17781011451142214", 244},
  {7.0232048672996197792765818e-39, "702320486729962", -38},
  {1.7489120183204920115344724e-206, "1748912018320492", -205},
  {4.4105535605358428559272545e+257, "4410553560535843", 258},
  {1.0568597392050284389118189e-200, "10568597392050284", -199},
  {2.6732062166720349195393799e-188, "2673206216672035", -187},
  {2.7219147135359673726411372e+233, "27219147135359674", 234},
  {7.2497629382941228982530564e+307, "7249762938294123", 308},
  {8.1770751982860215683636392e+267, "8177075198286022", 268},
  {1.1035270629312925738166314e-235, "11035270629312926", -234},
  {3.0132279383237217879048190e+52, "3013227938323722", 53},
  {2.1354852229466509046807721e+256, "2135485222946651", 257},
  {1.1697806205285821728829633e+288, "11697806205285822", 289},
  {1.1788955739366452693939209e+09, "11788955739366453", 10},
  {8.5395475119209804256232621e+72, "853954751192098", 73},
  {8.3788535262131561218745730e+83, "8378853526213156", 84},
  {2.1169523613271474118760763e+173, "21169523613271474", 174},
  {4.5195467716112611821194745e-226, "4519546771611261", -225},
  {2.4530501892965440742432483e+222, "2453050189296544", 223},
  {1.7765114741848529109088030e-174, "1776511474184853", -173},
  {6.4033871686525490354307695e-34, "6403387168652549", -33},
  {5.0168774023343150771064900e+86, "5016877402334315", 87},
  {2.0039333466941737259904855e-284, "20039333466941737", -283},
  {1.1877042085783162530665909e+258, "11877042085783163", 259},
  {4.3905605310739006670627017e+274, "4390560531073901", 275},
  {6.5064789855287766456604004e+08, "6506478985528777", 9},
  {4.5717900951419871055389233e+70, "4571790095141987", 71},
  {5.5458683914603278074472060e+191, "5545868391460328", 192},
  {3.5747769632418090711122544e+224, "3574776963241809", 225},
  {2.5932371234152346770604400e+50, "25932371234152347", 51},
  {4.2011841811008188557216098e-250, "4201184181100819", -249},
  {9.2197830448717314954134220e+38, "9219783044871731", 39},
  {3.3704660585873130532639165e+296, "3370466058587313", 297},
  {1.4491300647782011614192566e+184, "14491300647782012", 185},
  {1.8618407577867177270641391e-180, "18618407577867177", -179},
  {9.5657593821780060560448635e+97, "9565759382178006", 98},
  {5.1607771224313473377024852e+297, "51607771224313473", 298},
  {1.5271714534282558996977896e-33, "15271714534282559", -32},
  {4.4168137701581556530571364e+175, "4416813770158156", 176},
  {3.0493730379320932038002962e-61, "30493730379320932", -60},
  {2.7324071375787760448430082e+138, "2732407137578776", 139},
  {8.1319661789543516007318332e+98, "8131966178954352", 99},
  {3.3915227429031693602429999e-73, "33915227429031694", -72},
  {2.2414417631072599794819346e-278, "224144176310726", -277},
  {3.0121131342205084226661495e-43, "30121131342205084", -42},
  {2.3804573455382539425476952e-211, "2380457345538254", -210},
  {2.7670767366419137633943057e+287, "27670767366419138", 288},
  {1.6083709277798268345921434e+47, "16083709277798268", 48},
  {1.6191451992728763230880693e-297, "16191451992728763", -296},
  {1.7706147742671415834962817e-236, "17706147742671416", -235},
  {3.4963999336072621728924642e+165, "3496399933607262", 166},
  {8.1742053792560307049024662e+183, "8174205379256031", 184},
  {5.5586976886247439036686186e-260, "5558697688624744", -259},
  {1.3409831014597250559904055e+45, "1340983101459725", 46},
  {4.7281394147641240239440950e-182, "4728139414764124", -181},
  {2.1558378166611201164403308e-95, "215583781666112", -94},
  {1.1962452905441592782807557e+56, "11962452905441593", 57},
  {1.9642254685155905125410353e+57, "19642254685155905", 58},
  {9.4595207773228702881897998e-13, "945952077732287", -12},
  {9.6216906300353571576392150e+214, "9621690630035357", 215},
  {7.3989713595442734879519155e-109, "73989713595442735", -108},
  {6.9712138725704814038281985e+186, "6971213872570481", 187},
  {3.0090803470826435410324826e+192, "30090803470826435", 193},
  {1.5540452244526803605343791e-46, "15540452244526804", -45},
  {1.7578497039654897592743086e+110, "17578497039654898", 111},
  {2.6672318505590794849222775e-146, "26672318505590795", -145},
  {1.6485039219547861877874658e+269, "16485039219547862", 270},
  {3.0524899317311580942457895e+252, "3052489931731158", 253},
  {1.0466884573137061016960003e+291, "10466884573137061", 292},
  {5.1446489051400261891521233e-145, "5144648905140026", -144},
  {2.1895955241945913887574449e-08, "21895955241945914", -7},
  {1.0305387277312224605965089e+92, "10305387277312225", 93},
  {1.3271702068328764910706391e+48, "13271702068328765", 49},
  {1.3601150787594471796010410e-69, "13601150787594472", -68},
  {7.7352029997842374558068926e+292, "77352029997842375", 293},
  {1.5374235685003211792185355e+224, "15374235685003212", 225},
  {1.0428153539537942840588272e-205, "10428153539537943", -204},
  {7.0155866122985946781997828e+75, "7015586612298595", 76},
  {1.1513095027986043239738884e-300, "11513095027986043", -299},
  {4.1019492725431590009688308e+105, "4101949272543159", 106},
  {2.6973438195462406494959116e+73, "26973438195462406", 74},
  {1.6801529321822285552577084e-153, "16801529321822286", -152},
  {1.0725882139796873898306757e+106, "10725882139796874", 107},
  {6.8658793750098674723904934e+115, "68658793750098675", 116},
  {6.9790395461982574430695442e-304, "69790395461982574", -303},
  {4.2670189533178487911762301e-265, "4267018953317849", -264},
  {3.5862728010175865682983150e-21, "35862728010175866", -20},
  {4.9633132012003345013124664e+36, "49633132012003345", 37},
  {7.6707436326876532301743699e+96, "7670743632687653", 97},
  {3.5049792246958199908342221e+52, "350497922469582", 53},
  {1.6533562175530204523249547e-195, "16533562175530205", -194},
  {1.9335837546393863408849650e-163, "19335837546393863", -162},
  {5.0823195068773472161247407e-24, "5082319506877347", -23},
  {2.2658834127833248059040515e-10, "22658834127833248", -9},
  {7.4054198988445708176117330e-65, "7405419898844571", -64},
  {1.4098730878483898805821815e-162, "140987308784839", -161},
  {2.0855016852116958007812500e+12, "20855016852116958", 13},
  {2.1212260484274629221192625e+62, "2121226048427463", 63},
  {2.3488331012716976023137108e+124, "23488331012716976", 125},
  {6.8044367403219986039591326e-113, "6804436740321999", -112},
  {6.4859461369639026350436204e+126, "6485946136963903", 127},
  {1.6499381923704384840636826e+26, "16499381923704385", 27},
  {5.3519683705500670993425384e+158, "5351968370550067", 159},
  {8.0478645722431771531641041e+271, "8047864572243177", 272},
  {9.1639299954626288289107693e-44, "9163929995462629", -43},
  {4.9386147008322167815803474e-177, "4938614700832217", -176},
  {5.2729393087996982307281084e-279, "5272939308799698", -278},
  {1.9483873353439193964004517e+08, "19483873353439194", 9},
  {3.4870818560906390499024566e-222, "3487081856090639", -221},
  {1.0994501997701396484375000e+13, "10994501997701396", 14},
  {1.1163828950014516983131002e+82, "11163828950014517", 83},
  {1.7176013850831119850016211e+65, "1717601385083112", 66},
  {6.6836522532122467650952317e-119, "6683652253212247", -118},
  {2.6249117682218194315978031e+104, "26249117682218194", 105},
  {1.7605149168497952504636969e+72, "17605149168497953", 73},
  {1.2820373919203421471354934e-174, "12820373919203421", -173},
  {6.7392230669887303931313906e+213, "673922306698873", 214},
  {2.5552655819837564195040613e+03, "25552655819837564", 4},
  {4.8922390726133370224990842e+55, "4892239072613337", 56},
  {1.4459403046020540666294327e+287, "1445940304602054", 288},
  {5.1637681929982079295314050e+280, "5163768192998208", 281},
  {4.0401045650194718617290975e-18, "4040104565019472", -17},
  {1.2564236914381428879467807e-05, "12564236914381429", -4},
  {2.0481432818208221078919561e-106, "2048143281820822", -105},
  {8.0576677768666064996772074e+274, "8057667776866606", 275},
  {2.3192719259857583006496959e+58, "23192719259857583", 59},
  {4.5803863622143861882615728e+266, "4580386362214386", 267},
  {1.8251320378685813070694621e-293, "18251320378685813", -292},
  {4.2514123827440845237100726e-220, "42514123827440845", -219},
  {6.1435879823156149845285282e-82, "6143587982315615", -81},
  {3.9062798629540223316675000e+180, "39062798629540223", 181},
  {1.1125141639386673035846285e+136, "11125141639386673", 137},
  {3.7124364608680584582424166e+28, "37124364608680585", 29},
  {3.4525600582534156342860298e-210, "34525600582534156", -209},
  {8.0017674105398908003460226e-172, "8001767410539891", -171},
  {1.2241598343627627414175928e+49, "12241598343627627", 50},
  {1.8186890868139419727807610e+33, "1818689086813942", 34},
  {7.6650815484176212527753735e-106, "7665081548417621", -105},
  {7.5429036522347516281724649e+88, "7542903652234752", 89},
  {1.9616469876263127277310694e-187, "19616469876263127", -186},
  {4.0204203414600017240193546e+307, "40204203414600017", 308},
  {1.4778599254699689297370432e-75, "1477859925469969", -74},
  {4.4289068291490108897941775e+206, "4428906829149011", 207},
  {8.2542057282722994231737147e-109, "8254205728272299", -108},
  {1.6177933979393554340284938e-59, "16177933979393554", -58},
  {5.4437794203444461574992267e-105, "5443779420344446", -104},
  {1.3011606798849811313194415e-76, "13011606798849811", -75},
  {7.0128043412609119398405222e+81, "7012804341260912", 82},
  {2.9954680628890886742322096e+169, "29954680628890887", 170},
  {1.5905056624838781867923384e+220, "15905056624838782", 221},
  {7.5824436949914515037388227e+77, "7582443694991452", 78},
  {4.3210572999394965369546297e-273, "43210572999394965", -272},
  {1.6327744037552164613646142e+244, "16327744037552165", 245},
  {1.0169626861060252081958277e+260, "10169626861060252", 261},
  {2.8711377640068369403750554e-273, "2871137764006837", -272},
  {1.2752165171924732349697831e-246, "12752165171924732", -245},
  {1.6454358544648123248440696e+143, "16454358544648123", 144},
  {1.4226890894703335447921498e+45, "14226890894703335", 46},
  {8.4124203299263092938131879e+173, "8412420329926309", 174},
  {1.3210763684637611690819584e+25, "13210763684637612", 26},
  {2.7720137903728507160934927e-238, "27720137903728507", -237},
  {3.7851608067044900641517604e-249, "378516080670449", -248},
  {1.9995723547481457025587999e+112, "19995723547481457", 113},
  {1.5602926505984597686627540e-199, "15602926505984598", -198},
  {7.6517574310005007271353771e-164, "76517574310005", -163},
  {2.5212823402864717797877080e+243, "25212823402864718", 244},
  {2.5542499888106274897535619e+218, "25542499888106275", 219},
  {4.5704650731180828654409325e-172, "4570465073118083", -171},
  {2.0155779441674631636414022e-292, "2015577944167463", -291},
  {1.8915637545110573002561320e+211, "18915637545110573", 212},
  {6.0009760795199204461035110e-73, "600097607951992", -72},
  {1.6557055220566648886109887e+65, "1655705522056665", 66},
  {2.9187699037107917256965102e+42, "2918769903710792", 43},
  {1.6317093598635874543925671e-46, "16317093598635875", -45},
  {1.6620524397170804831366323e-267, "16620524397170805", -266},
  {5.8192344362458491443236551e-159, "5819234436245849", -158},
  {8.1202957171428737236831123e+145, "8120295717142874", 146},
  {2.2407958714731335891205721e-183, "22407958714731336", -182},
  {8.7063924887609527395283693e-107, "8706392488760953", -106},
  {6.3247211450503277897170956e-225, "6324721145050328", -224},
  {7.5686426711535843849688941e+225, "7568642671153584", 226},
  {6.2676690251429705104582774e-109, "62676690251429705", -108},
  {2.1728043533917253415873170e+231, "21728043533917253", 232},
  {8.0154234527269983325635793e-54, "8015423452726998", -53},
  {1.7201650915453928330212240e-48, "17201650915453928", -47},
  {1.3133041374878720473179529e-299, "1313304137487872", -298},
  {1.3135163561291959215435201e+259, "1313516356129196", 260},
  {1.0327752792025269122317036e+217, "10327752792025269", 218},
  {5.4648794585460616131392572e-250, "54648794585460616", -249},
  {1.4735293307180616497899464e-293, "14735293307180616", -292},
  {4.0351619675557359767676324e+176, "4035161967555736", 177},
  {3.4089871945052755717475343e+186, "34089871945052756", 187},
  {2.6650000495161732323864811e+97, "26650000495161732", 98},
  {8.0464052967251269692124608e-147, "8046405296725127", -146},
  {1.4939564560087311014438544e-215, "1493956456008731", -214},
  {1.1041548673543957993893749e+257, "11041548673543958", 258},
  {1.4021265003466612712877928e+221, "14021265003466613", 222},
  {4.5770063867363655149734812e-57, "45770063867363655", -56},
  {3.8060476288882182032593573e+179, "3806047628888218", 180},
  {4.8920585921258711383566049e-286, "4892058592125871", -285},
  {3.0185823954012064317859167e+135, "30185823954012064", 136},
  {8.7045098886684560299034490e+141, "8704509888668456", 142},
  {1.2464843060204547851619973e-92, "12464843060204548", -91},
  {1.0912410701738616416409090e+281, "10912410701738616", 282},
  {2.8817151539407856282208198e+120, "28817151539407856", 121},
  {3.8145651849068686161252259e+220, "38145651849068686", 221},
  {6.7957800903465686775001381e-21, "6795780090346569", -20},
  {2.1792288709704318790383694e+291, "2179228870970432", 292},
  {1.6843248445520250950502405e-25, "1684324844552025", -24},
  {1.0166462933355948137755078e-78, "10166462933355948", -77},
  {2.3813484561162857401035273e-136, "23813484561162857", -135},
  {9.6459126770755903110966855e+248, "964591267707559", 249},
  {8.0245115384530227297656398e+268, "8024511538453023", 269},
  {3.9894362126766235492109149e+210, "39894362126766235", 211},
  {7.8210617892255980357044608e+31, "7821061789225598", 32},
  {2.2549409147722000520499705e-111, "22549409147722", -110},
  {1.2581800316473570842566651e-117, "1258180031647357", -116},
  {8.1147108626094335833926601e-234, "8114710862609434", -233},
  {2.3314320581227280000000000e+15, "2331432058122728", 16},
  {4.7494264395251072229639356e-12, "4749426439525107", -11},
  {5.2872857957287744608665600e+23, "52872857957287745", 24},
  {1.9308736436249238240555640e+49, "19308736436249238", 50},
  {4.2682046879188551480949219e+97, "4268204687918855", 98},
  {6.5766235852308768497545524e+246, "6576623585230877", 247},
  {4.5291713630019707600084893e+219, "4529171363001971", 220},
  {5.4667368804613842991819108e-73, "5466736880461384", -72},
  {5.8481053942593057282106628e-02, "5848105394259306", -1},
  {4.5622825689750618716837510e+207, "4562282568975062", 208},
  {1.2120204678755765063607067e-306, "12120204678755765", -305},
  {5.7990108211354205447039027e-93, "57990108211354205", -92},
  {3.3475378367330465162536121e-228, "33475378367330465", -227},
  {3.0364309501211469477208332e+65, "3036430950121147", 66},
  {4.9555557873547200965254214e-09, "495555578735472", -8},
  {9.9016950784461517771131771e+233, "9901695078446152", 234},
  {2.5931980260637731328733728e+186, "2593198026063773", 187},
  {1.0215393396457071946636983e-49, "10215393396457072", -48},
  {5.9677137839652016242145914e+50, "5967713783965202", 51},
  {2.4117879881952150263459950e+129, "2411787988195215", 130},
  {3.6205564920484893509489937e+71, "36205564920484894", 72},
  {1.0922027833507053375602825e-72, "10922027833507053", -71},
  {1.8321374304397893526046045e-257, "18321374304397894", -256},
  {2.1932057117019728773120000e+22, "2193205711701973", 23},
  {2.4111435361137969134883658e-203, "2411143536113797", -202},
  {4.5377995708927830755647456e-166, "4537799570892783", -165},
  {3.4813139549950222505868104e+304, "34813139549950223", 305},
  {6.7134384402593692691431902e-71, "6713438440259369", -70},
  {3.9573729575754119464296756e-110, "3957372957575412", -109},
  {3.2382120586460784615046024e-163, "32382120586460785", -162},
  {6.2996071507341156617067671e+141, "6299607150734116", 142},
  {1.2071381860944952194344856e-79, "12071381860944952", -78},
  {1.6272730169582147455564643e+91, "16272730169582147", 92},
  {2.6941662710777127228818846e-206, "26941662710777127", -205},
  {5.4528843861586854937181901e-98, "54528843861586855", -97},
  {4.9403118660034250000000000e+14, "4940311866003425", 15},
  {3.0048102454548627008548592e-260, "30048102454548627", -259},
  {6.7930631208307553388666431e+227, "6793063120830755", 228},
  {8.5107556571961465840967571e-157, "8510755657196147", -156},
  {4.0714113728240860210212385e-46, "4071411372824086", -45},
  {1.0310361983146781252900482e-08, "10310361983146781", -7},
  {2.6073352199086238121500082e+86, "2607335219908624", 87},
  {3.2647249648472098622652103e-292, "326472496484721", -291},
  {2.5401903541046632047343387e+305, "25401903541046632", 306},
  {3.5911292619072007216875624e-147, "35911292619072007", -146},
  {2.5020952712500794283786600e-259, "25020952712500794", -258},
  {1.7343799787037801660721388e-18, "17343799787037802", -17},
  {1.0215688886707425982575557e-205, "10215688886707426", -204},
  {4.6948053220138349549952372e+76, "4694805322013835", 77},
  {4.8483473586487468545459841e-113, "4848347358648747", -112},
  {4.0296153821303033366650565e+34, "40296153821303033", 35},
  {5.9285953367969107147233278e-125, "5928595336796911", -124},
  {4.8936713698740540487213397e+68, "4893671369874054", 69},
  {3.8929164771948760119763581e-175, "3892916477194876", -174},
  {9.8127995667263191061021047e+186, "981279956672632", 187},
  {9.7221627816573800896714670e+215, "972216278165738", 216},
  {1.0338033735596647831883753e-302, "10338033735596648", -301},
  {7.7742619547062254119147522e+238, "7774261954706225", 239},
  {2.5075593931857825098059916e+124, "25075593931857825", 125},
  {8.1982241984589224541767883e+248, "8198224198458922", 249},
  {1.4448972849364217849446901e-144, "14448972849364218", -143},
  {5.2961111658101976093049947e+248, "5296111165810198", 249},
  {1.1993964210093920384564526e+207, "1199396421009392", 208},
  {1.0839774221492577725478725e-237, "10839774221492578", -236},
  {2.0041457742731824397151364e-282, "20041457742731824", -281},
  {1.8459505626590936516405043e+171, "18459505626590937", 172},
  {3.4472126360636697207029715e+262, "344721263606367", 263},
  {7.4057568044428907812116630e-100, "7405756804442891", -99},
  {3.2534975148530794496000000e+20, "32534975148530794", 21},
  {6.2049102286103521727812021e-75, "6204910228610352", -74},
  {3.4939496496538160904141541e+245, "3493949649653816", 246},
  {1.3105165585560537264706086e-247, "13105165585560537", -246},
  {4.8124053854095882858029450e-206, "48124053854095883", -205},
  {3.6531512218409575729769514e+156, "36531512218409576", 157},
  {7.2579879472807700119935359e+108, "725798794728077", 109},
  {3.0828521403063035282165854e-106, "30828521403063035", -105},
  {1.9844591062783143085201716e-179, "19844591062783143", -178},
  {3.6121761574198402440597380e-278, "361217615741984", -277},
  {3.2065009435665632892072010e+270, "32065009435665633", 271},
  {2.5443864226129657742254279e-303, "25443864226129658", -302},
  {2.3301159037453534082219672e-94, "23301159037453534", -93},
  {2.5068877564199389861314026e-15, "2506887756419939", -14},
  {9.8350582225061371773990594e-247, "9835058222506137", -246},
  {1.8568120773338539355097560e-196, "1856812077333854", -195},
  {1.7558453253823807205992939e-103, "17558453253823807", -102},
  {9.2062047952119652785313096e+288, "9206204795211965", 289},
  {2.4501357254605358372814463e-103, "2450135725460536", -102},
  {3.5503269604395386923465146e-19, "35503269604395387", -18},
  {2.4249609494945797858993448e+45, "24249609494945798", 46},
  {3.1012369206116513338518575e+266, "31012369206116513", 267},
  {1.5199319717198898914451636e+298, "151993197171989", 299},
  {4.8065262093387484972388991e-75, "48065262093387485", -74},
  {3.3016544208781352427639201e+229, "3301654420878135", 230},
  {2.9628787181235923420207026e-224, "29628787181235923", -223},
  {1.6865080694066444797306134e-245, "16865080694066445", -244},
  {2.9551750547486167573832961e+54, "29551750547486168", 55},
  {1.0619121683236028335497492e+105, "10619121683236028", 106},
  {5.9008524669559687165153604e+233, "5900852466955969", 234},
  {8.2159497413635576518680477e-07, "8215949741363558", -6},
  {6.9133434181612305627420678e-108, "691334341816123", -107},
  {3.4841770408969583948240948e+240, "34841770408969584", 241},
  {8.2924077492632396307975835e-35, "829240774926324", -34},
  {9.3703246259344421353787344e+205, "9370324625934442", 206},
  {6.5372162185799292311355379e-59, "6537216218579929", -58},
  {7.9615192686582207792101567e+171, "796151926865822", 172},
  {1.0417034703003310491407500e+241, "1041703470300331", 242},
  {1.1205565552319385232189807e+91, "11205565552319385", 92},
  {5.7744886721901825436799002e+274, "57744886721901825", 275},
  {5.7039113653199654334432155e-39, "57039113653199654", -38},
  {4.0317614194060254133791207e+239, "40317614194060254", 240},
  {1.5217336023598462515472167e+252, "15217336023598463", 253},
  {3.4224160064839169921875000e+12, "3422416006483917", 13},
  {1.1646205071265634795792260e+201, "11646205071265635", 202},
  {7.1364138076856606117623516e+62, "7136413807685661", 63},
  {1.3317422462006518731104785e+110, "13317422462006519", 111},
  {5.5822854601729079481433519e-22, "5582285460172908", -21},
  {4.6452024391591431503260855e+176, "4645202439159143", 177},
  {1.1174839207195960076406512e+125, "1117483920719596", 126},
  {4.3472721263610010898207414e-107, "4347272126361001", -106},
  {2.5265761149152789764315681e-98, "2526576114915279", -97},
  {2.0468912801319751874831344e+223, "20468912801319752", 224},
  {4.8807515980410962168149101e+124, "4880751598041096", 125},
  {2.5288579265142564114930644e+63, "25288579265142564", 64},
  {2.1062758693663170221560990e+112, "2106275869366317", 113},
  {1.1313665782777458196480000e+21, "11313665782777458", 22},
  {2.1473384298733975313716240e-92, "21473384298733975", -91},
  {5.2092912482761914042939005e-235, "52092912482761914", -234},
  {6.1907953545741846682058344e+162, "6190795354574185", 163},
  {9.6761470728018347764462994e+89, "9676147072801835", 90},
  {1.2516006432792519253487417e-09, "1251600643279252", -8},
  {2.4451438129909521510445734e+307, "2445143812990952", 308},
  {2.0546429906058072489073586e+129, "20546429906058072", 130},
  {1.9995691236157748349427074e+43, "19995691236157748", 44},
  {3.6497672247083447155451578e+269, "3649767224708345", 270},
  {7.8042905483577462699886627e-169, "7804290548357746", -168},
  {2.2047460010850297388070953e-188, "22047460010850297", -187},
  {1.2762814844974367370908207e+307, "12762814844974367", 308},
  {7.2088712767853075531437504e+271, "7208871276785308", 272},
  {1.1765553488126235387608190e-54, "11765553488126235", -53},
  {1.4185727713455472198757113e-217, "14185727713455472", -216},
  {7.9806062241039435613345606e-16, "7980606224103944", -15},
  {1.3597447766629690951390768e+190, "1359744776662969", 191},
  {5.2809140602570675786941844e+100, "52809140602570676", 101},
  {1.3251952175649033455336797e+198, "13251952175649033", 199},
  {5.8058311223132349448950710e-125, "5805831122313235", -124},
  {5.0711433440850963279257952e+196, "5071143344085096", 197},
  {5.0476147423943008036973794e-244, "5047614742394301", -243},
  {3.6480257412470960054004990e-105, "3648025741247096", -104},
  {2.5264205283808317035436630e+06, "25264205283808317", 7},
  {4.3954424028199932101316409e+186, "4395442402819993", 187},
  {1.9490420907061611418403121e+135, "1949042090706161", 136},
  {3.1094174594952317117316372e-25, "31094174594952317", -24},
  {1.0598690951272959226484454e+226, "10598690951272959", 227},
  {7.9704305184627300052656253e+67, "797043051846273", 68},
  {1.1334480066658379548191810e-163, "1133448006665838", -162},
  {4.9468652257794818002876048e-236, "4946865225779482", -235},
  {2.6899441766784015549331046e-203, "26899441766784016", -202},
  {5.1335612620365536000000000e+17, "51335612620365536", 18},
  {3.2721638228187730419449508e+03, "3272163822818773", 4},
  {1.6999931756474537640310395e-107, "16999931756474538", -106},
  {9.8050185322398381152034578e-208, "9805018532239838", -207},
  {9.2316577163596593164808229e-35, "9231657716359659", -34},
  {4.4556780483461864467403300e+177, "4455678048346186", 178},
  {3.4266824743691471165632014e+292, "3426682474369147", 293},
  {9.6404769061200738085094477e-296, "9640476906120074", -295},
  {3.2539582278816320800781250e+11, "3253958227881632", 12},
  {5.5708085178419117024346418e-296, "5570808517841912", -295},
  {2.3713187959996910344182319e-193, "2371318795999691", -192},
  {8.2317568803979742771651334e-261, "8231756880397974", -260},
  {8.5462974050606125368304656e-98, "8546297405060613", -97},
  {1.2613730859363135405928070e-258, "12613730859363135", -257},
  {5.8227516197766057763800842e+72, "5822751619776606", 73},
  {2.8342933402009916741099927e-41, "28342933402009917", -40},
  {1.0639407629484925965098647e+152, "10639407629484926", 153},
  {1.7144152175485252734816846e+71, "17144152175485253", 72},
  {6.0489641416131599885229570e-172, "604896414161316", -171},
  {1.6037591564858726409767541e-276, "16037591564858726", -275},
  {1.4039891176477951471350366e-223, "14039891176477951", -222},
  {4.2887563578530219013072158e-276, "4288756357853022", -275},
  {1.4880169687600792729370916e+201, "14880169687600793", 202},
  {4.6041185379713697338624621e-261, "460411853797137", -260},
  {2.0882172525494226674424081e-63, "20882172525494227", -62},
  {6.7559741678183067279293692e-96, "6755974167818307", -95},
  {2.3988252023014230322206699e-227, "2398825202301423", -226},
  {1.6859154057890028088388520e-281, "16859154057890028", -280},
  {1.5675866214800048152144627e+236, "15675866214800048", 237},
  {6.8850933998958957101308042e+297, "6885093399895896", 298},
  {4.2465441912037508195249991e+173, "4246544191203751", 174},
  {5.6652202927846892264246801e-157, "5665220292784689", -156},
  {1.0261970915325426728870612e-227, "10261970915325427", -226},
  {6.1879903595714696341090966e+60, "61879903595714696", 61},
  {3.1990745628137190321105712e-202, "3199074562813719", -201},
  {3.5080086392889061465397411e+291, "3508008639288906", 292},
  {2.4521812853074206559239261e+270, "24521812853074207", 271},
  {1.1853287098192166831573321e-161, "11853287098192167", -160},
  {4.3301174800711320194022654e-245, "4330117480071132", -244},
  {4.5915935293358269157593970e-18, "4591593529335827", -17},
  {2.7436873936169401119899833e-58, "274368739361694", -57},
  {9.9819025993959646497926925e+50, "9981902599395965", 51},
  {3.5525430352584623708141741e-118, "35525430352584624", -117},
  {3.6819053002962872409107275e+109, "36819053002962872", 110},
  {3.7986996537604372781160578e-01, "37986996537604373", 0},
  {6.2771941164167522304206270e-276, "6277194116416752", -275},
  {2.0090021148226937249651069e+302, "20090021148226937", 303},
  {4.5854333180553997097695512e+244, "45854333180554", 245},
  {1.4420126222867014031839550e+304, "14420126222867014", 305},
  {1.1226851425949705207525192e+38, "11226851425949705", 39},
  {9.6737427761885441585965528e+111, "9673742776188544", 112},
  {3.6112617044718480263812951e-68, "3611261704471848", -67},
  {1.2309600446673146023731760e-289, "12309600446673146", -288},
  {6.5843358586851127030529528e-259, "6584335858685113", -258},
  {3.5267831907161469427007730e+162, "3526783190716147", 163},
  {2.3854547300934340908587259e+139, "2385454730093434", 140},
  {9.7162457309609990734601450e+181, "9716245730960999", 182},
  {1.0242824200072730021637771e+257, "1024282420007273", 258},
  {4.2180171104348210685934129e-231, "4218017110434821", -230},
  {7.0657236349381997462556306e+48, "70657236349382", 49},
  {2.4635797406398226864149161e-208, "24635797406398227", -207},
  {3.0558621588731719253528267e-194, "3055862158873172", -193},
  {8.5019246415419812648327769e-65, "8501924641541981", -64},
  {6.6417165364716153792166915e-268, "6641716536471615", -267},
  {1.6722405024962436530406706e-100, "16722405024962437", -99},
  {1.9693394943349313507987013e-145, "19693394943349314", -144},
  {4.1790362888561856468662178e-13, "41790362888561856", -12},
  {8.8576524162366228378576720e+291, "8857652416236623", 292},
  {1.5291654304495310098697205e-204, "1529165430449531", -203},
  {8.2439586853028070017789170e-165, "8243958685302807", -164},
  {5.9139747557153458328977165e-55, "5913974755715346", -54},
  {5.1232260042307252084934661e-105, "5123226004230725", -104},
  {3.0979597117317051676563865e+100, "3097959711731705", 101},
  {4.4299579798785246421053389e+165, "4429957979878525", 166},
  {1.1004988703506233154215171e-86, "11004988703506233", -85},
  {2.7871496083817686951562631e-255, "27871496083817687", -254},
  {2.8383343937117798763334432e+107, "283833439371178", 108},
  {1.1219139674558249035818984e-54, "11219139674558249", -53},
  {6.6002461541676856487396188e-89, "6600246154167686", -88},
  {1.7295518914018101019043333e+261, "172955189140181", 262},
  {1.3561723615211508965965591e+45, "13561723615211509", 46},
  {1.1155613044304597503640770e-136, "11155613044304598", -135},
  {1.6795038872307718627452979e-168, "16795038872307719", -167},
  {4.7140910515290014188830720e+24, "47140910515290014", 25},
  {1.1598975736037816358785620e+142, "11598975736037816", 143},
  {1.0133114268062532383836810e+112, "10133114268062532", 113},
  {2.1262931979496659695054797e-05, "2126293197949666", -4},
  {4.0877593710898660708753422e+52, "4087759371089866", 53},
  {3.0615615877834042691813376e+25, "30615615877834043", 26},
  {4.3478768936358957953978763e+245, "4347876893635896", 246},
  {2.3414301539175971829928874e+196, "2341430153917597", 197},
  {1.1798542498275039550781214e-228, "1179854249827504", -227},
  {6.5149445893491031548435307e-147, "6514944589349103", -146},
  {2.8881323657593267639279296e+118, "28881323657593268", 119},
  {5.6116307062002441418131903e-288, "5611630706200244", -287},
  {1.4102400018444204761181027e+04, "14102400018444205", 5},
  {7.0451244176311293445141931e+162, "7045124417631129", 163},
  {1.4449635250128574623361796e-270, "14449635250128575", -269},
  {1.1723540947071598236505334e+271, "11723540947071598", 272},
  {8.8594275932335508188298323e-111, "8859427593233551", -110},
  {1.9923542265337511364196534e+277, "1992354226533751", 278},
  {2.4955978505185918289620898e+176, "24955978505185918", 177},
  {2.2193094191906943169547199e-166, "22193094191906943", -165},
  {3.4179831948590505565767550e+57, "34179831948590506", 58},
  {1.5579645622976021067440292e-164, "15579645622976021", -163},
  {1.7961738824772628646841967e+184, "1796173882477263", 185},
  {1.4655874078146448056664291e+58, "14655874078146448", 59},
  {7.9127461165399812184970589e-149, "7912746116539981", -148},
  {6.7342917188541246688995564e-246, "6734291718854125", -245},
  {1.2512534980905859679094159e+172, "1251253498090586", 173},
  {6.7758050503728688732053495e-06, "6775805050372869", -5},
  {2.8111412813020527002158084e+150, "28111412813020527", 151},
  {7.2203874839640142721754364e+94, "7220387483964014", 95},
  {8.1833719423233411804512744e-35, "8183371942323341", -34},
  {4.1476876380030200813878021e-11, "414768763800302", -10},
  {3.0847677761976129830172910e+241, "3084767776197613", 242},
  {8.4371978858856622232428427e-30, "8437197885885662", -29},
  {3.3943329665043506289104746e-51, "33943329665043506", -50},
  {2.8119435882260811030515660e+250, "2811943588226081", 251},
  {2.4847894628254673475810868e-206, "24847894628254673", -205},
  {5.4945728378008933596809585e+178, "5494572837800893", 179},
  {8.5872430336631432074377489e+107, "8587243033663143", 108},
  {6.5698215291288985138080311e+270, "65698215291288985", 271},
  {6.0323256114689970895268416e+138, "6032325611468997", 139},
  {2.7080011588157035786812636e+192, "27080011588157036", 193},
  {4.0370089159620319757100378e+136, "4037008915962032", 137},
  {6.5531293351093203737011921e-103, "655312933510932", -102},
  {6.8648423520080258110911926e-211, "6864842352008026", -210},
  {7.7797139451151706434856452e-256, "7779713945115171", -255},
  {8.7064837570015225869968207e-243, "8706483757001523", -242},
  {4.2007667312595519851647130e+39, "4200766731259552", 40},
  {7.4009702989450836636916947e-214, "7400970298945084", -213},
  {7.0240011300687498437789980e+99, "702400113006875", 100},
  {3.2213934560622118855146543e+33, "3221393456062212", 34},
  {1.7644160067682563637976154e-77, "17644160067682564", -76},
  {4.3992467334203602458678485e+99, "439924673342036", 100},
  {1.7656893320429057719519312e-242, "17656893320429058", -241},
  {4.8495107557780670128837539e-76, "4849510755778067", -75},
  {2.5788117223378383225423301e+172, "25788117223378383", 173},
  {1.0823811085510987645877434e-240, "10823811085510988", -239},
  {3.6432672449373071653720983e-111, "3643267244937307", -110},
  {5.3036760268213404732269527e+27, "530367602682134", 28},
  {1.0154524303632060308610896e-03, "1015452430363206", -2},
  {7.1649625503457106460672000e+22, "7164962550345711", 23},
  {4.3520972548140094322082668e-42, "43520972548140094", -41},
  {2.1471773751014413801480290e-216, "21471773751014414", -215},
  {2.5826208985715797593680580e-165, "258262089857158", -164},
  {1.5203808428559435016311782e-272, "15203808428559435", -271},
  {7.9557335072199998552549008e-166, "795573350722", -165},
  {2.1353148985850313639061279e-158, "21353148985850314", -157},
  {1.2755575348597244020853189e-119, "12755575348597244", -118},
  {2.8476149803056577178462077e-146, "28476149803056577", -145},
  {2.5401902441809083083606353e+54, "25401902441809083", 55},
  {2.4763955685491486778132247e-28, "24763955685491487", -27},
  {3.2473867721884195575831752e-201, "32473867721884196", -200},
  {1.6755284325138477197465260e+51, "16755284325138477", 52},
  {7.5585661709808687803858284e+206, "7558566170980869", 207},
  {7.4480413698733230638147653e+267, "7448041369873323", 268},
  {3.3776989785297869306479819e-279, "3377698978529787", -278},
  {1.2991978868238689235216963e-265, "1299197886823869", -264},
  {1.8366376308120404028194775e-303, "18366376308120404", -302},
  {3.4770664161338815153042857e-145, "34770664161338815", -144},
  {1.3621614114431211438913523e+49, "13621614114431211", 50},
  {6.3563800504752832133635526e-180, "6356380050475283", -179},
  {1.2831178345618321564407998e-58, "12831178345618322", -57},
  {9.0632626797707257111794864e+39, "9063262679770726", 40},
  {1.3808744198010475257021312e-01, "13808744198010475", 0},
  {3.8787311061125545577290356e+158, "38787311061125546", 159},
  {1.4252270393628441140165827e+221, "14252270393628441", 222},
  {7.1890597974526441532851431e+87, "7189059797452644", 88},
  {6.7736110186833127061725832e+36, "6773611018683313", 37},
  {5.2153273481923688054491451e-27, "5215327348192369", -26},
  {3.3847323836610675173997009e-02, "33847323836610675", -1},
  {1.4371428086642345168798901e-256, "14371428086642345", -255},
  {4.7033864761508498066738815e-04, "470338647615085", -3},
  {1.8101664894384451501113190e-287, "18101664894384452", -286},
  {9.5765149105495346407446084e-209, "9576514910549535", -208},
  {7.3032959876642467763093154e-53, "7303295987664247", -52},
  {3.9864854835571177368845074e-205, "39864854835571177", -204},
  {1.8231741872546379642380923e+275, "1823174187254638", 276},
  {2.8021666627852520332081429e-30, "2802166662785252", -29},
  {1.3210150917191691324712734e+147, "13210150917191691", 148},
  {9.0212307700934764186507519e-166, "9021230770093476", -165},
  {3.2138633302759970902074253e-47, "3213863330275997", -46},
  {3.9205259504198572896470407e-182, "3920525950419857", -181},
  {2.1498595564024873780831233e+56, "21498595564024874", 57},
  {2.3818906058291374081654586e+145, "23818906058291374", 146},
  {2.4612978436080421742306936e-290, "24612978436080422", -289},
  {5.7308435454378937659529418e+89, "5730843545437894", 90},
  {6.0599573860433256570821853e+90, "6059957386043326", 91},
  {8.3212202207079487239310545e+228, "8321220220707949", 229},
  {1.0921420116674892148619193e-210, "10921420116674892", -209},
  {2.9638887365121228749611321e+62, "2963888736512123", 63},
  {3.8758875109094643118093766e-209, "38758875109094643", -208},
  {4.0626038005170495680508616e+158, "40626038005170496", 159},
  {2.3064631410208226244237794e-230, "23064631410208226", -229},
  {2.5541684434777728705560105e-52, "2554168443477773", -51},
  {1.2556248713906205020017459e+295, "12556248713906205", 296},
  {3.6376241338184141429450688e+226, "3637624133818414", 227},
  {6.3304363516477572807637674e-185, "6330436351647757", -184},
  {2.5017417618393176084160156e-184, "25017417618393176", -183},
  {6.6408026897523457309817815e+218, "6640802689752346", 219},
  {8.3724419674472265911483653e+248, "8372441967447227", 249},
  {4.4245834241751939821534856e+205, "4424583424175194", 206},
  {9.1830367716851219996875414e+77, "9183036771685122", 78},
  {1.0873933880758221110441331e+59, "1087393388075822", 60},
  {7.0246623106278466888164106e+279, "7024662310627847", 280},
  {4.0892075133212408569043295e+75, "4089207513321241", 76},
  {7.7414571498964951835948243e+82, "7741457149896495", 83},
  {3.1274790822119944051024848e-76, "31274790822119944", -75},
  {1.6286312940544305811049441e-18, "16286312940544306", -17},
  {1.4067527623189517965134695e-95, "14067527623189518", -94},
  {3.1694297232875022436917343e-168, "31694297232875022", -167},
  {3.8885827729592469267189625e-156, "3888582772959247", -155},
  {3.1511072450942340779898731e+204, "3151107245094234", 205},
  {4.2284768016059059352926633e-308, "4228476801605906", -307},
  {8.0022440542657608042283311e+65, "8002244054265761", 66},
  {1.9450486509571205695167351e-159, "19450486509571206", -158},
  {2.1430983183191310897919367e-199, "2143098318319131", -198},
  {8.5246861354661082673357739e-198, "8524686135466108", -197},
  {1.8286090550725504596346918e-54, "18286090550725505", -53},
  {7.2679416331192472017050166e-77, "7267941633119247", -76},
  {6.2976970330419048326076732e-170, "6297697033041905", -169},
  {1.0803270140147705644780820e-241, "10803270140147706", -240},
  {4.7681726082422718858473289e-48, "4768172608242272", -47},
  {2.4107555671406412315922450e+39, "24107555671406412", 40},
  {3.4597108088178203715190034e-251, "34597108088178204", -250},
  {1.3440928679860404105555945e-160, "13440928679860404", -159},
  {1.0472786242852749625383143e-271, "1047278624285275", -270},
  {1.1176382286521299979344553e-35, "111763822865213", -34},
  {4.3507481333494779328764630e-113, "4350748133349478", -112},
  {4.0071461079704139245288797e-37, "4007146107970414", -36},
  {7.2268734374382202428496659e-289, "722687343743822", -288},
  {2.8398351603847551544447438e-74, "2839835160384755", -73},
  {9.0382997960985861717947849e-76, "9038299796098586", -75},
  {1.0417285658548540278962501e-72, "1041728565854854", -71},
  {2.9039479511299411121318615e+113, "2903947951129941", 114},
  {1.0542791338949680136038670e+59, "1054279133894968", 60},
  {1.7418422903371210905969108e-39, "1741842290337121", -38},
  {3.5689628233228230608350036e+183, "3568962823322823", 184},
  {3.5709835017526763132481653e-76, "35709835017526763", -75},
  {2.7805698652398975609193471e+138, "27805698652398976", 139},
  {1.6377897292094012652649674e+299, "16377897292094013", 300},
  {4.3715158695441795017450526e+233, "43715158695441795", 234},
  {3.3095665203680866394748711e+243, "33095665203680866", 244},
  {3.2627613145320392884862986e-210, "3262761314532039", -209},
  {2.8389857415892609386092149e+85, "2838985741589261", 86},
  {3.2243581019975645189376709e-11, "32243581019975645", -10},
  {9.6837725462798262755609004e-250, "9683772546279826", -249},
  {4.1218621030712837261441228e-20, "4121862103071284", -19},
  {8.3706096959740283040689209e+161, "8370609695974028", 162},
  {3.5126458069604783496018058e-86, "3512645806960478", -85},
  {4.9976638292157724461762868e+203, "49976638292157724", 204},
  {1.4606359430264400522740651e-115, "146063594302644", -114},
  {1.2323060112093060087397319e+186, "1232306011209306", 187},
  {1.3954564663884522481057887e+45, "13954564663884522", 46},
  {1.0227578667265396443555798e-304, "10227578667265396", -303},
  {3.1125808548251016154597224e+71, "31125808548251016", 72},
  {6.1194448547693887574621161e+211, "6119444854769389", 212},
  {1.0291493911035661020773732e+202, "1029149391103566", 203},
  {8.6078257176340622828972293e+227, "8607825717634062", 228},
  {6.4870503958132141342516312e-69, "6487050395813214", -68},
  {6.0098782611178506829155527e-236, "6009878261117851", -235},
  {3.4542611279562602989999387e+210, "34542611279562603", 211},
  {2.1578710898514818504942698e-210, "2157871089851482", -209},
  {1.5450161151960786895688610e-59, "15450161151960787", -58},
  {7.7983604033998886961853714e+01, "7798360403399889", 2},
  {2.8848968561192836620763991e+282, "28848968561192837", 283},
  {4.1919642090970939593307345e+299, "4191964209097094", 300},
  {2.1526657547822791063485353e-204, "2152665754782279", -203},
  {3.5682273730792491562960717e+45, "3568227373079249", 46},
  {1.9502864310209006065753862e-143, "19502864310209006", -142},
  {5.3160906621631427817732242e-282, "5316090662163143", -281},
  {1.5687935335892186565474463e-94, "15687935335892187", -93},
  {3.9647629229815915213636879e-17, "39647629229815915", -16},
  {6.1768609027751041756252638e-183, "6176860902775104", -182},
  {3.5816023161596626541389122e+46, "35816023161596627", 47},
  {3.2816263176716328988760909e+193, "3281626317671633", 194},
  {2.4204133973132820100536193e+86, "2420413397313282", 87},
  {5.6174245880348461980020396e+194, "5617424588034846", 195},
  {9.2771768289166639987968584e+33, "9277176828916664", 34},
  {1.8037889873590580147764106e+142, "1803788987359058", 143},
  {1.0553508587247575780304237e-235, "10553508587247576", -234},
  {5.8408066348741499849692835e+261, "584080663487415", 262},
  {5.2996855933649123735659787e-159, "5299685593364912", -158},
  {2.7839938003568638046881917e+46, "2783993800356864", 47},
  {8.9059071814071213456643625e-123, "8905907181407121", -122},
  {3.8934075083654648797433081e+97, "3893407508365465", 98},
  {3.0662705572129657497555743e+39, "3066270557212966", 40},
  {8.4828303282843336019369327e-305, "8482830328284334", -304},
  {5.2860784460058434086755354e+294, "5286078446005843", 295},
  {5.7322046012304297065277625e-58, "573220460123043", -57},
  {3.3810125419260728563182587e+219, "3381012541926073", 220},
  {3.0474563542973980903625488e+09, "3047456354297398", 10},
  {1.3427697051065921661096815e+198, "13427697051065922", 199},
  {4.6772526944935764585835841e+105, "4677252694493576", 106},
  {2.6333904939970769037153005e+88, "2633390493997077", 89},
  {1.3057361854354986622266216e+296, "13057361854354987", 297},
  {1.7262349443044271064986643e-137, "1726234944304427", -136},
  {1.7163381507617284743442826e-102, "17163381507617285", -101},
  {1.5522347371593921696812428e-87, "15522347371593922", -86},
  {2.8260319909150778186547929e+84, "2826031990915078", 85},
  {2.8515278543098736976817191e+170, "28515278543098737", 171},
  {3.8113013667468506378969660e-84, "38113013667468506", -83},
  {1.0696070402145380426895965e+248, "1069607040214538", 249},
  {2.9983388423122733897837355e+273, "29983388423122734", 274},
  {7.2314077391923466815727854e-164, "7231407739192347", -163},
  {4.0872204945688340503449276e-137, "4087220494568834", -136},
  {6.0990968747369686816314778e-208, "6099096874736969", -207},
  {1.3403030017112355454801145e-42, "13403030017112355", -41},
  {7.1876143455673845006443484e-148, "7187614345567385", -147},
  {6.9271774106647038200990395e-301, "6927177410664704", -300},
  {1.3230072025913393975050180e+209, "13230072025913394", 210},
  {1.7512011756610595916881218e-233, "17512011756610596", -232},
  {5.7513072239001645123161169e+253, "57513072239001645", 254},
  {2.0817374126313296034631048e-79, "20817374126313296", -78},
  {5.9304666349777675761190860e+72, "59304666349777676", 73},
  {8.5552814757773048635658798e-87, "8555281475777305", -86},
  {1.8321525551017857974895075e+164, "18321525551017858", 165},
  {3.9847861784927764712132265e+253, "39847861784927765", 254},
  {2.5087628500305482835745416e-222, "25087628500305483", -221},
  {5.7054614998460555995157387e+76, "57054614998460556", 77},
  {1.4430895538619122820674279e-24, "14430895538619123", -23},
  {1.3107401589647000823536793e+185, "13107401589647001", 186},
  {4.8642852206029854367072309e+124, "4864285220602985", 125},
  {1.1405079353847913772535895e-156, "11405079353847914", -155},
  {3.5912651112839430003345636e+97, "3591265111283943", 98},
  {1.5826752632627345006634903e+69, "15826752632627345", 70},
  {5.8399134242197630866554664e+284, "5839913424219763", 285},
  {2.6775771049745074436732074e-300, "26775771049745074", -299},
  {2.3206826007706546012623689e-113, "23206826007706546", -112},
  {5.4482950667506876841114735e+110, "5448295066750688", 111},
  {1.0324360676300090974958859e-38, "10324360676300091", -37},
  {4.7796948735125526428222656e+10, "4779694873512553", 11},
  {1.6180172521434243342292454e-256, "16180172521434243", -255},
  {6.3134882968937998128335562e+213, "63134882968938", 214},
  {5.0118655254685574607829279e+222, "50118655254685575", 223},
  {5.3379079327102868055602581e+104, "5337907932710287", 105},
  {3.7056906238699611930881272e+145, "3705690623869961", 146},
  {2.1437471111249840153042013e+167, "2143747111124984", 168},
  {1.0261261368515236579854084e+86, "10261261368515237", 87},
  {3.3146716500186981286826083e-300, "3314671650018698", -299},
  {2.5137998255999516997245099e-144, "25137998255999517", -143},
  {8.3545304369817722836230902e+293, "8354530436981772", 294},
  {2.4297559877264078346202602e+43, "2429755987726408", 44},
  {1.1168075248736215435599468e-121, "11168075248736215", -120},
  {2.3619073842531137647023450e+260, "23619073842531138", 261},
  {1.3188507236258929049510294e-252, "1318850723625893", -251},
  {5.7741096132305568894758294e+79, "5774109613230557", 80},
  {1.6463118253513831291155789e-244, "1646311825351383", -243},
  {1.7767180052674631129913005e-207, "1776718005267463", -206},
  {1.4584365613991311403072187e-190, "14584365613991311", -189},
  {1.6911621825074340798067408e+134, "1691162182507434", 135},
  {3.6175126401813942888521908e+266, "36175126401813943", 267},
  {2.4578652066770976175694748e-17, "24578652066770976", -16},
  {8.4283868972948729200081137e-269, "8428386897294873", -268},
  {4.4232106699994752857320000e-61, "4423210669999475", -60},
  {5.7010850033794605776309087e+73, "570108500337946", 74},
  {1.5282973870198413029492393e+130, "15282973870198413", 131},
  {4.4746363348843047742355965e+70, "4474636334884305", 71},
  {1.4717353050935928761415205e+237, "14717353050935929", 238},
  {4.1209743640709080672704953e+299, "4120974364070908", 300},
  {5.4063325372816291500484159e+32, "5406332537281629", 33},
  {1.3237927222992156220899963e-206, "13237927222992156", -205},
  {1.2138323387608905119018545e-177, "12138323387608905", -176},
  {3.0255893975129722923720052e+77, "30255893975129723", 78},
  {1.4387556416398922630501313e+74, "14387556416398923", 75},
  {2.5170600660617229806822242e+80, "2517060066061723", 81},
  {9.0231353893276594672656616e+259, "902313538932766", 260},
  {1.4280853598671528552967912e+88, "14280853598671529", 89},
  {1.3812607635310991324926648e-33, "13812607635310991", -32},
  {8.6146083979560354894997730e+235, "8614608397956035", 236},
  {1.1381320899181732256553181e-28, "11381320899181732", -27},
  {8.2099286571104135912490326e-184, "8209928657110414", -183},
  {3.1519426660030892868632576e+25, "31519426660030893", 26},
  {3.1587353252646771049379996e+222, "3158735325264677", 223},
  {1.3303512125323595277211271e+28, "13303512125323595", 29},
  {8.1801810157549779135478564e-165, "8180181015754978", -164},
  {5.8283863277260280852117287e+202, "5828386327726028", 203},
  {1.7463491686507867460137673e+267, "17463491686507867", 268},
  {5.1435143662360409017582006e-195, "5143514366236041", -194},
  {1.9753563477625555305975814e+133, "19753563477625555", 134},
  {4.9398762888002044034805458e+79, "49398762888002044", 80},
  {3.4014822739521792658837418e-280, "34014822739521793", -279},
  {3.7669239697306650135439476e+180, "3766923969730665", 181},
  {8.9472966882707265162316007e-172, "8947296688270727", -171},
  {3.3194763735492892330589370e+83, "3319476373549289", 84},
  {2.5741042765931037906196991e-173, "25741042765931038", -172},
  {7.8492983367538501196262900e+51, "784929833675385", 52},
  {2.7097777993047158783581988e+292, "2709777799304716", 293},
  {4.9270275068931661725393811e-183, "4927027506893166", -182},
  {3.2952746996254377873917055e+235, "3295274699625438", 236},
  {5.9274281532116589005794851e-195, "5927428153211659", -194},
  {5.0434072767547861671165696e+88, "5043407276754786", 89},
  {7.2835277808430778005598681e-140, "7283527780843078", -139},
  {5.5816618107840156530891686e+243, "5581661810784016", 244},
  {1.6148241644229591003936831e+175, "1614824164422959", 176},
  {5.1762684675790352384231233e+53, "5176268467579035", 54},
  {3.1280677378211171889315840e+24, "3128067737821117", 25},
  {3.0941413569634154105574024e-250, "30941413569634154", -249},
  {2.6143877948987601729099318e-119, "261438779489876", -118},
  {9.6883330092802383620054731e-75, "9688333009280238", -74},
  {1.6835098028926428132682078e+69, "16835098028926428", 70},
  {2.5732616158887649583011534e+95, "2573261615888765", 96},
  {2.1192916317744752082377798e-128, "21192916317744752", -127},
  {4.7677552027794036837794415e+185, "47677552027794037", 186},
  {2.1150904425732111833563759e+272, "21150904425732112", 273},
  {1.7005331609762501782906602e+41, "17005331609762502", 42},
  {1.2351914046236158844116840e-48, "12351914046236159", -47},
  {8.3146146428570724364264667e+91, "8314614642857072", 92},
  {1.0447992746368247198427095e-136, "10447992746368247", -135},
  {1.0198120131525791952862751e-197, "10198120131525792", -196},
  {4.9231356560397383398979872e+290, "4923135656039738", 291},
  {2.1139829805794418415043840e-10, "21139829805794418", -9},
  {4.8965830839070975085936982e+226, "4896583083907098", 227},
  {1.9206619091794127844254895e+145, "19206619091794128", 146},
  {2.1473276688960538361624177e+60, "2147327668896054", 61},
  {1.3052453821876529987606224e+101, "1305245382187653", 102},
  {2.9006029505964863223376472e+191, "29006029505964863", 192},
  {2.6521509298204653334495970e-213, "26521509298204653", -212},
  {2.6713431740088321102787678e-26, "2671343174008832", -25},
  {3.1443849361953772471798480e+109, "31443849361953772", 110},
  {3.3881986780013424383035760e-167, "33881986780013424", -166},
  {7.1577149938056707484196532e+248, "7157714993805671", 249},
  {1.5159959947811688798973632e+267, "15159959947811689", 268},
  {4.3312163203792604737746169e-308, "43312163203792605", -307},
  {2.2383841005633134114549916e-171, "22383841005633134", -170},
  {9.0885617718889838062121752e+216, "9088561771888984", 217},
  {3.4044990045031467062010505e-138, "3404499004503147", -137},
  {1.7762167570997054604923842e-06, "17762167570997055", -5},
  {5.0953936745975685405619276e+114, "5095393674597569", 115},
  {1.1144872253502780361895976e+200, "1114487225350278", 201},
  {1.3160757832540086085481004e-220, "13160757832540086", -219},
  {3.6328869056155571003754248e-160, "3632886905615557", -159},
  {9.1303893631506753703946915e-144, "9130389363150675", -143},
  {6.5051752480207989607408276e-222, "6505175248020799", -221},
  {9.4545701350236674808955952e-189, "9454570135023667", -188},
  {3.3122786536477019326745291e+212, "3312278653647702", 213},
  {7.0929742430732393265049689e+195, "7092974243073239", 196},
  {6.2730081656417823696551220e-292, "6273008165641782", -291},
  {1.4236556586343999164936682e-255, "14236556586344", -254},
  {1.1672079516775619538730995e-230, "1167207951677562", -229},
  {5.4920753426039029252581175e+76, "5492075342603903", 77},
  {3.0278665814510146943038071e+300, "30278665814510147", 301},
  {5.7367882336310267409899238e-229, "5736788233631027", -228},
  {2.9293831764500736645289233e-13, "29293831764500737", -12},
  {1.8271572751860972697968834e-230, "18271572751860973", -229},
  {6.1810928952388638905463474e+264, "6181092895238864", 265},
  {1.2383596294928836869075894e+04, "12383596294928837", 5},
  {8.1436024111737247896098290e-39, "8143602411173725", -38},
  {2.4868168962594358457012276e+48, "2486816896259436", 49},
  {8.9599714784936740015587088e+249, "8959971478493674", 250},
  {6.3955859838834410169283728e+00, "6395585983883441", 1},
  {6.7616467014081442266277098e-288, "6761646701408144", -287},
  {2.2092053962649386094972419e-218, "22092053962649386", -217},
  {6.8650675618572999109998597e+78, "68650675618573", 79},
  {8.5577344268235820301998399e-120, "8557734426823582", -119},
  {3.1427175944831597802693594e-237, "314271759448316", -236},
  {8.3388416817140469588069189e-21, "8338841681714047", -20},
  {6.0441850486584905355132666e+28, "60441850486584905", 29},
  {2.1186021180601850152015686e+08, "2118602118060185", 9},
  {1.5817357463878051213408487e+232, "1581735746387805", 233},
  {5.0546077159598574411226029e-58, "50546077159598574", -57},
  {2.1319284030913770272835362e-246, "2131928403091377", -245},
  {1.7549255900110781586552143e-263, "1754925590011078", -262},
  {4.0659902076414986685237150e-300, "4065990207641499", -299},
  {2.2217325414365118125103351e-97, "22217325414365118", -96},
  {4.6477676778912795279405998e+78, "46477676778912795", 79},
  {1.0841116333427083138895835e-218, "10841116333427083", -217},
  {5.3641533701806453806673202e+37, "5364153370180645", 38},
  {8.8004881794937921469036254e-269, "8800488179493792", -268},
  {1.7072941264682425221348335e+261, "17072941264682425", 262},
  {6.5149621806524842951090855e+235, "6514962180652484", 236},
  {6.8100303151318538854500222e-14, "6810030315131854", -13},
  {3.8037701932281268796447424e+132, "3803770193228127", 133},
  {5.9642157060313693093759468e-57, "5964215706031369", -56},
  {1.1053808876642509318343268e+176, "1105380887664251", 177},
  {9.5827643708409204976107852e-118, "958276437084092", -117},
  {1.4576809845247146291649024e-304, "14576809845247146", -303},
  {3.1889204249303927682889895e+125, "31889204249303928", 126},
  {9.7202814158618410270224806e-156, "972028141586184", -155},
  {9.8201869245757396765895826e+48, "982018692457574", 49},
  {2.8138160870598014454598844e-139, "28138160870598014", -138},
  {2.5457281173430473193190691e-218, "25457281173430473", -217},
  {1.8825733093352403904360976e-257, "18825733093352404", -256},
  {2.0815661074403713997071305e+260, "20815661074403714", 261},
  {3.0284076866038071357975539e+82, "3028407686603807", 83},
  {6.6435942964106353199582415e+46, "6643594296410635", 47},
  {9.3902432483880521016183391e+138, "9390243248388052", 139},
  {2.7063683726058297265259197e+88, "27063683726058297", 89},
  {4.1089824950411562098527395e-280, "4108982495041156", -279},
  {7.4765980017397992165359802e-101, "7476598001739799", -100},
  {4.3894459007794442009214436e+206, "4389445900779444", 207},
  {1.2012264898115471485986193e+173, "12012264898115471", 174},
  {9.1433597369457073404720926e-290, "9143359736945707", -289},
  {4.8977714115449008880513315e-279, "4897771411544901", -278},
  {3.5870924172637388394643329e-111, "3587092417263739", -110},
  {6.7547316576752599914364952e+40, "675473165767526", 41},
  {9.9033290287792797005823559e+98, "990332902877928", 99},
  {1.6969034731803777415267283e+121, "16969034731803777", 122},
  {2.1846636708060951034913447e+205, "2184663670806095", 206},
  {6.4961138959777283448037232e-117, "6496113895977728", -116},
  {7.7131512134230603971034969e+106, "771315121342306", 107},
  {2.0806859193316019251248868e+50, "2080685919331602", 51},
  {2.0989927802960367975422140e-88, "20989927802960368", -87},
  {2.7394758642092822250120104e-266, "27394758642092822", -265},
  {1.4409923898392761534722527e-257, "14409923898392762", -256},
  {5.9459483796391281336711387e-100, "5945948379639128", -99},
  {2.4964436789873834267968150e+115, "24964436789873834", 116},
  {1.2388278429298535744529873e+295, "12388278429298536", 296},
  {4.0223414435330181622581717e+59, "4022341443533018", 60},
  {6.8949636700588395293719919e+168, "68949636700588395", 169},
  {5.4575114583381488198665510e+56, "5457511458338149", 57},
  {1.1791288972908510102705217e+171, "1179128897290851", 172},
  {1.2711353625527981100378640e+266, "12711353625527981", 267},
  {4.6847753941351801486694830e-53, "468477539413518", -52},
  {3.3522414335659075326744680e-188, "33522414335659075", -187},
  {4.1832246368965565785844935e-97, "41832246368965566", -96},
  {1.3081830493934184447188993e+240, "13081830493934184", 241},
  {3.2888297439515990638128779e-288, "3288829743951599", -287},
  {7.8535144160609625235720478e+52, "7853514416060963", 53},
  {3.0457623836290019366084867e-245, "3045762383629002", -244},
  {1.9009455960962170519062307e-119, "1900945596096217", -118},
  {2.4979124973265889265945486e-186, "2497912497326589", -185},
  {5.4266755883785475119341402e+186, "54266755883785475", 187},
  {3.4205530175446705960342724e-63, "34205530175446706", -62},
  {2.2810502796227163181378660e+265, "22810502796227163", 266},
  {1.6842001668063688159696761e+184, "16842001668063688", 185},
  {6.7803344639238268750835377e+156, "6780334463923827", 157},
  {5.0410144707740774980731797e+200, "50410144707740775", 201},
  {1.1076254045878519721117501e+120, "1107625404587852", 121},
  {9.7331750539168411255945737e-201, "9733175053916841", -200},
  {5.6987949883687163991038048e+163, "56987949883687164", 164},
  {1.1146830827927048045742065e+135, "11146830827927048", 136},
  {2.5816191343882055224628316e-167, "25816191343882055", -166},
  {2.5929268957397242189086922e+258, "25929268957397242", 259},
  {4.8773327249615559335606159e+116, "4877332724961556", 117},
  {4.6877047235048238203922742e+130, "4687704723504824", 131},
  {9.4293489612095596172445232e-130, "942934896120956", -129},
  {2.1805346325726874943814186e-13, "21805346325726875", -12},
  {9.4792448242316787603310881e+114, "9479244824231679", 115},
  {1.3678871672908849612926142e+166, "1367887167290885", 167},
  {2.6933924282464980225865728e-166, "2693392428246498", -165},
  {2.4156242519161118275821565e+44, "2415624251916112", 45},
  {1.9226970947905086549193271e-280, "19226970947905087", -279},
  {2.4000479303767453776212479e+149, "24000479303767454", 150},
  {9.6404121763376611006650307e+275, "9640412176337661", 276},
  {3.0588130156123802556344063e+247, "305881301561238", 248},
  {1.5030509273932899002826509e+209, "15030509273932899", 210},
  {1.1827162211056273551025081e+260, "11827162211056274", 261},
  {7.6406273485892942240957571e+268, "7640627348589294", 269},
  {2.1031747365304270936784736e+285, "2103174736530427", 286},
  {1.0775213904194208013005849e-186, "10775213904194208", -185},
  {5.5727964342479782682204322e+112, "5572796434247978", 113},
  {9.9619102706094681280070927e+115, "9961910270609468", 116},
  {2.1802032254356547010151643e-223, "21802032254356547", -222},
  {8.2294258756392658445257217e-238, "8229425875639266", -237},
  {4.9651727393523653351170416e+129, "49651727393523653", 130},
  {1.3359078196770948534677594e-100, "13359078196770949", -99},
  {7.7000163669998215057526368e+87, "77000163669998215", 88},
  {1.2397792713543320612061592e-148, "1239779271354332", -147},
  {3.5305196930884816372142100e+199, "35305196930884816", 200},
  {9.3389139622881803825130302e-76, "933891396228818", -75},
  {1.4777459342276784825800580e-34, "14777459342276785", -33},
  {6.2564650011220476656778420e-227, "6256465001122048", -226},
  {6.8214784748480402855656663e+52, "682147847484804", 53},
  {7.3669602159703277221125048e+67, "7366960215970328", 68},
  {5.7859220457198386716331336e-48, "5785922045719839", -47},
  {9.0715474718360957344183798e+287, "9071547471836096", 288},
  {6.4230262815090206524802748e-168, "6423026281509021", -167},
  {2.8401959068921792095352430e+02, "2840195906892179", 3},
  {2.4471250687092739174204155e+248, "2447125068709274", 249},
  {7.7076332679651561825574094e-45, "7707633267965156", -44},
  {2.9249315329769193811790164e-118, "29249315329769194", -117},
  {6.5222019764630171020123631e-152, "6522201976463017", -151},
  {9.3696184936947610051141882e+208, "9369618493694761", 209},
  {1.3369214441218902029399241e+260, "13369214441218902", 261},
  {2.8533684831410480311240706e-50, "2853368483141048", -49},
  {7.7301444157334550811922353e-81, "7730144415733455", -80},
  {1.7062534989464689512643589e+280, "1706253498946469", 281},
  {7.6204606297637112868754621e+263, "7620460629763711", 264},
  {1.4292546193771539018396895e+177, "1429254619377154", 178},
  {1.0340127330066873988717172e+128, "10340127330066874", 129},
  {4.5286292777644385960054084e-194, "45286292777644386", -193},
  {7.3348325668096277978060655e+307, "7334832566809628", 308},
  {4.2548661047699616641523807e-77, "4254866104769962", -76},
  {2.6333004488885618412734537e+191, "26333004488885618", 192},
  {7.3626256435669448560615516e-243, "7362625643566945", -242},
  {1.6034166470200956321523205e-136, "16034166470200956", -135},
  {7.0425151434948331059073047e+199, "7042515143494833", 200},
  {1.0203815847968795555258586e-62, "10203815847968796", -61},
  {1.8741280277214673288082533e-100, "18741280277214673", -99},
  {2.1962162981561765909961460e-174, "21962162981561766", -173},
  {1.0227287510908564976062621e-271, "10227287510908565", -270},
  {3.9421620623810119222913415e-13, "3942162062381012", -12},
  {1.4813780530319399877995148e-235, "148137805303194", -234},
  {1.7620706997648643904406308e-221, "17620706997648644", -220},
  {4.1098299952241815976812692e+147, "41098299952241816", 148},
  {4.8173521234070953921718375e+304, "4817352123407095", 305},
  {4.3083328617711157264965244e-82, "4308332861771116", -81},
  {1.5468823479241346146333361e+274, "15468823479241346", 275},
  {2.0409122503894887893951349e-200, "20409122503894888", -199},
  {5.6295170819705793962815913e-143, "5629517081970579", -142},
  {2.8961561016790328116685169e+192, "2896156101679033", 193},
  {3.0594406373248022742309631e-236, "30594406373248023", -235},
  {4.3031837992526559576064000e+24, "4303183799252656", 25},
  {1.2256888794268212240183175e-53, "12256888794268212", -52},
  {1.1189491569761265036909180e+205, "11189491569761265", 206},
  {1.3901804765784576654962228e+86, "13901804765784577", 87},
  {5.9559478224603280702342039e+298, "5955947822460328", 299},
  {8.8673132793033106266011371e-71, "886731327930331", -70},
  {2.9221102143875990554010452e+29, "2922110214387599", 30},
  {3.1106060390339358853451055e-14, "3110606039033936", -13},
  {7.6895966846945536035385466e+262, "7689596684694554", 263},
  {4.0589086214107056918514416e-271, "40589086214107057", -270},
  {6.7918508446639543068264651e-57, "6791850844663954", -56},
  {1.7089353562154321647649329e-76, "17089353562154322", -75},
  {5.8385672722215292678647051e-254, "5838567272221529", -253},
  {5.0213427009236722136791587e+186, "5021342700923672", 187},
  {3.2537109792965046386655954e+299, "32537109792965046", 300},
  {4.2179163464202997830799918e+293, "42179163464203", 294},
  {2.1238512553877791079646267e+71, "2123851255387779", 72},
  {1.5113992817254530877284783e-37, "1511399281725453", -36},
  {3.4655234751291006293350679e-134, "34655234751291006", -133},
  {8.0439744582979082381211730e-64, "8043974458297908", -63},
  {8.9043108688165877760000000e+18, "8904310868816588", 19},
  {1.8845549534116553590527776e-303, "18845549534116554", -302},
  {1.6685874341105328433389335e-271, "16685874341105328", -270},
  {2.9934191823289073280419644e-187, "29934191823289073", -186},
  {1.9028882728836883995234335e+62, "19028882728836884", 63},
  {5.4794308735364384983024984e-251, "54794308735364385", -250},
  {1.8124579621611672882742249e+113, "18124579621611673", 114},
  {5.2439783488498183367252621e-220, "5243978348849818", -219},
  {6.6357569497822078978839742e-278, "6635756949782208", -277},
  {7.5862849779809508791923987e-199, "7586284977980951", -198},
  {4.2157333727560417080366573e+137, "4215733372756042", 138},
  {2.6994491718146300523335520e-190, "269944917181463", -189},
  {4.5147375573271787514741136e+199, "4514737557327179", 200},
  {4.9093137536516740537777794e+145, "4909313753651674", 146},
  {2.3193122473456965236159483e-146, "23193122473456965", -145},
  {1.3282557039147603629700594e+307, "13282557039147604", 308},
  {2.2992400927061012253275302e+139, "22992400927061012", 140},
  {1.4292983417741909708472149e-22, "1429298341774191", -21},
  {3.6494070784127017739346106e+141, "3649407078412702", 142},
  {7.9289578523324657477923405e+70, "7928957852332466", 71},
  {1.4945592150198249423731775e+116, "1494559215019825", 117},
  {7.8914456995779675035976116e-84, "78914456995779675", -83},
  {2.6557053269323934986150451e+36, "26557053269323935", 37},
  {5.1519247601734169348769987e+126, "5151924760173417", 127},
  {2.6691281342438639499441699e-107, "2669128134243864", -106},
  {8.1823442623983061142513386e-180, "8182344262398306", -179},
  {1.7001855619973840291865873e+85, "1700185561997384", 86},
  {2.9554935509524175947719665e-295, "29554935509524176", -294},
  {5.0962508497683627273499946e+229, "5096250849768363", 230},
  {4.3475768468783347368102233e-129, "4347576846878335", -128},
  {5.6648208037697767596303695e+189, "5664820803769777", 190},
  {1.6008394764305085710608666e+263, "16008394764305086", 264},
  {7.4894642802470351439225738e-02, "7489464280247035", -1},
  {1.7172462519053663076352000e+22, "17172462519053663", 23},
  {1.2559720875317443872926093e-04, "12559720875317444", -3},
  {2.2213487111069260456502417e+259, "2221348711106926", 260},
  {3.0586316950980351607788441e-46, "3058631695098035", -45},
  {4.1927799859552036227387978e+234, "41927799859552036", 235},
  {7.3209942157906736441882480e-297, "7320994215790674", -296},
  {2.6086431481187858431080266e+155, "2608643148118786", 156},
  {1.7228636417164590929201884e-03, "1722863641716459", -2},
  {1.8582986289205141721744184e+217, "18582986289205142", 218},
  {1.8993870289981735304778386e+178, "18993870289981735", 179},
  {1.8372300339788679982521006e-265, "1837230033978868", -264},
  {3.4823761509576012826221327e+281, "3482376150957601", 282},
  {3.0787413634551739141128809e-102, "3078741363455174", -101},
  {2.2867336523187600072973785e+100, "228673365231876", 101},
  {2.8444334798579114348895466e+166, "28444334798579114", 167},
  {5.4735474024565507789468360e+208, "5473547402456551", 209},
  {2.0102324872531862162390890e-213, "20102324872531862", -212},
  {1.4849625801716965488480272e+236, "14849625801716965", 237},
  {1.8057567886133376969646298e-137, "18057567886133377", -136},
  {1.4283377489468517728171404e-16, "14283377489468518", -15},
  {3.4053218146862915463997989e-261, "34053218146862915", -260},
  {1.3670897612675972935161829e+99, "13670897612675973", 100},
  {2.0006240712042278467227172e-44, "20006240712042278", -43},
  {3.3154142234332062468044565e-273, "33154142234332062", -272},
  {1.2476066945807951229403809e-04, "1247606694580795", -3},
  {3.4776735287445989820208955e-264, "3477673528744599", -263},
  {1.2832453491349341165689212e+157, "12832453491349341", 158},
  {1.9054800386545580596526437e-253, "1905480038654558", -252},
  {9.8493953213988847802186188e+58, "9849395321398885", 59},
  {6.4256194260526002461802564e+123, "64256194260526", 124},
  {5.4072941296663991668601952e+302, "5407294129666399", 303},
  {9.9765669574144837151336295e+263, "9976566957414484", 264},
  {1.4585962981273200440275303e-61, "145859629812732", -60},
  {4.6681687027198897573926113e-12, "466816870271989", -11},
  {1.6984103595820352012367314e-69, "16984103595820352", -68},
  {2.1476194879641922442066319e-203, "21476194879641922", -202},
  {1.6768342567389355613632399e-100, "16768342567389356", -99},
  {5.6231773095601729264204343e-66, "5623177309560173", -65},
  {1.0219828757962368699239444e-271, "10219828757962369", -270},
  {4.7705703771732657882832380e-98, "4770570377173266", -97},
  {1.4346219936702926126521970e-286, "14346219936702926", -285},
  {5.0249635835806165900601089e-201, "50249635835806166", -200},
  {8.2300407741668066687821908e-292, "8230040774166807", -291},
  {1.1350036797529466168887958e+242, "11350036797529466", 243},
  {6.2782085969690714534704643e-48, "6278208596969071", -47},
  {1.9041374700384010662628803e-193, "1904137470038401", -192},
  {2.8370021183885364815630381e-111, "28370021183885365", -110},
  {1.4809763761464675112909236e-195, "14809763761464675", -194},
  {4.4205364598622672216410302e-186, "4420536459862267", -185},
  {5.3070823681988294465183989e+258, "53070823681988294", 259},
  {9.5240399626148689736691389e-151, "9524039962614869", -150},
  {2.5708351748538565543045877e+162, "25708351748538566", 163},
  {2.3191948930444261823050410e+188, "23191948930444262", 189},
  {4.0054741461707546766244605e-116, "40054741461707547", -115},
  {8.5987422212975421361499711e-271, "8598742221297542", -270},
  {4.8968812850774305288132297e-71, "48968812850774305", -70},
  {7.9257023905834442986387201e+282, "7925702390583444", 283},
  {1.2538807301325377872099222e-133, "12538807301325378", -132},
  {1.4053341496755963190899033e-221, "14053341496755963", -220},
  {1.2469246177175925436339229e-151, "12469246177175925", -150},
  {1.9054987132907203501110755e+79, "19054987132907204", 80},
  {2.4553814211095619577311586e+299, "2455381421109562", 300},
  {3.0372367204845045087322546e-241, "30372367204845045", -240},
  {1.4872741272189133162547779e+32, "14872741272189133", 33},
  {1.5053569101785369285842328e+96, "1505356910178537", 97},
  {2.8978096444835084887922653e+253, "28978096444835085", 254},
  {3.0056784312041434232512221e+64, "30056784312041434", 65},
  {1.9711092196543699840864807e+151, "197110921965437", 152},
  {3.9359066504773410004033110e+78, "3935906650477341", 79},
  {2.7972889331017394652782441e-130, "27972889331017395", -129},
  {3.6742130298569589843750000e+12, "3674213029856959", 13},
  {2.4919537849569746435835830e-197, "24919537849569746", -196},
  {5.5454840785343229719872582e-03, "5545484078534323", -2},
  {2.9619484110343462331082768e-117, "29619484110343462", -116},
  {2.4492128201708495252135645e-73, "24492128201708495", -72},
  {4.8288958060601953972785215e+103, "4828895806060195", 104},
  {2.3626909203717605174029436e+303, "23626909203717605", 304},
  {9.3676089691030155726967553e-29, "9367608969103016", -28},
  {9.0476817017022277282684386e-104, "9047681701702228", -103},
  {1.0775347656849882303389187e-238, "10775347656849882", -237},
  {5.7252041844187236368212088e-211, "5725204184418724", -210},
  {3.6071526324683333572615423e+243, "3607152632468333", 244},
  {3.6029885206444223550090154e+46, "36029885206444224", 47},
  {4.8098356236185175145789373e-24, "48098356236185175", -23},
  {1.0291856051601937255859375e+12, "10291856051601937", 13},
  {7.6535456981576938398465130e+28, "7653545698157694", 29},
  {1.0425987219019251909327575e-97, "10425987219019252", -96},
  {2.5430787051869159272823835e-20, "2543078705186916", -19},
  {2.0905222756098575366071706e+35, "20905222756098575", 36},
  {1.4296019647257947880824070e-199, "14296019647257948", -198},
  {1.5041695222266327865492933e-18, "15041695222266328", -17},
  {2.4128271190418135593152772e-29, "24128271190418136", -28},
  {4.3806358732399974523226934e-100, "43806358732399975", -99},
  {9.0829983928013004272851449e-254, "90829983928013", -253},
  {1.9639920021632018529910784e+26, "1963992002163202", 27},
  {2.6048096207626914911731319e+28, "26048096207626915", 29},
  {1.2432574650933514201141003e-282, "12432574650933514", -281},
  {3.5441532187117794733007047e-290, "35441532187117795", -289},
  {5.4138969647764721066067324e-139, "5413896964776472", -138},
  {2.0869826824019094154274448e+144, "20869826824019094", 145},
  {2.1127090184791279620562013e-262, "2112709018479128", -261},
  {1.5985358095715949028622585e+276, "1598535809571595", 277},
  {3.6180104772737423300461292e-35, "36180104772737423", -34},
  {5.7710590215227046891817048e+52, "5771059021522705", 53},
  {8.7381987540585210976382751e+159, "8738198754058521", 160},
  {3.2136139911238462365567103e+115, "32136139911238462", 116},
  {1.5324083083445354174923000e+157, "15324083083445354", 158},
  {9.6212095551504838048857019e-12, "9621209555150484", -11},
  {1.7020171035600268494589508e+95, "17020171035600268", 96},
  {1.8410798021528882485343412e-123, "18410798021528882", -122},
  {1.5885486470389865201957892e-226, "15885486470389865", -225},
  {3.4437066043523618089585379e-157, "3443706604352362", -156},
  {4.3850533926161675762932104e+220, "43850533926161676", 221},
  {2.0099139385454883289748460e+129, "20099139385454883", 130},
  {2.5401158861333115427741435e+250, "25401158861333115", 251},
  {5.9496871720770531330245428e-167, "5949687172077053", -166},
  {9.0198835545156714346615359e-115, "9019883554515671", -114},
  {6.4747906174310429013348975e+127, "6474790617431043", 128},
  {1.0160620078233762610143041e-128, "10160620078233763", -127},
  {1.4523527208089415712240009e-175, "14523527208089416", -174},
  {4.0228292627208306514778201e+123, "40228292627208307", 124},
  {1.1569889875314594844543164e-212, "11569889875314595", -211},
  {6.0017578018913692321523424e+305, "6001757801891369", 306},
  {1.5240947005169836621118985e-250, "15240947005169837", -249},
  {8.3571252313141688155418767e+159, "8357125231314169", 160},
  {6.2997210700673304803643660e+280, "62997210700673305", 281},
  {2.9118887072877770283915946e+218, "2911888707287777", 219},
  {3.6425146317975044936901352e-139, "36425146317975045", -138},
  {1.9544640183223570050011721e+45, "1954464018322357", 46},
  {9.1819627878699487759177849e-41, "9181962787869949", -40},
  {3.0481268085953793200692969e-25, "30481268085953793", -24},
  {1.3455702485820137140716554e-291, "13455702485820137", -290},
  {9.8790435368832060430190909e+304, "9879043536883206", 305},
  {1.6630643101387063451750578e+295, "16630643101387063", 296},
  {2.1681304337859860043794078e+100, "2168130433785986", 101},
  {2.4694752918181334480620136e-245, "24694752918181334", -244},
  {1.3405398381312826514638500e-71, "13405398381312827", -70},
  {5.8523453206391064723376262e-126, "58523453206391065", -125},
  {2.3575381523945310449043582e-142, "2357538152394531", -141},
  {9.3786825490251761916584293e+230, "9378682549025176", 231},
  {1.7988701497712312266230583e+06, "17988701497712312", 7},
  {5.2702999423746040190031469e+29, "5270299942374604", 30},
  {4.3267091351007707240624841e+103, "4326709135100771", 104},
  {3.4147375421294982173532990e-295, "34147375421294982", -294},
  {4.7335733314873899110925844e-64, "473357333148739", -63},
  {1.9526849784053265810939644e+230, "19526849784053266", 231},
  {4.5098961786868373279530252e-307, "4509896178686837", -306},
  {8.9322930288004870403588349e-276, "8932293028800487", -275},
  {9.7451849124019082142829099e+201, "9745184912401908", 202},
  {2.2612755844359328378594604e-36, "2261275584435933", -35},
  {3.9677636489871346441825640e+168, "3967763648987135", 169},
  {2.2127436551106527805261734e-238, "22127436551106528", -237},
  {6.1980389334818841483674821e+152, "6198038933481884", 153},
  {2.8085016738602399530667190e-141, "280850167386024", -140},
  {1.6163935937619947294265211e-21, "16163935937619947", -20},
  {2.3425056031184361830711807e+215, "2342505603118436", 216},
  {2.2380678638278155843909525e-34, "22380678638278156", -33},
  {9.4174676372351097214977794e-240, "941746763723511", -239},
  {2.6278139108014823282259302e+75, "26278139108014823", 76},
  {3.4258052649532368537098863e+283, "3425805264953237", 284},
  {1.9457085391960138223656841e-47, "19457085391960138", -46},
  {5.2051041752192653078472050e+230, "5205104175219265", 231},
  {4.6252574003564591404113208e-178, "4625257400356459", -177},
  {2.0004143748236743347787815e+127, "20004143748236743", 128},
  {1.8322170535176321329553177e+218, "1832217053517632", 219},
  {2.2897980717665786900330716e+159, "22897980717665787", 160},
  {6.2647265152507369782837718e+109, "6264726515250737", 110},
  {3.0391056851566560123034464e+201, "3039105685156656", 202},
  {9.8293536191740483269850094e+204, "9829353619174048", 205},
  {2.3331110145960365082341399e+214, "23331110145960365", 215},
  {1.7051537410209515827041732e+52, "17051537410209516", 53},
  {1.5182788325387514114379883e+10, "15182788325387514", 11},
  {3.2123442227716791450302756e-104, "3212344222771679", -103},
  {1.5173055332243698618356419e+260, "15173055332243699", 261},
  {8.2075576389624364415910049e-172, "8207557638962436", -171},
  {4.6911653472149598379061210e-162, "469116534721496", -161},
  {8.1541660485605003583216164e+218, "81541660485605", 219},
  {2.9849609350817142949046511e-242, "29849609350817143", -241},
  {6.7287570707862781899776811e-298, "6728757070786278", -297},
  {2.8540998844449947648000000e+19, "28540998844449948", 20},
  {1.0828585976088649099865694e-187, "10828585976088649", -186},
  {8.7154114548997628097199615e+302, "8715411454899763", 303},
  {5.4356861679270622938481481e+226, "5435686167927062", 227},
  {6.3317482755907882110882249e+199, "6331748275590788", 200},
  {3.3427689304318015112632329e-20, "33427689304318015", -19},
  {7.5204027873102660112478495e+202, "7520402787310266", 203},
  {2.6334696867620445803464685e-233, "26334696867620446", -232},
  {8.3547892372915036250225772e-297, "8354789237291504", -296},
  {1.0131137634554037394063092e+285, "10131137634554037", 286},
  {2.2674049060529382624764842e-268, "22674049060529383", -267},
  {1.0628625814214840186507725e+154, "1062862581421484", 155},
  {7.3314361409104295351384695e+78, "73314361409104295", 79},
  {5.3679542188033083004876517e-138, "53679542188033083", -137},
  {1.3043191658276595332058087e+291, "13043191658276595", 292},
  {1.2195862996888812561061567e-160, "12195862996888813", -159},
  {2.9749740823928081258543119e-71, "2974974082392808", -70},
  {3.0230441482462861898401689e+185, "3023044148246286", 186},
  {1.4956316144632038179038502e-195, "14956316144632038", -194},
  {1.6548433589434421226021219e-245, "16548433589434421", -244},
  {1.1701153224088140159031147e+127, "1170115322408814", 128},
  {2.3381053397613071877412741e-51, "23381053397613072", -50},
  {8.2520267091594781982747643e-33, "8252026709159478", -32},
  {7.1084981064834665526546780e-48, "7108498106483467", -47},
  {1.9851983193048627358944318e-146, "19851983193048627", -145},
  {7.2866246487836958733444754e+36, "7286624648783696", 37},
  {2.6870300926412549323889053e-284, "2687030092641255", -283},
  {2.4595289248150754639907492e+94, "24595289248150755", 95},
  {6.8409369960509196754614831e-105, "684093699605092", -104},
  {7.6272878219382844779459017e-238, "7627287821938284", -237},
  {1.8544142024746468579880845e-234, "18544142024746469", -233},
  {1.8861212919320212711457371e+143, "18861212919320213", 144},
  {8.1293706966586987803328351e+96, "8129370696658699", 97},
  {3.3052683519622014800727740e+206, "33052683519622015", 207},
  {9.9874854054714029216187527e+76, "9987485405471403", 77},
  {1.0063954356688030934802194e+158, "10063954356688031", 159},
  {4.1200308695820786725992847e-242, "4120030869582079", -241},
  {2.5583762960395429952579029e+121, "2558376296039543", 122},
  {4.0632403529089790681603776e-226, "4063240352908979", -225},
  {8.4594708105767055200534253e+56, "8459470810576706", 57},
  {9.4943774065847408470647421e+234, "9494377406584741", 235},
  {1.5999412379203280428801506e-71, "1599941237920328", -70},
  {1.0490590815980149876915510e+238, "1049059081598015", 239},
  {2.1965704936463864320611411e+266, "21965704936463864", 267},
  {4.3420780290715118691538936e-191, "4342078029071512", -190},
  {4.5848961706327856923595684e+203, "4584896170632786", 204},
  {1.1690250133847669760838235e+116, "1169025013384767", 117},
  {2.0048460972378454464277415e+249, "20048460972378454", 250},
  {7.2755497021320771856284691e+124, "7275549702132077", 125},
  {9.1919052926041015953994601e-88, "9191905292604102", -87},
  {2.0297118881814145301507528e-263, "20297118881814145", -262},
  {2.1803571171872347811485151e-198, "21803571171872348", -197},
  {1.6249059636336348864675881e+74, "1624905963633635", 75},
  {7.3273866415105257282884179e+84, "7327386641510526", 85},
  {1.4920940295192447542895136e-32, "14920940295192448", -31},
  {2.8890338279658001013765865e-23, "28890338279658", -22},
  {7.8280014451459395631242674e-156, "782800144514594", -155},
  {8.7528036887672892267331253e-34, "875280368876729", -33},
  {7.4066917242786400423203326e+162, "740669172427864", 163},
  {2.0145090423414411458071915e-174, "20145090423414411", -173},
  {2.2400314037586543112312301e+131, "22400314037586543", 132},
  {2.7119233541202748644445699e-105, "2711923354120275", -104},
  {4.6613413236479433231580684e-291, "4661341323647943", -290},
  {9.3944107094676310130884107e-264, "9394410709467631", -263},
  {1.8833284882282697292599074e+273, "18833284882282697", 274},
  {4.6109489409415182247052792e-165, "4610948940941518", -164},
  {3.5107665318276563804594326e+112, "35107665318276564", 113},
  {1.2435935352846347347595334e+255, "12435935352846347", 256},
  {3.7780922623000981329793412e+106, "3778092262300098", 107},
  {4.9251347388931814739759357e-34, "49251347388931815", -33},
  {3.8638822327998205301566114e+70, "38638822327998205", 71},
  {6.3661677746747989681264102e-03, "6366167774674799", -2},
  {1.1148700056880425631368841e+128, "11148700056880426", 129},
  {1.0739364040060834359644408e-145, "10739364040060834", -144},
  {1.5118784734286242239023589e+223, "15118784734286242", 224},
  {3.2596955386445204068371546e-97, "32596955386445204", -96},
  {3.9167580998628188642193427e+110, "3916758099862819", 111},
  {2.9256583618982298837139155e-244, "292565836189823", -243},
  {2.4550618031303206836891837e-181, "24550618031303207", -180},
  {3.1646815504904524261420473e-285, "31646815504904524", -284},
  {1.7631706788021675713572161e+80, "17631706788021676", 81},
  {5.9012694835596037385759647e-208, "5901269483559604", -207},
  {2.0235077277956141761598148e-47, "20235077277956142", -46},
  {1.0732371360179226278798799e-273, "10732371360179226", -272},
  {6.0764577129388738705464417e+202, "6076457712938874", 203},
  {3.7672357210436179732419759e-107, "3767235721043618", -106},
  {1.3286505768024006136082658e+62, "13286505768024006", 63},
  {7.6286283848938791724235194e-224, "7628628384893879", -223},
  {1.3814386215715741733856941e-291, "13814386215715742", -290},
  {4.7635097660146333823408219e+304, "4763509766014633", 305},
  {4.5350579686567678986158613e+241, "4535057968656768", 242},
  {2.7288330969746525061024391e+114, "27288330969746525", 115},
  {4.5247476723268985393994013e-298, "45247476723268985", -297},
  {2.2673908708351505547430291e-50, "22673908708351506", -49},
  {5.2873337369496755130370418e-298, "52873337369496755", -297},
  {2.9026720304152620009729831e+39, "2902672030415262", 40},
  {4.3739356166685207102717712e+159, "4373935616668521", 160},
  {3.9168410911847424851581562e+65, "39168410911847425", 66},
  {1.1304067807463768400149928e+279, "11304067807463768", 280},
  {1.9254608419287681027922373e+206, "1925460841928768", 207},
  {5.0259308901154264310240287e+190, "50259308901154264", 191},
  {2.0649148289500662944241071e-60, "20649148289500663", -59},
  {5.2959886835408705451335810e-116, "529598868354087", -115},
  {3.5587188699888071738227934e-118, "3558718869988807", -117},
  {7.5207537324007575371623774e+127, "7520753732400758", 128},
  {1.4448716135284475096571422e-180, "14448716135284475", -179},
  {1.1917797442364768808299107e-181, "11917797442364769", -180},
  {3.6931453867762033983341301e-242, "36931453867762034", -241},
  {2.6070264387908994813596004e+219, "26070264387908995", 220},
  {9.2880765828934373163410986e-88, "9288076582893437", -87},
  {1.2651292827181181413313075e-160, "12651292827181181", -159},
  {9.1333648290956595914159436e+143, "913336482909566", 144},
  {1.1183065075849782473176542e+222, "11183065075849782", 223},
  {2.1268862961229453097060041e+302, "21268862961229453", 303},
  {5.3591457524306470265508659e-92, "5359145752430647", -91},
  {6.7279596403822649719923284e-220, "6727959640382265", -219},
  {3.8349958418451683497995529e+213, "38349958418451683", 214},
  {1.8127857650782276266198005e-158, "18127857650782276", -157},
  {2.2881579494361464043613777e+140, "22881579494361464", 141},
  {4.8368960738261889134253094e+121, "4836896073826189", 122},
  {2.9613921721689281248138453e-266, "2961392172168928", -265},
  {7.4072830276003314288096525e-214, "74072830276003314", -213},
  {1.5908552529383974662171699e-153, "15908552529383975", -152},
  {6.2692734000258647135002493e+89, "6269273400025865", 90},
  {7.6569399747495806063949744e-280, "7656939974749581", -279},
  {7.4647991652898954641783173e+79, "7464799165289895", 80},
  {2.4710283882822272826655688e+121, "24710283882822273", 122},
  {4.2226874174660863276414259e-238, "4222687417466086", -237},
  {6.2666674830006605275300023e+190, "62666674830006605", 191},
  {2.8750257434636118893544370e-08, "2875025743463612", -7},
  {2.8653196162144845762974148e+80, "28653196162144846", 81},
  {1.6636005222515679875126781e+220, "1663600522251568", 221},
  {2.8342436945452802479728073e+141, "28342436945452802", 142},
  {1.0141660593626097440077255e+113, "10141660593626097", 114},
  {1.0270992686101854409849919e-38, "10270992686101854", -37},
  {1.5895413533802118354934170e+27, "15895413533802118", 28},
  {1.3660537324108735143293439e-286, "13660537324108735", -285},
  {2.4982438935573473914222772e-27, "24982438935573474", -26},
  {1.0741910231369839681566434e+302, "1074191023136984", 303},
  {4.0147353047823927658946611e-137, "4014735304782393", -136},
  {2.0755342495107968268930725e+39, "20755342495107968", 40},
  {1.8730183782352850284476760e-147, "1873018378235285", -146},
  {1.0283659153689565998933579e+31, "10283659153689566", 32},
  {2.2787675911099257693153382e+202, "22787675911099258", 203},
  {4.9319001299079089770203287e+303, "4931900129907909", 304},
  {1.2586520126922817806169878e+258, "12586520126922818", 259},
  {1.3774986613555055839474549e-113, "13774986613555056", -112},
  {4.0692458249983520457929897e+278, "4069245824998352", 279},
  {2.2051521469783778698569595e-273, "2205152146978378", -272},
  {1.3837749302623928633509067e-96, "13837749302623929", -95},
  {4.7536694340217266623718345e+215, "4753669434021727", 216},
  {1.4435492358571291531442621e-299, "14435492358571292", -298},
  {1.1619655485170899295849217e-41, "116196554851709", -40},
  {3.0030967737173004683102461e+55, "30030967737173005", 56},
  {3.6508592023342022298147488e-238, "3650859202334202", -237},
  {2.1189242816482099606864877e+110, "211892428164821", 111},
  {9.1331930792321487700352311e+117, "9133193079232149", 118},
  {7.7225540207274464606813768e-28, "77225540207274465", -27},
  {8.3916482237442015405942030e+64, "8391648223744202", 65},
  {5.6124118777011877399849539e+106, "5612411877701188", 107},
  {7.9997670407041053692945297e-162, "7999767040704105", -161},
  {3.6863137586067039987027161e+69, "3686313758606704", 70},
  {3.1290742824205361895104578e+186, "3129074282420536", 187},
  {3.6374826589383457736136649e-121, "36374826589383458", -120},
  {3.1109343263351397754832904e-242, "31109343263351398", -241},
  {8.8935856918714213641795663e-30, "8893585691871421", -29},
  {2.3484559525290919827690805e+133, "2348455952529092", 134},
  {1.5145914117680776051655630e+234, "15145914117680776", 235},
  {2.3111055604674642410085181e+33, "23111055604674642", 34},
  {1.1429208317453387802488300e-71, "11429208317453388", -70},
  {4.4104122694266318221766943e+228, "4410412269426632", 229},
  {3.1492269951137286986624704e+91, "31492269951137287", 92},
  {2.1948820896744012062179638e-197, "21948820896744012", -196},
  {8.1381732207252904412566298e-172, "813817322072529", -171},
  {4.9894846742163824489709518e+219, "49894846742163824", 220},
  {6.1047391922640349558691388e-130, "6104739192264035", -129},
  {1.3903397146127866376227902e+58, "13903397146127866", 59},
  {1.8024394041973577705846900e+125, "18024394041973578", 126},
  {1.4598436427398734498321024e+147, "14598436427398734", 148},
  {2.2486875261858659602429440e-275, "2248687526185866", -274},
  {1.5712525053978522690291490e-101, "15712525053978523", -100},
  {2.1233830531503336688806349e+85, "21233830531503337", 86},
  {1.8174331344429784354740886e-222, "18174331344429784", -221},
  {7.9016904254821895392524311e+02, "790169042548219", 3},
  {1.5731999274287709120557028e+286, "1573199927428771", 287},
  {2.7340903954509387281049515e-72, "27340903954509387", -71},
  {3.5920743653793422173414969e+166, "3592074365379342", 167},
  {3.8514647825106093700049078e-122, "38514647825106094", -121},
  {5.1935601083551664905834278e-226, "51935601083551665", -225},
  {5.0945461127511557929959637e+181, "5094546112751156", 182},
  {4.0748873579934675554637456e-235, "40748873579934676", -234},
  {6.6322649434084634124232460e+286, "6632264943408463", 287},
  {9.5212459226598839613177393e-08, "9521245922659884", -7},
  {6.4926946703988325248247153e-249, "6492694670398833", -248},
  {1.1941071669828390149649634e+41, "1194107166982839", 42},
  {4.5989637876450045542343390e+224, "45989637876450046", 225},
  {3.2799011433530880901968285e-39, "3279901143353088", -38},
  {4.6952178082034554834090739e-174, "46952178082034555", -173},
  {6.9301463379093815660904448e+26, "6930146337909382", 27},
  {2.0607045107792085912925619e-84, "20607045107792086", -83},
  {2.6631688460196009820655916e+116, "2663168846019601", 117},
  {1.3493411880628716434704504e-81, "13493411880628716", -80},
  {2.1658649619745014308494929e-237, "21658649619745014", -236},
  {1.5210151523163530566486573e+255, "1521015152316353", 256},
  {1.6802545200314565151084910e+45, "16802545200314565", 46},
  {2.5054882910086662884030622e-253, "25054882910086663", -252},
  {4.2212152369858108301203293e-215, "4221215236985811", -214},
  {6.1804256800184513839214428e+197, "6180425680018451", 198},
  {8.6514373479836718956760792e-132, "8651437347983672", -131},
  {5.3226069949208035094412293e-230, "53226069949208035", -229},
  {4.0254587252580438299983295e+71, "4025458725258044", 72},
  {8.7552970889610381007132910e-25, "8755297088961038", -24},
  {5.1801743188656717332392915e-268, "5180174318865672", -267},
  {1.4109269657310468438109536e+159, "14109269657310468", 160},
  {2.5343362554873547901204603e-78, "2534336255487355", -77},
  {3.9322657880396435967143790e-161, "39322657880396436", -160},
  {5.9737180289924159811084248e-290, "5973718028992416", -289},
  {1.9260024516833422434839338e+211, "19260024516833422", 212},
  {3.9272034683268689500724021e+32, "3927203468326869", 33},
  {1.2325771601967814876048628e-73, "12325771601967815", -72},
  {9.6555481546631702126666404e-262, "965554815466317", -261},
  {2.0356779841450432453411706e+87, "20356779841450432", 88},
  {8.3972802702808586679133442e+304, "8397280270280859", 305},
  {1.9719457149710336058121917e-295, "19719457149710336", -294},
  {9.4876569684691752758203407e+277, "9487656968469175", 278},
  {5.9596047186809692168399984e-07, "5959604718680969", -6},
  {3.6135575118751507019287856e-156, "36135575118751507", -155},
  {2.7471279930453935221705184e+224, "27471279930453935", 225},
  {3.2953028352446349476103348e-139, "3295302835244635", -138},
  {5.1469006655266239926899528e+54, "5146900665526624", 55},
  {2.6876389487750300906953541e-217, "268763894877503", -216},
  {6.7753937732216173757078294e-123, "6775393773221617", -122},
  {1.0295927624066110627833022e+157, "1029592762406611", 158},
  {7.8203167149039598032983598e-209, "782031671490396", -208},
  {1.2291943149062135372356481e+105, "12291943149062135", 106},
  {3.2438691539447521433864307e-258, "3243869153944752", -257},
  {3.2431695754391929210986190e-177, "3243169575439193", -176},
  {5.4451520750719652601294676e+144, "5445152075071965", 145},
  {4.5935755679398840516503800e-54, "4593575567939884", -53},
  {4.6896489832520208711986174e-82, "4689648983252021", -81},
  {8.0614607512648367825348448e-243, "8061460751264837", -242},
  {3.6861882067436116631299235e+32, "3686188206743612", 33},
  {5.3544795961756007363074872e-03, "5354479596175601", -2},
  {7.4133759263781797189646555e-196, "741337592637818", -195},
  {1.0748071548209574400000000e+17, "10748071548209574", 18},
  {3.7442195704840554426176182e+127, "37442195704840554", 128},
  {8.8678777102500910784696390e+203, "8867877710250091", 204},
  {1.2655468447889531354802016e+302, "12655468447889531", 303},
  {7.9816044128989423686920256e-269, "7981604412898942", -268},
  {1.7048463211409254913775158e+00, "17048463211409255", 1},
  {7.0537420304083809292373290e+186, "7053742030408381", 187},
  {2.4771621592121628349776784e-259, "24771621592121628", -258},
  {3.3491728637021362766440840e-126, "3349172863702136", -125},
  {2.3449258269755577215412870e+239, "23449258269755577", 240},
  {7.2112322021118761288319420e+99, "7211232202111876", 100},
  {9.7156645375464654242492896e-06, "9715664537546465", -5},
  {3.1929248102729885029426818e-236, "31929248102729885", -235},
  {6.1992123953026283006132699e+280, "6199212395302628", 281},
  {5.1184555550593201810373594e-40, "511845555505932", -39},
  {2.8024773798993782456892783e-170, "28024773798993782", -169},
  {1.1103049102102871248803602e-297, "11103049102102871", -296},
  {3.9577485138240558494111176e-64, "3957748513824056", -63},
  {7.4655172164171459448075597e-292, "7465517216417146", -291},
  {2.1457944684881798949676081e+168, "214579446848818", 169},
  {3.6165637138563624960000000e+19, "36165637138563625", 20},
  {1.5297771312704695453214328e-203, "15297771312704695", -202},
  {2.1471628971377488603709243e+148, "2147162897137749", 149},
  {5.0518583054351178851110073e-236, "5051858305435118", -235},
  {3.2177320377932042469968393e+80, "3217732037793204", 81},
  {4.9507858120841432962876926e-284, "4950785812084143", -283},
  {4.8252295410149409624051593e-176, "4825229541014941", -175},
  {2.9534468973165277205910054e+194, "2953446897316528", 195},
  {1.9675881549073854007237937e-183, "19675881549073854", -182},
  {1.7075547663077415466308594e+10, "17075547663077415", 11},
  {2.0214755348165694747038157e-308, "20214755348165695", -307},
  {1.1181094245271676222283713e-182, "11181094245271676", -181},
  {9.9731087170297048879127519e-242, "9973108717029705", -241},
  {3.1608137125478608674485833e+254, "3160813712547861", 255},
  {5.1391230010006429924356006e-27, "5139123001000643", -26},
  {3.2641870735527667986814571e-221, "3264187073552767", -220},
  {6.5545435982092344858665276e-96, "65545435982092345", -95},
  {1.7243073389895941105743428e-14, "1724307338989594", -13},
  {1.0883622785416494354559871e+95, "10883622785416494", 96},
  {3.0591177938065154125540344e-142, "30591177938065154", -141},
  {2.5342811039615049468457602e+193, "2534281103961505", 194},
  {5.3423305125896644162499035e+69, "53423305125896644", 70},
  {4.9012368383335389677383558e-113, "4901236838333539", -112},
  {5.9459031336889570370798142e-86, "5945903133688957", -85},
  {3.9457109765307310121282280e-04, "3945710976530731", -3},
  {5.1224310103039080810546875e+11, "5122431010303908", 12},
  {9.3913348062117033234318957e+268, "9391334806211703", 269},
  {2.0485111116165137115258864e+180, "20485111116165137", 181},
  {1.5260185815088379503191373e+97, "1526018581508838", 98},
  {1.5004272058979856615729357e-263, "15004272058979857", -262},
  {1.9546219116658586402178342e-175, "19546219116658586", -174},
  {3.5718009049219226333368632e+215, "3571800904921923", 216},
  {1.4169117986788234499829109e+228, "14169117986788234", 229},
  {5.1523743215317685340740693e+88, "51523743215317685", 89},
  {1.8682508662982649360197004e+260, "1868250866298265", 261},
  {2.7639493102060031979024618e-207, "27639493102060032", -206},
  {1.4615018954103834272066654e+214, "14615018954103834", 215},
  {1.0683151561763751903432593e-97, "10683151561763752", -96},
  {3.1157359741869217151275993e+185, "3115735974186922", 186},
  {2.4189082135300679953485395e+124, "2418908213530068", 125},
  {3.7160380207374583245724775e-81, "37160380207374583", -80},
  {2.3901747252896773736260031e+197, "23901747252896774", 198},
  {3.3146694606491680508591564e-97, "3314669460649168", -96},
  {1.3119993682395519950173284e+35, "1311999368239552", 36},
  {2.2929351729494658242788448e-269, "22929351729494658", -268},
  {2.4227914941496096294874764e+115, "24227914941496096", 116},
  {1.0842091277602848116754094e-127, "10842091277602848", -126},
  {3.2594045953950571110229142e+239, "3259404595395057", 240},
  {1.8244262021517289981955056e-133, "1824426202151729", -132},
  {2.5875328333786113686762003e+30, "25875328333786114", 31},
  {6.0579856226723661246274039e+86, "6057985622672366", 87},
  {8.3372473445640693885951373e-252, "8337247344564069", -251},
  {2.0843389299330750617519482e-202, "2084338929933075", -201},
  {8.3724807444564444373861714e-112, "8372480744456444", -111},
  {3.9654651554871019119934719e-35, "3965465155487102", -34},
  {9.2441578924923640358238748e+226, "9244157892492364", 227},
  {2.2861325496913750120202240e+24, "2286132549691375", 25},
  {1.7191545255051452924747187e-84, "17191545255051453", -83},
  {1.6795945042432221201495893e+68, "16795945042432221", 69},
  {1.2494522378713074793238707e+284, "12494522378713075", 285},
  {1.4441271356465888926644133e-263, "14441271356465889", -262},
  {2.5726408347094867980924814e-211, "2572640834709487", -210},
  {1.5378421188405262316238338e+298, "15378421188405262", 299},
  {1.2228927885928818020507558e-155, "12228927885928818", -154},
  {3.3555029812170141861861469e+261, "3355502981217014", 262},
  {1.2442756499006437114325128e+285, "12442756499006437", 286},
  {3.5851621117881989239406503e+302, "3585162111788199", 303},
  {8.4541474732787611621730079e+151, "8454147473278761", 152},
  {2.0688935584579747819555172e-78, "20688935584579748", -77},
  {2.2309656950954950400000000e+17, "2230965695095495", 18},
  {4.7044324365136153995990753e+07, "47044324365136154", 8},
  {3.2357173133698152364346187e+181, "32357173133698152", 182},
  {3.2451991017750961074343638e-286, "3245199101775096", -285},
  {2.8621995054544086989983928e-263, "28621995054544087", -262},
  {9.5485564853710615307875021e-105, "9548556485371062", -104},
  {9.2056927595522571746539311e+86, "9205692759552257", 87},
  {2.0893998614704341647360000e+21, "20893998614704342", 22},
  {1.4027506206812015021348853e+183, "14027506206812015", 184},
  {3.7299128591054746546534198e+139, "37299128591054747", 140},
  {8.8964761074366768370135212e+124, "8896476107436677", 125},
  {1.2715162806791976365726000e+97, "12715162806791976", 98},
  {3.7278241544369547309541899e+167, "37278241544369547", 168},
  {5.7902427993821883703220052e-52, "5790242799382188", -51},
  {3.5075589798004770377611797e+147, "3507558979800477", 148},
  {6.9866149865647449779771585e+211, "6986614986564745", 212},
  {1.5090784966005834251528029e+165, "15090784966005834", 166},
  {2.1297431964833707311974804e-17, "21297431964833707", -16},
  {1.5001471955126275120323465e+142, "15001471955126275", 143},
  {1.3181702691203555797934740e-56, "13181702691203556", -55},
  {6.7706712321950359802321010e+127, "6770671232195036", 128},
  {9.2315735812444071627674708e-36, "9231573581244407", -35},
  {1.7121221501546241653197565e+172, "1712122150154624", 173},
  {7.2188982130353827292502655e+84, "7218898213035383", 85},
  {2.1235814362309380795039299e+273, "2123581436230938", 274},
  {8.8405164082501356919266233e-99, "8840516408250136", -98},
  {2.6603041901716893201298273e-257, "26603041901716893", -256},
  {2.2819766540327011032775603e+291, "2281976654032701", 292},
  {3.3957135678385203574295061e-137, "33957135678385204", -136},
  {3.8235998345471652791941710e+159, "3823599834547165", 160},
  {2.5773602865762879495946935e-297, "2577360286576288", -296},
  {3.8462945605768436545066622e-191, "38462945605768437", -190},
  {4.8561266383756705002037849e-26, "48561266383756705", -25},
  {1.7979770516322824671468581e+123, "17979770516322825", 124},
  {4.3613705638347901389183626e+186, "436137056383479", 187},
  {3.8393606820633320588261112e-244, "3839360682063332", -243},
  {6.2564136709426702601749664e-232, "625641367094267", -231},
  {1.7124053123292854780904787e-40, "17124053123292855", -39},
  {2.7588189376665597824381502e-17, "27588189376665598", -16},
  {9.7328624091439644554333790e-121, "9732862409143964", -120},
  {4.4454916558796894110261309e+214, "4445491655879689", 215},
  {3.1768308827294805333453457e-183, "31768308827294805", -182},
  {9.9779986165955852087519894e+251, "9977998616595585", 252},
  {5.6568682385421692660558520e+293, "5656868238542169", 294},
  {1.0763116024460546875000000e+14, "10763116024460547", 15},
  {3.6083598297410418998540184e-37, "3608359829741042", -36},
  {1.0331853006253999985115630e+186, "10331853006254", 187},
  {1.1882235788322004742569993e-147, "11882235788322005", -146},
  {2.5904523742126055890379242e-220, "25904523742126056", -219},
  {4.2572491449496075803863116e-126, "42572491449496076", -125},
  {2.6037773912954182268726095e-09, "26037773912954182", -8},
  {1.9553565952581718933592726e+167, "1955356595258172", 168},
  {2.1682241592689603227098640e-10, "21682241592689603", -9},
  {4.2088263777916500810274492e+195, "420882637779165", 196},
  {5.6195224390855116204971779e-16, "5619522439085512", -15},
  {6.2996633864941373274219253e-77, "6299663386494137", -76},
  {6.5660545343630784064604575e-153, "6566054534363078", -152},
  {3.4137078483744057362449604e-241, "3413707848374406", -240},
  {9.1903782989872640832166712e+156, "9190378298987264", 157},
  {5.9787086272207264085389631e-160, "5978708627220726", -159},
  {5.2700751982091924668396745e-78, "5270075198209192", -77},
  {1.3748341287005211994727325e-36, "13748341287005212", -35},
  {1.0856651302851601049671093e-274, "10856651302851601", -273},
  {4.2553785429952432889015238e-125, "42553785429952433", -124},
  {2.2861817966391247415979665e-217, "22861817966391247", -216},
  {2.9552277004304721044454633e+239, "2955227700430472", 240},
  {5.3773744455384831592782698e+171, "5377374445538483", 172},
  {7.4212964271713003969869527e-90, "74212964271713", -89},
  {8.7561829744037309166938597e-167, "8756182974403731", -166},
  {4.8238842575654869086854361e-42, "4823884257565487", -41},
  {2.2511791291491668647511593e+305, "2251179129149167", 306},
  {3.2148022212527503655864073e-214, "32148022212527504", -213},
  {7.4496498911065268767237901e+226, "7449649891106527", 227},
  {4.0537916850920545307078750e-101, "40537916850920545", -100},
  {9.5525082652942311384612377e-196, "9552508265294231", -195},
  {1.1634252828833668746050858e+93, "11634252828833669", 94},
  {1.4773142970916811571200000e+20, "1477314297091681", 21},
  {2.3098707375742329171701018e+62, "2309870737574233", 63},
  {2.1059144473698594269878105e+97, "21059144473698594", 98},
  {3.8938384432565551181023929e-280, "3893838443256555", -279},
  {1.3555794056385566475237361e+142, "13555794056385566", 143},
  {2.4028026608475302793161854e+127, "24028026608475303", 128},
  {3.3584684446482505049648195e-92, "33584684446482505", -91},
  {2.5916256116062200570396497e-294, "259162561160622", -293},
  {5.1784555287452389209707831e+129, "5178455528745239", 130},
  {1.0904280610936878700026230e-83, "10904280610936879", -82},
  {1.0615359985568550547675724e+121, "1061535998556855", 122},
  {7.5677433753149303836382621e-151, "756774337531493", -150},
  {6.3854054080143562500000000e+13, "6385405408014356", 14},
  {5.5394320796097630295186336e-56, "5539432079609763", -55},
  {9.7795471796304234066492918e+114, "9779547179630423", 115},
  {1.6230929166551940950502841e+77, "1623092916655194", 78},
  {5.3338933195863889373538756e-123, "5333893319586389", -122},
  {1.0261686878666438118476492e+240, "10261686878666438", 241},
  {2.5535848481210667638004271e+153, "25535848481210668", 154},
  {9.4032269248923339598054597e+290, "9403226924892334", 291},
  {2.6237043503555499000916527e-86, "262370435035555", -85},
  {8.6737985946573460572237164e+176, "8673798594657346", 177},
  {2.5259800153598958632893384e-69, "2525980015359896", -68},
  {6.9665163078689133332143099e-69, "6966516307868913", -68},
  {1.2190723898448537861232064e-109, "12190723898448538", -108},
  {1.1256078721901243322009100e+269, "11256078721901243", 270},
  {2.4753828583659938748918753e+42, "2475382858365994", 43},
  {3.2341764285468756084807076e+131, "32341764285468756", 132},
  {1.7965623854803405428096042e-52, "17965623854803405", -51},
  {7.1825730314324397658243323e+191, "718257303143244", 192},
  {2.9663387710635200170718014e-80, "296633877106352", -79},
  {5.9822488388894771510437341e-221, "5982248838889477", -220},
  {2.7896336228958407842054474e-80, "27896336228958408", -79},
  {3.1656504112609197916697692e-35, "316565041126092", -34},
  {2.2016447795012947713822860e+269, "22016447795012948", 270},
  {5.7116051218791232378248078e+216, "5711605121879123", 217},
  {4.1940849471072881977243401e-76, "4194084947107288", -75},
  {1.8600050798460418399055906e-93, "18600050798460418", -92},
  {8.9299397124005563157098412e-179, "8929939712400556", -178},
  {2.1020348865403880619233846e+198, "2102034886540388", 199},
  {5.4486224515686197145093094e-33, "544862245156862", -32},
  {6.0315606649710515734399788e-162, "6031560664971052", -161},
  {4.0439853307226067753961343e+268, "4043985330722607", 269},
  {1.2168965515514184971834766e+02, "12168965515514185", 3},
  {2.1993614989392428236802458e-171, "2199361498939243", -170},
  {6.0053185340001419898836351e+155, "6005318534000142", 156},
  {9.7039340358065545438640270e-138, "9703934035806555", -137},
  {5.9799059364712071574599102e-300, "5979905936471207", -299},
  {1.1890427687981293077235942e-27, "11890427687981293", -26},
  {4.3874349204389214666070836e+176, "43874349204389215", 177},
  {3.2534001095825490878247932e-189, "3253400109582549", -188},
  {1.0595685310346405803846328e-69, "10595685310346406", -68},
  {1.1020858067257746408932405e+235, "11020858067257746", 236},
  {1.2615140948872322775194027e-250, "12615140948872323", -249},
  {1.5744834193368172521200465e-172, "15744834193368173", -171},
  {3.5870912420160483365277262e-81, "35870912420160483", -80},
  {9.7425186727062792653994606e-146, "974251867270628", -145},
  {4.5699701430564072929984893e+111, "45699701430564073", 112},
  {9.5721824398878960329312057e+234, "9572182439887896", 235},
  {2.4520509315843157477150903e+56, "24520509315843157", 57},
  {8.1291246604676802349397645e+213, "812912466046768", 214},
  {4.0802505723673804330516534e+281, "40802505723673804", 282},
  {2.1336457002177185131409773e+241, "21336457002177185", 242},
  {9.5882309524738530510931703e-108, "9588230952473853", -107},
  {3.7035973879658442523433309e-05, "3703597387965844", -4},
  {1.7146375871888865220015084e+74, "17146375871888865", 75},
  {7.7517945968417602611855166e-03, "775179459684176", -2},
  {2.5544089082743414831279008e-100, "25544089082743415", -99},
  {5.3364826788310252595692873e+05, "5336482678831025", 6},
  {7.7444014793115269557186338e+304, "7744401479311527", 305},
  {1.6065688870749618401720543e-150, "16065688870749618", -149},
  {3.3012266403294627668032080e-269, "3301226640329463", -268},
  {1.1292020307207695910972787e+31, "11292020307207696", 32},
  {7.2615315372852158504260567e-278, "7261531537285216", -277},
  {4.3702875108478975031802964e-298, "43702875108478975", -297},
  {2.0744635728882990566358374e+66, "2074463572888299", 67},
  {2.2097103280100883929733018e-100, "22097103280100884", -99},
  {1.1017874971086710443864646e+286, "1101787497108671", 287},
  {2.4328050302078321829154653e+161, "2432805030207832", 162},
  {2.8453991316556608000000000e+17, "28453991316556608", 18},
  {3.5488353847001255000000000e+15, "35488353847001255", 16},
  {9.1471035690184693760000000e+18, "9147103569018469", 19},
  {1.4088578326291074745905902e+92, "14088578326291075", 93},
  {8.2653126488251331984522449e-40, "8265312648825133", -39},
  {3.5960096406803965269480611e+177, "35960096406803965", 178},
  {1.8724548065831501848199674e-168, "18724548065831502", -167},
  {9.7416682595331953918985927e-189, "9741668259533195", -188},
  {1.9091492630496061337908031e+03, "19091492630496061", 4},
  {4.2570168551033678265196401e-48, "4257016855103368", -47},
  {5.2420347176205724636850828e+150, "52420347176205725", 151},
  {1.1381374413685026736189298e-152, "11381374413685027", -151},
  {2.9904777113248322330982642e+71, "2990477711324832", 72},
  {1.2228129670632321503447973e+252, "12228129670632322", 253},
  {2.2921007626644039997509067e-268, "2292100762664404", -267},
  {5.6553971435667903262569685e+121, "565539714356679", 122},
  {7.2307072865194884372943706e-172, "7230707286519488", -171},
  {1.2781556840821588302630310e-291, "12781556840821588", -290},
  {4.4222182563534018784306096e-151, "4422218256353402", -150},
  {9.2165688436002222488340815e-300, "9216568843600222", -299},
  {2.8157840344370217053618779e+96, "28157840344370217", 97},
  {4.9357145649792617361441739e+83, "4935714564979262", 84},
  {1.5501290326910982412259493e+213, "15501290326910982", 214},
  {1.7531213136138260122950133e-49, "1753121313613826", -48},
  {5.5732560056084926589849962e+261, "5573256005608493", 262},
  {2.9451495318118590797379011e+27, "2945149531811859", 28},
  {2.4061612543526330368000000e+19, "2406161254352633", 20},
  {4.1989609561563040900458779e+63, "4198960956156304", 64},
  {1.2883376349081316402333918e+158, "12883376349081316", 159},
  {7.4319418296518232926959478e+42, "7431941829651823", 43},
  {4.8162171322769227423517762e+90, "4816217132276923", 91},
  {2.1183251778927032039142403e+63, "21183251778927032", 64},
  {3.6499111804060060588348887e+259, "3649911180406006", 260},
  {8.8205686960334627904925699e-150, "8820568696033463", -149},
  {7.5619778247228489269952565e-277, "7561977824722849", -276},
  {3.2408611398832685634083197e-239, "32408611398832686", -238},
  {4.8788682983126639869584805e+172, "4878868298312664", 173},
  {9.7877035095039945506593474e+175, "9787703509503995", 176},
  {1.1471306700285242193077176e-278, "11471306700285242", -277},
  {9.6638504548815438567727945e+30, "9663850454881544", 31},
  {6.6877352662596161411047949e-221, "6687735266259616", -220},
  {5.1758354841731519814701010e-12, "5175835484173152", -11},
  {2.5514235733143115220340575e+189, "25514235733143115", 190},
  {9.5764627799808992809453077e-247, "9576462779980899", -246},
  {3.9514307668360774412684526e+279, "39514307668360774", 280},
  {9.0915769233541513850034983e+71, "9091576923354151", 72},
  {1.6536030193969405954165268e+249, "16536030193969406", 250},
  {1.5000711615225633395559049e+35, "15000711615225633", 36},
  {3.9034306063772148382466617e-87, "3903430606377215", -86},
  {8.5934306861867418847941243e-242, "8593430686186742", -241},
  {4.1909813572549583070383008e+140, "4190981357254958", 141},
  {8.4028414057300446677731297e+38, "8402841405730045", 39},
  {3.3186685274891616999250294e+165, "33186685274891617", 166},
  {1.5388986379418042686560021e-159, "15388986379418043", -158},
  {3.8792857601257430211018288e+100, "3879285760125743", 101},
  {2.2143130408854787743661192e+154, "22143130408854788", 155},
  {3.4243112654122220989316960e+254, "3424311265412222", 255},
  {5.2807535543102709369356011e+224, "5280753554310271", 225},
  {2.5601904770067626015663621e+146, "25601904770067626", 147},
  {9.4447624817782807757194382e-57, "9444762481778281", -56},
  {1.3692692280789841038918034e+172, "13692692280789841", 173},
  {6.0255478049044586938722119e+165, "6025547804904459", 166},
  {5.9411577565427074201966482e-211, "5941157756542707", -210},
  {1.3106369999411866226024156e-77, "13106369999411866", -76},
  {1.0123240333444932751517676e+36, "10123240333444933", 37},
  {3.2328269808865725281066261e+03, "32328269808865725", 4},
  {3.0314179492600804868603759e+91, "30314179492600805", 92},
  {7.9190046613404131051301987e-235, "7919004661340413", -234},
  {4.3286653887715470402934858e-169, "4328665388771547", -168},
  {3.2060850157916554504296775e+68, "32060850157916555", 69},
  {3.3911464974471529176151357e-140, "3391146497447153", -139},
  {5.6726259982516432236925179e-41, "5672625998251643", -40},
  {9.0437343954549080495793798e+127, "9043734395454908", 128},
  {1.0085829537531244781689566e+01, "10085829537531245", 2},
  {6.4156272838460506575582151e+131, "6415627283846051", 132},
  {1.4949801691414800149177389e+228, "149498016914148", 229},
  {1.9904179807199831588014341e+211, "19904179807199832", 212},
  {1.8194388563385923827400704e+25, "18194388563385924", 26},
  {7.5324440441875458245239521e+120, "7532444044187546", 121},
  {6.7318818251317335502345617e-68, "67318818251317336", -67},
  {1.0630209615704258126444673e+242, "10630209615704258", 243},
  {3.0411803529882467446678275e-214, "30411803529882467", -213},
  {3.5769225847854131525567562e+110, "3576922584785413", 111},
  {1.0246521735707206210012002e+256, "10246521735707206", 257},
  {1.8404153870833842793335735e+234, "18404153870833843", 235},
  {4.4081415676235290063328833e-147, "4408141567623529", -146},
  {2.2048136051697356405285392e-155, "22048136051697356", -154},
  {3.6875396751641007936611088e-245, "3687539675164101", -244},
  {3.0227715460251913342928969e+149, "30227715460251913", 150},
  {4.4289073579625395228485425e-277, "44289073579625395", -276},
  {1.1965632203793945640585156e-296, "11965632203793946", -295},
  {5.0813111266469921994903767e+116, "5081311126646992", 117},
  {1.4665313012596486718145431e-61, "14665313012596487", -60},
  {2.0888213197824450289479507e-182, "2088821319782445", -181},
  {7.8906319790870263671875000e+12, "7890631979087026", 13},
  {5.6087200356124458563111373e+202, "5608720035612446", 203},
  {2.5899922994692188754547372e+151, "2589992299469219", 152},
  {8.0060322619391729283973958e-101, "8006032261939173", -100},
  {2.0925420530597922848699894e+102, "20925420530597923", 103},
  {4.1783498722909085350682558e-113, "41783498722909085", -112},
  {1.9142325398363576249577715e+70, "19142325398363576", 71},
  {2.0661734842453052034653220e+61, "20661734842453052", 62},
  {2.1254107587918871401418762e+141, "2125410758791887", 142},
  {1.2826205806253826011716579e-169, "12826205806253826", -168},
  {1.6656479089057799961620205e+159, "166564790890578", 160},
  {5.2200198881826842150521026e-21, "5220019888182684", -20},
  {7.0995157490312470651534266e+70, "7099515749031247", 71},
  {2.4981153729856257215262782e-206, "24981153729856257", -205},
  {1.0985574668314713373658994e+115, "10985574668314713", 116},
  {1.9249133163219965705378470e-226, "19249133163219966", -225},
  {7.1482482206003092964434577e-52, "714824822060031", -51},
  {1.8575588871578142538498390e-134, "18575588871578143", -133},
  {7.8795560800650894493297191e+72, "787955608006509", 73},
  {2.3177735744261592643777360e+99, "23177735744261593", 100},
  {5.0141256399112720613236474e-280, "5014125639911272", -279},
  {2.0452635189843640489867199e-305, "2045263518984364", -304},
  {1.3570414061055016246534402e-283, "13570414061055016", -282},
  {7.7849289911921723234306309e-230, "7784928991192172", -229},
  {2.0469640470775509329164134e+307, "2046964047077551", 308},
  {1.2601017069991307690028606e+299, "12601017069991308", 300},
  {2.6231464083920782497543307e-119, "2623146408392078", -118},
  {2.2831996781174791786413359e-38, "22831996781174792", -37},
  {7.9074105989905798363063795e+120, "790741059899058", 121},
  {4.3601759162605171245319846e+106, "4360175916260517", 107},
  {1.7579878630909948567197375e+259, "1757987863090995", 260},
  {1.3735624054567765648754484e+88, "13735624054567766", 89},
  {1.4647321447486082264393694e-264, "14647321447486082", -263},
  {2.4049055486024368095002904e-88, "24049055486024368", -87},
  {9.2170004435396503255227039e-60, "921700044353965", -59},
  {1.3380505789178077444071544e-290, "13380505789178077", -289},
  {8.8401456805454417189557928e+306, "8840145680545442", 307},
  {8.3925558352711303899214898e-112, "839255583527113", -111},
  {6.9573881921600762961670398e-51, "6957388192160076", -50},
  {1.0333506826653736620815203e-48, "10333506826653737", -47},
  {1.1844993014245871042018400e+154, "11844993014245871", 155},
  {1.8126951076361910680870697e+189, "1812695107636191", 190},
  {4.0824900124123169750281886e+236, "4082490012412317", 237},
  {1.3614962591401983425227430e+59, "13614962591401983", 60},
  {4.9488697766886510011474041e+133, "4948869776688651", 134},
  {2.1232788345882614291124886e-11, "21232788345882614", -10},
  {3.7490880244191713220149528e-123, "3749088024419171", -122},
  {1.0312438792357878372448000e-216, "10312438792357878", -215},
  {1.0987633565763350942732060e+141, "10987633565763351", 142},
  {4.6072754237891341870070843e+260, "4607275423789134", 261},
  {3.8743094330335607584211617e+231, "3874309433033561", 232},
  {1.5917481614214761625398022e+249, "15917481614214762", 250},
  {1.5717448080579647029825153e+255, "15717448080579647", 256},
  {2.7089006570710831869594418e-238, "27089006570710832", -237},
  {1.6554926036207597392271098e+219, "16554926036207597", 220},
  {7.1625897976481432240725976e+133, "7162589797648143", 134},
  {3.6944755873196561351993487e+297, "3694475587319656", 298},
  {2.1468944495350734803119681e+130, "21468944495350735", 131},
  {2.3315387505175577756899674e+186, "2331538750517558", 187},
  {3.5410708036740967645070249e-139, "3541070803674097", -138},
  {1.9133704749627329980638960e+304, "1913370474962733", 305},
  {5.6125585363113049682721853e-109, "5612558536311305", -108},
  {1.8827782769988910519944709e-202, "1882778276998891", -201},
  {4.2194566626860215737044025e-109, "42194566626860216", -108},
  {9.8428090678626279628971793e+96, "9842809067862628", 97},
  {1.2891422325017973529129177e+159, "12891422325017974", 160},
  {6.5733093339636233042850282e+224, "6573309333963623", 225},
  {1.0799487114810627122196908e+194, "10799487114810627", 195},
  {2.2513931166118479388976140e+206, "2251393116611848", 207},
  {4.0475295489257932765147993e+36, "4047529548925793", 37},
  {5.2311045357745932008698579e-231, "5231104535774593", -230},
  {8.3239278722664184841262358e+267, "8323927872266418", 268},
  {1.1317989875978544354438782e+08, "11317989875978544", 9},
  {3.8509740363836503748462953e-220, "385097403638365", -219},
  {1.4253678209929890423292586e-14, "1425367820992989", -13},
  {2.6601484304818322048919682e-294, "26601484304818322", -293},
  {1.6448283705406823029336992e+242, "16448283705406823", 243},
  {1.5069686707371055633233406e-224, "15069686707371056", -223},
  {9.9347597368204718032204106e-64, "9934759736820472", -63},
  {6.3360557763947169081728153e+298, "6336055776394717", 299},
  {4.1445395063442803302048443e-83, "414453950634428", -82},
  {1.9828999149171520639574811e-120, "1982899914917152", -119},
  {4.4979350166525472084297237e-139, "4497935016652547", -138},
  {4.3540098326764435844252218e-80, "43540098326764436", -79},
  {5.5034564091463201861541673e-131, "550345640914632", -130},
  {2.1931640868781283667283788e+160, "21931640868781284", 161},
  {1.0608429524094529649761203e-41, "1060842952409453", -40},
  {2.0032573853752917480468750e+11, "20032573853752917", 12},
  {4.4966302905688596373371539e+266, "44966302905688596", 267},
  {1.8226434931517992296027474e+124, "18226434931517992", 125},
  {5.8319716629542819073426473e-306, "5831971662954282", -305},
  {1.8559276590630317536267263e+52, "18559276590630318", 53},
  {1.8055481467273525935817798e+135, "18055481467273526", 136},
  {4.5623597312106012667671418e+149, "4562359731210601", 150},
  {4.7247010395899704676841316e+180, "47247010395899705", 181},
  {3.5897685182101225112499771e+256, "35897685182101225", 257},
  {1.1322316080673357009887695e+10, "11322316080673357", 11},
  {1.1522626606728477378930139e-278, "11522626606728477", -277},
  {1.1031137045133078158462392e-111, "11031137045133078", -110},
  {5.5720817412492618756357266e+91, "5572081741249262", 92},
  {4.0865093210927424241672821e-283, "40865093210927424", -282},
  {3.2312657573133489960210735e+305, "3231265757313349", 306},
  {3.1981376438316312417153383e-276, "31981376438316312", -275},
  {2.3692959554712338019546052e-82, "23692959554712338", -81},
  {7.0712855467338155209180981e+49, "7071285546733816", 50},
  {2.6698174534423473333193564e+38, "26698174534423473", 39},
  {1.0628622496008339547957160e+130, "1062862249600834", 131},
  {6.7713714547730958598679132e+46, "6771371454773096", 47},
  {1.1334825947862902962045877e+188, "11334825947862903", 189},
  {6.0010455857346995569300073e+212, "60010455857346996", 213},
  {2.3309014617043360649577910e-264, "2330901461704336", -263},
  {2.5973470220925036227348202e+102, "25973470220925036", 103},
  {9.3258041407770919646739658e+81, "9325804140777092", 82},
  {1.2261800882409868380633775e+31, "12261800882409868", 32},
  {3.6945648429046654672785168e-220, "36945648429046655", -219},
  {3.1790023107366764140179934e+139, "31790023107366764", 140},
  {6.1851390686289484153568486e-46, "61851390686289484", -45},
  {2.6758716973410935727981608e-304, "26758716973410936", -303},
  {1.4944420549365188110430721e+242, "14944420549365188", 243},
  {1.1584321357576234180338977e-119, "11584321357576234", -118},
  {1.4822163521661886910109803e+119, "14822163521661887", 120},
  {7.1927579043237988062062210e+120, "7192757904323799", 121},
  {5.7850184872033712534479831e-290, "5785018487203371", -289},
  {5.4427014127055884851088713e-111, "54427014127055885", -110},
  {3.6124873522907913309025336e+42, "36124873522907913", 43},
  {1.6218136032996499850526834e+61, "162181360329965", 62},
  {5.6401601786098567866912804e-251, "5640160178609857", -250},
  {7.2556778904416647886509343e-296, "7255677890441665", -295},
  {2.9760141947267704090553837e+148, "29760141947267704", 149},
  {9.4352843333071723833996090e-158, "9435284333307172", -157},
  {2.4951046522636606895297521e-138, "24951046522636607", -137},
  {2.5513458315460408615951458e+117, "2551345831546041", 118},
  {1.4449428585231498491790521e+276, "14449428585231498", 277},
  {4.1124643624001789423362289e+106, "4112464362400179", 107},
  {1.3264422066031095829781070e+80, "13264422066031096", 81},
  {1.0595558632215997536155327e+71, "10595558632215998", 72},
  {1.4513492027596149478985019e-157, "1451349202759615", -156},
  {7.7194165430493623119724712e+46, "7719416543049362", 47},
  {3.7214869660693536722491727e+266, "37214869660693537", 267},
  {4.7801596162121780216693878e+07, "4780159616212178", 8},
  {2.2408582305493440877331690e-92, "2240858230549344", -91},
  {9.7945356004657229416895526e+37, "9794535600465723", 38},
  {9.4332932320927960466107729e-213, "9433293232092796", -212},
  {2.1896995718389170804130117e+01, "2189699571838917", 2},
  {2.9024678122806301201048885e+89, "290246781228063", 90},
  {2.2190979024894033117447589e+100, "22190979024894033", 101},
  {1.8442751919585426463379278e-269, "18442751919585426", -268},
  {5.0023368389250247513277951e-173, "5002336838925025", -172},
  {1.7877559170964645695313543e+164, "17877559170964646", 165},
  {1.8373536610857830366583153e+249, "1837353661085783", 250},
  {3.9962237452029328482281426e+51, "3996223745202933", 52},
  {2.8712447926718244593564785e+36, "28712447926718245", 37},
  {5.6333100417336791545957794e-171, "5633310041733679", -170},
  {5.2087640766989892790847170e+127, "5208764076698989", 128},
  {1.6121637933434775159838528e-251, "16121637933434775", -250},
  {5.8576035525649492543919855e+84, "5857603552564949", 85},
  {2.1170514386736771635772135e+254, "21170514386736772", 255},
  {2.4895220259756831063151509e+126, "2489522025975683", 127},
  {3.7836532903184534861119673e+45, "37836532903184535", 46},
  {2.1847584874713965996854992e+297, "21847584874713966", 298},
  {1.0043073100766860700521111e+218, "1004307310076686", 219},
  {2.6108824529578880893759481e+89, "2610882452957888", 90},
  {3.5527651730953929479675614e-122, "3552765173095393", -121},
  {9.6955586095006716991442016e-70, "9695558609500672", -69},
  {7.3632649913918740183776319e+40, "7363264991391874", 41},
  {8.8993301618527143102322092e-144, "8899330161852714", -143},
  {2.1398162833813758626293116e-295, "2139816283381376", -294},
  {1.7417006043901176169559353e+280, "17417006043901176", 281},
  {2.9662744901846270552727015e+106, "2966274490184627", 107},
  {1.0695778437538088590399278e+215, "10695778437538089", 216},
  {2.8629045608901055301090517e+159, "28629045608901055", 160},
  {4.5873935754794660877166474e-266, "4587393575479466", -265},
  {3.1128136343574967269800955e-72, "31128136343574967", -71},
  {4.9090951737115351953306766e+137, "4909095173711535", 138},
  {5.0415585446522020252381660e-67, "5041558544652202", -66},
  {1.5724486251712310886127106e-105, "1572448625171231", -104},
  {1.4319556387888968751373765e-125, "1431955638788897", -124},
  {4.3517744189078784070098035e-228, "43517744189078784", -227},
  {6.0695454550006928913691270e-102, "6069545455000693", -101},
  {1.0162610161734826106986601e+141, "10162610161734826", 142},
  {7.7264498192399595718445051e+142, "772644981923996", 143},
  {5.1765808685458119395668445e-74, "5176580868545812", -73},
  {3.5665182546894811024949573e-225, "3566518254689481", -224},
  {3.0863180591517554499806753e-77, "30863180591517554", -76},
  {7.3223127371965756571513693e+186, "7322312737196576", 187},
  {1.7885894398894673919525885e+273, "17885894398894674", 274},
  {5.4566724767520452921011819e+222, "5456672476752045", 223},
  {7.4771748121610055944451403e+252, "7477174812161006", 253},
  {1.2053460326982747864737763e+222, "12053460326982748", 223},
  {2.8004455362712827862805330e-193, "2800445536271283", -192},
  {7.8637804675955080965035016e-85, "7863780467595508", -84},
  {2.1382180826345534150568690e-24, "21382180826345534", -23},
  {1.0366415526841386350149601e+98, "10366415526841386", 99},
  {3.5893746625355891555806770e-30, "3589374662535589", -29},
  {8.0183906329079529252392886e+246, "8018390632907953", 247},
  {5.2020143774330062923426506e-230, "5202014377433006", -229},
  {2.1472165214668540123752751e-211, "2147216521466854", -210},
  {4.1140441313805372889438460e+30, "41140441313805373", 31},
  {1.5285789624452073136099405e+207, "15285789624452073", 208},
  {7.6018128148706230401048484e-276, "7601812814870623", -275},
  {1.0469921685555561818433939e+266, "10469921685555562", 267},
  {3.3847604290326765425247227e+123, "33847604290326765", 124},
  {7.2157167259692980077286256e-266, "7215716725969298", -265},
  {9.7500290905729100131416318e-237, "975002909057291", -236},
  {2.1514225089360469888126001e+305, "2151422508936047", 306},
  {3.0756346355473524146296808e+72, "30756346355473524", 73},
  {1.6499451680209499020577057e-217, "164994516802095", -216},
  {3.0150685996268485198153850e-123, "30150685996268485", -122},
  {6.4234741432380865204163475e-231, "6423474143238087", -230},
  {1.0383633741452392861790449e+210, "10383633741452393", 211},
  {1.2203036989512799452753532e-295, "122030369895128", -294},
  {4.9232496816134376433021413e-64, "49232496816134376", -63},
  {5.0587600254211539281994841e-194, "5058760025421154", -193},
  {4.0857782257601480000000000e+16, "4085778225760148", 17},
  {9.2544665110920460947524348e+210, "9254466511092046", 211},
  {9.6126573850150671531711909e+102, "9612657385015067", 103},
  {3.6462296376592688482790569e+96, "3646229637659269", 97},
  {3.6709703352108639331597289e+81, "3670970335210864", 82},
  {2.6575407253189969708036258e+286, "2657540725318997", 287},
  {1.3553526443742488026002231e-242, "13553526443742488", -241},
  {4.9742638034944228857130219e-234, "4974263803494423", -233},
  {1.3182600229523901028164210e-35, "131826002295239", -34},
  {5.1120071085922613609711761e-96, "5112007108592261", -95},
  {1.9089114257588986912360094e-178, "19089114257588987", -177},
  {1.2172130278877522804738277e+222, "12172130278877523", 223},
  {6.0778931800591045193359489e+147, "60778931800591045", 148},
  {1.3378072119223015617388239e+157, "13378072119223016", 158},
  {2.7989934357940989225927029e-169, "2798993435794099", -168},
  {5.7281988958994716716751477e+124, "5728198895899472", 125},
  {1.5573881258176567571635322e+158, "15573881258176568", 159},
  {2.9821699671648075102273211e+272, "29821699671648075", 273},
  {9.4657412097599262720000000e+18, "9465741209759926", 19},
  {1.5165117029991845060848932e-127, "15165117029991845", -126},
  {1.1180504061003831455734628e+194, "11180504061003831", 195},
  {2.3135435024579312603444352e+108, "23135435024579313", 109},
  {6.3059880526702085620006894e+149, "6305988052670209", 150},
  {4.4733945389273090675874908e-66, "4473394538927309", -65},
  {1.0631313167060143827048409e+192, "10631313167060144", 193},
  {4.7775219093524066491578797e-238, "47775219093524066", -237},
  {1.5286941883370506274143574e-260, "15286941883370506", -259},
  {3.6393816335334539249971967e-253, "3639381633533454", -252},
  {1.2317503879241128654375617e+240, "12317503879241129", 241},
  {9.4673738524684908852706052e+235, "9467373852468491", 236},
  {1.2244072100398414211828050e-177, "12244072100398414", -176},
  {7.4449916808360071367732273e-11, "7444991680836007", -10},
  {1.8982231666419808672347376e-64, "1898223166641981", -63},
  {3.9424901731574500811157039e+259, "394249017315745", 260},
  {2.6231745253029336948390979e+102, "26231745253029337", 103},
  {3.3836311897737905847623694e-243, "33836311897737906", -242},
  {2.5554787552990862003732249e+132, "25554787552990862", 133},
  {1.4708017497484990789994976e-78, "1470801749748499", -77},
  {8.0217118548133880409905684e+117, "8021711854813388", 118},
  {4.4084404337277536384539060e-111, "4408440433727754", -110},
  {9.4585700416255684486475706e-231, "9458570041625568", -230},
  {1.6048766116898575266682777e+177, "16048766116898575", 178},
  {2.3810584031125022137335401e+219, "23810584031125022", 220},
  {9.6677518181923782975672299e+211, "9667751818192378", 212},
  {1.1436082761873591516581179e+229, "11436082761873592", 230},
  {1.5730021965268287779325676e+87, "15730021965268288", 88},
  {7.7937213861388560850443151e+76, "7793721386138856", 77},
  {6.1037695131422499091313333e-32, "610376951314225", -31},
  {1.9511056085914938084128517e+215, "19511056085914938", 216},
  {1.4140325430015270674586568e+103, "1414032543001527", 104},
  {4.2984385475523620006417873e-232, "4298438547552362", -231},
  {2.4723303247024779727974104e+151, "2472330324702478", 152},
  {1.4314341949900562149402343e+74, "14314341949900562", 75},
  {1.5640998281540708414300769e-121, "15640998281540708", -120},
  {8.9218603323785422015959001e-178, "8921860332378542", -177},
  {6.7748324426420767505037059e+129, "6774832442642077", 130},
  {1.1462255617160696456698496e-187, "11462255617160696", -186},
  {1.5721523850358852617628469e+140, "15721523850358853", 141},
  {1.3017852804524830475365559e+185, "1301785280452483", 186},
  {6.0329671648276015672174799e-63, "6032967164827602", -62},
  {5.7930210289653683597137254e+113, "57930210289653684", 114},
  {4.5883170327088332824764620e+114, "45883170327088333", 115},
  {1.4098979708815937649865195e-156, "14098979708815938", -155},
  {4.1732854579611065565536584e+101, "41732854579611066", 102},
  {9.1576442194647728067418347e-253, "9157644219464773", -252},
  {2.7324043848610052715328367e+228, "27324043848610053", 229},
  {5.0762075918662299439896573e+123, "507620759186623", 124},
  {1.1313681948456665835691621e+213, "11313681948456666", 214},
  {1.1082760151416154649637106e+285, "11082760151416155", 286},
  {2.6652401009744181339388273e-34, "2665240100974418", -33},
  {3.6742298585402488472040777e-283, "3674229858540249", -282},
  {1.2365026068136805187172632e+61, "12365026068136805", 62},
  {3.1510271419297736356402728e-116, "31510271419297736", -115},
  {4.6837117374021703522416473e+259, "46837117374021704", 260},
  {2.1963072750069355902346530e-14, "21963072750069356", -13},
  {7.5979385365199722393158968e-211, "7597938536519972", -210},
  {3.6881372062065257375745081e-227, "36881372062065257", -226},
  {3.8393246061339353564411048e-300, "38393246061339354", -299},
  {8.1724004325690228523214778e+239, "8172400432569023", 240},
  {1.5704770377563701951779500e-40, "15704770377563702", -39},
  {3.5373645616605536710087581e+101, "35373645616605537", 102},
  {2.4969894711977811398865765e+167, "2496989471197781", 168},
  {3.6516232225679644370230760e-56, "36516232225679644", -55},
  {1.0578942334913868081330043e-286, "10578942334913868", -285},
  {6.0860709559535417343911338e-83, "6086070955953542", -82},
  {8.6225147768634318876405120e+139, "8622514776863432", 140},
  {1.7103168355070951152054444e+229, "1710316835507095", 230},
  {6.9598420696384660040930411e+93, "6959842069638466", 94},
  {3.2359389654896460680237924e-62, "3235938965489646", -61},
  {2.3044805941249122236358397e-118, "23044805941249122", -117},
  {4.1748687595003839046027630e+307, "4174868759500384", 308},
  {1.3415829445376463618934411e+248, "13415829445376464", 249},
  {2.6248877678856867847937388e+262, "26248877678856868", 263},
  {1.9656048021598788819478548e-26, "1965604802159879", -25},
  {5.5666643227885704796424655e+163, "55666643227885705", 164},
  {3.6880689030271879913486055e-135, "3688068903027188", -134},
  {1.4186989314018705827564604e-127, "14186989314018706", -126},
  {3.0669178637719568273854262e-83, "3066917863771957", -82},
  {1.6382983050612844766578509e+218, "16382983050612845", 219},
  {1.1519739355926239664910726e-237, "1151973935592624", -236},
  {5.2254505419531566045198270e-281, "52254505419531566", -280},
  {2.5537382907651288240101936e-151, "25537382907651288", -150},
  {1.4797288104921677042061466e+65, "14797288104921677", 66},
  {1.9557046404686023351546283e-273, "19557046404686023", -272},
  {1.4129194316197781243489837e+94, "14129194316197781", 95},
  {4.3556652794669336988575221e-138, "43556652794669337", -137},
  {3.2494799833996954027740378e-114, "32494799833996954", -113},
  {2.5053463293449113366176341e-156, "25053463293449113", -155},
  {1.7041684458549182988135502e+71, "17041684458549183", 72},
  {2.9549166880888799232000000e+19, "295491668808888", 20},
  {3.8457352157944135211839067e+178, "38457352157944135", 179},
  {5.5342172173000601316114945e+86, "553421721730006", 87},
  {2.3857288534315228490689020e-124, "2385728853431523", -123},
  {3.5616399434861999177096862e-59, "35616399434862", -58},
  {2.8904586347845147449673844e-151, "28904586347845147", -150},
  {5.2648143125591894276498758e+263, "5264814312559189", 264},
  {4.2631862327775450841267213e-234, "4263186232777545", -233},
  {1.7094975362512137064577883e-211, "17094975362512137", -210},
  {1.6148779820231529396575862e-116, "1614877982023153", -115},
  {1.3632010240514644558500996e+231, "13632010240514645", 232},
  {2.2465980489238601359951739e+161, "22465980489238601", 162},
  {2.2862420916441517928811300e-71, "22862420916441518", -70},
  {5.8665799352520802616292457e-57, "586657993525208", -56},
  {1.1182155464269672690170613e-257, "11182155464269673", -256},
  {1.1341700266432871780263920e-07, "11341700266432872", -6},
  {1.2520286183223160014873148e-53, "1252028618322316", -52},
  {1.8686985137292525485921254e+112, "18686985137292525", 113},
  {9.3089403300826849661863478e-127, "9308940330082685", -126},
  {1.3030274340062237574241265e-70, "13030274340062238", -69},
  {8.3662749317336708267081803e+284, "8366274931733671", 285},
  {4.3407125936553258286419500e-194, "4340712593655326", -193},
  {6.9935709292283602220270861e+173, "699357092922836", 174},
  {7.3677361675377714129905471e-282, "7367736167537771", -281},
  {1.9573471432885587004287584e-176, "19573471432885587", -175},
  {2.9070252978646127275308291e+92, "2907025297864613", 93},
  {2.4769180179447245872026373e-30, "24769180179447246", -29},
  {1.0087980148775814157212103e+282, "10087980148775814", 283},
  {3.7554421762330649411837114e-87, "3755442176233065", -86},
  {2.3037348686360757693940855e+49, "23037348686360758", 50},
  {3.9624700564174529008078741e+283, "3962470056417453", 284},
  {6.0343850079194067795946918e+178, "6034385007919407", 179},
  {8.6977837097657851916709093e+230, "8697783709765785", 231},
  {2.8818880870111642002807645e+264, "2881888087011164", 265},
  {2.2402854018819371399687884e+183, "2240285401881937", 184},
  {6.1996262930144268669129544e-77, "6199626293014427", -76},
  {5.7110953178979559371442753e-189, "5711095317897956", -188},
  {1.4898709455223450917291891e-186, "1489870945522345", -185},
  {2.0265300808108600882368319e+159, "202653008081086", 160},
  {2.9141721412754382092879454e+170, "2914172141275438", 171},
  {2.4318291928420029213780518e-215, "2431829192842003", -214},
  {7.2580231839727034736361466e-209, "7258023183972703", -208},
  {1.2315638821413237710765504e-297, "12315638821413238", -296},
  {9.4228374316432119626832422e-45, "9422837431643212", -44},
  {3.9485176818796662196000385e-67, "3948517681879666", -66},
  {8.8197372987636214037615288e+52, "8819737298763621", 53},
  {1.7036305355959338520925887e-204, "1703630535595934", -203},
  {1.0304004487718628033729401e+152, "10304004487718628", 153},
  {5.9380304580806599901399377e-305, "593803045808066", -304},
  {1.3158741185315797406154408e+110, "13158741185315797", 111},
  {7.4990785293864520967576777e-305, "7499078529386452", -304},
  {3.5491834362182543126473635e+220, "35491834362182543", 221},
  {6.3612842623779242894008003e+159, "6361284262377924", 160},
  {1.0487067128258820364307735e-193, "1048706712825882", -192},
  {5.2357984349171761055067048e-168, "5235798434917176", -167},
  {1.0027388845915998843420346e-22, "10027388845915999", -21},
  {8.0382672969661958599268006e-88, "8038267296966196", -87},
  {4.1003577325433300522142941e+68, "410035773254333", 69},
  {3.3017092421720738221269722e+289, "3301709242172074", 290},
  {1.0538834205632221749791293e-60, "10538834205632222", -59},
  {1.9283630043777848783714683e+109, "1928363004377785", 110},
  {5.3317841358635381861404044e-113, "5331784135863538", -112},
  {4.5527935058581733034480574e-13, "4552793505858173", -12},
  {1.6235401242824668975997345e-93, "1623540124282467", -92},
  {8.4958464903036262400000000e+18, "8495846490303626", 19},
  {3.1269764680120702757093312e+75, "31269764680120703", 76},
  {1.0967318676409578517743616e+66, "10967318676409579", 67},
  {1.7023119264281983406629561e-219, "17023119264281983", -218},
  {5.4736418302405106487723248e-262, "5473641830240511", -261},
  {2.3279475997007358181555260e-260, "23279475997007358", -259},
  {1.5905848010995297129057698e-100, "15905848010995297", -99},
  {1.1995748184063439048110913e-54, "11995748184063439", -53},
  {1.6334386211219842618433627e+94, "16334386211219843", 95},
  {1.5464351596117116954993597e-37, "15464351596117117", -36},
  {8.6660048367216109385184160e+193, "8666004836721611", 194},
  {3.0214909475855103448971306e-02, "30214909475855103", -1},
  {1.4576696363125857874956962e-58, "14576696363125858", -57},
  {1.4085244839786976972992534e+255, "14085244839786977", 256},
  {2.9566894950352071451678404e-141, "2956689495035207", -140},
  {3.9050813071338902470605653e+130, "39050813071338902", 131},
  {1.5383728179019098014519800e-53, "15383728179019098", -52},
  {2.9265732289632562903732544e-204, "29265732289632563", -203},
  {1.4264144135386189975603356e+165, "1426414413538619", 166},
  {1.8459034677351901167534016e+216, "184590346773519", 217},
  {1.3197921359963266914647636e-218, "13197921359963267", -217},
  {9.1447784614241134137000300e+277, "9144778461424113", 278},
  {2.5143040358709954731083128e-250, "25143040358709955", -249},
  {1.7629592512234663752259006e+59, "17629592512234664", 60},
  {4.1681664813768567048764521e+182, "41681664813768567", 183},
  {1.3255743323506147382064781e-263, "13255743323506147", -262},
  {6.2296458645317532173572160e-110, "6229645864531753", -109},
  {3.5604185510433657349157713e+39, "3560418551043366", 40},
  {1.7171050463394608155101599e+297, "17171050463394608", 298},
  {2.9329928113459001512882612e-217, "29329928113459", -216},
  {2.9212867834207326172793996e-187, "29212867834207326", -186},
  {5.3728870061917297275235843e-264, "537288700619173", -263},
  {1.1038614624196443067649286e+102, "11038614624196443", 103},
  {1.1786109667090534455163812e+38, "11786109667090534", 39},
  {5.0743481776722459614962394e+112, "5074348177672246", 113},
  {4.8546652593791778283702118e-40, "4854665259379178", -39},
  {2.6876657694021793721127786e+164, "26876657694021794", 165},
  {1.1058391194542292153077380e+257, "11058391194542292", 258},
  {2.0006542124855722956033388e+41, "20006542124855723", 42},
  {1.6600771229974300672000000e+19, "166007712299743", 20},
  {2.8328256687718453984976873e+191, "28328256687718454", 192},
  {1.2834676950649655263123204e-22, "12834676950649655", -21},
  {1.4229371679840540801236204e+74, "1422937167984054", 75},
  {9.7863069040923017602206610e+104, "9786306904092302", 105},
  {3.0335971659705595083532826e-297, "30335971659705595", -296},
  {3.8858446715958411538882040e-234, "3885844671595841", -233},
  {8.0218361241030029260302582e+306, "8021836124103003", 307},
  {3.5086257214085811967957213e-293, "3508625721408581", -292},
  {6.0625502416032498163992690e+143, "606255024160325", 144},
  {5.5278072999921957350537945e+187, "5527807299992196", 188},
  {1.1508689849841881346844993e-216, "11508689849841881", -215},
  {1.6601937393299933350377625e-294, "16601937393299933", -293},
  {6.7644289599669137399809806e+45, "6764428959966914", 46},
  {5.1608708868777731362004221e-226, "5160870886877773", -225},
  {4.7966376323967958196287186e+70, "4796637632396796", 71},
  {9.3076292274981850000000000e+14, "9307629227498185", 15},
  {1.0761842775234403818184091e+301, "10761842775234404", 302},
  {2.2771816235672686957957379e+275, "22771816235672687", 276},
  {2.0801797289187480317511346e-142, "2080179728918748", -141},
  {2.1769969823162912457050157e+197, "21769969823162912", 198},
  {2.8578366323332237437078099e-37, "28578366323332237", -36},
  {8.9697743133911099463605906e-228, "896977431339111", -227},
  {4.1629274032854487621982372e+225, "4162927403285449", 226},
  {2.1553355635026567341574827e+114, "21553355635026567", 115},
  {4.1435880057229249464107812e-147, "4143588005722925", -146},
  {2.2116902294247977500000000e+15, "22116902294247978", 16},
  {2.6709020369859108128202068e-77, "2670902036985911", -76},
  {2.2919290711968653471287877e+50, "22919290711968653", 51},
  {5.7673022964028008734272985e+146, "5767302296402801", 147},
  {4.1165570684700355899338744e-131, "41165570684700356", -130},
  {2.1391650907887412654719352e+50, "21391650907887413", 51},
  {6.2335795481070366093324725e-226, "62335795481070366", -225},
  {2.3554049533568283345587955e+121, "23554049533568283", 122},
  {1.0652803546657512169214808e-257, "10652803546657512", -256},
  {1.7216755849645246563048771e-303, "17216755849645247", -302},
  {2.7558496408620802587164869e-131, "27558496408620803", -130},
  {2.2056273800986021240467243e-18, "2205627380098602", -17},
  {2.5145498894689569060648138e+32, "2514549889468957", 33},
  {2.1109595796527683986812978e-127, "21109595796527684", -126},
  {3.5800845323237609810957611e+201, "3580084532323761", 202},
  {4.6822401212245866163580360e-96, "4682240121224587", -95},
  {3.7067451892814634225325134e+110, "37067451892814634", 111},
  {1.5533430301143002436546519e-182, "15533430301143002", -181},
  {2.0701022744560766937574383e+305, "20701022744560767", 306},
  {3.2039810055445486913016801e+72, "32039810055445487", 73},
  {1.2123409689430313110671439e+306, "12123409689430313", 307},
  {4.2419408944265761256401512e-53, "4241940894426576", -52},
  {1.1099724411745249436070198e-291, "1109972441174525", -290},
  {1.4789078328986022386227805e-146, "14789078328986022", -145},
  {8.2976375357293923780677659e+158, "8297637535729392", 159},
  {5.3037445462557452764535576e+111, "5303744546255745", 112},
  {8.2957442810576231161892303e+96, "8295744281057623", 97},
  {9.0439070412068768445482173e+147, "9043907041206877", 148},
  {1.3678408609424508314908204e+150, "13678408609424508", 151},
  {5.6832971729207830503582954e+05, "5683297172920783", 6},
  {1.9024025449474552245693830e+77, "19024025449474552", 78},
  {1.7613612554957037860838957e+248, "17613612554957038", 249},
  {9.2736699343725158473208762e-89, "9273669934372516", -88},
  {4.2159314866062071293403988e-19, "4215931486606207", -18},
  {1.5449504744731554405122582e+295, "15449504744731554", 296},
  {2.1998545526393458868912146e-299, "2199854552639346", -298},
  {8.6792201533041987650831560e-276, "8679220153304199", -275},
  {1.3165253655088394062207444e-147, "13165253655088394", -146},
  {7.6954706361026522335168969e+295, "7695470636102652", 296},
  {3.9358203724737877799931107e+50, "3935820372473788", 51},
  {9.5934223060960289678930916e+140, "9593422306096029", 141},
  {4.2622231193055485346090631e+201, "42622231193055485", 202},
  {2.2465015974156789162899744e+173, "2246501597415679", 174},
  {1.0647582459709907093416537e+287, "10647582459709907", 288},
  {1.4124582273584827244918465e-249, "14124582273584827", -248},
  {2.2709681361333328495166316e+279, "2270968136133333", 280},
  {1.7653512706260665512253416e-04, "17653512706260666", -3},
  {5.4953767473543089703593853e+132, "5495376747354309", 133},
  {1.2172288028565346014395538e+133, "12172288028565346", 134},
  {8.0750711481902457354060008e-74, "8075071148190246", -73},
  {8.3350231797175660445181548e-301, "8335023179717566", -300},
  {3.1486363060200943692215099e+276, "31486363060200944", 277},
  {1.6265166910496115294790611e-121, "16265166910496115", -120},
  {5.8684735264672214165133120e+170, "5868473526467221", 171},
  {1.1271999672886963852942435e-235, "11271999672886964", -234},
  {1.1494059323418301626747164e-127, "11494059323418302", -126},
  {2.6332260141583412264845853e+278, "26332260141583412", 279},
  {1.6293816251571384832628076e-37, "16293816251571385", -36},
  {2.6397028097545022345206780e-115, "26397028097545022", -114},
  {4.8675771794363502100154339e-35, "486757717943635", -34},
  {5.3194085826234623630673707e+28, "5319408582623462", 29},
  {2.5455666595841183451642560e-132, "25455666595841183", -131},
  {3.0510622402577877210205770e+02, "3051062240257788", 3},
  {7.8495599188493521615924766e+33, "7849559918849352", 34},
  {3.4135699191228679585792000e+22, "3413569919122868", 23},
  {5.3104200085644678507868414e+206, "5310420008564468", 207},
  {2.3634665041478699246583951e-227, "236346650414787", -226},
  {1.5701815367026071352816335e-81, "15701815367026071", -80},
  {8.1908507376254230940167137e-230, "8190850737625423", -229},
  {7.7167503681333956993492496e-200, "7716750368133396", -199},
  {2.9064746576397217186893567e+85, "29064746576397217", 86},
  {1.3923554704415133946938855e-257, "13923554704415134", -256},
  {3.6192862535035963709518482e-197, "36192862535035964", -196},
  {8.3418572852241080546807532e+139, "8341857285224108", 140},
  {4.4039474471381080757640902e+261, "4403947447138108", 262},
  {3.2193696940106581502020906e+32, "3219369694010658", 33},
  {2.2713204649017021408141659e-02, "2271320464901702", -1},
  {1.8545145287670370507423010e-180, "1854514528767037", -179},
  {1.1073636826751092005447009e+148, "11073636826751092", 149},
  {8.1993026980687117828319872e+93, "8199302698068712", 94},
  {7.3016205071024202935575752e+298, "730162050710242", 299},
  {1.9267970309778316419388546e-150, "19267970309778316", -149},
  {1.1162082278229951239533743e-110, "11162082278229951", -109},
  {3.4854188502031428798456416e+265, "3485418850203143", 266},
  {5.1578142937692799885444032e+304, "515781429376928", 305},
  {1.2534351527803011205623360e-43, "12534351527803011", -42},
  {4.9710335081973909255779151e+129, "4971033508197391", 130},
  {1.0908257046766907039051465e+159, "10908257046766907", 160},
  {2.4191656441388904707730587e+116, "24191656441388905", 117},
  {1.8059553791720380467999595e+165, "1805955379172038", 166},
  {5.9507794814451885720804319e-16, "5950779481445189", -15},
  {1.3799527795689712574465009e-251, "13799527795689713", -250},
  {1.5693123835486969945636358e-84, "1569312383548697", -83},
  {2.5549527351531168821242870e-281, "2554952735153117", -280},
  {1.2452722315472136963242940e-256, "12452722315472137", -255},
  {1.8283715032379260160416701e-03, "1828371503237926", -2},
  {7.2885723830812532088000263e+257, "7288572383081253", 258},
  {1.1724226982382390476800000e+21, "1172422698238239", 22},
  {6.9146990710253905359665467e+238, "691469907102539", 239},
  {5.4703517967090948358660312e-98, "5470351796709095", -97},
  {1.2296373227553480641698314e+258, "1229637322755348", 259},
  {5.8178018129542055019501947e+203, "58178018129542055", 204},
  {1.1192450710259374342886006e+79, "11192450710259374", 80},
  {5.5159159579449888709483039e-76, "5515915957944989", -75},
  {3.0331200031921265413850082e-63, "30331200031921265", -62},
  {3.1210149854783974974079110e-102, "31210149854783975", -101},
  {1.5796606982128868640998758e+205, "15796606982128869", 206},
  {4.6025804927889537287681102e+189, "4602580492788954", 190},
  {1.1525559473946873118774451e+260, "11525559473946873", 261},
  {6.5211358656254674330242487e-297, "6521135865625467", -296},
  {8.3593189952113657826207385e+261, "8359318995211366", 262},
  {2.3140180474161862538992361e-86, "23140180474161863", -85},
  {4.4036504813678264901085588e+194, "44036504813678265", 195},
  {1.8920287743371087158259622e-244, "18920287743371087", -243},
  {6.0141349443054894646137234e-186, "60141349443054895", -185},
  {1.4813950638459003064728772e+245, "14813950638459003", 246},
  {1.1462459469932990555627774e+185, "1146245946993299", 186},
  {1.4230294436873772865028777e-221, "14230294436873773", -220},
  {1.9487504516958969263620017e-259, "1948750451695897", -258},
  {2.8967201515421471671197194e-161, "2896720151542147", -160},
  {1.1666540431523191158564451e-134, "1166654043152319", -133},
  {1.1516164964766049926872867e+242, "1151616496476605", 243},
  {5.9030896908516891776547386e-269, "5903089690851689", -268},
  {3.5712027536131099950520486e-65, "357120275361311", -64},
  {9.0386181326318579042850775e+136, "9038618132631858", 137},
  {7.6146615659496236733731763e+187, "7614661565949624", 188},
  {4.2592092479323137799400725e-279, "4259209247932314", -278},
  {1.3172016119867681551874264e+163, "13172016119867682", 164},
  {8.9477897630936090044104667e-228, "8947789763093609", -227},
  {1.1009980583029915684778092e-07, "11009980583029916", -6},
  {4.4842745377990697618080711e-125, "448427453779907", -124},
  {1.6812656283591975396468127e+145, "16812656283591975", 146},
  {1.3487388837494868692311829e-253, "13487388837494869", -252},
  {5.8228360850382057443772108e-157, "5822836085038206", -156},
  {1.8380370552689979593701199e+164, "1838037055268998", 165},
  {3.3265936631558087176376237e+215, "33265936631558087", 216},
  {6.5613517930519831494697603e-161, "6561351793051983", -160},
  {4.5191957071594837474585950e+254, "4519195707159484", 255},
  {2.0136430385413421685610857e-269, "20136430385413422", -268},
  {6.6883769710188255091637615e-186, "66883769710188255", -185},
  {7.4629809433282495028781999e+79, "746298094332825", 80},
  {9.4706710264234930112841583e+30, "9470671026423493", 31},
  {4.0646207036144747898241274e-130, "4064620703614475", -129},
  {4.7941516109794843581794197e-149, "4794151610979484", -148},
  {1.3300624617482300246796596e-148, "133006246174823", -147},
  {3.8675911343859476639927246e-150, "38675911343859477", -149},
  {1.8782792272838946818612740e-75, "18782792272838947", -74},
  {3.8610066276366423951781969e+134, "3861006627636642", 135},
  {3.4060851053178221077685098e+91, "3406085105317822", 92},
  {4.3704069477989405175433584e-112, "43704069477989405", -111},
  {4.5936908476424324380735231e-153, "45936908476424324", -152},
  {1.2227708949432410760845939e+226, "1222770894943241", 227},
  {1.2015166412106994286805983e-78, "12015166412106994", -77},
  {1.3462558929939620532390025e-161, "1346255892993962", -160},
  {2.1879818892914211090609423e-111, "2187981889291421", -110},
  {3.6859455465048118447737048e+70, "3685945546504812", 71},
  {1.8090490463836705081047714e-121, "18090490463836705", -120},
  {6.3850129143860612612865098e-140, "6385012914386061", -139},
  {2.2042511534985628611783647e+247, "2204251153498563", 248},
  {3.1640120493564504423013162e+148, "31640120493564504", 149},
  {1.1366527996976639991795224e-45, "1136652799697664", -44},
  {4.6311174966838196836432675e+55, "46311174966838197", 56},
  {9.6077722501941217316676710e-13, "9607772250194122", -12},
  {4.5996904867926893091869988e-223, "4599690486792689", -222},
  {3.6397733581142670020947048e-205, "3639773358114267", -204},
  {4.9970069446063949274845261e+141, "4997006944606395", 142},
  {2.2126023371830760829476363e+155, "2212602337183076", 156},
  {6.2969865586068969262600881e-03, "6296986558606897", -2},
  {3.6513339323710940030406272e+74, "3651333932371094", 75},
  {6.2227584380574357592491075e+83, "6222758438057436", 84},
  {3.2042976833953143004800430e+280, "32042976833953143", 281},
  {9.2350438469684238490259972e+196, "9235043846968424", 197},
  {3.8904415209976968356051986e+155, "3890441520997697", 156},
  {2.6783761576006788214482068e+247, "26783761576006788", 248},
  {6.7114557991158778408242186e+289, "6711455799115878", 290},
  {6.9646146721601150684114235e+196, "6964614672160115", 197},
  {9.1709101784644977292933595e+262, "9170910178464498", 263},
  {6.5284657234940098176905942e+201, "652846572349401", 202},
  {1.2987482499916835570575208e+49, "12987482499916836", 50},
  {3.6506504293341288562217718e-178, "3650650429334129", -177},
  {1.6805757843728749720868175e-49, "1680575784372875", -48},
  {2.2907720742432707509367119e+259, "22907720742432708", 260},
  {7.8943999790776215361474723e-251, "7894399979077622", -250},
  {6.5202952335567837565822725e+255, "6520295233556784", 256},
  {4.5193180904039999227646191e-169, "4519318090404", -168},
  {5.1047407007259941245896424e-274, "5104740700725994", -273},
  {2.6848942053646429661526850e+211, "2684894205364643", 212},
  {9.4160202489887408870893416e+105, "941602024898874", 106},
  {3.1181067056430703560208085e+242, "31181067056430704", 243},
  {3.0937362456238045629498344e+218, "30937362456238046", 219},
  {1.2097741637362224737550741e-163, "12097741637362225", -162},
  {1.1604930049425200748387090e+255, "116049300494252", 256},
  {8.7091408488032119464090866e-237, "8709140848803212", -236},
  {1.3554287250493238830071304e+42, "13554287250493239", 43},
  {9.0639268253300842479873234e+204, "9063926825330084", 205},
  {2.2118275878463652000000000e+16, "22118275878463652", 17},
  {1.1788783333364092395273501e-167, "11788783333364092", -166},
  {1.7579062516984161606882762e-224, "17579062516984162", -223},
  {6.5641554159735752986523992e-140, "6564155415973575", -139},
  {6.7009072488868476701322477e+162, "6700907248886848", 163},
  {3.5972504889050679806268805e+281, "3597250488905068", 282},
  {5.7259673570444821184254223e-117, "5725967357044482", -116},
  {6.4544226485473463311750672e-255, "6454422648547346", -254},
  {5.1477222916058979803154853e-232, "5147722291605898", -231},
  {3.9457809651809671058863212e-184, "3945780965180967", -183},
  {1.2750181932710541303759151e+174, "12750181932710541", 175},
  {4.2055588143413308353859024e+210, "4205558814341331", 211},
  {2.2252719651048707793756469e-160, "22252719651048708", -159},
  {5.7610302940629569295616321e+205, "5761030294062957", 206},
  {2.9481781060450810372230990e+01, "2948178106045081", 2},
  {6.4700118848722373637233129e-217, "6470011884872237", -216},
  {7.8704926854794255748881591e-248, "7870492685479426", -247},
  {9.3239758889022219139994159e-200, "9323975888902222", -199},
  {1.3411897500806911170218563e+195, "1341189750080691", 196},
  {1.2751896325308707214374907e+173, "12751896325308707", 174},
  {4.0015184350478781657340114e-31, "4001518435047878", -30},
  {1.6633267761502987135804128e+287, "16633267761502987", 288},
  {8.7236597045086331607669885e+176, "8723659704508633", 177},
  {1.1555677888047027200000000e+18, "11555677888047027", 19},
  {3.6907544643606957811547753e-83, "3690754464360696", -82},
  {1.9061258689199066280107515e-292, "19061258689199066", -291},
  {8.6867142867428104011727122e+187, "868671428674281", 188},
  {5.2904422069402400972635166e+112, "529044220694024", 113},
  {4.0909482418868741620016101e+183, "4090948241886874", 184},
  {2.0278499472557995382446681e-223, "20278499472557995", -222},
  {5.8709073110576237757473149e-176, "5870907311057624", -175},
  {2.4141864292101372907519382e+147, "24141864292101373", 148},
  {3.8130578609422673359396060e+128, "3813057860942267", 129},
  {3.3173199457119277304665808e-238, "3317319945711928", -237},
  {1.1850272248466646763635051e+210, "11850272248466647", 211},
  {1.0137779629898219660066487e+197, "1013777962989822", 198},
  {5.8600335697188198180578905e-125, "586003356971882", -124},
  {3.8360655464994348094336574e+92, "3836065546499435", 93},
  {2.6724643239235411592042210e+187, "2672464323923541", 188},
  {5.1997103756062336156818142e-231, "5199710375606234", -230},
  {4.1962912474473986450566403e+84, "4196291247447399", 85},
  {1.3605777378216572217286956e+72, "13605777378216572", 73},
  {3.9578019689322329557824321e+300, "3957801968932233", 301},
  {9.4912715422220877890529014e-73, "9491271542222088", -72},
  {1.2863613469278009908425570e-294, "1286361346927801", -293},
  {6.3171645759883130000626322e-225, "6317164575988313", -224},
  {1.5172148034476148642645107e+85, "15172148034476149", 86},
  {6.4940902720572884961133839e-242, "64940902720572885", -241},
  {1.1521700805549956800000000e+17, "11521700805549957", 18},
  {1.9650124479610681764083853e-51, "19650124479610682", -50},
  {2.9857816410545927906074991e-147, "2985781641054593", -146},
  {1.4415140791718505641675979e+267, "14415140791718506", 268},
  {7.3078589833557182330596009e-293, "7307858983355718", -292},
  {1.2232270674980768255894128e+238, "12232270674980768", 239},
  {4.1824199864530689816056420e+111, "4182419986453069", 112},
  {6.8197791333637904049880470e+199, "681977913336379", 200},
  {2.9951498805115094532758182e+284, "29951498805115095", 285},
  {6.7673543836471432916607496e+98, "6767354383647143", 99},
  {1.7958572659082070480085915e+217, "1795857265908207", 218},
  {1.8414162242414066402688053e-256, "18414162242414066", -255},
  {4.9237347924648485306129332e+41, "49237347924648485", 42},
  {2.7398519886029856606768081e+246, "27398519886029857", 247},
  {4.1318868824261230771074014e+110, "4131886882426123", 111},
  {2.3688840534577537069856576e-123, "23688840534577537", -122},
  {1.9991660021975505464994937e-167, "19991660021975505", -166},
  {7.6978476949775615234375000e+12, "7697847694977562", 13},
  {3.6506079082930653211154504e-05, "3650607908293065", -4},
  {1.6402556459075529316383139e+262, "1640255645907553", 263},
  {1.2217378951118252346864544e-57, "12217378951118252", -56},
  {1.2321877007004802769732481e+86, "12321877007004803", 87},
  {1.0746825716849623712223494e-04, "10746825716849624", -3},
  {7.4248542741185933464513885e+145, "7424854274118593", 146},
  {9.4751398640428080892926706e-114, "9475139864042808", -113},
  {2.4940397967548952742274200e+244, "24940397967548953", 245},
  {6.6766686548233372530207854e+63, "6676668654823337", 64},
  {1.2691783441649578683615627e+300, "12691783441649579", 301},
  {3.3117123546567550284441050e-211, "3311712354656755", -210},
  {1.5346725062259991983295408e-289, "15346725062259992", -288},
  {2.9677977125520210107027341e-148, "2967797712552021", -147},
  {2.5289079726268377486326148e-228, "25289079726268377", -227},
  {1.2966933404342243876875103e+66, "12966933404342244", 67},
  {2.0496692071203588567196921e+108, "20496692071203589", 109},
  {7.2482184533507528053796910e+78, "7248218453350753", 79},
  {1.5075975026748264499764327e+102, "15075975026748264", 103},
  {8.1340679982332019904335392e+289, "8134067998233202", 290},
  {1.9833483322862799075935699e-181, "198334833228628", -180},
  {2.6654216812477029126054174e-194, "2665421681247703", -193},
  {3.3384174381936855979802203e+02, "33384174381936856", 3},
  {2.4732426498261973924544227e+297, "24732426498261974", 298},
  {7.5139965661678982976585178e-125, "7513996566167898", -124},
  {1.2025804953701605089871663e-147, "12025804953701605", -146},
  {1.7426078032606083490996080e-151, "17426078032606083", -150},
  {7.7533415358502776104629361e+211, "7753341535850278", 212},
  {3.2385240207664659179915386e+268, "3238524020766466", 269},
  {8.5492055745342089944799883e-161, "8549205574534209", -160},
  {5.5753391715266523751232425e-144, "5575339171526652", -143},
  {3.5369498804466823407245442e-296, "35369498804466823", -295},
  {1.3517582766115970696208103e-222, "1351758276611597", -221},
  {1.1897796120790568836218604e+198, "11897796120790569", 199},
  {1.8033395696604441798227495e+261, "18033395696604442", 262},
  {9.4470030299252724321408502e-271, "9447003029925272", -270},
  {9.4881283644734548421178195e+55, "9488128364473455", 56},
  {4.7226400401151271726189630e+117, "4722640040115127", 118},
  {1.1031773015156533556610426e+207, "11031773015156534", 208},
  {1.2285998008178925685692078e-181, "12285998008178926", -180},
  {5.8320982031759156503896854e-113, "5832098203175916", -112},
  {4.5804613320358225989909489e+118, "4580461332035823", 119},
  {3.4164515974198009282850053e-89, "3416451597419801", -88},
  {3.2433969680377254651866000e-40, "32433969680377255", -39},
  {3.8598456854799224947193319e-236, "38598456854799225", -235},
  {3.3958681126849279143974583e-191, "3395868112684928", -190},
  {2.6666377442489383936774429e-301, "26666377442489384", -300},
  {1.3208349110716701947968149e-289, "13208349110716702", -288},
  {6.4250957608390112051200000e+20, "6425095760839011", 21},
  {1.1110652387797722371693704e-274, "11110652387797722", -273},
  {1.4856496663852380209572661e+221, "1485649666385238", 222},
  {1.7293854351901338987728667e+260, "1729385435190134", 261},
  {3.9353761674561913553867070e-204, "39353761674561914", -203},
  {5.4707490455291809903704571e+291, "5470749045529181", 292},
  {4.7578485489782590621814028e+172, "4757848548978259", 173},
  {5.1539933720939125675923885e+246, "51539933720939126", 247},
  {2.4073014401165433860592650e-213, "24073014401165434", -212},
  {1.5126225528943164781907984e-97, "15126225528943165", -96},
  {4.5155858454448657078894928e+231, "4515585845444866", 232},
  {2.9765656986589228706474057e-207, "2976565698658923", -206},
  {3.3343636713255169159115861e+200, "3334363671325517", 201},
  {1.8264040809469964126242091e-260, "18264040809469964", -259},
  {3.9667509964870973298840619e+192, "39667509964870973", 193},
  {5.7874311576850229425578926e+115, "5787431157685023", 116},
  {3.1276483755092560269590703e-57, "3127648375509256", -56},
  {7.2207885291099558813671733e+261, "7220788529109956", 262},
  {1.8272684582765176015747290e+217, "18272684582765176", 218},
  {3.8820133479359945293692305e+126, "38820133479359945", 127},
  {6.7393939487738201561706151e+207, "673939394877382", 208},
  {4.0272736466341511255929636e-161, "4027273646634151", -160},
  {4.7621339601148560037141957e+158, "4762133960114856", 159},
  {1.7487973176399330000000000e+16, "1748797317639933", 17},
  {1.5530643689804355819405014e-199, "15530643689804356", -198},
  {6.3867302615189847735768552e-74, "6386730261518985", -73},
  {1.7226234115948859751500333e-124, "1722623411594886", -123},
  {5.2489137008355823958138684e+94, "52489137008355824", 95},
  {1.6481558472042933911154224e+287, "16481558472042934", 288},
  {3.0340060156596987482111377e-92, "30340060156596987", -91},
  {4.8321378725357362936075729e+35, "4832137872535736", 36},
  {1.2801509536525591204459927e+187, "12801509536525591", 188},
  {7.3237625024090300569655382e+185, "732376250240903", 186},
  {1.2422861250531381253450077e-272, "12422861250531381", -271},
  {2.0269968753844084338960782e+204, "20269968753844084", 205},
  {2.1345629153912954101562500e+12, "21345629153912954", 13},
  {1.1597063605481785201508776e+46, "11597063605481785", 47},
  {1.4647756254154584447381443e-225, "14647756254154584", -224},
  {9.8747502633694028383646261e+39, "9874750263369403", 40},
  {4.8756962948663808284115854e+272, "4875696294866381", 273},
  {2.9930928428121232314395709e+59, "29930928428121232", 60},
  {3.8110529139220212617944683e+276, "38110529139220213", 277},
  {2.1166184290292400121606865e-137, "211661842902924", -136},
  {4.4940009440479907375574822e-262, "4494000944047991", -261},
  {5.0013880446721613221697879e-170, "5001388044672161", -169},
  {1.5749463384572130415915954e-282, "1574946338457213", -281},
  {1.9650431837774866951258409e+156, "19650431837774867", 157},
  {1.1567223851962755805582438e+88, "11567223851962756", 89},
  {2.2543598334031078043717137e+290, "22543598334031078", 291},
  {3.6805197542677444640639914e+273, "36805197542677445", 274},
  {2.7352062208137841195692900e+282, "2735206220813784", 283},
  {5.3570832148448255689204779e+255, "53570832148448256", 256},
  {5.4239150484615574813357665e-170, "54239150484615575", -169},
  {4.2886746236276305873922275e+176, "42886746236276306", 177},
  {9.0465415772297538406941741e+205, "9046541577229754", 206},
  {7.7010372893251998852543650e+91, "77010372893252", 92},
  {6.6361348378774958111514529e+127, "6636134837877496", 128},
  {2.8229146064296888150248498e-296, "2822914606429689", -295},
  {1.0038068643602445562942661e-277, "10038068643602446", -276},
  {4.1836074364624262567885891e-117, "4183607436462426", -116},
  {5.0161042778694042573868546e+106, "5016104277869404", 107},
  {1.0365831382302928583240017e+212, "10365831382302929", 213},
  {6.9846019638926447786290240e-284, "6984601963892645", -283},
  {1.8686819418359323358978737e+197, "18686819418359323", 198},
  {2.0956286779046705315312973e-119, "20956286779046705", -118},
  {9.6013419089842660695891866e+302, "9601341908984266", 303},
  {1.6254509249035493101308968e-44, "16254509249035493", -43},
  {5.1767706670534720149108225e+151, "5176770667053472", 152},
  {7.8877137359004933439221897e+126, "7887713735900493", 127},
  {1.0439709349603317642711532e+29, "10439709349603318", 30},
  {7.3705812783780567269741966e+307, "7370581278378057", 308},
  {3.2386634175489659794783136e-164, "3238663417548966", -163},
  {4.9060786847958133353566338e+106, "4906078684795813", 107},
  {4.3793363967932854225947333e+195, "43793363967932854", 196},
  {7.9260695223958627693559318e-302, "7926069522395863", -301},
  {1.2617477878917982786799466e-270, "12617477878917983", -269},
  {4.5181122006512716602645342e-66, "45181122006512717", -65},
  {1.7259611821345461317981915e+277, "17259611821345461", 278},
  {2.6219840044425619998946786e+05, "2621984004442562", 6},
  {6.8907341307344999055403056e+247, "68907341307345", 248},
  {1.0018479651683542243326477e-247, "10018479651683542", -246},
  {1.5665779808613361182907923e+206, "15665779808613361", 207},
  {1.2025643805248400558587570e-95, "120256438052484", -94},
  {5.9723211541020477559541580e-142, "5972321154102048", -141},
  {1.8418782535686586471234630e+283, "18418782535686586", 284},
  {9.6290238127330967662677135e-252, "9629023812733097", -251},
  {6.1385704506598589378243802e-190, "6138570450659859", -189},
  {7.1137346989645927271886882e+186, "7113734698964593", 187},
  {2.8723357632032567534512621e-11, "28723357632032568", -10},
  {1.5707805960955327329761249e+297, "15707805960955327", 298},
  {3.7258020058990724983411291e+86, "37258020058990725", 87},
  {2.6712115927124978812776433e+62, "2671211592712498", 63},
  {6.4716602604426529095815858e-227, "6471660260442653", -226},
  {1.8283778025967354615313172e-116, "18283778025967355", -115},
  {6.3768576412536227367844004e+280, "6376857641253623", 281},
  {1.4459176228119713554103832e-31, "14459176228119714", -30},
  {2.8101113830689085153679711e+83, "28101113830689085", 84},
  {6.3527663076259309433222187e-178, "6352766307625931", -177},
  {3.2722594033832685621261495e-192, "32722594033832686", -191},
  {1.2219677560231952473408717e-142, "12219677560231952", -141},
  {6.6213683446501904860289396e+105, "662136834465019", 106},
  {2.9979713787281920085471295e+92, "2997971378728192", 93},
  {1.3264871184713833199458946e-127, "13264871184713833", -126},
  {5.2191733402068847351426046e+256, "5219173340206885", 257},
  {3.0967312380125250455153856e-188, "3096731238012525", -187},
  {1.4697796624101896319688101e+216, "14697796624101896", 217},
  {3.6559733415017626698339050e+149, "36559733415017627", 150},
  {3.0147205983830131297474930e-45, "3014720598383013", -44},
  {3.3892580947309485436888127e-150, "33892580947309485", -149},
  {1.8668115632370457681551652e+221, "18668115632370458", 222},
  {6.8291463816670862417368135e-298, "6829146381667086", -297},
  {1.6171514919367124375488785e-110, "16171514919367124", -109},
  {1.3743070346905109567287020e-307, "1374307034690511", -306},
  {8.8622011843025561557052028e+196, "8862201184302556", 197},
  {6.1397329582812060524118340e+128, "6139732958281206", 129},
  {3.4292531216848003857031762e+197, "34292531216848004", 198},
  {9.5143463385631194999178417e-180, "951434633856312", -179},
  {2.3037895435647626474704602e+138, "23037895435647626", 139},
  {8.1776806486019541775842544e-278, "8177680648601954", -277},
  {2.4028412852145166081401135e-143, "24028412852145166", -142},
  {1.0949731157655919963472436e-219, "1094973115765592", -218},
  {8.8266128195283859779891619e-211, "8826612819528386", -210},
  {4.1871948341769176068281309e-262, "41871948341769176", -261},
  {2.2471447009271901857146003e-113, "22471447009271902", -112},
  {5.4419668879983563010123630e+146, "5441966887998356", 147},
  {2.9259919213556612188429996e-95, "29259919213556612", -94},
  {3.0293674511687343837938497e+168, "30293674511687344", 169},
  {1.1441476754669996472752495e-282, "11441476754669996", -281},
  {1.7958210780100810979396665e+92, "1795821078010081", 93},
  {1.7359793018128560879870543e-196, "1735979301812856", -195},
  {1.3110316003528700577715896e+201, "131103160035287", 202},
  {5.3793583683461038808491794e-06, "5379358368346104", -5},
  {3.3829481304385729071973166e+249, "3382948130438573", 250},
  {1.3266859388246556372125569e-224, "13266859388246556", -223},
  {2.1696173606688594678487949e+116, "21696173606688595", 117},
  {9.5798298315925388296645152e+227, "9579829831592539", 228},
  {8.5325247453952974523767076e-104, "8532524745395297", -103},
  {8.1092899355515369667600281e+199, "8109289935551537", 200},
  {2.3803935442510829066197144e+307, "2380393544251083", 308},
  {1.7228894854533050099611681e+204, "1722889485453305", 205},
  {2.3864022415742073711380937e+75, "23864022415742074", 76},
  {4.7563618671589160501385496e+115, "4756361867158916", 116},
  {3.6301753490294873113908987e+47, "36301753490294873", 48},
  {1.4857428288559177809028727e-10, "14857428288559178", -9},
  {7.5021298365619027933892649e-157, "7502129836561903", -156},
  {2.0870670000255219679078351e-246, "2087067000025522", -245},
  {3.2497102312974408640970412e+135, "3249710231297441", 136},
  {6.6313444636205180507649747e-77, "6631344463620518", -76},
  {5.1119197985438533219785901e-138, "51119197985438533", -137},
  {2.9732865249333314139534219e+284, "29732865249333314", 285},
  {2.6279615265329658092001944e+99, "2627961526532966", 100},
  {2.3505801629922105620450728e-259, "23505801629922106", -258},
  {2.4019632677463260111533698e-92, "2401963267746326", -91},
  {1.1860155525215421428334577e+134, "11860155525215421", 135},
  {1.8219330692521690845404845e-125, "1821933069252169", -124},
  {3.9981126534167465519162697e+214, "39981126534167466", 215},
  {5.5539715820762804400260405e-218, "555397158207628", -217},
  {1.7817556930907885056449974e-121, "17817556930907885", -120},
  {4.2617419251118219604661236e+44, "4261741925111822", 45},
  {1.7335006948369705236052005e-87, "17335006948369705", -86},
  {1.9476930034237658893621573e-75, "1947693003423766", -74},
  {5.8410395601750741767725113e-266, "5841039560175074", -265},
  {4.6272954977820505396766625e+145, "46272954977820505", 146},
  {2.8752830558636994395499265e+56, "28752830558636994", 57},
  {2.9101684275394778103656555e-81, "2910168427539478", -80},
  {2.8660054342289491452624940e+152, "2866005434228949", 153},
  {4.5958448988952056757195689e-147, "45958448988952057", -146},
  {9.8523368703082827384746935e-191, "9852336870308283", -190},
  {3.9180080201645467584224145e+98, "3918008020164547", 99},
  {2.8860207650977399497427367e+260, "288602076509774", 261},
  {7.4602928854443039922826248e-26, "7460292885444304", -25},
  {4.2012528651552921419821768e-169, "4201252865155292", -168},
  {5.0100609820614247657065099e-204, "5010060982061425", -203},
  {1.3034264243664518356323242e+10, "13034264243664518", 11},
  {2.5295529431991479267390670e+103, "2529552943199148", 104},
  {1.1449109048214105448008866e+232, "11449109048214105", 233},
  {3.6757751747306826493780901e-284, "36757751747306826", -283},
  {9.2648575176744538471477035e-114, "9264857517674454", -113},
  {4.3668140278124526412246738e-273, "4366814027812453", -272},
  {1.2119091857463050240000000e+18, "1211909185746305", 19},
  {1.6072861913597610232953558e+122, "1607286191359761", 123},
  {2.7692466930226183536640000e+22, "27692466930226184", 23},
  {3.7316873800936134037320507e-144, "37316873800936134", -143},
  {4.3446686394669437167612305e-89, "4344668639466944", -88},
  {4.2859092876042688914559330e+160, "4285909287604269", 161},
  {4.6731116078689434814453125e+11, "46731116078689435", 12},
  {1.6753185248230143866778002e-178, "16753185248230144", -177},
  {5.0313833963137443113060470e-207, "5031383396313744", -206},
  {6.9307359965534315974495787e+43, "6930735996553432", 44},
  {4.3672250127211370432321794e-162, "4367225012721137", -161},
  {1.3275073074134829741219278e-88, "1327507307413483", -87},
  {1.2525610698278260898788840e+271, "1252561069827826", 272},
  {1.9712511495102911481512625e+164, "19712511495102911", 165},
  {1.5755075481968656251468461e-236, "15755075481968656", -235},
  {8.8110672138589902181757423e+54, "881106721385899", 55},
  {1.6996245330657083675217820e-200, "16996245330657084", -199},
  {4.1160285368383552013934512e-257, "4116028536838355", -256},
  {2.9601884693543299998990547e+50, "296018846935433", 51},
  {2.2084315807211307692367909e-194, "22084315807211308", -193},
  {2.3010222295025497512375273e+300, "23010222295025498", 301},
  {5.1775429525231425645914554e-305, "5177542952523143", -304},
  {6.6660192484201209067765141e+132, "6666019248420121", 133},
  {2.4853058720245008291650760e-17, "24853058720245008", -16},
  {2.8077138327286537069481822e+219, "28077138327286537", 220},
  {2.6159064180072541258440367e-235, "2615906418007254", -234},
  {1.4174284158603950505537981e+81, "1417428415860395", 82},
  {1.0892096668539924603615903e-204, "10892096668539925", -203},
  {3.1082825889922486271386525e+144, "31082825889922486", 145},
  {1.5154230350796918801589608e-144, "1515423035079692", -143},
  {1.9150331937797024625952715e-59, "19150331937797025", -58},
  {4.4991719366708626447064501e+40, "4499171936670863", 41},
  {1.5833492306291940477990353e-207, "1583349230629194", -206},
  {7.1580395955973325596968856e+55, "7158039595597333", 56},
  {8.8547899378867243444865798e+224, "8854789937886724", 225},
  {4.6599514933745548930941274e-269, "4659951493374555", -268},
  {3.0630608717323085000000000e+15, "30630608717323085", 16},
  {4.8698182193069747781733270e+183, "4869818219306975", 184},
  {1.4204517364026351156559410e+114, "1420451736402635", 115},
  {6.6417493614202526651318170e+146, "6641749361420253", 147},
  {5.1721333935146125384597525e-162, "5172133393514613", -161},
  {3.1261060345128864275878409e+190, "31261060345128864", 191},
  {3.4756855469651494235052357e-71, "34756855469651494", -70},
  {5.5148405259533009019809714e+199, "5514840525953301", 200},
  {3.5388865767943591619120808e-79, "3538886576794359", -78},
  {3.1252574579116841588004420e-165, "3125257457911684", -164},
  {6.6375872480948649770530150e-75, "6637587248094865", -74},
  {1.2345457836308452096112831e-31, "12345457836308452", -30},
  {3.1805895834204244200035490e-60, "31805895834204244", -59},
  {8.3952373593302281752866118e+231, "8395237359330228", 232},
  {8.0547745696980130632397460e+302, "8054774569698013", 303},
  {1.5830204017057946886553469e+29, "15830204017057947", 30},
  {2.8353592157540690947563910e-121, "2835359215754069", -120},
  {2.4994070679343497460411809e-237, "249940706793435", -236},
  {2.5943545221665801655378765e+190, "259435452216658", 191},
  {1.0230399686775734648108482e+07, "10230399686775735", 8},
  {4.3538991687072064495587322e+161, "43538991687072064", 162},
  {1.9385264175353146215488830e+266, "19385264175353146", 267},
  {1.2273561143176746216013978e-73, "12273561143176746", -72},
  {5.1560004976956087804432238e-232, "5156000497695609", -231},
  {6.8049845588809710724091376e-94, "6804984558880971", -93},
  {8.2178834444413063325236073e+157, "8217883444441306", 158},
  {3.2920099706351760766576802e-14, "3292009970635176", -13},
  {1.2256418833145600091341805e+112, "122564188331456", 113},
  {4.8659327083075448454552663e-192, "4865932708307545", -191},
  {8.5855140771240898768524567e-203, "858551407712409", -202},
  {3.4293128461591177379142106e+227, "34293128461591177", 228},
  {2.9253307739880889858314142e-05, "2925330773988089", -4},
  {1.3858765453847253139453264e+173, "13858765453847253", 174},
  {3.7348199441124784880961969e+245, "37348199441124785", 246},
  {1.8666533342179883593537323e-106, "18666533342179884", -105},
  {2.0377244701235159524352300e-304, "2037724470123516", -303},
  {3.4534628337735974924552555e+248, "34534628337735975", 249},
  {9.1295860168384038714930844e-165, "9129586016838404", -164},
  {3.8115077268208787158619964e+110, "3811507726820879", 111},
  {1.2376030576226257467716206e+152, "12376030576226257", 153},
  {8.2554183371922130232703377e-258, "8255418337192213", -257},
  {3.4076437459486446681695482e-136, "34076437459486447", -135},
  {3.4414631259609055002727829e-201, "34414631259609055", -200},
  {8.6987567186827070318363856e+297, "8698756718682707", 298},
  {3.6802152966343102702255322e-278, "368021529663431", -277},
  {8.3974216924749680092123406e-88, "8397421692474968", -87},
  {1.3544206707948173840614567e-218, "13544206707948174", -217},
  {1.2761089708399205887777823e+66, "12761089708399206", 67},
  {6.8508484032386274072768201e-105, "68508484032386274", -104},
  {2.7221663397661794205776525e+208, "27221663397661794", 209},
  {2.4477902233636310661094130e-11, "2447790223363631", -10},
  {8.0299253992143775542744024e-158, "8029925399214378", -157},
  {5.4599594049953313179527880e+160, "54599594049953313", 161},
  {7.9078134640485966796875000e+12, "7907813464048597", 13},
  {3.2905019182405929264484057e-180, "3290501918240593", -179},
  {3.9841703372540301502240612e-58, "398417033725403", -57},
  {4.4644441212873451370150145e-57, "4464444121287345", -56},
  {2.5478969512565121508207508e-245, "2547896951256512", -244},
  {9.7177539073982391946692194e-71, "9717753907398239", -70},
  {1.7276347670479358694933396e+133, "17276347670479359", 134},
  {5.9179225092868274427530736e-08, "59179225092868274", -7},
  {3.7234822468466112981786415e+64, "37234822468466113", 65},
  {2.0192887028424350474870988e-169, "2019288702842435", -168},
  {2.5450262442888177272195038e-223, "25450262442888177", -222},
  {1.0108917185791995719273276e+181, "10108917185791996", 182},
  {3.2847669082021443305421903e+182, "32847669082021443", 183},
  {6.1800411603603965708441197e-132, "6180041160360397", -131},
  {7.6847757790604946724383271e-140, "7684775779060495", -139},
  {5.1511677265208389519225466e-259, "5151167726520839", -258},
  {2.1929295032961334953172866e-58, "21929295032961335", -57},
  {1.1446878444243107184504175e-277, "11446878444243107", -276},
  {6.7575211289392597637047910e+39, "675752112893926", 40},
  {3.5869448106751170881529026e+293, "3586944810675117", 294},
  {2.7353064517353711252340676e-180, "2735306451735371", -179},
  {3.8989035945835713387693948e-261, "38989035945835713", -260},
  {5.7146995027315363967894741e+73, "5714699502731536", 74},
  {7.6402069279272520542144775e+08, "7640206927927252", 9},
  {7.5435087760092040845709118e-255, "7543508776009204", -254},
  {3.0811259570976658562870935e+90, "3081125957097666", 91},
  {3.9022302547403353502097201e+120, "39022302547403354", 121},
  {3.1379195411760719025551225e+02, "3137919541176072", 3},
  {2.2387809078448732691413170e+00, "22387809078448733", 1},
  {6.7277600876142270968745358e-116, "6727760087614227", -115},
  {2.0238681176856525253758939e+276, "20238681176856525", 277},
  {5.2797650218364028456133513e+137, "5279765021836403", 138},
  {5.8358807028190890243003032e+173, "5835880702819089", 174},
  {2.7731258823585786589894719e-37, "27731258823585787", -36},
  {2.7744206229542239453723830e-289, "2774420622954224", -288},
  {1.2401372518849157521564607e-226, "12401372518849158", -225},
  {1.7443534117580443183523532e-181, "17443534117580443", -180},
  {1.6744260837201435621814164e-136, "16744260837201436", -135},
  {4.7514909896078265119547250e+269, "47514909896078265", 270},
  {1.4112437081688490526472511e-141, "1411243708168849", -140},
  {1.3732917108392697364164228e-137, "13732917108392697", -136},
  {8.4434331282750674402461520e+116, "8443433128275067", 117},
  {4.0619643018672246476932243e-130, "4061964301867225", -129},
  {2.0576623399847110566209868e+192, "2057662339984711", 193},
  {3.8120191500745379836009362e-17, "3812019150074538", -16},
  {8.0362285695396199893592644e-13, "803622856953962", -12},
  {1.0964989561923062043326491e-132, "10964989561923062", -131},
  {3.8990177181869730498747438e+202, "3899017718186973", 203},
  {9.3392620002437039063321405e+234, "9339262000243704", 235},
  {7.2879741205158299850598488e+208, "728797412051583", 209},
  {7.4654630439049913178072702e+215, "7465463043904991", 216},
  {5.4604778623848737873870680e+258, "5460477862384874", 259},
  {1.0912637294965944065079930e-81, "10912637294965944", -80},
  {6.8649473098663137341685967e+155, "6864947309866314", 156},
  {2.0150668565447270516011735e-55, "2015066856544727", -54},
  {1.6701007602077343320506101e-29, "16701007602077343", -28},
  {8.5970907471504912386310769e+213, "8597090747150491", 214},
  {3.1287721061665870279621747e-21, "3128772106166587", -20},
  {1.2390428788300042788032283e+146, "12390428788300043", 147},
  {8.4467345803030208595183746e-270, "8446734580303021", -269},
  {1.7046772144039783678874342e+292, "17046772144039784", 293},
  {3.0668172921395300859418408e-206, "306681729213953", -205},
  {3.1281094176835565332804441e+257, "31281094176835565", 258},
  {1.3159030037364532344242887e+59, "13159030037364532", 60},
  {3.8931311258175232586927852e-141, "3893131125817523", -140},
  {5.9378050330084645369107264e-43, "59378050330084645", -42},
  {2.6419417306821041735654990e+212, "2641941730682104", 213},
  {7.4947260638767167805171704e-100, "7494726063876717", -99},
  {8.3078418832500060408081829e+255, "8307841883250006", 256},
  {1.0107565289308437363016011e+113, "10107565289308437", 114},
  {2.0312539906737949877424398e+03, "2031253990673795", 4},
  {1.5600043544849277604493960e+293, "15600043544849278", 294},
  {1.6460078039002234559115719e-103, "16460078039002235", -102},
  {1.8724146534820840820356696e+190, "1872414653482084", 191},
  {3.6764932095514945941324338e+245, "36764932095514946", 246},
  {2.7889431483059200784147616e+82, "278894314830592", 83},
  {2.0866727049214770878692541e+151, "2086672704921477", 152},
  {7.2311505284274417670306626e+137, "7231150528427442", 138},
  {3.3546495889667254476655694e-78, "33546495889667254", -77},
  {3.0961957507166785301998537e-62, "30961957507166785", -61},
  {1.5421848619580395661100753e-211, "15421848619580396", -210},
  {9.7596976104126519705600000e+20, "9759697610412652", 21},
  {6.6139992445363793913327961e-35, "6613999244536379", -34},
  {3.8375511928782673739952243e+191, "38375511928782674", 192},
  {2.4063660896372542728578886e+133, "24063660896372543", 134},
  {2.0613587932517398072463880e+228, "20613587932517398", 229},
  {5.9118305861418452147511501e-233, "5911830586141845", -232},
  {1.4868077089638125409605694e+235, "14868077089638125", 236},
  {6.3895043302568225336814690e+307, "6389504330256823", 308},
  {7.3063806537415113376174955e+258, "7306380653741511", 259},
  {2.7395765725015189294201139e+140, "2739576572501519", 141},
  {9.5220430665164733110091272e+295, "9522043066516473", 296},
  {1.4118590884913196091283563e+135, "14118590884913196", 136},
  {7.7104806186002448071814025e-72, "7710480618600245", -71},
  {1.0960484369395068563409555e+227, "10960484369395069", 228},
  {1.8329309970485753062184384e-228, "18329309970485753", -227},
  {2.5938916582384190640983648e+280, "2593891658238419", 281},
  {1.3680362660430724158818604e+48, "13680362660430724", 49},
  {7.1755031501422928729503751e-199, "7175503150142293", -198},
  {2.4882539016550452002519011e-145, "24882539016550452", -144},
  {7.8725695223262329377447077e-214, "7872569522326233", -213},
  {1.3824944045878472746580736e-226, "13824944045878473", -225},
  {1.9095207296575556956583095e+41, "19095207296575557", 42},
  {3.4110335275553398236765025e-156, "341103352755534", -155},
  {3.3093163017087723625299522e+223, "33093163017087724", 224},
  {8.4977691994988539062396033e-287, "8497769199498854", -286},
  {5.2436356777476561459308580e+220, "5243635677747656", 221},
  {4.8490083604417751056702390e-280, "4849008360441775", -279},
  {1.1785674896720558605113178e+78, "11785674896720559", 79},
  {7.8232994665569277565215493e-26, "7823299466556928", -25},
  {5.2288654085950395889594186e-72, "522886540859504", -71},
  {2.8253302859235020993609221e+240, "2825330285923502", 241},
  {1.6709656400780686466532395e-286, "16709656400780686", -285},
  {5.3285719538383575929661256e+275, "53285719538383576", 276},
  {4.6310926610404003076955175e+176, "46310926610404003", 177},
  {1.4148763416779600523484186e-191, "141487634167796", -190},
  {8.9376705852774892146667385e+176, "8937670585277489", 177},
  {9.0964728928094040912237691e-161, "9096472892809404", -160},
  {1.0748435520278293907189229e-218, "10748435520278294", -217},
  {1.5164541122640078053160729e-259, "15164541122640078", -258},
  {1.0499793013248585457688312e-24, "10499793013248585", -23},
  {2.6875983135568596880152332e+232, "26875983135568597", 233},
  {3.8266956847209818357426079e+210, "3826695684720982", 211},
  {1.3052929714149858518411441e-267, "13052929714149859", -266},
  {8.5547718966491464157160474e-25, "8554771896649146", -24},
  {1.3434565861486922014446378e+272, "13434565861486922", 273},
  {6.8635026597009192657704170e-12, "6863502659700919", -11},
  {2.3350147587620320487289485e-214, "2335014758762032", -213},
  {2.9345114282247926486611360e-70, "29345114282247926", -69},
  {2.8642538454576773120000000e+18, "28642538454576773", 19},
  {7.9563966197324187551080198e+104, "7956396619732419", 105},
  {2.0370957204467067885809170e+79, "20370957204467068", 80},
  {5.3815930828530338543565833e+245, "5381593082853034", 246},
  {1.0165506925017869612851562e+238, "1016550692501787", 239},
  {3.2808038309673213420144458e-48, "32808038309673213", -47},
  {2.3474955439572439667252968e+117, "2347495543957244", 118},
  {7.7703805051951057191806606e+291, "7770380505195106", 292},
  {6.6453939572095680106460346e-16, "6645393957209568", -15},
  {4.8913739745482057159451871e+182, "4891373974548206", 183},
  {3.5918454338149271914595495e-202, "3591845433814927", -201},
  {7.5207064478719138821769189e-285, "7520706447871914", -284},
  {2.6820142838129535215595782e+276, "26820142838129535", 277},
  {1.8556878304763841399345412e+201, "18556878304763841", 202},
  {2.6437486648890355501846348e-89, "26437486648890356", -88},
  {1.6706021437325456665131833e+180, "16706021437325457", 181},
  {1.0758225056771607994889250e+278, "10758225056771608", 279},
  {1.0894149205336524596798332e-05, "10894149205336525", -4},
  {5.1911027738921081604407296e+25, "5191102773892108", 26},
  {7.3578170436843096296652800e+24, "735781704368431", 25},
  {4.2897654277873990287526764e+58, "4289765427787399", 59},
  {6.3857215649563523752910474e+180, "6385721564956352", 181},
  {3.8951750687751497696672631e-10, "389517506877515", -9},
  {3.4178123813149414380949199e-68, "34178123813149414", -67},
  {4.1571131219234922564991919e+214, "41571131219234923", 215},
  {4.8607547039991294189754389e+272, "48607547039991294", 273},
  {2.9104899351940089990321409e-15, "2910489935194009", -14},
  {1.7863075915438748727156273e-25, "17863075915438749", -24},
  {3.0636737814398200391441225e+53, "306367378143982", 54},
  {3.5846687267876540229683027e-227, "3584668726787654", -226},
  {4.9522611115005690481405736e-17, "4952261111500569", -16},
  {5.4933881455355811799918982e-130, "5493388145535581", -129},
  {1.5534613226558553482812117e-222, "15534613226558553", -221},
  {1.1088877029021477874656284e-232, "11088877029021478", -231},
  {3.6399176829605169201506425e+203, "3639917682960517", 204},
  {6.2501986275179214808394760e-156, "6250198627517921", -155},
  {1.0405289540634665672633653e-153, "10405289540634666", -152},
  {2.1345821158451692236375266e+41, "21345821158451692", 42},
  {3.2087180378121465612546299e+242, "32087180378121466", 243},
  {1.6146371389565290493951401e-175, "1614637138956529", -174},
  {4.2026192493161876718252114e+77, "42026192493161877", 78},
  {1.6043415341927133374697145e-274, "16043415341927133", -273},
  {1.0838303688815422097577330e-49, "10838303688815422", -48},
  {1.0668226044484942994653830e-176, "10668226044484943", -175},
  {7.0349421354110307211512567e+84, "7034942135411031", 85},
  {1.9516461677027980060444731e-258, "1951646167702798", -257},
  {1.4442953207770441164888824e+284, "14442953207770441", 285},
  {6.4641411267846976428498708e+214, "6464141126784698", 215},
  {3.2830373719496135701958163e-230, "32830373719496136", -229},
  {8.0590000242877143197238315e-144, "8059000024287714", -143},
  {8.5295880429510280151816914e+00, "8529588042951028", 1},
  {1.1222497642620107200450746e-300, "11222497642620107", -299},
  {1.6129499443992288065489658e-128, "16129499443992288", -127},
  {5.4445513032561076336311711e+71, "5444551303256108", 72},
  {1.5691263003124667496539028e+189, "15691263003124667", 190},
  {7.5781675131310964434011665e+128, "7578167513131096", 129},
  {5.0192027622693730372630555e+70, "5019202762269373", 71},
  {2.2118529758710844947633729e-203, "22118529758710845", -202},
  {7.5867824101616181669913660e-178, "7586782410161618", -177},
  {1.0321226898984685227958484e+229, "10321226898984685", 230},
  {2.6478316098090575988031779e-189, "26478316098090576", -188},
  {9.3396343166819695132269934e-198, "933963431668197", -197},
  {2.5770622191623098355055130e-167, "257706221916231", -166},
  {1.5684756147944383242601055e+43, "15684756147944383", 44},
  {2.9445619062504951350057052e+279, "2944561906250495", 280},
  {2.5495571413560637507349202e-217, "25495571413560638", -216},
  {2.4749734682459276671242764e-196, "24749734682459277", -195},
  {3.2765125324360551190078291e-216, "3276512532436055", -215},
  {1.7266169104527470550402704e+172, "1726616910452747", 173},
  {7.5656784014430106460274024e+254, "7565678401443011", 255},
  {3.7970414624312611286447116e-150, "3797041462431261", -149},
  {4.0609474722154485738442875e-04, "40609474722154486", -3},
  {4.5818725074040895968502408e-13, "458187250740409", -12},
  {1.1021253281049484617359574e+85, "11021253281049485", 86},
  {4.6184380550347690710961067e-304, "4618438055034769", -303},
  {1.6572230903173221912358582e-121, "16572230903173222", -120},
  {7.5633224396405567651840000e+21, "7563322439640557", 22},
  {3.9505887121552033179551426e-303, "3950588712155203", -302},
  {3.0164971963882714932339738e-33, "30164971963882715", -32},
  {1.6136219554590047350384071e+221, "16136219554590047", 222},
  {1.0191338961169579516883586e+179, "1019133896116958", 180},
  {6.9939906067325490271469057e-04, "6993990606732549", -3},
  {1.0176205547132819676281954e-286, "1017620554713282", -285},
  {1.6216068920971956297792759e+89, "16216068920971956", 90},
  {8.0507449574666523530898756e+251, "8050744957466652", 252},
  {7.1781593292797028926186499e+288, "7178159329279703", 289},
  {2.1124945734523174614301392e+129, "21124945734523175", 130},
  {3.6418725417502558351284073e-32, "3641872541750256", -31},
  {1.3947187066595201140293360e+265, "13947187066595201", 266},
  {2.3452042127007644645804568e-217, "23452042127007645", -216},
  {3.4012481954055371682847130e+26, "3401248195405537", 27},
  {9.8333757699032360697287592e-291, "9833375769903236", -290},
  {7.2579598035691754195116029e+164, "7257959803569175", 165},
  {9.8954215338853490463508056e-249, "989542153388535", -248},
  {5.6420917404987668832409545e-39, "5642091740498767", -38},
  {7.0195473177772396091390479e-290, "701954731777724", -289},
  {2.3937234094771230522743992e-267, "2393723409477123", -266},
  {2.7763444532785239848540691e+243, "2776344453278524", 244},
  {7.7362865823803118250207721e+220, "7736286582380312", 221},
  {4.7398070139300738114061399e-123, "4739807013930074", -122},
  {6.0666456151845248522297286e-302, "6066645615184525", -301},
  {2.9156034390714319145065030e-251, "2915603439071432", -250},
  {2.7180093294822212440929296e-192, "27180093294822212", -191},
  {1.0335961777763404041998956e+291, "10335961777763404", 292},
  {1.1761760053554762057430958e-264, "11761760053554762", -263},
  {9.7483905624680826663067588e+33, "9748390562468083", 34},
  {8.9261966523999218296138345e+258, "8926196652399922", 259},
  {3.3103801036512737592157769e-39, "3310380103651274", -38},
  {7.7477058518187414763367279e+292, "77477058518187415", 293},
  {7.9250113874214232698063933e+86, "7925011387421423", 87},
  {1.6393084609492692282665455e-197, "16393084609492692", -196},
  {1.4928837753806065662136303e+291, "14928837753806066", 292},
  {2.7351514726443260254571679e-88, "2735151472644326", -87},
  {1.4189262079072998076799121e+78, "14189262079072998", 79},
  {1.9233623499186379130547011e-205, "1923362349918638", -204},
  {3.6226749701226481891844629e-148, "3622674970122648", -147},
  {3.1991629237660633165713721e+284, "3199162923766063", 285},
  {2.9283212912762036224253061e-270, "29283212912762036", -269},
  {2.1038425631641241105242750e-303, "2103842563164124", -302},
  {3.8659251736984897781477793e-210, "386592517369849", -209},
  {2.5930708154586470577541560e+231, "2593070815458647", 232},
  {2.7915386326506864531461308e-122, "27915386326506865", -121},
  {1.9545765103610244750976562e+11, "19545765103610245", 12},
  {3.3502898727916127268065668e-138, "3350289872791613", -137},
  {1.1623681665655524530424197e-71, "11623681665655525", -70},
  {9.9488318219923499710673236e-88, "994883182199235", -87},
  {2.2202253200580615275332592e-147, "22202253200580615", -146},
  {2.0960749315200094202319410e+95, "20960749315200094", 96},
  {1.6933411160384957779087459e+72, "16933411160384958", 73},
  {2.8590131755256790692184463e+257, "2859013175525679", 258},
  {9.8437381214694515801966190e+05, "9843738121469452", 6},
  {2.0474200942291531095362999e-256, "2047420094229153", -255},
  {2.3515923765019967161058604e+206, "23515923765019967", 207},
  {1.8112059877193077968225815e-241, "18112059877193078", -240},
  {1.4059526216419858289951794e+59, "14059526216419858", 60},
  {1.0856573288926832670343167e+265, "10856573288926833", 266},
  {2.1851859539310541566071494e+222, "2185185953931054", 223},
  {1.5014165187824917273313603e-253, "15014165187824917", -252},
  {3.9297209559955939338000625e+299, "3929720955995594", 300},
  {8.7629616291392430345153710e-183, "8762961629139243", -182},
  {1.6013074999752094282654665e+145, "16013074999752094", 146},
  {2.9180401532213669608838631e-207, "2918040153221367", -206},
  {1.2830754460366747520605755e+122, "12830754460366748", 123},
  {2.5568598829968696696009032e-222, "25568598829968697", -221},
  {9.0739410932804848207118072e-241, "9073941093280485", -240},
  {3.2987692413414013137830733e-68, "32987692413414013", -67},
  {6.2487104499332025353717737e-14, "6248710449933203", -13},
  {3.7618535400827560748840158e+95, "3761853540082756", 96},
  {6.5521999052682426431672433e-40, "6552199905268243", -39},
  {1.7162408883019391238474805e+189, "17162408883019391", 190},
  {4.2574584104306684031015699e-72, "42574584104306684", -71},
  {9.0793836819904690107638202e-234, "9079383681990469", -233},
  {8.9476669620946662400000000e+17, "8947666962094666", 18},
  {5.1107662173352564743815760e+79, "51107662173352565", 80},
  {6.1572528188045352315699904e-27, "6157252818804535", -26},
  {6.7116490588529901930789808e-256, "671164905885299", -255},
  {8.4981023198638069359995106e+223, "8498102319863807", 224},
  {4.3329993194096937550264685e-62, "4332999319409694", -61},
  {1.2510362050240984614614308e-27, "12510362050240985", -26},
  {3.8351780784388695599438652e+84, "38351780784388696", 85},
  {2.7131185480577119218715332e-172, "2713118548057712", -171},
  {6.2768370517538653142751494e-211, "6276837051753865", -210},
  {7.1789179521782025638006132e-173, "7178917952178203", -172},
  {7.3882436766304375061424360e-184, "7388243676630438", -183},
  {4.3911098422222325446032780e+129, "43911098422222325", 130},
  {1.5215595998079228785950586e-190, "1521559599807923", -189},
  {8.8679577176476966834370219e+65, "8867957717647697", 66},
  {1.8634948984266785816229688e-215, "18634948984266786", -214},
  {3.9294774340237787607672969e-163, "3929477434023779", -162},
  {4.7640909373377758789062500e+11, "4764090937337776", 12},
  {9.6792288447285255619033220e-33, "9679228844728526", -32},
  {7.2003800119704022619386994e-44, "7200380011970402", -43},
  {3.1967523209397298343635354e+31, "319675232093973", 32},
  {1.2849693460174347550632885e-16, "12849693460174348", -15},
  {2.3836895164827488768910513e-02, "2383689516482749", -1},
  {8.7772627507651993674686362e-107, "8777262750765199", -106},
  {6.0701999255124121059648575e-198, "6070199925512412", -197},
  {9.3566245149077872424131741e-216, "9356624514907787", -215},
  {2.6227313275316053037741060e+138, "26227313275316053", 139},
  {2.4934271654753906958468065e+83, "24934271654753907", 84},
  {6.9994569001915849968275506e-82, "6999456900191585", -81},
  {5.2482032578774263968392385e+62, "5248203257877426", 63},
  {6.6883393679665213873055973e+121, "6688339367966521", 122},
  {3.8023921761192748393224531e-144, "3802392176119275", -143},
  {3.2736012816028741967812091e+138, "3273601281602874", 139},
  {1.1226560950046641038180947e-58, "11226560950046641", -57},
  {8.9140155940764548751096041e+76, "8914015594076455", 77},
  {8.4252647281502717068759749e-289, "8425264728150272", -288},
  {1.8829618987932374035584585e-236, "18829618987932374", -235},
  {1.3621162216845596088039873e-256, "13621162216845596", -255},
  {1.7318241736275674429128704e+25, "17318241736275674", 26},
  {5.1153929215425123902950450e-102, "5115392921542512", -101},
  {5.6651665256254874752201997e+79, "56651665256254875", 80},
  {1.0030093041176977675968270e-116, "10030093041176978", -115},
  {1.8701841348994023148352430e-299, "18701841348994023", -298},
  {1.8725221486704202425673034e+224, "18725221486704202", 225},
  {2.5548766858188422364675725e-279, "25548766858188422", -278},
  {2.5474372501853149822190911e-274, "2547437250185315", -273},
  {5.4438247350133836083619007e+78, "5443824735013384", 79},
  {1.5410579625287846869503223e-197, "15410579625287847", -196},
  {1.4433165838967025961742438e-266, "14433165838967026", -265},
  {1.6694199974807723663161596e+01, "16694199974807724", 2},
  {3.8485578276211356587698211e-62, "38485578276211357", -61},
  {9.5929906515142848561402383e-166, "9592990651514285", -165},
  {2.1864145637061657032137473e-221, "21864145637061657", -220},
  {9.1834960928360103140595341e+118, "918349609283601", 119},
  {2.3590620425631997937647503e-212, "23590620425631998", -211},
  {7.1148339875024153629014185e-80, "7114833987502415", -79},
  {1.3839307562307695408635264e+104, "13839307562307695", 105},
  {4.1643949485045934731918189e+278, "41643949485045935", 279},
  {3.2431117787244190167351715e+94, "3243111778724419", 95},
  {2.0893766729703266780155372e+79, "20893766729703267", 80},
  {7.2538036534187873537512260e-232, "7253803653418787", -231},
  {3.8658288560422921799903488e+141, "3865828856042292", 142},
  {6.7398836697142474706657930e-136, "67398836697142475", -135},
  {8.9953721334227521334242204e+38, "8995372133422752", 39},
  {2.4340913790728276874638311e-126, "24340913790728277", -125},
  {1.2401118115667016258895541e-272, "12401118115667016", -271},
  {4.1645677262837939930678349e+284, "4164567726283794", 285},
  {4.0724574148209174840103400e+177, "40724574148209175", 178},
  {2.1459354532507586396160000e+21, "21459354532507586", 22},
  {3.8710366603301243904056150e-01, "38710366603301244", 0},
  {3.8960264985994842664326659e+269, "3896026498599484", 270},
  {2.7495060023273065165836587e-209, "27495060023273065", -208},
  {5.2073090318228883994655755e+242, "5207309031822888", 243},
  {4.2083512221046905832076647e+158, "42083512221046906", 159},
  {1.7487473847031533789813987e-239, "17487473847031534", -238},
  {7.2325931829468965247838569e+113, "7232593182946897", 114},
  {3.1838453015199256175418681e+143, "31838453015199256", 144},
  {3.7122706500355215382990726e-222, "37122706500355215", -221},
  {1.3146100371458742321334768e-191, "13146100371458742", -190},
  {1.0073028607102956802504313e-237, "10073028607102957", -236},
  {3.8166807195204633472273506e-97, "38166807195204633", -96},
  {1.4381320298846453194896111e+128, "14381320298846453", 129},
  {2.8649508048473823153169066e-291, "28649508048473823", -290},
  {1.7827529779991725717991358e+03, "17827529779991726", 4},
  {3.1666420227377218024616290e-211, "3166642022737722", -210},
  {1.0456940627071610107421875e+12, "1045694062707161", 13},
  {1.3027711929123646340548407e-101, "13027711929123646", -100},
  {6.2851583016670232357954863e-122, "6285158301667023", -121},
  {3.7658037021234334473290415e-130, "37658037021234334", -129},
  {3.4722769817126164193614141e-298, "34722769817126164", -297},
  {1.2216219704759173148579212e+253, "12216219704759173", 254},
  {1.1191940252517697148145175e+99, "11191940252517697", 100},
  {1.0878742953684088860079773e+123, "10878742953684089", 124},
  {1.1020625837079710274135635e-01, "1102062583707971", 0},
  {1.2879689170133601622032470e+299, "12879689170133602", 300},
  {2.7580152285947828926362211e+123, "2758015228594783", 124},
  {1.9273047538062538788743362e+232, "1927304753806254", 233},
  {5.7955961739266683742466139e-28, "5795596173926668", -27},
  {2.5369719330423067931413048e+143, "2536971933042307", 144},
  {1.7433609838851550843763053e-238, "1743360983885155", -237},
  {3.5059344794029890736449260e-121, "3505934479402989", -120},
  {6.7697545201397732117627729e+66, "6769754520139773", 67},
  {2.7419659670599939699018813e+138, "2741965967059994", 139},
  {5.2252737100674292732352371e+221, "5225273710067429", 222},
  {4.1523606239470770228876640e-126, "4152360623947077", -125},
  {1.1332113463489301695083873e-114, "11332113463489302", -113},
  {6.4886933970679624146725052e+155, "6488693397067962", 156},
  {2.2204963956977525690706983e+274, "22204963956977526", 275},
  {1.1273457244436176031097239e+128, "11273457244436176", 129},
  {3.3402438047822729822202666e+52, "3340243804782273", 53},
  {6.4146236465825073505016342e+198, "6414623646582507", 199},
  {3.2552490363056571110050545e-173, "3255249036305657", -172},
  {3.3338019367346518854719823e-124, "3333801936734652", -123},
  {2.2474048015887206563105892e-232, "22474048015887207", -231},
  {5.1121070345945036613907469e-251, "5112107034594504", -250},
  {1.2354716406773675420429194e-120, "12354716406773675", -119},
  {1.2355467588778204005201841e+67, "12355467588778204", 68},
  {8.4976183158086830504470642e-75, "8497618315808683", -74},
  {9.4947032068846533280868870e-37, "9494703206884653", -36},
  {6.4363880534178654607295383e-115, "64363880534178655", -114},
  {2.4094274824163130198467236e+166, "2409427482416313", 167},
  {4.2901441006585801587491154e+223, "429014410065858", 224},
  {1.2546314538608584882425915e-118, "12546314538608585", -117},
  {6.3088062025244346208628124e-89, "6308806202524435", -88},
  {4.9649649531278804065992885e-77, "49649649531278804", -76},
  {6.9363436973887294644332177e+287, "693634369738873", 288},
  {1.0419871333891796035688023e+230, "10419871333891796", 231},
  {1.6723456912616579846725212e-220, "1672345691261658", -219},
  {4.6114387464195105486783333e-04, "46114387464195105", -3},
  {7.5074732630302597470141626e+237, "750747326303026", 238},
  {3.1628297302142150770812385e-207, "3162829730214215", -206},
  {2.7993491393277031109845790e+59, "2799349139327703", 60},
  {2.5601635507618183877738927e+42, "25601635507618184", 43},
  {7.1769052163780014615505032e+81, "71769052163780015", 82},
  {1.7129485939992928464321281e-50, "17129485939992928", -49},
  {4.2524385186246728023725252e+253, "4252438518624673", 254},
  {6.4745823570509245467797134e+257, "6474582357050925", 258},
  {7.7031109168575967071436018e+277, "7703110916857597", 278},
  {2.9667792618375434692558027e+105, "29667792618375435", 106},
  {4.9482798864433601728747061e-205, "494827988644336", -204},
  {1.5055630693398583115336820e+160, "15055630693398583", 161},
  {1.2815155642803425858591839e-142, "12815155642803426", -141},
  {4.4303378881523454810597704e-272, "44303378881523455", -271},
  {4.3225504581556576649594818e+52, "43225504581556577", 53},
  {2.7261961116778158134445704e-49, "2726196111677816", -48},
  {7.2126710596571828862695903e-231, "7212671059657183", -230},
  {1.1207675030774987259536658e+163, "11207675030774987", 164},
  {3.1358634140342339842173187e+36, "3135863414034234", 37},
  {9.6422913061924852683237663e+222, "9642291306192485", 223},
  {1.7685505081963203519364181e+273, "17685505081963204", 274},
  {1.1029404948111838102340698e+08, "11029404948111838", 9},
  {2.9918541442535835304680292e+224, "29918541442535835", 225},
  {1.4938872679228726420580595e+91, "14938872679228726", 92},
  {4.4834375082096614073371197e+27, "44834375082096614", 28},
  {2.9514332819707604000000000e+16, "29514332819707604", 17},
  {2.2248438605465931421818208e+202, "2224843860546593", 203},
  {9.6856382363768290922117227e-42, "9685638236376829", -41},
  {1.0337660988362968676649696e-79, "10337660988362969", -78},
  {2.1033180544588431712432782e+214, "21033180544588432", 215},
  {8.4177795574787538944000000e+19, "8417779557478754", 20},
  {2.9739405181650102500581819e-09, "29739405181650103", -8},
  {3.2485098517276076647173837e-142, "32485098517276077", -141},
  {1.8390988451324252674084456e+123, "18390988451324253", 124},
  {1.8974100909696223349479537e-21, "18974100909696223", -20},
  {3.5106967437891356542678523e-01, "35106967437891357", 0},
  {7.3679052835632729282881352e-215, "7367905283563273", -214},
  {1.0399013854301769817861210e-55, "1039901385430177", -54},
  {1.6116355785584400647199162e+198, "161163557855844", 199},
  {4.9520648835693702427901917e-70, "495206488356937", -69},
  {1.5871556675410645465786701e-180, "15871556675410645", -179},
  {1.4362992883514654066833414e-163, "14362992883514654", -162},
  {5.7557559694756222800480380e+49, "5755755969475622", 50},
  {1.6869826946429080399970912e+71, "1686982694642908", 72},
  {2.4002147593028435949236155e+04, "24002147593028436", 5},
  {1.0641745505864304739146844e+56, "10641745505864305", 57},
  {9.9570353239024617027185540e+87, "9957035323902462", 88},
  {7.8421051887480013167646450e-161, "7842105188748001", -160},
  {3.8266451951435591139549818e+288, "3826645195143559", 289},
  {1.2876185285794209634045965e-27, "1287618528579421", -26},
  {1.0194250547562291402970304e-33, "10194250547562291", -32},
  {1.7597081026218275936868205e-168, "17597081026218276", -167},
  {7.6218995437208201586065399e+87, "762189954372082", 88},
  {1.7222987549660355829316749e+297, "17222987549660356", 298},
  {3.9801198481165311390165004e-47, "3980119848116531", -46},
  {1.0826059601331906636758422e-116, "10826059601331907", -115},
  {3.0297624331176125067668411e-271, "30297624331176125", -270},
  {2.5376451008143371387535360e+24, "2537645100814337", 25},
  {1.0272064516034848530017450e-29, "10272064516034849", -28},
  {3.1145595601765540591839665e-72, "3114559560176554", -71},
  {2.0126125389690668289667972e+179, "20126125389690668", 180},
  {5.4151565518036956802239693e+26, "5415156551803696", 27},
  {1.7464378669648197467594306e-13, "17464378669648197", -12},
  {2.5009318989824710438806622e+252, "2500931898982471", 253},
  {9.9594411779128173038742735e-113, "9959441177912817", -112},
  {9.6095861833024576143048816e+98, "9609586183302458", 99},
  {2.4892890772902156997600680e-128, "24892890772902157", -127},
  {1.4176078231426836399265831e+202, "14176078231426836", 203},
  {3.1368757182082838836762258e-85, "3136875718208284", -84},
  {8.6403650020750526142102216e+281, "8640365002075053", 282},
  {5.5874949283897752223329668e-183, "5587494928389775", -182},
  {3.3989324164926459037172827e-42, "3398932416492646", -41},
  {1.6821351070503896588569870e-223, "16821351070503897", -222},
  {1.3707421536310551679259946e+237, "13707421536310552", 238},
  {3.8157948103788070523169427e+149, "3815794810378807", 150},
  {3.6282337973198492479096398e+106, "36282337973198492", 107},
  {7.2928806341606819344305542e-305, "7292880634160682", -304},
  {1.0070190050051010696176770e-138, "1007019005005101", -137},
  {2.1411707112271191777205563e-35, "21411707112271192", -34},
  {4.7645691729314855103918486e-144, "47645691729314855", -143},
  {7.7306703413392007752728573e-69, "7730670341339201", -68},
  {2.5575219339000014882232178e+56, "25575219339000015", 57},
  {4.9242901902859433758588915e+297, "49242901902859434", 298},
  {4.2034041240077344868581809e+106, "42034041240077345", 107},
  {1.4218673488210463509891201e+58, "14218673488210464", 59},
  {9.9773803623584999935045214e+220, "99773803623585", 221},
  {5.3328390183103656427841635e-75, "5332839018310366", -74},
  {1.8424829428410201387666738e-66, "18424829428410201", -65},
  {2.9087351979073888744128286e-87, "2908735197907389", -86},
  {1.8928326151121157355233176e+208, "18928326151121157", 209},
  {1.5812120680970132298175269e+168, "15812120680970132", 169},
  {4.0917531517898774175274451e-244, "40917531517898774", -243},
  {1.8337717420772234300319631e-120, "18337717420772234", -119},
  {4.9402913763733820266936820e-147, "4940291376373382", -146},
  {8.3654956464634275528693559e+295, "8365495646463428", 296},
  {1.6076661856114061759932877e+106, "16076661856114062", 107},
  {2.4513803127870488518169098e-267, "2451380312787049", -266},
  {4.7810190821540765966395124e+158, "4781019082154077", 159},
  {8.9194912989836285719129336e+127, "8919491298983629", 128},
  {1.5522990534155608613549470e-189, "15522990534155609", -188},
  {8.8641600139826249447318983e+172, "8864160013982625", 173},
  {4.8590113549131027057990236e-169, "48590113549131027", -168},
  {9.4041829015648447605297857e+272, "9404182901564845", 273},
  {5.5040587438695101380088659e-06, "550405874386951", -5},
  {1.1169468013569438030182145e-281, "11169468013569438", -280},
  {2.1916539921384476965180838e-284, "21916539921384477", -283},
  {3.3797681477408488912991807e+75, "3379768147740849", 76},
  {2.3204248034087557275600798e+185, "23204248034087557", 186},
  {8.4012086844435949402509533e-222, "8401208684443595", -221},
  {2.5370750895419876953826543e-263, "25370750895419877", -262},
  {7.9039222641370072992261511e+288, "7903922264137007", 289},
  {1.2787115070613417026585667e-49, "12787115070613417", -48},
  {1.2463866742833603270166750e-266, "12463866742833603", -265},
  {9.7971565862955322682389455e+275, "9797156586295532", 276},
  {2.1413704393609112720941613e-17, "21413704393609113", -16},
  {3.1586189847883286002114218e+231, "31586189847883286", 232},
  {3.6177977235188268960888751e+220, "3617797723518827", 221},
  {3.2830695182437811192625166e-269, "3283069518243781", -268},
  {2.6829237114133805499223630e+103, "26829237114133805", 104},
  {2.8179840165121721270417380e-261, "2817984016512172", -260},
  {1.3101460496162311634597465e+201, "13101460496162312", 202},
  {9.1288141535835102223496023e-57, "912881415358351", -56},
  {4.3663039284036470046720000e+21, "4366303928403647", 22},
  {2.5017687814228979097271566e+289, "2501768781422898", 290},
  {1.1173686249367169763100377e+61, "1117368624936717", 62},
  {3.0727439584011673916551753e-234, "30727439584011674", -233},
  {1.4174670062905708396503596e+228, "14174670062905708", 229},
  {2.8116460369527868750000000e+14, "2811646036952787", 15},
  {2.7860195855116115261607507e-227, "27860195855116115", -226},
  {6.8890124587708300462268579e+149, "688901245877083", 150},
  {7.5379297234710348380391834e+258, "7537929723471035", 259},
  {1.6118540038399956736764689e-49, "16118540038399957", -48},
  {9.2885140476500308649016157e-149, "928851404765003", -148},
  {2.4301136386350064196666386e-258, "24301136386350064", -257},
  {6.2029709335532359854474715e-138, "6202970933553236", -137},
  {1.3660709552603962920201948e-164, "13660709552603963", -163},
  {1.3980295755947943426727334e+254, "13980295755947943", 255},
  {5.3934301838226406962468619e-281, "5393430183822641", -280},
  {1.1550828632615787661957519e+119, "11550828632615788", 120},
  {5.3719934824411217732267007e-226, "5371993482441122", -225},
  {1.5487699929604112122534873e+116, "15487699929604112", 117},
  {2.1658902880222950000000000e+15, "2165890288022295", 16},
  {3.0677734206550746840753765e-175, "30677734206550747", -174},
  {1.6352827437322067594166525e-221, "16352827437322068", -220},
  {3.2974201064600622979902110e-71, "32974201064600623", -70},
  {1.1138772862293722135851709e-261, "11138772862293722", -260},
  {1.8087074309213077380481289e-268, "18087074309213077", -267},
  {1.5158819507733134512189058e-159, "15158819507733135", -158},
  {3.5482258659218642524578876e+265, "3548225865921864", 266},
  {2.6564876731916542107273147e+115, "2656487673191654", 116},
  {5.7826372188676332181318977e+102, "5782637218867633", 103},
  {1.3387343665793428071575974e+218, "13387343665793428", 219},
  {1.4662809676907489651821854e+31, "1466280967690749", 32},
  {1.6146253848246200465883946e+168, "161462538482462", 169},
  {3.3515852896465119670904230e-277, "3351585289646512", -276},
  {1.3406161700682947832413021e+176, "13406161700682948", 177},
  {7.6578605404672338117302105e-139, "7657860540467234", -138},
  {2.8487435187180853609924363e+158, "28487435187180854", 159},
  {1.9992414873683474362970754e-122, "19992414873683474", -121},
  {2.3854549307421918973100394e-106, "2385454930742192", -105},
  {1.4841377215899338898901810e+174, "14841377215899339", 175},
  {3.7740649513290632403359714e+36, "3774064951329063", 37},
  {1.7383309511735723002118370e+43, "17383309511735723", 44},
  {1.0921533739124153957697055e-287, "10921533739124154", -286},
  {2.3289270922856228698788738e-233, "2328927092285623", -232},
  {3.8498173704213695317017732e+81, "38498173704213695", 82},
  {3.3673684812653107846560657e-163, "3367368481265311", -162},
  {2.5670960419909125347955492e-195, "25670960419909125", -194},
  {6.0999239822314605712890625e+09, "6099923982231461", 10},
  {1.1719231738442482062458880e+24, "11719231738442482", 25},
  {5.1639000498702808514612385e+281, "5163900049870281", 282},
  {5.1846654227599496238685181e+187, "518466542275995", 188},
  {4.6396834342703491219601913e-14, "4639683434270349", -13},
  {7.5831734277985855937004089e+07, "7583173427798586", 8},
  {1.2782873645817614992539563e-269, "12782873645817615", -268},
  {6.7928982734943853641320509e+102, "6792898273494385", 103},
  {7.0741137082520967910557746e+150, "7074113708252097", 151},
  {5.8883016268725235827241074e+201, "5888301626872524", 202},
  {6.8753086211746528754259402e+301, "6875308621174653", 302},
  {7.3612033867415914357592794e+183, "7361203386741591", 184},
  {2.2060355660161941278527666e-178, "2206035566016194", -177},
  {9.3748702576151361804452872e-91, "9374870257615136", -90},
  {1.0869459418322258343398100e-13, "10869459418322258", -12},
  {5.4814665239652376671189738e-254, "5481466523965238", -253},
  {7.5737494053080240764598810e-272, "7573749405308024", -271},
  {8.9819451838196355407749176e-09, "8981945183819636", -8},
  {1.0033695546397477682662466e-175, "10033695546397478", -174},
  {1.9183308116204865368808032e+178, "19183308116204865", 179},
  {5.6169915786471809028386961e-172, "5616991578647181", -171},
  {6.1253109183831662339862392e+101, "6125310918383166", 102},
  {3.2698476824352114973081074e-177, "32698476824352115", -176},
  {2.2231448351623058553118085e-98, "2223144835162306", -97},
  {7.1826674580734687855872806e-196, "7182667458073469", -195},
  {9.2574813456681890579159332e-70, "9257481345668189", -69},
  {1.5368149421049474755521235e-28, "15368149421049475", -27},
  {5.3034528947212026264242839e-24, "53034528947212026", -23},
  {1.0146591788465543151820701e-171, "10146591788465543", -170},
  {6.6938125174215329212798938e-227, "6693812517421533", -226},
  {8.8370890762231676423462825e-79, "8837089076223168", -78},
  {4.7261716175129254662536700e-211, "47261716175129255", -210},
  {6.1872632952589436087146465e+205, "6187263295258944", 206},
  {1.4502144848728814785185838e-245, "14502144848728815", -244},
  {5.9022755252710598166790180e+249, "590227552527106", 250},
  {9.8139337536654745600000000e+17, "9813933753665475", 18},
  {1.0814829347298516241551637e-77, "10814829347298516", -76},
  {1.0999656285632141682271693e+144, "10999656285632142", 145},
  {9.8659989890388251817616120e+229, "9865998989038825", 230},
  {4.2387553173946154522321178e-35, "42387553173946155", -34},
  {2.9165790098202085064241161e+202, "29165790098202085", 203},
  {1.0280802581857325493989640e-139, "10280802581857325", -138},
  {1.3557189151792072711292069e-207, "13557189151792073", -206},
  {9.6423481394326379352910607e-47, "9642348139432638", -46},
  {4.4400112870828803981240356e-290, "44400112870828804", -289},
  {1.4561928294744016506893044e+60, "14561928294744017", 61},
  {4.0140163592140370344588265e-70, "4014016359214037", -69},
  {3.5530190793930203653872013e+05, "35530190793930204", 6},
  {6.0764276085893615291586966e-205, "60764276085893615", -204},
  {4.2248427440275903262697483e-135, "42248427440275903", -134},
  {9.7469266759810237884521484e+09, "9746926675981024", 10},
  {8.2614752209110935430425538e-51, "8261475220911094", -50},
  {4.2051903077663926220899020e-184, "42051903077663926", -183},
  {1.4668403382404408721079986e-118, "14668403382404409", -117},
  {2.1054668615012143648686244e-265, "21054668615012144", -264},
  {2.3891196886561225662692494e-266, "23891196886561226", -265},
  {2.5631187741885906757843262e+290, "25631187741885907", 291},
  {3.6443824497862584703440124e-104, "36443824497862585", -103},
  {1.5939362206084699457174643e-53, "159393622060847", -52},
  {1.1990418239528642000000000e+16, "11990418239528642", 17},
  {1.2400905945412549557230918e-104, "1240090594541255", -103},
  {3.9559638347948173521643724e-85, "39559638347948174", -84},
  {1.4141157798277099450075935e+162, "141411577982771", 163},
  {9.7359002803495752192605362e-260, "9735900280349575", -259},
  {7.8876814009622215195838411e+150, "7887681400962222", 151},
  {3.3852625386151666313396341e-64, "33852625386151666", -63},
  {2.1338200447864335735951050e-196, "21338200447864336", -195},
  {4.2149679179265627342586180e+197, "4214967917926563", 198},
  {1.6983951606364770477652549e-137, "1698395160636477", -136},
  {1.8137407036131184379415078e-62, "18137407036131184", -61},
  {1.9408573682202058790748035e+81, "1940857368220206", 82},
  {2.6270293777236581397720454e+111, "2627029377723658", 112},
  {5.2589692624152892812951065e+33, "5258969262415289", 34},
  {5.5482253403155979174713383e-174, "5548225340315598", -173},
  {2.5396950151516576290166766e-83, "25396950151516576", -82},
  {1.8815215079294109301599747e+01, "1881521507929411", 2},
  {3.2832061501913097500163403e+202, "32832061501913098", 203},
  {1.1685400529611669779411880e+156, "1168540052961167", 157},
  {1.9129414981642397764318712e+288, "19129414981642398", 289},
  {1.7828744851174421371423231e-253, "1782874485117442", -252},
  {2.0526380184362211245861418e-106, "20526380184362211", -105},
  {4.7812245976536170331625805e+120, "4781224597653617", 121},
  {1.6147218057885064948757540e-279, "16147218057885065", -278},
  {1.3779580989510735223174867e+191, "13779580989510735", 192},
  {5.4008893940372574447919009e-170, "54008893940372574", -169},
  {5.5643657894843235651218022e+45, "55643657894843236", 46},
  {5.9081817889347175083089686e-97, "5908181788934718", -96},
  {4.5834803964617713595458228e-280, "4583480396461771", -279},
  {1.1085844498625093711539968e-193, "11085844498625094", -192},
  {3.8028242854683517072191160e+220, "38028242854683517", 221},
  {9.1100212256847052317692962e-268, "9110021225684705", -267},
  {2.9884422498001439731412621e-268, "2988442249800144", -267},
  {4.0424184034204762893259380e+180, "40424184034204763", 181},
  {2.0821327397349530618478779e+231, "2082132739734953", 232},
  {1.1801009875587801900564955e+02, "11801009875587802", 3},
  {1.1158181280414924020243974e-138, "11158181280414924", -137},
  {1.9564553666709701538085938e+11, "19564553666709702", 12},
  {9.5007110715444412231445312e+09, "9500711071544441", 10},
  {7.3147961453804268725606072e+124, "7314796145380427", 125},
  {7.3560386873987760760863193e-295, "7356038687398776", -294},
  {3.9531063549962934276679942e+242, "39531063549962934", 243},
  {3.3419775961968405875811134e-65, "33419775961968406", -64},
  {1.2614644136710642047428192e+143, "12614644136710642", 144},
  {8.6949334962068935512637135e+126, "8694933496206894", 127},
  {6.8386474320472526301617768e-284, "6838647432047253", -283},
  {1.3523443711777013938609565e-16, "13523443711777014", -15},
  {1.5151954958694066174545930e-174, "15151954958694066", -173},
  {2.7080088062706190494478757e+289, "2708008806270619", 290},
  {4.7424973934082833225566376e+145, "47424973934082833", 146},
  {8.5224260800969103970101826e-303, "852242608009691", -302},
  {3.2401534495486237623483244e+145, "3240153449548624", 146},
  {1.1620444462993492992075993e-163, "11620444462993493", -162},
  {5.7925524306760233913511921e+55, "5792552430676023", 56},
  {1.0860233171332761387131332e+119, "10860233171332761", 120},
  {4.5262342531993417398279143e+106, "4526234253199342", 107},
  {7.5847203015105336563947036e-45, "7584720301510534", -44},
  {3.2916066542753638976669326e+39, "3291606654275364", 40},
  {2.0545515805242774963378906e+10, "20545515805242775", 11},
  {1.6107245309539723305397940e-271, "16107245309539723", -270},
  {3.7574476414294528090583103e-238, "3757447641429453", -237},
  {2.4916333091829256148852073e+243, "24916333091829256", 244},
  {2.6786838244698557020059855e+267, "26786838244698557", 268},
  {7.6654800776804070845607951e+236, "7665480077680407", 237},
  {3.3104855058577532000000000e+16, "33104855058577532", 17},
  {1.5859612801731421619378785e+295, "15859612801731422", 296},
  {8.5799355703729502616482245e-178, "857993557037295", -177},
  {6.3801209855903993220300800e+24, "6380120985590399", 25},
  {5.7974329892708384768000000e+19, "57974329892708385", 20},
  {2.2834912428590627181715411e-27, "22834912428590627", -26},
  {3.5142845806700778486961014e-81, "3514284580670078", -80},
  {2.2421402823548045893327528e-60, "22421402823548046", -59},
  {1.0024658985219838391448460e+299, "10024658985219838", 300},
  {1.8336099371521823113807569e-153, "18336099371521823", -152},
  {7.4777797141849338947075631e-27, "7477779714184934", -26},
  {1.4216099574909827572685195e+304, "14216099574909828", 305},
  {7.4873626945155594356614373e-170, "748736269451556", -169},
  {1.6319685922616378579063448e+195, "16319685922616379", 196},
  {1.1728983009636967737625405e-62, "11728983009636968", -61},
  {6.8295666707030812331921455e-148, "6829566670703081", -147},
  {2.0294674911990053063531584e+247, "20294674911990053", 248},
  {7.5531628949788668603552933e-234, "7553162894978867", -233},
  {5.4732820965380004590167072e-116, "5473282096538", -115},
  {1.1915431033503423458444134e+42, "11915431033503423", 43},
  {9.7471044550148479462076087e+96, "9747104455014848", 97},
  {7.6273374843473828774333358e+258, "7627337484347383", 259},
  {1.4072369310514532314044034e+262, "14072369310514532", 263},
  {2.4399059304676950224777934e+282, "2439905930467695", 283},
  {8.7613161640945154233830056e-33, "8761316164094515", -32},
  {1.6858606866885921452694378e-186, "16858606866885921", -185},
  {1.0654720022361406348219810e+72, "10654720022361406", 73},
  {5.8529380409505983497704975e-220, "5852938040950598", -219},
  {5.2129520717504029825306588e-01, "5212952071750403", 0},
  {4.9892561857517019865972083e-109, "4989256185751702", -108},
  {3.2372928574374621333125099e+212, "3237292857437462", 213},
  {2.7611342381230968980553609e+54, "2761134238123097", 55},
  {1.1706427537907530666804765e+103, "1170642753790753", 104},
  {4.1247922354431994160579718e+261, "4124792235443199", 262},
  {2.4120790053525023846166679e-208, "24120790053525024", -207},
  {4.6051591257727590821581348e+123, "4605159125772759", 124},
  {2.3009108529783583424109974e+120, "23009108529783583", 121},
  {8.8018184822601027447422976e+26, "8801818482260103", 27},
  {4.6687301494964147983127686e-142, "4668730149496415", -141},
  {1.4039182640609498478789610e-112, "14039182640609498", -111},
  {1.1959967838494203940234663e-252, "11959967838494204", -251},
  {1.6971280629965163934527389e+85, "16971280629965164", 86},
  {3.0223884750174469343754001e+83, "3022388475017447", 84},
  {2.9607277597192792639647078e+268, "29607277597192793", 269},
  {7.8621508906760308434902569e+232, "7862150890676031", 233},
  {8.2906579722806406797003030e+98, "8290657972280641", 99},
  {7.9044148225264577441165414e-298, "7904414822526458", -297},
  {2.4227177285471766426620674e+36, "24227177285471766", 37},
  {2.8318962223464404284852285e-64, "28318962223464404", -63},
  {3.3947910130789048088571714e+50, "3394791013078905", 51},
  {4.2691612655697042622087521e-159, "42691612655697043", -158},
  {3.9304577998034675799363251e+54, "39304577998034676", 55},
  {5.1842406597288143934965541e-96, "5184240659728814", -95},
  {7.4628271798545053181598122e-13, "7462827179854505", -12},
  {2.2033370256911893563671554e+92, "22033370256911894", 93},
  {1.4286232210860063825202681e+207, "14286232210860064", 208},
  {3.7853323049046703826167314e+34, "37853323049046704", 35},
  {1.9300865915678787903867659e+259, "19300865915678788", 260},
  {3.9812027684006318115683582e+44, "3981202768400632", 45},
  {5.6858742525533186443645292e-38, "5685874252553319", -37},
  {5.7111823274127480570698891e+225, "5711182327412748", 226},
  {1.4196509242715753223536522e-139, "14196509242715753", -138},
  {1.6052103004727770624355018e+173, "1605210300472777", 174},
  {6.8674670740332330520622333e+148, "6867467074033233", 149},
  {4.5976919897448622226234706e+222, "4597691989744862", 223},
  {6.1413287178777398767486552e-219, "614132871787774", -218},
  {1.5008310713733172202344494e+30, "15008310713733172", 31},
  {1.9621497004882300000000000e+16, "196214970048823", 17},
  {6.0645580239725799547574140e+175, "606455802397258", 176},
  {1.7050470722185828448615289e+137, "17050470722185828", 138},
  {1.6750888580175194442303293e+245, "16750888580175194", 246},
  {8.3473400889774871431419875e-85, "8347340088977487", -84},
  {3.2017794955762901847761778e+145, "320177949557629", 146},
  {1.0080655350170523061514142e-274, "10080655350170523", -273},
  {5.3369376742907379367280004e-109, "5336937674290738", -108},
  {5.6718971043875012376583173e-220, "5671897104387501", -219},
  {4.0485220148768784000000000e+16, "4048522014876878", 17},
  {3.0810653780875683931854761e-06, "30810653780875684", -5},
  {1.5561046437545419132166984e-32, "1556104643754542", -31},
  {1.7092713623061991284545091e-211, "17092713623061991", -210},
  {8.0016414748052007988193701e-289, "8001641474805201", -288},
  {1.6068255097031629090164411e+115, "1606825509703163", 116},
  {1.2391826633598276284366713e-58, "12391826633598276", -57},
  {1.6628446710123215164126752e-169, "16628446710123215", -168},
  {1.0361086116486217532326786e+119, "10361086116486218", 120},
  {1.4240986236147361482465544e+192, "14240986236147361", 193},
  {2.0231139956880343940262428e-189, "20231139956880344", -188},
  {2.5870906470462327485889471e-251, "25870906470462327", -250},
  {1.4026891613856204972235381e+66, "14026891613856205", 67},
  {1.3188861878948029540238014e-72, "1318886187894803", -71},
  {8.9280431312492804089839616e+25, "892804313124928", 26},
  {9.5817434135777242581031029e-73, "9581743413577724", -72},
  {7.3518008900935080568743589e+146, "7351800890093508", 147},
  {2.1219402667650745551053271e+281, "21219402667650746", 282},
  {2.6220022519144043976920253e+303, "26220022519144044", 304},
  {2.5135168454779510681831542e+111, "2513516845477951", 112},
  {4.0805453608377978043627637e+223, "4080545360837798", 224},
  {1.6525979369510882500000000e+15, "16525979369510882", 16},
  {1.1330880462316275839640294e+168, "11330880462316276", 169},
  {1.6718147321725881192833185e+06, "16718147321725881", 7},
  {3.4110501291006904934807693e+57, "34110501291006905", 58},
  {1.8780834685552866793931747e-75, "18780834685552867", -74},
  {1.3045829230834922110712423e-05, "13045829230834922", -4},
  {4.9944590088704558743271051e-198, "4994459008870456", -197},
  {7.4756988346564374737281715e+230, "74756988346564375", 231},
  {3.2122154208567468697707284e-99, "3212215420856747", -98},
  {2.2219047542352323296459780e-33, "22219047542352323", -32},
  {2.7128174463890734158261043e+299, "27128174463890734", 300},
  {5.7740588618015053815360782e+28, "5774058861801505", 29},
  {1.8995372234976011722817051e-171, "18995372234976012", -170},
  {2.0380400671068569949644362e+83, "2038040067106857", 84},
  {1.2705444568287483033281675e-104, "12705444568287483", -103},
  {1.8852065233203047608236698e-153, "18852065233203048", -152},
  {3.9608558588985853720651762e-116, "39608558588985854", -115},
  {8.7756917699052091039457383e+131, "8775691769905209", 132},
  {3.9086950571351474071922388e-205, "39086950571351474", -204},
  {9.3488339972649927414381863e+306, "9348833997264993", 307},
  {1.7755882047708540608069406e-66, "1775588204770854", -65},
  {1.2468925153560358604992482e-26, "12468925153560359", -25},
  {4.3722926632703896441022371e-29, "43722926632703896", -28},
  {6.7255911347419405088836289e+28, "67255911347419405", 29},
  {1.0093986390064934449695144e-02, "10093986390064934", -1},
  {4.6231410175998563714846967e-300, "46231410175998564", -299},
  {2.7138003767491880704754556e+293, "2713800376749188", 294},
  {6.0338785293388051021165896e+196, "6033878529338805", 197},
  {4.4324382526027855962411365e+224, "4432438252602786", 225},
  {7.0453574286924782420992753e+126, "7045357428692478", 127},
  {1.6601747673556236937969964e+81, "16601747673556237", 82},
  {4.0603319715337207705759930e+194, "4060331971533721", 195},
  {5.5774217276787844947576016e-35, "5577421727678784", -34},
  {5.9515945151282382795720463e+65, "5951594515128238", 66},
  {3.1524918173789538192048635e-293, "3152491817378954", -292},
  {1.0004933674655226626495408e+276, "10004933674655227", 277},
  {3.9741568007358424490833356e+168, "39741568007358424", 169},
  {2.0903821405738846472758994e-50, "20903821405738846", -49},
  {1.6498587183720982137410435e-71, "16498587183720982", -70},
  {3.7037451327319097454928990e+157, "370374513273191", 158},
  {4.9267660289094253928541191e+215, "49267660289094254", 216},
  {1.8059059366198574179453889e-306, "18059059366198574", -305},
  {1.9443519675674622706492875e-138, "19443519675674623", -137},
  {1.7452873440750034337261819e-241, "17452873440750034", -240},
  {1.2877201743806908585803407e-71, "12877201743806909", -70},
  {1.4445487077844139283709604e+156, "1444548707784414", 157},
  {5.6238611479970757850377995e+265, "5623861147997076", 266},
  {6.8942302893356412414143960e-37, "6894230289335641", -36},
  {3.6003444748157896351774371e+172, "36003444748157896", 173},
  {1.9413274986120844930219805e-248, "19413274986120845", -247},
  {3.0403088087471413937809473e+217, "30403088087471414", 218},
  {2.8212552732081174021025217e+40, "28212552732081174", 41},
  {3.9066969780745524588384104e+298, "39066969780745525", 299},
  {1.0439739813430311875346913e+244, "10439739813430312", 245},
  {5.2485371690502439850334715e-21, "5248537169050244", -20},
  {2.7855669525810428368806725e-162, "2785566952581043", -161},
  {2.7241150649375671120001325e+33, "2724115064937567", 34},
  {1.7612074100887029518585859e-178, "1761207410088703", -177},
  {2.4876656270292947470366095e-21, "24876656270292947", -20},
  {1.4459378573545824056943112e-242, "14459378573545824", -241},
  {3.0984664000062344171869541e-231, "30984664000062344", -230},
  {5.1367475221542152154724676e+91, "5136747522154215", 92},
  {5.5479863051625751181444159e-13, "5547986305162575", -12},
  {1.6024978060194122423028851e+190, "16024978060194122", 191},
  {2.0521600091529219226116683e-137, "2052160009152922", -136},
  {2.2420839804859020249148306e-115, "2242083980485902", -114},
  {5.4422908500297666173013671e+247, "54422908500297666", 248},
  {7.1396225032297393076995266e+59, "7139622503229739", 60},
  {6.1383234076759124387008760e+70, "6138323407675912", 71},
  {7.6659588417801028255351732e+103, "7665958841780103", 104},
  {5.8653658940785302178455261e+111, "586536589407853", 112},
  {1.8088561077385145142301148e+264, "18088561077385145", 265},
  {1.0308704101773991392102434e+223, "10308704101773991", 224},
  {2.3649430704232641548647160e+134, "2364943070423264", 135},
  {5.4171130491978748156423442e+257, "5417113049197875", 258},
  {1.2659228425578756370844726e-72, "12659228425578756", -71},
  {1.3589723098754364685370820e-216, "13589723098754365", -215},
  {1.8949824418917899315658570e-274, "189498244189179", -273},
  {3.8015047830582057273746783e-152, "38015047830582057", -151},
  {2.9297134150269051917961326e-125, "2929713415026905", -124},
  {1.1585080224206589849699123e-259, "1158508022420659", -258},
  {4.2804427282273398326373821e+171, "428044272822734", 172},
  {2.9993690628146001030397037e-89, "29993690628146", -88},
  {1.8957288285453357137243183e+65, "18957288285453357", 66},
  {5.7074736526223419786147724e-103, "5707473652622342", -102},
  {4.3712302120245054126233025e+116, "43712302120245054", 117},
  {3.6054652286535526627552706e+231, "3605465228653553", 232},
  {3.7255130199741297791544914e-35, "372551301997413", -34},
  {5.7088268508661193470980515e-99, "5708826850866119", -98},
  {1.4496470793447665182342032e-242, "14496470793447665", -241},
  {1.8068218817296107969895084e-41, "18068218817296108", -40},
  {2.2758347881863282874312611e+242, "22758347881863283", 243},
  {7.0859458527170672297999125e-89, "7085945852717067", -88},
  {2.1602349929710566666881204e+50, "21602349929710567", 51},
  {4.6240172315725619480884028e+111, "4624017231572562", 112},
  {5.6657230440176299523849076e-294, "566572304401763", -293},
  {1.1301669520362790725972967e-11, "1130166952036279", -10},
  {1.1485613230487238982594293e+156, "11485613230487239", 157},
  {1.7233409407236171222263527e+270, "17233409407236171", 271},
  {4.2072908503620553932468187e-150, "42072908503620554", -149},
  {2.2799166043534100466436966e+82, "227991660435341", 83},
  {9.1055128245665100162659213e-20, "910551282456651", -19},
  {1.0252191780611841533637017e-74, "10252191780611842", -73},
  {3.9899472606871789704374701e+235, "3989947260687179", 236},
  {1.7074225511884089224056296e+76, "1707422551188409", 77},
  {1.3628355010051404545804319e+203, "13628355010051405", 204},
  {4.3493305991833520229746018e+135, "4349330599183352", 136},
  {4.8181823663777677437658909e-196, "4818182366377768", -195},
  {9.4179923616700754405138894e+297, "9417992361670075", 298},
  {2.2521250850166256372682954e-126, "22521250850166256", -125},
  {5.5307285270949626279289932e-276, "5530728527094963", -275},
  {8.3463575969021091870712423e-84, "834635759690211", -83},
  {4.1007590744052367161575839e+229, "41007590744052367", 230},
  {2.5925324263214208267169296e+208, "2592532426321421", 209},
  {1.1781609635960578390394967e+80, "11781609635960578", 81},
  {2.0269682280910933788831132e-110, "20269682280910934", -109},
  {2.6565113479379987522970821e+41, "26565113479379988", 42},
  {5.4022086793126551824898522e+199, "5402208679312655", 200},
  {2.9130638674128104068492243e-70, "29130638674128104", -69},
  {3.0002518342133887311149963e-75, "30002518342133887", -74},
  {8.7863539125623071156113722e-29, "8786353912562307", -28},
  {5.7876983641914324638114094e+257, "5787698364191432", 258},
  {5.8608205856622693895988255e+280, "5860820585662269", 281},
  {1.7435467629215927455175754e+146, "17435467629215927", 147},
  {6.2728688212692555303123809e-04, "6272868821269256", -3},
  {5.3081047343935188639520208e+154, "5308104734393519", 155},
  {8.5018732811528807742445411e-270, "850187328115288", -269},
  {1.2282269469966940396279158e+119, "1228226946996694", 120},
  {5.7126371822190022797605148e-260, "5712637182219002", -259},
  {4.8021607745381646668956045e+254, "4802160774538165", 255},
  {8.3455032006391995502252369e-85, "83455032006392", -84},
  {5.8098370757096921755885773e+88, "5809837075709692", 89},
  {2.2567609428677025844142368e+153, "22567609428677026", 154},
  {4.5561835024567779615944667e+304, "4556183502456778", 305},
  {2.7616553094685701281976287e-199, "276165530946857", -198},
  {6.2768440767385241525275286e-291, "6276844076738524", -290},
  {1.2689715946655471157100692e+02, "12689715946655471", 3},
  {3.5022435480312740949205138e-26, "3502243548031274", -25},
  {2.6601459108366159013978033e-115, "2660145910836616", -114},
  {6.5526859407661180071698510e-152, "6552685940766118", -151},
  {4.6613841171738297697289988e-113, "466138411717383", -112},
  {6.6234445335346079943808378e+163, "6623444533534608", 164},
  {1.0662601084108275915927900e-248, "10662601084108276", -247},
  {6.8183634494680546822852228e+130, "6818363449468055", 131},
  {3.5786728828622954812050167e-196, "35786728828622955", -195},
  {3.6527386031031589307417021e+272, "3652738603103159", 273},
  {4.4791874592065864146712273e-246, "44791874592065864", -245},
  {5.5385060446400424521541293e-241, "55385060446400425", -240},
  {3.7291142117771845687289064e-240, "37291142117771846", -239},
  {2.1065643693240209351392385e-300, "2106564369324021", -299},
  {3.9846185143432924808726253e+285, "39846185143432925", 286},
  {2.0190430262768820468326442e+65, "2019043026276882", 66},
  {5.4928596652642305538486330e+136, "5492859665264231", 137},
  {1.5241529205356231766839861e-51, "15241529205356232", -50},
  {1.8532846973398173819942650e+167, "18532846973398174", 168},
  {2.2085019368290320468351184e-200, "2208501936829032", -199},
  {4.8848250984873557660079172e+98, "4884825098487356", 99},
  {6.0023281376025257060140602e+39, "6002328137602526", 40},
  {1.1064476923547463099267896e-105, "11064476923547463", -104},
  {3.0905815756778181085118641e-196, "3090581575677818", -195},
  {2.0586258381287736716123693e-237, "20586258381287737", -236},
  {1.2507793090135356899015323e+247, "12507793090135357", 248},
  {1.6221610551949553827840000e+21, "16221610551949554", 22},
  {6.5847451754438684481188655e-155, "65847451754438684", -154},
  {1.2552334915149381266985529e+00, "12552334915149381", 1},
  {5.8706790012403909183172092e+202, "5870679001240391", 203},
  {1.3177357420886598875576398e+104, "13177357420886599", 105},
  {1.0738450655974838358048094e-115, "10738450655974838", -114},
  {1.2482488158913607580446364e-282, "12482488158913608", -281},
  {3.8000951904819615288219666e-143, "38000951904819615", -142},
  {3.8255721395715749992268252e+34, "3825572139571575", 35},
  {6.9510098635713277211285242e+115, "6951009863571328", 116},
  {8.4148331390721796088183678e+249, "841483313907218", 250},
  {1.8746383922270800565425084e-223, "187463839222708", -222},
  {1.4785269092979690963038525e-115, "1478526909297969", -114},
  {7.8944235697914401042428112e+121, "789442356979144", 122},
  {4.8785043073972286147728222e-288, "48785043073972286", -287},
  {1.1136010890682073845017307e+303, "11136010890682074", 304},
  {7.2875114270441160985339800e-66, "7287511427044116", -65},
  {5.2759868410465613485261185e+88, "5275986841046561", 89},
  {5.7469520293954355810338341e+29, "57469520293954356", 30},
  {4.4467805807966682618045619e+148, "4446780580796668", 149},
  {4.4672287474306791148326855e+105, "4467228747430679", 106},
  {5.1239043313202863850474708e+61, "51239043313202864", 62},
  {9.3841608348040102633517551e+117, "938416083480401", 118},
  {6.7732685041960366385795881e+156, "6773268504196037", 157},
  {3.1070346391491372450843755e+00, "31070346391491372", 1},
  {2.4031752189949936230146047e+98, "24031752189949936", 99},
  {8.4464443487933613631306770e+266, "8446444348793361", 267},
  {6.3618085698786939339781109e+143, "6361808569878694", 144},
  {1.6862337259148828234429545e+291, "16862337259148828", 292},
  {1.5190986639212108553477589e+262, "15190986639212109", 263},
  {2.5425157922333242541564875e+73, "25425157922333243", 74},
  {2.2511806980203547285975416e+44, "22511806980203547", 45},
  {4.0681556176241318964356477e-152, "4068155617624132", -151},
  {4.9798120590982266840393987e-117, "4979812059098227", -116},
  {2.7561191967706882276065280e+25, "27561191967706882", 26},
  {1.3175678156851274493201960e+308, "13175678156851274", 309},
  {2.1431466526930622076300096e+107, "21431466526930622", 108},
  {3.0441219671283381574847898e-238, "3044121967128338", -237},
  {8.1039201865635234872549743e+135, "8103920186563523", 136},
  {3.2253007042917930449832418e+207, "3225300704291793", 208},
  {8.0243234352408204397102648e+282, "802432343524082", 283},
  {1.1566306679855743750000000e+14, "11566306679855744", 15},
  {6.4049132330735448833778328e+61, "6404913233073545", 62},
  {1.0886633313400635309562704e-294, "10886633313400635", -293},
  {7.0538794456867575761499206e-31, "7053879445686758", -30},
  {3.3198775987857869883178689e-181, "3319877598785787", -180},
  {4.8802385225158234739256066e+28, "48802385225158235", 29},
  {1.5650096586943110574461935e+212, "1565009658694311", 213},
  {1.7280737559530058786167180e+269, "1728073755953006", 270},
  {3.5796412829968027572067166e-232, "3579641282996803", -231},
  {1.7105334693498130484010827e-143, "1710533469349813", -142},
  {1.1015867402003765331395473e+225, "11015867402003765", 226},
  {9.6478442261642439830941915e+123, "9647844226164244", 124},
  {7.6653131461461174538897723e+194, "7665313146146117", 195},
  {1.3284370589004431862355046e+143, "13284370589004432", 144},
  {2.0677368244398645820707190e+119, "20677368244398646", 120},
  {8.8316145385767552070752104e+206, "8831614538576755", 207},
  {6.3078713526424323260474402e-299, "6307871352642432", -298},
  {2.3114950569155328889677857e-40, "2311495056915533", -39},
  {6.7422903900226658029966249e-11, "6742290390022666", -10},
  {7.2585629083387682496331110e-140, "7258562908338768", -139},
  {6.6294460188971175572227303e-63, "6629446018897118", -62},
  {4.2943572248212196221902474e+240, "42943572248212196", 241},
  {4.4459633610836393199861050e+05, "44459633610836393", 6},
  {1.4744102642483437004248462e-41, "14744102642483437", -40},
  {8.7495445934498326693263144e+266, "8749544593449833", 267},
  {3.1184643660856127668213918e+43, "3118464366085613", 44},
  {1.4257592407828353694645290e-243, "14257592407828354", -242},
  {1.6844513884310095145604831e-46, "16844513884310095", -45},
  {1.3089390120153464576044929e-97, "13089390120153465", -96},
  {2.3821758715108972892348667e-45, "23821758715108973", -44},
  {8.7174483634499353245403405e-197, "8717448363449935", -196},
  {5.9077655843584648816138898e+151, "5907765584358465", 152},
  {1.5191871456778517327015568e-248, "15191871456778517", -247},
  {1.2296922843857901531298922e-106, "12296922843857902", -105},
  {6.9058595363892483710391926e-263, "6905859536389248", -262},
  {1.7690767526279585546966941e-290, "17690767526279586", -289},
  {8.7330118121997875164575518e-136, "8733011812199788", -135},
  {9.8248362458639744543943046e-300, "9824836245863974", -299},
  {2.4515448158872473600000000e+17, "24515448158872474", 18},
  {7.2892404328221954716580029e-41, "7289240432822195", -40},
  {9.0968320699195040858235820e+296, "9096832069919504", 297},
  {7.8273367454924982099685919e+198, "7827336745492498", 199},
  {9.1507711552247258562249692e+151, "9150771155224726", 152},
  {1.8841096379227474775516531e-207, "18841096379227475", -206},
  {3.3063644700616553932820660e-34, "33063644700616554", -33},
  {3.7987237330574982507718373e-180, "37987237330574983", -179},
  {1.6324590753152402186982916e+28, "16324590753152402", 29},
  {4.3466328823782086935941535e+304, "43466328823782087", 305},
  {3.9295934190475127449618908e+186, "39295934190475127", 187},
  {1.9341829883861365754118062e-193, "19341829883861366", -192},
  {5.6536753417820962382466362e+141, "5653675341782096", 142},
  {1.3584265151267732109371259e-76, "13584265151267732", -75},
  {3.9076425257180408073749134e+103, "3907642525718041", 104},
  {8.1331144495067116339200000e+20, "8133114449506712", 21},
  {6.7356882803732878225617483e+188, "6735688280373288", 189},
  {4.4896419665143708114479658e-277, "4489641966514371", -276},
  {3.7829128549330325851960371e+82, "37829128549330326", 83},
  {2.8373001680914412645506673e+03, "28373001680914413", 4},
  {2.3834498931276300288000000e+20, "238344989312763", 21},
  {3.8868335599958756492472277e-301, "3886833559995876", -300},
  {1.8475553629108962887321744e+136, "18475553629108963", 137},
  {6.0893636112675812706312614e-101, "6089363611267581", -100},
  {2.2852184441835350885943606e-278, "2285218444183535", -277},
  {1.6901140674814528927197416e-35, "1690114067481453", -34},
  {2.8575162822866979775051256e+276, "2857516282286698", 277},
  {4.5845354935531765441199320e-26, "45845354935531765", -25},
  {3.9905315440216397708509537e-174, "39905315440216398", -173},
  {1.4065901709609070997457466e+128, "14065901709609071", 129},
  {4.3829603764762084955696804e-42, "43829603764762085", -41},
  {7.8446696293063679344723759e-20, "7844669629306368", -19},
  {4.0731267612544242165377045e-191, "4073126761254424", -190},
  {3.9265398715820039695334615e+108, "3926539871582004", 109},
  {7.6429501048862476475380175e+66, "7642950104886248", 67},
  {4.0054635080763949872936488e-65, "4005463508076395", -64},
  {2.3450142198063010074177831e-185, "2345014219806301", -184},
  {3.4307768913276859189664030e+295, "3430776891327686", 296},
  {1.1511378117120328193733929e-233, "11511378117120328", -232},
  {1.8051633109186031883684457e+31, "18051633109186032", 32},
  {5.4295778493280141416001891e+242, "5429577849328014", 243},
  {5.4276164871506902652007340e-73, "542761648715069", -72},
  {2.5914664531508480440542177e-83, "2591466453150848", -82},
  {4.5713847106330662837585334e-133, "4571384710633066", -132},
  {3.8307360580403166592306621e+206, "3830736058040317", 207},
  {2.4514358173964850891235760e-189, "2451435817396485", -188},
  {3.8674543774844134536456994e-156, "38674543774844135", -155},
  {1.8422989825550126828124498e+285, "18422989825550127", 286},
  {2.2071626842940545460766510e-221, "22071626842940545", -220},
  {1.1080796145148800609487421e+27, "110807961451488", 28},
  {4.3442840126970450490688323e+66, "4344284012697045", 67},
  {3.2641724283135317496851225e-99, "32641724283135317", -98},
  {4.6107762668923458375141077e-51, "4610776266892346", -50},
  {6.4262857099055700977569763e+120, "642628570990557", 121},
  {2.7833099360429005398701549e+175, "27833099360429005", 176},
  {4.9280650385068278695214333e+96, "4928065038506828", 97},
  {1.4172089696506484286379778e-301, "14172089696506484", -300},
  {3.2754231330347971967322018e-91, "3275423133034797", -90},
  {3.5974328715414768326851154e+245, "3597432871541477", 246},
  {7.6440233207118386155411498e+66, "7644023320711839", 67},
  {1.1711928456866940612804777e+294, "1171192845686694", 295},
  {4.6538241718932997683078614e-33, "46538241718933", -32},
  {8.2770664682249893304631545e+127, "8277066468224989", 128},
  {1.5764304447493493556976318e+09, "15764304447493494", 10},
  {1.7548167149902771850549564e-90, "17548167149902772", -89},
  {9.8009196065398469600703385e-81, "9800919606539847", -80},
  {3.2227589226907995652300554e-18, "32227589226907996", -17},
  {2.9629043363363735198974609e+10, "29629043363363735", 11},
  {9.1346139529273461773205030e+120, "9134613952927346", 121},
  {1.7547805044345775049704235e+43, "17547805044345775", 44},
  {1.1083628794731238308244908e-34, "11083628794731238", -33},
  {7.2620142406584046047226250e-140, "7262014240658405", -139},
  {8.0387421519158930907396658e-96, "8038742151915893", -95},
  {2.7391635832151313654048194e+188, "27391635832151314", 189},
  {1.2170621752284277222259757e-287, "12170621752284277", -286},
  {4.9817989376733814840948048e-135, "49817989376733815", -134},
  {1.5614914323591881911240344e-239, "15614914323591882", -238},
  {1.0247522254998783300025970e+273, "10247522254998783", 274},
  {1.5493498831738104424306513e-155, "15493498831738104", -154},
  {7.4756301057342376138314044e-287, "7475630105734238", -286},
  {6.4891775027401545562928561e+60, "6489177502740155", 61},
  {9.2239539526058773860122093e+205, "9223953952605877", 206},
  {5.7295537457384629388905794e+84, "5729553745738463", 85},
  {9.7726846236757437382085352e-97, "9772684623675744", -96},
  {1.2843733149494093972613760e+66, "12843733149494094", 67},
  {1.4767234483132628319857253e+280, "14767234483132628", 281},
  {8.9559209307454548189073697e-306, "8955920930745455", -305},
  {5.5613995255487411245827094e+174, "5561399525548741", 175},
  {1.0164350617034838511890475e-125, "10164350617034839", -124},
  {4.5026920472149535448152130e+108, "45026920472149535", 109},
  {2.3319848180528456189048110e+34, "23319848180528456", 35},
  {5.5168787284958913586157353e-73, "55168787284958914", -72},
  {1.3354352830146924544000000e+19, "13354352830146925", 20},
  {4.5698817035551875403719880e-162, "4569881703555188", -161},
  {3.7809042157224481726373262e+219, "3780904215722448", 220},
  {1.7018699837458791606693147e+72, "17018699837458792", 73},
  {2.1721076005979970953195156e-176, "2172107600597997", -175},
  {1.5031288420743994189100910e-52, "15031288420743994", -51},
  {2.9418012155287182471202479e+145, "2941801215528718", 146},
  {1.2947300741160928831372790e-287, "12947300741160929", -286},
  {1.5826546903553655244891857e+71, "15826546903553655", 72},
  {3.4198235590882111410242726e+98, "3419823559088211", 99},
  {9.6233306806150887933665271e+135, "9623330680615089", 136},
  {1.7752353279491514799324891e+189, "17752353279491515", 190},
  {2.0352845752586531479413169e+210, "20352845752586531", 211},
  {4.3324770777551364153623581e+05, "43324770777551364", 6},
  {4.7558040416543946762704332e+224, "4755804041654395", 225},
  {5.4025099514517923122167796e+257, "5402509951451792", 258},
  {4.6810120816454005299167562e-02, "46810120816454005", -1},
  {7.0635920974557977722198458e-116, "7063592097455798", -115},
  {1.8268162509609238039385475e+242, "18268162509609238", 243},
  {3.4246997916609650868910099e+41, "3424699791660965", 42},
  {3.3359713586873556487334309e-236, "33359713586873556", -235},
  {3.4464107830310295670572492e-234, "34464107830310296", -233},
  {2.4019680460352787087704599e-251, "24019680460352787", -250},
  {2.7089367957189927371855349e+268, "27089367957189927", 269},
  {1.0917068988126413286031168e-215, "10917068988126413", -214},
  {7.5290856961717917825311341e-151, "7529085696171792", -150},
  {1.1895634578891561564165220e-226, "11895634578891562", -225},
  {1.2488192719876490188698974e+216, "1248819271987649", 217},
  {2.8524362680427528416569227e+231, "2852436268042753", 232},
  {1.5289155748294231478279498e-301, "15289155748294231", -300},
  {8.7831655166932065623847103e-05, "8783165516693207", -4},
  {7.9344570834268332762095238e+150, "7934457083426833", 151},
  {1.4768361771463270400000000e+17, "1476836177146327", 18},
  {6.4079470616611986726288043e-143, "6407947061661199", -142},
  {5.0299878715156235380925891e-140, "5029987871515624", -139},
  {2.6936985293931355018817915e-50, "26936985293931355", -49},
  {1.4459116041337005670400000e+21, "14459116041337006", 22},
  {4.2584519746002903941481624e-52, "42584519746002904", -51},
  {6.7857310674113952190953868e+182, "6785731067411395", 183},
  {8.4485942629847938875191997e+101, "8448594262984794", 102},
  {4.3853684174093348374056608e+178, "4385368417409335", 179},
  {1.0215412836846386855763735e-99, "10215412836846387", -98},
  {2.0362875729450276066811061e+298, "20362875729450276", 299},
  {1.6200673068564995772316340e-101, "16200673068564996", -100},
  {1.8962445956774049516105095e-196, "1896244595677405", -195},
  {2.7221904575533442926692944e-42, "27221904575533443", -41},
  {1.7215550111431868419731862e-107, "17215550111431868", -106},
  {8.1254056054427353104974024e-192, "8125405605442735", -191},
  {5.4564518005443696050005880e+303, "54564518005443696", 304},
  {8.9589536301304733524677679e-225, "8958953630130473", -224},
  {2.9074394718300820523112089e+217, "2907439471830082", 218},
  {7.4871357840741361478777301e+261, "7487135784074136", 262},
  {9.3857739754204050980980942e-210, "9385773975420405", -209},
  {2.1689940965451326113286578e-106, "21689940965451326", -105},
  {2.0996355720196210565059627e+40, "2099635572019621", 41},
  {2.1825022627311891055551507e+215, "2182502262731189", 216},
  {1.6609177024020561596863751e+304, "16609177024020562", 305},
  {4.1954747069804849068722798e-75, "4195474706980485", -74},
  {3.0299952728129356328182350e+177, "30299952728129356", 178},
  {1.1123203932695177048868110e+37, "11123203932695177", 38},
  {2.6579089883570303539118485e-12, "26579089883570304", -11},
  {8.2041079629961157502697624e-273, "8204107962996116", -272},
  {3.9197257123269395636472234e+258, "39197257123269396", 259},
  {1.2722710995882446112435879e+72, "12722710995882446", 73},
  {2.4036057853253897525550602e+151, "24036057853253898", 152},
  {1.9410291108659705397529345e+177, "19410291108659705", 178},
  {2.5791090899230470955204545e+280, "2579109089923047", 281},
  {1.7291680319233207220890273e+69, "17291680319233207", 70},
  {3.8005304542299185008540869e+166, "38005304542299185", 167},
  {9.2396965042469561185088452e+136, "9239696504246956", 137},
  {5.0538753029951696000000000e+16, "505387530299517", 17},
  {1.9344112585785960304395298e-266, "1934411258578596", -265},
  {3.0238471686339488036218639e-155, "3023847168633949", -154},
  {3.4253673626913623172903419e-264, "34253673626913623", -263},
  {1.4579946465199818350007929e-87, "14579946465199818", -86},
  {2.7361091117391059256436780e-77, "2736109111739106", -76},
  {2.5532391286208827855682110e+205, "2553239128620883", 206},
  {3.6312681220118531108849652e-254, "3631268122011853", -253},
  {3.2518429792822746823399421e+191, "32518429792822747", 192},
  {1.9791116525885266720901061e+135, "19791116525885267", 136},
  {1.3805569705508151608167258e+297, "13805569705508152", 298},
  {2.7143996641499170538428453e+200, "2714399664149917", 201},
  {2.7614505095311201476705284e-236, "276145050953112", -235},
  {1.4247321391141752651054948e-90, "14247321391141753", -89},
  {1.2892769792990821936403908e-170, "12892769792990822", -169},
  {9.5819695532669820272292174e+271, "9581969553266982", 272},
  {1.5809809144196617110973534e+284, "15809809144196617", 285},
  {2.7947184433523520705446685e+42, "2794718443352352", 43},
  {2.2316939120385007161743527e+270, "22316939120385007", 271},
  {3.1780148564820851365848879e+94, "3178014856482085", 95},
  {1.9199411662191228869123750e+161, "1919941166219123", 162},
  {7.5208435252784486898076375e-187, "7520843525278449", -186},
  {1.9145750368321298362373865e+169, "191457503683213", 170},
  {1.1824945788555087085971347e-20, "11824945788555087", -19},
  {7.8683417098509323750477051e+02, "7868341709850932", 3},
  {7.3550670351438300070686279e-152, "735506703514383", -151},
  {6.2798296087853958807361268e-212, "6279829608785396", -211},
  {2.4461911807125928000000000e+16, "2446191180712593", 17},
  {2.3925053441521592883716290e+285, "23925053441521593", 286},
  {2.0984646758955201160750325e-281, "209846467589552", -280},
  {6.7304796276141303223994328e+01, "673047962761413", 2},
  {4.1772023922225641391965067e-216, "4177202392222564", -215},
  {1.0574199150941474819738833e+105, "10574199150941475", 106},
  {5.2879616834198893107495774e-302, "5287961683419889", -301},
  {4.5688384617664387291685675e-163, "4568838461766439", -162},
  {4.8069129761790364908332560e-287, "48069129761790365", -286},
  {4.0876020371888454687318669e-95, "40876020371888455", -94},
  {8.6253913260607013262715990e-38, "8625391326060701", -37},
  {8.6248577762333329560219390e+283, "8624857776233333", 284},
  {4.4757481475355486293191751e+302, "4475748147535549", 303},
  {1.1614565462503045891372567e-253, "11614565462503046", -252},
  {2.0480857507233521882288607e-189, "2048085750723352", -188},
  {1.8872090740592709508992733e-44, "1887209074059271", -43},
  {1.5642271970438982541323196e-77, "15642271970438983", -76},
  {2.2048850376524713443842566e+301, "22048850376524713", 302},
  {7.8153146517737852433870789e-150, "7815314651773785", -149},
  {1.2887762212871132376015097e-26, "12887762212871132", -25},
  {2.2329869073459827633714146e+303, "22329869073459828", 304},
  {2.5362781696763763482423409e+62, "25362781696763763", 63},
  {2.3326955192384437236127906e+220, "23326955192384437", 221},
  {4.6659131159704964409593011e-55, "46659131159704964", -54},
  {3.4451870742607316063108682e-20, "34451870742607316", -19},
  {1.4487292806623172373110122e-123, "14487292806623172", -122},
  {1.4469133825900620829712948e+228, "1446913382590062", 229},
  {7.9530813747091655863362429e+217, "7953081374709166", 218},
  {2.0821503502357693525419652e-214, "20821503502357694", -213},
  {4.9545032015843126824089833e-220, "4954503201584313", -219},
  {3.5532325821525823442722494e+283, "35532325821525823", 284},
  {1.9732703524227011402244743e-246, "19732703524227011", -245},
  {8.2742765229359064282981821e+181, "8274276522935906", 182},
  {1.2256673232274344493692000e-192, "12256673232274344", -191},
  {3.1872830516157607338228077e+233, "31872830516157607", 234},
  {1.4450481935877787325819314e-110, "14450481935877787", -109},
  {1.8010575589354478449110286e+103, "1801057558935448", 104},
  {1.1758401108891565330932528e+159, "11758401108891565", 160},
  {4.4546821485919577406664157e-123, "4454682148591958", -122},
  {8.7253753668409722228999291e-36, "8725375366840972", -35},
  {4.7078772636419781085184421e-296, "4707877263641978", -295},
  {2.7494136945143542753260514e+109, "27494136945143543", 110},
  {1.1014269276234301433568404e+75, "11014269276234301", 76},
  {6.8784944751535121789367911e+198, "6878494475153512", 199},
  {4.5375623807396366478778435e-113, "45375623807396366", -112},
  {4.5491804703480040553353339e+102, "4549180470348004", 103},
  {2.4710808538922604773858339e-35, "24710808538922605", -34},
  {4.4765519067194786810395758e-120, "4476551906719479", -119},
  {4.2939226542444794376059634e-259, "42939226542444794", -258},
  {3.2018206655133024207359434e-308, "32018206655133024", -307},
  {7.4597786178221092053653055e-252, "7459778617822109", -251},
  {1.4073390219520151814094662e-127, "14073390219520152", -126},
  {1.8730325609555670217025875e-262, "1873032560955567", -261},
  {9.6461984447124041848597557e-276, "9646198444712404", -275},
  {2.0743668841406068982831143e-264, "2074366884140607", -263},
  {5.0533984598598497550357449e+48, "505339845985985", 49},
  {2.4581315459581656368035014e+231, "24581315459581656", 232},
  {6.2221233207984994555782060e+274, "62221233207984995", 275},
  {2.5606484766934285241847456e+48, "25606484766934285", 49},
  {3.8950139563167298719150968e-27, "389501395631673", -26},
  {5.1077699977800508433462733e-132, "5107769997780051", -131},
  {4.5612416707123190248891136e-175, "4561241670712319", -174},
  {1.1003416028993396225651548e-146, "11003416028993396", -145},
  {2.2642134958231197959142037e+99, "226421349582312", 100},
  {2.3059717323672868587384793e-203, "2305971732367287", -202},
  {2.0076495963213426200798212e-149, "20076495963213426", -148},
  {9.3065982885830741274774168e-113, "9306598288583074", -112},
  {1.2480620827731295130183386e+292, "12480620827731295", 293},
  {1.0764043156906112112489795e-31, "10764043156906112", -30},
  {6.9491015674313125141302756e-50, "69491015674313125", -49},
  {2.8693295471778931617736816e+09, "2869329547177893", 10},
  {1.6855744210522563000417042e+278, "16855744210522563", 279},
  {7.7058311430968372450619260e-174, "7705831143096837", -173},
  {1.2659658524072973996390074e-291, "12659658524072974", -290},
  {6.6577280375886149436686104e+202, "6657728037588615", 203},
  {2.6444287629121743964005908e-219, "26444287629121744", -218},
  {8.8864961109014394490098889e+182, "888649611090144", 183},
  {1.1843182352636415440589295e+119, "11843182352636415", 120},
  {1.4728833171869388406442435e-72, "14728833171869388", -71},
  {3.7922279219172292452763602e+192, "3792227921917229", 193},
  {1.4659392359482863719325362e+227, "14659392359482864", 228},
  {1.4450503725555834061400210e+50, "14450503725555834", 51},
  {4.7808929803588755755879687e-225, "47808929803588756", -224},
  {8.3863003421077688103521485e+26, "8386300342107769", 27},
  {7.7039751970761134944071810e-193, "77039751970761135", -192},
  {1.3004071813305183841342380e+94, "13004071813305184", 95},
  {1.6955551154679663511128156e+110, "16955551154679664", 111},
  {1.4408448571860091951455628e+298, "14408448571860092", 299},
  {1.7116005140846148364371229e+162, "17116005140846148", 163},
  {1.0455811977109482029851630e-113, "10455811977109482", -112},
  {1.8073782913212464437182343e-220, "18073782913212464", -219},
  {9.2447818581798129837077361e+104, "9244781858179813", 105},
  {1.1094826185681730721786649e+210, "1109482618568173", 211},
  {3.8384747756200980070616618e-298, "3838474775620098", -297},
  {6.7983886565833416519646498e-135, "6798388656583342", -134},
  {9.3528676562094239353010379e-85, "9352867656209424", -84},
  {1.5052058014615533184377782e-40, "15052058014615533", -39},
  {4.8091825052124940141591782e+134, "4809182505212494", 135},
  {5.3016264160115950744668801e+301, "5301626416011595", 302},
  {2.8190197032218719581446178e+277, "2819019703221872", 278},
  {2.5089084432068701244995560e+37, "250890844320687", 38},
  {2.5883286934767667533055352e-191, "25883286934767668", -190},
  {1.9592652284968872712064095e+195, "19592652284968873", 196},
  {1.3328789943987662779820177e+109, "13328789943987663", 110},
  {8.1380646061101714156879439e+148, "8138064606110171", 149},
  {1.0493327237994843327976706e-284, "10493327237994843", -283},
  {6.1875344224431979314367721e-143, "6187534422443198", -142},
  {9.6436701126247926717157253e+157, "9643670112624793", 158},
  {4.8492911867411791890743639e+214, "4849291186741179", 215},
  {7.9338900394257483508351132e+219, "7933890039425748", 220},
  {2.3455013707369534763560115e+246, "23455013707369535", 247},
  {5.2431999701001794249113312e-11, "52431999701001794", -10},
  {2.1851388427080575271538678e+173, "21851388427080575", 174},
  {4.2053928386931479339490087e+280, "4205392838693148", 281},
  {2.6138298046950390596988530e-243, "2613829804695039", -242},
  {7.4996700674927889603239103e+115, "7499670067492789", 116},
  {4.5605725112575635899970896e+54, "45605725112575636", 55},
  {4.1819037112022361411261015e-34, "4181903711202236", -33},
  {1.4300926385184381781920688e-272, "14300926385184382", -271},
  {1.1838385147243432734173661e-169, "11838385147243433", -168},
  {4.5578986783158093939114968e+154, "45578986783158094", 155},
  {1.8290419300790307863185203e-96, "18290419300790308", -95},
  {1.2015003142948078757899629e+179, "12015003142948079", 180},
  {2.3955194541858671279890259e+209, "2395519454185867", 210},
  {4.6954810681499538212147808e-184, "4695481068149954", -183},
  {2.7992668639219032422752342e-93, "27992668639219032", -92},
  {3.6022438872667254301256126e-138, "36022438872667254", -137},
  {1.8297483495539902597877927e-113, "18297483495539903", -112},
  {4.3440072228665196261328549e-210, "43440072228665196", -209},
  {4.8950680113096416567801535e-274, "4895068011309642", -273},
  {2.2759617496368428305946358e-197, "22759617496368428", -196},
  {1.3060769530119390335492643e+248, "1306076953011939", 249},
  {1.3220188216489838095049415e-79, "13220188216489838", -78},
  {7.3805835368650150769430182e+151, "7380583536865015", 152},
  {2.5052384975425380766261315e+85, "2505238497542538", 86},
  {3.6679691413144817325846728e-114, "3667969141314482", -113},
  {5.4618453450769221832015090e+105, "5461845345076922", 106},
  {1.3272724866678677276440719e-276, "13272724866678677", -275},
  {1.7054295951819818819217336e-153, "1705429595181982", -152},
  {7.5574910289516787249951398e+249, "7557491028951679", 250},
  {5.0090588964190769747892609e+81, "5009058896419077", 82},
  {1.4301814446599039117577485e+156, "1430181444659904", 157},
  {5.4048440444518121877750080e+66, "5404844044451812", 67},
  {4.9554515160853394353674435e-38, "4955451516085339", -37},
  {2.3436707074291236559820910e-179, "23436707074291237", -178},
  {9.9159241943770690716492512e+299, "9915924194377069", 300},
  {3.7390971402683720584247588e+180, "3739097140268372", 181},
  {1.6593375407135875725827348e+96, "16593375407135876", 97},
  {8.6262833996579059993248738e+217, "8626283399657906", 218},
  {7.5746701426103982551844872e-260, "7574670142610398", -259},
  {1.0057330612803398574485941e+86, "10057330612803399", 87},
  {5.8074412725190046458530797e+113, "58074412725190046", 114},
  {4.0111677933180937832776317e-15, "4011167793318094", -14},
  {3.2947046790568539038301166e-135, "3294704679056854", -134},
  {3.0953287639275971756690885e+180, "3095328763927597", 181},
  {3.4854008477321389048312178e-158, "3485400847732139", -157},
  {1.3164973472300411031002472e-10, "1316497347230041", -9},
  {1.0944207497605150375804876e+294, "1094420749760515", 295},
  {1.0449068174659439783898251e+111, "1044906817465944", 112},
  {1.6772627861077549025929568e-171, "1677262786107755", -170},
  {1.0018282004928240741691142e-144, "10018282004928241", -143},
  {1.4020754819258722430465720e+94, "14020754819258722", 95},
  {1.3606172087359229268181788e+283, "1360617208735923", 284},
  {2.8605668050652267668540738e-14, "2860566805065227", -13},
  {9.7098065007220034280214028e-210, "9709806500722003", -209},
  {6.4186494754238988611739306e-215, "6418649475423899", -214},
  {3.1956697781394077537697740e+03, "31956697781394078", 4},
  {2.0263018389670914129795511e+44, "20263018389670914", 45},
  {4.2081604736686288220651853e-33, "4208160473668629", -32},
  {1.5889200384107906918763833e+178, "15889200384107907", 179},
  {2.3138318724893506560000000e+18, "23138318724893507", 19},
  {5.6248863585215470678265972e-34, "5624886358521547", -33},
  {1.3815746784615911123842097e-07, "1381574678461591", -6},
  {1.2567266902377496008392618e+45, "12567266902377496", 46},
  {1.3650900905033962972880636e-43, "13650900905033963", -42},
  {1.5509475331427126080204785e-23, "15509475331427126", -22},
  {3.2389688764545133874111498e+209, "32389688764545134", 210},
  {1.9015033092472255229949951e+09, "19015033092472255", 10},
  {8.4693875573242165429672953e+111, "8469387557324217", 112},
  {2.2994264629659380283971286e-60, "2299426462965938", -59},
  {9.2800311961947412907182303e+170, "9280031196194741", 171},
  {2.7650537429268608286279153e+34, "2765053742926861", 35},
  {1.1697200854854611101835604e+62, "1169720085485461", 63},
  {3.9103195538452764578684993e-237, "39103195538452765", -236},
  {5.6073271897594655869909969e+58, "5607327189759466", 59},
  {5.8913149663664506315277797e-60, "5891314966366451", -59},
  {1.9784611749330124580816413e+188, "19784611749330125", 189},
  {8.6160935406335192630738309e+157, "8616093540633519", 158},
  {1.2989549466132135858537960e-148, "12989549466132136", -147},
  {3.6301134788652551071038742e-251, "3630113478865255", -250},
  {9.3526803996636272366649257e+284, "9352680399663627", 285},
  {2.5002500889196136224554559e-134, "25002500889196136", -133},
  {1.3332365818905984000000000e+18, "13332365818905984", 19},
  {8.0069061044294360047250133e+244, "8006906104429436", 245},
  {1.0925086110270354136569231e+198, "10925086110270354", 199},
  {1.4017719124972237103816302e-283, "14017719124972237", -282},
  {3.4214153109636141187948133e-106, "3421415310963614", -105},
  {3.9320896071459654402825192e-261, "39320896071459654", -260},
  {4.3158921412922734338956190e+179, "43158921412922734", 180},
  {1.4352461770041226305876589e+139, "14352461770041226", 140},
  {4.1847463217563011925534593e+126, "4184746321756301", 127},
  {1.3648249592556588839749357e-292, "13648249592556589", -291},
  {8.1589252004310014267957023e-290, "8158925200431001", -289},
  {5.5360366716624404944013804e+04, "55360366716624405", 5},
  {1.2855330293895409144389244e+141, "12855330293895409", 142},
  {2.6838664647766944730937999e-62, "26838664647766945", -61},
  {9.3523827276189628563170576e+35, "9352382727618963", 36},
  {2.6270166713543912967988329e-225, "26270166713543913", -224},
  {8.0117502224932278815956109e+112, "8011750222493228", 113},
  {4.0909648778181167841793689e-103, "4090964877818117", -102},
  {4.8461189231339939362338237e-94, "4846118923133994", -93},
  {1.7360713317507570312500000e+13, "1736071331750757", 14},
  {1.0809537118528810382248589e+124, "1080953711852881", 125},
  {1.3497779066752047046439690e-145, "13497779066752047", -144},
  {1.6217507334027045788277978e-211, "16217507334027046", -210},
  {6.3248437100846328348667227e-243, "6324843710084633", -242},
  {1.7003177836414869837877081e+74, "1700317783641487", 75},
  {1.6796935290960633370465351e+245, "16796935290960633", 246},
  {7.0193411697102974615552000e+22, "70193411697102975", 23},
  {1.1373374816954172988356057e+238, "11373374816954173", 239},
  {3.0243997907736722292492969e+34, "3024399790773672", 35},
  {4.1543727832999130276082544e-284, "4154372783299913", -283},
  {1.0499390326325531250000000e+15, "10499390326325531", 16},
  {1.2473170791618463326333148e+262, "12473170791618463", 263},
  {5.4525023779261908216583652e+267, "5452502377926191", 268},
  {1.0028634751404991135525623e-19, "10028634751404991", -18},
  {2.2289212253509648704233636e+278, "2228921225350965", 279},
  {3.4379147028054536518341814e+185, "34379147028054537", 186},
  {2.1041616661130961279908782e+274, "2104161666113096", 275},
  {5.0845243297917950435153260e-39, "5084524329791795", -38},
  {2.5911746800591047743999674e+47, "25911746800591048", 48},
  {8.7052427578462570068040804e+00, "8705242757846257", 1},
  {4.5021809984166878200705533e-242, "4502180998416688", -241},
  {1.7762259535749380465659332e-219, "1776225953574938", -218},
  {2.8193489412048564793662114e+265, "28193489412048565", 266},
  {5.7680083676377778526275590e-297, "5768008367637778", -296},
  {8.5136358931411237942194217e+160, "8513635893141124", 161},
  {1.2162993389545089823795356e-220, "1216299338954509", -219},
  {1.6046932698719813519331006e+159, "16046932698719814", 160},
  {2.1319961404753861281140771e-94, "2131996140475386", -93},
  {1.3474983202477316534814520e+232, "13474983202477317", 233},
  {1.6465176581477157822158837e+103, "16465176581477158", 104},
  {1.9254724195459999066685379e+190, "1925472419546", 191},
  {1.3765486178936519560242919e-204, "1376548617893652", -203},
  {7.8397682893276130187681779e-107, "7839768289327613", -106},
  {1.4827042789177468512207270e+05, "14827042789177469", 6},
  {4.4818961633322583040000000e+18, "44818961633322583", 19},
  {3.8738188685735186350230997e+127, "38738188685735186", 128},
  {8.6396519601307403553496986e-226, "863965196013074", -225},
  {1.1810028055987296446400760e-212, "11810028055987296", -211},
  {7.5513986488065778947903706e-143, "7551398648806578", -142},
  {1.5637039894508850514234701e-69, "1563703989450885", -68},
  {1.0435261962881184856046191e+288, "10435261962881185", 289},
  {9.5728925947998317001789263e-79, "9572892594799832", -78},
  {2.9772404698997089842867370e-145, "2977240469899709", -144},
  {1.0649349859952553503222822e+207, "10649349859952554", 208},
  {1.1052866154433697774765063e-267, "11052866154433698", -266},
  {2.6816377944616658383620273e+205, "2681637794461666", 206},
  {9.9065857443965065546956800e+23, "9906585744396507", 24},
  {1.2462406072187093602751213e+267, "12462406072187094", 268},
  {1.1286524267545679853430392e+227, "1128652426754568", 228},
  {9.4313400782842447359345438e+115, "9431340078284245", 116},
  {3.7437950464321346185032940e-11, "37437950464321346", -10},
  {7.5707729051623428367477033e+83, "7570772905162343", 84},
  {7.5094369282572055728177749e+114, "7509436928257206", 115},
  {1.6922577576911234426337467e-258, "16922577576911234", -257},
  {1.3297033666731543453136763e+97, "13297033666731543", 98},
  {2.3127708300093379051520000e+21, "2312770830009338", 22},
  {1.0026889839722704019649809e+131, "10026889839722704", 132},
  {6.8380153297139398437500000e+13, "683801532971394", 14},
  {1.9973956636880368472047912e-56, "19973956636880368", -55},
  {3.0969829059667134811088724e-121, "30969829059667135", -120},
  {1.3160614669102216288463156e+262, "13160614669102216", 263},
  {2.2555968162665461597225815e+120, "22555968162665462", 121},
  {9.5418615364753373283239987e+56, "9541861536475337", 57},
  {4.3445788047448185025845279e+232, "43445788047448185", 233},
  {3.8792391282266063436747759e-176, "3879239128226606", -175},
  {1.2737323676581450758769943e+177, "1273732367658145", 178},
  {2.7128505277353432808348528e+51, "27128505277353433", 52},
  {7.0800607690042468441583002e+156, "7080060769004247", 157},
  {2.4384136987000660526038910e+39, "2438413698700066", 40},
  {1.6600810447853163762330088e-162, "16600810447853164", -161},
  {1.4166887770056916917817612e-105, "14166887770056917", -104},
  {2.1444837131667683057802051e-292, "21444837131667683", -291},
  {7.3206949849674600763404467e-69, "732069498496746", -68},
  {1.5791140757347933902864109e+102, "15791140757347934", 103},
  {2.4451192375746884608001308e+163, "24451192375746885", 164},
  {1.0288787807333775866429431e+229, "10288787807333776", 230},
  {1.6914345357041059062861880e-237, "1691434535704106", -236},
  {3.2177070151553146897543608e+222, "3217707015155315", 223},
  {1.6595125212380681390487880e-276, "16595125212380681", -275},
  {6.1364420640548344000000000e+16, "61364420640548344", 17},
  {5.6923449221271331431021575e-260, "5692344922127133", -259},
  {5.4682637693607544653455608e-50, "5468263769360754", -49},
  {1.1171351389765528836259984e-136, "11171351389765529", -135},
  {1.9852193341298832774676690e+288, "19852193341298833", 289},
  {1.6662540194885511168000000e+19, "16662540194885511", 20},
  {1.0186043278031294920957548e-289, "10186043278031295", -288},
  {7.5091816111313268542289734e+07, "7509181611131327", 8},
  {2.1196443387744276282604605e-19, "21196443387744276", -18},
  {1.5811244092851793510553842e-155, "15811244092851794", -154},
  {8.1843839577481621405048350e-253, "8184383957748162", -252},
  {1.3428121445681547887634448e+120, "13428121445681548", 121},
  {1.4942125551270323102603892e-80, "14942125551270323", -79},
  {2.5818694829951108259390897e-277, "2581869482995111", -276},
  {9.7255481886262519803260488e-26, "9725548188626252", -25},
  {1.3251140572117821469170375e+243, "13251140572117821", 244},
  {6.6504372926455659289456374e+34, "6650437292645566", 35},
  {1.0848616692913383740998105e-304, "10848616692913384", -303},
  {3.9416893500650689176582194e-273, "3941689350065069", -272},
  {3.3944560430762540359952807e-11, "3394456043076254", -10},
  {3.4654949328833522946027930e-137, "34654949328833523", -136},
  {1.0314431153079500167364853e-137, "103144311530795", -136},
  {5.2086379279385503289267859e+153, "520863792793855", 154},
  {4.3668415731132971018350919e-261, "4366841573113297", -260},
  {7.4707268832806052734125936e+33, "7470726883280605", 34},
  {1.6308101643701680658561396e+261, "1630810164370168", 262},
  {4.4966242541931997400088102e-126, "44966242541932", -125},
  {4.1564674300927858452528107e+245, "4156467430092786", 246},
  {7.0239400121943894256091916e-223, "702394001219439", -222},
  {3.9134363821511414261147170e+148, "39134363821511414", 149},
  {4.3865692587184958756704718e+240, "4386569258718496", 241},
  {1.5968648858023538257946728e-25, "15968648858023538", -24},
  {1.1289451293484630396636721e+82, "1128945129348463", 83},
  {2.0201800386881183902469056e+122, "20201800386881184", 123},
  {6.1520206557934406861921991e+304, "6152020655793441", 305},
  {6.9623770780422689668799593e-241, "6962377078042269", -240},
  {7.2218582808501741165940757e-02, "7221858280850174", -1},
  {8.9752463874965615115989473e-121, "8975246387496562", -120},
  {1.3491126458710504745130469e+194, "13491126458710505", 195},
  {8.2076104596172193350171047e-303, "8207610459617219", -302},
  {7.5820060611618023676376420e-179, "7582006061161802", -178},
  {4.2194236737118689741181103e-164, "4219423673711869", -163},
  {2.1030067802409512309263531e+303, "21030067802409512", 304},
  {3.8669407907156854666901410e+176, "38669407907156855", 177},
  {3.3631669291127836637556377e+112, "33631669291127837", 113},
  {8.3347171319411807918435186e+257, "8334717131941181", 258},
  {4.1692718769508357271821958e-307, "4169271876950836", -306},
  {3.5111233934178857359855791e+193, "35111233934178857", 194},
  {4.8379370218267180728774130e-51, "4837937021826718", -50},
  {1.0504555722350554770282634e+296, "10504555722350555", 297},
  {7.3335678213927077375109118e-96, "7333567821392708", -95},
  {5.7648996782957460908525221e-136, "5764899678295746", -135},
  {6.5562085402951921300152168e+86, "6556208540295192", 87},
  {8.7462114341811137898171469e-161, "8746211434181114", -160},
  {6.0165387494081321757906412e+69, "6016538749408132", 70},
  {5.7607392992029876279868178e+84, "5760739299202988", 85},
  {3.4407041159316742708972397e-91, "3440704115931674", -90},
  {1.2128726690525418081505772e+28, "12128726690525418", 29},
  {6.3614994936406545303356768e-179, "6361499493640655", -178},
  {1.3770659873805102950913126e-15, "13770659873805103", -14},
  {5.2218858075571718859069534e-286, "5221885807557172", -285},
  {3.6874769973788306149763914e-22, "36874769973788306", -21},
  {3.8251878496104528821179516e+112, "3825187849610453", 113},
  {5.2827532485676805597954048e+25, "52827532485676806", 26},
  {9.9307446804939446366379127e+93, "9930744680493945", 94},
  {9.6453864578413753807469826e+204, "9645386457841375", 205},
  {1.8414308167443538143120791e+167, "18414308167443538", 168},
  {1.6636396543001634256099410e-36, "16636396543001634", -35},
  {2.6123364560458623793263490e-48, "26123364560458624", -47},
  {2.3199717136621505643165322e-101, "23199717136621506", -100},
  {4.8521532213433023723899912e+290, "48521532213433024", 291},
  {1.6768644338846297153792435e-245, "16768644338846297", -244},
  {5.0134225415369878902589740e+157, "5013422541536988", 158},
  {3.4509071683285644918336618e-276, "34509071683285645", -275},
  {3.3145698753808993931491616e-94, "33145698753808994", -93},
  {5.9195945963883275369519024e-108, "59195945963883275", -107},
  {3.5134353824008395482126844e-172, "35134353824008395", -171},
  {1.5735562122743600462198301e-26, "157355621227436", -25},
  {5.3138923376994601073960958e-145, "531389233769946", -144},
  {9.8451799969176022774130951e-224, "9845179996917602", -223},
  {1.2372483099990143787704412e-93, "12372483099990144", -92},
  {7.1658830416643350865719218e-52, "7165883041664335", -51},
  {2.6704151363447311925653687e+293, "26704151363447312", 294},
  {1.5572446388794139045755708e-34, "1557244638879414", -33},
  {6.5748101468985010727233594e+224, "6574810146898501", 225},
  {8.6702765858553971430435956e-217, "8670276585855397", -216},
  {2.3629677169190053760310257e+52, "23629677169190054", 53},
  {3.4794594146794700669788453e-81, "347945941467947", -80},
  {1.8279074522159826878268756e+288, "18279074522159827", 289},
  {8.7190442411487012983488334e-305, "8719044241148701", -304},
  {1.6597499185441851251846387e+283, "16597499185441851", 284},
  {1.6361449868419043748579916e-116, "16361449868419044", -115},
  {1.0457050330581065998698066e+37, "10457050330581066", 38},
  {2.3866120431459032735711953e+241, "23866120431459033", 242},
  {3.5056176024868693424458232e-283, "35056176024868693", -282},
  {1.0800479296332065793914946e+238, "10800479296332066", 239},
  {1.5809302331764927213185398e+31, "15809302331764927", 32},
  {4.7626720875944406099633358e+214, "4762672087594441", 215},
  {5.7410602786846280818501375e-66, "5741060278684628", -65},
  {2.3782437858926856958695947e+211, "23782437858926857", 212},
  {8.1707207990083834767660813e+225, "8170720799008383", 226},
  {5.6320669322760242926123169e+246, "5632066932276024", 247},
  {3.0315975461384848090076942e+298, "3031597546138485", 299},
  {1.4047557026981196304616809e+43, "14047557026981196", 44},
  {2.7815084216252569020826476e+164, "2781508421625257", 165},
  {1.0941093291759356541589612e+258, "10941093291759357", 259},
  {2.9565733101895384722490601e-87, "29565733101895385", -86},
  {3.2666613086669811510987913e-33, "3266661308666981", -32},
  {1.8558322642537725976333883e-261, "18558322642537726", -260},
  {9.4713319710440544266674595e+263, "9471331971044054", 264},
  {6.0336734210139962592575997e+104, "6033673421013996", 105},
  {5.9137957162235588426941072e-232, "5913795716223559", -231},
  {2.9274402044737823395599161e-103, "29274402044737823", -102},
  {4.5326148962001498148310930e+04, "453261489620015", 5},
  {1.3898779536868481315343062e+293, "13898779536868481", 294},
  {3.3246144470723770769637895e-02, "3324614447072377", -1},
  {1.0425817842947837398757943e-209, "10425817842947837", -208},
  {4.0965934323726248067741965e-131, "4096593432372625", -130},
  {2.4905918977529100949450428e+98, "249059189775291", 99},
  {8.2525839134069400920916212e-274, "825258391340694", -273},
  {1.2784724011555926777985722e-86, "12784724011555927", -85},
  {2.1220015286601180346540073e-274, "2122001528660118", -273},
  {1.8190391078301813964843750e+12, "18190391078301814", 13},
  {1.0745451227265070092634534e+212, "1074545122726507", 213},
  {2.8011069102233600249764730e-59, "280110691022336", -58},
  {3.0811005738133344797426745e-109, "30811005738133345", -108},
  {6.3840810121830094383386126e+256, "638408101218301", 257},
  {5.0133162927266131430390358e+116, "5013316292726613", 117},
  {2.2699923290622561308736676e-223, "2269992329062256", -222},
  {1.1805500733528149326950981e+220, "1180550073352815", 221},
  {2.3104568454910174560546875e+11, "23104568454910175", 12},
  {1.9703669039219098830972499e+53, "197036690392191", 54},
  {2.4843730945014209072217810e+147, "2484373094501421", 148},
  {1.7656928508616501983745319e+271, "17656928508616502", 272},
  {7.3086853785339853013173483e+43, "7308685378533985", 44},
  {5.4689511871115627069440000e+21, "5468951187111563", 22},
  {6.8180283505231352228693354e-199, "6818028350523135", -198},
  {3.1833547416286960244564586e+158, "3183354741628696", 159},
  {5.7332373751239495592108876e+141, "57332373751239496", 142},
  {8.8322423029530906719759390e-275, "8832242302953091", -274},
  {6.3872289900663212472882092e-91, "6387228990066321", -90},
  {3.6169716442932054881991270e+46, "36169716442932055", 47},
  {1.6621335651423618004436121e+139, "16621335651423618", 140},
  {5.3506137994421069543299958e+141, "5350613799442107", 142},
  {6.8189305030718972447509319e+175, "6818930503071897", 176},
  {6.0417352059590238248093508e-04, "6041735205959024", -3},
  {1.1971854427062466749047916e+163, "11971854427062467", 164},
  {8.5048011145670748666531018e+143, "8504801114567075", 144},
  {5.3022267499045623194801456e-305, "5302226749904562", -304},
  {1.2564349082160025121715634e+67, "12564349082160025", 68},
  {1.4654327558991755823966041e-208, "14654327558991756", -207},
  {1.8329922047343220078122333e-127, "1832992204734322", -126},
  {7.3438573684708101861368426e-243, "734385736847081", -242},
  {1.7732046418743073203724230e+308, "17732046418743073", 309},
  {3.2283641232611117903172771e-283, "3228364123261112", -282},
  {7.8269573220654377660035490e+80, "7826957322065438", 81},
  {3.2637782880482539878586891e-170, "3263778288048254", -169},
  {4.2069285537989230425741728e-208, "4206928553798923", -207},
  {1.8960716132617667500000000e+15, "18960716132617668", 16},
  {9.0495003569853218974221795e-145, "9049500356985322", -144},
  {2.4072449546547077502195506e-283, "24072449546547078", -282},
  {1.4448057298898730966681942e-197, "1444805729889873", -196},
  {1.9169956248164638856727533e+288, "1916995624816464", 289},
  {2.2262351182851426986854785e+89, "22262351182851427", 90},
  {2.1797547094799845255656913e+259, "21797547094799845", 260},
  {5.3210473285151851801193955e-272, "5321047328515185", -271},
  {1.9593345583805647389610631e+205, "19593345583805647", 206},
  {1.2081147487507000641269791e-176, "12081147487507", -175},
  {9.4690676331056128507601903e-146, "9469067633105613", -145},
  {8.5997814096408312302619864e+139, "8599781409640831", 140},
  {3.5739277193775537345780172e+94, "3573927719377554", 95},
  {1.3342773440839494882368173e+274, "13342773440839495", 275},
  {3.0677579217680897897039852e-154, "306775792176809", -153},
  {5.1303406361843456973425054e-142, "5130340636184346", -141},
  {6.4291576393515117501465620e+199, "6429157639351512", 200},
  {5.8881870762936371330991945e-200, "5888187076293637", -199},
  {3.4965745708642105695339072e-24, "34965745708642106", -23},
  {2.3771676693249497002006588e-35, "23771676693249497", -34},
  {4.0427130259325551940961426e+51, "4042713025932555", 52},
  {1.5952420901442748491861941e-201, "15952420901442748", -200},
  {1.8753099444000393743233429e+233, "18753099444000394", 234},
  {1.7644330627320599261446389e-103, "176443306273206", -102},
  {1.3395148778382339577292546e-51, "1339514877838234", -50},
  {1.2217695515922012260206890e-304, "12217695515922012", -303},
  {4.8644222838742122316043559e+37, "4864422283874212", 38},
  {1.6683562855321845766394574e+182, "16683562855321846", 183},
  {2.1467036899935846975574771e-04, "21467036899935847", -3},
  {9.2827861503303864537674729e-258, "9282786150330386", -257},
  {1.8555531895195541139134146e-105, "1855553189519554", -104},
  {9.8720264125099278336000000e+20, "9872026412509928", 21},
  {4.6573235759699835793501700e-223, "46573235759699836", -222},
  {1.3693816790323493547621848e-13, "13693816790323494", -12},
  {5.2665831693530924338852947e+132, "52665831693530924", 133},
  {3.2588472274533993813067995e-111, "32588472274533994", -110},
  {2.8125378818438262678682804e+06, "28125378818438263", 7},
  {1.6051544627181009238839623e-137, "1605154462718101", -136},
  {1.2118056432753851129831793e+127, "1211805643275385", 128},
  {9.0494736762617178613837313e-143, "9049473676261718", -142},
  {1.8361023378571592862876637e-123, "18361023378571593", -122},
  {4.9496526290612910437266465e-55, "4949652629061291", -54},
  {2.0932360950968040386655681e-20, "2093236095096804", -19},
  {3.0697244957270039544816598e-03, "3069724495727004", -2},
  {2.3502302451269213317897210e-201, "23502302451269213", -200},
  {1.2339582626832306317112291e+249, "12339582626832306", 250},
  {9.4272691314215255545759416e+120, "9427269131421526", 121},
  {1.7776763980164044224243064e+145, "17776763980164044", 146},
  {2.6075546088186902678298497e+210, "26075546088186903", 211},
  {9.2809036156805778785064409e-05, "9280903615680578", -4},
  {1.8088321682359465913253638e-37, "18088321682359466", -36},
  {9.3989647157837276140091716e+69, "9398964715783728", 70},
  {2.5829276131299965068160623e-296, "25829276131299965", -295},
  {8.1005918304221147294863736e-277, "8100591830422115", -276},
  {1.8772312231288718168966696e-150, "18772312231288718", -149},
  {7.5330456351204990880718529e-40, "7533045635120499", -39},
  {1.1139043507547742286855121e+76, "11139043507547742", 77},
  {1.1963217124684105846534531e-281, "11963217124684106", -280},
  {9.8192584558325335920083493e-47, "9819258455832534", -46},
  {2.7899972281645143951717853e+29, "27899972281645144", 30},
  {4.6005146006599533958667483e-35, "46005146006599534", -34},
  {1.4535073190601770784257589e-227, "1453507319060177", -226},
  {3.3331655544029200195771459e-34, "333316555440292", -33},
  {8.6103402647693200703377689e+165, "861034026476932", 166},
  {4.9577415581103075980104489e-95, "49577415581103076", -94},
  {8.0528143198189484957639915e+123, "8052814319818948", 124},
  {4.2592188296757805592332163e+169, "42592188296757806", 170},
  {5.0373976912491995621232240e-98, "50373976912491996", -97},
  {3.9003146069845460858319059e-96, "3900314606984546", -95},
  {6.5223530853299263057879711e+239, "6522353085329926", 240},
  {2.5621605298805822633547428e-117, "25621605298805823", -116},
  {1.5685683426852970790803346e-161, "1568568342685297", -160},
  {2.5117157648977321340107276e-298, "2511715764897732", -297},
  {3.7124209279364455936171414e-180, "37124209279364456", -179},
  {2.0221903057044800456643564e-79, "202219030570448", -78},
  {1.2450526610981066438793099e-269, "12450526610981066", -268},
  {9.8544860608863111403396320e+240, "9854486060886311", 241},
  {7.6572259597274678078584164e+267, "7657225959727468", 268},
  {4.4040422667361465684297606e-275, "44040422667361466", -274},
  {1.5914310292939935405889281e+149, "15914310292939935", 150},
  {5.0583794318301693828703754e+67, "50583794318301694", 68},
  {3.7028775113743831169740033e+83, "3702877511374383", 84},
  {1.7001928002531001482206230e+137, "17001928002531001", 138},
  {6.8030567784352513616141778e-02, "6803056778435251", -1},
  {5.1571422175322775729000568e+05, "51571422175322776", 6},
  {2.6082878237768807907750849e+138, "26082878237768808", 139},
  {1.5557342839008523238569081e+299, "15557342839008523", 300},
  {2.7622701846015587317338342e-21, "27622701846015587", -20},
  {1.8340746337812665213606507e+75, "18340746337812665", 76},
  {1.8373667200582425141549435e-99, "18373667200582425", -98},
  {2.5077202589295214019697517e+233, "25077202589295214", 234},
  {9.3155336470900927415297226e-181, "9315533647090093", -180},
  {1.2065203095263054602050509e-212, "12065203095263055", -211},
  {4.1797189526506919686772229e-206, "4179718952650692", -205},
  {1.0774212171164888733781162e+163, "10774212171164889", 164},
  {3.6079772884021697906852172e+269, "360797728840217", 270},
  {5.2845398743739580175703562e-299, "5284539874373958", -298},
  {5.1411620045981611102339198e-66, "5141162004598161", -65},
  {1.4292602263038036113332187e-70, "14292602263038036", -69},
  {1.8544362689183427434176585e+222, "18544362689183427", 223},
  {1.2203913121427234536290632e+46, "12203913121427235", 47},
  {9.3586521568591851986324174e-280, "9358652156859185", -279},
  {9.8195001845033968637219544e+193, "9819500184503397", 194},
  {1.8341198508174780219740479e+92, "1834119850817478", 93},
  {2.2189806791390831997279327e+95, "22189806791390832", 96},
  {2.7588599796259787304614232e+28, "27588599796259787", 29},
  {1.0438799093132036429769308e-133, "10438799093132036", -132},
  {1.9301481254709607717211389e-161, "19301481254709608", -160},
  {8.2147860389499189635981368e-38, "8214786038949919", -37},
  {1.4767930717800809459683513e-131, "1476793071780081", -130},
  {7.2928169663832025126131105e-207, "7292816966383203", -206},
  {1.3528848258061727173312946e+137, "13528848258061727", 138},
  {1.1696896411185966165610507e-135, "11696896411185966", -134},
  {5.7043590609400180433289439e+247, "5704359060940018", 248},
  {1.1723807781080259851748389e-160, "1172380778108026", -159},
  {1.5639145388752310540950605e+86, "1563914538875231", 87},
  {2.8593644817880411801518565e-301, "2859364481788041", -300},
  {2.0552313010841082265790598e+55, "20552313010841082", 56},
  {1.5848856007551940368908921e-255, "1584885600755194", -254},
  {3.5581372604751262838461258e-77, "3558137260475126", -76},
  {3.4737554297890191797208313e+112, "3473755429789019", 113},
  {3.7108620555242162133967417e+183, "3710862055524216", 184},
  {6.2457609204440583535474092e-142, "6245760920444058", -141},
  {1.3283511082202118689352320e+269, "1328351108220212", 270},
  {6.3101826858426650643167373e-84, "6310182685842665", -83},
  {6.4731483203155401940335276e+47, "647314832031554", 48},
  {3.3521218030093973297314888e+36, "33521218030093973", 37},
  {8.1496538877905847556190029e+91, "8149653887790585", 92},
  {8.2337752540051492247086586e+223, "8233775254005149", 224},
  {5.2744955705637860260415195e-03, "5274495570563786", -2},
  {5.0158294967240228944704654e-92, "5015829496724023", -91},
  {6.1496883642510474216976964e-186, "61496883642510474", -185},
  {4.6951093196225182122681657e-200, "4695109319622518", -199},
  {5.1548072927167489537610735e+95, "5154807292716749", 96},
  {4.0514960981707074956839341e-99, "40514960981707075", -98},
  {2.0176151049084389541846211e-88, "2017615104908439", -87},
  {4.3973764730943331791595956e+64, "4397376473094333", 65},
  {3.3056304480178855572453081e-18, "33056304480178856", -17},
  {8.7564959965140630113794220e+108, "8756495996514063", 109},
  {8.8806513502820326562219986e-293, "8880651350282033", -292},
  {6.8293940458997188401976037e+77, "6829394045899719", 78},
  {1.2561444737859024144292529e+80, "12561444737859024", 81},
  {3.2437459488966473207960633e+100, "32437459488966473", 101},
  {8.7836280777599749407571608e-218, "8783628077759975", -217},
  {9.6380673969980770404982766e+267, "9638067396998077", 268},
  {8.0595941853634890714990307e+87, "8059594185363489", 88},
  {7.4018511942000961016135282e+289, "7401851194200096", 290},
  {5.4445205343322878107744993e+27, "5444520534332288", 28},
  {2.2377246830298706743026160e-128, "22377246830298707", -127},
  {8.1602943170749557420040310e+249, "8160294317074956", 250},
  {1.0849902404063886255612665e+73, "10849902404063886", 74},
  {1.0087099731301908021404080e+240, "10087099731301908", 241},
  {3.4868397551408806442762140e-248, "34868397551408806", -247},
  {6.5348448228978219525276271e-133, "6534844822897822", -132},
  {7.6165829293596024943589560e+299, "7616582929359602", 300},
  {8.5702789624324952041811481e-147, "8570278962432495", -146},
  {3.1557644018975223835430437e+304, "31557644018975224", 305},
  {4.2530721174982609511516785e+01, "4253072117498261", 2},
  {3.9098979228955994415521790e-202, "39098979228955994", -201},
  {2.6926440454136691458370059e+300, "2692644045413669", 301},
  {9.6719782043138876719609600e-85, "9671978204313888", -84},
  {4.0837677360357718491387482e+207, "4083767736035772", 208},
  {3.9118842324480975599045324e+281, "39118842324480976", 282},
  {1.1319550686214707754071032e+42, "11319550686214708", 43},
  {2.9007689904824293371940954e+264, "29007689904824293", 265},
  {3.0534548120508877962001465e+109, "3053454812050888", 110},
  {4.8384803999767126276699113e-124, "4838480399976713", -123},
  {1.9434791995088142468856308e-52, "19434791995088142", -51},
  {2.9653450475009338421132360e-18, "2965345047500934", -17},
  {3.3211413452717468823685907e-14, "3321141345271747", -13},
  {1.2533472034708010096828071e+64, "1253347203470801", 65},
  {4.3782747456685946049835824e+148, "43782747456685946", 149},
  {1.7545091520068615497521558e+253, "17545091520068615", 254},
  {7.4230832793245376829608023e+205, "7423083279324538", 206},
  {6.1188598451809694155023215e-170, "61188598451809694", -169},
  {1.4950878484485928213948288e-273, "14950878484485928", -272},
  {7.1852381851526821752480117e-240, "7185238185152682", -239},
  {2.7595460665393807595152498e-166, "2759546066539381", -165},
  {1.3419880791898266992599569e+199, "13419880791898267", 200},
  {1.2699339195482376652941238e-163, "12699339195482377", -162},
  {3.7731263681861952025707008e-109, "3773126368186195", -108},
  {1.3125880639737883032403946e+171, "13125880639737883", 172},
  {1.1590029050899235860987824e-20, "11590029050899236", -19},
  {7.7897398009798848982222623e-51, "7789739800979885", -50},
  {1.0956800963215789259658101e-53, "1095680096321579", -52},
  {9.9375847423533779652152224e+227, "9937584742353378", 228},
  {6.9214027430811858637203743e-153, "6921402743081186", -152},
  {1.5058989292392246718499638e-297, "15058989292392247", -296},
  {6.1670343466483825858673340e-264, "6167034346648383", -263},
  {9.0453846234000999342104812e-119, "90453846234001", -118},
  {3.2239328443235515770117059e-289, "32239328443235516", -288},
  {1.9172825516330074973356576e+239, "19172825516330075", 240},
  {1.7818850598479547319285899e-40, "17818850598479547", -39},
  {6.2013906418856246529969256e+218, "6201390641885625", 219},
  {1.1911136939089829735938782e+283, "1191113693908983", 284},
  {1.4934835288867264229984494e-41, "14934835288867264", -40},
  {1.2618136622593140097377984e+100, "1261813662259314", 101},
  {2.7138579948404531838789950e-182, "27138579948404532", -181},
  {6.4882342689529258197737984e-185, "6488234268952926", -184},
  {1.8075889564757063980022495e-178, "18075889564757064", -177},
  {6.8149181865923220442531353e+87, "6814918186592322", 88},
  {2.7430732797056606399365120e+24, "27430732797056606", 25},
  {2.1767241348724113337211606e-271, "21767241348724113", -270},
  {5.7975468416473467313763653e-81, "5797546841647347", -80},
  {2.9170226057140070400000000e+18, "2917022605714007", 19},
  {1.1871512181454391401486114e+221, "11871512181454391", 222},
  {1.2785892728688098588338375e+134, "12785892728688099", 135},
  {9.1681545246906473959969980e-156, "9168154524690647", -155},
  {4.0856408534511614821253455e-186, "40856408534511615", -185},
  {1.7429184427428149162301458e+53, "1742918442742815", 54},
  {2.6205626512979367065532253e-33, "26205626512979367", -32},
  {1.8574514705148792636622204e-47, "18574514705148793", -46},
  {3.4562923856399908955545151e+50, "3456292385639991", 51},
  {2.4908388006224989004625503e-284, "2490838800622499", -283},
  {6.3486419751293485229920149e+249, "63486419751293485", 250},
  {1.8124880949018865389013171e+141, "18124880949018865", 142},
  {2.4169731458316356035827929e-180, "24169731458316356", -179},
  {1.0540443938518703312902237e-256, "10540443938518703", -255},
  {2.6046257922327989042039168e-50, "2604625792232799", -49},
  {1.9746685919240028123675836e+154, "19746685919240028", 155},
  {1.0612757505116825596346745e+53, "10612757505116826", 54},
  {3.1453298137472017358269445e-99, "31453298137472017", -98},
  {1.5335834438305589611673929e+206, "1533583443830559", 207},
  {6.0017467768992588598716157e+288, "6001746776899259", 289},
  {1.2636819159822345245795728e-257, "12636819159822345", -256},
  {7.8901235970780118803565937e+216, "7890123597078012", 217},
  {6.6857332101933750641721565e+168, "6685733210193375", 169},
  {1.9572486979257460976640788e-240, "1957248697925746", -239},
  {1.2092364802721829338448774e-230, "1209236480272183", -229},
  {7.2090600177599914341493134e-82, "7209060017759991", -81},
  {1.2605556237057084362471175e+36, "12605556237057084", 37},
  {1.5011454653972070828014234e+274, "1501145465397207", 275},
  {1.7282596297171318533506385e+134, "17282596297171319", 135},
  {4.5224001307620175703693401e-44, "4522400130762018", -43},
  {8.6452936691312390074408856e-124, "8645293669131239", -123},
  {1.8550878408104612250092124e+179, "18550878408104612", 180},
  {1.6124238790063664314975298e-31, "16124238790063664", -30},
  {9.9022642665087304600998027e-111, "990226426650873", -110},
  {5.9361219661483106121312434e-14, "593612196614831", -13},
  {1.1186997483665862400000000e+17, "11186997483665862", 18},
  {2.8595284609166550751718688e+298, "2859528460916655", 299},
  {4.8669974781033820582739079e+194, "4866997478103382", 195},
  {1.6606021259695406250000000e+14, "16606021259695406", 15},
  {2.7138432796162999213163032e+226, "27138432796163", 227},
  {9.7745387133737974805171477e+256, "9774538713373797", 257},
  {9.1429974465625459473325238e+221, "9142997446562546", 222},
  {2.3430445812628658687165159e+60, "2343044581262866", 61},
  {3.0917893831922274863401342e+163, "30917893831922275", 164},
  {3.2024028489316366451302823e+191, "32024028489316366", 192},
  {5.1355778760989556833166045e+102, "5135577876098956", 103},
  {1.5815495036689394179517871e+186, "15815495036689394", 187},
  {6.7189217870181943439159432e-71, "6718921787018194", -70},
  {3.6341989927740303161396040e-282, "363419899277403", -281},
  {1.0104643220949074245766185e-92, "10104643220949074", -91},
  {1.7614633861221138623762560e+222, "1761463386122114", 223},
  {2.5620281827952940668640777e-260, "2562028182795294", -259},
  {1.9275113295811416302960595e-01, "19275113295811416", 0},
  {2.3203028039658426815208374e+300, "23203028039658427", 301},
  {1.2100682739181636795731566e-176, "12100682739181637", -175},
  {1.5630611596369581789458870e+199, "15630611596369582", 200},
  {9.4235105837069635862724927e+78, "9423510583706964", 79},
  {4.5871009421426591995351245e+135, "4587100942142659", 136},
  {3.4944816862222878067117466e-219, "3494481686222288", -218},
  {7.5419583393531165546073110e-184, "7541958339353117", -183},
  {6.9767086288946019031223419e-151, "6976708628894602", -150},
  {2.6297531478076787607278675e+04, "26297531478076788", 5},
  {1.9252455556233719664639942e+74, "1925245555623372", 75},
  {5.4791070238942592375987385e+220, "5479107023894259", 221},
  {1.9718040224234559417976494e-222, "1971804022423456", -221},
  {2.6927446438199695360000000e+18, "26927446438199695", 19},
  {1.1048093028630324240899923e-110, "11048093028630324", -109},
  {1.4166442901992844103558322e+253, "14166442901992844", 254},
  {2.3866519567229514422870269e+236, "23866519567229514", 237},
  {1.6448998599991937733036046e-183, "16448998599991938", -182},
  {3.2018655987259098305648872e+214, "320186559872591", 215},
  {9.6028073750828304399518002e+139, "960280737508283", 140},
  {3.6053709175280278851396119e+112, "3605370917528028", 113},
  {5.3678612093862184000000000e+16, "53678612093862184", 17},
  {1.1758088196388368498804047e-61, "11758088196388368", -60},
  {7.3111845228886280623882240e+24, "7311184522888628", 25},
  {3.7751219141350715113580008e-271, "37751219141350715", -270},
  {1.2272444115588777994870274e+158, "12272444115588778", 159},
  {1.0578120543892711759988698e-106, "10578120543892712", -105},
  {1.8049795585373821324749231e-166, "1804979558537382", -165},
  {2.9453954153395123068446733e+158, "29453954153395123", 159},
  {7.7520409027501668188635856e-154, "7752040902750167", -153},
  {9.3505000434810246280972335e+266, "9350500043481025", 267},
  {4.0663401962535149171349030e+127, "4066340196253515", 128},
  {6.3891669164784244062289782e-88, "6389166916478424", -87},
  {1.9968538040970659351754091e-05, "1996853804097066", -4},
  {1.1401740289304498209741046e-171, "11401740289304498", -170},
  {2.6973895314611377704376165e-65, "26973895314611378", -64},
  {1.5030583916472226752574030e+219, "15030583916472227", 220},
  {5.9016354967975337010747479e-119, "5901635496797534", -118},
  {5.5057011683123083272014322e+227, "5505701168312308", 228},
  {2.4486789404328970704227686e+05, "2448678940432897", 6},
  {1.9540309438755359181773269e+237, "1954030943875536", 238},
  {5.9166151821365592203025285e-259, "5916615182136559", -258},
  {3.6291889661132172677916346e+304, "36291889661132173", 305},
  {2.0496882968526716402164306e+111, "20496882968526716", 112},
  {6.5964628017958319660218413e-134, "6596462801795832", -133},
  {5.5428509297343401609011035e-223, "554285092973434", -222},
  {1.1935443808700205869798686e-21, "11935443808700206", -20},
  {7.6281491414869647503427519e-10, "7628149141486965", -9},
  {4.8476367642459541591845556e-240, "4847636764245954", -239},
  {5.1717677126404026702855879e-260, "5171767712640403", -259},
  {2.6188763642750483455333653e-105, "26188763642750483", -104},
  {8.4376050447282112365423405e+110, "8437605044728211", 111},
  {2.5013415767477255491870342e+287, "25013415767477255", 288},
  {1.0900916178622878980559943e+111, "10900916178622879", 112},
  {4.3161774591850062998058915e+192, "43161774591850063", 193},
  {7.1385988838684118288013023e+293, "7138598883868412", 294},
  {3.3241635795168614494336987e+218, "33241635795168614", 219},
  {1.1706796602854120623665392e-100, "1170679660285412", -99},
  {5.5091783777528446229834372e-33, "55091783777528446", -32},
  {3.5543063672797957302839249e-268, "35543063672797957", -267},
  {4.7416589007236147063456325e+55, "47416589007236147", 56},
  {1.1961039145068115677353505e+73, "11961039145068116", 74},
  {3.4383583346367487211137752e+41, "34383583346367487", 42},
  {1.9340018095383556230271953e-307, "19340018095383556", -306},
  {1.0201062897076509110925363e-15, "1020106289707651", -14},
  {1.8894657149444586421279919e-61, "18894657149444586", -60},
  {6.3081111541333944553499036e+249, "63081111541333945", 250},
  {2.8190224935830564557992088e-21, "28190224935830565", -20},
  {1.3381910517047513081368265e+96, "13381910517047513", 97},
  {8.2941146087394355754427543e-155, "8294114608739436", -154},
  {4.3207936241158593579187322e+76, "43207936241158594", 77},
  {1.3685771469285124531189299e+100, "13685771469285125", 101},
  {1.4468480765894355067065403e+231, "14468480765894355", 232},
  {9.9036750689634311496741664e+35, "9903675068963431", 36},
  {2.3983495454156592743153206e+100, "23983495454156593", 101},
  {2.5999935440843913170283486e+01, "25999935440843913", 2},
  {2.9790867580901074151900062e+69, "29790867580901074", 70},
  {8.6553664424283969318033811e-132, "8655366442428397", -131},
  {8.0576834361093744064230779e-14, "8057683436109374", -13},
  {5.9719879709739898327924674e-179, "597198797097399", -178},
  {2.3953067956879837475240337e+143, "23953067956879837", 144},
  {2.1886824033322774627496791e-14, "21886824033322775", -13},
  {1.0650078163149788500332294e-141, "10650078163149789", -140},
  {8.2632573961955715296383237e+107, "8263257396195572", 108},
  {6.9628652053882302130495883e+52, "696286520538823", 53},
  {4.5280170015095921462377833e+156, "4528017001509592", 157},
  {3.4918126607741346899629886e-04, "34918126607741347", -3},
  {1.6006306441694437190335859e-200, "16006306441694437", -199},
  {3.4773197610637076725760000e+21, "34773197610637077", 22},
  {7.7035352682192866560020484e+110, "7703535268219287", 111},
  {5.1457506037024690124749818e+253, "5145750603702469", 254},
  {4.5368844167797284756264131e+258, "45368844167797285", 259},
  {5.9141813961953971433471932e+223, "5914181396195397", 224},
  {1.5410727874851033902814379e+01, "15410727874851034", 2},
  {3.0390962184156620161502808e-115, "3039096218415662", -114},
  {1.8144339407880201273846227e-162, "18144339407880201", -161},
  {1.2573121209110210503014660e+115, "1257312120911021", 116},
  {4.2656013850522093344863917e+36, "42656013850522093", 37},
  {2.0239557826158997075646188e+188, "20239557826158997", 189},
  {2.0372382428919147251648738e-208, "20372382428919147", -207},
  {1.1441363991752239253208793e+254, "11441363991752239", 255},
  {1.1234960309701609208716515e+261, "1123496030970161", 262},
  {7.1239658773251766295535352e+149, "7123965877325177", 150},
  {6.8135672362758880984320106e+138, "6813567236275888", 139},
  {1.0965647941208693847656250e+12, "10965647941208694", 13},
  {1.9643886595777795354716162e-292, "19643886595777795", -291},
  {1.9438877555565074460416652e-72, "19438877555565074", -71},
  {1.1855554164516194206105415e-04, "11855554164516194", -3},
  {1.2366566152411840644784657e-10, "1236656615241184", -9},
  {1.1421605458667084088011013e+281, "11421605458667084", 282},
  {1.0112852840672326186757167e+187, "10112852840672326", 188},
  {8.5270386437649910308627664e-275, "8527038643764991", -274},
  {2.6436547488846527094995157e+256, "26436547488846527", 257},
  {3.9384178937857716619812952e+157, "39384178937857717", 158},
  {2.8504244861636358619351773e+289, "2850424486163636", 290},
  {1.2971447967207697384133186e+156, "12971447967207697", 157},
  {1.3255650582509259017321009e-265, "1325565058250926", -264},
  {6.9565435956264518090772776e-27, "6956543595626452", -26},
  {1.9066246245675020043658628e-72, "1906624624567502", -71},
  {2.8885136553343643761304155e-283, "28885136553343644", -282},
  {1.2662433202914897819615816e-70, "12662433202914898", -69},
  {8.1205022656023800444116331e-271, "812050226560238", -270}
};

Vector<const PrecomputedShortest> PrecomputedShortestRepresentations() {
  int number_elements =
      sizeof(kShortestTestNumbers) / sizeof(PrecomputedShortest);
  return Vector<const PrecomputedShortest>(kShortestTestNumbers,
                                           number_elements);
}

}  // namespace base
}  // namespace v8
                                                                                                                                                                    node-23.7.0/deps/v8/test/unittests/gay-shortest.h                                                   0000664 0000000 0000000 00000003646 14746647661 0021701 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2006-2008 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef GAY_SHORTEST_H_
#define GAY_SHORTEST_H_

#include "src/base/vector.h"

namespace v8 {
namespace base {

struct PrecomputedShortest {
  double v;
  const char* representation;
  int decimal_point;
};

base::Vector<const PrecomputedShortest> PrecomputedShortestRepresentations();

}  // namespace base
}  // namespace v8

#endif  // GAY_SHORTEST_H_
                                                                                          node-23.7.0/deps/v8/test/unittests/gen_fuzztest_configs.py                                          0000664 0000000 0000000 00000010036 14746647661 0023677 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
#
# Copyright 2024 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""List all available fuzz tests and create wrapper scripts for each.

Invoked by GN depending on the unit-tests target. Expected to be called
from the root out dir of GN.

Writes the wrappers and 'fuzztests.stamp' into the ./fuzztests/ directory.
"""

import os
import re
import shutil
import stat
import subprocess
import sys

from pathlib import Path, PurePath

# Set up path to be able to import action_helpers
BASE_DIR = Path(__file__).absolute().parent.parent.parent
sys.path.append(str(BASE_DIR / 'build'))
import action_helpers

CENTIPEDE = 'centipede'
EXECUTABLE = 'v8_unittests'
FUZZ_TEST_DIR = 'fuzztests'
FUZZ_TEST_STAMP = 'fuzztests.stamp'

# When this script is enabled, we expect to find at least the demo tests.
MIN_FUZZTESTS = 2

# This is an arbitrary safeguard. If we run into it and it's legit,
# just double it.
MAX_FUZZTESTS = 100

WRAPPER_HEADER = """
#!/bin/sh
BINARY_DIR="$(cd "${{0%/*}}"/..; pwd)"
cd $BINARY_DIR
""".strip()

CENTIPEDE_WRAPPER = WRAPPER_HEADER + """
exec $BINARY_DIR/centipede $@
"""

FUZZTEST_WRAPPER = WRAPPER_HEADER + """
# Normal fuzzing.
if [ "$#" -eq  "0" ]; then
   exec $BINARY_DIR/v8_unittests --fuzz={test} --corpus_database=""
fi
# Fuzztest replay.
if [ "$#" -eq  "1" ]; then
   unset CENTIPEDE_RUNNER_FLAGS
   FUZZTEST_REPLAY=$1 exec $BINARY_DIR/v8_unittests --fuzz={test} --corpus_database=""
fi
"""

FUZZER_NAME_RE = re.compile(r'^\w+\.\w+$')


def list_fuzz_tests(executable):
  env = os.environ
  env['ASAN_OPTIONS'] = 'detect_odr_violation=0'
  env['CENTIPEDE_RUNNER_FLAGS'] = 'stack_limit_kb=0:'
  test_list = subprocess.check_output(
      [executable, '--list_fuzz_tests=true'],
      env=env,
      cwd='.',
  ).decode('utf-8')
  return sorted(set(re.findall('Fuzz test: (.*)', test_list)))


def fuzz_test_to_file_name(test):
  assert FUZZER_NAME_RE.match(test)
  fuzztest_name = re.sub(r'((f|F)uzz(t|T)est|(t|T)est)', '', test)
  fuzztest_name = re.sub(r'\.', ' ', fuzztest_name)
  fuzztest_name = re.sub('([A-Z]+)', r' \1', fuzztest_name)
  fuzztest_name = re.sub('([A-Z][a-z]+)', r' \1', fuzztest_name)
  splitted = fuzztest_name.split()
  splitted = map(str.lower, splitted)
  splitted = filter(bool, splitted)
  return 'v8_' + '_'.join(splitted) + '_fuzztest'


def create_wrapper(file_name, template, test=''):
  with action_helpers.atomic_output(file_name) as f:
    wrapper = template.format(test=test)
    f.write(wrapper.encode('utf-8'))

  # Make the wrapper world-executable.
  st = os.stat(file_name)
  m = st.st_mode
  os.chmod(file_name, m | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)


def setup_fuzztests_dir(cwd):
  # This script owns the fuzztests subdirectory. Purge everything
  # to enable consistent incremental builds.
  fuzz_test_dir = cwd / FUZZ_TEST_DIR
  shutil.rmtree(fuzz_test_dir, ignore_errors=True)
  fuzz_test_dir.mkdir(exist_ok=True)

  # Centipede is later expected to be side-by-side with the fuzz-test
  # targets. Create a bash redirect so that shared libraries in cwd
  # keep loading.
  create_wrapper(fuzz_test_dir / CENTIPEDE, CENTIPEDE_WRAPPER)

  return fuzz_test_dir


def create_fuzztest_wrapper(fuzz_test_dir, test_name):
  fuzztest_path = fuzz_test_dir / fuzz_test_to_file_name(test_name)
  create_wrapper(fuzztest_path, FUZZTEST_WRAPPER, test_name)


def main():
  # The CWD is expected to be the root out dir of GN.
  cwd = Path(os.getcwd())

  # We expect the unit-test executable present in the root dir.
  executable = cwd / EXECUTABLE
  assert executable.exists()

  fuzz_test_dir = setup_fuzztests_dir(cwd)
  fuzz_tests = list_fuzz_tests(executable)
  assert MIN_FUZZTESTS <= len(fuzz_tests) <= MAX_FUZZTESTS

  for test_name in fuzz_tests:
    create_fuzztest_wrapper(fuzz_test_dir, test_name)

  # This is a place holder telling GN that we're done.
  with action_helpers.atomic_output(fuzz_test_dir / FUZZ_TEST_STAMP) as f:
    f.write('\n'.join(fuzz_tests).encode('utf-8'))


if __name__ == '__main__':
  main()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/unittests/gen_fuzztest_configs_test.py                                     0000664 0000000 0000000 00000007331 14746647661 0024742 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2024 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import unittest

from mock import patch
from pyfakefs import fake_filesystem_unittest
from textwrap import dedent

import gen_fuzztest_configs


class TestFileName(unittest.TestCase):

  def test_errors(self):

    def check_error(test_name):
      with self.assertRaises(AssertionError):
        gen_fuzztest_configs.fuzz_test_to_file_name(test_name)

    check_error('')
    check_error(' ')
    check_error('foo')
    check_error('SimpleTestSuite')
    check_error('ExampleFuzzTest')
    check_error('suite_test_fuzztest')
    check_error('Too.Many.Dots')
    check_error('No.White space')

  def test_conversion(self):

    def check_conversion(test_name, file_name):
      self.assertEqual(file_name,
                       gen_fuzztest_configs.fuzz_test_to_file_name(test_name))

    check_conversion('Foo.Bar', 'v8_foo_bar_fuzztest')
    check_conversion('foo.bar', 'v8_foo_bar_fuzztest')
    check_conversion('SimpleSuite.SimpleTest',
                     'v8_simple_suite_simple_fuzztest')
    check_conversion('RemoveFuzzTest.SimpleTest',
                     'v8_remove_simple_fuzztest')
    check_conversion('IPConversionABC.I24P',
                     'v8_ip_conversion_abc_i24_p_fuzztest')


class TestFullRun(fake_filesystem_unittest.TestCase):

  def test_no_executable(self):
    self.setUpPyfakefs(allow_root_user=True)
    with self.assertRaises(AssertionError):
      # The expected executable is missing.
      gen_fuzztest_configs.main()

  def _set_up_executable(self):
    os.makedirs('/out/build')
    os.chdir('/out/build')
    with open('/out/build/v8_unittests', 'w') as f:
      f.write('I am an executable')

  def test_no_fuzzers(self):
    self.setUpPyfakefs(allow_root_user=True)
    self._set_up_executable()

    with patch('subprocess.check_output', return_value=b''):
      with self.assertRaises(AssertionError) as e:
        gen_fuzztest_configs.main()

  def test_three_fuzzers(self):
    self.setUpPyfakefs(allow_root_user=True)
    self._set_up_executable()

    os.makedirs('/out/build/fuzztests')
    with open('/out/build/fuzztests/leftover_garbage', 'w') as f:
      f.write('')

    fake_fuzz_test_list = dedent("""\
      [*] Fuzz test: FooTest.Test1
      [*] Fuzz test: FooTest.Test2
      [*] Fuzz test: AlphaSortThis.FooBarXYZ""")

    with patch(
        'subprocess.check_output',
        return_value=fake_fuzz_test_list.encode('utf-8')):
      gen_fuzztest_configs.main()

    fuzz_test_output = sorted(os.listdir('/out/build/fuzztests'))
    expexted_fuzz_test_output = [
        'centipede',  # Bash wrapper to ../centipede
        'fuzztests.stamp',
        'v8_alpha_sort_this_foo_bar_xyz_fuzztest',
        'v8_foo_1_fuzztest',
        'v8_foo_2_fuzztest',
    ]
    self.assertEqual(expexted_fuzz_test_output, fuzz_test_output)

    with open('/out/build/fuzztests/fuzztests.stamp') as f:
      self.assertEqual('AlphaSortThis.FooBarXYZ\nFooTest.Test1\nFooTest.Test2',
                       f.read())

    expected_wrapper = dedent("""\
      #!/bin/sh
      BINARY_DIR="$(cd "${0%/*}"/..; pwd)"
      cd $BINARY_DIR
      # Normal fuzzing.
      if [ "$#" -eq  "0" ]; then
         exec $BINARY_DIR/v8_unittests --fuzz=FooTest.Test1 --corpus_database=""
      fi
      # Fuzztest replay.
      if [ "$#" -eq  "1" ]; then
         unset CENTIPEDE_RUNNER_FLAGS
         FUZZTEST_REPLAY=$1 exec $BINARY_DIR/v8_unittests --fuzz=FooTest.Test1 --corpus_database=""
      fi
      """)
    with open('/out/build/fuzztests/v8_foo_1_fuzztest') as f:
      self.assertEqual(expected_wrapper, f.read())


if __name__ == '__main__':
  unittest.main()
                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/unittests/heap/                                                            0000775 0000000 0000000 00000000000 14746647661 0020003 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/test/unittests/heap/allocation-observer-unittest.cc                             0000664 0000000 0000000 00000012337 14746647661 0026147 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/allocation-observer.h"

#include "src/base/logging.h"
#include "test/unittests/test-utils.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace v8 {
namespace internal {

namespace {
class UnusedObserver : public AllocationObserver {
 public:
  explicit UnusedObserver(size_t step_size) : AllocationObserver(step_size) {}
  void Step(int bytes_allocated, Address soon_object, size_t size) override {
    CHECK(false);
  }
};
}  // namespace

TEST(AllocationObserverTest, AddAndRemoveUnusedObservers) {
  AllocationCounter counter;
  CHECK_EQ(SIZE_MAX, counter.NextBytes());

  UnusedObserver observer100(100);
  UnusedObserver observer200(200);

  counter.AddAllocationObserver(&observer200);
  CHECK_EQ(counter.NextBytes(), 200);

  counter.AddAllocationObserver(&observer100);
  CHECK_EQ(counter.NextBytes(), 100);

  counter.AdvanceAllocationObservers(90);
  CHECK_EQ(counter.NextBytes(), 10);

  counter.RemoveAllocationObserver(&observer100);
  CHECK_EQ(counter.NextBytes(), 110);

  counter.RemoveAllocationObserver(&observer200);
  CHECK_EQ(SIZE_MAX, counter.NextBytes());
}

namespace {
class VerifyStepObserver : public AllocationObserver {
 public:
  explicit VerifyStepObserver(size_t step_size)
      : AllocationObserver(step_size) {}

  void Step(int bytes_allocated, Address soon_object, size_t size) override {
    CHECK(!do_not_invoke_);

    invocations_++;
    CHECK_EQ(expected_bytes_allocated_, bytes_allocated);
    CHECK_EQ(expected_size_, size);
  }

  void ExpectNoInvocation() { do_not_invoke_ = true; }
  void Expect(int expected_bytes_allocated, size_t expected_size) {
    do_not_invoke_ = false;
    expected_bytes_allocated_ = expected_bytes_allocated;
    expected_size_ = expected_size;
  }

  int Invocations() { return invocations_; }

 private:
  bool do_not_invoke_ = false;
  int invocations_ = 0;
  int expected_bytes_allocated_ = 0;
  size_t expected_size_ = 0;
};
}  // namespace

TEST(AllocationObserverTest, Step) {
  AllocationCounter counter;
  CHECK_EQ(SIZE_MAX, counter.NextBytes());
  const Address kSomeObjectAddress = 8;

  VerifyStepObserver observer100(100);
  VerifyStepObserver observer200(200);

  counter.AddAllocationObserver(&observer100);
  counter.AddAllocationObserver(&observer200);

  observer100.Expect(90, 8);
  observer200.ExpectNoInvocation();

  counter.AdvanceAllocationObservers(90);
  counter.InvokeAllocationObservers(kSomeObjectAddress, 8, 10);
  CHECK_EQ(observer100.Invocations(), 1);
  CHECK_EQ(observer200.Invocations(), 0);
  CHECK_EQ(counter.NextBytes(),
           10 /* aligned_object_size */ + 100 /* smallest step size*/);

  observer100.Expect(90, 16);
  observer200.Expect(180, 16);

  counter.AdvanceAllocationObservers(90);
  counter.InvokeAllocationObservers(kSomeObjectAddress, 16, 20);
  CHECK_EQ(observer100.Invocations(), 2);
  CHECK_EQ(observer200.Invocations(), 1);
  CHECK_EQ(counter.NextBytes(),
           20 /* aligned_object_size */ + 100 /* smallest step size*/);
}

namespace {
class RecursiveAddObserver : public AllocationObserver {
 public:
  explicit RecursiveAddObserver(size_t step_size, AllocationCounter* counter,
                                AllocationObserver* observer)
      : AllocationObserver(step_size), counter_(counter), observer_(observer) {}

  void Step(int bytes_allocated, Address soon_object, size_t size) override {
    counter_->AddAllocationObserver(observer_);
  }

 private:
  AllocationCounter* counter_;
  AllocationObserver* observer_;
};
}  // namespace

TEST(AllocationObserverTest, RecursiveAdd) {
  AllocationCounter counter;
  const Address kSomeObjectAddress = 8;

  UnusedObserver observer50(50);
  RecursiveAddObserver observer100(100, &counter, &observer50);

  counter.AddAllocationObserver(&observer100);

  CHECK_EQ(counter.NextBytes(), 100);
  counter.AdvanceAllocationObservers(90);
  counter.InvokeAllocationObservers(kSomeObjectAddress, 10, 10);

  CHECK_EQ(counter.NextBytes(),
           10 /* aligned_object_size */ + 50 /* smallest step size */);
}

namespace {
class RecursiveRemoveObserver : public AllocationObserver {
 public:
  explicit RecursiveRemoveObserver(size_t step_size, AllocationCounter* counter,
                                   AllocationObserver* observer)
      : AllocationObserver(step_size), counter_(counter), observer_(observer) {}

  void Step(int bytes_allocated, Address soon_object, size_t size) override {
    counter_->RemoveAllocationObserver(observer_);
  }

 private:
  AllocationCounter* counter_;
  AllocationObserver* observer_;
};
}  // namespace

TEST(AllocationObserverTest, RecursiveRemove) {
  AllocationCounter counter;
  const Address kSomeObjectAddress = 8;

  UnusedObserver observer75(75);
  RecursiveRemoveObserver observer50(50, &counter, &observer75);

  counter.AddAllocationObserver(&observer50);
  counter.AddAllocationObserver(&observer75);

  CHECK_EQ(counter.NextBytes(), 50);
  counter.AdvanceAllocationObservers(40);
  counter.InvokeAllocationObservers(kSomeObjectAddress, 10, 10);

  CHECK_EQ(counter.NextBytes(),
           10 /* aligned_object_size */ + 50 /* smallest step size */);
}

}  // namespace internal
}  // namespace v8
                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/unittests/heap/base/                                                       0000775 0000000 0000000 00000000000 14746647661 0020715 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/test/unittests/heap/base/active-system-pages-unittest.cc                        0000664 0000000 0000000 00000005100 14746647661 0026767 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/base/active-system-pages.h"

#include "testing/gtest/include/gtest/gtest.h"

namespace heap {
namespace base {

TEST(ActiveSystemPagesTest, Add) {
  ActiveSystemPages pages;
  const size_t kPageSizeBits = 0;
  EXPECT_EQ(pages.Add(0, 1, kPageSizeBits), size_t{1});
  EXPECT_EQ(pages.Add(1, 2, kPageSizeBits), size_t{1});
  EXPECT_EQ(pages.Add(63, 64, kPageSizeBits), size_t{1});
  EXPECT_EQ(pages.Size(kPageSizeBits), size_t{3});

  // Try to add page a second time.
  EXPECT_EQ(pages.Add(0, 2, kPageSizeBits), size_t{0});
}

TEST(ActiveSystemPagesTest, AddUnalignedRange) {
  ActiveSystemPages pages;
  const size_t kPageSizeBits = 12;
  const size_t kPageSize = size_t{1} << kPageSizeBits;
  const size_t kWordSize = 8;
  EXPECT_EQ(pages.Add(0, kPageSize + kWordSize, kPageSizeBits), size_t{2});
  EXPECT_EQ(pages.Add(3 * kPageSize - kWordSize, 3 * kPageSize, kPageSizeBits),
            size_t{1});
  EXPECT_EQ(pages.Add(kPageSize + kWordSize, 3 * kPageSize - kWordSize,
                      kPageSizeBits),
            size_t{0});
  EXPECT_EQ(pages.Size(kPageSizeBits), size_t{3} * kPageSize);
}

TEST(ActiveSystemPagesTest, AddFullBitset) {
  ActiveSystemPages pages;
  const size_t kPageSizeBits = 0;
  EXPECT_EQ(pages.Add(0, 64, kPageSizeBits), size_t{64});
  EXPECT_EQ(pages.Add(0, 64, kPageSizeBits), size_t{0});
  EXPECT_EQ(pages.Size(kPageSizeBits), size_t{64});
}

TEST(ActiveSystemPagesTest, Reduce) {
  ActiveSystemPages original;
  const size_t kPageSizeBits = 0;
  EXPECT_EQ(original.Add(0, 3, kPageSizeBits), size_t{3});

  ActiveSystemPages updated;
  EXPECT_EQ(updated.Add(1, 3, kPageSizeBits), size_t{2});

  EXPECT_EQ(original.Reduce(updated), size_t{1});
}

TEST(ActiveSystemPagesTest, ReduceFullBitset) {
  ActiveSystemPages original;
  const size_t kPageSizeBits = 0;
  EXPECT_EQ(original.Add(0, 64, kPageSizeBits), size_t{64});

  ActiveSystemPages updated;
  EXPECT_EQ(updated.Add(63, 64, kPageSizeBits), size_t{1});

  EXPECT_EQ(original.Reduce(updated), size_t{63});
}

TEST(ActiveSystemPagesTest, Clear) {
  ActiveSystemPages pages;
  const size_t kPageSizeBits = 0;
  EXPECT_EQ(pages.Add(0, 64, kPageSizeBits), size_t{64});
  EXPECT_EQ(pages.Clear(), size_t{64});
  EXPECT_EQ(pages.Size(kPageSizeBits), size_t{0});

  EXPECT_EQ(pages.Add(0, 2, kPageSizeBits), size_t{2});
  EXPECT_EQ(pages.Clear(), size_t{2});
  EXPECT_EQ(pages.Size(kPageSizeBits), size_t{0});
}

}  // namespace base
}  // namespace heap
                                                                                                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/test/unittests/heap/base/basic-slot-set-unittest.cc                             0000664 0000000 0000000 00000013316 14746647661 0025736 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/base/basic-slot-set.h"

#include <limits>
#include <map>

#include "testing/gtest/include/gtest/gtest.h"

namespace heap {
namespace base {

static constexpr size_t kTestGranularity = sizeof(void*);
using TestSlotSet = ::heap::base::BasicSlotSet<kTestGranularity>;
static constexpr size_t kTestPageSize = 1 << 17;
static constexpr size_t kBucketsTestPage =
    TestSlotSet::BucketsForSize(kTestPageSize);

TEST(BasicSlotSet, InsertAndLookup1) {
  TestSlotSet* set = TestSlotSet::Allocate(kBucketsTestPage);
  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    EXPECT_FALSE(set->Lookup(i));
  }
  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    set->Insert<TestSlotSet::AccessMode::ATOMIC>(i);
  }
  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    EXPECT_TRUE(set->Lookup(i));
  }
  TestSlotSet::Delete(set, kBucketsTestPage);
}

TEST(BasicSlotSet, InsertAndLookup2) {
  TestSlotSet* set = TestSlotSet::Allocate(kBucketsTestPage);
  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 7 == 0) {
      set->Insert<TestSlotSet::AccessMode::ATOMIC>(i);
    }
  }
  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 7 == 0) {
      EXPECT_TRUE(set->Lookup(i));
    } else {
      EXPECT_FALSE(set->Lookup(i));
    }
  }
  TestSlotSet::Delete(set, kBucketsTestPage);
}

TEST(BasicSlotSet, Iterate) {
  TestSlotSet* set = TestSlotSet::Allocate(kBucketsTestPage);

  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 7 == 0) {
      set->Insert<TestSlotSet::AccessMode::ATOMIC>(i);
    }
  }

  set->Iterate(
      0, 0, kBucketsTestPage,
      [](uintptr_t slot) {
        if (slot % 3 == 0) {
          return KEEP_SLOT;
        } else {
          return REMOVE_SLOT;
        }
      },
      TestSlotSet::KEEP_EMPTY_BUCKETS);

  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 21 == 0) {
      EXPECT_TRUE(set->Lookup(i));
    } else {
      EXPECT_FALSE(set->Lookup(i));
    }
  }

  TestSlotSet::Delete(set, kBucketsTestPage);
}

TEST(BasicSlotSet, IterateFromHalfway) {
  TestSlotSet* set = TestSlotSet::Allocate(kBucketsTestPage);

  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 7 == 0) {
      set->Insert<TestSlotSet::AccessMode::ATOMIC>(i);
    }
  }

  set->Iterate(
      0, kBucketsTestPage / 2, kBucketsTestPage,
      [](uintptr_t slot) {
        if (slot % 3 == 0) {
          return KEEP_SLOT;
        } else {
          return REMOVE_SLOT;
        }
      },
      TestSlotSet::KEEP_EMPTY_BUCKETS);

  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i < kTestPageSize / 2 && i % 7 == 0) {
      EXPECT_TRUE(set->Lookup(i));
    } else if (i >= kTestPageSize / 2 && i % 21 == 0) {
      EXPECT_TRUE(set->Lookup(i));
    } else {
      EXPECT_FALSE(set->Lookup(i));
    }
  }

  TestSlotSet::Delete(set, kBucketsTestPage);
}

TEST(BasicSlotSet, Remove) {
  TestSlotSet* set = TestSlotSet::Allocate(kBucketsTestPage);

  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 7 == 0) {
      set->Insert<TestSlotSet::AccessMode::ATOMIC>(i);
    }
  }

  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 3 != 0) {
      set->Remove(i);
    }
  }

  for (size_t i = 0; i < kTestPageSize; i += kTestGranularity) {
    if (i % 21 == 0) {
      EXPECT_TRUE(set->Lookup(i));
    } else {
      EXPECT_FALSE(set->Lookup(i));
    }
  }

  TestSlotSet::Delete(set, kBucketsTestPage);
}

namespace {
void CheckRemoveRangeOn(uint32_t start, uint32_t end) {
  TestSlotSet* set = TestSlotSet::Allocate(kBucketsTestPage);
  uint32_t first = start == 0 ? 0 : start - kTestGranularity;
  uint32_t last = end == kTestPageSize ? end - kTestGranularity : end;
  for (const auto mode :
       {TestSlotSet::FREE_EMPTY_BUCKETS, TestSlotSet::KEEP_EMPTY_BUCKETS}) {
    for (uint32_t i = first; i <= last; i += kTestGranularity) {
      set->Insert<TestSlotSet::AccessMode::ATOMIC>(i);
    }
    set->RemoveRange(start, end, kBucketsTestPage, mode);
    if (first != start) {
      EXPECT_TRUE(set->Lookup(first));
    }
    if (last == end) {
      EXPECT_TRUE(set->Lookup(last));
    }
    for (size_t i = start; i < end; i += kTestGranularity) {
      EXPECT_FALSE(set->Lookup(i));
    }
  }
  TestSlotSet::Delete(set, kBucketsTestPage);
}
}  // namespace

TEST(BasicSlotSet, RemoveRange) {
  CheckRemoveRangeOn(0, kTestPageSize);
  CheckRemoveRangeOn(1 * kTestGranularity, 1023 * kTestGranularity);
  for (uint32_t start = 0; start <= 32; start++) {
    CheckRemoveRangeOn(start * kTestGranularity,
                       (start + 1) * kTestGranularity);
    CheckRemoveRangeOn(start * kTestGranularity,
                       (start + 2) * kTestGranularity);
    const uint32_t kEnds[] = {32, 64, 100, 128, 1024, 1500, 2048};
    for (size_t i = 0; i < sizeof(kEnds) / sizeof(uint32_t); i++) {
      for (int k = -3; k <= 3; k++) {
        uint32_t end = (kEnds[i] + k);
        if (start < end) {
          CheckRemoveRangeOn(start * kTestGranularity, end * kTestGranularity);
        }
      }
    }
  }
  TestSlotSet* set = TestSlotSet::Allocate(kBucketsTestPage);
  for (const auto mode :
       {TestSlotSet::FREE_EMPTY_BUCKETS, TestSlotSet::KEEP_EMPTY_BUCKETS}) {
    set->Insert<TestSlotSet::AccessMode::ATOMIC>(kTestPageSize / 2);
    set->RemoveRange(0, kTestPageSize, kBucketsTestPage, mode);
    for (uint32_t i = 0; i < kTestPageSize; i += kTestGranularity) {
      EXPECT_FALSE(set->Lookup(i));
    }
  }
  TestSlotSet::Delete(set, kBucketsTestPage);
}

}  // namespace base
}  // namespace heap
                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/unittests/heap/base/bytes-unittest.cc                                      0000664 0000000 0000000 00000006573 14746647661 0024242 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2023 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/base/bytes.h"

#include <optional>

#include "testing/gtest/include/gtest/gtest.h"

namespace heap::base {

TEST(BytesAndDurationTest, MakeBytesAndDuration) {
  const auto bad =
      BytesAndDuration(17, v8::base::TimeDelta::FromMilliseconds(35));
  EXPECT_EQ(bad.bytes, 17u);
  EXPECT_EQ(bad.duration.InMilliseconds(), 35);
}

TEST(BytesAndDurationTest, InitialAsAverage) {
  BytesAndDurationBuffer buffer;
  EXPECT_DOUBLE_EQ(
      100.0 / 2,
      AverageSpeed(
          buffer,
          BytesAndDuration(100, v8::base::TimeDelta::FromMilliseconds(2)),
          std::nullopt));
}

TEST(BytesAndDurationTest, SelectedDuration) {
  BytesAndDurationBuffer buffer;
  // The entry will be ignored because of the selected duration below filtering
  // for the last 2ms.
  buffer.Push(BytesAndDuration(100, v8::base::TimeDelta::FromMilliseconds(8)));
  EXPECT_DOUBLE_EQ(
      100.0 / 2,
      AverageSpeed(
          buffer,
          BytesAndDuration(100, v8::base::TimeDelta::FromMilliseconds(2)),
          v8::base::TimeDelta::FromMilliseconds(2)));
}

TEST(BytesAndDurationTest, Empty) {
  BytesAndDurationBuffer buffer;
  EXPECT_DOUBLE_EQ(0.0, AverageSpeed(buffer, BytesAndDuration(), std::nullopt));
}

TEST(BytesAndDurationTest, Clear) {
  BytesAndDurationBuffer buffer;
  buffer.Push(BytesAndDuration(100, v8::base::TimeDelta::FromMilliseconds(2)));
  EXPECT_DOUBLE_EQ(100.0 / 2,
                   AverageSpeed(buffer, BytesAndDuration(), std::nullopt));
  buffer.Clear();
  EXPECT_DOUBLE_EQ(0.0, AverageSpeed(buffer, BytesAndDuration(), std::nullopt));
}

TEST(BytesAndDurationTest, MaxSpeed) {
  BytesAndDurationBuffer buffer;
  static constexpr size_t kMaxBytesPerMs = 1024;
  buffer.Push(BytesAndDuration(kMaxBytesPerMs,
                               v8::base::TimeDelta::FromMillisecondsD(0.5)));
  const double bounded_speed =
      AverageSpeed(buffer, BytesAndDuration(), std::nullopt, 0, kMaxBytesPerMs);
  EXPECT_DOUBLE_EQ(double{kMaxBytesPerMs}, bounded_speed);
}

TEST(BytesAndDurationTest, MinSpeed) {
  BytesAndDurationBuffer buffer;
  static constexpr size_t kMinBytesPerMs = 1;
  buffer.Push(BytesAndDuration(kMinBytesPerMs,
                               v8::base::TimeDelta::FromMillisecondsD(2)));
  const double bounded_speed =
      AverageSpeed(buffer, BytesAndDuration(), std::nullopt, kMinBytesPerMs);
  EXPECT_DOUBLE_EQ(double{kMinBytesPerMs}, bounded_speed);
}

TEST(BytesAndDurationTest, RingBufferAverage) {
  BytesAndDurationBuffer buffer;
  size_t sum = 0;
  for (size_t i = 0; i < BytesAndDurationBuffer::kSize; ++i) {
    sum += i + 1;
    buffer.Push(
        BytesAndDuration(i + 1, v8::base::TimeDelta::FromMillisecondsD(1)));
    EXPECT_DOUBLE_EQ(static_cast<double>(sum) / (i + 1),
                     AverageSpeed(buffer, BytesAndDuration(), std::nullopt));
  }
  EXPECT_DOUBLE_EQ(static_cast<double>(sum) / BytesAndDurationBuffer::kSize,
                   AverageSpeed(buffer, BytesAndDuration(), std::nullopt));
  // Overflow the ring buffer.
  buffer.Push(BytesAndDuration(100, v8::base::TimeDelta::FromMilliseconds(1)));
  EXPECT_DOUBLE_EQ(
      static_cast<double>(sum + 100 - 1) / BytesAndDurationBuffer::kSize,
      AverageSpeed(buffer, BytesAndDuration(), std::nullopt));
}

}  // namespace heap::base
                                                                                                                                     node-23.7.0/deps/v8/test/unittests/heap/base/incremental-marking-schedule-unittest.cc               0000664 0000000 0000000 00000015264 14746647661 0030632 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/base/incremental-marking-schedule.h"

#include "src/base/platform/time.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace heap::base {

namespace {

constexpr size_t kZeroBytesStep = 0;

class IncrementalMarkingScheduleTest : public ::testing::Test {
 public:
  static constexpr size_t kEstimatedLiveSize =
      100 *
      IncrementalMarkingSchedule::kDefaultMinimumMarkedBytesPerIncrementalStep;
};

const v8::base::TimeDelta kHalfEstimatedMarkingTime =
    v8::base::TimeDelta::FromMillisecondsD(
        IncrementalMarkingSchedule::kEstimatedMarkingTime.InMillisecondsF() *
        0.5);

}  // namespace

TEST_F(IncrementalMarkingScheduleTest, FirstStepReturnsDefaultDuration) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithDefaultMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  schedule->SetElapsedTimeForTesting(v8::base::TimeDelta::FromMilliseconds(0));
  EXPECT_EQ(
      IncrementalMarkingSchedule::kDefaultMinimumMarkedBytesPerIncrementalStep,
      schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
}

TEST_F(IncrementalMarkingScheduleTest, EmptyStepDuration) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithZeroMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  schedule->SetElapsedTimeForTesting(v8::base::TimeDelta::FromMilliseconds(0));
  // Make some progress on the marker to avoid returning step size for no
  // progress.
  schedule->UpdateMutatorThreadMarkedBytes(
      IncrementalMarkingSchedule::kStepSizeWhenNotMakingProgress);
  EXPECT_EQ(kZeroBytesStep,
            schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
}

// If marking is not behind schedule and very small time passed between steps
// the oracle should return the minimum step duration.
TEST_F(IncrementalMarkingScheduleTest, NoTimePassedReturnsMinimumDuration) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithDefaultMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  // Add incrementally marked bytes to tell oracle this is not the first step.
  schedule->UpdateMutatorThreadMarkedBytes(
      IncrementalMarkingSchedule::kDefaultMinimumMarkedBytesPerIncrementalStep);
  schedule->SetElapsedTimeForTesting(v8::base::TimeDelta::FromMilliseconds(0));
  EXPECT_EQ(
      IncrementalMarkingSchedule::kDefaultMinimumMarkedBytesPerIncrementalStep,
      schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
}

TEST_F(IncrementalMarkingScheduleTest, OracleDoesntExccedMaximumStepDuration) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithDefaultMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  // Add incrementally marked bytes to tell oracle this is not the first step.
  // Add at least `kStepSizeWhenNotMakingProgress` bytes or otherwise we'd get
  // the step size for not making progress.
  static constexpr size_t kMarkedBytes =
      IncrementalMarkingSchedule::kStepSizeWhenNotMakingProgress;
  schedule->UpdateMutatorThreadMarkedBytes(kMarkedBytes);
  schedule->SetElapsedTimeForTesting(
      IncrementalMarkingSchedule::kEstimatedMarkingTime);
  EXPECT_EQ(kEstimatedLiveSize - kMarkedBytes,
            schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
}

TEST_F(IncrementalMarkingScheduleTest, AheadOfScheduleReturnsMinimumDuration) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithDefaultMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  // Add incrementally marked bytes to tell oracle this is not the first step.
  schedule->UpdateMutatorThreadMarkedBytes(
      IncrementalMarkingSchedule::kDefaultMinimumMarkedBytesPerIncrementalStep);
  schedule->AddConcurrentlyMarkedBytes(0.6 * kEstimatedLiveSize);
  schedule->SetElapsedTimeForTesting(kHalfEstimatedMarkingTime);
  EXPECT_EQ(
      IncrementalMarkingSchedule::kDefaultMinimumMarkedBytesPerIncrementalStep,
      schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
}

TEST_F(IncrementalMarkingScheduleTest,
       AheadOfScheduleReturnsMinimumDurationZeroStep) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithZeroMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  // Add incrementally marked bytes to tell oracle this is not the first step.
  schedule->UpdateMutatorThreadMarkedBytes(
      IncrementalMarkingSchedule::kDefaultMinimumMarkedBytesPerIncrementalStep);
  schedule->AddConcurrentlyMarkedBytes(0.6 * kEstimatedLiveSize);
  schedule->SetElapsedTimeForTesting(kHalfEstimatedMarkingTime);
  EXPECT_EQ(kZeroBytesStep,
            schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
}

TEST_F(IncrementalMarkingScheduleTest, BehindScheduleReturnsDelta) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithDefaultMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  schedule->UpdateMutatorThreadMarkedBytes(0.1 * kEstimatedLiveSize);
  schedule->AddConcurrentlyMarkedBytes(0.25 * kEstimatedLiveSize);
  schedule->SetElapsedTimeForTesting(kHalfEstimatedMarkingTime);
  EXPECT_EQ(0.15 * kEstimatedLiveSize,
            schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
  schedule->AddConcurrentlyMarkedBytes(0.05 * kEstimatedLiveSize);
  schedule->SetElapsedTimeForTesting(kHalfEstimatedMarkingTime);
  EXPECT_EQ(0.1 * kEstimatedLiveSize,
            schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
  schedule->AddConcurrentlyMarkedBytes(0.05 * kEstimatedLiveSize);
  schedule->SetElapsedTimeForTesting(kHalfEstimatedMarkingTime);
  EXPECT_EQ(0.05 * kEstimatedLiveSize,
            schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize));
}

TEST_F(IncrementalMarkingScheduleTest, GetCurrentStepInfo) {
  auto schedule =
      IncrementalMarkingSchedule::CreateWithDefaultMinimumMarkedBytesPerStep();
  schedule->NotifyIncrementalMarkingStart();
  schedule->UpdateMutatorThreadMarkedBytes(0.3 * kEstimatedLiveSize);
  schedule->AddConcurrentlyMarkedBytes(0.4 * kEstimatedLiveSize);
  schedule->SetElapsedTimeForTesting(kHalfEstimatedMarkingTime);
  schedule->GetNextIncrementalStepDuration(kEstimatedLiveSize);
  const auto step_info = schedule->GetCurrentStepInfo();
  EXPECT_EQ(step_info.elapsed_time, kHalfEstimatedMarkingTime);
  EXPECT_EQ(step_info.mutator_marked_bytes, 0.3 * kEstimatedLiveSize);
  EXPECT_EQ(step_info.concurrent_marked_bytes, 0.4 * kEstimatedLiveSize);
  EXPECT_EQ(step_info.marked_bytes(), 0.7 * kEstimatedLiveSize);
  EXPECT_EQ(step_info.estimated_live_bytes, kEstimatedLiveSize);
  EXPECT_NE(step_info.scheduled_delta_bytes(), 0);
}

}  // namespace heap::base
                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/unittests/heap/base/run-all-unittests.cc                                   0000664 0000000 0000000 00000001142 14746647661 0024634 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "testing/gmock/include/gmock/gmock.h"

int main(int argc, char** argv) {
  // Don't catch SEH exceptions and continue as the following tests might hang
  // in an broken environment on windows.
  GTEST_FLAG_SET(catch_exceptions, false);

  // Most unit-tests are multi-threaded, so enable thread-safe death-tests.
  GTEST_FLAG_SET(death_test_style, "threadsafe");

  testing::InitGoogleMock(&argc, argv);
  return RUN_ALL_TESTS();
}
                                                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/unittests/heap/base/worklist-unittest.cc                                   0000664 0000000 0000000 00000024434 14746647661 0024766 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/base/worklist.h"

#include "testing/gtest/include/gtest/gtest.h"

namespace heap {
namespace base {

class SomeObject {};

constexpr size_t kMinSegmentSize = 64;
using TestWorklist = Worklist<SomeObject*, kMinSegmentSize>;
using Segment = TestWorklist::Segment;

auto CreateTemporarySegment(size_t min_segment_size) {
  return std::unique_ptr<Segment, void (*)(Segment*)>(
      Segment::Create(min_segment_size),
      [](Segment* s) { Segment::Delete(s); });
}

TEST(WorkListTest, SegmentCreate) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  EXPECT_TRUE(segment->IsEmpty());
  EXPECT_EQ(0u, segment->Size());
  EXPECT_FALSE(segment->IsFull());
}

TEST(WorkListTest, SegmentPush) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  EXPECT_EQ(0u, segment->Size());
  segment->Push(nullptr);
  EXPECT_EQ(1u, segment->Size());
}

TEST(WorkListTest, SegmentPushPop) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  segment->Push(nullptr);
  EXPECT_EQ(1u, segment->Size());
  SomeObject dummy;
  SomeObject* object = &dummy;
  segment->Pop(&object);
  EXPECT_EQ(0u, segment->Size());
  EXPECT_EQ(nullptr, object);
}

TEST(WorkListTest, SegmentIsEmpty) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  EXPECT_TRUE(segment->IsEmpty());
  segment->Push(nullptr);
  EXPECT_FALSE(segment->IsEmpty());
}

TEST(WorkListTest, SegmentIsFull) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  EXPECT_FALSE(segment->IsFull());
  for (size_t i = 0; i < segment->Capacity(); i++) {
    segment->Push(nullptr);
  }
  EXPECT_TRUE(segment->IsFull());
}

TEST(WorkListTest, SegmentClear) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  segment->Push(nullptr);
  EXPECT_FALSE(segment->IsEmpty());
  segment->Clear();
  EXPECT_TRUE(segment->IsEmpty());
  for (size_t i = 0; i < segment->Capacity(); i++) {
    segment->Push(nullptr);
  }
}

TEST(WorkListTest, SegmentUpdateFalse) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  SomeObject* object;
  object = reinterpret_cast<SomeObject*>(&object);
  segment->Push(object);
  segment->Update([](SomeObject* object, SomeObject** out) { return false; });
  EXPECT_TRUE(segment->IsEmpty());
}

TEST(WorkListTest, SegmentUpdate) {
  auto segment = CreateTemporarySegment(kMinSegmentSize);
  SomeObject* objectA;
  objectA = reinterpret_cast<SomeObject*>(&objectA);
  SomeObject* objectB;
  objectB = reinterpret_cast<SomeObject*>(&objectB);
  segment->Push(objectA);
  segment->Update([objectB](SomeObject* object, SomeObject** out) {
    *out = objectB;
    return true;
  });
  SomeObject* object;
  segment->Pop(&object);
  EXPECT_EQ(object, objectB);
}

TEST(WorkListTest, CreateEmpty) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local(worklist);
  EXPECT_TRUE(worklist_local.IsLocalEmpty());
  EXPECT_TRUE(worklist.IsEmpty());
}

TEST(WorkListTest, LocalPushPop) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local(worklist);
  SomeObject dummy;
  SomeObject* retrieved = nullptr;
  worklist_local.Push(&dummy);
  EXPECT_FALSE(worklist_local.IsLocalEmpty());
  EXPECT_TRUE(worklist_local.Pop(&retrieved));
  EXPECT_EQ(&dummy, retrieved);
}

TEST(WorkListTest, LocalPushStaysPrivate) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local1(worklist);
  TestWorklist::Local worklist_local2(worklist);
  SomeObject dummy;
  SomeObject* retrieved = nullptr;
  EXPECT_TRUE(worklist.IsEmpty());
  EXPECT_EQ(0U, worklist.Size());
  worklist_local1.Push(&dummy);
  EXPECT_EQ(0U, worklist.Size());
  EXPECT_FALSE(worklist_local2.Pop(&retrieved));
  EXPECT_EQ(nullptr, retrieved);
  EXPECT_TRUE(worklist_local1.Pop(&retrieved));
  EXPECT_EQ(&dummy, retrieved);
  EXPECT_EQ(0U, worklist.Size());
}

TEST(WorkListTest, LocalClear) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local(worklist);
  SomeObject* object;
  object = reinterpret_cast<SomeObject*>(&object);
  // Check push segment:
  EXPECT_TRUE(worklist_local.IsLocalEmpty());
  worklist_local.Push(object);
  EXPECT_FALSE(worklist_local.IsLocalEmpty());
  worklist_local.Clear();
  EXPECT_TRUE(worklist_local.IsLocalEmpty());
  // Check pop segment:
  worklist_local.Push(object);
  worklist_local.Push(object);
  EXPECT_FALSE(worklist_local.IsLocalEmpty());
  worklist_local.Publish();
  EXPECT_TRUE(worklist_local.IsLocalEmpty());
  SomeObject* retrieved;
  worklist_local.Pop(&retrieved);
  EXPECT_FALSE(worklist_local.IsLocalEmpty());
  worklist_local.Clear();
  EXPECT_TRUE(worklist_local.IsLocalEmpty());
}

TEST(WorkListTest, GlobalUpdateNull) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local(worklist);
  SomeObject* object;
  object = reinterpret_cast<SomeObject*>(&object);
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    worklist_local.Push(object);
  }
  worklist_local.Push(object);
  worklist_local.Publish();
  worklist.Update([](SomeObject* object, SomeObject** out) { return false; });
  EXPECT_TRUE(worklist.IsEmpty());
  EXPECT_EQ(0U, worklist.Size());
}

TEST(WorkListTest, GlobalUpdate) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local(worklist);
  SomeObject* objectA = nullptr;
  objectA = reinterpret_cast<SomeObject*>(&objectA);
  SomeObject* objectB = nullptr;
  objectB = reinterpret_cast<SomeObject*>(&objectB);
  SomeObject* objectC = nullptr;
  objectC = reinterpret_cast<SomeObject*>(&objectC);
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    worklist_local.Push(objectA);
  }
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    worklist_local.Push(objectB);
  }
  worklist_local.Push(objectA);
  worklist_local.Publish();
  worklist.Update([objectA, objectC](SomeObject* object, SomeObject** out) {
    if (object != objectA) {
      *out = objectC;
      return true;
    }
    return false;
  });
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    SomeObject* object;
    EXPECT_TRUE(worklist_local.Pop(&object));
    EXPECT_EQ(object, objectC);
  }
}

TEST(WorkListTest, FlushToGlobalPushSegment) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local0(worklist);
  TestWorklist::Local worklist_local1(worklist);
  SomeObject* object = nullptr;
  SomeObject* objectA = nullptr;
  objectA = reinterpret_cast<SomeObject*>(&objectA);
  worklist_local0.Push(objectA);
  worklist_local0.Publish();
  EXPECT_EQ(1U, worklist.Size());
  EXPECT_TRUE(worklist_local1.Pop(&object));
}

TEST(WorkListTest, FlushToGlobalPopSegment) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local0(worklist);
  TestWorklist::Local worklist_local1(worklist);
  SomeObject* object = nullptr;
  SomeObject* objectA = nullptr;
  objectA = reinterpret_cast<SomeObject*>(&objectA);
  worklist_local0.Push(objectA);
  worklist_local0.Push(objectA);
  worklist_local0.Pop(&object);
  worklist_local0.Publish();
  EXPECT_EQ(1U, worklist.Size());
  EXPECT_TRUE(worklist_local1.Pop(&object));
}

TEST(WorkListTest, Clear) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local(worklist);
  SomeObject* object;
  object = reinterpret_cast<SomeObject*>(&object);
  worklist_local.Push(object);
  worklist_local.Publish();
  EXPECT_EQ(1U, worklist.Size());
  worklist.Clear();
  EXPECT_TRUE(worklist.IsEmpty());
  EXPECT_EQ(0U, worklist.Size());
}

TEST(WorkListTest, SingleSegmentSteal) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local1(worklist);
  TestWorklist::Local worklist_local2(worklist);
  SomeObject dummy;
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    worklist_local1.Push(&dummy);
  }
  worklist_local1.Publish();
  EXPECT_EQ(1U, worklist.Size());
  // Stealing.
  SomeObject* retrieved = nullptr;
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    EXPECT_TRUE(worklist_local2.Pop(&retrieved));
    EXPECT_EQ(&dummy, retrieved);
    EXPECT_FALSE(worklist_local1.Pop(&retrieved));
  }
  EXPECT_TRUE(worklist.IsEmpty());
  EXPECT_EQ(0U, worklist.Size());
}

TEST(WorkListTest, MultipleSegmentsStolen) {
  TestWorklist worklist;
  TestWorklist::Local worklist_local1(worklist);
  TestWorklist::Local worklist_local2(worklist);
  TestWorklist::Local worklist_local3(worklist);
  SomeObject dummy1;
  SomeObject dummy2;
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    worklist_local1.Push(&dummy1);
  }
  worklist_local1.Publish();
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    worklist_local1.Push(&dummy2);
  }
  worklist_local1.Publish();
  EXPECT_EQ(2U, worklist.Size());
  // Stealing.
  SomeObject* retrieved = nullptr;
  EXPECT_TRUE(worklist_local2.Pop(&retrieved));
  SomeObject* const expect_bag2 = retrieved;
  EXPECT_TRUE(worklist_local3.Pop(&retrieved));
  SomeObject* const expect_bag3 = retrieved;
  EXPECT_EQ(0U, worklist.Size());
  EXPECT_NE(expect_bag2, expect_bag3);
  EXPECT_TRUE(expect_bag2 == &dummy1 || expect_bag2 == &dummy2);
  EXPECT_TRUE(expect_bag3 == &dummy1 || expect_bag3 == &dummy2);
  for (size_t i = 1; i < TestWorklist::kMinSegmentSize; i++) {
    EXPECT_TRUE(worklist_local2.Pop(&retrieved));
    EXPECT_EQ(expect_bag2, retrieved);
    EXPECT_FALSE(worklist_local1.Pop(&retrieved));
  }
  for (size_t i = 1; i < TestWorklist::kMinSegmentSize; i++) {
    EXPECT_TRUE(worklist_local3.Pop(&retrieved));
    EXPECT_EQ(expect_bag3, retrieved);
    EXPECT_FALSE(worklist_local1.Pop(&retrieved));
  }
  EXPECT_TRUE(worklist.IsEmpty());
}

TEST(WorkListTest, MergeGlobalPool) {
  TestWorklist worklist1;
  TestWorklist::Local worklist_local1(worklist1);
  SomeObject dummy;
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    worklist_local1.Push(&dummy);
  }
  // One more push/pop to publish the full segment.
  worklist_local1.Publish();
  // Merging global pool into a new Worklist.
  TestWorklist worklist2;
  TestWorklist::Local worklist_local2(worklist2);
  EXPECT_EQ(0U, worklist2.Size());
  worklist2.Merge(worklist1);
  EXPECT_EQ(1U, worklist2.Size());
  EXPECT_FALSE(worklist2.IsEmpty());
  SomeObject* retrieved = nullptr;
  for (size_t i = 0; i < TestWorklist::kMinSegmentSize; i++) {
    EXPECT_TRUE(worklist_local2.Pop(&retrieved));
    EXPECT_EQ(&dummy, retrieved);
    EXPECT_FALSE(worklist_local1.Pop(&retrieved));
  }
  EXPECT_TRUE(worklist1.IsEmpty());
  EXPECT_TRUE(worklist2.IsEmpty());
}

}  // namespace base
}  // namespace heap
                                                                                                                                                                                                                                    node-23.7.0/deps/v8/test/unittests/heap/bitmap-test-utils.h                                         0000664 0000000 0000000 00000002301 14746647661 0023537 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef V8_UNITTESTS_HEAP_BITMAP_TEST_UTILS_H_
#define V8_UNITTESTS_HEAP_BITMAP_TEST_UTILS_H_

#include "src/base/build_config.h"
#include "src/base/platform/memory.h"
#include "src/common/globals.h"
#include "src/heap/marking.h"
#include "src/heap/memory-chunk-layout.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace v8::internal {

class TestWithBitmap : public ::testing::Test {
 public:
  static constexpr size_t kPageSize = 1u << kPageSizeBits;

  TestWithBitmap()
      : memory_(reinterpret_cast<uint8_t*>(
            base::AlignedAlloc(kPageSize, kPageSize))) {
    memset(memory_, 0, kPageSize);
  }

  ~TestWithBitmap() override { base::AlignedFree(memory_); }

  uint8_t* raw_bitmap() {
    return reinterpret_cast<uint8_t*>(memory_ +
                                      MemoryChunkLayout::kMarkingBitmapOffset);
  }
  MarkingBitmap* bitmap() {
    return reinterpret_cast<MarkingBitmap*>(raw_bitmap());
  }

 private:
  uint8_t* memory_;
};

}  // namespace v8::internal

#endif  // V8_UNITTESTS_HEAP_BITMAP_TEST_UTILS_H_
                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/unittests/heap/bitmap-unittest.cc                                          0000664 0000000 0000000 00000015604 14746647661 0023451 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/common/globals.h"
#include "src/heap/marking-inl.h"
#include "src/heap/spaces.h"
#include "test/unittests/heap/bitmap-test-utils.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace v8::internal {

constexpr MarkBit::CellType kMarkedCell =
    std::numeric_limits<MarkBit::CellType>::max();
constexpr MarkBit::CellType kLowerHalfMarkedCell =
    kMarkedCell >> ((sizeof(kMarkedCell) * CHAR_BIT) / 2);
constexpr MarkBit::CellType kHigherHalfMarkedCell = ~kLowerHalfMarkedCell;
constexpr MarkBit::CellType kWhiteCell = static_cast<MarkBit::CellType>(0x0);
constexpr uint8_t kMarkedByte = 0xFF;
constexpr uint8_t kUnmarkedByte = 0x00;

using NonAtomicBitmapTest = TestWithBitmap;
using AtomicBitmapTest = TestWithBitmap;

TEST_F(NonAtomicBitmapTest, IsZeroInitialized) {
  // We require all tests to start from a zero-initialized bitmap. Manually
  // verify this invariant here.
  for (size_t i = 0; i < MarkingBitmap::kSize; i++) {
    EXPECT_EQ(raw_bitmap()[i], kUnmarkedByte);
  }
}

TEST_F(NonAtomicBitmapTest, Cells) {
  auto bm = bitmap();
  bm->cells()[1] = kMarkedCell;
  uint8_t* raw = raw_bitmap();
  int second_cell_base = MarkingBitmap::kBytesPerCell;
  for (size_t i = 0; i < MarkingBitmap::kBytesPerCell; i++) {
    EXPECT_EQ(raw[second_cell_base + i], kMarkedByte);
  }
}

TEST_F(NonAtomicBitmapTest, CellsCount) {
  size_t last_cell_index = MarkingBitmap::kCellsCount - 1;
  bitmap()->cells()[last_cell_index] = kMarkedCell;
  // Manually verify on raw memory.
  uint8_t* raw = raw_bitmap();
  for (size_t i = 0; i < MarkingBitmap::kSize; i++) {
    // Last cell should be set.
    if (i >= (MarkingBitmap::kSize - MarkingBitmap::kBytesPerCell)) {
      EXPECT_EQ(raw[i], kMarkedByte);
    } else {
      EXPECT_EQ(raw[i], kUnmarkedByte);
    }
  }
}

TEST_F(NonAtomicBitmapTest, IsClean) {
  auto bm = bitmap();
  EXPECT_TRUE(bm->IsClean());
  bm->cells()[0] = kMarkedCell;
  EXPECT_FALSE(bm->IsClean());
}

namespace {

template <AccessMode access_mode>
void ClearTest(uint8_t* raw_bitmap, MarkingBitmap* bm) {
  for (size_t i = 0; i < MarkingBitmap::kSize; i++) {
    raw_bitmap[i] = 0xFFu;
  }
  bm->Clear<AccessMode::ATOMIC>();
  for (size_t i = 0; i < MarkingBitmap::kSize; i++) {
    EXPECT_EQ(raw_bitmap[i], 0);
  }
}

template <AccessMode access_mode>
void ClearRange1Test(uint8_t* raw_bitmap, MarkingBitmap* bm) {
  bm->cells()[0] = kMarkedCell;
  bm->cells()[1] = kMarkedCell;
  bm->cells()[2] = kMarkedCell;
  bm->ClearRange<access_mode>(
      0, MarkingBitmap::kBitsPerCell + MarkingBitmap::kBitsPerCell / 2);
  EXPECT_EQ(bm->cells()[0], kWhiteCell);
  EXPECT_EQ(bm->cells()[1], kHigherHalfMarkedCell);
  EXPECT_EQ(bm->cells()[2], kMarkedCell);
}

template <AccessMode access_mode>
void ClearRange2Test(uint8_t* raw_bitmap, MarkingBitmap* bm) {
  bm->cells()[0] = kMarkedCell;
  bm->cells()[1] = kMarkedCell;
  bm->cells()[2] = kMarkedCell;
  bm->ClearRange<access_mode>(
      MarkingBitmap::kBitsPerCell,
      MarkingBitmap::kBitsPerCell + MarkingBitmap::kBitsPerCell / 2);
  EXPECT_EQ(bm->cells()[0], kMarkedCell);
  EXPECT_EQ(bm->cells()[1], kHigherHalfMarkedCell);
  EXPECT_EQ(bm->cells()[2], kMarkedCell);
}

template <AccessMode access_mode>
void SetAndClearRangeTest(uint8_t* raw_bitmap, MarkingBitmap* bm) {
  for (int i = 0; i < 3; i++) {
    bm->SetRange<access_mode>(i, MarkingBitmap::kBitsPerCell + i);
    CHECK_EQ(bm->cells()[0], std::numeric_limits<uintptr_t>::max() << i);
    CHECK_EQ(bm->cells()[1], (1u << i) - 1);
    bm->ClearRange<access_mode>(i, MarkingBitmap::kBitsPerCell + i);
    CHECK_EQ(bm->cells()[0], 0x0u);
    CHECK_EQ(bm->cells()[1], 0x0u);
  }
}

}  // namespace

TEST_F(AtomicBitmapTest, Clear) {
  ClearTest<AccessMode::ATOMIC>(this->raw_bitmap(), this->bitmap());
}

TEST_F(NonAtomicBitmapTest, Clear) {
  ClearTest<AccessMode::NON_ATOMIC>(this->raw_bitmap(), this->bitmap());
}

TEST_F(AtomicBitmapTest, ClearRange1) {
  ClearRange1Test<AccessMode::ATOMIC>(this->raw_bitmap(), this->bitmap());
}

TEST_F(NonAtomicBitmapTest, ClearRange1) {
  ClearRange1Test<AccessMode::NON_ATOMIC>(this->raw_bitmap(), this->bitmap());
}

TEST_F(AtomicBitmapTest, ClearRange2) {
  ClearRange2Test<AccessMode::ATOMIC>(this->raw_bitmap(), this->bitmap());
}

TEST_F(NonAtomicBitmapTest, ClearRange2) {
  ClearRange2Test<AccessMode::NON_ATOMIC>(this->raw_bitmap(), this->bitmap());
}

TEST_F(AtomicBitmapTest, SetAndClearRange) {
  SetAndClearRangeTest<AccessMode::ATOMIC>(this->raw_bitmap(), this->bitmap());
}

TEST_F(NonAtomicBitmapTest, SetAndClearRange) {
  SetAndClearRangeTest<AccessMode::NON_ATOMIC>(this->raw_bitmap(),
                                               this->bitmap());
}

// AllBitsSetInRange() and AllBitsClearInRange() are only used when verifying
// the heap on the main thread so they don't have atomic implementations.
TEST_F(NonAtomicBitmapTest, ClearMultipleRanges) {
  auto bm = this->bitmap();

  bm->SetRange<AccessMode::NON_ATOMIC>(0, MarkingBitmap::kBitsPerCell * 3);
  CHECK(bm->AllBitsSetInRange(0, MarkingBitmap::kBitsPerCell));

  bm->ClearRange<AccessMode::NON_ATOMIC>(MarkingBitmap::kBitsPerCell / 2,
                                         MarkingBitmap::kBitsPerCell);
  bm->ClearRange<AccessMode::NON_ATOMIC>(
      MarkingBitmap::kBitsPerCell,
      MarkingBitmap::kBitsPerCell + MarkingBitmap::kBitsPerCell / 2);
  bm->ClearRange<AccessMode::NON_ATOMIC>(MarkingBitmap::kBitsPerCell * 2 + 8,
                                         MarkingBitmap::kBitsPerCell * 2 + 16);
  bm->ClearRange<AccessMode::NON_ATOMIC>(MarkingBitmap::kBitsPerCell * 2 + 24,
                                         MarkingBitmap::kBitsPerCell * 3);

  CHECK_EQ(bm->cells()[0], kLowerHalfMarkedCell);
  CHECK(bm->AllBitsSetInRange(0, MarkingBitmap::kBitsPerCell / 2));
  CHECK(bm->AllBitsClearInRange(MarkingBitmap::kBitsPerCell / 2,
                                MarkingBitmap::kBitsPerCell));

  CHECK_EQ(bm->cells()[1], kHigherHalfMarkedCell);
  CHECK(bm->AllBitsClearInRange(
      MarkingBitmap::kBitsPerCell,
      MarkingBitmap::kBitsPerCell + MarkingBitmap::kBitsPerCell / 2));
  CHECK(bm->AllBitsSetInRange(
      MarkingBitmap::kBitsPerCell + MarkingBitmap::kBitsPerCell / 2,
      MarkingBitmap::kBitsPerCell * 2));

  CHECK_EQ(bm->cells()[2], static_cast<MarkBit::CellType>(0x00FF00FFu));
  CHECK(bm->AllBitsSetInRange(MarkingBitmap::kBitsPerCell * 2,
                              MarkingBitmap::kBitsPerCell * 2 + 8));
  CHECK(bm->AllBitsClearInRange(MarkingBitmap::kBitsPerCell * 2 + 8,
                                MarkingBitmap::kBitsPerCell * 2 + 16));
  CHECK(bm->AllBitsSetInRange(MarkingBitmap::kBitsPerCell * 2 + 16,
                              MarkingBitmap::kBitsPerCell * 2 + 24));
  CHECK(bm->AllBitsClearInRange(MarkingBitmap::kBitsPerCell * 2 + 24,
                                MarkingBitmap::kBitsPerCell * 3));
}

}  // namespace v8::internal
                                                                                                                            node-23.7.0/deps/v8/test/unittests/heap/conservative-stack-visitor-unittest.cc                      0000664 0000000 0000000 00000025751 14746647661 0027511 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/conservative-stack-visitor.h"

#include "src/codegen/assembler-inl.h"
#include "test/unittests/heap/heap-utils.h"
#include "test/unittests/test-utils.h"

namespace v8 {
namespace internal {

namespace {

// clang-format off
enum : int {
  kRegularObject = 0,
  kCodeObject = 1,
  kTrustedObject = 2,
  kNumberOfObjects
};
// clang-format on

class RecordingVisitor final : public RootVisitor {
 public:
  V8_NOINLINE explicit RecordingVisitor(Isolate* isolate) {
    HandleScope scope(isolate);
    // Allocate some regular object.
    the_object_[kRegularObject] = AllocateRegularObject(isolate, 256);
    // Allocate a code object.
    the_object_[kCodeObject] = AllocateCodeObject(isolate, 256);
    // Allocate a trusted object.
    the_object_[kTrustedObject] = AllocateTrustedObject(isolate, 256);
    // Mark the objects as not found;
    for (int i = 0; i < kNumberOfObjects; ++i) found_[i] = false;
  }

  void VisitRootPointers(Root root, const char* description,
                         FullObjectSlot start, FullObjectSlot end) override {
    for (FullObjectSlot current = start; current != end; ++current) {
      for (int i = 0; i < kNumberOfObjects; ++i)
        if ((*current).ptr() == the_object_[i].ptr()) found_[i] = true;
    }
  }

  bool found(int index) const {
    DCHECK_LE(0, index);
    DCHECK_LT(index, kNumberOfObjects);
    return found_[index];
  }

  Address base_address(int index) const { return the_object(index).address(); }
  Address tagged_address(int index) const { return the_object(index).ptr(); }
  Address inner_address(int index) const {
    return base_address(index) + 42 * kTaggedSize;
  }
#ifdef V8_COMPRESS_POINTERS
  uint32_t compr_address(int index) const {
    return static_cast<uint32_t>(
        V8HeapCompressionScheme::CompressAny(base_address(index)));
  }
  uint32_t compr_inner(int index) const {
    return static_cast<uint32_t>(
        V8HeapCompressionScheme::CompressAny(inner_address(index)));
  }
#endif

 private:
  Tagged<HeapObject> the_object(int index) const {
    DCHECK_LE(0, index);
    DCHECK_LT(index, kNumberOfObjects);
    return the_object_[index];
  }

  Tagged<FixedArray> AllocateRegularObject(Isolate* isolate, int size) {
    return *isolate->factory()->NewFixedArray(size, AllocationType::kOld);
  }

  Tagged<InstructionStream> AllocateCodeObject(Isolate* isolate, int size) {
    Assembler assm(AssemblerOptions{});

    for (int i = 0; i < size; ++i)
      assm.nop();  // supported on all architectures

    CodeDesc desc;
    assm.GetCode(isolate, &desc);
    Tagged<Code> code =
        *Factory::CodeBuilder(isolate, desc, CodeKind::FOR_TESTING).Build();
    return code->instruction_stream();
  }

  Tagged<TrustedFixedArray> AllocateTrustedObject(Isolate* isolate, int size) {
    return *isolate->factory()->NewTrustedFixedArray(size);
  }

  // Some heap objects that we want to check if they are visited or not.
  Tagged<HeapObject> the_object_[kNumberOfObjects];

  // Have the objects been found?
  bool found_[kNumberOfObjects];
};

}  // namespace

using ConservativeStackVisitorTest = TestWithHeapInternalsAndContext;

// In the following, we avoid negative tests, i.e., tests checking that objects
// are not visited when there are no pointers to them on the stack. Such tests
// are generally fragile and could fail on some platforms because of unforeseen
// compiler optimizations. In general we cannot ensure in a portable way that
// no pointer remained on the stack (or in some register) after the
// initialization of RecordingVisitor and until the invocation of
// Stack::IteratePointers.

TEST_F(ConservativeStackVisitorTest, DirectBasePointer) {
  auto recorder = std::make_unique<RecordingVisitor>(isolate());

  // Ensure the heap is iterable before CSS.
  IsolateSafepointScope safepoint_scope(heap());
  heap()->MakeHeapIterable();

  {
    volatile Address regular_ptr = recorder->base_address(kRegularObject);
    volatile Address code_ptr = recorder->base_address(kCodeObject);
    volatile Address trusted_ptr = recorder->base_address(kTrustedObject);

    ConservativeStackVisitor stack_visitor(isolate(), recorder.get());
    heap()->stack().IteratePointersForTesting(&stack_visitor);

    // Make sure to keep the pointers alive.
    EXPECT_NE(kNullAddress, regular_ptr);
    EXPECT_NE(kNullAddress, code_ptr);
    EXPECT_NE(kNullAddress, trusted_ptr);
  }

  // The objects should have been visited.
  EXPECT_TRUE(recorder->found(kRegularObject));
  EXPECT_TRUE(recorder->found(kCodeObject));
  EXPECT_TRUE(recorder->found(kTrustedObject));
}

TEST_F(ConservativeStackVisitorTest, TaggedBasePointer) {
  auto recorder = std::make_unique<RecordingVisitor>(isolate());

  // Ensure the heap is iterable before CSS.
  IsolateSafepointScope safepoint_scope(heap());
  heap()->MakeHeapIterable();

  {
    volatile Address regular_ptr = recorder->tagged_address(kRegularObject);
    volatile Address code_ptr = recorder->tagged_address(kCodeObject);
    volatile Address trusted_ptr = recorder->tagged_address(kTrustedObject);

    ConservativeStackVisitor stack_visitor(isolate(), recorder.get());
    heap()->stack().IteratePointersForTesting(&stack_visitor);

    // Make sure to keep the pointers alive.
    EXPECT_NE(kNullAddress, regular_ptr);
    EXPECT_NE(kNullAddress, code_ptr);
    EXPECT_NE(kNullAddress, trusted_ptr);
  }

  // The objects should have been visited.
  EXPECT_TRUE(recorder->found(kRegularObject));
  EXPECT_TRUE(recorder->found(kCodeObject));
  EXPECT_TRUE(recorder->found(kTrustedObject));
}

TEST_F(ConservativeStackVisitorTest, InnerPointer) {
  auto recorder = std::make_unique<RecordingVisitor>(isolate());

  // Ensure the heap is iterable before CSS.
  IsolateSafepointScope safepoint_scope(heap());
  heap()->MakeHeapIterable();

  {
    volatile Address regular_ptr = recorder->inner_address(kRegularObject);
    volatile Address code_ptr = recorder->inner_address(kCodeObject);
    volatile Address trusted_ptr = recorder->inner_address(kTrustedObject);

    ConservativeStackVisitor stack_visitor(isolate(), recorder.get());
    heap()->stack().IteratePointersForTesting(&stack_visitor);

    // Make sure to keep the pointers alive.
    EXPECT_NE(kNullAddress, regular_ptr);
    EXPECT_NE(kNullAddress, code_ptr);
    EXPECT_NE(kNullAddress, trusted_ptr);
  }

  // The objects should have been visited.
  EXPECT_TRUE(recorder->found(kRegularObject));
  EXPECT_TRUE(recorder->found(kCodeObject));
  EXPECT_TRUE(recorder->found(kTrustedObject));
}

#ifdef V8_COMPRESS_POINTERS

TEST_F(ConservativeStackVisitorTest, HalfWord1) {
  auto recorder = std::make_unique<RecordingVisitor>(isolate());

  // Ensure the heap is iterable before CSS.
  IsolateSafepointScope safepoint_scope(heap());
  heap()->MakeHeapIterable();

  {
    volatile uint32_t regular_ptr[] = {recorder->compr_address(kRegularObject),
                                       0};
    volatile uint32_t code_ptr[] = {recorder->compr_address(kCodeObject), 0};
    volatile uint32_t trusted_ptr[] = {recorder->compr_address(kTrustedObject),
                                       0};

    ConservativeStackVisitor stack_visitor(isolate(), recorder.get());
    heap()->stack().IteratePointersForTesting(&stack_visitor);

    // Make sure to keep the pointers alive.
    EXPECT_NE(static_cast<uint32_t>(0), regular_ptr[0]);
    EXPECT_NE(static_cast<uint32_t>(0), code_ptr[0]);
    EXPECT_NE(static_cast<uint32_t>(0), trusted_ptr[0]);
  }

  // The objects should have been visited.
  EXPECT_TRUE(recorder->found(kRegularObject));
  EXPECT_TRUE(recorder->found(kCodeObject));
  EXPECT_TRUE(recorder->found(kTrustedObject));
}

TEST_F(ConservativeStackVisitorTest, HalfWord2) {
  auto recorder = std::make_unique<RecordingVisitor>(isolate());

  // Ensure the heap is iterable before CSS.
  IsolateSafepointScope safepoint_scope(heap());
  heap()->MakeHeapIterable();

  {
    volatile uint32_t regular_ptr[] = {0,
                                       recorder->compr_address(kRegularObject)};
    volatile uint32_t code_ptr[] = {0, recorder->compr_address(kCodeObject)};
    volatile uint32_t trusted_ptr[] = {0,
                                       recorder->compr_address(kTrustedObject)};

    ConservativeStackVisitor stack_visitor(isolate(), recorder.get());
    heap()->stack().IteratePointersForTesting(&stack_visitor);

    // Make sure to keep the pointers alive.
    EXPECT_NE(static_cast<uint32_t>(0), regular_ptr[1]);
    EXPECT_NE(static_cast<uint32_t>(0), code_ptr[1]);
    EXPECT_NE(static_cast<uint32_t>(0), trusted_ptr[1]);
  }

  // The objects should have been visited.
  EXPECT_TRUE(recorder->found(kRegularObject));
  EXPECT_TRUE(recorder->found(kCodeObject));
  EXPECT_TRUE(recorder->found(kTrustedObject));
}

TEST_F(ConservativeStackVisitorTest, InnerHalfWord1) {
  auto recorder = std::make_unique<RecordingVisitor>(isolate());

  // Ensure the heap is iterable before CSS.
  IsolateSafepointScope safepoint_scope(heap());
  heap()->MakeHeapIterable();

  {
    volatile uint32_t regular_ptr[] = {recorder->compr_inner(kRegularObject),
                                       0};
    volatile uint32_t code_ptr[] = {recorder->compr_inner(kCodeObject), 0};
    volatile uint32_t trusted_ptr[] = {recorder->compr_inner(kTrustedObject),
                                       0};

    ConservativeStackVisitor stack_visitor(isolate(), recorder.get());
    heap()->stack().IteratePointersForTesting(&stack_visitor);

    // Make sure to keep the pointers alive.
    EXPECT_NE(static_cast<uint32_t>(0), regular_ptr[0]);
    EXPECT_NE(static_cast<uint32_t>(0), code_ptr[0]);
    EXPECT_NE(static_cast<uint32_t>(0), trusted_ptr[0]);
  }

  // The objects should have been visited.
  EXPECT_TRUE(recorder->found(kRegularObject));
  EXPECT_TRUE(recorder->found(kCodeObject));
  EXPECT_TRUE(recorder->found(kTrustedObject));
}

TEST_F(ConservativeStackVisitorTest, InnerHalfWord2) {
  auto recorder = std::make_unique<RecordingVisitor>(isolate());

  // Ensure the heap is iterable before CSS.
  IsolateSafepointScope safepoint_scope(heap());
  heap()->MakeHeapIterable();

  {
    volatile uint32_t regular_ptr[] = {0,
                                       recorder->compr_inner(kRegularObject)};
    volatile uint32_t code_ptr[] = {0, recorder->compr_inner(kCodeObject)};
    volatile uint32_t trusted_ptr[] = {0,
                                       recorder->compr_inner(kTrustedObject)};

    ConservativeStackVisitor stack_visitor(isolate(), recorder.get());
    heap()->stack().IteratePointersForTesting(&stack_visitor);

    // Make sure to keep the pointers alive.
    EXPECT_NE(static_cast<uint32_t>(0), regular_ptr[1]);
    EXPECT_NE(static_cast<uint32_t>(0), code_ptr[1]);
    EXPECT_NE(static_cast<uint32_t>(0), trusted_ptr[1]);
  }

  // The objects should have been visited.
  EXPECT_TRUE(recorder->found(kRegularObject));
  EXPECT_TRUE(recorder->found(kCodeObject));
  EXPECT_TRUE(recorder->found(kTrustedObject));
}

#endif  // V8_COMPRESS_POINTERS

}  // namespace internal
}  // namespace v8
                       node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/                                                   0000775 0000000 0000000 00000000000 14746647661 0021511 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/embedder-roots-handler-unittest.cc                 0000664 0000000 0000000 00000017773 14746647661 0030242 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/v8-embedder-heap.h"
#include "include/v8-traced-handle.h"
#include "src/handles/handles.h"
#include "src/handles/traced-handles.h"
#include "test/unittests/heap/cppgc-js/unified-heap-utils.h"
#include "test/unittests/heap/heap-utils.h"

namespace v8::internal {

namespace {

using EmbedderRootsHandlerTest = TestWithHeapInternalsAndContext;

class V8_NODISCARD TemporaryEmbedderRootsHandleScope final {
 public:
  TemporaryEmbedderRootsHandleScope(v8::Isolate* isolate,
                                    v8::EmbedderRootsHandler* handler)
      : isolate_(isolate) {
    isolate_->SetEmbedderRootsHandler(handler);
  }

  ~TemporaryEmbedderRootsHandleScope() {
    isolate_->SetEmbedderRootsHandler(nullptr);
  }

 private:
  v8::Isolate* const isolate_;
};

// EmbedderRootsHandler that can optimize Scavenger handling when used with
// TracedReference.
class ClearingEmbedderRootsHandler final : public v8::EmbedderRootsHandler {
 public:
START_ALLOW_USE_DEPRECATED()
  explicit ClearingEmbedderRootsHandler(v8::Isolate* isolate)
      : EmbedderRootsHandler(EmbedderRootsHandler::RootHandling::
                                 kDontQueryEmbedderForAnyReference),
        isolate_(isolate) {}
END_ALLOW_USE_DEPRECATED()

  bool IsRoot(const v8::TracedReference<v8::Value>& handle) final {
    // Every handle that's droppable will not be considered as root and thus
    // dropped.
    return false;
  }

  void ResetRoot(const v8::TracedReference<v8::Value>& handle) final {
    CHECK(!IsRoot(handle));
    // Convention for test: Objects that are optimized have use a back pointer
    // in the wrappable field.
    BasicTracedReference<v8::Value>* original_handle =
        reinterpret_cast<BasicTracedReference<v8::Value>*>(
            v8::Object::Unwrap<CppHeapPointerTag::kDefaultTag>(
                isolate_, handle.As<v8::Object>()));
    original_handle->Reset();
  }

 private:
  v8::Isolate* const isolate_;
};

void ConstructNonDroppableJSObject(v8::Isolate* isolate,
                                   v8::Local<v8::Context> context,
                                   v8::TracedReference<v8::Object>* handle) {
  v8::HandleScope scope(isolate);
  v8::Local<v8::Object> object(v8::Object::New(isolate));
  EXPECT_FALSE(object.IsEmpty());
  *handle = v8::TracedReference<v8::Object>(isolate, object);
  EXPECT_FALSE(handle->IsEmpty());
}

void ConstructNonDroppableJSApiObject(v8::Isolate* isolate,
                                      v8::Local<v8::Context> context,
                                      v8::TracedReference<v8::Object>* handle) {
  v8::HandleScope scope(isolate);
  v8::Local<v8::Object> object = WrapperHelper::CreateWrapper(context, nullptr);
  EXPECT_FALSE(object.IsEmpty());
  *handle = v8::TracedReference<v8::Object>(isolate, object);
  EXPECT_FALSE(handle->IsEmpty());
}

void ConstructDroppableJSApiObject(v8::Isolate* isolate,
                                   v8::Local<v8::Context> context,
                                   v8::TracedReference<v8::Object>* handle) {
  v8::HandleScope scope(isolate);
  v8::Local<v8::Object> object = WrapperHelper::CreateWrapper(context, handle);
  EXPECT_FALSE(object.IsEmpty());
  *handle = v8::TracedReference<v8::Object>(
      isolate, object, typename v8::TracedReference<v8::Object>::IsDroppable{});
  EXPECT_FALSE(handle->IsEmpty());
}

}  // namespace

namespace {

enum class SurvivalMode { kSurvives, kDies };

template <typename ModifierFunction, typename ConstructTracedReferenceFunction,
          typename GCFunction>
void TracedReferenceTest(v8::Isolate* isolate,
                         ConstructTracedReferenceFunction construct_function,
                         ModifierFunction modifier_function,
                         GCFunction gc_function, SurvivalMode survives) {
  auto i_isolate = reinterpret_cast<i::Isolate*>(isolate);
  ManualGCScope manual_gc_scope(i_isolate);
  DisableConservativeStackScanningScopeForTesting no_stack_scanning(
      i_isolate->heap());
  v8::HandleScope scope(isolate);
  auto* traced_handles = i_isolate->traced_handles();
  const size_t initial_count = traced_handles->used_node_count();
  auto gc_invisible_handle =
      std::make_unique<v8::TracedReference<v8::Object>>();
  construct_function(isolate, isolate->GetCurrentContext(),
                     gc_invisible_handle.get());
  ASSERT_TRUE(IsNewObjectInCorrectGeneration(isolate, *gc_invisible_handle));
  modifier_function(*gc_invisible_handle);
  const size_t after_modification_count = traced_handles->used_node_count();
  gc_function();
  // Cannot check the handle as it is not explicitly cleared by the GC. Instead
  // check the handles count.
  CHECK_IMPLIES(survives == SurvivalMode::kSurvives,
                after_modification_count == traced_handles->used_node_count());
  CHECK_IMPLIES(survives == SurvivalMode::kDies,
                initial_count == traced_handles->used_node_count());
}

}  // namespace

TEST_F(EmbedderRootsHandlerTest,
       FullGC_UnreachableTracedReferenceToNonDroppableDies) {
  if (v8_flags.stress_incremental_marking)
    GTEST_SKIP() << "When stressing incremental marking, a write barrier may "
                    "keep the object alive.";

  ClearingEmbedderRootsHandler handler(v8_isolate());
  TemporaryEmbedderRootsHandleScope roots_handler_scope(v8_isolate(), &handler);
  TracedReferenceTest(
      v8_isolate(), ConstructNonDroppableJSObject,
      [](const TracedReference<v8::Object>&) {}, [this]() { InvokeMajorGC(); },
      SurvivalMode::kDies);
}

TEST_F(EmbedderRootsHandlerTest,
       FullGC_UnreachableTracedReferenceToNonDroppableDies2) {
  ManualGCScope manual_gcs(i_isolate());
  ClearingEmbedderRootsHandler handler(v8_isolate());
  TemporaryEmbedderRootsHandleScope roots_handler_scope(v8_isolate(), &handler);
  // The TracedReference itself will die as it's not found by the full GC. The
  // pointee will be kept alive through other means.
  v8::Global<v8::Object> strong_global;
  TracedReferenceTest(
      v8_isolate(), ConstructNonDroppableJSObject,
      [this, &strong_global](const TracedReference<v8::Object>& handle) {
        v8::HandleScope scope(v8_isolate());
        strong_global =
            v8::Global<v8::Object>(v8_isolate(), handle.Get(v8_isolate()));
      },
      [this, &strong_global]() {
        InvokeMajorGC();
        strong_global.Reset();
      },
      SurvivalMode::kDies);
}

TEST_F(EmbedderRootsHandlerTest,
       YoungGC_UnreachableTracedReferenceToNonDroppableSurvives) {
  if (v8_flags.single_generation) GTEST_SKIP();

  ManualGCScope manual_gc(i_isolate());
  ClearingEmbedderRootsHandler handler(v8_isolate());
  TemporaryEmbedderRootsHandleScope roots_handler_scope(v8_isolate(), &handler);
  TracedReferenceTest(
      v8_isolate(), ConstructNonDroppableJSObject,
      [](const TracedReference<v8::Object>&) {}, [this]() { InvokeMinorGC(); },
      SurvivalMode::kSurvives);
}

TEST_F(EmbedderRootsHandlerTest,
       YoungGC_UnreachableTracedReferenceToNonDroppableAPIObjectSurvives) {
  if (v8_flags.single_generation) GTEST_SKIP();

  ManualGCScope manual_gc(i_isolate());
  ClearingEmbedderRootsHandler handler(v8_isolate());
  TemporaryEmbedderRootsHandleScope roots_handler_scope(v8_isolate(), &handler);
  TracedReferenceTest(
      v8_isolate(), ConstructNonDroppableJSApiObject,
      [](const TracedReference<v8::Object>&) {}, [this]() { InvokeMinorGC(); },
      SurvivalMode::kSurvives);
}

TEST_F(EmbedderRootsHandlerTest,
       YoungGC_UnreachableTracedReferenceToDroppableDies) {
  if (v8_flags.single_generation || !v8_flags.reclaim_unmodified_wrappers)
    GTEST_SKIP();

  ManualGCScope manual_gc(i_isolate());
  ClearingEmbedderRootsHandler handler(v8_isolate());
  TemporaryEmbedderRootsHandleScope roots_handler_scope(v8_isolate(), &handler);
  TracedReferenceTest(
      v8_isolate(), ConstructDroppableJSApiObject,
      [](TracedReference<v8::Object>& handle) {}, [this]() { InvokeMinorGC(); },
      SurvivalMode::kDies);
}

}  // namespace v8::internal
     node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/traced-reference-unittest.cc                       0000664 0000000 0000000 00000032276 14746647661 0027105 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/v8-cppgc.h"
#include "include/v8-traced-handle.h"
#include "src/api/api-inl.h"
#include "src/handles/global-handles.h"
#include "src/heap/cppgc/visitor.h"
#include "src/heap/marking-state-inl.h"
#include "test/unittests/heap/heap-utils.h"
#include "test/unittests/test-utils.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace v8 {
namespace internal {

using TracedReferenceTest = TestWithHeapInternals;

TEST_F(TracedReferenceTest, ResetFromLocal) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  v8::TracedReference<v8::Object> ref;
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    ASSERT_TRUE(ref.IsEmpty());
    EXPECT_NE(ref, local);
    ref.Reset(v8_isolate(), local);
    EXPECT_FALSE(ref.IsEmpty());
    EXPECT_EQ(ref, local);
  }
}

TEST_F(TracedReferenceTest, ConstructFromLocal) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref(v8_isolate(), local);
    EXPECT_FALSE(ref.IsEmpty());
    EXPECT_EQ(ref, local);
  }
}

TEST_F(TracedReferenceTest, Reset) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref(v8_isolate(), local);
    EXPECT_FALSE(ref.IsEmpty());
    EXPECT_EQ(ref, local);
    ref.Reset();
    EXPECT_TRUE(ref.IsEmpty());
    EXPECT_NE(ref, local);
  }
}

TEST_F(TracedReferenceTest, Copy) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref(v8_isolate(), local);
    v8::TracedReference<v8::Object> ref_copy1(ref);
    v8::TracedReference<v8::Object> ref_copy2 = ref;
    EXPECT_EQ(ref, local);
    EXPECT_EQ(ref_copy1, local);
    EXPECT_EQ(ref_copy2, local);
  }
}

TEST_F(TracedReferenceTest, CopyHeterogenous) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref(v8_isolate(), local);
    v8::TracedReference<v8::Value> ref_copy1(ref);
    v8::TracedReference<v8::Value> ref_copy2 = ref;
    EXPECT_EQ(ref, local);
    EXPECT_EQ(ref_copy1, local);
    EXPECT_EQ(ref_copy2, local);
  }
}

TEST_F(TracedReferenceTest, Move) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref(v8_isolate(), local);
    v8::TracedReference<v8::Object> ref_moved1(std::move(ref));
    v8::TracedReference<v8::Object> ref_moved2 = std::move(ref_moved1);
    EXPECT_TRUE(ref.IsEmpty());
    EXPECT_TRUE(ref_moved1.IsEmpty());
    EXPECT_EQ(ref_moved2, local);
  }
}

TEST_F(TracedReferenceTest, MoveHeterogenous) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref1(v8_isolate(), local);
    v8::TracedReference<v8::Value> ref_moved1(std::move(ref1));
    v8::TracedReference<v8::Object> ref2(v8_isolate(), local);
    v8::TracedReference<v8::Object> ref_moved2 = std::move(ref2);
    EXPECT_TRUE(ref1.IsEmpty());
    EXPECT_EQ(ref_moved1, local);
    EXPECT_TRUE(ref2.IsEmpty());
    EXPECT_EQ(ref_moved2, local);
  }
}

TEST_F(TracedReferenceTest, Equality) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local1 =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref1(v8_isolate(), local1);
    v8::TracedReference<v8::Object> ref2(v8_isolate(), local1);
    EXPECT_EQ(ref1, ref2);
    EXPECT_EQ(ref2, ref1);
    v8::Local<v8::Object> local2 =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref3(v8_isolate(), local2);
    EXPECT_NE(ref2, ref3);
    EXPECT_NE(ref3, ref2);
  }
}

TEST_F(TracedReferenceTest, EqualityHeterogenous) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local1 =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref1(v8_isolate(), local1);
    v8::TracedReference<v8::Value> ref2(v8_isolate(), local1);
    EXPECT_EQ(ref1, ref2);
    EXPECT_EQ(ref2, ref1);
    v8::Local<v8::Object> local2 =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref3(v8_isolate(), local2);
    EXPECT_NE(ref2, ref3);
    EXPECT_NE(ref3, ref2);
  }
}

namespace {

// Must be used on stack.
class JSVisitorForTesting final : public JSVisitor {
 public:
  explicit JSVisitorForTesting(v8::Local<v8::Object> expected_object)
      : JSVisitor(cppgc::internal::VisitorFactory::CreateKey()),
        expected_object_(expected_object) {}

  void Visit(const TracedReferenceBase& ref) final {
    EXPECT_EQ(ref, expected_object_);
    visit_count_++;
  }

  size_t visit_count() const { return visit_count_; }

 private:
  v8::Local<v8::Object> expected_object_;
  size_t visit_count_ = 0;
};

}  // namespace

TEST_F(TracedReferenceTest, TracedReferenceTrace) {
  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> js_member(v8_isolate(), local);
    JSVisitorForTesting visitor(local);
    // Cast to cppgc::Visitor to ensure that we dispatch through the base
    // visitor and use traits.
    static_cast<cppgc::Visitor&>(visitor).Trace(js_member);
    EXPECT_EQ(1u, visitor.visit_count());
  }
}

TEST_F(TracedReferenceTest, NoWriteBarrierOnConstruction) {
  if (!v8_flags.incremental_marking)
    GTEST_SKIP() << "Write barrier tests require incremental marking";

  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    SimulateIncrementalMarking();
    MarkingState state(i_isolate());
    ASSERT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
    auto ref =
        std::make_unique<v8::TracedReference<v8::Object>>(v8_isolate(), local);
    USE(ref);
    EXPECT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
  }
}

TEST_F(TracedReferenceTest, WriteBarrierForOnHeapReset) {
  if (!v8_flags.incremental_marking)
    GTEST_SKIP() << "Write barrier tests require incremental marking";

  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    auto ref = std::make_unique<v8::TracedReference<v8::Object>>();
    SimulateIncrementalMarking();
    MarkingState state(i_isolate());
    ASSERT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
    ref->Reset(v8_isolate(), local);
    EXPECT_FALSE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
  }
}

TEST_F(TracedReferenceTest, WriteBarrierForOnStackReset) {
  if (!v8_flags.incremental_marking)
    GTEST_SKIP() << "Write barrier tests require incremental marking";

  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    v8::TracedReference<v8::Object> ref;
    SimulateIncrementalMarking();
    MarkingState state(i_isolate());
    ASSERT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
    ref.Reset(v8_isolate(), local);
    EXPECT_FALSE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
  }
}

TEST_F(TracedReferenceTest, WriteBarrierOnHeapCopy) {
  if (!v8_flags.incremental_marking)
    GTEST_SKIP() << "Write barrier tests require incremental marking";

  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    auto ref_from =
        std::make_unique<v8::TracedReference<v8::Object>>(v8_isolate(), local);
    auto ref_to = std::make_unique<v8::TracedReference<v8::Object>>();
    SimulateIncrementalMarking();
    MarkingState state(i_isolate());
    ASSERT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
    *ref_to = *ref_from;
    EXPECT_TRUE(!ref_from->IsEmpty());
    EXPECT_FALSE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
  }
}

TEST_F(TracedReferenceTest, WriteBarrierForOnStackCopy) {
  if (!v8_flags.incremental_marking)
    GTEST_SKIP() << "Write barrier tests require incremental marking";

  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    auto ref_from =
        std::make_unique<v8::TracedReference<v8::Object>>(v8_isolate(), local);
    v8::TracedReference<v8::Object> ref_to;
    SimulateIncrementalMarking();
    MarkingState state(i_isolate());
    ASSERT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
    ref_to = *ref_from;
    EXPECT_TRUE(!ref_from->IsEmpty());
    EXPECT_FALSE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
  }
}

TEST_F(TracedReferenceTest, WriteBarrierForOnHeapMove) {
  if (!v8_flags.incremental_marking)
    GTEST_SKIP() << "Write barrier tests require incremental marking";

  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    auto ref_from =
        std::make_unique<v8::TracedReference<v8::Object>>(v8_isolate(), local);
    auto ref_to = std::make_unique<v8::TracedReference<v8::Object>>();
    SimulateIncrementalMarking();
    MarkingState state(i_isolate());
    ASSERT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
    *ref_to = std::move(*ref_from);
    ASSERT_TRUE(ref_from->IsEmpty());
    EXPECT_FALSE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
  }
}

TEST_F(TracedReferenceTest, WriteBarrierForOnStackMove) {
  if (!v8_flags.incremental_marking)
    GTEST_SKIP() << "Write barrier tests require incremental marking";

  v8::Local<v8::Context> context = v8::Context::New(v8_isolate());
  v8::Context::Scope context_scope(context);
  {
    v8::HandleScope handles(v8_isolate());
    v8::Local<v8::Object> local =
        v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
    auto ref_from =
        std::make_unique<v8::TracedReference<v8::Object>>(v8_isolate(), local);
    v8::TracedReference<v8::Object> ref_to;
    SimulateIncrementalMarking();
    MarkingState state(i_isolate());
    ASSERT_TRUE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
    ref_to = std::move(*ref_from);
    ASSERT_TRUE(ref_from->IsEmpty());
    EXPECT_FALSE(
        state.IsUnmarked(Cast<HeapObject>(*Utils::OpenDirectHandle(*local))));
  }
}

}  // namespace internal
}  // namespace v8
                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/unified-heap-snapshot-unittest.cc                  0000664 0000000 0000000 00000103300 14746647661 0030065 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <cstring>

#include "include/cppgc/allocation.h"
#include "include/cppgc/common.h"
#include "include/cppgc/cross-thread-persistent.h"
#include "include/cppgc/custom-space.h"
#include "include/cppgc/garbage-collected.h"
#include "include/cppgc/name-provider.h"
#include "include/cppgc/persistent.h"
#include "include/v8-cppgc.h"
#include "include/v8-profiler.h"
#include "src/api/api-inl.h"
#include "src/heap/cppgc-js/cpp-heap.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/object-allocator.h"
#include "src/objects/heap-object.h"
#include "src/objects/objects-inl.h"
#include "src/profiler/heap-snapshot-generator-inl.h"
#include "src/profiler/heap-snapshot-generator.h"
#include "test/unittests/heap/cppgc-js/unified-heap-utils.h"
#include "test/unittests/heap/heap-utils.h"

namespace cppgc {

class CompactableCustomSpace : public CustomSpace<CompactableCustomSpace> {
 public:
  static constexpr size_t kSpaceIndex = 0;
  static constexpr bool kSupportsCompaction = true;
};

}  // namespace cppgc

namespace v8::internal {

struct CompactableGCed : public cppgc::GarbageCollected<CompactableGCed>,
                         public cppgc::NameProvider {
 public:
  static constexpr const char kExpectedName[] = "CompactableGCed";
  void Trace(cppgc::Visitor* v) const {}
  const char* GetHumanReadableName() const final { return "CompactableGCed"; }
  size_t data = 0;
};

struct CompactableHolder : public cppgc::GarbageCollected<CompactableHolder> {
 public:
  explicit CompactableHolder(cppgc::AllocationHandle& allocation_handle) {
    object = cppgc::MakeGarbageCollected<CompactableGCed>(allocation_handle);
  }

  void Trace(cppgc::Visitor* visitor) const {
    cppgc::internal::VisitorBase::TraceRawForTesting(
        visitor, const_cast<const CompactableGCed*>(object));
    visitor->RegisterMovableReference(
        const_cast<const CompactableGCed**>(&object));
  }
  CompactableGCed* object = nullptr;
};

}  // namespace v8::internal

namespace cppgc {
template <>
struct SpaceTrait<v8::internal::CompactableGCed> {
  using Space = CompactableCustomSpace;
};
}  // namespace cppgc

namespace v8 {
namespace internal {

namespace {

class UnifiedHeapSnapshotTest : public UnifiedHeapTest {
 public:
  UnifiedHeapSnapshotTest() = default;
  explicit UnifiedHeapSnapshotTest(
      std::vector<std::unique_ptr<cppgc::CustomSpaceBase>> custom_spaces)
      : UnifiedHeapTest(std::move(custom_spaces)) {}
  const v8::HeapSnapshot* TakeHeapSnapshot(
      cppgc::EmbedderStackState stack_state =
          cppgc::EmbedderStackState::kMayContainHeapPointers,
      v8::HeapProfiler::HeapSnapshotMode snapshot_mode =
          v8::HeapProfiler::HeapSnapshotMode::kExposeInternals) {
    v8::HeapProfiler* heap_profiler = v8_isolate()->GetHeapProfiler();

    v8::HeapProfiler::HeapSnapshotOptions options;
    options.control = nullptr;
    options.global_object_name_resolver = nullptr;
    options.snapshot_mode = snapshot_mode;
    options.numerics_mode = v8::HeapProfiler::NumericsMode::kHideNumericValues;
    options.stack_state = stack_state;
    return heap_profiler->TakeHeapSnapshot(options);
  }

 protected:
  void TestMergedWrapperNode(v8::HeapProfiler::HeapSnapshotMode snapshot_mode);
};

bool IsValidSnapshot(const v8::HeapSnapshot* snapshot, int depth = 3) {
  const HeapSnapshot* heap_snapshot =
      reinterpret_cast<const HeapSnapshot*>(snapshot);
  std::unordered_set<const HeapEntry*> visited;
  for (const HeapGraphEdge& edge : heap_snapshot->edges()) {
    visited.insert(edge.to());
  }
  size_t unretained_entries_count = 0;
  for (const HeapEntry& entry : heap_snapshot->entries()) {
    if (visited.find(&entry) == visited.end() && entry.id() != 1) {
      entry.Print("entry with no retainer", "", depth, 0);
      ++unretained_entries_count;
    }
  }
  return unretained_entries_count == 0;
}

// Returns the IDs of all entries in the snapshot with the given name.
std::vector<SnapshotObjectId> GetIds(const v8::HeapSnapshot& snapshot,
                                     std::string name) {
  const HeapSnapshot& heap_snapshot =
      reinterpret_cast<const HeapSnapshot&>(snapshot);
  std::vector<SnapshotObjectId> result;
  for (const HeapEntry& entry : heap_snapshot.entries()) {
    if (entry.name() == name) {
      result.push_back(entry.id());
    }
  }
  return result;
}

bool ContainsRetainingPath(const v8::HeapSnapshot& snapshot,
                           const std::vector<std::string> retaining_path,
                           bool debug_retaining_path = false) {
  const HeapSnapshot& heap_snapshot =
      reinterpret_cast<const HeapSnapshot&>(snapshot);
  std::vector<HeapEntry*> haystack = {heap_snapshot.root()};
  for (size_t i = 0; i < retaining_path.size(); ++i) {
    const std::string& needle = retaining_path[i];
    std::vector<HeapEntry*> new_haystack;
    for (HeapEntry* parent : haystack) {
      for (int j = 0; j < parent->children_count(); j++) {
        HeapEntry* child = parent->child(j)->to();
        if (0 == strcmp(child->name(), needle.c_str())) {
          new_haystack.push_back(child);
        }
      }
    }
    if (new_haystack.empty()) {
      if (debug_retaining_path) {
        fprintf(stderr,
                "#\n# Could not find object with name '%s'\n#\n# Path:\n",
                needle.c_str());
        for (size_t j = 0; j < retaining_path.size(); ++j) {
          fprintf(stderr, "# - '%s'%s\n", retaining_path[j].c_str(),
                  i == j ? "\t<--- not found" : "");
        }
        fprintf(stderr, "#\n");
      }
      return false;
    }
    std::swap(haystack, new_haystack);
  }
  return true;
}

class BaseWithoutName : public cppgc::GarbageCollected<BaseWithoutName> {
 public:
  static constexpr const char kExpectedName[] =
      "v8::internal::(anonymous namespace)::BaseWithoutName";

  virtual void Trace(cppgc::Visitor* v) const {
    v->Trace(next);
    v->Trace(next2);
  }
  cppgc::Member<BaseWithoutName> next;
  cppgc::Member<BaseWithoutName> next2;
};
// static
constexpr const char BaseWithoutName::kExpectedName[];

class GCed final : public BaseWithoutName, public cppgc::NameProvider {
 public:
  static constexpr const char kExpectedName[] = "GCed";

  void Trace(cppgc::Visitor* v) const final { BaseWithoutName::Trace(v); }
  const char* GetHumanReadableName() const final { return "GCed"; }
};
// static
constexpr const char GCed::kExpectedName[];

static constexpr const char kExpectedCppRootsName[] = "C++ Persistent roots";
static constexpr const char kExpectedCppCrossThreadRootsName[] =
    "C++ CrossThreadPersistent roots";
static constexpr const char kExpectedCppStackRootsName[] =
    "C++ native stack roots";

template <typename T>
constexpr const char* GetExpectedName() {
  if (std::is_base_of<cppgc::NameProvider, T>::value ||
      cppgc::NameProvider::SupportsCppClassNamesAsObjectNames()) {
    return T::kExpectedName;
  } else {
    return cppgc::NameProvider::kHiddenName;
  }
}

}  // namespace

TEST_F(UnifiedHeapSnapshotTest, EmptySnapshot) {
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot));
}

TEST_F(UnifiedHeapSnapshotTest, RetainedByCppRoot) {
  cppgc::Persistent<GCed> gced =
      cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot, {kExpectedCppRootsName, GetExpectedName<GCed>()}));
}

TEST_F(UnifiedHeapSnapshotTest, ConsistentId) {
  cppgc::Persistent<GCed> gced =
      cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  const v8::HeapSnapshot* snapshot1 = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot1));
  const v8::HeapSnapshot* snapshot2 = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot2));
  std::vector<SnapshotObjectId> ids1 =
      GetIds(*snapshot1, GetExpectedName<GCed>());
  std::vector<SnapshotObjectId> ids2 =
      GetIds(*snapshot2, GetExpectedName<GCed>());
  EXPECT_EQ(ids1.size(), size_t{1});
  EXPECT_EQ(ids2.size(), size_t{1});
  EXPECT_EQ(ids1[0], ids2[0]);
}

class UnifiedHeapWithCustomSpaceSnapshotTest : public UnifiedHeapSnapshotTest {
 public:
  static std::vector<std::unique_ptr<cppgc::CustomSpaceBase>>
  GetCustomSpaces() {
    std::vector<std::unique_ptr<cppgc::CustomSpaceBase>> custom_spaces;
    custom_spaces.emplace_back(
        std::make_unique<cppgc::CompactableCustomSpace>());
    return custom_spaces;
  }
  UnifiedHeapWithCustomSpaceSnapshotTest()
      : UnifiedHeapSnapshotTest(GetCustomSpaces()) {}
};

TEST_F(UnifiedHeapWithCustomSpaceSnapshotTest, ConsistentIdAfterCompaction) {
  // Ensure that only things held by Persistent handles will remain after GC.
  DisableConservativeStackScanningScopeForTesting no_css(isolate()->heap());

  // Allocate an object that will be thrown away by the GC, so that there's
  // somewhere for the compactor to move stuff to.
  cppgc::Persistent<CompactableGCed> trash =
      cppgc::MakeGarbageCollected<CompactableGCed>(allocation_handle());

  // Create the object which we'll actually test.
  cppgc::Persistent<CompactableHolder> gced =
      cppgc::MakeGarbageCollected<CompactableHolder>(allocation_handle(),
                                                     allocation_handle());

  // Release the persistent reference to the other object.
  trash.Release();

  void* original_pointer = gced->object;

  // This first snapshot should not trigger compaction of the cppgc heap because
  // the heap is still very small.
  const v8::HeapSnapshot* snapshot1 =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kNoHeapPointers);
  EXPECT_TRUE(IsValidSnapshot(snapshot1));
  EXPECT_EQ(original_pointer, gced->object);

  // Manually run a GC with compaction. The GCed object should move.
  CppHeap::From(isolate()->heap()->cpp_heap())
      ->compactor()
      .EnableForNextGCForTesting();
  i::InvokeMajorGC(isolate(), i::GCFlag::kReduceMemoryFootprint);
  EXPECT_NE(original_pointer, gced->object);

  // In the second heap snapshot, the moved object should still have the same
  // ID.
  const v8::HeapSnapshot* snapshot2 =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kNoHeapPointers);
  EXPECT_TRUE(IsValidSnapshot(snapshot2));
  std::vector<SnapshotObjectId> ids1 =
      GetIds(*snapshot1, GetExpectedName<CompactableGCed>());
  std::vector<SnapshotObjectId> ids2 =
      GetIds(*snapshot2, GetExpectedName<CompactableGCed>());
  // Depending on build config, GetIds might have returned only the ID for the
  // CompactableGCed instance or it might have also returned the ID for the
  // CompactableHolder.
  EXPECT_TRUE(ids1.size() == 1 || ids1.size() == 2);
  std::sort(ids1.begin(), ids1.end());
  std::sort(ids2.begin(), ids2.end());
  EXPECT_EQ(ids1, ids2);
}

TEST_F(UnifiedHeapSnapshotTest, RetainedByCppCrossThreadRoot) {
  cppgc::subtle::CrossThreadPersistent<GCed> gced =
      cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot, {kExpectedCppCrossThreadRootsName, GetExpectedName<GCed>()}));
}

TEST_F(UnifiedHeapSnapshotTest, RetainedByStackRoots) {
  auto* volatile gced = cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  const v8::HeapSnapshot* snapshot =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kMayContainHeapPointers);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot, {kExpectedCppStackRootsName, GetExpectedName<GCed>()}));
  EXPECT_STREQ(gced->GetHumanReadableName(), GetExpectedName<GCed>());
}

TEST_F(UnifiedHeapSnapshotTest, RetainingUnnamedTypeWithInternalDetails) {
  cppgc::Persistent<BaseWithoutName> base_without_name =
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle());
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot, {kExpectedCppRootsName, GetExpectedName<BaseWithoutName>()}));
}

TEST_F(UnifiedHeapSnapshotTest, RetainingUnnamedTypeWithoutInternalDetails) {
  cppgc::Persistent<BaseWithoutName> base_without_name =
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle());
  const v8::HeapSnapshot* snapshot =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kMayContainHeapPointers,
                       v8::HeapProfiler::HeapSnapshotMode::kRegular);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_FALSE(ContainsRetainingPath(
      *snapshot, {kExpectedCppRootsName, cppgc::NameProvider::kHiddenName}));
  EXPECT_FALSE(ContainsRetainingPath(
      *snapshot, {kExpectedCppRootsName, GetExpectedName<BaseWithoutName>()}));
}

TEST_F(UnifiedHeapSnapshotTest, RetainingNamedThroughUnnamed) {
  cppgc::Persistent<BaseWithoutName> base_without_name =
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle());
  base_without_name->next =
      cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  const v8::HeapSnapshot* snapshot =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kMayContainHeapPointers,
                       v8::HeapProfiler::HeapSnapshotMode::kRegular);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot, {kExpectedCppRootsName, cppgc::NameProvider::kHiddenName,
                  GetExpectedName<GCed>()}));
}

TEST_F(UnifiedHeapSnapshotTest, PendingCallStack) {
  // Test ensures that the algorithm handles references into the current call
  // stack.
  //
  // Graph:
  //   Persistent -> BaseWithoutName (2) <-> BaseWithoutName (1) -> GCed (3)
  //
  // Visitation order is (1)->(2)->(3) which is a corner case, as when following
  // back from (2)->(1) the object in (1) is already visited and will only later
  // be marked as visible.
  auto* first =
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle());
  auto* second =
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle());
  first->next = second;
  first->next->next = first;
  auto* third = cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  first->next2 = third;

  cppgc::Persistent<BaseWithoutName> holder(second);
  const v8::HeapSnapshot* snapshot =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kMayContainHeapPointers,
                       v8::HeapProfiler::HeapSnapshotMode::kRegular);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot, {kExpectedCppRootsName, cppgc::NameProvider::kHiddenName,
                  cppgc::NameProvider::kHiddenName, GetExpectedName<GCed>()}));
}

TEST_F(UnifiedHeapSnapshotTest, ReferenceToFinishedSCC) {
  // Test ensures that the algorithm handles reference into an already finished
  // SCC that is marked as hidden whereas the current SCC would resolve to
  // visible.
  //
  // Graph:
  //   Persistent -> BaseWithoutName (1)
  //   Persistent -> BaseWithoutName (2)
  //                        + <-> BaseWithoutName (3) -> BaseWithoutName (1)
  //                        + -> GCed (4)
  //
  // Visitation order (1)->(2)->(3)->(1) which is a corner case as (3) would set
  // a dependency on (1) which is hidden. Instead (3) should set a dependency on
  // (2) as (1) resolves to hidden whereas (2) resolves to visible. The test
  // ensures that resolved hidden dependencies are ignored.
  cppgc::Persistent<BaseWithoutName> hidden_holder(
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle()));
  auto* first =
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle());
  auto* second =
      cppgc::MakeGarbageCollected<BaseWithoutName>(allocation_handle());
  first->next = second;
  second->next = *hidden_holder;
  second->next2 = first;
  first->next2 = cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  cppgc::Persistent<BaseWithoutName> holder(first);
  const v8::HeapSnapshot* snapshot =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kMayContainHeapPointers,
                       v8::HeapProfiler::HeapSnapshotMode::kRegular);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot, {kExpectedCppRootsName, cppgc::NameProvider::kHiddenName,
                  cppgc::NameProvider::kHiddenName,
                  cppgc::NameProvider::kHiddenName, GetExpectedName<GCed>()}));
}

namespace {

class GCedWithJSRef : public cppgc::GarbageCollected<GCedWithJSRef> {
 public:
  static constexpr const char kExpectedName[] =
      "v8::internal::(anonymous namespace)::GCedWithJSRef";

  virtual void Trace(cppgc::Visitor* v) const { v->Trace(v8_object_); }

  void SetV8Object(v8::Isolate* isolate, v8::Local<v8::Object> object) {
    v8_object_.Reset(isolate, object);
  }

  TracedReference<v8::Object>& wrapper() { return v8_object_; }

  void set_detachedness(v8::EmbedderGraph::Node::Detachedness detachedness) {
    detachedness_ = detachedness;
  }
  v8::EmbedderGraph::Node::Detachedness detachedness() const {
    return detachedness_;
  }

 private:
  TracedReference<v8::Object> v8_object_;
  v8::EmbedderGraph::Node::Detachedness detachedness_ =
      v8::EmbedderGraph::Node::Detachedness ::kUnknown;
};

constexpr const char GCedWithJSRef::kExpectedName[];

class V8_NODISCARD JsTestingScope {
 public:
  explicit JsTestingScope(v8::Isolate* isolate)
      : isolate_(isolate),
        handle_scope_(isolate),
        context_(v8::Context::New(isolate)),
        context_scope_(context_) {}

  v8::Isolate* isolate() const { return isolate_; }
  v8::Local<v8::Context> context() const { return context_; }

 private:
  v8::Isolate* isolate_;
  v8::HandleScope handle_scope_;
  v8::Local<v8::Context> context_;
  v8::Context::Scope context_scope_;
};

cppgc::Persistent<GCedWithJSRef> SetupWrapperWrappablePair(
    JsTestingScope& testing_scope, cppgc::AllocationHandle& allocation_handle,
    const char* name,
    v8::EmbedderGraph::Node::Detachedness detachedness =
        v8::EmbedderGraph::Node::Detachedness::kUnknown) {
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref =
      cppgc::MakeGarbageCollected<GCedWithJSRef>(allocation_handle);
  v8::Local<v8::Object> wrapper_object = WrapperHelper::CreateWrapper(
      testing_scope.context(), gc_w_js_ref.Get(), name);
  gc_w_js_ref->SetV8Object(testing_scope.isolate(), wrapper_object);
  gc_w_js_ref->set_detachedness(detachedness);
  return gc_w_js_ref;
}

template <typename Callback>
void ForEachEntryWithName(const v8::HeapSnapshot* snapshot, const char* needle,
                          Callback callback) {
  const HeapSnapshot* heap_snapshot =
      reinterpret_cast<const HeapSnapshot*>(snapshot);
  for (const HeapEntry& entry : heap_snapshot->entries()) {
    if (strcmp(entry.name(), needle) == 0) {
      callback(entry);
    }
  }
}

}  // namespace

TEST_F(UnifiedHeapSnapshotTest, JSReferenceForcesVisibleObject) {
  // Test ensures that a C++->JS reference forces an object to be visible in the
  // snapshot.
  JsTestingScope testing_scope(v8_isolate());
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "LeafJSObject");
  // Reset the JS->C++ ref or otherwise the nodes would be merged.
  WrapperHelper::ResetWrappableConnection(
      v8_isolate(), gc_w_js_ref->wrapper().Get(v8_isolate()));
  const v8::HeapSnapshot* snapshot =
      TakeHeapSnapshot(cppgc::EmbedderStackState::kMayContainHeapPointers,
                       v8::HeapProfiler::HeapSnapshotMode::kRegular);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot,
      {kExpectedCppRootsName, cppgc::NameProvider::kHiddenName, "LeafJSObject"},
      true));
}

void UnifiedHeapSnapshotTest::TestMergedWrapperNode(
    v8::HeapProfiler::HeapSnapshotMode snapshot_mode) {
  // Test ensures that the snapshot sets a wrapper node for C++->JS references
  // that have a valid back reference and that object nodes are merged. In
  // practice, the C++ node is merged into the existing JS node.
  JsTestingScope testing_scope(v8_isolate());
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "MergedObject");
  v8::Local<v8::Object> next_object = WrapperHelper::CreateWrapper(
      testing_scope.context(), nullptr, "NextObject");
  v8::Local<v8::Object> wrapper_object =
      gc_w_js_ref->wrapper().Get(v8_isolate());
  // Chain another object to `wrapper_object`. Since `wrapper_object` should be
  // merged into `GCedWithJSRef`, the additional object must show up as direct
  // child from `GCedWithJSRef`.
  wrapper_object
      ->Set(testing_scope.context(),
            v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), "link")
                .ToLocalChecked(),
            next_object)
      .ToChecked();
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot(
      cppgc::EmbedderStackState::kMayContainHeapPointers, snapshot_mode);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  const char* kExpectedName =
      snapshot_mode == v8::HeapProfiler::HeapSnapshotMode::kExposeInternals
          ? GetExpectedName<GCedWithJSRef>()
          : cppgc::NameProvider::kHiddenName;
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot,
      {kExpectedCppRootsName, kExpectedName,
       // GCedWithJSRef is merged into MergedObject, replacing its name.
       "NextObject"}));
  const size_t js_size = Utils::OpenDirectHandle(*wrapper_object)->Size();
  if (snapshot_mode == v8::HeapProfiler::HeapSnapshotMode::kExposeInternals) {
    const size_t cpp_size =
        cppgc::internal::HeapObjectHeader::FromObject(gc_w_js_ref.Get())
            .AllocatedSize();
    ForEachEntryWithName(snapshot, kExpectedName,
                         [cpp_size, js_size](const HeapEntry& entry) {
                           EXPECT_EQ(cpp_size + js_size, entry.self_size());
                         });
  } else {
    ForEachEntryWithName(snapshot, kExpectedName,
                         [js_size](const HeapEntry& entry) {
                           EXPECT_EQ(js_size, entry.self_size());
                         });
  }
}

TEST_F(UnifiedHeapSnapshotTest, MergedWrapperNodeWithInternalDetails) {
  TestMergedWrapperNode(v8::HeapProfiler::HeapSnapshotMode::kExposeInternals);
}

TEST_F(UnifiedHeapSnapshotTest, MergedWrapperNodeWithoutInternalDetails) {
  TestMergedWrapperNode(v8::HeapProfiler::HeapSnapshotMode::kRegular);
}

namespace {

class DetachednessHandler {
 public:
  static size_t callback_count;

  static v8::EmbedderGraph::Node::Detachedness GetDetachedness(
      v8::Isolate* isolate, const v8::Local<v8::Value>& v8_value, uint16_t,
      void*) {
    callback_count++;
    return WrapperHelper::UnwrapAs<GCedWithJSRef>(isolate,
                                                  v8_value.As<v8::Object>())
        ->detachedness();
  }

  static void Reset() { callback_count = 0; }
};
// static
size_t DetachednessHandler::callback_count = 0;

constexpr uint8_t kExpectedDetachedValueForUnknown =
    static_cast<uint8_t>(v8::EmbedderGraph::Node::Detachedness::kUnknown);
constexpr uint8_t kExpectedDetachedValueForAttached =
    static_cast<uint8_t>(v8::EmbedderGraph::Node::Detachedness::kAttached);
constexpr uint8_t kExpectedDetachedValueForDetached =
    static_cast<uint8_t>(v8::EmbedderGraph::Node::Detachedness::kDetached);

}  // namespace

TEST_F(UnifiedHeapSnapshotTest, DetachedObjectsRetainedByJSReference) {
  v8::Isolate* isolate = v8_isolate();
  v8::HandleScope scope(isolate);
  v8::HeapProfiler* heap_profiler = isolate->GetHeapProfiler();
  heap_profiler->SetGetDetachednessCallback(
      DetachednessHandler::GetDetachedness, nullptr);
  // Test ensures that objects that are retained by a JS reference are obtained
  // by the GetDetachedJSWrapperObjects() function
  JsTestingScope testing_scope(v8_isolate());
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "Obj",
      v8::EmbedderGraph::Node::Detachedness ::kDetached);
  // Ensure we are obtaining a Detached Wrapper
  CHECK_EQ(1, heap_profiler->GetDetachedJSWrapperObjects().size());

  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref_not_detached =
      SetupWrapperWrappablePair(
          testing_scope, allocation_handle(), "Obj",
          v8::EmbedderGraph::Node::Detachedness ::kAttached);
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref_unknown =
      SetupWrapperWrappablePair(
          testing_scope, allocation_handle(), "Obj",
          v8::EmbedderGraph::Node::Detachedness ::kUnknown);
  // Ensure we are only obtaining Wrappers that are Detached
  CHECK_EQ(1, heap_profiler->GetDetachedJSWrapperObjects().size());

  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref2 = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "Obj",
      v8::EmbedderGraph::Node::Detachedness ::kDetached);
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref3 = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "Obj",
      v8::EmbedderGraph::Node::Detachedness ::kDetached);
  // Ensure we are obtaining all Detached Wrappers
  CHECK_EQ(3, heap_profiler->GetDetachedJSWrapperObjects().size());
}

TEST_F(UnifiedHeapSnapshotTest, NoTriggerForStandAloneTracedReference) {
  // Test ensures that C++ objects with TracedReference have their V8 objects
  // not merged and queried for detachedness if the backreference is invalid.
  JsTestingScope testing_scope(v8_isolate());
  // Marking the object as attached. The check below queries for unknown, making
  // sure that the state is not propagated.
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "MergedObject",
      v8::EmbedderGraph::Node::Detachedness::kAttached);
  DetachednessHandler::Reset();
  v8_isolate()->GetHeapProfiler()->SetGetDetachednessCallback(
      DetachednessHandler::GetDetachedness, nullptr);
  WrapperHelper::ResetWrappableConnection(
      v8_isolate(), gc_w_js_ref->wrapper().Get(v8_isolate()));
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_EQ(0u, DetachednessHandler::callback_count);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(
      ContainsRetainingPath(*snapshot, {
                                           kExpectedCppRootsName,
                                           GetExpectedName<GCedWithJSRef>(),
                                       }));
  ForEachEntryWithName(
      snapshot, GetExpectedName<GCedWithJSRef>(), [](const HeapEntry& entry) {
        EXPECT_EQ(kExpectedDetachedValueForUnknown, entry.detachedness());
      });
}

TEST_F(UnifiedHeapSnapshotTest, TriggerDetachednessCallbackSettingAttached) {
  // Test ensures that objects with JS references that have a valid back
  // reference set do have their detachedness state queried and set (attached
  // version).
  JsTestingScope testing_scope(v8_isolate());
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "MergedObject",
      v8::EmbedderGraph::Node::Detachedness::kAttached);
  DetachednessHandler::Reset();
  v8_isolate()->GetHeapProfiler()->SetGetDetachednessCallback(
      DetachednessHandler::GetDetachedness, nullptr);
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_EQ(1u, DetachednessHandler::callback_count);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(
      ContainsRetainingPath(*snapshot, {
                                           kExpectedCppRootsName,
                                           GetExpectedName<GCedWithJSRef>(),
                                       }));
  ForEachEntryWithName(
      snapshot, GetExpectedName<GCedWithJSRef>(), [](const HeapEntry& entry) {
        EXPECT_EQ(kExpectedDetachedValueForAttached, entry.detachedness());
      });
}

TEST_F(UnifiedHeapSnapshotTest, TriggerDetachednessCallbackSettingDetached) {
  // Test ensures that objects with JS references that have a valid back
  // reference set do have their detachedness state queried and set (detached
  // version).
  JsTestingScope testing_scope(v8_isolate());
  cppgc::Persistent<GCedWithJSRef> gc_w_js_ref = SetupWrapperWrappablePair(
      testing_scope, allocation_handle(), "MergedObject",
      v8::EmbedderGraph::Node::Detachedness ::kDetached);
  DetachednessHandler::Reset();
  v8_isolate()->GetHeapProfiler()->SetGetDetachednessCallback(
      DetachednessHandler::GetDetachedness, nullptr);
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_EQ(1u, DetachednessHandler::callback_count);
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(
      ContainsRetainingPath(*snapshot, {
                                           kExpectedCppRootsName,
                                           GetExpectedName<GCedWithJSRef>(),
                                       }));
  ForEachEntryWithName(
      snapshot, GetExpectedName<GCedWithJSRef>(), [](const HeapEntry& entry) {
        EXPECT_EQ(kExpectedDetachedValueForDetached, entry.detachedness());
      });
}

namespace {
class WrappedContext : public cppgc::GarbageCollected<WrappedContext>,
                       public cppgc::NameProvider {
 public:
  static constexpr const char kExpectedName[] = "cppgc WrappedContext";

  // Cycle:
  // Context -> EmbdderData -> WrappedContext JS object -> WrappedContext cppgc
  // object -> Context
  static cppgc::Persistent<WrappedContext> New(v8::Isolate* isolate) {
    v8::Local<v8::Context> context = v8::Context::New(isolate);
    v8::Local<v8::Object> obj =
        WrapperHelper::CreateWrapper(context, nullptr, "js WrappedContext");
    context->SetEmbedderData(kContextDataIndex, obj);
    cppgc::Persistent<WrappedContext> ref =
        cppgc::MakeGarbageCollected<WrappedContext>(
            isolate->GetCppHeap()->GetAllocationHandle(), isolate, obj,
            context);
    WrapperHelper::SetWrappableConnection(isolate, obj, ref.Get());
    return ref;
  }

  static v8::EmbedderGraph::Node::Detachedness GetDetachedness(
      v8::Isolate* isolate, const v8::Local<v8::Value>& v8_value, uint16_t,
      void*) {
    return WrapperHelper::UnwrapAs<WrappedContext>(isolate,
                                                   v8_value.As<v8::Object>())
        ->detachedness();
  }

  const char* GetHumanReadableName() const final { return kExpectedName; }

  virtual void Trace(cppgc::Visitor* v) const {
    v->Trace(object_);
    v->Trace(context_);
  }

  WrappedContext(v8::Isolate* isolate, v8::Local<v8::Object> object,
                 v8::Local<v8::Context> context) {
    object_.Reset(isolate, object);
    context_.Reset(isolate, context);
  }

  v8::Local<v8::Context> context(v8::Isolate* isolate) {
    return context_.Get(isolate);
  }

  void set_detachedness(v8::EmbedderGraph::Node::Detachedness detachedness) {
    detachedness_ = detachedness;
  }
  v8::EmbedderGraph::Node::Detachedness detachedness() const {
    return detachedness_;
  }

 private:
  static constexpr int kContextDataIndex = 0;
  // This is needed to merge the nodes in the heap snapshot.
  TracedReference<v8::Object> object_;
  TracedReference<v8::Context> context_;
  v8::EmbedderGraph::Node::Detachedness detachedness_ =
      v8::EmbedderGraph::Node::Detachedness::kUnknown;
};
}  // anonymous namespace

TEST_F(UnifiedHeapSnapshotTest, WrappedContext) {
  JsTestingScope testing_scope(v8_isolate());
  v8_isolate()->GetHeapProfiler()->SetGetDetachednessCallback(
      WrappedContext::GetDetachedness, nullptr);
  cppgc::Persistent<WrappedContext> wrapped = WrappedContext::New(v8_isolate());
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot,
      {kExpectedCppRootsName, wrapped->GetHumanReadableName(),
       "system / NativeContext", "system / EmbedderDataArray",
       wrapped->GetHumanReadableName()},
      true));

  wrapped->set_detachedness(v8::EmbedderGraph::Node::Detachedness::kDetached);
  v8_isolate()->GetHeapProfiler()->DeleteAllHeapSnapshots();
  snapshot = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(
      *snapshot,
      {kExpectedCppRootsName, wrapped->GetHumanReadableName(),
       "system / NativeContext", "system / EmbedderDataArray",
       wrapped->GetHumanReadableName()},
      true));
  ForEachEntryWithName(
      snapshot, wrapped->GetHumanReadableName(), [](const HeapEntry& entry) {
        EXPECT_EQ(kExpectedDetachedValueForDetached, entry.detachedness());
      });
}

namespace {

class GCedWithDynamicName : public cppgc::GarbageCollected<GCedWithDynamicName>,
                            public cppgc::NameProvider {
 public:
  virtual void Trace(cppgc::Visitor* v) const {}

  void SetValue(int value) { value_ = value; }

  const char* GetHumanReadableName() const final {
    v8::HeapProfiler* heap_profiler =
        v8::Isolate::GetCurrent()->GetHeapProfiler();
    if (heap_profiler->IsTakingSnapshot()) {
      std::string name = "dynamic name " + std::to_string(value_);
      return heap_profiler->CopyNameForHeapSnapshot(name.c_str());
    }
    return "static name";
  }

 private:
  int value_ = 0;
};

}  // namespace

TEST_F(UnifiedHeapSnapshotTest, DynamicName) {
  cppgc::Persistent<GCedWithDynamicName> object_zero =
      cppgc::MakeGarbageCollected<GCedWithDynamicName>(allocation_handle());
  cppgc::Persistent<GCedWithDynamicName> object_one =
      cppgc::MakeGarbageCollected<GCedWithDynamicName>(allocation_handle());
  object_one->SetValue(1);
  std::string static_name =
      cppgc::internal::HeapObjectHeader::FromObject(object_one.Get())
          .GetName()
          .value;
  EXPECT_EQ(static_name, std::string("static name"));
  const v8::HeapSnapshot* snapshot = TakeHeapSnapshot();
  EXPECT_TRUE(IsValidSnapshot(snapshot));
  EXPECT_TRUE(ContainsRetainingPath(*snapshot,
                                    {kExpectedCppRootsName, "dynamic name 0"}));
  EXPECT_TRUE(ContainsRetainingPath(*snapshot,
                                    {kExpectedCppRootsName, "dynamic name 1"}));
  EXPECT_FALSE(
      ContainsRetainingPath(*snapshot, {kExpectedCppRootsName, "static name"}));
}

}  // namespace internal
}  // namespace v8
                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/unified-heap-unittest.cc                           0000664 0000000 0000000 00000074566 14746647661 0026255 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <memory>

#include "include/cppgc/allocation.h"
#include "include/cppgc/explicit-management.h"
#include "include/cppgc/garbage-collected.h"
#include "include/cppgc/heap-consistency.h"
#include "include/cppgc/internal/api-constants.h"
#include "include/cppgc/persistent.h"
#include "include/cppgc/testing.h"
#include "include/libplatform/libplatform.h"
#include "include/v8-context.h"
#include "include/v8-cppgc.h"
#include "include/v8-local-handle.h"
#include "include/v8-object.h"
#include "include/v8-traced-handle.h"
#include "src/api/api-inl.h"
#include "src/common/globals.h"
#include "src/flags/flags.h"
#include "src/heap/cppgc-js/cpp-heap.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/sweeper.h"
#include "src/heap/gc-tracer-inl.h"
#include "src/objects/objects-inl.h"
#include "test/unittests/heap/cppgc-js/unified-heap-utils.h"
#include "test/unittests/heap/heap-utils.h"

namespace v8::internal {

namespace {

class Wrappable final : public cppgc::GarbageCollected<Wrappable> {
 public:
  static size_t destructor_callcount;

  ~Wrappable() { destructor_callcount++; }

  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(wrapper_); }

  void SetWrapper(v8::Isolate* isolate, v8::Local<v8::Object> wrapper) {
    wrapper_.Reset(isolate, wrapper);
  }

  TracedReference<v8::Object>& wrapper() { return wrapper_; }

 private:
  TracedReference<v8::Object> wrapper_;
};

size_t Wrappable::destructor_callcount = 0;

using UnifiedHeapDetachedTest = TestWithHeapInternals;

}  // namespace

TEST_F(UnifiedHeapTest, OnlyGC) { CollectGarbageWithEmbedderStack(); }

TEST_F(UnifiedHeapTest, FindingV8ToCppReference) {
  auto* wrappable_object =
      cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
  v8::Local<v8::Object> api_object = WrapperHelper::CreateWrapper(
      v8_isolate()->GetCurrentContext(), wrappable_object);
  EXPECT_FALSE(api_object.IsEmpty());
  // With direct locals, api_object may be invalid after a stackless GC.
  auto handle_api_object = v8::Utils::OpenIndirectHandle(*api_object);
  Wrappable::destructor_callcount = 0;
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
  WrapperHelper::ResetWrappableConnection(
      v8_isolate(), v8::Utils::ToLocal(handle_api_object));
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(1u, Wrappable::destructor_callcount);
}

TEST_F(UnifiedHeapTest, WriteBarrierV8ToCppReference) {
  if (!v8_flags.incremental_marking) return;

  void* wrappable = cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
  v8::Local<v8::Object> api_object =
      WrapperHelper::CreateWrapper(v8_isolate()->GetCurrentContext(), nullptr);
  EXPECT_FALSE(api_object.IsEmpty());
  // With direct locals, api_object may be invalid after a stackless GC.
  auto handle_api_object = v8::Utils::OpenIndirectHandle(*api_object);
  // Create an additional Global that gets picked up by the incremetnal marker
  // as root.
  Global<v8::Object> global(v8_isolate(), api_object);
  Wrappable::destructor_callcount = 0;
  WrapperHelper::ResetWrappableConnection(v8_isolate(), api_object);
  SimulateIncrementalMarking();
  WrapperHelper::SetWrappableConnection(
      v8_isolate(), v8::Utils::ToLocal(handle_api_object), wrappable);
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
}

#if DEBUG
namespace {
class Unreferenced : public cppgc::GarbageCollected<Unreferenced> {
 public:
  void Trace(cppgc::Visitor*) const {}
};
}  // namespace

TEST_F(UnifiedHeapTest, FreeUnreferencedDuringNoGcScope) {
  auto* unreferenced = cppgc::MakeGarbageCollected<Unreferenced>(
      allocation_handle(),
      cppgc::AdditionalBytes(cppgc::internal::api_constants::kMB));
  // Force safepoint to force flushing of cached allocated/freed sizes in cppgc.
  cpp_heap().stats_collector()->NotifySafePointForTesting();
  {
    cppgc::subtle::NoGarbageCollectionScope no_gc_scope(cpp_heap());
    cppgc::subtle::FreeUnreferencedObject(cpp_heap(), *unreferenced);
    // Force safepoint to make sure allocated size decrease due to freeing
    // unreferenced object is reported to CppHeap. Due to
    // NoGarbageCollectionScope, CppHeap will cache the reported decrease and
    // won't report it further.
    cpp_heap().stats_collector()->NotifySafePointForTesting();
  }
  // Running a GC resets the allocated size counters to the current marked bytes
  // counter.
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  // If CppHeap didn't clear it's cached values when the counters were reset,
  // the next safepoint will try to decrease the cached value from the last
  // marked bytes (which is smaller than the cached value) and crash.
  cppgc::MakeGarbageCollected<Unreferenced>(allocation_handle());
  cpp_heap().stats_collector()->NotifySafePointForTesting();
}
#endif  // DEBUG

TEST_F(UnifiedHeapTest, TracedReferenceRetainsFromStack) {
  TracedReference<v8::Object> holder;
  {
    v8::HandleScope inner_handle_scope(v8_isolate());
    auto local = v8::Object::New(v8_isolate());
    EXPECT_TRUE(local->IsObject());
    holder.Reset(v8_isolate(), local);
  }
  CollectGarbageWithEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  auto local = holder.Get(v8_isolate());
  EXPECT_TRUE(local->IsObject());
}

TEST_F(UnifiedHeapDetachedTest, AllocationBeforeConfigureHeap) {
  auto heap =
      v8::CppHeap::Create(V8::GetCurrentPlatform(), CppHeapCreateParams{{}});
  auto* object =
      cppgc::MakeGarbageCollected<Wrappable>(heap->GetAllocationHandle());
  cppgc::WeakPersistent<Wrappable> weak_holder{object};

  auto& js_heap = *isolate()->heap();
  js_heap.AttachCppHeap(heap.get());
  auto& cpp_heap = *CppHeap::From(isolate()->heap()->cpp_heap());
  {
    InvokeMajorGC();
    cpp_heap.AsBase().sweeper().FinishIfRunning();
    EXPECT_TRUE(weak_holder);
  }
  USE(object);
  {
    EmbedderStackStateScope stack_scope(
        &js_heap, EmbedderStackStateOrigin::kExplicitInvocation,
        StackState::kNoHeapPointers);
    InvokeMajorGC();
    cpp_heap.AsBase().sweeper().FinishIfRunning();
    EXPECT_FALSE(weak_holder);
  }
}

TEST_F(UnifiedHeapDetachedTest, StandAloneCppGC) {
  // Test ensures that stand-alone C++ GC are possible when using CppHeap. This
  // works even in the presence of wrappables using TracedReference as long
  // as the reference is empty.
  auto heap =
      v8::CppHeap::Create(V8::GetCurrentPlatform(), CppHeapCreateParams{{}});
  auto* object =
      cppgc::MakeGarbageCollected<Wrappable>(heap->GetAllocationHandle());
  cppgc::WeakPersistent<Wrappable> weak_holder{object};

  heap->EnableDetachedGarbageCollectionsForTesting();
  {
    heap->CollectGarbageForTesting(
        cppgc::EmbedderStackState::kMayContainHeapPointers);
    EXPECT_TRUE(weak_holder);
  }
  USE(object);
  {
    heap->CollectGarbageForTesting(cppgc::EmbedderStackState::kNoHeapPointers);
    EXPECT_FALSE(weak_holder);
  }
}

TEST_F(UnifiedHeapDetachedTest, StandaloneTestingHeap) {
  // Perform garbage collection through the StandaloneTestingHeap API.
  auto cpp_heap =
      v8::CppHeap::Create(V8::GetCurrentPlatform(), CppHeapCreateParams{{}});
  cpp_heap->EnableDetachedGarbageCollectionsForTesting();
  cppgc::testing::StandaloneTestingHeap heap(cpp_heap->GetHeapHandle());
  heap.StartGarbageCollection();
  heap.PerformMarkingStep(cppgc::EmbedderStackState::kNoHeapPointers);
  heap.FinalizeGarbageCollection(cppgc::EmbedderStackState::kNoHeapPointers);
}

}  // namespace v8::internal

namespace cppgc {

class CustomSpaceForTest : public CustomSpace<CustomSpaceForTest> {
 public:
  static constexpr size_t kSpaceIndex = 0;
};

constexpr size_t CustomSpaceForTest::kSpaceIndex;

}  // namespace cppgc

namespace v8::internal {

namespace {

class StatisticsReceiver final : public CustomSpaceStatisticsReceiver {
 public:
  static size_t num_calls_;

  StatisticsReceiver(cppgc::CustomSpaceIndex space_index, size_t bytes)
      : expected_space_index_(space_index), expected_bytes_(bytes) {}

  void AllocatedBytes(cppgc::CustomSpaceIndex space_index, size_t bytes) final {
    EXPECT_EQ(expected_space_index_.value, space_index.value);
    EXPECT_EQ(expected_bytes_, bytes);
    ++num_calls_;
  }

 private:
  const cppgc::CustomSpaceIndex expected_space_index_;
  const size_t expected_bytes_;
};

size_t StatisticsReceiver::num_calls_ = 0u;

class GCed final : public cppgc::GarbageCollected<GCed> {
 public:
  ~GCed() {
    // Force a finalizer to guarantee sweeping can't finish without the main
    // thread.
    USE(data_);
  }
  static size_t GetAllocatedSize() {
    return sizeof(GCed) + sizeof(cppgc::internal::HeapObjectHeader);
  }
  void Trace(cppgc::Visitor*) const {}

 private:
  char data_[KB];
};

}  // namespace
}  // namespace v8::internal

namespace cppgc {
template <>
struct SpaceTrait<v8::internal::GCed> {
  using Space = CustomSpaceForTest;
};

}  // namespace cppgc

namespace v8::internal {

namespace {

class UnifiedHeapWithCustomSpaceTest : public UnifiedHeapTest {
 public:
  static std::vector<std::unique_ptr<cppgc::CustomSpaceBase>>
  GetCustomSpaces() {
    std::vector<std::unique_ptr<cppgc::CustomSpaceBase>> custom_spaces;
    custom_spaces.emplace_back(std::make_unique<cppgc::CustomSpaceForTest>());
    return custom_spaces;
  }
  UnifiedHeapWithCustomSpaceTest() : UnifiedHeapTest(GetCustomSpaces()) {}
};

}  // namespace

TEST_F(UnifiedHeapWithCustomSpaceTest, CollectCustomSpaceStatisticsAtLastGC) {
  // TPH does not support kIncrementalAndConcurrent yet.
  if (v8_flags.enable_third_party_heap) return;
  StatisticsReceiver::num_calls_ = 0;
  // Initial state.
  cpp_heap().CollectCustomSpaceStatisticsAtLastGC(
      {cppgc::CustomSpaceForTest::kSpaceIndex},
      std::make_unique<StatisticsReceiver>(
          cppgc::CustomSpaceForTest::kSpaceIndex, 0u));
  EXPECT_EQ(1u, StatisticsReceiver::num_calls_);
  // State unpdated only after GC.
  cppgc::Persistent<GCed> live_obj =
      cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  cpp_heap().CollectCustomSpaceStatisticsAtLastGC(
      {cppgc::CustomSpaceForTest::kSpaceIndex},
      std::make_unique<StatisticsReceiver>(
          cppgc::CustomSpaceForTest::kSpaceIndex, 0u));
  EXPECT_EQ(2u, StatisticsReceiver::num_calls_);
  // Check state after GC.
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  cpp_heap().CollectCustomSpaceStatisticsAtLastGC(
      {cppgc::CustomSpaceForTest::kSpaceIndex},
      std::make_unique<StatisticsReceiver>(
          cppgc::CustomSpaceForTest::kSpaceIndex, GCed::GetAllocatedSize()));
  EXPECT_EQ(3u, StatisticsReceiver::num_calls_);
  // State callback delayed during sweeping.
  cppgc::Persistent<GCed> another_live_obj =
      cppgc::MakeGarbageCollected<GCed>(allocation_handle());
  while (v8::platform::PumpMessageLoop(
      V8::GetCurrentPlatform(), v8_isolate(),
      v8::platform::MessageLoopBehavior::kDoNotWait)) {
    // Empty the message loop to avoid finalizing garbage collections through
    // unrelated tasks.
  }
  CollectGarbageWithoutEmbedderStack(
      cppgc::Heap::SweepingType::kIncrementalAndConcurrent);
  DCHECK(cpp_heap().sweeper().IsSweepingInProgress());
  cpp_heap().CollectCustomSpaceStatisticsAtLastGC(
      {cppgc::CustomSpaceForTest::kSpaceIndex},
      std::make_unique<StatisticsReceiver>(
          cppgc::CustomSpaceForTest::kSpaceIndex,
          2 * GCed::GetAllocatedSize()));
  while (v8::platform::PumpMessageLoop(
      V8::GetCurrentPlatform(), v8_isolate(),
      v8::platform::MessageLoopBehavior::kWaitForWork)) {
    if (3 < StatisticsReceiver::num_calls_) {
      EXPECT_FALSE(cpp_heap().sweeper().IsSweepingInProgress());
      break;
    }
  }
  EXPECT_EQ(4u, StatisticsReceiver::num_calls_);
}

namespace {

class InConstructionObjectReferringToGlobalHandle final
    : public cppgc::GarbageCollected<
          InConstructionObjectReferringToGlobalHandle> {
 public:
  InConstructionObjectReferringToGlobalHandle(Heap* heap,
                                              v8::Local<v8::Object> wrapper)
      : wrapper_(reinterpret_cast<v8::Isolate*>(heap->isolate()), wrapper) {
    heap->CollectGarbage(OLD_SPACE, GarbageCollectionReason::kTesting);
    heap->CollectGarbage(OLD_SPACE, GarbageCollectionReason::kTesting);
  }

  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(wrapper_); }

  TracedReference<v8::Object>& GetWrapper() { return wrapper_; }

 private:
  TracedReference<v8::Object> wrapper_;
};

}  // namespace

TEST_F(UnifiedHeapTest, InConstructionObjectReferringToGlobalHandle) {
  v8::HandleScope handle_scope(v8_isolate());
  {
    v8::HandleScope inner_handle_scope(v8_isolate());
    auto local = v8::Object::New(v8_isolate());
    auto* cpp_obj = cppgc::MakeGarbageCollected<
        InConstructionObjectReferringToGlobalHandle>(
        allocation_handle(),
        reinterpret_cast<i::Isolate*>(v8_isolate())->heap(), local);
    CHECK_NE(kGlobalHandleZapValue,
             ValueHelper::ValueAsAddress(
                 ValueHelper::HandleAsValue(cpp_obj->GetWrapper())));
  }
}

namespace {

class ResetReferenceInDestructorObject final
    : public cppgc::GarbageCollected<ResetReferenceInDestructorObject> {
 public:
  ResetReferenceInDestructorObject(Heap* heap, v8::Local<v8::Object> wrapper)
      : wrapper_(reinterpret_cast<v8::Isolate*>(heap->isolate()), wrapper) {}
  ~ResetReferenceInDestructorObject() { wrapper_.Reset(); }

  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(wrapper_); }

 private:
  TracedReference<v8::Object> wrapper_;
};

}  // namespace

TEST_F(UnifiedHeapTest, ResetReferenceInDestructor) {
  v8::HandleScope handle_scope(v8_isolate());
  {
    v8::HandleScope inner_handle_scope(v8_isolate());
    auto local = v8::Object::New(v8_isolate());
    cppgc::MakeGarbageCollected<ResetReferenceInDestructorObject>(
        allocation_handle(),
        reinterpret_cast<i::Isolate*>(v8_isolate())->heap(), local);
  }
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
}

TEST_F(UnifiedHeapTest, OnStackReferencesAreTemporary) {
  ManualGCScope manual_gc(i_isolate());
  v8::Global<v8::Object> observer;
  {
    v8::TracedReference<v8::Value> stack_ref;
    v8::HandleScope scope(v8_isolate());
    v8::Local<v8::Object> api_object = WrapperHelper::CreateWrapper(
        v8_isolate()->GetCurrentContext(), nullptr);
    stack_ref.Reset(v8_isolate(), api_object);
    observer.Reset(v8_isolate(), api_object);
    observer.SetWeak();
  }
  EXPECT_FALSE(observer.IsEmpty());
  {
    // Conservative scanning may find stale pointers to on-stack handles.
    // Disable scanning, assuming the slots are overwritten.
    DisableConservativeStackScanningScopeForTesting no_stack_scanning(
        reinterpret_cast<Isolate*>(v8_isolate())->heap());
    CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  }
  EXPECT_TRUE(observer.IsEmpty());
}

TEST_F(UnifiedHeapTest, TracedReferenceOnStack) {
  ManualGCScope manual_gc(i_isolate());
  v8::Global<v8::Object> observer;
  v8::TracedReference<v8::Value> stack_ref;
  {
    v8::HandleScope scope(v8_isolate());
    v8::Local<v8::Object> object = WrapperHelper::CreateWrapper(
        v8_isolate()->GetCurrentContext(), nullptr);
    stack_ref.Reset(v8_isolate(), object);
    observer.Reset(v8_isolate(), object);
    observer.SetWeak();
  }
  EXPECT_FALSE(observer.IsEmpty());
  InvokeMajorGC();
  EXPECT_FALSE(observer.IsEmpty());
}

namespace {

enum class Operation {
  kCopy,
  kMove,
};

template <typename T>
V8_NOINLINE void PerformOperation(Operation op, T* target, T* source) {
  switch (op) {
    case Operation::kMove:
      *target = std::move(*source);
      break;
    case Operation::kCopy:
      *target = *source;
      source->Reset();
      break;
  }
}

enum class TargetHandling {
  kNonInitialized,
  kInitializedYoungGen,
  kInitializedOldGen
};

class GCedWithHeapRef final : public cppgc::GarbageCollected<GCedWithHeapRef> {
 public:
  v8::TracedReference<v8::Value> heap_handle;

  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(heap_handle); }
};

V8_NOINLINE void StackToHeapTest(v8::Isolate* v8_isolate, Operation op,
                                 TargetHandling target_handling) {
  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(v8_isolate);
  i::ManualGCScope manual_gc_scope(i_isolate);
  v8::Global<v8::Object> observer;
  v8::TracedReference<v8::Value> stack_handle;
  v8::CppHeap* cpp_heap = v8_isolate->GetCppHeap();
  cppgc::Persistent<GCedWithHeapRef> cpp_heap_obj =
      cppgc::MakeGarbageCollected<GCedWithHeapRef>(
          cpp_heap->GetAllocationHandle());
  if (target_handling != TargetHandling::kNonInitialized) {
    v8::HandleScope scope(v8_isolate);
    v8::Local<v8::Object> to_object =
        WrapperHelper::CreateWrapper(v8_isolate->GetCurrentContext(), nullptr);
    EXPECT_TRUE(IsNewObjectInCorrectGeneration(
        *v8::Utils::OpenDirectHandle(*to_object)));
    if (!v8_flags.single_generation &&
        target_handling == TargetHandling::kInitializedOldGen) {
      InvokeMajorGC(i_isolate);
      EXPECT_FALSE(
          i::Heap::InYoungGeneration(*v8::Utils::OpenDirectHandle(*to_object)));
    }
    cpp_heap_obj->heap_handle.Reset(v8_isolate, to_object);
  }
  {
    v8::HandleScope scope(v8_isolate);
    v8::Local<v8::Object> object =
        WrapperHelper::CreateWrapper(v8_isolate->GetCurrentContext(), nullptr);
    stack_handle.Reset(v8_isolate, object);
    observer.Reset(v8_isolate, object);
    observer.SetWeak();
  }
  EXPECT_FALSE(observer.IsEmpty());
  InvokeMajorGC(i_isolate);
  EXPECT_FALSE(observer.IsEmpty());
  PerformOperation(op, &cpp_heap_obj->heap_handle, &stack_handle);
  InvokeMajorGC(i_isolate);
  EXPECT_FALSE(observer.IsEmpty());
  cpp_heap_obj.Clear();
  {
    // Conservative scanning may find stale pointers to on-stack handles.
    // Disable scanning, assuming the slots are overwritten.
    DisableConservativeStackScanningScopeForTesting no_stack_scanning(
        i_isolate->heap());
    InvokeMajorGC(i_isolate);
  }
  ASSERT_TRUE(observer.IsEmpty());
}

V8_NOINLINE void HeapToStackTest(v8::Isolate* v8_isolate, Operation op,
                                 TargetHandling target_handling) {
  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(v8_isolate);
  i::ManualGCScope manual_gc_scope(i_isolate);
  v8::Global<v8::Object> observer;
  v8::TracedReference<v8::Value> stack_handle;
  v8::CppHeap* cpp_heap = v8_isolate->GetCppHeap();
  cppgc::Persistent<GCedWithHeapRef> cpp_heap_obj =
      cppgc::MakeGarbageCollected<GCedWithHeapRef>(
          cpp_heap->GetAllocationHandle());
  if (target_handling != TargetHandling::kNonInitialized) {
    v8::HandleScope scope(v8_isolate);
    v8::Local<v8::Object> to_object =
        WrapperHelper::CreateWrapper(v8_isolate->GetCurrentContext(), nullptr);
    EXPECT_TRUE(IsNewObjectInCorrectGeneration(
        *v8::Utils::OpenDirectHandle(*to_object)));
    if (!v8_flags.single_generation &&
        target_handling == TargetHandling::kInitializedOldGen) {
      InvokeMajorGC(i_isolate);
      EXPECT_FALSE(
          i::Heap::InYoungGeneration(*v8::Utils::OpenDirectHandle(*to_object)));
    }
    stack_handle.Reset(v8_isolate, to_object);
  }
  {
    v8::HandleScope scope(v8_isolate);
    v8::Local<v8::Object> object =
        WrapperHelper::CreateWrapper(v8_isolate->GetCurrentContext(), nullptr);
    cpp_heap_obj->heap_handle.Reset(v8_isolate, object);
    observer.Reset(v8_isolate, object);
    observer.SetWeak();
  }
  EXPECT_FALSE(observer.IsEmpty());
  InvokeMajorGC(i_isolate);
  EXPECT_FALSE(observer.IsEmpty());
  PerformOperation(op, &stack_handle, &cpp_heap_obj->heap_handle);
  InvokeMajorGC(i_isolate);
  EXPECT_FALSE(observer.IsEmpty());
  stack_handle.Reset();
  {
    // Conservative scanning may find stale pointers to on-stack handles.
    // Disable scanning, assuming the slots are overwritten.
    DisableConservativeStackScanningScopeForTesting no_stack_scanning(
        i_isolate->heap());
    InvokeMajorGC(i_isolate);
  }
  EXPECT_TRUE(observer.IsEmpty());
}

V8_NOINLINE void StackToStackTest(v8::Isolate* v8_isolate, Operation op,
                                  TargetHandling target_handling) {
  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(v8_isolate);
  i::ManualGCScope manual_gc_scope(i_isolate);
  v8::Global<v8::Object> observer;
  v8::TracedReference<v8::Value> stack_handle1;
  v8::TracedReference<v8::Value> stack_handle2;
  if (target_handling != TargetHandling::kNonInitialized) {
    v8::HandleScope scope(v8_isolate);
    v8::Local<v8::Object> to_object =
        WrapperHelper::CreateWrapper(v8_isolate->GetCurrentContext(), nullptr);
    EXPECT_TRUE(IsNewObjectInCorrectGeneration(
        *v8::Utils::OpenDirectHandle(*to_object)));
    if (!v8_flags.single_generation &&
        target_handling == TargetHandling::kInitializedOldGen) {
      InvokeMajorGC(i_isolate);
      EXPECT_FALSE(
          i::Heap::InYoungGeneration(*v8::Utils::OpenDirectHandle(*to_object)));
    }
    stack_handle2.Reset(v8_isolate, to_object);
  }
  {
    v8::HandleScope scope(v8_isolate);
    v8::Local<v8::Object> object =
        WrapperHelper::CreateWrapper(v8_isolate->GetCurrentContext(), nullptr);
    stack_handle1.Reset(v8_isolate, object);
    observer.Reset(v8_isolate, object);
    observer.SetWeak();
  }
  EXPECT_FALSE(observer.IsEmpty());
  InvokeMajorGC(i_isolate);
  EXPECT_FALSE(observer.IsEmpty());
  PerformOperation(op, &stack_handle2, &stack_handle1);
  InvokeMajorGC(i_isolate);
  EXPECT_FALSE(observer.IsEmpty());
  stack_handle2.Reset();
  {
    // Conservative scanning may find stale pointers to on-stack handles.
    // Disable scanning, assuming the slots are overwritten.
    DisableConservativeStackScanningScopeForTesting no_stack_scanning(
        i_isolate->heap());
    InvokeMajorGC(i_isolate);
  }
  EXPECT_TRUE(observer.IsEmpty());
}

}  // namespace

TEST_F(UnifiedHeapTest, TracedReferenceMove) {
  ManualGCScope manual_gc(i_isolate());
  StackToHeapTest(v8_isolate(), Operation::kMove,
                  TargetHandling::kNonInitialized);
  StackToHeapTest(v8_isolate(), Operation::kMove,
                  TargetHandling::kInitializedYoungGen);
  StackToHeapTest(v8_isolate(), Operation::kMove,
                  TargetHandling::kInitializedOldGen);
  HeapToStackTest(v8_isolate(), Operation::kMove,
                  TargetHandling::kNonInitialized);
  HeapToStackTest(v8_isolate(), Operation::kMove,
                  TargetHandling::kInitializedYoungGen);
  HeapToStackTest(v8_isolate(), Operation::kMove,
                  TargetHandling::kInitializedOldGen);
  StackToStackTest(v8_isolate(), Operation::kMove,
                   TargetHandling::kNonInitialized);
  StackToStackTest(v8_isolate(), Operation::kMove,
                   TargetHandling::kInitializedYoungGen);
  StackToStackTest(v8_isolate(), Operation::kMove,
                   TargetHandling::kInitializedOldGen);
}

TEST_F(UnifiedHeapTest, TracedReferenceCopy) {
  ManualGCScope manual_gc(i_isolate());
  StackToHeapTest(v8_isolate(), Operation::kCopy,
                  TargetHandling::kNonInitialized);
  StackToHeapTest(v8_isolate(), Operation::kCopy,
                  TargetHandling::kInitializedYoungGen);
  StackToHeapTest(v8_isolate(), Operation::kCopy,
                  TargetHandling::kInitializedOldGen);
  HeapToStackTest(v8_isolate(), Operation::kCopy,
                  TargetHandling::kNonInitialized);
  HeapToStackTest(v8_isolate(), Operation::kCopy,
                  TargetHandling::kInitializedYoungGen);
  HeapToStackTest(v8_isolate(), Operation::kCopy,
                  TargetHandling::kInitializedOldGen);
  StackToStackTest(v8_isolate(), Operation::kCopy,
                   TargetHandling::kNonInitialized);
  StackToStackTest(v8_isolate(), Operation::kCopy,
                   TargetHandling::kInitializedYoungGen);
  StackToStackTest(v8_isolate(), Operation::kCopy,
                   TargetHandling::kInitializedOldGen);
}

TEST_F(UnifiedHeapTest, TracingInEphemerons) {
  // Tests that wrappers that are part of ephemerons are traced.
  ManualGCScope manual_gc(i_isolate());

  Wrappable::destructor_callcount = 0;

  v8::Local<v8::Object> key =
      v8::Local<v8::Object>::New(v8_isolate(), v8::Object::New(v8_isolate()));
  DirectHandle<JSWeakMap> weak_map = i_isolate()->factory()->NewJSWeakMap();
  {
    v8::HandleScope inner_scope(v8_isolate());
    // C++ object that should be traced through ephemeron value.
    auto* wrappable_object =
        cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
    v8::Local<v8::Object> value = WrapperHelper::CreateWrapper(
        v8_isolate()->GetCurrentContext(), wrappable_object);
    EXPECT_FALSE(value.IsEmpty());
    Handle<JSObject> js_key =
        handle(Cast<JSObject>(*v8::Utils::OpenDirectHandle(*key)), i_isolate());
    DirectHandle<JSReceiver> js_value = v8::Utils::OpenDirectHandle(*value);
    int32_t hash = Object::GetOrCreateHash(*js_key, i_isolate()).value();
    JSWeakCollection::Set(weak_map, js_key, js_value, hash);
  }
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(Wrappable::destructor_callcount, 0u);
}

TEST_F(UnifiedHeapTest, TracedReferenceHandlesDoNotLeak) {
  // TracedReference handles are not cleared by the destructor of the embedder
  // object. To avoid leaks we need to mark these handles during GC.
  // This test checks that unmarked handles do not leak.
  ManualGCScope manual_gc(i_isolate());
  v8::TracedReference<v8::Value> ref;
  ref.Reset(v8_isolate(), v8::Undefined(v8_isolate()));
  auto* traced_handles = i_isolate()->traced_handles();
  const size_t initial_count = traced_handles->used_node_count();
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  const size_t final_count = traced_handles->used_node_count();
  EXPECT_EQ(initial_count, final_count + 1);
}

namespace {
class Wrappable2 final : public cppgc::GarbageCollected<Wrappable2> {
 public:
  static size_t destructor_call_count;
  void Trace(cppgc::Visitor* visitor) const {}
  ~Wrappable2() { destructor_call_count++; }
};

size_t Wrappable2::destructor_call_count = 0;
}  // namespace

namespace {
class WrappedData final : public cppgc::GarbageCollected<WrappedData> {
 public:
  WrappedData(v8::Isolate* isolate, v8::Local<v8::Private> data) {
    data_.Reset(isolate, data);
  }

  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(data_); }

  v8::Local<v8::Private> data(v8::Isolate* isolate) {
    return data_.Get(isolate);
  }

 private:
  TracedReference<v8::Private> data_;
};
}  // namespace

TEST_F(UnifiedHeapTest, WrapperWithTracedReferenceData) {
  v8::Isolate* isolate = v8_isolate();

  cppgc::Persistent<WrappedData> live_wrap;
  {
    live_wrap = cppgc::MakeGarbageCollected<WrappedData>(
        allocation_handle(), isolate,
        v8::Private::New(isolate,
                         v8::String::NewFromUtf8Literal(isolate, "test")));
  }
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  {
    v8::Local<v8::Value> name = live_wrap.Get()->data(isolate)->Name();
    CHECK(name->IsString());
    CHECK(name.As<v8::String>()->StringEquals(
        v8::String::NewFromUtf8Literal(isolate, "test")));
  }
}

TEST_F(UnifiedHeapTest, CppgcSweepingDuringMinorV8Sweeping) {
  if (!v8_flags.minor_ms) return;
  if (v8_flags.single_generation) return;
  // Heap verification finalizes sweeping in the atomic pause.
  if (v8_flags.verify_heap) return;
  bool single_threaded_gc_flag = v8_flags.single_threaded_gc;
  // Single threaded gc force non-concurrent sweeping in cppgc, which makes
  // CppHeap bail out of `FinishSweepingIfOutOfWork`.
  v8_flags.single_threaded_gc = true;
  ManualGCScope manual_gc(isolate());
  Heap* heap = isolate()->heap();
  CppHeap* cppheap = CppHeap::From(heap->cpp_heap());
  cppheap->UpdateGCCapabilitiesFromFlagsForTesting();
  CHECK_NOT_NULL(heap->cpp_heap());
  heap->CollectGarbage(AllocationSpace::OLD_SPACE,
                       GarbageCollectionReason::kTesting,
                       GCCallbackFlags::kNoGCCallbackFlags);
  CHECK(heap->sweeping_in_progress());
  CHECK(cppheap->sweeper().IsSweepingInProgress());
  heap->EnsureSweepingCompleted(Heap::SweepingForcedFinalizationMode::kV8Only);
  CHECK(!heap->sweeping_in_progress());
  CHECK(cppheap->sweeper().IsSweepingInProgress());
  heap->CollectGarbage(AllocationSpace::NEW_SPACE,
                       GarbageCollectionReason::kTesting,
                       GCCallbackFlags::kNoGCCallbackFlags);
  CHECK(!heap->major_sweeping_in_progress());
  CHECK(heap->minor_sweeping_in_progress());
  CHECK(cppheap->sweeper().IsSweepingInProgress());
  cppheap->sweeper().FinishIfRunning();
  CHECK(!heap->major_sweeping_in_progress());
  CHECK(heap->minor_sweeping_in_progress());
  CHECK(!cppheap->sweeper().IsSweepingInProgress());
  heap->EnsureSweepingCompleted(
      Heap::SweepingForcedFinalizationMode::kUnifiedHeap);
  v8_flags.single_threaded_gc = single_threaded_gc_flag;
}

#ifdef V8_ENABLE_ALLOCATION_TIMEOUT
struct RandomGCIntervalTestSetter {
  RandomGCIntervalTestSetter() {
    static constexpr int kInterval = 87;
    v8_flags.cppgc_random_gc_interval = kInterval;
  }
  ~RandomGCIntervalTestSetter() { v8_flags.cppgc_random_gc_interval = 0; }
};

struct UnifiedHeapTestWithRandomGCInterval : RandomGCIntervalTestSetter,
                                             UnifiedHeapTest {};

TEST_F(UnifiedHeapTestWithRandomGCInterval, AllocationTimeout) {
  if (v8_flags.stress_incremental_marking) return;
  if (v8_flags.stress_concurrent_allocation) return;
  auto& cpp_heap = *CppHeap::From(isolate()->heap()->cpp_heap());
  auto& allocator = cpp_heap.object_allocator();
  const int initial_allocation_timeout =
      allocator.get_allocation_timeout_for_testing();
  ASSERT_GT(initial_allocation_timeout, 0);
  const auto current_epoch = isolate()->heap()->tracer()->CurrentEpoch(
      GCTracer::Scope::MARK_COMPACTOR);
  for (int i = 0; i < initial_allocation_timeout - 1; ++i) {
    MakeGarbageCollected<Wrappable>(allocation_handle());
  }
  // Expect no GC happened so far.
  EXPECT_EQ(current_epoch, isolate()->heap()->tracer()->CurrentEpoch(
                               GCTracer::Scope::MARK_COMPACTOR));
  // This allocation must cause a GC.
  MakeGarbageCollected<Wrappable>(allocation_handle());
  EXPECT_EQ(current_epoch + 1, isolate()->heap()->tracer()->CurrentEpoch(
                                   GCTracer::Scope::MARK_COMPACTOR));
}
#endif  // V8_ENABLE_ALLOCATION_TIMEOUT

}  // namespace v8::internal
                                                                                                                                          node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/unified-heap-utils.cc                              0000664 0000000 0000000 00000012253 14746647661 0025517 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "test/unittests/heap/cppgc-js/unified-heap-utils.h"

#include "include/cppgc/platform.h"
#include "include/v8-cppgc.h"
#include "include/v8-function.h"
#include "src/api/api-inl.h"
#include "src/heap/cppgc-js/cpp-heap.h"
#include "src/heap/heap.h"
#include "src/objects/js-objects.h"
#include "src/objects/objects-inl.h"
#include "test/unittests/heap/heap-utils.h"

namespace v8 {
namespace internal {

UnifiedHeapTest::UnifiedHeapTest()
    : UnifiedHeapTest(std::vector<std::unique_ptr<cppgc::CustomSpaceBase>>()) {}

UnifiedHeapTest::UnifiedHeapTest(
    std::vector<std::unique_ptr<cppgc::CustomSpaceBase>> custom_spaces)
    : cpp_heap_(
          v8::CppHeap::Create(V8::GetCurrentPlatform(),
                              CppHeapCreateParams{std::move(custom_spaces)})) {
  // --stress-incremental-marking may have started an incremental GC at this
  // point already.
  InvokeAtomicMajorGC();
  isolate()->heap()->AttachCppHeap(cpp_heap_.get());
}

void UnifiedHeapTest::CollectGarbageWithEmbedderStack(
    cppgc::Heap::SweepingType sweeping_type) {
  EmbedderStackStateScope stack_scope(
      heap(), EmbedderStackStateOrigin::kExplicitInvocation,
      StackState::kMayContainHeapPointers);
  InvokeMajorGC();
  if (sweeping_type == cppgc::Heap::SweepingType::kAtomic) {
    cpp_heap().AsBase().sweeper().FinishIfRunning();
  }
}

void UnifiedHeapTest::CollectGarbageWithoutEmbedderStack(
    cppgc::Heap::SweepingType sweeping_type) {
  EmbedderStackStateScope stack_scope(
      heap(), EmbedderStackStateOrigin::kExplicitInvocation,
      StackState::kNoHeapPointers);
  InvokeMajorGC();
  if (sweeping_type == cppgc::Heap::SweepingType::kAtomic) {
    cpp_heap().AsBase().sweeper().FinishIfRunning();
  }
}

void UnifiedHeapTest::CollectYoungGarbageWithEmbedderStack(
    cppgc::Heap::SweepingType sweeping_type) {
  EmbedderStackStateScope stack_scope(
      heap(), EmbedderStackStateOrigin::kExplicitInvocation,
      StackState::kMayContainHeapPointers);
  InvokeMinorGC();
  if (sweeping_type == cppgc::Heap::SweepingType::kAtomic) {
    cpp_heap().AsBase().sweeper().FinishIfRunning();
  }
}
void UnifiedHeapTest::CollectYoungGarbageWithoutEmbedderStack(
    cppgc::Heap::SweepingType sweeping_type) {
  EmbedderStackStateScope stack_scope(
      heap(), EmbedderStackStateOrigin::kExplicitInvocation,
      StackState::kNoHeapPointers);
  InvokeMinorGC();
  if (sweeping_type == cppgc::Heap::SweepingType::kAtomic) {
    cpp_heap().AsBase().sweeper().FinishIfRunning();
  }
}

CppHeap& UnifiedHeapTest::cpp_heap() const {
  return *CppHeap::From(isolate()->heap()->cpp_heap());
}

cppgc::AllocationHandle& UnifiedHeapTest::allocation_handle() {
  return cpp_heap().object_allocator();
}

// static
v8::Local<v8::Object> WrapperHelper::CreateWrapper(
    v8::Local<v8::Context> context, void* wrappable_object,
    const char* class_name) {
  v8::EscapableHandleScope scope(context->GetIsolate());
  v8::Local<v8::FunctionTemplate> function_t =
      v8::FunctionTemplate::New(context->GetIsolate());
  if (class_name && strlen(class_name) != 0) {
    function_t->SetClassName(
        v8::String::NewFromUtf8(v8::Isolate::GetCurrent(), class_name)
            .ToLocalChecked());
  }
  v8::Local<v8::Function> function =
      function_t->GetFunction(context).ToLocalChecked();
  v8::Local<v8::Object> instance =
      function->NewInstance(context).ToLocalChecked();
  SetWrappableConnection(context->GetIsolate(), instance, wrappable_object);
  CHECK(!instance.IsEmpty());
  CHECK_EQ(wrappable_object,
           ReadWrappablePointer(context->GetIsolate(), instance));
  i::DirectHandle<i::JSReceiver> js_obj =
      v8::Utils::OpenDirectHandle(*instance);
  CHECK_EQ(i::JS_API_OBJECT_TYPE, js_obj->map()->instance_type());
  return scope.Escape(instance);
}

// static
void WrapperHelper::ResetWrappableConnection(v8::Isolate* isolate,
                                             v8::Local<v8::Object> api_object) {
  i::DirectHandle<i::JSReceiver> js_obj =
      v8::Utils::OpenDirectHandle(*api_object);
  JSApiWrapper(Cast<JSObject>(*js_obj))
      .SetCppHeapWrappable<CppHeapPointerTag::kDefaultTag>(
          reinterpret_cast<i::Isolate*>(isolate), nullptr);
}

// static
void WrapperHelper::SetWrappableConnection(v8::Isolate* isolate,
                                           v8::Local<v8::Object> api_object,
                                           void* instance) {
  i::DirectHandle<i::JSReceiver> js_obj =
      v8::Utils::OpenDirectHandle(*api_object);
  JSApiWrapper(Cast<JSObject>(*js_obj))
      .SetCppHeapWrappable<CppHeapPointerTag::kDefaultTag>(
          reinterpret_cast<i::Isolate*>(isolate), instance);
}

// static
void* WrapperHelper::ReadWrappablePointer(v8::Isolate* isolate,
                                          v8::Local<v8::Object> api_object) {
  i::DirectHandle<i::JSReceiver> js_obj =
      v8::Utils::OpenDirectHandle(*api_object);
  return JSApiWrapper(Cast<JSObject>(*js_obj))
      .GetCppHeapWrappable(reinterpret_cast<i::Isolate*>(isolate),
                           kAnyCppHeapPointer);
}

}  // namespace internal
}  // namespace v8
                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/unified-heap-utils.h                               0000664 0000000 0000000 00000005664 14746647661 0025371 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef V8_UNITTESTS_HEAP_CPPGC_JS_UNIFIED_HEAP_UTILS_H_
#define V8_UNITTESTS_HEAP_CPPGC_JS_UNIFIED_HEAP_UTILS_H_

#include "include/cppgc/heap.h"
#include "include/v8-cppgc.h"
#include "include/v8-local-handle.h"
#include "src/objects/js-objects.h"
#include "test/unittests/heap/heap-utils.h"

namespace v8 {

class CppHeap;

namespace internal {

class CppHeap;

class UnifiedHeapTest : public TestWithHeapInternalsAndContext {
 public:
  UnifiedHeapTest();
  explicit UnifiedHeapTest(
      std::vector<std::unique_ptr<cppgc::CustomSpaceBase>>);
  ~UnifiedHeapTest() override = default;

  void CollectGarbageWithEmbedderStack(cppgc::Heap::SweepingType sweeping_type =
                                           cppgc::Heap::SweepingType::kAtomic);
  void CollectGarbageWithoutEmbedderStack(
      cppgc::Heap::SweepingType sweeping_type =
          cppgc::Heap::SweepingType::kAtomic);

  void CollectYoungGarbageWithEmbedderStack(
      cppgc::Heap::SweepingType sweeping_type =
          cppgc::Heap::SweepingType::kAtomic);
  void CollectYoungGarbageWithoutEmbedderStack(
      cppgc::Heap::SweepingType sweeping_type =
          cppgc::Heap::SweepingType::kAtomic);

  CppHeap& cpp_heap() const;
  cppgc::AllocationHandle& allocation_handle();

 private:
  std::unique_ptr<v8::CppHeap> cpp_heap_;
};

// Helpers for managed wrappers using a single header field.
class WrapperHelper {
 public:
  // Sets up a V8 API object so that it points back to a C++ object. The setup
  // used is recognized by the GC and references will be followed for liveness
  // analysis (marking) as well as tooling (snapshot).
  static v8::Local<v8::Object> CreateWrapper(v8::Local<v8::Context> context,
                                             void* wrappable_object,
                                             const char* class_name = nullptr);

  // Resets the connection of a wrapper (JS) to its wrappable (C++), meaning
  // that the wrappable object is not longer kept alive by the wrapper object.
  static void ResetWrappableConnection(v8::Isolate* isolate,
                                       v8::Local<v8::Object> api_object);

  // Sets up the connection of a wrapper (JS) to its wrappable (C++). Does not
  // emit any possibly needed write barrier.
  static void SetWrappableConnection(v8::Isolate* isolate,
                                     v8::Local<v8::Object> api_object, void*);

  template <typename T>
  static T* UnwrapAs(v8::Isolate* isolate, v8::Local<v8::Object> api_object) {
    return reinterpret_cast<T*>(ReadWrappablePointer(isolate, api_object));
  }

 private:
  static void* ReadWrappablePointer(v8::Isolate* isolate,
                                    v8::Local<v8::Object> api_object);
};

}  // namespace internal
}  // namespace v8

#endif  // V8_UNITTESTS_HEAP_CPPGC_JS_UNIFIED_HEAP_UTILS_H_
                                                                            node-23.7.0/deps/v8/test/unittests/heap/cppgc-js/young-unified-heap-unittest.cc                     0000664 0000000 0000000 00000031437 14746647661 0027402 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(CPPGC_YOUNG_GENERATION)

#include <algorithm>
#include <memory>
#include <vector>

#include "include/cppgc/allocation.h"
#include "include/cppgc/garbage-collected.h"
#include "include/cppgc/persistent.h"
#include "include/cppgc/testing.h"
#include "include/v8-context.h"
#include "include/v8-cppgc.h"
#include "include/v8-local-handle.h"
#include "include/v8-object.h"
#include "include/v8-traced-handle.h"
#include "src/api/api-inl.h"
#include "src/common/globals.h"
#include "src/heap/cppgc-js/cpp-heap.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/objects/objects-inl.h"
#include "test/common/flag-utils.h"
#include "test/unittests/heap/cppgc-js/unified-heap-utils.h"
#include "test/unittests/heap/heap-utils.h"

namespace v8 {
namespace internal {

namespace {

bool IsHeapObjectYoung(void* obj) {
  return cppgc::internal::HeapObjectHeader::FromObject(obj).IsYoung();
}

bool IsHeapObjectOld(void* obj) { return !IsHeapObjectYoung(obj); }

class Wrappable final : public cppgc::GarbageCollected<Wrappable> {
 public:
  static size_t destructor_callcount;

  Wrappable() = default;
  Wrappable(v8::Isolate* isolate, v8::Local<v8::Object> local)
      : wrapper_(isolate, local) {}

  Wrappable(const Wrappable&) = default;
  Wrappable(Wrappable&&) = default;

  Wrappable& operator=(const Wrappable&) = default;
  Wrappable& operator=(Wrappable&&) = default;

  ~Wrappable() { destructor_callcount++; }

  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(wrapper_); }

  void SetWrapper(v8::Isolate* isolate, v8::Local<v8::Object> wrapper) {
    wrapper_.Reset(isolate, wrapper);
  }

  TracedReference<v8::Object>& wrapper() { return wrapper_; }

 private:
  TracedReference<v8::Object> wrapper_;
};

size_t Wrappable::destructor_callcount = 0;

class MinorMSEnabler {
 public:
  MinorMSEnabler()
      : minor_ms_(&v8_flags.minor_ms, true),
        cppgc_young_generation_(&v8_flags.cppgc_young_generation, true) {}

 private:
  FlagScope<bool> minor_ms_;
  FlagScope<bool> cppgc_young_generation_;
};

class YoungWrapperCollector : public RootVisitor {
 public:
  using YoungWrappers = std::set<Address>;

  void VisitRootPointers(Root root, const char*, FullObjectSlot start,
                         FullObjectSlot end) override {
    for (FullObjectSlot p = start; p < end; ++p) {
      all_young_wrappers_.insert(*p.location());
    }
  }

  YoungWrappers get_wrappers() { return std::move(all_young_wrappers_); }

 private:
  YoungWrappers all_young_wrappers_;
};

class ExpectCppGCToV8GenerationalBarrierToFire {
 public:
  ExpectCppGCToV8GenerationalBarrierToFire(
      v8::Isolate& isolate, std::initializer_list<Address> expected_wrappers)
      : isolate_(reinterpret_cast<Isolate&>(isolate)),
        expected_wrappers_(expected_wrappers) {
    YoungWrapperCollector visitor;
    isolate_.traced_handles()->IterateYoungRootsWithOldHostsForTesting(
        &visitor);
    young_wrappers_before_ = visitor.get_wrappers();

    std::vector<Address> diff;
    std::set_intersection(young_wrappers_before_.begin(),
                          young_wrappers_before_.end(),
                          expected_wrappers_.begin(), expected_wrappers_.end(),
                          std::back_inserter(diff));
    EXPECT_TRUE(diff.empty());
  }

  ~ExpectCppGCToV8GenerationalBarrierToFire() {
    YoungWrapperCollector visitor;
    isolate_.traced_handles()->IterateYoungRootsWithOldHostsForTesting(
        &visitor);
    const auto young_wrappers_after = visitor.get_wrappers();
    EXPECT_GE(young_wrappers_after.size(), young_wrappers_before_.size());

    EXPECT_TRUE(
        std::includes(young_wrappers_after.begin(), young_wrappers_after.end(),
                      expected_wrappers_.begin(), expected_wrappers_.end()));
    EXPECT_EQ(expected_wrappers_.size(),
              young_wrappers_after.size() - young_wrappers_before_.size());
  }

 private:
  Isolate& isolate_;
  YoungWrapperCollector::YoungWrappers expected_wrappers_;
  YoungWrapperCollector::YoungWrappers young_wrappers_before_;
};

class ExpectCppGCToV8NoGenerationalBarrier {
 public:
  explicit ExpectCppGCToV8NoGenerationalBarrier(v8::Isolate& isolate)
      : isolate_(reinterpret_cast<Isolate&>(isolate)) {
    YoungWrapperCollector visitor;
    isolate_.traced_handles()->IterateYoungRootsWithOldHostsForTesting(
        &visitor);
    young_wrappers_before_ = visitor.get_wrappers();
  }

  ~ExpectCppGCToV8NoGenerationalBarrier() {
    YoungWrapperCollector visitor;
    isolate_.traced_handles()->IterateYoungRootsWithOldHostsForTesting(
        &visitor);
    const auto young_wrappers_after = visitor.get_wrappers();
    EXPECT_EQ(young_wrappers_before_, young_wrappers_after);
  }

 private:
  Isolate& isolate_;
  YoungWrapperCollector::YoungWrappers young_wrappers_before_;
};

}  // namespace

class YoungUnifiedHeapTest : public MinorMSEnabler, public UnifiedHeapTest {
 public:
  YoungUnifiedHeapTest() {
    // Enable young generation flag and run GC. After the first run the heap
    // will enable minor GC.
    CollectGarbageWithoutEmbedderStack();
  }
};

TEST_F(YoungUnifiedHeapTest, OnlyGC) { CollectYoungGarbageWithEmbedderStack(); }

TEST_F(YoungUnifiedHeapTest, CollectUnreachableCppGCObject) {
  cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
  v8::Local<v8::Object> api_object =
      WrapperHelper::CreateWrapper(context(), nullptr);
  EXPECT_FALSE(api_object.IsEmpty());

  Wrappable::destructor_callcount = 0;
  CollectYoungGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(1u, Wrappable::destructor_callcount);
}

TEST_F(YoungUnifiedHeapTest, FindingV8ToCppGCReference) {
  auto* wrappable_object =
      cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
  v8::Local<v8::Object> api_object =
      WrapperHelper::CreateWrapper(context(), wrappable_object);
  EXPECT_FALSE(api_object.IsEmpty());
  // With direct locals, api_object may be invalid after a stackless GC.
  auto handle_api_object = v8::Utils::OpenIndirectHandle(*api_object);

  Wrappable::destructor_callcount = 0;
  CollectYoungGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(0u, Wrappable::destructor_callcount);

  WrapperHelper::ResetWrappableConnection(
      v8_isolate(), v8::Utils::ToLocal(handle_api_object));
  CollectGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(1u, Wrappable::destructor_callcount);
}

TEST_F(YoungUnifiedHeapTest, FindingCppGCToV8Reference) {
  auto* wrappable_object =
      cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());

  {
    v8::HandleScope inner_handle_scope(v8_isolate());
    auto local = v8::Object::New(v8_isolate());
    EXPECT_TRUE(local->IsObject());
    wrappable_object->SetWrapper(v8_isolate(), local);
  }

  CollectYoungGarbageWithEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  auto local = wrappable_object->wrapper().Get(v8_isolate());
  EXPECT_TRUE(local->IsObject());
}

TEST_F(YoungUnifiedHeapTest, GenerationalBarrierV8ToCppGCReference) {
  if (i::v8_flags.single_generation) return;

  FlagScope<bool> no_incremental_marking(&v8_flags.incremental_marking, false);

  v8::Local<v8::Object> api_object =
      WrapperHelper::CreateWrapper(context(), nullptr);
  // With direct locals, api_object may be invalid after a stackless GC.
  auto handle_api_object = v8::Utils::OpenIndirectHandle(*api_object);

  EXPECT_TRUE(Heap::InYoungGeneration(*handle_api_object));
  InvokeMemoryReducingMajorGCs();
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
  EXPECT_FALSE(Heap::InYoungGeneration(*handle_api_object));

  auto* wrappable = cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
  WrapperHelper::SetWrappableConnection(
      v8_isolate(), v8::Utils::ToLocal(handle_api_object), wrappable);

  Wrappable::destructor_callcount = 0;
  CollectYoungGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
}

TEST_F(YoungUnifiedHeapTest,
       GenerationalBarrierCppGCToV8NoInitializingStoreBarrier) {
  if (i::v8_flags.single_generation) return;

  FlagScope<bool> no_incremental_marking(&v8_flags.incremental_marking, false);

  auto local = v8::Object::New(v8_isolate());
  {
    ExpectCppGCToV8NoGenerationalBarrier expect_no_barrier(*v8_isolate());
    auto* wrappable = cppgc::MakeGarbageCollected<Wrappable>(
        allocation_handle(), v8_isolate(), local);
    auto* copied_wrappable =
        cppgc::MakeGarbageCollected<Wrappable>(allocation_handle(), *wrappable);
    auto* moved_wrappable = cppgc::MakeGarbageCollected<Wrappable>(
        allocation_handle(), std::move(*wrappable));
    USE(moved_wrappable);
    USE(copied_wrappable);
    USE(wrappable);
  }
}

TEST_F(YoungUnifiedHeapTest, GenerationalBarrierCppGCToV8ReferenceReset) {
  if (i::v8_flags.single_generation) return;

  FlagScope<bool> no_incremental_marking(&v8_flags.incremental_marking, false);

  cppgc::Persistent<Wrappable> wrappable_object =
      cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());

  EXPECT_TRUE(IsHeapObjectYoung(wrappable_object.Get()));
  InvokeMemoryReducingMajorGCs();
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
  EXPECT_TRUE(IsHeapObjectOld(wrappable_object.Get()));

  {
    v8::HandleScope inner_handle_scope(v8_isolate());
    auto local = v8::Object::New(v8_isolate());
    EXPECT_TRUE(local->IsObject());
    {
      ExpectCppGCToV8GenerationalBarrierToFire expect_barrier(
          *v8_isolate(), {i::ValueHelper::ValueAsAddress(*local)});
      wrappable_object->SetWrapper(v8_isolate(), local);
    }
  }

  CollectYoungGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  auto local = wrappable_object->wrapper().Get(v8_isolate());
  EXPECT_TRUE(local->IsObject());
}

TEST_F(YoungUnifiedHeapTest, GenerationalBarrierCppGCToV8ReferenceCopy) {
  if (i::v8_flags.single_generation) return;

  FlagScope<bool> no_incremental_marking(&v8_flags.incremental_marking, false);

  cppgc::Persistent<Wrappable> wrappable_object =
      cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());

  EXPECT_TRUE(IsHeapObjectYoung(wrappable_object.Get()));
  InvokeMemoryReducingMajorGCs();
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
  EXPECT_TRUE(IsHeapObjectOld(wrappable_object.Get()));

  {
    v8::HandleScope inner_handle_scope(v8_isolate());
    auto local = v8::Object::New(v8_isolate());
    EXPECT_TRUE(local->IsObject());

    Wrappable* another_wrappable_object = nullptr;
    {
      // Assign to young host and expect no barrier.
      ExpectCppGCToV8NoGenerationalBarrier expect_no_barrier(*v8_isolate());
      another_wrappable_object =
          cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
      another_wrappable_object->SetWrapper(v8_isolate(), local);
    }
    {
      // Assign to old object using TracedReference::operator= and expect
      // the barrier to trigger.
      ExpectCppGCToV8GenerationalBarrierToFire expect_barrier(
          *v8_isolate(), {i::ValueHelper::ValueAsAddress(*local)});
      *wrappable_object = *another_wrappable_object;
    }
  }

  CollectYoungGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  auto local = wrappable_object->wrapper().Get(v8_isolate());
  EXPECT_TRUE(local->IsObject());
}

TEST_F(YoungUnifiedHeapTest, GenerationalBarrierCppGCToV8ReferenceMove) {
  if (i::v8_flags.single_generation) return;

  FlagScope<bool> no_incremental_marking(&v8_flags.incremental_marking, false);

  cppgc::Persistent<Wrappable> wrappable_object =
      cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());

  EXPECT_TRUE(IsHeapObjectYoung(wrappable_object.Get()));
  InvokeMemoryReducingMajorGCs();
  EXPECT_EQ(0u, Wrappable::destructor_callcount);
  EXPECT_TRUE(IsHeapObjectOld(wrappable_object.Get()));

  {
    v8::HandleScope inner_handle_scope(v8_isolate());
    auto local = v8::Object::New(v8_isolate());
    EXPECT_TRUE(local->IsObject());

    Wrappable* another_wrappable_object = nullptr;
    {
      // Assign to young host and expect no barrier.
      ExpectCppGCToV8NoGenerationalBarrier expect_no_barrier(*v8_isolate());
      another_wrappable_object =
          cppgc::MakeGarbageCollected<Wrappable>(allocation_handle());
      another_wrappable_object->SetWrapper(v8_isolate(), local);
    }
    {
      // Assign to old object using TracedReference::operator= and expect
      // the barrier to trigger.
      ExpectCppGCToV8GenerationalBarrierToFire expect_barrier(
          *v8_isolate(), {i::ValueHelper::ValueAsAddress(*local)});
      *wrappable_object = std::move(*another_wrappable_object);
    }
  }

  CollectYoungGarbageWithoutEmbedderStack(cppgc::Heap::SweepingType::kAtomic);
  auto local = wrappable_object->wrapper().Get(v8_isolate());
  EXPECT_TRUE(local->IsObject());
}

}  // namespace internal
}  // namespace v8

#endif  // defined(CPPGC_YOUNG_GENERATION)
                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/unittests/heap/cppgc/                                                      0000775 0000000 0000000 00000000000 14746647661 0021077 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/test/unittests/heap/cppgc/age-table-unittest.cc                                 0000664 0000000 0000000 00000022277 14746647661 0025116 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <memory>
#include <vector>

#include "include/cppgc/internal/caged-heap-local-data.h"
#include "include/cppgc/internal/caged-heap.h"
#include "src/base/logging.h"
#include "src/heap/cppgc/heap-page.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc::internal {

namespace {

class AgeTableTest : public testing::TestSupportingAllocationOnly {
 public:
  using Age = AgeTable::Age;
  using AdjacentCardsPolicy = AgeTable::AdjacentCardsPolicy;
  static constexpr auto kCardSizeInBytes = AgeTable::kCardSizeInBytes;

  AgeTableTest() : age_table_(CagedHeapLocalData::Get().age_table) {
    CagedHeap::CommitAgeTable(*(GetPlatform().GetPageAllocator()));
  }

  ~AgeTableTest() override { age_table_.ResetForTesting(); }

  NormalPage* AllocateNormalPage() {
    RawHeap& heap = Heap::From(GetHeap())->raw_heap();
    auto* space = static_cast<NormalPageSpace*>(
        heap.Space(RawHeap::RegularSpaceType::kNormal1));
    auto* page =
        NormalPage::TryCreate(*Heap::From(GetHeap())->page_backend(), *space);
    CHECK_NOT_NULL(page);
    allocated_pages_.push_back({page, DestroyPage});
    return page;
  }

  LargePage* AllocateLargePage() {
    constexpr size_t kObjectSize = 2 * kLargeObjectSizeThreshold;
    RawHeap& heap = Heap::From(GetHeap())->raw_heap();
    auto* space = static_cast<LargePageSpace*>(
        heap.Space(RawHeap::RegularSpaceType::kLarge));
    auto* page = LargePage::TryCreate(*Heap::From(GetHeap())->page_backend(),
                                      *space, kObjectSize);
    CHECK_NOT_NULL(page);
    allocated_pages_.push_back({page, DestroyPage});
    return page;
  }

  void SetAgeForAddressRange(void* begin, void* end, Age age,
                             AdjacentCardsPolicy adjacent_cards_policy) {
    age_table_.SetAgeForRange(CagedHeap::OffsetFromAddress(begin),
                              CagedHeap::OffsetFromAddress(end), age,
                              adjacent_cards_policy);
  }

  Age GetAge(void* ptr) const {
    return age_table_.GetAge(CagedHeap::OffsetFromAddress(ptr));
  }

  void SetAge(void* ptr, Age age) {
    age_table_.SetAge(CagedHeap::OffsetFromAddress(ptr), age);
  }

  void AssertAgeForAddressRange(void* begin, void* end, Age age) {
    const uintptr_t offset_begin = CagedHeap::OffsetFromAddress(begin);
    const uintptr_t offset_end = CagedHeap::OffsetFromAddress(end);
    for (auto offset = RoundDown(offset_begin, kCardSizeInBytes);
         offset < RoundUp(offset_end, kCardSizeInBytes);
         offset += kCardSizeInBytes)
      EXPECT_EQ(age, age_table_.GetAge(offset));
  }

 private:
  static void DestroyPage(BasePage* page) {
    BasePage::Destroy(page, FreeMemoryHandling::kDoNotDiscard);
  }

  std::vector<std::unique_ptr<BasePage, void (*)(BasePage*)>> allocated_pages_;
  AgeTable& age_table_;
};

}  // namespace

TEST_F(AgeTableTest, SetAgeForNormalPage) {
  auto* page = AllocateNormalPage();
  // By default, everything is old.
  AssertAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(), Age::kOld);
  // Set age for the entire page.
  SetAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(), Age::kYoung,
                        AdjacentCardsPolicy::kIgnore);
  // Check that all cards have been set as young.
  AssertAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(),
                           Age::kYoung);
}

TEST_F(AgeTableTest, SetAgeForLargePage) {
  auto* page = AllocateLargePage();
  // By default, everything is old.
  AssertAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(), Age::kOld);
  // Set age for the entire page.
  SetAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(), Age::kYoung,
                        AdjacentCardsPolicy::kIgnore);
  // Check that all cards have been set as young.
  AssertAgeForAddressRange(page->PayloadStart(), page->PayloadEnd(),
                           Age::kYoung);
}

TEST_F(AgeTableTest, SetAgeForSingleCardWithUnalignedAddresses) {
  auto* page = AllocateNormalPage();
  Address object_begin = reinterpret_cast<Address>(
      RoundUp(reinterpret_cast<uintptr_t>(page->PayloadStart()),
              kCardSizeInBytes) +
      1);
  Address object_end = object_begin + kCardSizeInBytes / 2;
  EXPECT_EQ(Age::kOld, GetAge(object_begin));
  // Try mark the card as young. This will mark the card as kMixed, since the
  // card was previously marked as old.
  SetAgeForAddressRange(object_begin, object_end, Age::kYoung,
                        AdjacentCardsPolicy::kConsider);
  EXPECT_EQ(Age::kMixed, GetAge(object_begin));
  SetAge(object_begin, Age::kOld);
  // Try mark as old, but ignore ages of outer cards.
  SetAgeForAddressRange(object_begin, object_end, Age::kYoung,
                        AdjacentCardsPolicy::kIgnore);
  EXPECT_EQ(Age::kYoung, GetAge(object_begin));
}

TEST_F(AgeTableTest, SetAgeForSingleCardWithAlignedAddresses) {
  auto* page = AllocateNormalPage();
  Address object_begin = reinterpret_cast<Address>(RoundUp(
      reinterpret_cast<uintptr_t>(page->PayloadStart()), kCardSizeInBytes));
  Address object_end = object_begin + kCardSizeInBytes;
  EXPECT_EQ(Age::kOld, GetAge(object_begin));
  EXPECT_EQ(Age::kOld, GetAge(object_end));
  // Try mark the card as young. This will mark the entire card as kYoung, since
  // it's aligned.
  SetAgeForAddressRange(object_begin, object_end, Age::kYoung,
                        AdjacentCardsPolicy::kConsider);
  EXPECT_EQ(Age::kYoung, GetAge(object_begin));
  // The end card should not be touched.
  EXPECT_EQ(Age::kOld, GetAge(object_end));
}

TEST_F(AgeTableTest, SetAgeForSingleCardWithAlignedBeginButUnalignedEnd) {
  auto* page = AllocateNormalPage();
  Address object_begin = reinterpret_cast<Address>(RoundUp(
      reinterpret_cast<uintptr_t>(page->PayloadStart()), kCardSizeInBytes));
  Address object_end = object_begin + kCardSizeInBytes + 1;
  EXPECT_EQ(Age::kOld, GetAge(object_begin));
  EXPECT_EQ(Age::kOld, GetAge(object_end));
  // Try mark the card as young. This will mark the entire card as kYoung, since
  // it's aligned.
  SetAgeForAddressRange(object_begin, object_end, Age::kYoung,
                        AdjacentCardsPolicy::kConsider);
  EXPECT_EQ(Age::kYoung, GetAge(object_begin));
  // The end card should be marked as mixed.
  EXPECT_EQ(Age::kMixed, GetAge(object_end));
}

TEST_F(AgeTableTest, SetAgeForMultipleCardsWithUnalignedAddresses) {
  static constexpr size_t kNumberOfCards = 4;
  auto* page = AllocateNormalPage();
  Address object_begin = reinterpret_cast<Address>(
      RoundUp(reinterpret_cast<uintptr_t>(page->PayloadStart()),
              kCardSizeInBytes) +
      kCardSizeInBytes / 2);
  Address object_end = object_begin + kNumberOfCards * kCardSizeInBytes;
  AssertAgeForAddressRange(object_begin, object_end, Age::kOld);
  // Try mark the cards as young. The inner 2 cards must be marked as young, the
  // outer cards will be marked as mixed.
  SetAgeForAddressRange(object_begin, object_end, Age::kYoung,
                        AdjacentCardsPolicy::kConsider);
  EXPECT_EQ(Age::kMixed, GetAge(object_begin));
  EXPECT_EQ(Age::kYoung, GetAge(object_begin + kCardSizeInBytes));
  EXPECT_EQ(Age::kYoung, GetAge(object_begin + 2 * kCardSizeInBytes));
  EXPECT_EQ(Age::kMixed, GetAge(object_end));
}

TEST_F(AgeTableTest, SetAgeForMultipleCardsConsiderAdjacentCards) {
  static constexpr size_t kNumberOfCards = 4;
  auto* page = AllocateNormalPage();
  Address object_begin = reinterpret_cast<Address>(
      RoundUp(reinterpret_cast<uintptr_t>(page->PayloadStart()),
              kCardSizeInBytes) +
      kCardSizeInBytes / 2);
  Address object_end = object_begin + kNumberOfCards * kCardSizeInBytes;
  // Mark the first and the last card as young.
  SetAge(object_begin, Age::kYoung);
  SetAge(object_end, Age::kYoung);
  // Mark all the cards as young. The inner 2 cards must be marked as young, the
  // outer cards will also be marked as young.
  SetAgeForAddressRange(object_begin, object_end, Age::kYoung,
                        AdjacentCardsPolicy::kConsider);
  EXPECT_EQ(Age::kYoung, GetAge(object_begin));
  EXPECT_EQ(Age::kYoung, GetAge(object_begin + kCardSizeInBytes));
  EXPECT_EQ(Age::kYoung, GetAge(object_begin + 2 * kCardSizeInBytes));
  EXPECT_EQ(Age::kYoung, GetAge(object_end));
}

TEST_F(AgeTableTest, MarkAllCardsAsYoung) {
  uint8_t* heap_start = reinterpret_cast<uint8_t*>(CagedHeapBase::GetBase());
  void* heap_end =
      heap_start + api_constants::kCagedHeapDefaultReservationSize - 1;
  AssertAgeForAddressRange(heap_start, heap_end, Age::kOld);
  SetAgeForAddressRange(heap_start, heap_end, Age::kYoung,
                        AdjacentCardsPolicy::kIgnore);
  AssertAgeForAddressRange(heap_start, heap_end, Age::kYoung);
}

TEST_F(AgeTableTest, AgeTableSize) {
  // The default cage size should yield a 1MB table.
  EXPECT_EQ(1 * kMB, CagedHeapBase::GetAgeTableSize());

  // Pretend there's a larger cage and verify that the age table reserves the
  // correct amount of space for itself.
  size_t age_table_size = AgeTable::CalculateAgeTableSizeForHeapSize(
      api_constants::kCagedHeapDefaultReservationSize * 4);
  EXPECT_EQ(4 * kMB, age_table_size);
}

}  // namespace cppgc::internal
                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/unittests/heap/cppgc/allocation-unittest.cc                                0000664 0000000 0000000 00000020756 14746647661 0025422 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2021 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/allocation.h"

#include "include/cppgc/visitor.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class CppgcAllocationTest : public testing::TestWithHeap {};

struct GCed final : GarbageCollected<GCed> {
  void Trace(cppgc::Visitor*) const {}
};

class HeapAllocatedArray final : public GarbageCollected<HeapAllocatedArray> {
 public:
  HeapAllocatedArray() {
    for (int i = 0; i < kArraySize; ++i) {
      array_[i] = i % 128;
    }
  }

  int8_t at(size_t i) { return array_[i]; }
  void Trace(Visitor* visitor) const {}

 private:
  static const int kArraySize = 1000;
  int8_t array_[kArraySize];
};

}  // namespace

TEST_F(CppgcAllocationTest, MakeGarbageCollectedPreservesPayload) {
  // Allocate an object in the heap.
  HeapAllocatedArray* array =
      MakeGarbageCollected<HeapAllocatedArray>(GetAllocationHandle());

  // Sanity check of the contents in the heap.
  EXPECT_EQ(0, array->at(0));
  EXPECT_EQ(42, array->at(42));
  EXPECT_EQ(0, array->at(128));
  EXPECT_EQ(999 % 128, array->at(999));
}

TEST_F(CppgcAllocationTest, ReuseMemoryFromFreelist) {
  // Allocate 3 objects so that the address we look for below is not at the
  // start of the page.
  MakeGarbageCollected<GCed>(GetAllocationHandle());
  MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCed* p1 = MakeGarbageCollected<GCed>(GetAllocationHandle());
  // GC reclaims all objects. LABs are reset during the GC.
  PreciseGC();
  // Now the freed memory in the first GC should be reused. Allocating 3
  // objects again should suffice but allocating 5 to give the test some slack.
  bool reused_memory_found = false;
  for (int i = 0; i < 5; i++) {
    GCed* p2 = MakeGarbageCollected<GCed>(GetAllocationHandle());
    if (p1 == p2) {
      reused_memory_found = true;
      break;
    }
  }
  EXPECT_TRUE(reused_memory_found);
}

namespace {
class CallbackInCtor final : public GarbageCollected<CallbackInCtor> {
 public:
  template <typename Callback>
  explicit CallbackInCtor(Callback callback) {
    callback();
  }

  void Trace(Visitor*) const {}
};
}  // namespace

TEST_F(CppgcAllocationTest,
       ConservativeGCDuringAllocationDoesNotReclaimObject) {
  CallbackInCtor* obj = MakeGarbageCollected<CallbackInCtor>(
      GetAllocationHandle(), [this]() { ConservativeGC(); });
  EXPECT_FALSE(HeapObjectHeader::FromObject(obj).IsFree());
}

// The test below requires that a large object is reused in the GC. This only
// reliably works on 64-bit builds using caged heap. On 32-bit builds large
// objects are mapped in individually and returned to the OS as a whole on
// reclamation.
#if defined(CPPGC_CAGED_HEAP)

namespace {
class LargeObjectCheckingPayloadForZeroMemory final
    : public GarbageCollected<LargeObjectCheckingPayloadForZeroMemory> {
 public:
  static constexpr size_t kDataSize = kLargeObjectSizeThreshold + 1;
  static size_t destructor_calls;

  LargeObjectCheckingPayloadForZeroMemory() {
    for (size_t i = 0; i < kDataSize; ++i) {
      EXPECT_EQ(0, data[i]);
    }
  }
  ~LargeObjectCheckingPayloadForZeroMemory() { ++destructor_calls; }
  void Trace(Visitor*) const {}

  char data[kDataSize];
};
size_t LargeObjectCheckingPayloadForZeroMemory::destructor_calls = 0u;
}  // namespace

TEST_F(CppgcAllocationTest, LargePagesAreZeroedOut) {
  LargeObjectCheckingPayloadForZeroMemory::destructor_calls = 0u;
  auto* initial_object =
      MakeGarbageCollected<LargeObjectCheckingPayloadForZeroMemory>(
          GetAllocationHandle());
  memset(initial_object->data, 0xff,
         LargeObjectCheckingPayloadForZeroMemory::kDataSize);
  // GC ignores stack and thus frees the object.
  PreciseGC();
  EXPECT_EQ(1u, LargeObjectCheckingPayloadForZeroMemory::destructor_calls);
  auto* new_object =
      MakeGarbageCollected<LargeObjectCheckingPayloadForZeroMemory>(
          GetAllocationHandle());
  // If the following check fails, then the GC didn't reuse the underlying page
  // and the test doesn't check anything.
  EXPECT_EQ(initial_object, new_object);
}

#endif  // defined(CPPGC_CAGED_HEAP)

namespace {

constexpr size_t kDoubleWord = 2 * sizeof(void*);
constexpr size_t kWord = sizeof(void*);

class alignas(kDoubleWord) DoubleWordAligned final
    : public GarbageCollected<DoubleWordAligned> {
 public:
  void Trace(Visitor*) const {}
};

class alignas(kDoubleWord) LargeDoubleWordAligned
    : public GarbageCollected<LargeDoubleWordAligned> {
 public:
  virtual void Trace(cppgc::Visitor*) const {}
  char array[kLargeObjectSizeThreshold];
};

template <size_t Size>
class CustomPadding final : public GarbageCollected<CustomPadding<Size>> {
 public:
  void Trace(cppgc::Visitor* visitor) const {}
  char base_size[128];  // Gets allocated in using RegularSpaceType::kNormal4.
  char padding[Size];
};

template <size_t Size>
class alignas(kDoubleWord) AlignedCustomPadding final
    : public GarbageCollected<AlignedCustomPadding<Size>> {
 public:
  void Trace(cppgc::Visitor* visitor) const {}
  char base_size[128];  // Gets allocated in using RegularSpaceType::kNormal4.
  char padding[Size];
};

}  // namespace

TEST_F(CppgcAllocationTest, DoubleWordAlignedAllocation) {
  static constexpr size_t kAlignmentMask = kDoubleWord - 1;
  auto* gced = MakeGarbageCollected<DoubleWordAligned>(GetAllocationHandle());
  EXPECT_EQ(0u, reinterpret_cast<uintptr_t>(gced) & kAlignmentMask);
}

TEST_F(CppgcAllocationTest, LargeDoubleWordAlignedAllocation) {
  static constexpr size_t kAlignmentMask = kDoubleWord - 1;
  auto* gced =
      MakeGarbageCollected<LargeDoubleWordAligned>(GetAllocationHandle());
  EXPECT_EQ(0u, reinterpret_cast<uintptr_t>(gced) & kAlignmentMask);
}

TEST_F(CppgcAllocationTest, AlignToDoubleWordFromUnaligned) {
  static constexpr size_t kAlignmentMask = kDoubleWord - 1;
  // The address from which the next object can be allocated, i.e. the end of
  // |padding_object|, should not be double-word aligned. Allocate extra objects
  // to ensure padding in case payload start is 16-byte aligned.
  using PaddingObject = CustomPadding<kDoubleWord>;
  static_assert(((sizeof(HeapObjectHeader) + sizeof(PaddingObject)) %
                 kDoubleWord) == kWord);

  void* padding_object = nullptr;
  if (NormalPage::PayloadSize() % kDoubleWord == 0) {
    padding_object = MakeGarbageCollected<PaddingObject>(GetAllocationHandle());
    ASSERT_EQ(kWord, (reinterpret_cast<uintptr_t>(padding_object) +
                      sizeof(PaddingObject)) &
                         kAlignmentMask);
  }

  auto* aligned_object =
      MakeGarbageCollected<AlignedCustomPadding<16>>(GetAllocationHandle());
  EXPECT_EQ(0u, reinterpret_cast<uintptr_t>(aligned_object) & kAlignmentMask);
  if (padding_object) {
    // Test only yielded a reliable result if objects are adjacent to each
    // other.
    ASSERT_EQ(reinterpret_cast<uintptr_t>(padding_object) +
                  sizeof(PaddingObject) + sizeof(HeapObjectHeader),
              reinterpret_cast<uintptr_t>(aligned_object));
  }
}

TEST_F(CppgcAllocationTest, AlignToDoubleWordFromAligned) {
  static constexpr size_t kAlignmentMask = kDoubleWord - 1;
  // The address from which the next object can be allocated, i.e. the end of
  // |padding_object|, should be double-word aligned. Allocate extra objects to
  // ensure padding in case payload start is 8-byte aligned.
  using PaddingObject = CustomPadding<kDoubleWord>;
  static_assert(((sizeof(HeapObjectHeader) + sizeof(PaddingObject)) %
                 kDoubleWord) == kWord);

  void* padding_object = nullptr;
  if (NormalPage::PayloadSize() % kDoubleWord == kWord) {
    padding_object = MakeGarbageCollected<PaddingObject>(GetAllocationHandle());
    ASSERT_EQ(0u, (reinterpret_cast<uintptr_t>(padding_object) +
                   sizeof(PaddingObject)) &
                      kAlignmentMask);
  }

  auto* aligned_object =
      MakeGarbageCollected<AlignedCustomPadding<16>>(GetAllocationHandle());
  EXPECT_EQ(0u, reinterpret_cast<uintptr_t>(aligned_object) & kAlignmentMask);
  if (padding_object) {
    // Test only yielded a reliable result if objects are adjacent to each
    // other.
    ASSERT_EQ(reinterpret_cast<uintptr_t>(padding_object) +
                  sizeof(PaddingObject) + 2 * sizeof(HeapObjectHeader),
              reinterpret_cast<uintptr_t>(aligned_object));
  }
}

}  // namespace internal
}  // namespace cppgc
                  node-23.7.0/deps/v8/test/unittests/heap/cppgc/caged-heap-unittest.cc                                0000664 0000000 0000000 00000002436 14746647661 0025246 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2024 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(CPPGC_CAGED_HEAP)

#include "src/heap/cppgc/caged-heap.h"

#include "include/cppgc/internal/caged-heap-local-data.h"
#include "src/base/page-allocator.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc::internal {

class CagedHeapDeathTest : public testing::TestWithHeap {};

TEST_F(CagedHeapDeathTest, AgeTableUncommittedBeforeGenerationalGCEnabled) {
  // Test cannot run if Generational GC was already enabled.
  ASSERT_FALSE(Heap::From(GetHeap())->generational_gc_supported());

  EXPECT_DEATH_IF_SUPPORTED(
      CagedHeapLocalData::Get().age_table.SetAge(0, AgeTable::Age::kOld), "");
}

class CagedHeapTest : public testing::TestWithHeap {};

TEST_F(CagedHeapTest, AgeTableCommittedAfterGenerationalGCEnabled) {
  // Test cannot run if Generational GC was already enabled.
  ASSERT_FALSE(Heap::From(GetHeap())->generational_gc_supported());

  CagedHeap::CommitAgeTable(*(GetPlatform().GetPageAllocator()));
  EXPECT_EQ(CagedHeapLocalData::Get().age_table.GetAge(0), AgeTable::Age::kOld);
}

}  // namespace cppgc::internal

#endif  // defined(CPPGC_CAGED_HEAP)
                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/unittests/heap/cppgc/compactor-unittest.cc                                 0000664 0000000 0000000 00000020704 14746647661 0025255 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/compactor.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/custom-space.h"
#include "include/cppgc/persistent.h"
#include "src/heap/cppgc/garbage-collector.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/heap-page.h"
#include "src/heap/cppgc/marker.h"
#include "src/heap/cppgc/stats-collector.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {

class CompactableCustomSpace : public CustomSpace<CompactableCustomSpace> {
 public:
  static constexpr size_t kSpaceIndex = 0;
  static constexpr bool kSupportsCompaction = true;
};

namespace internal {

namespace {

struct CompactableGCed : public GarbageCollected<CompactableGCed> {
 public:
  ~CompactableGCed() { ++g_destructor_callcount; }
  void Trace(Visitor* visitor) const {
    VisitorBase::TraceRawForTesting(visitor,
                                    const_cast<const CompactableGCed*>(other));
    visitor->RegisterMovableReference(
        const_cast<const CompactableGCed**>(&other));
  }
  static size_t g_destructor_callcount;
  CompactableGCed* other = nullptr;
  size_t id = 0;
};
// static
size_t CompactableGCed::g_destructor_callcount = 0;

template <int kNumObjects>
struct CompactableHolder
    : public GarbageCollected<CompactableHolder<kNumObjects>> {
 public:
  explicit CompactableHolder(cppgc::AllocationHandle& allocation_handle) {
    for (int i = 0; i < kNumObjects; ++i)
      objects[i] = MakeGarbageCollected<CompactableGCed>(allocation_handle);
  }

  void Trace(Visitor* visitor) const {
    for (int i = 0; i < kNumObjects; ++i) {
      VisitorBase::TraceRawForTesting(
          visitor, const_cast<const CompactableGCed*>(objects[i]));
      visitor->RegisterMovableReference(
          const_cast<const CompactableGCed**>(&objects[i]));
    }
  }
  CompactableGCed* objects[kNumObjects]{};
};

class CompactorTest : public testing::TestWithPlatform {
 public:
  CompactorTest() {
    Heap::HeapOptions options;
    options.custom_spaces.emplace_back(
        std::make_unique<CompactableCustomSpace>());
    heap_ = Heap::Create(platform_, std::move(options));
  }

  void StartCompaction() {
    compactor().EnableForNextGCForTesting();
    compactor().InitializeIfShouldCompact(GCConfig::MarkingType::kIncremental,
                                          StackState::kNoHeapPointers);
    EXPECT_TRUE(compactor().IsEnabledForTesting());
  }

  void FinishCompaction() { compactor().CompactSpacesIfEnabled(); }

  void StartGC() {
    CompactableGCed::g_destructor_callcount = 0u;
    StartCompaction();
    heap()->StartIncrementalGarbageCollection(
        GCConfig::PreciseIncrementalConfig());
  }

  void EndGC() {
    heap()->marker()->FinishMarking(StackState::kNoHeapPointers);
    heap()->GetMarkerRefForTesting().reset();
    FinishCompaction();
    // Sweeping also verifies the object start bitmap.
    const SweepingConfig sweeping_config{
        SweepingConfig::SweepingType::kAtomic,
        SweepingConfig::CompactableSpaceHandling::kIgnore};
    heap()->sweeper().Start(sweeping_config);
    heap()->sweeper().FinishIfRunning();
  }

  Heap* heap() { return Heap::From(heap_.get()); }
  cppgc::AllocationHandle& GetAllocationHandle() {
    return heap_->GetAllocationHandle();
  }
  Compactor& compactor() { return heap()->compactor(); }

 private:
  std::unique_ptr<cppgc::Heap> heap_;
};

}  // namespace

}  // namespace internal

template <>
struct SpaceTrait<internal::CompactableGCed> {
  using Space = CompactableCustomSpace;
};

namespace internal {

TEST_F(CompactorTest, NothingToCompact) {
  StartCompaction();
  heap()->stats_collector()->NotifyMarkingStarted(
      CollectionType::kMajor, GCConfig::MarkingType::kAtomic,
      GCConfig::IsForcedGC::kNotForced);
  heap()->stats_collector()->NotifyMarkingCompleted(0);
  FinishCompaction();
  heap()->stats_collector()->NotifySweepingCompleted(
      GCConfig::SweepingType::kAtomic);
}

TEST_F(CompactorTest, NonEmptySpaceAllLive) {
  static constexpr int kNumObjects = 10;
  Persistent<CompactableHolder<kNumObjects>> holder =
      MakeGarbageCollected<CompactableHolder<kNumObjects>>(
          GetAllocationHandle(), GetAllocationHandle());
  CompactableGCed* references[kNumObjects] = {nullptr};
  for (int i = 0; i < kNumObjects; ++i) {
    references[i] = holder->objects[i];
  }
  StartGC();
  EndGC();
  EXPECT_EQ(0u, CompactableGCed::g_destructor_callcount);
  for (int i = 0; i < kNumObjects; ++i) {
    EXPECT_EQ(holder->objects[i], references[i]);
  }
}

TEST_F(CompactorTest, NonEmptySpaceAllDead) {
  static constexpr int kNumObjects = 10;
  Persistent<CompactableHolder<kNumObjects>> holder =
      MakeGarbageCollected<CompactableHolder<kNumObjects>>(
          GetAllocationHandle(), GetAllocationHandle());
  CompactableGCed::g_destructor_callcount = 0u;
  StartGC();
  for (int i = 0; i < kNumObjects; ++i) {
    holder->objects[i] = nullptr;
  }
  EndGC();
  EXPECT_EQ(10u, CompactableGCed::g_destructor_callcount);
}

TEST_F(CompactorTest, NonEmptySpaceHalfLive) {
  static constexpr int kNumObjects = 10;
  Persistent<CompactableHolder<kNumObjects>> holder =
      MakeGarbageCollected<CompactableHolder<kNumObjects>>(
          GetAllocationHandle(), GetAllocationHandle());
  CompactableGCed* references[kNumObjects] = {nullptr};
  for (int i = 0; i < kNumObjects; ++i) {
    references[i] = holder->objects[i];
  }
  StartGC();
  for (int i = 0; i < kNumObjects; i += 2) {
    holder->objects[i] = nullptr;
  }
  EndGC();
  // Half of object were destroyed.
  EXPECT_EQ(5u, CompactableGCed::g_destructor_callcount);
  // Remaining objects are compacted.
  for (int i = 1; i < kNumObjects; i += 2) {
    EXPECT_EQ(holder->objects[i], references[i / 2]);
  }
}

TEST_F(CompactorTest, CompactAcrossPages) {
  Persistent<CompactableHolder<1>> holder =
      MakeGarbageCollected<CompactableHolder<1>>(GetAllocationHandle(),
                                                 GetAllocationHandle());
  CompactableGCed* reference = holder->objects[0];
  static constexpr size_t kObjectsPerPage =
      kPageSize / (sizeof(CompactableGCed) + sizeof(HeapObjectHeader));
  for (size_t i = 0; i < kObjectsPerPage; ++i) {
    holder->objects[0] =
        MakeGarbageCollected<CompactableGCed>(GetAllocationHandle());
  }
  // Last allocated object should be on a new page.
  EXPECT_NE(reference, holder->objects[0]);
  EXPECT_NE(BasePage::FromInnerAddress(heap(), reference),
            BasePage::FromInnerAddress(heap(), holder->objects[0]));
  StartGC();
  EndGC();
  // Half of object were destroyed.
  EXPECT_EQ(kObjectsPerPage, CompactableGCed::g_destructor_callcount);
  EXPECT_EQ(reference, holder->objects[0]);
}

TEST_F(CompactorTest, InteriorSlotToPreviousObject) {
  static constexpr int kNumObjects = 3;
  Persistent<CompactableHolder<kNumObjects>> holder =
      MakeGarbageCollected<CompactableHolder<kNumObjects>>(
          GetAllocationHandle(), GetAllocationHandle());
  CompactableGCed* references[kNumObjects] = {nullptr};
  for (int i = 0; i < kNumObjects; ++i) {
    references[i] = holder->objects[i];
  }
  holder->objects[2]->other = holder->objects[1];
  holder->objects[1] = nullptr;
  holder->objects[0] = nullptr;
  StartGC();
  EndGC();
  EXPECT_EQ(1u, CompactableGCed::g_destructor_callcount);
  EXPECT_EQ(references[1], holder->objects[2]);
  EXPECT_EQ(references[0], holder->objects[2]->other);
}

TEST_F(CompactorTest, InteriorSlotToNextObject) {
  static constexpr int kNumObjects = 3;
  Persistent<CompactableHolder<kNumObjects>> holder =
      MakeGarbageCollected<CompactableHolder<kNumObjects>>(
          GetAllocationHandle(), GetAllocationHandle());
  CompactableGCed* references[kNumObjects] = {nullptr};
  for (int i = 0; i < kNumObjects; ++i) {
    references[i] = holder->objects[i];
  }
  holder->objects[1]->other = holder->objects[2];
  holder->objects[2] = nullptr;
  holder->objects[0] = nullptr;
  StartGC();
  EndGC();
  EXPECT_EQ(1u, CompactableGCed::g_destructor_callcount);
  EXPECT_EQ(references[0], holder->objects[1]);
  EXPECT_EQ(references[1], holder->objects[1]->other);
}

TEST_F(CompactorTest, OnStackSlotShouldBeFiltered) {
  StartGC();
  const CompactableGCed* compactable_object =
      MakeGarbageCollected<CompactableGCed>(GetAllocationHandle());
  heap()->marker()->Visitor().RegisterMovableReference(&compactable_object);
  EndGC();
}

}  // namespace internal
}  // namespace cppgc
                                                            node-23.7.0/deps/v8/test/unittests/heap/cppgc/concurrent-marking-unittest.cc                        0000664 0000000 0000000 00000014250 14746647661 0027075 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/allocation.h"
#include "include/cppgc/default-platform.h"
#include "include/cppgc/member.h"
#include "include/cppgc/persistent.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/marker.h"
#include "src/heap/cppgc/marking-visitor.h"
#include "src/heap/cppgc/stats-collector.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class ConcurrentMarkingTest : public testing::TestWithHeap {
 public:
#if defined(THREAD_SANITIZER)
  // Use more iteration on tsan builds to expose data races.
  static constexpr int kNumStep = 1000;
#else
  static constexpr int kNumStep = 10;
#endif  // defined(THREAD_SANITIZER)

  void StartConcurrentGC() {
    Heap* heap = Heap::From(GetHeap());
    heap->DisableHeapGrowingForTesting();
    heap->StartIncrementalGarbageCollection(
        GCConfig::PreciseConcurrentConfig());
    heap->marker()->SetMainThreadMarkingDisabledForTesting(true);
  }

  bool SingleStep(StackState stack_state) {
    MarkerBase* marker = Heap::From(GetHeap())->marker();
    DCHECK(marker);
    return marker->IncrementalMarkingStepForTesting(stack_state);
  }

  void FinishGC() {
    Heap* heap = Heap::From(GetHeap());
    heap->marker()->SetMainThreadMarkingDisabledForTesting(false);
    heap->FinalizeIncrementalGarbageCollectionIfRunning(
        GCConfig::PreciseConcurrentConfig());
  }
};

template <typename T>
struct GCedHolder : public GarbageCollected<GCedHolder<T>> {
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(object); }
  Member<T> object;
};

class GCed : public GarbageCollected<GCed> {
 public:
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(child_); }

  Member<GCed> child_;
};

class GCedWithCallback : public GarbageCollected<GCedWithCallback> {
 public:
  template <typename Callback>
  explicit GCedWithCallback(Callback callback) {
    callback(this);
  }

  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(child_); }

  Member<GCedWithCallback> child_;
};

class Mixin : public GarbageCollectedMixin {
 public:
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(child_); }

  Member<Mixin> child_;
};

class GCedWithMixin : public GarbageCollected<GCedWithMixin>, public Mixin {
 public:
  void Trace(cppgc::Visitor* visitor) const { Mixin::Trace(visitor); }
};

}  // namespace

// The following tests below check for data races during concurrent marking.

TEST_F(ConcurrentMarkingTest, MarkingObjects) {
  StartConcurrentGC();
  Persistent<GCedHolder<GCed>> root =
      MakeGarbageCollected<GCedHolder<GCed>>(GetAllocationHandle());
  Member<GCed>* last_object = &root->object;
  for (int i = 0; i < kNumStep; ++i) {
    for (int j = 0; j < kNumStep; ++j) {
      *last_object = MakeGarbageCollected<GCed>(GetAllocationHandle());
      last_object = &(*last_object)->child_;
    }
    // Use SingleStep to re-post concurrent jobs.
    SingleStep(StackState::kNoHeapPointers);
  }
  FinishGC();
}

TEST_F(ConcurrentMarkingTest, MarkingInConstructionObjects) {
  StartConcurrentGC();
  Persistent<GCedHolder<GCedWithCallback>> root =
      MakeGarbageCollected<GCedHolder<GCedWithCallback>>(GetAllocationHandle());
  Member<GCedWithCallback>* last_object = &root->object;
  for (int i = 0; i < kNumStep; ++i) {
    for (int j = 0; j < kNumStep; ++j) {
      MakeGarbageCollected<GCedWithCallback>(
          GetAllocationHandle(), [&last_object](GCedWithCallback* obj) {
            *last_object = obj;
            last_object = &(*last_object)->child_;
          });
    }
    // Use SingleStep to re-post concurrent jobs.
    SingleStep(StackState::kNoHeapPointers);
  }
  FinishGC();
}

TEST_F(ConcurrentMarkingTest, MarkingMixinObjects) {
  StartConcurrentGC();
  Persistent<GCedHolder<Mixin>> root =
      MakeGarbageCollected<GCedHolder<Mixin>>(GetAllocationHandle());
  Member<Mixin>* last_object = &root->object;
  for (int i = 0; i < kNumStep; ++i) {
    for (int j = 0; j < kNumStep; ++j) {
      *last_object = MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle());
      last_object = &(*last_object)->child_;
    }
    // Use SingleStep to re-post concurrent jobs.
    SingleStep(StackState::kNoHeapPointers);
  }
  FinishGC();
}

namespace {

struct ConcurrentlyTraceable : public GarbageCollected<ConcurrentlyTraceable> {
  static size_t trace_counter;
  void Trace(Visitor*) const { ++trace_counter; }
};
size_t ConcurrentlyTraceable::trace_counter = 0;

struct NotConcurrentlyTraceable
    : public GarbageCollected<NotConcurrentlyTraceable> {
  static size_t trace_counter;
  void Trace(Visitor* visitor) const {
    if (visitor->DeferTraceToMutatorThreadIfConcurrent(
            this,
            [](Visitor*, const void*) {
              ++NotConcurrentlyTraceable::trace_counter;
            },
            sizeof(NotConcurrentlyTraceable)))
      return;
    ++trace_counter;
  }
};
size_t NotConcurrentlyTraceable::trace_counter = 0;

}  // namespace

TEST_F(ConcurrentMarkingTest, ConcurrentlyTraceableObjectIsTracedConcurrently) {
  Persistent<GCedHolder<ConcurrentlyTraceable>> root =
      MakeGarbageCollected<GCedHolder<ConcurrentlyTraceable>>(
          GetAllocationHandle());
  root->object =
      MakeGarbageCollected<ConcurrentlyTraceable>(GetAllocationHandle());
  EXPECT_EQ(0u, ConcurrentlyTraceable::trace_counter);
  StartConcurrentGC();
  GetMarkerRef()->WaitForConcurrentMarkingForTesting();
  EXPECT_NE(0u, ConcurrentlyTraceable::trace_counter);
  FinishGC();
}

TEST_F(ConcurrentMarkingTest,
       NotConcurrentlyTraceableObjectIsNotTracedConcurrently) {
  Persistent<GCedHolder<NotConcurrentlyTraceable>> root =
      MakeGarbageCollected<GCedHolder<NotConcurrentlyTraceable>>(
          GetAllocationHandle());
  root->object =
      MakeGarbageCollected<NotConcurrentlyTraceable>(GetAllocationHandle());
  EXPECT_EQ(0u, NotConcurrentlyTraceable::trace_counter);
  StartConcurrentGC();
  GetMarkerRef()->WaitForConcurrentMarkingForTesting();
  EXPECT_EQ(0u, NotConcurrentlyTraceable::trace_counter);
  FinishGC();
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/unittests/heap/cppgc/concurrent-sweeper-unittest.cc                        0000664 0000000 0000000 00000032263 14746647661 0027123 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <algorithm>
#include <set>
#include <vector>

#include "include/cppgc/allocation.h"
#include "include/cppgc/platform.h"
#include "include/v8-platform.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/heap-page.h"
#include "src/heap/cppgc/heap-space.h"
#include "src/heap/cppgc/heap-visitor.h"
#include "src/heap/cppgc/page-memory.h"
#include "src/heap/cppgc/raw-heap.h"
#include "src/heap/cppgc/stats-collector.h"
#include "src/heap/cppgc/sweeper.h"
#include "test/unittests/heap/cppgc/test-platform.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

size_t g_destructor_callcount;

template <size_t Size>
class Finalizable : public GarbageCollected<Finalizable<Size>> {
 public:
  Finalizable() : creation_thread_{v8::base::OS::GetCurrentThreadId()} {}

  virtual ~Finalizable() {
    ++g_destructor_callcount;
    EXPECT_EQ(creation_thread_, v8::base::OS::GetCurrentThreadId());
  }

  virtual void Trace(cppgc::Visitor*) const {}

 private:
  char array_[Size];
  int creation_thread_;
};

using NormalFinalizable = Finalizable<32>;
using LargeFinalizable = Finalizable<kLargeObjectSizeThreshold * 2>;

template <size_t Size>
class NonFinalizable : public GarbageCollected<NonFinalizable<Size>> {
 public:
  virtual void Trace(cppgc::Visitor*) const {}

 private:
  char array_[Size];
  int padding_to_make_size_the_same_as_finalizible_;
};

using NormalNonFinalizable = NonFinalizable<32>;
using LargeNonFinalizable = NonFinalizable<kLargeObjectSizeThreshold * 2>;

}  // namespace

class ConcurrentSweeperTest : public testing::TestWithHeap {
 public:
  ConcurrentSweeperTest() { g_destructor_callcount = 0; }

  void StartSweeping() {
    Heap* heap = Heap::From(GetHeap());
    ResetLinearAllocationBuffers();
    // Pretend do finish marking as StatsCollector verifies that Notify*
    // methods are called in the right order.
    heap->stats_collector()->NotifyMarkingStarted(
        CollectionType::kMajor, GCConfig::MarkingType::kAtomic,
        GCConfig::IsForcedGC::kNotForced);
    heap->stats_collector()->NotifyMarkingCompleted(0);
    Sweeper& sweeper = heap->sweeper();
    const SweepingConfig sweeping_config{
        SweepingConfig::SweepingType::kIncrementalAndConcurrent,
        SweepingConfig::CompactableSpaceHandling::kSweep};
    sweeper.Start(sweeping_config);
  }

  void WaitForConcurrentSweeping() {
    Heap* heap = Heap::From(GetHeap());
    Sweeper& sweeper = heap->sweeper();
    sweeper.WaitForConcurrentSweepingForTesting();
  }

  void FinishSweeping() {
    Heap* heap = Heap::From(GetHeap());
    Sweeper& sweeper = heap->sweeper();
    sweeper.FinishIfRunning();
  }

  const RawHeap& GetRawHeap() const {
    const Heap* heap = Heap::From(GetHeap());
    return heap->raw_heap();
  }

  void CheckFreeListEntries(const std::vector<void*>& objects) {
    const Heap* heap = Heap::From(GetHeap());
    const PageBackend* backend = heap->page_backend();

    for (auto* object : objects) {
      // The corresponding page could be removed.
      if (!backend->Lookup(static_cast<ConstAddress>(object))) continue;

      const auto* header =
          BasePage::FromPayload(object)->TryObjectHeaderFromInnerAddress(
              object);
      // TryObjectHeaderFromInnerAddress returns nullptr for freelist entries.
      EXPECT_EQ(nullptr, header);
    }
  }

  bool PageInBackend(const BasePage* page) {
    const Heap* heap = Heap::From(GetHeap());
    const PageBackend* backend = heap->page_backend();
    return backend->Lookup(reinterpret_cast<ConstAddress>(page));
  }

  bool FreeListContains(const BaseSpace& space,
                        const std::vector<void*>& objects) {
    const Heap* heap = Heap::From(GetHeap());
    const PageBackend* backend = heap->page_backend();
    const auto& freelist = NormalPageSpace::From(space).free_list();

    for (void* object : objects) {
      // The corresponding page could be removed.
      if (!backend->Lookup(static_cast<ConstAddress>(object))) continue;

      if (!freelist.ContainsForTesting({object, 0})) return false;
    }

    return true;
  }

  void MarkObject(void* payload) {
    HeapObjectHeader& header = HeapObjectHeader::FromObject(payload);
    header.TryMarkAtomic();
    BasePage::FromPayload(&header)->IncrementMarkedBytes(
        header.AllocatedSize());
  }
};

TEST_F(ConcurrentSweeperTest, BackgroundSweepOfNormalPage) {
  // Non finalizable objects are swept right away.
  using GCedType = NormalNonFinalizable;

  auto* unmarked_object = MakeGarbageCollected<GCedType>(GetAllocationHandle());
  auto* marked_object = MakeGarbageCollected<GCedType>(GetAllocationHandle());
  MarkObject(marked_object);

  auto* page = BasePage::FromPayload(unmarked_object);
  auto& space = page->space();

  // The test requires objects to be allocated on the same page;
  ASSERT_EQ(page, BasePage::FromPayload(marked_object));

  StartSweeping();

  // Wait for concurrent sweeping to finish.
  WaitForConcurrentSweeping();

  const auto& hoh = HeapObjectHeader::FromObject(marked_object);
  if (Heap::From(GetHeap())->generational_gc_supported()) {
    // Check that the marked object is still marked.
    EXPECT_TRUE(hoh.IsMarked());
  } else {
    // Check that the marked object was unmarked.
    EXPECT_FALSE(hoh.IsMarked());
  }

  // Check that free list entries are created right away for non-finalizable
  // objects, but not immediately returned to the space's freelist.
  CheckFreeListEntries({unmarked_object});
  EXPECT_FALSE(FreeListContains(space, {unmarked_object}));

  FinishSweeping();

  // Check that finalizable objects are swept and put into the freelist of the
  // corresponding space.
  EXPECT_TRUE(FreeListContains(space, {unmarked_object}));
}

TEST_F(ConcurrentSweeperTest, BackgroundSweepOfLargePage) {
  // Non finalizable objects are swept right away but the page is only returned
  // from the main thread.
  using GCedType = LargeNonFinalizable;

  auto* unmarked_object = MakeGarbageCollected<GCedType>(GetAllocationHandle());
  auto* marked_object = MakeGarbageCollected<GCedType>(GetAllocationHandle());
  MarkObject(marked_object);

  auto* unmarked_page = BasePage::FromPayload(unmarked_object);
  auto* marked_page = BasePage::FromPayload(marked_object);
  auto& space = unmarked_page->space();

  ASSERT_EQ(&space, &marked_page->space());

  StartSweeping();

  // Wait for concurrent sweeping to finish.
  WaitForConcurrentSweeping();

  const auto& hoh = HeapObjectHeader::FromObject(marked_object);
  if (Heap::From(GetHeap())->generational_gc_supported()) {
    // Check that the marked object is still marked.
    EXPECT_TRUE(hoh.IsMarked());
  } else {
    // Check that the marked object was unmarked.
    EXPECT_FALSE(hoh.IsMarked());
  }

  // The page should not have been removed on the background threads.
  EXPECT_TRUE(PageInBackend(unmarked_page));

  FinishSweeping();

  // Check that free list entries are created right away for non-finalizable
  // objects, but not immediately returned to the space's freelist.
  EXPECT_FALSE(PageInBackend(unmarked_page));

  // Check that marked pages are returned to space right away.
  EXPECT_NE(space.end(), std::find(space.begin(), space.end(), marked_page));
}

TEST_F(ConcurrentSweeperTest, DeferredFinalizationOfNormalPage) {
  static constexpr size_t kNumberOfObjects = 10;
  // Finalizable types are left intact by concurrent sweeper.
  using GCedType = NormalFinalizable;

  std::set<BasePage*> pages;
  std::vector<void*> objects;

  BaseSpace* space = nullptr;
  for (size_t i = 0; i < kNumberOfObjects; ++i) {
    auto* object = MakeGarbageCollected<GCedType>(GetAllocationHandle());
    objects.push_back(object);
    auto* page = BasePage::FromPayload(object);
    pages.insert(page);
    if (!space) space = &page->space();
  }

  StartSweeping();

  // Wait for concurrent sweeping to finish.
  WaitForConcurrentSweeping();

  // Check that pages are not returned right away.
  for (auto* page : pages) {
    EXPECT_EQ(space->end(), std::find(space->begin(), space->end(), page));
  }
  // Check that finalizable objects are left intact in pages.
  EXPECT_FALSE(FreeListContains(*space, objects));
  // No finalizers have been executed.
  EXPECT_EQ(0u, g_destructor_callcount);

  FinishSweeping();

  // Check that finalizable objects are swept and turned into freelist entries.
  CheckFreeListEntries(objects);
  // Check that space's freelist contains these entries.
  EXPECT_TRUE(FreeListContains(*space, objects));
  // Check that finalizers have been executed.
  EXPECT_EQ(kNumberOfObjects, g_destructor_callcount);
}

TEST_F(ConcurrentSweeperTest, DeferredFinalizationOfLargePage) {
  using GCedType = LargeFinalizable;

  auto* object = MakeGarbageCollected<GCedType>(GetAllocationHandle());

  auto* page = BasePage::FromPayload(object);
  auto& space = page->space();

  StartSweeping();

  // Wait for concurrent sweeping to finish.
  WaitForConcurrentSweeping();

  // Check that the page is not returned to the space.
  EXPECT_EQ(space.end(), std::find(space.begin(), space.end(), page));
  // Check that no destructors have been executed yet.
  EXPECT_EQ(0u, g_destructor_callcount);

  FinishSweeping();

  // Check that the destructor was executed.
  EXPECT_EQ(1u, g_destructor_callcount);
  // Check that page was unmapped.
  EXPECT_FALSE(PageInBackend(page));
}

TEST_F(ConcurrentSweeperTest, DestroyLargePageOnMainThread) {
  // This test fails with TSAN when large pages are destroyed concurrently
  // without proper support by the backend.
  using GCedType = LargeNonFinalizable;

  auto* object = MakeGarbageCollected<GCedType>(GetAllocationHandle());
  auto* page = BasePage::FromPayload(object);

  StartSweeping();

  // Allocating another large object should not race here.
  MakeGarbageCollected<GCedType>(GetAllocationHandle());

  // Wait for concurrent sweeping to finish.
  WaitForConcurrentSweeping();

  FinishSweeping();

  // Check that page was unmapped.
  EXPECT_FALSE(PageInBackend(page));
}

TEST_F(ConcurrentSweeperTest, IncrementalSweeping) {
  testing::TestPlatform::DisableBackgroundTasksScope disable_concurrent_sweeper(
      &GetPlatform());

  auto task_runner = GetPlatform().GetForegroundTaskRunner();

  // Create two unmarked objects.
  MakeGarbageCollected<NormalFinalizable>(GetAllocationHandle());
  MakeGarbageCollected<LargeFinalizable>(GetAllocationHandle());

  // Create two marked objects.
  auto* marked_normal_object =
      MakeGarbageCollected<NormalFinalizable>(GetAllocationHandle());
  auto* marked_large_object =
      MakeGarbageCollected<LargeFinalizable>(GetAllocationHandle());

  auto& marked_normal_header =
      HeapObjectHeader::FromObject(marked_normal_object);
  auto& marked_large_header = HeapObjectHeader::FromObject(marked_large_object);

  MarkObject(marked_normal_object);
  MarkObject(marked_large_object);

  StartSweeping();

  EXPECT_EQ(0u, g_destructor_callcount);
  EXPECT_TRUE(marked_normal_header.IsMarked());
  EXPECT_TRUE(marked_large_header.IsMarked());

  // Wait for incremental sweeper to finish.
  GetPlatform().RunAllForegroundTasks();

  EXPECT_EQ(2u, g_destructor_callcount);

  if (Heap::From(GetHeap())->generational_gc_supported()) {
    EXPECT_TRUE(marked_normal_header.IsMarked());
    EXPECT_TRUE(marked_large_header.IsMarked());
  } else {
    EXPECT_FALSE(marked_normal_header.IsMarked());
    EXPECT_FALSE(marked_large_header.IsMarked());
  }

  FinishSweeping();
}

TEST_F(ConcurrentSweeperTest, SweepOnAllocationReturnEmptyPage) {
  PreciseGC();

  // First, allocate the full page of finalizable objects.
  const size_t objects_to_allocated =
      NormalPage::PayloadSize() /
      (sizeof(HeapObjectHeader) + sizeof(NormalFinalizable));
  auto* first_obj =
      MakeGarbageCollected<NormalFinalizable>(GetAllocationHandle());
  auto* finalizable_page =
      NormalPage::FromInnerAddress(&HeapBase::From(GetHeapHandle()), first_obj);
  for (size_t i = 1; i < objects_to_allocated; ++i) {
    MakeGarbageCollected<NormalFinalizable>(GetAllocationHandle());
  }

  // Then, allocate a new unfinalizable object on a fresh page. We do that so
  // that the sweeper on allocation doesn't allocate a new page.
  auto* non_finalizable =
      MakeGarbageCollected<NormalNonFinalizable>(GetAllocationHandle());
  auto* non_finalizable_page = NormalPage::FromInnerAddress(
      &HeapBase::From(GetHeapHandle()), non_finalizable);
  ASSERT_NE(finalizable_page, non_finalizable_page);

  // Start the GC without sweeping.
  static constexpr GCConfig config = {
      CollectionType::kMajor, StackState::kNoHeapPointers,
      GCConfig::MarkingType::kAtomic,
      GCConfig::SweepingType::kIncrementalAndConcurrent};
  Heap::From(GetHeap())->CollectGarbage(config);

  WaitForConcurrentSweeping();

  // Allocate and sweep.
  auto* allocated_after_sweeping =
      MakeGarbageCollected<NormalFinalizable>(GetAllocationHandle());
  // Check that the empty page of finalizable objects was returned.
  EXPECT_EQ(finalizable_page,
            NormalPage::FromInnerAddress(&HeapBase::From(GetHeapHandle()),
                                         allocated_after_sweeping));
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/unittests/heap/cppgc/cross-thread-persistent-unittest.cc                   0000664 0000000 0000000 00000006110 14746647661 0030055 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/cross-thread-persistent.h"

#include "include/cppgc/allocation.h"
#include "src/base/platform/condition-variable.h"
#include "src/base/platform/mutex.h"
#include "src/base/platform/platform.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

struct GCed final : GarbageCollected<GCed> {
  static size_t destructor_call_count;
  GCed() { destructor_call_count = 0; }
  ~GCed() { destructor_call_count++; }
  virtual void Trace(cppgc::Visitor*) const {}
  int a = 0;
};
size_t GCed::destructor_call_count = 0;

class Runner final : public v8::base::Thread {
 public:
  template <typename Callback>
  explicit Runner(Callback callback)
      : Thread(v8::base::Thread::Options("CrossThreadPersistent Thread")),
        callback_(callback) {}

  void Run() final { callback_(); }

 private:
  std::function<void()> callback_;
};

}  // namespace

class CrossThreadPersistentTest : public testing::TestWithHeap {};

TEST_F(CrossThreadPersistentTest, RetainStronglyOnDifferentThread) {
  subtle::CrossThreadPersistent<GCed> holder =
      MakeGarbageCollected<GCed>(GetAllocationHandle());
  {
    Runner runner([obj = std::move(holder)]() {});
    EXPECT_FALSE(holder);
    EXPECT_EQ(0u, GCed::destructor_call_count);
    PreciseGC();
    EXPECT_EQ(0u, GCed::destructor_call_count);
    runner.StartSynchronously();
    runner.Join();
  }
  EXPECT_EQ(0u, GCed::destructor_call_count);
  PreciseGC();
  EXPECT_EQ(1u, GCed::destructor_call_count);
}

TEST_F(CrossThreadPersistentTest, RetainWeaklyOnDifferentThread) {
  subtle::WeakCrossThreadPersistent<GCed> in =
      MakeGarbageCollected<GCed>(GetAllocationHandle());
  // Set up |out| with an object that is always retained to ensure that the
  // different thread indeed moves back an empty handle.
  Persistent<GCed> out_holder =
      MakeGarbageCollected<GCed>(GetAllocationHandle());
  subtle::WeakCrossThreadPersistent<GCed> out = *out_holder;
  {
    Persistent<GCed> temporary_holder = *in;
    Runner runner([obj = std::move(in), &out]() { out = std::move(obj); });
    EXPECT_FALSE(in);
    EXPECT_TRUE(out);
    EXPECT_EQ(0u, GCed::destructor_call_count);
    PreciseGC();
    EXPECT_EQ(0u, GCed::destructor_call_count);
    temporary_holder.Clear();
    PreciseGC();
    EXPECT_EQ(1u, GCed::destructor_call_count);
    runner.StartSynchronously();
    runner.Join();
  }
  EXPECT_FALSE(out);
}

TEST_F(CrossThreadPersistentTest, DestroyRacingWithGC) {
  // Destroy a handle on a different thread while at the same time invoking a
  // garbage collection on the original thread.
  subtle::CrossThreadPersistent<GCed> holder =
      MakeGarbageCollected<GCed>(GetAllocationHandle());
  Runner runner([&obj = holder]() { obj.Clear(); });
  EXPECT_TRUE(holder);
  runner.StartSynchronously();
  PreciseGC();
  runner.Join();
  EXPECT_FALSE(holder);
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/unittests/heap/cppgc/custom-spaces-unittest.cc                             0000664 0000000 0000000 00000021142 14746647661 0026051 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/allocation.h"
#include "include/cppgc/custom-space.h"
#include "src/heap/cppgc/heap-page.h"
#include "src/heap/cppgc/raw-heap.h"
#include "test/unittests/heap/cppgc/tests.h"

namespace cppgc {

class CustomSpace1 : public CustomSpace<CustomSpace1> {
 public:
  static constexpr size_t kSpaceIndex = 0;
};

class CustomSpace2 : public CustomSpace<CustomSpace2> {
 public:
  static constexpr size_t kSpaceIndex = 1;
};

namespace internal {

namespace {

size_t g_destructor_callcount;

class TestWithHeapWithCustomSpaces : public testing::TestWithPlatform {
 protected:
  TestWithHeapWithCustomSpaces() {
    Heap::HeapOptions options;
    options.custom_spaces.emplace_back(std::make_unique<CustomSpace1>());
    options.custom_spaces.emplace_back(std::make_unique<CustomSpace2>());
    heap_ = Heap::Create(platform_, std::move(options));
    g_destructor_callcount = 0;
  }

  void PreciseGC() {
    heap_->ForceGarbageCollectionSlow(
        ::testing::UnitTest::GetInstance()->current_test_info()->name(),
        "Testing", cppgc::Heap::StackState::kNoHeapPointers);
  }

  cppgc::Heap* GetHeap() const { return heap_.get(); }

 private:
  std::unique_ptr<cppgc::Heap> heap_;
};

class RegularGCed final : public GarbageCollected<RegularGCed> {
 public:
  void Trace(Visitor*) const {}
};

class CustomGCed1 final : public GarbageCollected<CustomGCed1> {
 public:
  ~CustomGCed1() { g_destructor_callcount++; }
  void Trace(Visitor*) const {}
};
class CustomGCed2 final : public GarbageCollected<CustomGCed2> {
 public:
  ~CustomGCed2() { g_destructor_callcount++; }
  void Trace(Visitor*) const {}
};

class CustomGCedBase : public GarbageCollected<CustomGCedBase> {
 public:
  void Trace(Visitor*) const {}
};
class CustomGCedFinal1 final : public CustomGCedBase {
 public:
  ~CustomGCedFinal1() { g_destructor_callcount++; }
};
class CustomGCedFinal2 final : public CustomGCedBase {
 public:
  ~CustomGCedFinal2() { g_destructor_callcount++; }
};

constexpr size_t kDoubleWord = 2 * sizeof(void*);

class alignas(kDoubleWord) CustomGCedWithDoubleWordAlignment final
    : public GarbageCollected<CustomGCedWithDoubleWordAlignment> {
 public:
  void Trace(Visitor*) const {}
};

}  // namespace

}  // namespace internal

template <>
struct SpaceTrait<internal::CustomGCed1> {
  using Space = CustomSpace1;
};

template <>
struct SpaceTrait<internal::CustomGCed2> {
  using Space = CustomSpace2;
};

template <typename T>
struct SpaceTrait<
    T, std::enable_if_t<std::is_base_of<internal::CustomGCedBase, T>::value>> {
  using Space = CustomSpace1;
};

template <>
struct SpaceTrait<internal::CustomGCedWithDoubleWordAlignment> {
  using Space = CustomSpace1;
};

namespace internal {

TEST_F(TestWithHeapWithCustomSpaces, AllocateOnCustomSpaces) {
  auto* regular =
      MakeGarbageCollected<RegularGCed>(GetHeap()->GetAllocationHandle());
  auto* custom1 =
      MakeGarbageCollected<CustomGCed1>(GetHeap()->GetAllocationHandle());
  auto* custom2 =
      MakeGarbageCollected<CustomGCed2>(GetHeap()->GetAllocationHandle());
  EXPECT_EQ(RawHeap::kNumberOfRegularSpaces,
            NormalPage::FromPayload(custom1)->space().index());
  EXPECT_EQ(RawHeap::kNumberOfRegularSpaces + 1,
            NormalPage::FromPayload(custom2)->space().index());
  EXPECT_EQ(static_cast<size_t>(RawHeap::RegularSpaceType::kNormal1),
            NormalPage::FromPayload(regular)->space().index());
}

TEST_F(TestWithHeapWithCustomSpaces, AllocateDoubleWordAlignedOnCustomSpace) {
  static constexpr size_t kAlignmentMask = kDoubleWord - 1;
  auto* custom_aligned =
      MakeGarbageCollected<CustomGCedWithDoubleWordAlignment>(
          GetHeap()->GetAllocationHandle());
  EXPECT_EQ(0u, reinterpret_cast<uintptr_t>(custom_aligned) & kAlignmentMask);
}

TEST_F(TestWithHeapWithCustomSpaces, DifferentSpacesUsesDifferentPages) {
  auto* regular =
      MakeGarbageCollected<RegularGCed>(GetHeap()->GetAllocationHandle());
  auto* custom1 =
      MakeGarbageCollected<CustomGCed1>(GetHeap()->GetAllocationHandle());
  auto* custom2 =
      MakeGarbageCollected<CustomGCed2>(GetHeap()->GetAllocationHandle());
  EXPECT_NE(NormalPage::FromPayload(regular), NormalPage::FromPayload(custom1));
  EXPECT_NE(NormalPage::FromPayload(regular), NormalPage::FromPayload(custom2));
  EXPECT_NE(NormalPage::FromPayload(custom1), NormalPage::FromPayload(custom2));
}

TEST_F(TestWithHeapWithCustomSpaces,
       AllocateOnCustomSpacesSpecifiedThroughBase) {
  auto* regular =
      MakeGarbageCollected<RegularGCed>(GetHeap()->GetAllocationHandle());
  auto* custom1 =
      MakeGarbageCollected<CustomGCedFinal1>(GetHeap()->GetAllocationHandle());
  auto* custom2 =
      MakeGarbageCollected<CustomGCedFinal2>(GetHeap()->GetAllocationHandle());
  EXPECT_EQ(RawHeap::kNumberOfRegularSpaces,
            NormalPage::FromPayload(custom1)->space().index());
  EXPECT_EQ(RawHeap::kNumberOfRegularSpaces,
            NormalPage::FromPayload(custom2)->space().index());
  EXPECT_EQ(static_cast<size_t>(RawHeap::RegularSpaceType::kNormal1),
            NormalPage::FromPayload(regular)->space().index());
}

TEST_F(TestWithHeapWithCustomSpaces, SweepCustomSpace) {
  MakeGarbageCollected<CustomGCedFinal1>(GetHeap()->GetAllocationHandle());
  MakeGarbageCollected<CustomGCedFinal2>(GetHeap()->GetAllocationHandle());
  MakeGarbageCollected<CustomGCed1>(GetHeap()->GetAllocationHandle());
  MakeGarbageCollected<CustomGCed2>(GetHeap()->GetAllocationHandle());
  EXPECT_EQ(0u, g_destructor_callcount);
  PreciseGC();
  EXPECT_EQ(4u, g_destructor_callcount);
}

}  // namespace internal

// Test custom space compactability.

class CompactableCustomSpace : public CustomSpace<CompactableCustomSpace> {
 public:
  static constexpr size_t kSpaceIndex = 0;
  static constexpr bool kSupportsCompaction = true;
};

class NotCompactableCustomSpace
    : public CustomSpace<NotCompactableCustomSpace> {
 public:
  static constexpr size_t kSpaceIndex = 1;
  static constexpr bool kSupportsCompaction = false;
};

class DefaultCompactableCustomSpace
    : public CustomSpace<DefaultCompactableCustomSpace> {
 public:
  static constexpr size_t kSpaceIndex = 2;
  // By default space are not compactable.
};

namespace internal {
namespace {

class TestWithHeapWithCompactableCustomSpaces
    : public testing::TestWithPlatform {
 protected:
  TestWithHeapWithCompactableCustomSpaces() {
    Heap::HeapOptions options;
    options.custom_spaces.emplace_back(
        std::make_unique<CompactableCustomSpace>());
    options.custom_spaces.emplace_back(
        std::make_unique<NotCompactableCustomSpace>());
    options.custom_spaces.emplace_back(
        std::make_unique<DefaultCompactableCustomSpace>());
    heap_ = Heap::Create(platform_, std::move(options));
    g_destructor_callcount = 0;
  }

  void PreciseGC() {
    heap_->ForceGarbageCollectionSlow("TestWithHeapWithCompactableCustomSpaces",
                                      "Testing",
                                      cppgc::Heap::StackState::kNoHeapPointers);
  }

  cppgc::Heap* GetHeap() const { return heap_.get(); }

 private:
  std::unique_ptr<cppgc::Heap> heap_;
};

class CompactableGCed final : public GarbageCollected<CompactableGCed> {
 public:
  void Trace(Visitor*) const {}
};
class NotCompactableGCed final : public GarbageCollected<NotCompactableGCed> {
 public:
  void Trace(Visitor*) const {}
};
class DefaultCompactableGCed final
    : public GarbageCollected<DefaultCompactableGCed> {
 public:
  void Trace(Visitor*) const {}
};

}  // namespace
}  // namespace internal

template <>
struct SpaceTrait<internal::CompactableGCed> {
  using Space = CompactableCustomSpace;
};
template <>
struct SpaceTrait<internal::NotCompactableGCed> {
  using Space = NotCompactableCustomSpace;
};
template <>
struct SpaceTrait<internal::DefaultCompactableGCed> {
  using Space = DefaultCompactableCustomSpace;
};

namespace internal {

TEST_F(TestWithHeapWithCompactableCustomSpaces,
       AllocateOnCompactableCustomSpaces) {
  auto* compactable =
      MakeGarbageCollected<CompactableGCed>(GetHeap()->GetAllocationHandle());
  auto* not_compactable = MakeGarbageCollected<NotCompactableGCed>(
      GetHeap()->GetAllocationHandle());
  auto* default_compactable = MakeGarbageCollected<DefaultCompactableGCed>(
      GetHeap()->GetAllocationHandle());
  EXPECT_TRUE(NormalPage::FromPayload(compactable)->space().is_compactable());
  EXPECT_FALSE(
      NormalPage::FromPayload(not_compactable)->space().is_compactable());
  EXPECT_FALSE(
      NormalPage::FromPayload(default_compactable)->space().is_compactable());
}

}  // namespace internal

}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/unittests/heap/cppgc/ephemeron-pair-unittest.cc                            0000664 0000000 0000000 00000024533 14746647661 0026205 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/ephemeron-pair.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/garbage-collected.h"
#include "include/cppgc/persistent.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/marking-visitor.h"
#include "src/heap/cppgc/stats-collector.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {
class GCed : public GarbageCollected<GCed> {
 public:
  void Trace(cppgc::Visitor*) const {}
};

class EphemeronHolder : public GarbageCollected<EphemeronHolder> {
 public:
  EphemeronHolder(GCed* key, GCed* value) : ephemeron_pair_(key, value) {}
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(ephemeron_pair_); }

  const EphemeronPair<GCed, GCed>& ephemeron_pair() const {
    return ephemeron_pair_;
  }

 private:
  EphemeronPair<GCed, GCed> ephemeron_pair_;
};

class EphemeronHolderTraceEphemeron
    : public GarbageCollected<EphemeronHolderTraceEphemeron> {
 public:
  EphemeronHolderTraceEphemeron(GCed* key, GCed* value)
      : ephemeron_pair_(key, value) {}
  void Trace(cppgc::Visitor* visitor) const {
    visitor->TraceEphemeron(ephemeron_pair_.key, &ephemeron_pair_.value);
  }

 private:
  EphemeronPair<GCed, GCed> ephemeron_pair_;
};

class EphemeronPairTest : public testing::TestWithHeap {
  static constexpr MarkingConfig IncrementalPreciseMarkingConfig = {
      CollectionType::kMajor, StackState::kNoHeapPointers,
      MarkingConfig::MarkingType::kIncremental};

 public:
  void FinishSteps() {
    while (!SingleStep()) {
    }
  }

  void FinishMarking() {
    marker_->FinishMarking(StackState::kNoHeapPointers);
    // Pretend do finish sweeping as StatsCollector verifies that Notify*
    // methods are called in the right order.
    Heap::From(GetHeap())->stats_collector()->NotifySweepingCompleted(
        GCConfig::SweepingType::kIncremental);
  }

  void InitializeMarker(HeapBase& heap, cppgc::Platform* platform) {
    marker_ = std::make_unique<Marker>(heap, platform,
                                       IncrementalPreciseMarkingConfig);
    marker_->StartMarking();
  }

  Marker* marker() const { return marker_.get(); }

 private:
  bool SingleStep() {
    return marker_->IncrementalMarkingStepForTesting(
        StackState::kNoHeapPointers);
  }

  std::unique_ptr<Marker> marker_;
};

// static
constexpr MarkingConfig EphemeronPairTest::IncrementalPreciseMarkingConfig;

}  // namespace

TEST_F(EphemeronPairTest, ValueMarkedWhenKeyIsMarked) {
  GCed* key = MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolder> holder =
      MakeGarbageCollected<EphemeronHolder>(GetAllocationHandle(), key, value);
  HeapObjectHeader::FromObject(key).TryMarkAtomic();
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishMarking();
  EXPECT_TRUE(HeapObjectHeader::FromObject(value).IsMarked());
}

TEST_F(EphemeronPairTest, ValueNotMarkedWhenKeyIsNotMarked) {
  GCed* key = MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolder> holder =
      MakeGarbageCollected<EphemeronHolder>(GetAllocationHandle(), key, value);
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishMarking();
  EXPECT_FALSE(HeapObjectHeader::FromObject(key).IsMarked());
  EXPECT_FALSE(HeapObjectHeader::FromObject(value).IsMarked());
}

TEST_F(EphemeronPairTest, ValueNotMarkedBeforeKey) {
  GCed* key = MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolder> holder =
      MakeGarbageCollected<EphemeronHolder>(GetAllocationHandle(), key, value);
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishSteps();
  EXPECT_FALSE(HeapObjectHeader::FromObject(value).IsMarked());
  HeapObjectHeader::FromObject(key).TryMarkAtomic();
  FinishMarking();
  EXPECT_TRUE(HeapObjectHeader::FromObject(value).IsMarked());
}

TEST_F(EphemeronPairTest, TraceEphemeronDispatch) {
  GCed* key = MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolderTraceEphemeron> holder =
      MakeGarbageCollected<EphemeronHolderTraceEphemeron>(GetAllocationHandle(),
                                                          key, value);
  HeapObjectHeader::FromObject(key).TryMarkAtomic();
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishMarking();
  EXPECT_TRUE(HeapObjectHeader::FromObject(value).IsMarked());
}

TEST_F(EphemeronPairTest, EmptyValue) {
  GCed* key = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolderTraceEphemeron> holder =
      MakeGarbageCollected<EphemeronHolderTraceEphemeron>(GetAllocationHandle(),
                                                          key, nullptr);
  HeapObjectHeader::FromObject(key).TryMarkAtomic();
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishMarking();
}

TEST_F(EphemeronPairTest, EmptyKey) {
  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolderTraceEphemeron> holder =
      MakeGarbageCollected<EphemeronHolderTraceEphemeron>(GetAllocationHandle(),
                                                          nullptr, value);
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishMarking();
  // Key is not alive and value should thus not be held alive.
  EXPECT_FALSE(HeapObjectHeader::FromObject(value).IsMarked());
}

using EphemeronPairGCTest = testing::TestWithHeap;

TEST_F(EphemeronPairGCTest, EphemeronPairValueIsCleared) {
  GCed* key = MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolder> holder =
      MakeGarbageCollected<EphemeronHolder>(GetAllocationHandle(), key, value);
  // The precise GC will not find the `key` anywhere and thus clear the
  // ephemeron.
  PreciseGC();
  EXPECT_EQ(nullptr, holder->ephemeron_pair().value.Get());
}

namespace {

class Mixin : public GarbageCollectedMixin {
 public:
  void Trace(Visitor* v) const override {}
};

class OtherMixin : public GarbageCollectedMixin {
 public:
  void Trace(Visitor* v) const override {}
};

class GCedWithMixin : public GarbageCollected<GCedWithMixin>,
                      public OtherMixin,
                      public Mixin {
 public:
  void Trace(Visitor* v) const override {
    OtherMixin::Trace(v);
    Mixin::Trace(v);
  }
};

class EphemeronHolderWithMixins
    : public GarbageCollected<EphemeronHolderWithMixins> {
 public:
  EphemeronHolderWithMixins(Mixin* key, Mixin* value)
      : ephemeron_pair_(key, value) {}
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(ephemeron_pair_); }

  const EphemeronPair<Mixin, Mixin>& ephemeron_pair() const {
    return ephemeron_pair_;
  }

 private:
  EphemeronPair<Mixin, Mixin> ephemeron_pair_;
};

}  // namespace

TEST_F(EphemeronPairTest, EphemeronPairWithMixinKey) {
  GCedWithMixin* key =
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle());
  GCedWithMixin* value =
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle());
  Persistent<EphemeronHolderWithMixins> holder =
      MakeGarbageCollected<EphemeronHolderWithMixins>(GetAllocationHandle(),
                                                      key, value);
  EXPECT_NE(static_cast<void*>(key), holder->ephemeron_pair().key.Get());
  EXPECT_NE(static_cast<void*>(value), holder->ephemeron_pair().value.Get());
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishSteps();
  EXPECT_FALSE(HeapObjectHeader::FromObject(value).IsMarked());
  EXPECT_TRUE(HeapObjectHeader::FromObject(key).TryMarkAtomic());
  FinishMarking();
  EXPECT_TRUE(HeapObjectHeader::FromObject(value).IsMarked());
}

TEST_F(EphemeronPairTest, EphemeronPairWithEmptyMixinValue) {
  GCedWithMixin* key =
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle());
  Persistent<EphemeronHolderWithMixins> holder =
      MakeGarbageCollected<EphemeronHolderWithMixins>(GetAllocationHandle(),
                                                      key, nullptr);
  EXPECT_NE(static_cast<void*>(key), holder->ephemeron_pair().key.Get());
  EXPECT_TRUE(HeapObjectHeader::FromObject(key).TryMarkAtomic());
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishSteps();
  FinishMarking();
}

namespace {

class KeyWithCallback final : public GarbageCollected<KeyWithCallback> {
 public:
  template <typename Callback>
  explicit KeyWithCallback(Callback callback) {
    callback(this);
  }
  void Trace(Visitor*) const {}
};

class EphemeronHolderForKeyWithCallback final
    : public GarbageCollected<EphemeronHolderForKeyWithCallback> {
 public:
  EphemeronHolderForKeyWithCallback(KeyWithCallback* key, GCed* value)
      : ephemeron_pair_(key, value) {}
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(ephemeron_pair_); }

 private:
  const EphemeronPair<KeyWithCallback, GCed> ephemeron_pair_;
};

}  // namespace

TEST_F(EphemeronPairTest, EphemeronPairWithKeyInConstruction) {
  GCed* value = MakeGarbageCollected<GCed>(GetAllocationHandle());
  Persistent<EphemeronHolderForKeyWithCallback> holder;
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get());
  FinishSteps();
  MakeGarbageCollected<KeyWithCallback>(
      GetAllocationHandle(), [this, &holder, value](KeyWithCallback* thiz) {
        // The test doesn't use conservative stack scanning to retain key to
        // avoid retaining value as a side effect.
        EXPECT_TRUE(HeapObjectHeader::FromObject(thiz).TryMarkAtomic());
        holder = MakeGarbageCollected<EphemeronHolderForKeyWithCallback>(
            GetAllocationHandle(), thiz, value);
        // Finishing marking at this point will leave an ephemeron pair
        // reachable where the key is still in construction. The GC needs to
        // mark the value for such pairs as live in the atomic pause as they key
        // is considered live.
        FinishMarking();
      });
  EXPECT_TRUE(HeapObjectHeader::FromObject(value).IsMarked());
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                     node-23.7.0/deps/v8/test/unittests/heap/cppgc/explicit-management-unittest.cc                       0000664 0000000 0000000 00000020773 14746647661 0027227 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/explicit-management.h"

#include "include/cppgc/garbage-collected.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/heap-base.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/heap-space.h"
#include "src/heap/cppgc/page-memory.h"
#include "src/heap/cppgc/sweeper.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

class ExplicitManagementTest : public testing::TestWithHeap {
 public:
  size_t AllocatedObjectSize() const {
    auto* heap = Heap::From(GetHeap());
    heap->stats_collector()->NotifySafePointForTesting();
    return heap->stats_collector()->allocated_object_size();
  }

  void ResetLinearAllocationBuffers() const {
    return Heap::From(GetHeap())
        ->object_allocator()
        .ResetLinearAllocationBuffers();
  }

  void TearDown() override {
    PreciseGC();
    TestWithHeap::TearDown();
  }
};

namespace {

class DynamicallySized final : public GarbageCollected<DynamicallySized> {
 public:
  void Trace(Visitor*) const {}
};

}  // namespace

TEST_F(ExplicitManagementTest, FreeRegularObjectToLAB) {
  auto* o =
      MakeGarbageCollected<DynamicallySized>(GetHeap()->GetAllocationHandle());
  const auto& space = NormalPageSpace::From(BasePage::FromPayload(o)->space());
  const auto& lab = space.linear_allocation_buffer();
  auto& header = HeapObjectHeader::FromObject(o);
  const size_t size = header.AllocatedSize();
  Address needle = reinterpret_cast<Address>(&header);
  // Test checks freeing to LAB.
  ASSERT_EQ(lab.start(), header.ObjectEnd());
  const size_t lab_size_before_free = lab.size();
  const size_t allocated_size_before = AllocatedObjectSize();
  subtle::FreeUnreferencedObject(GetHeapHandle(), *o);
  EXPECT_EQ(lab.start(), reinterpret_cast<Address>(needle));
  EXPECT_EQ(lab_size_before_free + size, lab.size());
  // LAB is included in allocated object size, so no change is expected.
  EXPECT_EQ(allocated_size_before, AllocatedObjectSize());
  EXPECT_FALSE(space.free_list().ContainsForTesting({needle, size}));
}

TEST_F(ExplicitManagementTest, FreeRegularObjectToFreeList) {
  auto* o =
      MakeGarbageCollected<DynamicallySized>(GetHeap()->GetAllocationHandle());
  const auto& space = NormalPageSpace::From(BasePage::FromPayload(o)->space());
  const auto& lab = space.linear_allocation_buffer();
  auto& header = HeapObjectHeader::FromObject(o);
  const size_t size = header.AllocatedSize();
  Address needle = reinterpret_cast<Address>(&header);
  // Test checks freeing to free list.
  ResetLinearAllocationBuffers();
  ASSERT_EQ(lab.start(), nullptr);
  const size_t allocated_size_before = AllocatedObjectSize();
  subtle::FreeUnreferencedObject(GetHeapHandle(), *o);
  EXPECT_EQ(lab.start(), nullptr);
  EXPECT_EQ(allocated_size_before - size, AllocatedObjectSize());
  EXPECT_TRUE(space.free_list().ContainsForTesting({needle, size}));
}

TEST_F(ExplicitManagementTest, FreeLargeObject) {
  auto* o = MakeGarbageCollected<DynamicallySized>(
      GetHeap()->GetAllocationHandle(),
      AdditionalBytes(kLargeObjectSizeThreshold));
  const auto* page = BasePage::FromPayload(o);
  auto& heap = page->heap();
  ASSERT_TRUE(page->is_large());
  ConstAddress needle = reinterpret_cast<ConstAddress>(o);
  const size_t size = LargePage::From(page)->PayloadSize();
  EXPECT_TRUE(heap.page_backend()->Lookup(needle));
  const size_t allocated_size_before = AllocatedObjectSize();
  subtle::FreeUnreferencedObject(GetHeapHandle(), *o);
  EXPECT_FALSE(heap.page_backend()->Lookup(needle));
  EXPECT_EQ(allocated_size_before - size, AllocatedObjectSize());
}

TEST_F(ExplicitManagementTest, FreeBailsOutDuringGC) {
  const size_t snapshot_before = AllocatedObjectSize();
  auto* o =
      MakeGarbageCollected<DynamicallySized>(GetHeap()->GetAllocationHandle());
  auto& heap = BasePage::FromPayload(o)->heap();
  heap.SetInAtomicPauseForTesting(true);
  const size_t allocated_size_before = AllocatedObjectSize();
  subtle::FreeUnreferencedObject(GetHeapHandle(), *o);
  EXPECT_EQ(allocated_size_before, AllocatedObjectSize());
  heap.SetInAtomicPauseForTesting(false);
  ResetLinearAllocationBuffers();
  subtle::FreeUnreferencedObject(GetHeapHandle(), *o);
  EXPECT_EQ(snapshot_before, AllocatedObjectSize());
}

TEST_F(ExplicitManagementTest, GrowAtLAB) {
  auto* o =
      MakeGarbageCollected<DynamicallySized>(GetHeap()->GetAllocationHandle());
  auto& header = HeapObjectHeader::FromObject(o);
  ASSERT_TRUE(!header.IsLargeObject());
  constexpr size_t size_of_o = sizeof(DynamicallySized);
  constexpr size_t kFirstDelta = 8;
  EXPECT_TRUE(subtle::Resize(*o, AdditionalBytes(kFirstDelta)));
  EXPECT_EQ(RoundUp<kAllocationGranularity>(size_of_o + kFirstDelta),
            header.ObjectSize());
  constexpr size_t kSecondDelta = 9;
  EXPECT_TRUE(subtle::Resize(*o, AdditionalBytes(kSecondDelta)));
  EXPECT_EQ(RoundUp<kAllocationGranularity>(size_of_o + kSecondDelta),
            header.ObjectSize());
  // Second round didn't actually grow object because alignment restrictions
  // already forced it to be large enough on the first Grow().
  EXPECT_EQ(RoundUp<kAllocationGranularity>(size_of_o + kFirstDelta),
            RoundUp<kAllocationGranularity>(size_of_o + kSecondDelta));
  constexpr size_t kThirdDelta = 16;
  EXPECT_TRUE(subtle::Resize(*o, AdditionalBytes(kThirdDelta)));
  EXPECT_EQ(RoundUp<kAllocationGranularity>(size_of_o + kThirdDelta),
            header.ObjectSize());
}

TEST_F(ExplicitManagementTest, GrowShrinkAtLAB) {
  auto* o =
      MakeGarbageCollected<DynamicallySized>(GetHeap()->GetAllocationHandle());
  auto& header = HeapObjectHeader::FromObject(o);
  ASSERT_TRUE(!header.IsLargeObject());
  constexpr size_t size_of_o = sizeof(DynamicallySized);
  constexpr size_t kDelta = 27;
  EXPECT_TRUE(subtle::Resize(*o, AdditionalBytes(kDelta)));
  EXPECT_EQ(RoundUp<kAllocationGranularity>(size_of_o + kDelta),
            header.ObjectSize());
  EXPECT_TRUE(subtle::Resize(*o, AdditionalBytes(0)));
  EXPECT_EQ(RoundUp<kAllocationGranularity>(size_of_o), header.ObjectSize());
}

TEST_F(ExplicitManagementTest, ShrinkFreeList) {
  auto* o = MakeGarbageCollected<DynamicallySized>(
      GetHeap()->GetAllocationHandle(),
      AdditionalBytes(ObjectAllocator::kSmallestSpaceSize));
  const auto& space = NormalPageSpace::From(BasePage::FromPayload(o)->space());
  // Force returning to free list by removing the LAB.
  ResetLinearAllocationBuffers();
  auto& header = HeapObjectHeader::FromObject(o);
  ASSERT_TRUE(!header.IsLargeObject());
  constexpr size_t size_of_o = sizeof(DynamicallySized);
  EXPECT_TRUE(subtle::Resize(*o, AdditionalBytes(0)));
  EXPECT_EQ(RoundUp<kAllocationGranularity>(size_of_o), header.ObjectSize());
  EXPECT_TRUE(space.free_list().ContainsForTesting(
      {header.ObjectEnd(), ObjectAllocator::kSmallestSpaceSize}));
}

TEST_F(ExplicitManagementTest, ShrinkFreeListBailoutAvoidFragmentation) {
  auto* o = MakeGarbageCollected<DynamicallySized>(
      GetHeap()->GetAllocationHandle(),
      AdditionalBytes(ObjectAllocator::kSmallestSpaceSize - 1));
  const auto& space = NormalPageSpace::From(BasePage::FromPayload(o)->space());
  // Force returning to free list by removing the LAB.
  ResetLinearAllocationBuffers();
  auto& header = HeapObjectHeader::FromObject(o);
  ASSERT_TRUE(!header.IsLargeObject());
  constexpr size_t size_of_o = sizeof(DynamicallySized);
  EXPECT_TRUE(subtle::Resize(*o, AdditionalBytes(0)));
  EXPECT_EQ(RoundUp<kAllocationGranularity>(
                size_of_o + ObjectAllocator::kSmallestSpaceSize - 1),
            header.ObjectSize());
  EXPECT_FALSE(space.free_list().ContainsForTesting(
      {header.ObjectStart() + RoundUp<kAllocationGranularity>(size_of_o),
       ObjectAllocator::kSmallestSpaceSize - 1}));
}

TEST_F(ExplicitManagementTest, ResizeBailsOutDuringGC) {
  auto* o = MakeGarbageCollected<DynamicallySized>(
      GetHeap()->GetAllocationHandle(),
      AdditionalBytes(ObjectAllocator::kSmallestSpaceSize - 1));
  auto& heap = BasePage::FromPayload(o)->heap();
  heap.SetInAtomicPauseForTesting(true);
  const size_t allocated_size_before = AllocatedObjectSize();
  // Grow:
  EXPECT_FALSE(
      subtle::Resize(*o, AdditionalBytes(ObjectAllocator::kSmallestSpaceSize)));
  // Shrink:
  EXPECT_FALSE(subtle::Resize(*o, AdditionalBytes(0)));
  EXPECT_EQ(allocated_size_before, AllocatedObjectSize());
  heap.SetInAtomicPauseForTesting(false);
}

}  // namespace internal
}  // namespace cppgc
     node-23.7.0/deps/v8/test/unittests/heap/cppgc/finalizer-trait-unittest.cc                           0000664 0000000 0000000 00000006476 14746647661 0026404 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/internal/finalizer-trait.h"

#include <type_traits>

#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

// Trivially destructible types.
class TypeWithoutDestructor final {};
class TypeWithPrimitive final {
 public:
  int foo = 0;
};

class InvokeCounter {
 public:
  static size_t kCallcount;
  static void Reset() { kCallcount = 0; }
  static void Invoke() { kCallcount++; }
};

size_t InvokeCounter::kCallcount = 0;

// Regular C++ use cases.

class TypeWithDestructor final : public InvokeCounter {
 public:
  ~TypeWithDestructor() { Invoke(); }
};

class TypeWithVirtualDestructorBase {
 public:
  virtual ~TypeWithVirtualDestructorBase() = default;
};

class TypeWithVirtualDestructorChild final
    : public TypeWithVirtualDestructorBase,
      public InvokeCounter {
 public:
  ~TypeWithVirtualDestructorChild() final { Invoke(); }
};

// Manual dispatch to avoid vtables.

class TypeWithCustomFinalizationMethod final : public InvokeCounter {
 public:
  void FinalizeGarbageCollectedObject() { Invoke(); }
};

class TypeWithCustomFinalizationMethodAtBase {
 public:
  void FinalizeGarbageCollectedObject();
};

class TypeWithCustomFinalizationMethodAtBaseChild
    : public TypeWithCustomFinalizationMethodAtBase,
      public InvokeCounter {
 public:
  ~TypeWithCustomFinalizationMethodAtBaseChild() { Invoke(); }
};

void TypeWithCustomFinalizationMethodAtBase::FinalizeGarbageCollectedObject() {
  // The test knows that base is only inherited by a single child. In practice
  // users can maintain a map of valid types in already existing storage.
  static_cast<TypeWithCustomFinalizationMethodAtBaseChild*>(this)
      ->~TypeWithCustomFinalizationMethodAtBaseChild();
}

template <typename Type>
void ExpectFinalizerIsInvoked(Type* object) {
  InvokeCounter::Reset();
  EXPECT_NE(nullptr, FinalizerTrait<Type>::kCallback);
  FinalizerTrait<Type>::kCallback(object);
  EXPECT_EQ(1u, InvokeCounter::kCallcount);
  operator delete(object);
}

}  // namespace

TEST(FinalizerTrait, TypeWithoutDestructorHasNoFinalizer) {
  static_assert(std::is_trivially_destructible<TypeWithoutDestructor>::value,
                "trivially destructible");
  EXPECT_EQ(nullptr, FinalizerTrait<TypeWithoutDestructor>::kCallback);
}

TEST(FinalizerTrait, TypeWithPrimitiveHasNoFinalizer) {
  static_assert(std::is_trivially_destructible<TypeWithPrimitive>::value,
                "trivially destructible");
  EXPECT_EQ(nullptr, FinalizerTrait<TypeWithPrimitive>::kCallback);
}

TEST(FinalizerTrait, FinalizerForTypeWithDestructor) {
  ExpectFinalizerIsInvoked(new TypeWithDestructor());
}

TEST(FinalizerTrait, FinalizerForTypeWithVirtualBaseDtor) {
  TypeWithVirtualDestructorBase* base = new TypeWithVirtualDestructorChild();
  ExpectFinalizerIsInvoked(base);
}

TEST(FinalizerTrait, FinalizerForCustomFinalizationMethod) {
  ExpectFinalizerIsInvoked(new TypeWithCustomFinalizationMethod());
}

TEST(FinalizerTrait, FinalizerForCustomFinalizationMethodInBase) {
  TypeWithCustomFinalizationMethodAtBase* base =
      new TypeWithCustomFinalizationMethodAtBaseChild();
  ExpectFinalizerIsInvoked(base);
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                  node-23.7.0/deps/v8/test/unittests/heap/cppgc/free-list-unittest.cc                                 0000664 0000000 0000000 00000012322 14746647661 0025155 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/free-list.h"

#include <memory>
#include <numeric>
#include <vector>

#include "src/base/bits.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {
namespace {

class Block {
 public:
  Block() = default;
  explicit Block(size_t size) : address_(calloc(1, size)), size_(size) {}

  Block(Block&& other) V8_NOEXCEPT : address_(other.address_),
                                     size_(other.size_) {
    other.address_ = nullptr;
    other.size_ = 0;
  }

  Block& operator=(Block&& other) V8_NOEXCEPT {
    address_ = other.address_;
    size_ = other.size_;
    other.address_ = nullptr;
    other.size_ = 0;
    return *this;
  }

  ~Block() { free(address_); }

  void* Address() const { return address_; }
  size_t Size() const { return size_; }

 private:
  void* address_ = nullptr;
  size_t size_ = 0;
};

std::vector<Block> CreateEntries() {
  static constexpr size_t kFreeListEntrySizeLog2 =
      v8::base::bits::WhichPowerOfTwo(kFreeListEntrySize);
  std::vector<Block> vector;
  vector.reserve(kPageSizeLog2);
  for (size_t i = kFreeListEntrySizeLog2; i < kPageSizeLog2; ++i) {
    vector.emplace_back(static_cast<size_t>(1u) << i);
  }
  return vector;
}

FreeList CreatePopulatedFreeList(const std::vector<Block>& blocks) {
  FreeList list;
  for (const auto& block : blocks) {
    list.Add({block.Address(), block.Size()});
  }
  return list;
}

}  // namespace

TEST(FreeListTest, Empty) {
  FreeList list;
  EXPECT_TRUE(list.IsEmpty());
  EXPECT_EQ(0u, list.Size());

  auto block = list.Allocate(16);
  EXPECT_EQ(nullptr, block.address);
  EXPECT_EQ(0u, block.size);
}

TEST(FreeListTest, Add) {
  auto blocks = CreateEntries();
  FreeList list = CreatePopulatedFreeList(blocks);
  EXPECT_FALSE(list.IsEmpty());
  const size_t allocated_size = std::accumulate(
      blocks.cbegin(), blocks.cend(), 0u,
      [](size_t acc, const Block& b) { return acc + b.Size(); });
  EXPECT_EQ(allocated_size, list.Size());
}

TEST(FreeListTest, AddWasted) {
  FreeList list;
  alignas(HeapObjectHeader) uint8_t buffer[sizeof(HeapObjectHeader)];
  list.Add({buffer, sizeof(buffer)});
  EXPECT_EQ(0u, list.Size());
  EXPECT_TRUE(list.IsEmpty());
}

TEST(FreeListTest, Clear) {
  auto blocks = CreateEntries();
  FreeList list = CreatePopulatedFreeList(blocks);
  list.Clear();
  EXPECT_EQ(0u, list.Size());
  EXPECT_TRUE(list.IsEmpty());
}

TEST(FreeListTest, Move) {
  {
    auto blocks = CreateEntries();
    FreeList list1 = CreatePopulatedFreeList(blocks);
    const size_t expected_size = list1.Size();
    FreeList list2 = std::move(list1);
    EXPECT_EQ(expected_size, list2.Size());
    EXPECT_FALSE(list2.IsEmpty());
    EXPECT_EQ(0u, list1.Size());
    EXPECT_TRUE(list1.IsEmpty());
  }
  {
    auto blocks1 = CreateEntries();
    FreeList list1 = CreatePopulatedFreeList(blocks1);
    const size_t expected_size = list1.Size();

    auto blocks2 = CreateEntries();
    FreeList list2 = CreatePopulatedFreeList(blocks2);

    list2 = std::move(list1);
    EXPECT_EQ(expected_size, list2.Size());
    EXPECT_FALSE(list2.IsEmpty());
    EXPECT_EQ(0u, list1.Size());
    EXPECT_TRUE(list1.IsEmpty());
  }
}

TEST(FreeListTest, Append) {
  auto blocks1 = CreateEntries();
  FreeList list1 = CreatePopulatedFreeList(blocks1);
  const size_t list1_size = list1.Size();

  auto blocks2 = CreateEntries();
  FreeList list2 = CreatePopulatedFreeList(blocks2);
  const size_t list2_size = list1.Size();

  list2.Append(std::move(list1));
  EXPECT_EQ(list1_size + list2_size, list2.Size());
  EXPECT_FALSE(list2.IsEmpty());
  EXPECT_EQ(0u, list1.Size());
  EXPECT_TRUE(list1.IsEmpty());
}

#ifdef DEBUG
TEST(FreeListTest, AppendSelf) {
  auto blocks = CreateEntries();
  FreeList list = CreatePopulatedFreeList(blocks);
  // Appending a free list to itself should fail in debug builds.
  EXPECT_DEATH_IF_SUPPORTED({ list.Append(std::move(list)); }, "");
}
#endif

TEST(FreeListTest, Contains) {
  auto blocks = CreateEntries();
  FreeList list = CreatePopulatedFreeList(blocks);

  for (const auto& block : blocks) {
    EXPECT_TRUE(list.ContainsForTesting({block.Address(), block.Size()}));
  }
}

TEST(FreeListTest, Allocate) {
  static constexpr size_t kFreeListEntrySizeLog2 =
      v8::base::bits::WhichPowerOfTwo(kFreeListEntrySize);

  std::vector<Block> blocks;
  blocks.reserve(kPageSizeLog2);
  for (size_t i = kFreeListEntrySizeLog2; i < kPageSizeLog2; ++i) {
    blocks.emplace_back(static_cast<size_t>(1u) << i);
  }

  FreeList list = CreatePopulatedFreeList(blocks);

  // Try allocate from the biggest block.
  for (auto it = blocks.rbegin(); it < blocks.rend(); ++it) {
    const auto result = list.Allocate(it->Size());
    EXPECT_EQ(it->Address(), result.address);
    EXPECT_EQ(it->Size(), result.size);
  }

  EXPECT_EQ(0u, list.Size());
  EXPECT_TRUE(list.IsEmpty());

  // Check that allocation fails for empty list:
  const auto empty_block = list.Allocate(8);
  EXPECT_EQ(nullptr, empty_block.address);
  EXPECT_EQ(0u, empty_block.size);
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/unittests/heap/cppgc/garbage-collected-unittest.cc                         0000664 0000000 0000000 00000021224 14746647661 0026610 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/garbage-collected.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/type-traits.h"
#include "src/base/platform/mutex.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/heap.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class GCed : public GarbageCollected<GCed> {
 public:
  void Trace(Visitor*) const {}
};
class NotGCed {};
class Mixin : public GarbageCollectedMixin {};
class GCedWithMixin : public GarbageCollected<GCedWithMixin>, public Mixin {};
class OtherMixin : public GarbageCollectedMixin {};
class MergedMixins : public Mixin, public OtherMixin {
 public:
  void Trace(cppgc::Visitor* visitor) const override {
    Mixin::Trace(visitor);
    OtherMixin::Trace(visitor);
  }
};
class GCWithMergedMixins : public GCed, public MergedMixins {
 public:
  void Trace(cppgc::Visitor* visitor) const override {
    MergedMixins::Trace(visitor);
  }
};

class GarbageCollectedTestWithHeap
    : public testing::TestSupportingAllocationOnly {};

}  // namespace

TEST(GarbageCollectedTest, GarbageCollectedTrait) {
  static_assert(!IsGarbageCollectedTypeV<int>);
  static_assert(!IsGarbageCollectedTypeV<NotGCed>);
  static_assert(IsGarbageCollectedTypeV<GCed>);
  static_assert(!IsGarbageCollectedTypeV<Mixin>);
  static_assert(IsGarbageCollectedTypeV<GCedWithMixin>);
  static_assert(!IsGarbageCollectedTypeV<MergedMixins>);
  static_assert(IsGarbageCollectedTypeV<GCWithMergedMixins>);
}

TEST(GarbageCollectedTest, GarbageCollectedMixinTrait) {
  static_assert(!IsGarbageCollectedMixinTypeV<int>);
  static_assert(!IsGarbageCollectedMixinTypeV<GCed>);
  static_assert(!IsGarbageCollectedMixinTypeV<NotGCed>);
  static_assert(IsGarbageCollectedMixinTypeV<Mixin>);
  static_assert(!IsGarbageCollectedMixinTypeV<GCedWithMixin>);
  static_assert(IsGarbageCollectedMixinTypeV<MergedMixins>);
  static_assert(!IsGarbageCollectedMixinTypeV<GCWithMergedMixins>);
}

TEST(GarbageCollectedTest, GarbageCollectedOrMixinTrait) {
  static_assert(!IsGarbageCollectedOrMixinTypeV<int>);
  static_assert(IsGarbageCollectedOrMixinTypeV<GCed>);
  static_assert(!IsGarbageCollectedOrMixinTypeV<NotGCed>);
  static_assert(IsGarbageCollectedOrMixinTypeV<Mixin>);
  static_assert(IsGarbageCollectedOrMixinTypeV<GCedWithMixin>);
  static_assert(IsGarbageCollectedOrMixinTypeV<MergedMixins>);
  static_assert(IsGarbageCollectedOrMixinTypeV<GCWithMergedMixins>);
}

TEST(GarbageCollectedTest, GarbageCollectedWithMixinTrait) {
  static_assert(!IsGarbageCollectedWithMixinTypeV<int>);
  static_assert(!IsGarbageCollectedWithMixinTypeV<GCed>);
  static_assert(!IsGarbageCollectedWithMixinTypeV<NotGCed>);
  static_assert(!IsGarbageCollectedWithMixinTypeV<Mixin>);
  static_assert(IsGarbageCollectedWithMixinTypeV<GCedWithMixin>);
  static_assert(!IsGarbageCollectedWithMixinTypeV<MergedMixins>);
  static_assert(IsGarbageCollectedWithMixinTypeV<GCWithMergedMixins>);
}

namespace {

class ForwardDeclaredType;

}  // namespace

TEST(GarbageCollectedTest, CompleteTypeTrait) {
  static_assert(IsCompleteV<GCed>);
  static_assert(!IsCompleteV<ForwardDeclaredType>);
}

TEST_F(GarbageCollectedTestWithHeap, GetObjectStartReturnsCurrentAddress) {
  GCed* gced = MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCedWithMixin* gced_with_mixin =
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle());
  const void* base_object_payload = TraceTrait<Mixin>::GetTraceDescriptor(
                                        static_cast<Mixin*>(gced_with_mixin))
                                        .base_object_payload;
  EXPECT_EQ(gced_with_mixin, base_object_payload);
  EXPECT_NE(gced, base_object_payload);
}

namespace {

class GCedWithPostConstructionCallback final : public GCed {
 public:
  static size_t cb_callcount;
  GCedWithPostConstructionCallback() { cb_callcount = 0; }
};
size_t GCedWithPostConstructionCallback::cb_callcount;

class MixinWithPostConstructionCallback {
 public:
  static size_t cb_callcount;
  MixinWithPostConstructionCallback() { cb_callcount = 0; }
  using MarkerForMixinWithPostConstructionCallback = int;
};
size_t MixinWithPostConstructionCallback::cb_callcount;

class GCedWithMixinWithPostConstructionCallback final
    : public GCed,
      public MixinWithPostConstructionCallback {};

}  // namespace
}  // namespace internal

template <>
struct PostConstructionCallbackTrait<
    internal::GCedWithPostConstructionCallback> {
  static void Call(internal::GCedWithPostConstructionCallback* object) {
    EXPECT_FALSE(
        internal::HeapObjectHeader::FromObject(object).IsInConstruction());
    internal::GCedWithPostConstructionCallback::cb_callcount++;
  }
};

template <typename T>
struct PostConstructionCallbackTrait<
    T, std::void_t<typename T::MarkerForMixinWithPostConstructionCallback>> {
  // The parameter could just be T*.
  static void Call(
      internal::GCedWithMixinWithPostConstructionCallback* object) {
    EXPECT_FALSE(
        internal::HeapObjectHeader::FromObject(object).IsInConstruction());
    internal::GCedWithMixinWithPostConstructionCallback::cb_callcount++;
  }
};

namespace internal {

TEST_F(GarbageCollectedTestWithHeap, PostConstructionCallback) {
  EXPECT_EQ(0u, GCedWithPostConstructionCallback::cb_callcount);
  MakeGarbageCollected<GCedWithPostConstructionCallback>(GetAllocationHandle());
  EXPECT_EQ(1u, GCedWithPostConstructionCallback::cb_callcount);
}

TEST_F(GarbageCollectedTestWithHeap, PostConstructionCallbackForMixin) {
  EXPECT_EQ(0u, MixinWithPostConstructionCallback::cb_callcount);
  MakeGarbageCollected<GCedWithMixinWithPostConstructionCallback>(
      GetAllocationHandle());
  EXPECT_EQ(1u, MixinWithPostConstructionCallback::cb_callcount);
}

namespace {

int GetDummyValue() {
  static v8::base::Mutex mutex;
  static int ret = 43;
  // Global lock access to avoid reordering.
  v8::base::MutexGuard guard(&mutex);
  return ret;
}

class CheckObjectInConstructionBeforeInitializerList final
    : public GarbageCollected<CheckObjectInConstructionBeforeInitializerList> {
 public:
  CheckObjectInConstructionBeforeInitializerList()
      : in_construction_before_initializer_list_(
            HeapObjectHeader::FromObject(this).IsInConstruction()),
        unused_int_(GetDummyValue()) {
    EXPECT_TRUE(in_construction_before_initializer_list_);
    EXPECT_TRUE(HeapObjectHeader::FromObject(this).IsInConstruction());
  }

  void Trace(Visitor*) const {}

 private:
  bool in_construction_before_initializer_list_;
  int unused_int_;
};

class CheckMixinInConstructionBeforeInitializerList
    : public GarbageCollectedMixin {
 public:
  explicit CheckMixinInConstructionBeforeInitializerList(void* payload_start)
      : in_construction_before_initializer_list_(
            HeapObjectHeader::FromObject(payload_start).IsInConstruction()),
        unused_int_(GetDummyValue()) {
    EXPECT_TRUE(in_construction_before_initializer_list_);
    EXPECT_TRUE(HeapObjectHeader::FromObject(payload_start).IsInConstruction());
  }

  void Trace(Visitor*) const override {}

 private:
  bool in_construction_before_initializer_list_;
  int unused_int_;
};

class UnmanagedMixinForcingVTable {
 protected:
  virtual void ForceVTable() {}
};

class CheckGCedWithMixinInConstructionBeforeInitializerList
    : public GarbageCollected<
          CheckGCedWithMixinInConstructionBeforeInitializerList>,
      public UnmanagedMixinForcingVTable,
      public CheckMixinInConstructionBeforeInitializerList {
 public:
  CheckGCedWithMixinInConstructionBeforeInitializerList()
      : CheckMixinInConstructionBeforeInitializerList(this) {
    // Ensure that compiler indeed generated an inner object.
    CHECK_NE(
        this,
        static_cast<void*>(
            static_cast<CheckMixinInConstructionBeforeInitializerList*>(this)));
  }
};

}  // namespace

TEST_F(GarbageCollectedTestWithHeap, GarbageCollectedInConstructionDuringCtor) {
  MakeGarbageCollected<CheckObjectInConstructionBeforeInitializerList>(
      GetAllocationHandle());
}

TEST_F(GarbageCollectedTestWithHeap,
       GarbageCollectedMixinInConstructionDuringCtor) {
  MakeGarbageCollected<CheckGCedWithMixinInConstructionBeforeInitializerList>(
      GetAllocationHandle());
}

namespace {

struct MixinA : GarbageCollectedMixin {};
struct MixinB : GarbageCollectedMixin {};
struct GCed1 : GarbageCollected<GCed>, MixinA, MixinB {};
struct GCed2 : MixinA, MixinB {};

static_assert(
    sizeof(GCed1) == sizeof(GCed2),
    "Check that empty base optimization always works for GarbageCollected");
}  // namespace

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/unittests/heap/cppgc/gc-info-unittest.cc                                   0000664 0000000 0000000 00000023475 14746647661 0024620 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/internal/gc-info.h"

#include <type_traits>

#include "include/cppgc/platform.h"
#include "src/base/page-allocator.h"
#include "src/base/platform/platform.h"
#include "src/heap/cppgc/gc-info-table.h"
#include "src/heap/cppgc/platform.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

constexpr GCInfo GetEmptyGCInfo() { return {nullptr, nullptr, nullptr}; }

class GCInfoTableTest : public ::testing::Test {
 public:
  GCInfoTableTest()
      : table_(std::make_unique<GCInfoTable>(page_allocator_, oom_handler_)) {}

  GCInfoIndex RegisterNewGCInfoForTesting(const GCInfo& info) {
    // Unused registered index will result in registering a new index.
    std::atomic<GCInfoIndex> registered_index{0};
    return table().RegisterNewGCInfo(registered_index, info);
  }

  GCInfoTable& table() { return *table_; }
  const GCInfoTable& table() const { return *table_; }

 private:
  v8::base::PageAllocator page_allocator_;
  FatalOutOfMemoryHandler oom_handler_;
  std::unique_ptr<GCInfoTable> table_;
};

using GCInfoTableDeathTest = GCInfoTableTest;

}  // namespace

TEST_F(GCInfoTableTest, InitialEmpty) {
  EXPECT_EQ(GCInfoTable::kMinIndex, table().NumberOfGCInfos());
}

TEST_F(GCInfoTableTest, ResizeToMaxIndex) {
  GCInfo info = GetEmptyGCInfo();
  for (GCInfoIndex i = GCInfoTable::kMinIndex; i < GCInfoTable::kMaxIndex;
       i++) {
    GCInfoIndex index = RegisterNewGCInfoForTesting(info);
    EXPECT_EQ(i, index);
  }
}

TEST_F(GCInfoTableDeathTest, MoreThanMaxIndexInfos) {
  GCInfo info = GetEmptyGCInfo();
  // Create GCInfoTable::kMaxIndex entries.
  for (GCInfoIndex i = GCInfoTable::kMinIndex; i < GCInfoTable::kMaxIndex;
       i++) {
    RegisterNewGCInfoForTesting(info);
  }
  EXPECT_DEATH_IF_SUPPORTED(RegisterNewGCInfoForTesting(info), "");
}

TEST_F(GCInfoTableDeathTest, OldTableAreaIsReadOnly) {
  GCInfo info = GetEmptyGCInfo();
  // Use up all slots until limit.
  GCInfoIndex limit = table().LimitForTesting();
  // Bail out if initial limit is already the maximum because of large committed
  // pages. In this case, nothing can be comitted as read-only.
  if (limit == GCInfoTable::kMaxIndex) {
    return;
  }
  for (GCInfoIndex i = GCInfoTable::kMinIndex; i < limit; i++) {
    RegisterNewGCInfoForTesting(info);
  }
  EXPECT_EQ(limit, table().LimitForTesting());
  RegisterNewGCInfoForTesting(info);
  EXPECT_NE(limit, table().LimitForTesting());
  // Old area is now read-only.
  auto& first_slot = table().TableSlotForTesting(GCInfoTable::kMinIndex);
  EXPECT_DEATH_IF_SUPPORTED(first_slot.finalize = nullptr, "");
}

namespace {

class ThreadRegisteringGCInfoObjects final : public v8::base::Thread {
 public:
  ThreadRegisteringGCInfoObjects(GCInfoTableTest* test,
                                 GCInfoIndex num_registrations)
      : v8::base::Thread(Options("Thread registering GCInfo objects.")),
        test_(test),
        num_registrations_(num_registrations) {}

  void Run() final {
    GCInfo info = GetEmptyGCInfo();
    for (GCInfoIndex i = 0; i < num_registrations_; i++) {
      test_->RegisterNewGCInfoForTesting(info);
    }
  }

 private:
  GCInfoTableTest* test_;
  GCInfoIndex num_registrations_;
};

}  // namespace

TEST_F(GCInfoTableTest, MultiThreadedResizeToMaxIndex) {
  constexpr size_t num_threads = 4;
  constexpr size_t main_thread_initialized = 2;
  constexpr size_t gc_infos_to_register =
      (GCInfoTable::kMaxIndex - 1) -
      (GCInfoTable::kMinIndex + main_thread_initialized);
  static_assert(gc_infos_to_register % num_threads == 0,
                "must sum up to kMaxIndex");
  constexpr size_t gc_infos_per_thread = gc_infos_to_register / num_threads;

  GCInfo info = GetEmptyGCInfo();
  for (size_t i = 0; i < main_thread_initialized; i++) {
    RegisterNewGCInfoForTesting(info);
  }

  v8::base::Thread* threads[num_threads];
  for (size_t i = 0; i < num_threads; i++) {
    threads[i] = new ThreadRegisteringGCInfoObjects(this, gc_infos_per_thread);
  }
  for (size_t i = 0; i < num_threads; i++) {
    CHECK(threads[i]->Start());
  }
  for (size_t i = 0; i < num_threads; i++) {
    threads[i]->Join();
    delete threads[i];
  }
}

// Tests using the global table and GCInfoTrait.

namespace {

class GCInfoTraitTest : public testing::TestWithPlatform {};

class BasicType final {
 public:
  void Trace(Visitor*) const {}
};
class OtherBasicType final {
 public:
  void Trace(Visitor*) const {}
};

}  // namespace

TEST_F(GCInfoTraitTest, IndexInBounds) {
  const GCInfoIndex index = GCInfoTrait<BasicType>::Index();
  EXPECT_GT(GCInfoTable::kMaxIndex, index);
  EXPECT_LE(GCInfoTable::kMinIndex, index);
}

TEST_F(GCInfoTraitTest, TraitReturnsSameIndexForSameType) {
  const GCInfoIndex index1 = GCInfoTrait<BasicType>::Index();
  const GCInfoIndex index2 = GCInfoTrait<BasicType>::Index();
  EXPECT_EQ(index1, index2);
}

TEST_F(GCInfoTraitTest, TraitReturnsDifferentIndexForDifferentTypes) {
  const GCInfoIndex index1 = GCInfoTrait<BasicType>::Index();
  const GCInfoIndex index2 = GCInfoTrait<OtherBasicType>::Index();
  EXPECT_NE(index1, index2);
}

namespace {

struct Dummy {};

class BaseWithVirtualDestructor
    : public GarbageCollected<BaseWithVirtualDestructor> {
 public:
  virtual ~BaseWithVirtualDestructor() = default;
  void Trace(Visitor*) const {}

 private:
  std::unique_ptr<Dummy> non_trivially_destructible_;
};

class ChildOfBaseWithVirtualDestructor : public BaseWithVirtualDestructor {
 public:
  ~ChildOfBaseWithVirtualDestructor() override = default;
};

static_assert(std::has_virtual_destructor<BaseWithVirtualDestructor>::value,
              "Must have virtual destructor.");
static_assert(!std::is_trivially_destructible<BaseWithVirtualDestructor>::value,
              "Must not be trivially destructible");
#ifdef CPPGC_SUPPORTS_OBJECT_NAMES
static_assert(std::is_same<typename internal::GCInfoFolding<
                               ChildOfBaseWithVirtualDestructor,
                               ChildOfBaseWithVirtualDestructor::
                                   ParentMostGarbageCollectedType>::ResultType,
                           ChildOfBaseWithVirtualDestructor>::value,
              "No folding to preserve object names");
#else   // !CPPGC_SUPPORTS_OBJECT_NAMES
static_assert(std::is_same<typename internal::GCInfoFolding<
                               ChildOfBaseWithVirtualDestructor,
                               ChildOfBaseWithVirtualDestructor::
                                   ParentMostGarbageCollectedType>::ResultType,
                           BaseWithVirtualDestructor>::value,
              "Must fold into base as base has virtual destructor.");
#endif  // !CPPGC_SUPPORTS_OBJECT_NAMES

class TriviallyDestructibleBase
    : public GarbageCollected<TriviallyDestructibleBase> {
 public:
  virtual void Trace(Visitor*) const {}
};

class ChildOfTriviallyDestructibleBase : public TriviallyDestructibleBase {};

static_assert(!std::has_virtual_destructor<TriviallyDestructibleBase>::value,
              "Must not have virtual destructor.");
static_assert(std::is_trivially_destructible<TriviallyDestructibleBase>::value,
              "Must be trivially destructible");
#ifdef CPPGC_SUPPORTS_OBJECT_NAMES
static_assert(std::is_same<typename internal::GCInfoFolding<
                               ChildOfTriviallyDestructibleBase,
                               ChildOfTriviallyDestructibleBase::
                                   ParentMostGarbageCollectedType>::ResultType,
                           ChildOfTriviallyDestructibleBase>::value,
              "No folding to preserve object names");
#else   // !CPPGC_SUPPORTS_OBJECT_NAMES
static_assert(std::is_same<typename internal::GCInfoFolding<
                               ChildOfTriviallyDestructibleBase,
                               ChildOfTriviallyDestructibleBase::
                                   ParentMostGarbageCollectedType>::ResultType,
                           TriviallyDestructibleBase>::value,
              "Must fold into base as both are trivially destructible.");
#endif  // !CPPGC_SUPPORTS_OBJECT_NAMES

class TypeWithCustomFinalizationMethodAtBase
    : public GarbageCollected<TypeWithCustomFinalizationMethodAtBase> {
 public:
  void FinalizeGarbageCollectedObject() {}
  void Trace(Visitor*) const {}

 private:
  std::unique_ptr<Dummy> non_trivially_destructible_;
};

class ChildOfTypeWithCustomFinalizationMethodAtBase
    : public TypeWithCustomFinalizationMethodAtBase {};

static_assert(
    !std::has_virtual_destructor<TypeWithCustomFinalizationMethodAtBase>::value,
    "Must not have virtual destructor.");
static_assert(!std::is_trivially_destructible<
                  TypeWithCustomFinalizationMethodAtBase>::value,
              "Must not be trivially destructible");
#ifdef CPPGC_SUPPORTS_OBJECT_NAMES
static_assert(
    std::is_same<typename internal::GCInfoFolding<
                     ChildOfTypeWithCustomFinalizationMethodAtBase,
                     ChildOfTypeWithCustomFinalizationMethodAtBase::
                         ParentMostGarbageCollectedType>::ResultType,
                 ChildOfTypeWithCustomFinalizationMethodAtBase>::value,
    "No folding to preserve object names");
#else   // !CPPGC_SUPPORTS_OBJECT_NAMES
static_assert(std::is_same<typename internal::GCInfoFolding<
                               ChildOfTypeWithCustomFinalizationMethodAtBase,
                               ChildOfTypeWithCustomFinalizationMethodAtBase::
                                   ParentMostGarbageCollectedType>::ResultType,
                           TypeWithCustomFinalizationMethodAtBase>::value,
              "Must fold into base as base has custom finalizer dispatch.");
#endif  // !CPPGC_SUPPORTS_OBJECT_NAMES

}  // namespace

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                   node-23.7.0/deps/v8/test/unittests/heap/cppgc/gc-invoker-unittest.cc                                0000664 0000000 0000000 00000013443 14746647661 0025334 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/gc-invoker.h"

#include <optional>

#include "include/cppgc/platform.h"
#include "src/heap/cppgc/heap.h"
#include "test/unittests/heap/cppgc/test-platform.h"
#include "testing/gmock/include/gmock/gmock-matchers.h"
#include "testing/gmock/include/gmock/gmock.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc::internal {

namespace {

class MockGarbageCollector : public GarbageCollector {
 public:
  MOCK_METHOD(void, CollectGarbage, (GCConfig), (override));
  MOCK_METHOD(void, StartIncrementalGarbageCollection, (GCConfig), (override));
  MOCK_METHOD(size_t, epoch, (), (const, override));
  MOCK_METHOD(std::optional<EmbedderStackState>, overridden_stack_state, (),
              (const, override));
  MOCK_METHOD(void, set_override_stack_state, (EmbedderStackState), (override));
  MOCK_METHOD(void, clear_overridden_stack_state, (), (override));
#ifdef V8_ENABLE_ALLOCATION_TIMEOUT
  MOCK_METHOD(std::optional<int>, UpdateAllocationTimeout, (), (override));
#endif  // V8_ENABLE_ALLOCATION_TIMEOUT
};

class MockTaskRunner : public cppgc::TaskRunner {
 public:
  MOCK_METHOD(void, PostTaskImpl,
              (std::unique_ptr<cppgc::Task>, const SourceLocation&),
              (override));
  MOCK_METHOD(void, PostNonNestableTaskImpl,
              (std::unique_ptr<cppgc::Task>, const SourceLocation&),
              (override));
  MOCK_METHOD(void, PostDelayedTaskImpl,
              (std::unique_ptr<cppgc::Task>, double, const SourceLocation&),
              (override));
  MOCK_METHOD(void, PostNonNestableDelayedTaskImpl,
              (std::unique_ptr<cppgc::Task>, double, const SourceLocation&),
              (override));
  MOCK_METHOD(void, PostIdleTaskImpl,
              (std::unique_ptr<cppgc::IdleTask>, const SourceLocation&),
              (override));

  bool IdleTasksEnabled() override { return true; }
  bool NonNestableTasksEnabled() const override { return true; }
  bool NonNestableDelayedTasksEnabled() const override { return true; }
};

class MockPlatform : public cppgc::Platform {
 public:
  explicit MockPlatform(std::shared_ptr<TaskRunner> runner)
      : runner_(std::move(runner)),
        tracing_controller_(std::make_unique<TracingController>()) {}

  PageAllocator* GetPageAllocator() override { return nullptr; }
  double MonotonicallyIncreasingTime() override { return 0.0; }

  std::shared_ptr<TaskRunner> GetForegroundTaskRunner() override {
    return runner_;
  }

  TracingController* GetTracingController() override {
    return tracing_controller_.get();
  }

 private:
  std::shared_ptr<TaskRunner> runner_;
  std::unique_ptr<TracingController> tracing_controller_;
};

}  // namespace

TEST(GCInvokerTest, PrecideGCIsInvokedSynchronously) {
  MockPlatform platform(nullptr);
  MockGarbageCollector gc;
  GCInvoker invoker(&gc, &platform,
                    cppgc::Heap::StackSupport::kNoConservativeStackScan);
  EXPECT_CALL(gc, CollectGarbage(::testing::Field(
                      &GCConfig::stack_state, StackState::kNoHeapPointers)));
  invoker.CollectGarbage(GCConfig::PreciseAtomicConfig());
}

TEST(GCInvokerTest, ConservativeGCIsInvokedSynchronouslyWhenSupported) {
  MockPlatform platform(nullptr);
  MockGarbageCollector gc;
  GCInvoker invoker(&gc, &platform,
                    cppgc::Heap::StackSupport::kSupportsConservativeStackScan);
  EXPECT_CALL(
      gc, CollectGarbage(::testing::Field(
              &GCConfig::stack_state, StackState::kMayContainHeapPointers)));
  invoker.CollectGarbage(GCConfig::ConservativeAtomicConfig());
}

TEST(GCInvokerTest, ConservativeGCIsScheduledAsPreciseGCViaPlatform) {
  std::shared_ptr<cppgc::TaskRunner> runner =
      std::shared_ptr<cppgc::TaskRunner>(new MockTaskRunner());
  MockPlatform platform(runner);
  MockGarbageCollector gc;
  GCInvoker invoker(&gc, &platform,
                    cppgc::Heap::StackSupport::kNoConservativeStackScan);
  EXPECT_CALL(gc, epoch).WillOnce(::testing::Return(0));
  EXPECT_CALL(*static_cast<MockTaskRunner*>(runner.get()),
              PostNonNestableTaskImpl(::testing::_, ::testing::_));
  invoker.CollectGarbage(GCConfig::ConservativeAtomicConfig());
}

TEST(GCInvokerTest, ConservativeGCIsInvokedAsPreciseGCViaPlatform) {
  testing::TestPlatform platform;
  MockGarbageCollector gc;
  GCInvoker invoker(&gc, &platform,
                    cppgc::Heap::StackSupport::kNoConservativeStackScan);
  EXPECT_CALL(gc, epoch).WillRepeatedly(::testing::Return(0));
  EXPECT_CALL(gc, CollectGarbage);
  invoker.CollectGarbage(GCConfig::ConservativeAtomicConfig());
  platform.RunAllForegroundTasks();
}

TEST(GCInvokerTest, IncrementalGCIsStarted) {
  // Since StartIncrementalGarbageCollection doesn't scan the stack, support for
  // conservative stack scanning should not matter.
  MockPlatform platform(nullptr);
  MockGarbageCollector gc;
  // Conservative stack scanning supported.
  GCInvoker invoker_with_support(
      &gc, &platform,
      cppgc::Heap::StackSupport::kSupportsConservativeStackScan);
  EXPECT_CALL(
      gc, StartIncrementalGarbageCollection(::testing::Field(
              &GCConfig::stack_state, StackState::kMayContainHeapPointers)));
  invoker_with_support.StartIncrementalGarbageCollection(
      GCConfig::ConservativeIncrementalConfig());
  // Conservative stack scanning *not* supported.
  GCInvoker invoker_without_support(
      &gc, &platform, cppgc::Heap::StackSupport::kNoConservativeStackScan);
  EXPECT_CALL(gc,
              StartIncrementalGarbageCollection(::testing::Field(
                  &GCConfig::stack_state, StackState::kMayContainHeapPointers)))
      .Times(0);
  invoker_without_support.StartIncrementalGarbageCollection(
      GCConfig::ConservativeIncrementalConfig());
}

}  // namespace cppgc::internal
                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/unittests/heap/cppgc/heap-growing-unittest.cc                              0000664 0000000 0000000 00000017247 14746647661 0025665 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/heap-growing.h"

#include <optional>

#include "include/cppgc/platform.h"
#include "src/heap/cppgc/heap.h"
#include "src/heap/cppgc/stats-collector.h"
#include "testing/gmock/include/gmock/gmock.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc::internal {

namespace {

class FakeGarbageCollector : public GarbageCollector {
 public:
  explicit FakeGarbageCollector(StatsCollector* stats_collector)
      : stats_collector_(stats_collector) {}

  void SetLiveBytes(size_t live_bytes) { live_bytes_ = live_bytes; }

  void CollectGarbage(GCConfig config) override {
    stats_collector_->NotifyMarkingStarted(CollectionType::kMajor,
                                           GCConfig::MarkingType::kAtomic,
                                           GCConfig::IsForcedGC::kNotForced);
    stats_collector_->NotifyMarkingCompleted(live_bytes_);
    stats_collector_->NotifySweepingCompleted(GCConfig::SweepingType::kAtomic);
    callcount_++;
  }

  void StartIncrementalGarbageCollection(GCConfig config) override {
    UNREACHABLE();
  }

  size_t epoch() const override { return callcount_; }
  std::optional<EmbedderStackState> overridden_stack_state() const override {
    return {};
  }
  void set_override_stack_state(EmbedderStackState state) override {}
  void clear_overridden_stack_state() override {}
#ifdef V8_ENABLE_ALLOCATION_TIMEOUT
  std::optional<int> UpdateAllocationTimeout() override { return std::nullopt; }
#endif  // V8_ENABLE_ALLOCATION_TIMEOUT

 private:
  StatsCollector* stats_collector_;
  size_t live_bytes_ = 0;
  size_t callcount_ = 0;
};

class MockGarbageCollector : public GarbageCollector {
 public:
  MOCK_METHOD(void, CollectGarbage, (GCConfig), (override));
  MOCK_METHOD(void, StartIncrementalGarbageCollection, (GCConfig), (override));
  MOCK_METHOD(size_t, epoch, (), (const, override));
  MOCK_METHOD(std::optional<EmbedderStackState>, overridden_stack_state, (),
              (const, override));
  MOCK_METHOD(void, set_override_stack_state, (EmbedderStackState), (override));
  MOCK_METHOD(void, clear_overridden_stack_state, (), (override));
#ifdef V8_ENABLE_ALLOCATION_TIMEOUT
  MOCK_METHOD(std::optional<int>, UpdateAllocationTimeout, (), (override));
#endif  // V8_ENABLE_ALLOCATION_TIMEOUT
};

void FakeAllocate(StatsCollector* stats_collector, size_t bytes) {
  stats_collector->NotifyAllocation(bytes);
  stats_collector->NotifySafePointForConservativeCollection();
}

static constexpr Platform* kNoPlatform = nullptr;

}  // namespace

TEST(HeapGrowingTest, ConservativeGCInvoked) {
  StatsCollector stats_collector(kNoPlatform);
  MockGarbageCollector gc;
  cppgc::Heap::ResourceConstraints constraints;
  // Force GC at the first update.
  constraints.initial_heap_size_bytes = 1;
  HeapGrowing growing(&gc, &stats_collector, constraints,
                      cppgc::Heap::MarkingType::kIncrementalAndConcurrent,
                      cppgc::Heap::SweepingType::kIncrementalAndConcurrent);
  EXPECT_CALL(
      gc, CollectGarbage(::testing::Field(
              &GCConfig::stack_state, StackState::kMayContainHeapPointers)));
  FakeAllocate(&stats_collector, 100 * kMB);
}

TEST(HeapGrowingTest, InitialHeapSize) {
  StatsCollector stats_collector(kNoPlatform);
  MockGarbageCollector gc;
  cppgc::Heap::ResourceConstraints constraints;
  // Use larger size to avoid running into small heap optimizations.
  constexpr size_t kObjectSize = 10 * HeapGrowing::kMinLimitIncrease;
  constraints.initial_heap_size_bytes = kObjectSize;
  HeapGrowing growing(&gc, &stats_collector, constraints,
                      cppgc::Heap::MarkingType::kIncrementalAndConcurrent,
                      cppgc::Heap::SweepingType::kIncrementalAndConcurrent);
  FakeAllocate(&stats_collector, kObjectSize - 1);
  EXPECT_CALL(
      gc, CollectGarbage(::testing::Field(
              &GCConfig::stack_state, StackState::kMayContainHeapPointers)));
  FakeAllocate(&stats_collector, kObjectSize);
}

TEST(HeapGrowingTest, ConstantGrowingFactor) {
  // Use larger size to avoid running into small heap optimizations.
  constexpr size_t kObjectSize = 10 * HeapGrowing::kMinLimitIncrease;
  StatsCollector stats_collector(kNoPlatform);
  FakeGarbageCollector gc(&stats_collector);
  cppgc::Heap::ResourceConstraints constraints;
  // Force GC at the first update.
  constraints.initial_heap_size_bytes = HeapGrowing::kMinLimitIncrease;
  HeapGrowing growing(&gc, &stats_collector, constraints,
                      cppgc::Heap::MarkingType::kIncrementalAndConcurrent,
                      cppgc::Heap::SweepingType::kIncrementalAndConcurrent);
  EXPECT_EQ(0u, gc.epoch());
  gc.SetLiveBytes(kObjectSize);
  FakeAllocate(&stats_collector, kObjectSize + 1);
  EXPECT_EQ(1u, gc.epoch());
  EXPECT_EQ(1.5 * kObjectSize, growing.limit_for_atomic_gc());
}

TEST(HeapGrowingTest, SmallHeapGrowing) {
  // Larger constant to avoid running into special handling for smaller heaps.
  constexpr size_t kLargeAllocation = 100 * kMB;
  StatsCollector stats_collector(kNoPlatform);
  FakeGarbageCollector gc(&stats_collector);
  cppgc::Heap::ResourceConstraints constraints;
  // Force GC at the first update.
  constraints.initial_heap_size_bytes = 1;
  HeapGrowing growing(&gc, &stats_collector, constraints,
                      cppgc::Heap::MarkingType::kIncrementalAndConcurrent,
                      cppgc::Heap::SweepingType::kIncrementalAndConcurrent);
  EXPECT_EQ(0u, gc.epoch());
  gc.SetLiveBytes(1);
  FakeAllocate(&stats_collector, kLargeAllocation);
  EXPECT_EQ(1u, gc.epoch());
  EXPECT_EQ(1 + HeapGrowing::kMinLimitIncrease, growing.limit_for_atomic_gc());
}

TEST(HeapGrowingTest, IncrementalGCStarted) {
  StatsCollector stats_collector(kNoPlatform);
  MockGarbageCollector gc;
  cppgc::Heap::ResourceConstraints constraints;
  HeapGrowing growing(&gc, &stats_collector, constraints,
                      cppgc::Heap::MarkingType::kIncrementalAndConcurrent,
                      cppgc::Heap::SweepingType::kIncrementalAndConcurrent);
  EXPECT_CALL(
      gc, CollectGarbage(::testing::Field(&GCConfig::stack_state,
                                          StackState::kMayContainHeapPointers)))
      .Times(0);
  EXPECT_CALL(gc, StartIncrementalGarbageCollection(::testing::_));
  // Allocate 1 byte less the limit for atomic gc to trigger incremental gc.
  FakeAllocate(&stats_collector, growing.limit_for_atomic_gc() - 1);
}

TEST(HeapGrowingTest, IncrementalGCFinalized) {
  StatsCollector stats_collector(kNoPlatform);
  MockGarbageCollector gc;
  cppgc::Heap::ResourceConstraints constraints;
  HeapGrowing growing(&gc, &stats_collector, constraints,
                      cppgc::Heap::MarkingType::kIncrementalAndConcurrent,
                      cppgc::Heap::SweepingType::kIncrementalAndConcurrent);
  EXPECT_CALL(
      gc, CollectGarbage(::testing::Field(&GCConfig::stack_state,
                                          StackState::kMayContainHeapPointers)))
      .Times(0);
  EXPECT_CALL(gc, StartIncrementalGarbageCollection(::testing::_));
  // Allocate 1 byte less the limit for atomic gc to trigger incremental gc.
  size_t bytes_for_incremental_gc = growing.limit_for_atomic_gc() - 1;
  FakeAllocate(&stats_collector, bytes_for_incremental_gc);
  ::testing::Mock::VerifyAndClearExpectations(&gc);
  EXPECT_CALL(
      gc, CollectGarbage(::testing::Field(
              &GCConfig::stack_state, StackState::kMayContainHeapPointers)));
  EXPECT_CALL(gc, StartIncrementalGarbageCollection(::testing::_)).Times(0);
  // Allocate the rest needed to trigger atomic gc ().
  FakeAllocate(&stats_collector, StatsCollector::kAllocationThresholdBytes);
}

}  // namespace cppgc::internal
                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/test/unittests/heap/cppgc/heap-object-header-unittest.cc                        0000664 0000000 0000000 00000014536 14746647661 0026703 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/heap-object-header.h"

#include <atomic>
#include <memory>

#include "include/cppgc/allocation.h"
#include "src/base/atomic-utils.h"
#include "src/base/macros.h"
#include "src/base/platform/platform.h"
#include "src/heap/cppgc/globals.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

TEST(HeapObjectHeaderTest, Constructor) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_EQ(kSize, header.AllocatedSize());
  EXPECT_EQ(kGCInfoIndex, header.GetGCInfoIndex());
  EXPECT_TRUE(header.IsInConstruction());
  EXPECT_FALSE(header.IsMarked());
}

TEST(HeapObjectHeaderTest, Payload) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_EQ(reinterpret_cast<ConstAddress>(&header) + sizeof(HeapObjectHeader),
            header.ObjectStart());
}

TEST(HeapObjectHeaderTest, PayloadEnd) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_EQ(reinterpret_cast<ConstAddress>(&header) + kSize,
            header.ObjectEnd());
}

TEST(HeapObjectHeaderTest, GetGCInfoIndex) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_EQ(kGCInfoIndex, header.GetGCInfoIndex());
  EXPECT_EQ(kGCInfoIndex, header.GetGCInfoIndex<AccessMode::kAtomic>());
}

TEST(HeapObjectHeaderTest, AllocatedSize) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity * 23;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_EQ(kSize, header.AllocatedSize());
  EXPECT_EQ(kSize, header.AllocatedSize<AccessMode::kAtomic>());
}

TEST(HeapObjectHeaderTest, IsLargeObject) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity * 23;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_EQ(false, header.IsLargeObject());
  EXPECT_EQ(false, header.IsLargeObject<AccessMode::kAtomic>());
  HeapObjectHeader large_header(0, kGCInfoIndex + 1);
  EXPECT_EQ(true, large_header.IsLargeObject());
  EXPECT_EQ(true, large_header.IsLargeObject<AccessMode::kAtomic>());
}

TEST(HeapObjectHeaderTest, MarkObjectAsFullyConstructed) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_TRUE(header.IsInConstruction());
  header.MarkAsFullyConstructed();
  EXPECT_FALSE(header.IsInConstruction());
  // Size shares the same bitfield and should be unaffected by
  // MarkObjectAsFullyConstructed.
  EXPECT_EQ(kSize, header.AllocatedSize());
}

TEST(HeapObjectHeaderTest, TryMark) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity * 7;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_FALSE(header.IsMarked());
  EXPECT_TRUE(header.TryMarkAtomic());
  // GCInfoIndex shares the same bitfield and should be unaffected by
  // TryMarkAtomic.
  EXPECT_EQ(kGCInfoIndex, header.GetGCInfoIndex());
  EXPECT_FALSE(header.TryMarkAtomic());
  // GCInfoIndex shares the same bitfield and should be unaffected by
  // TryMarkAtomic.
  EXPECT_EQ(kGCInfoIndex, header.GetGCInfoIndex());
  EXPECT_TRUE(header.IsMarked());
}

TEST(HeapObjectHeaderTest, Unmark) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = kAllocationGranularity * 7;
  HeapObjectHeader header(kSize, kGCInfoIndex);
  EXPECT_FALSE(header.IsMarked());
  EXPECT_TRUE(header.TryMarkAtomic());
  EXPECT_EQ(kGCInfoIndex, header.GetGCInfoIndex());
  EXPECT_TRUE(header.IsMarked());
  header.Unmark();
  // GCInfoIndex shares the same bitfield and should be unaffected by Unmark.
  EXPECT_EQ(kGCInfoIndex, header.GetGCInfoIndex());
  EXPECT_FALSE(header.IsMarked());
  HeapObjectHeader header2(kSize, kGCInfoIndex);
  EXPECT_FALSE(header2.IsMarked());
  EXPECT_TRUE(header2.TryMarkAtomic());
  EXPECT_TRUE(header2.IsMarked());
  header2.Unmark<AccessMode::kAtomic>();
  // GCInfoIndex shares the same bitfield and should be unaffected by Unmark.
  EXPECT_EQ(kGCInfoIndex, header2.GetGCInfoIndex());
  EXPECT_FALSE(header2.IsMarked());
}

namespace {

struct Payload {
  volatile size_t value{5};
};

class ConcurrentGCThread final : public v8::base::Thread {
 public:
  explicit ConcurrentGCThread(HeapObjectHeader* header, Payload* payload)
      : v8::base::Thread(Options("Thread accessing object.")),
        header_(header),
        payload_(payload) {}

  void Run() final {
    while (header_->IsInConstruction<AccessMode::kAtomic>()) {
    }
    USE(v8::base::AsAtomicPtr(const_cast<size_t*>(&payload_->value))
            ->load(std::memory_order_relaxed));
  }

 private:
  HeapObjectHeader* header_;
  Payload* payload_;
};

}  // namespace

TEST(HeapObjectHeaderTest, ConstructionBitProtectsNonAtomicWrites) {
  // Object publishing: Test checks that non-atomic stores in the payload can be
  // guarded using MarkObjectAsFullyConstructed/IsInConstruction. The test
  // relies on TSAN to find data races.
  constexpr size_t kSize =
      (sizeof(HeapObjectHeader) + sizeof(Payload) + kAllocationMask) &
      ~kAllocationMask;
  typename std::aligned_storage<kSize, kAllocationGranularity>::type data;
  HeapObjectHeader* header = new (&data) HeapObjectHeader(kSize, 1);
  ConcurrentGCThread gc_thread(
      header, reinterpret_cast<Payload*>(header->ObjectStart()));
  CHECK(gc_thread.Start());
  new (header->ObjectStart()) Payload();
  header->MarkAsFullyConstructed();
  gc_thread.Join();
}

#ifdef DEBUG

TEST(HeapObjectHeaderDeathTest, ConstructorTooLargeSize) {
  constexpr GCInfoIndex kGCInfoIndex = 17;
  constexpr size_t kSize = HeapObjectHeader::kMaxSize + 1;
  EXPECT_DEATH_IF_SUPPORTED(HeapObjectHeader header(kSize, kGCInfoIndex), "");
}

TEST(HeapObjectHeaderDeathTest, ConstructorTooLargeGCInfoIndex) {
  constexpr GCInfoIndex kGCInfoIndex = GCInfoTable::kMaxIndex + 1;
  constexpr size_t kSize = kAllocationGranularity;
  EXPECT_DEATH_IF_SUPPORTED(HeapObjectHeader header(kSize, kGCInfoIndex), "");
}

#endif  // DEBUG

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                  node-23.7.0/deps/v8/test/unittests/heap/cppgc/heap-page-unittest.cc                                 0000664 0000000 0000000 00000023053 14746647661 0025115 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/heap-page.h"

#include <algorithm>

#include "include/cppgc/allocation.h"
#include "include/cppgc/persistent.h"
#include "src/base/macros.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/page-memory.h"
#include "src/heap/cppgc/raw-heap.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class PageTest : public testing::TestWithHeap {
 public:
  RawHeap& GetRawHeap() { return Heap::From(GetHeap())->raw_heap(); }
  PageBackend& GetPageBackend() {
    return *Heap::From(GetHeap())->page_backend();
  }
};

template <size_t Size>
class GCed : public GarbageCollected<GCed<Size>> {
 public:
  virtual void Trace(cppgc::Visitor*) const {}
  char array[Size];
};

}  // namespace

TEST_F(PageTest, SpaceIndexing) {
  RawHeap& heap = GetRawHeap();
  size_t space = 0u;
  for (const auto& ptr : heap) {
    EXPECT_EQ(&heap, ptr.get()->raw_heap());
    EXPECT_EQ(space, ptr->index());
    ++space;
  }
  EXPECT_GE(space, RawHeap::kNumberOfRegularSpaces);
}

TEST_F(PageTest, PredefinedSpaces) {
  using SpaceType = RawHeap::RegularSpaceType;
  RawHeap& heap = GetRawHeap();
  {
    auto* gced = MakeGarbageCollected<GCed<1>>(GetAllocationHandle());
    BaseSpace& space = NormalPage::FromPayload(gced)->space();
    EXPECT_EQ(heap.Space(SpaceType::kNormal1), &space);
    EXPECT_EQ(0u, space.index());
    EXPECT_FALSE(space.is_large());
  }
  {
    auto* gced = MakeGarbageCollected<GCed<32>>(GetAllocationHandle());
    BaseSpace& space = NormalPage::FromPayload(gced)->space();
    EXPECT_EQ(heap.Space(SpaceType::kNormal2), &space);
    EXPECT_EQ(1u, space.index());
    EXPECT_FALSE(space.is_large());
  }
  {
    auto* gced = MakeGarbageCollected<GCed<64>>(GetAllocationHandle());
    BaseSpace& space = NormalPage::FromPayload(gced)->space();
    EXPECT_EQ(heap.Space(SpaceType::kNormal3), &space);
    EXPECT_EQ(2u, space.index());
    EXPECT_FALSE(space.is_large());
  }
  {
    auto* gced = MakeGarbageCollected<GCed<128>>(GetAllocationHandle());
    BaseSpace& space = NormalPage::FromPayload(gced)->space();
    EXPECT_EQ(heap.Space(SpaceType::kNormal4), &space);
    EXPECT_EQ(3u, space.index());
    EXPECT_FALSE(space.is_large());
  }
  {
    auto* gced = MakeGarbageCollected<GCed<2 * kLargeObjectSizeThreshold>>(
        GetAllocationHandle());
    BaseSpace& space = NormalPage::FromPayload(gced)->space();
    EXPECT_EQ(heap.Space(SpaceType::kLarge), &space);
    EXPECT_EQ(4u, space.index());
    EXPECT_TRUE(space.is_large());
  }
}

TEST_F(PageTest, NormalPageIndexing) {
  using SpaceType = RawHeap::RegularSpaceType;
  constexpr size_t kExpectedNumberOfPages = 10u;
  constexpr size_t kObjectSize = 8u;
  using Type = GCed<kObjectSize>;
  static const size_t kNumberOfObjects =
      (kExpectedNumberOfPages * NormalPage::PayloadSize() /
       (sizeof(Type) + sizeof(HeapObjectHeader))) -
      kExpectedNumberOfPages;

  std::vector<Persistent<Type>> persistents(kNumberOfObjects);
  for (auto& p : persistents) {
    p = MakeGarbageCollected<Type>(GetAllocationHandle());
  }

  const RawHeap& heap = GetRawHeap();
  const BaseSpace* space = heap.Space(SpaceType::kNormal1);
  EXPECT_EQ(kExpectedNumberOfPages, space->size());

  size_t page_n = 0;
  for (const BasePage* page : *space) {
    EXPECT_FALSE(page->is_large());
    EXPECT_EQ(space, &page->space());
    ++page_n;
  }
  EXPECT_EQ(page_n, space->size());
}

TEST_F(PageTest, LargePageIndexing) {
  using SpaceType = RawHeap::RegularSpaceType;
  constexpr size_t kExpectedNumberOfPages = 10u;
  constexpr size_t kObjectSize = 2 * kLargeObjectSizeThreshold;
  using Type = GCed<kObjectSize>;
  const size_t kNumberOfObjects = kExpectedNumberOfPages;

  std::vector<Persistent<Type>> persistents(kNumberOfObjects);
  for (auto& p : persistents) {
    p = MakeGarbageCollected<Type>(GetAllocationHandle());
  }

  const RawHeap& heap = GetRawHeap();
  const BaseSpace* space = heap.Space(SpaceType::kLarge);
  EXPECT_EQ(kExpectedNumberOfPages, space->size());

  size_t page_n = 0;
  for (const BasePage* page : *space) {
    EXPECT_TRUE(page->is_large());
    ++page_n;
  }
  EXPECT_EQ(page_n, space->size());
}

TEST_F(PageTest, HeapObjectHeaderOnBasePageIndexing) {
  constexpr size_t kObjectSize = 8;
  using Type = GCed<kObjectSize>;
  const size_t kNumberOfObjects =
      NormalPage::PayloadSize() / (sizeof(Type) + sizeof(HeapObjectHeader));
  const size_t kLeftSpace =
      NormalPage::PayloadSize() % (sizeof(Type) + sizeof(HeapObjectHeader));

  std::vector<Persistent<Type>> persistents(kNumberOfObjects);
  for (auto& p : persistents) {
    p = MakeGarbageCollected<Type>(GetAllocationHandle());
  }

  const auto* page =
      static_cast<NormalPage*>(BasePage::FromPayload(persistents[0].Get()));
  size_t size = 0;
  size_t num = 0;
  for (const HeapObjectHeader& header : *page) {
    EXPECT_EQ(reinterpret_cast<Address>(persistents[num].Get()),
              header.ObjectStart());
    size += header.AllocatedSize();
    ++num;
  }
  EXPECT_EQ(num, persistents.size());
  EXPECT_EQ(size + kLeftSpace, NormalPage::PayloadSize());
}

TEST_F(PageTest, HeapObjectHeaderOnLargePageIndexing) {
  constexpr size_t kObjectSize = 2 * kLargeObjectSizeThreshold;
  using Type = GCed<kObjectSize>;
  auto* gced = MakeGarbageCollected<Type>(GetAllocationHandle());

  const auto* page = static_cast<LargePage*>(BasePage::FromPayload(gced));
  const size_t expected_payload_size =
      RoundUp(sizeof(Type) + sizeof(HeapObjectHeader), kAllocationGranularity);
  EXPECT_EQ(expected_payload_size, page->PayloadSize());

  const HeapObjectHeader* header = page->ObjectHeader();
  EXPECT_EQ(reinterpret_cast<Address>(gced), header->ObjectStart());
}

TEST_F(PageTest, NormalPageCreationDestruction) {
  RawHeap& heap = GetRawHeap();
  const PageBackend* backend = Heap::From(GetHeap())->page_backend();
  auto* space = static_cast<NormalPageSpace*>(
      heap.Space(RawHeap::RegularSpaceType::kNormal1));
  auto* page = NormalPage::TryCreate(GetPageBackend(), *space);
  EXPECT_NE(nullptr, page);
  EXPECT_NE(nullptr, backend->Lookup(page->PayloadStart()));

  space->AddPage(page);
  EXPECT_NE(space->end(), std::find(space->begin(), space->end(), page));

  space->free_list().Add({page->PayloadStart(), page->PayloadSize()});
  EXPECT_TRUE(space->free_list().ContainsForTesting(
      {page->PayloadStart(), page->PayloadSize()}));

  space->free_list().Clear();
  EXPECT_FALSE(space->free_list().ContainsForTesting(
      {page->PayloadStart(), page->PayloadSize()}));
  space->RemovePage(page);
  EXPECT_EQ(space->end(), std::find(space->begin(), space->end(), page));
  NormalPage::Destroy(page, FreeMemoryHandling::kDoNotDiscard);
  EXPECT_EQ(nullptr, backend->Lookup(page->PayloadStart()));
}

TEST_F(PageTest, LargePageCreationDestruction) {
  constexpr size_t kObjectSize = 2 * kLargeObjectSizeThreshold;
  RawHeap& heap = GetRawHeap();
  const PageBackend* backend = Heap::From(GetHeap())->page_backend();
  auto* space = static_cast<LargePageSpace*>(
      heap.Space(RawHeap::RegularSpaceType::kLarge));
  auto* page = LargePage::TryCreate(GetPageBackend(), *space, kObjectSize);
  EXPECT_NE(nullptr, page);
  EXPECT_NE(nullptr, backend->Lookup(page->PayloadStart()));

  space->AddPage(page);
  EXPECT_NE(space->end(), std::find(space->begin(), space->end(), page));

  space->RemovePage(page);
  EXPECT_EQ(space->end(), std::find(space->begin(), space->end(), page));
  LargePage::Destroy(page);
  EXPECT_EQ(nullptr, backend->Lookup(page->PayloadStart()));
}

#if DEBUG
TEST_F(PageTest, UnsweptPageDestruction) {
  RawHeap& heap = GetRawHeap();
  {
    auto* space = static_cast<NormalPageSpace*>(
        heap.Space(RawHeap::RegularSpaceType::kNormal1));
    auto* page = NormalPage::TryCreate(GetPageBackend(), *space);
    EXPECT_NE(nullptr, page);
    space->AddPage(page);
    EXPECT_DEATH_IF_SUPPORTED(
        NormalPage::Destroy(page, FreeMemoryHandling::kDoNotDiscard), "");
  }
  {
    auto* space = static_cast<LargePageSpace*>(
        heap.Space(RawHeap::RegularSpaceType::kLarge));
    auto* page = LargePage::TryCreate(GetPageBackend(), *space,
                                      2 * kLargeObjectSizeThreshold);
    EXPECT_NE(nullptr, page);
    space->AddPage(page);
    EXPECT_DEATH_IF_SUPPORTED(LargePage::Destroy(page), "");
    // Detach page and really destroy page in the parent process so that sweeper
    // doesn't consider it.
    space->RemovePage(page);
    LargePage::Destroy(page);
  }
}
#endif

TEST_F(PageTest, ObjectHeaderFromInnerAddress) {
  {
    auto* object = MakeGarbageCollected<GCed<64>>(GetAllocationHandle());
    const HeapObjectHeader& expected = HeapObjectHeader::FromObject(object);

    for (auto* inner_ptr = reinterpret_cast<ConstAddress>(object);
         inner_ptr < reinterpret_cast<ConstAddress>(object + 1); ++inner_ptr) {
      const HeapObjectHeader& hoh =
          BasePage::FromPayload(object)->ObjectHeaderFromInnerAddress(
              inner_ptr);
      EXPECT_EQ(&expected, &hoh);
    }
  }
  {
    auto* object = MakeGarbageCollected<GCed<2 * kLargeObjectSizeThreshold>>(
        GetAllocationHandle());
    const HeapObjectHeader& expected = HeapObjectHeader::FromObject(object);

    const HeapObjectHeader& hoh =
        BasePage::FromPayload(object)->ObjectHeaderFromInnerAddress(
            reinterpret_cast<ConstAddress>(object) + kLargeObjectSizeThreshold);
    EXPECT_EQ(&expected, &hoh);
  }
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/unittests/heap/cppgc/heap-registry-unittest.cc                             0000664 0000000 0000000 00000005177 14746647661 0026060 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <algorithm>

#include "include/cppgc/allocation.h"
#include "include/cppgc/heap.h"
#include "src/heap/cppgc/heap-base.h"
#include "src/heap/cppgc/process-heap.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

class HeapRegistryTest : public testing::TestWithPlatform {};

TEST_F(HeapRegistryTest, Empty) {
  EXPECT_EQ(0u, HeapRegistry::GetRegisteredHeapsForTesting().size());
}

namespace {

bool Contains(const HeapRegistry::Storage& storage, const cppgc::Heap* needle) {
  return storage.end() !=
         std::find(storage.begin(), storage.end(),
                   &cppgc::internal::Heap::From(needle)->AsBase());
}

}  // namespace

TEST_F(HeapRegistryTest, RegisterUnregisterHeaps) {
  const auto& storage = HeapRegistry::GetRegisteredHeapsForTesting();
  EXPECT_EQ(0u, storage.size());
  {
    const auto heap1 = Heap::Create(platform_);
    EXPECT_TRUE(Contains(storage, heap1.get()));
    EXPECT_EQ(1u, storage.size());
    {
      const auto heap2 = Heap::Create(platform_);
      EXPECT_TRUE(Contains(storage, heap1.get()));
      EXPECT_TRUE(Contains(storage, heap2.get()));
      EXPECT_EQ(2u, storage.size());
    }
    EXPECT_TRUE(Contains(storage, heap1.get()));
    EXPECT_EQ(1u, storage.size());
  }
  EXPECT_EQ(0u, storage.size());
}

TEST_F(HeapRegistryTest, DoesNotFindNullptr) {
  const auto heap = Heap::Create(platform_);
  EXPECT_EQ(nullptr, HeapRegistry::TryFromManagedPointer(nullptr));
}

TEST_F(HeapRegistryTest, DoesNotFindStackAddress) {
  const auto heap = Heap::Create(platform_);
  EXPECT_EQ(nullptr, HeapRegistry::TryFromManagedPointer(&heap));
}

TEST_F(HeapRegistryTest, DoesNotFindOffHeap) {
  const auto heap = Heap::Create(platform_);
  auto dummy = std::make_unique<char>();
  EXPECT_EQ(nullptr, HeapRegistry::TryFromManagedPointer(dummy.get()));
}

namespace {

class GCed final : public GarbageCollected<GCed> {
 public:
  void Trace(Visitor*) const {}
};

}  // namespace

TEST_F(HeapRegistryTest, FindsRightHeapForOnHeapAddress) {
  const auto heap1 = Heap::Create(platform_);
  const auto heap2 = Heap::Create(platform_);
  auto* o = MakeGarbageCollected<GCed>(heap1->GetAllocationHandle());
  EXPECT_EQ(&cppgc::internal::Heap::From(heap1.get())->AsBase(),
            HeapRegistry::TryFromManagedPointer(o));
  EXPECT_NE(&cppgc::internal::Heap::From(heap2.get())->AsBase(),
            HeapRegistry::TryFromManagedPointer(o));
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/unittests/heap/cppgc/heap-statistics-collector-unittest.cc                 0000664 0000000 0000000 00000023121 14746647661 0030353 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2021 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/heap-statistics-collector.h"

#include "include/cppgc/heap-statistics.h"
#include "include/cppgc/persistent.h"
#include "src/base/logging.h"
#include "src/base/macros.h"
#include "src/heap/cppgc/globals.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

class HeapStatisticsCollectorTest : public testing::TestWithHeap {};

TEST_F(HeapStatisticsCollectorTest, EmptyHeapBriefStatisitcs) {
  HeapStatistics brief_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kBrief);
  EXPECT_EQ(HeapStatistics::DetailLevel::kBrief, brief_stats.detail_level);
  EXPECT_EQ(0u, brief_stats.used_size_bytes);
  EXPECT_EQ(0u, brief_stats.used_size_bytes);
  EXPECT_EQ(0u, brief_stats.pooled_memory_size_bytes);
  EXPECT_TRUE(brief_stats.space_stats.empty());
}

TEST_F(HeapStatisticsCollectorTest, EmptyHeapDetailedStatisitcs) {
  HeapStatistics detailed_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kDetailed);
  EXPECT_EQ(HeapStatistics::DetailLevel::kDetailed,
            detailed_stats.detail_level);
  EXPECT_EQ(0u, detailed_stats.used_size_bytes);
  EXPECT_EQ(0u, detailed_stats.used_size_bytes);
  EXPECT_EQ(0u, detailed_stats.pooled_memory_size_bytes);
  EXPECT_EQ(RawHeap::kNumberOfRegularSpaces, detailed_stats.space_stats.size());
  for (HeapStatistics::SpaceStatistics& space_stats :
       detailed_stats.space_stats) {
    EXPECT_EQ(0u, space_stats.used_size_bytes);
    EXPECT_EQ(0u, space_stats.used_size_bytes);
    EXPECT_TRUE(space_stats.page_stats.empty());
    if (space_stats.name == "LargePageSpace") {
      // Large page space has no free list.
      EXPECT_TRUE(space_stats.free_list_stats.bucket_size.empty());
      EXPECT_TRUE(space_stats.free_list_stats.free_count.empty());
      EXPECT_TRUE(space_stats.free_list_stats.free_size.empty());
    } else {
      EXPECT_EQ(kPageSizeLog2, space_stats.free_list_stats.bucket_size.size());
      EXPECT_EQ(kPageSizeLog2, space_stats.free_list_stats.free_count.size());
      EXPECT_EQ(kPageSizeLog2, space_stats.free_list_stats.free_size.size());
    }
  }
}

namespace {
template <size_t Size>
class GCed : public GarbageCollected<GCed<Size>> {
 public:
  void Trace(Visitor*) const {}

 private:
  char array_[Size];
};
}  // namespace

TEST_F(HeapStatisticsCollectorTest, NonEmptyNormalPage) {
  MakeGarbageCollected<GCed<1>>(GetHeap()->GetAllocationHandle());
  static constexpr size_t used_size =
      RoundUp<kAllocationGranularity>(1 + sizeof(HeapObjectHeader));
  HeapStatistics detailed_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kDetailed);
  EXPECT_EQ(HeapStatistics::DetailLevel::kDetailed,
            detailed_stats.detail_level);
  EXPECT_EQ(kPageSize, detailed_stats.committed_size_bytes);
  EXPECT_EQ(kPageSize, detailed_stats.resident_size_bytes);
  EXPECT_EQ(used_size, detailed_stats.used_size_bytes);
  EXPECT_EQ(0u, detailed_stats.pooled_memory_size_bytes);
  EXPECT_EQ(RawHeap::kNumberOfRegularSpaces, detailed_stats.space_stats.size());
  bool found_non_empty_space = false;
  for (const HeapStatistics::SpaceStatistics& space_stats :
       detailed_stats.space_stats) {
    if (space_stats.page_stats.empty()) {
      EXPECT_EQ(0u, space_stats.committed_size_bytes);
      EXPECT_EQ(0u, space_stats.resident_size_bytes);
      EXPECT_EQ(0u, space_stats.used_size_bytes);
      continue;
    }
    EXPECT_NE("LargePageSpace", space_stats.name);
    EXPECT_FALSE(found_non_empty_space);
    found_non_empty_space = true;
    EXPECT_EQ(kPageSize, space_stats.committed_size_bytes);
    EXPECT_EQ(kPageSize, space_stats.resident_size_bytes);
    EXPECT_EQ(used_size, space_stats.used_size_bytes);
    EXPECT_EQ(1u, space_stats.page_stats.size());
    EXPECT_EQ(kPageSize, space_stats.page_stats.back().committed_size_bytes);
    EXPECT_EQ(kPageSize, space_stats.page_stats.back().resident_size_bytes);
    EXPECT_EQ(used_size, space_stats.page_stats.back().used_size_bytes);
  }
  EXPECT_TRUE(found_non_empty_space);
}

TEST_F(HeapStatisticsCollectorTest, NonEmptyLargePage) {
  MakeGarbageCollected<GCed<kLargeObjectSizeThreshold>>(
      GetHeap()->GetAllocationHandle());
  static constexpr size_t used_size = RoundUp<kAllocationGranularity>(
      kLargeObjectSizeThreshold + sizeof(HeapObjectHeader));
  static constexpr size_t committed_size =
      RoundUp<kAllocationGranularity>(used_size + LargePage::PageHeaderSize());
  HeapStatistics detailed_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kDetailed);
  EXPECT_EQ(HeapStatistics::DetailLevel::kDetailed,
            detailed_stats.detail_level);
  EXPECT_EQ(committed_size, detailed_stats.committed_size_bytes);
  EXPECT_EQ(committed_size, detailed_stats.resident_size_bytes);
  EXPECT_EQ(used_size, detailed_stats.used_size_bytes);
  EXPECT_EQ(0u, detailed_stats.pooled_memory_size_bytes);
  EXPECT_EQ(RawHeap::kNumberOfRegularSpaces, detailed_stats.space_stats.size());
  bool found_non_empty_space = false;
  for (const HeapStatistics::SpaceStatistics& space_stats :
       detailed_stats.space_stats) {
    if (space_stats.page_stats.empty()) {
      EXPECT_EQ(0u, space_stats.committed_size_bytes);
      EXPECT_EQ(0u, space_stats.used_size_bytes);
      continue;
    }
    EXPECT_EQ("LargePageSpace", space_stats.name);
    EXPECT_FALSE(found_non_empty_space);
    found_non_empty_space = true;
    EXPECT_EQ(committed_size, space_stats.committed_size_bytes);
    EXPECT_EQ(committed_size, space_stats.resident_size_bytes);
    EXPECT_EQ(used_size, space_stats.used_size_bytes);
    EXPECT_EQ(1u, space_stats.page_stats.size());
    EXPECT_EQ(committed_size,
              space_stats.page_stats.back().committed_size_bytes);
    EXPECT_EQ(committed_size,
              space_stats.page_stats.back().resident_size_bytes);
    EXPECT_EQ(used_size, space_stats.page_stats.back().used_size_bytes);
  }
  EXPECT_TRUE(found_non_empty_space);
}

TEST_F(HeapStatisticsCollectorTest, BriefStatisticsWithDiscardingOnNormalPage) {
  if (!Sweeper::CanDiscardMemory()) return;

  Persistent<GCed<1>> holder =
      MakeGarbageCollected<GCed<1>>(GetHeap()->GetAllocationHandle());
  ConservativeMemoryDiscardingGC();
  HeapStatistics brief_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kBrief);
  // Do not enforce exact resident_size_bytes here as this is an implementation
  // detail of the sweeper.
  EXPECT_GT(brief_stats.committed_size_bytes, brief_stats.resident_size_bytes);
  EXPECT_EQ(0u, brief_stats.pooled_memory_size_bytes);
}

TEST_F(HeapStatisticsCollectorTest,
       BriefStatisticsWithoutDiscardingOnNormalPage) {
  if (!Sweeper::CanDiscardMemory()) return;

  MakeGarbageCollected<GCed<1>>(GetHeap()->GetAllocationHandle());

  // kNoHeapPointers: make the test deterministic, not depend on what the
  // compiler does with the stack.
  internal::Heap::From(GetHeap())->CollectGarbage(
      {CollectionType::kMinor, Heap::StackState::kNoHeapPointers,
       cppgc::Heap::MarkingType::kAtomic, cppgc::Heap::SweepingType::kAtomic,
       GCConfig::FreeMemoryHandling::kDoNotDiscard});

  HeapStatistics brief_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kBrief);
  // Pooled memory, since it wasn't discarded by the sweeper.
  EXPECT_NE(brief_stats.pooled_memory_size_bytes, 0u);
  // Pooled memory is committed and resident.
  EXPECT_EQ(brief_stats.pooled_memory_size_bytes,
            brief_stats.resident_size_bytes);
  EXPECT_EQ(brief_stats.pooled_memory_size_bytes,
            brief_stats.committed_size_bytes);
  // But not allocated.
  EXPECT_EQ(brief_stats.used_size_bytes, 0u);

  // Pooled memory goes away when discarding, and is not accounted for once
  // discarded.
  internal::Heap::From(GetHeap())->CollectGarbage(
      {CollectionType::kMinor, Heap::StackState::kMayContainHeapPointers,
       cppgc::Heap::MarkingType::kAtomic, cppgc::Heap::SweepingType::kAtomic,
       GCConfig::FreeMemoryHandling::kDiscardWherePossible});
  brief_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kBrief);
  EXPECT_EQ(0u, brief_stats.pooled_memory_size_bytes);
  EXPECT_EQ(0u, brief_stats.resident_size_bytes);
  EXPECT_EQ(0u, brief_stats.committed_size_bytes);
  EXPECT_EQ(0u, brief_stats.used_size_bytes);
}

TEST_F(HeapStatisticsCollectorTest,
       DetailedStatisticsWithDiscardingOnNormalPage) {
  if (!Sweeper::CanDiscardMemory()) return;

  Persistent<GCed<1>> holder =
      MakeGarbageCollected<GCed<1>>(GetHeap()->GetAllocationHandle());
  ConservativeMemoryDiscardingGC();
  HeapStatistics detailed_stats = Heap::From(GetHeap())->CollectStatistics(
      HeapStatistics::DetailLevel::kDetailed);
  // Do not enforce exact resident_size_bytes here as this is an implementation
  // detail of the sweeper.
  EXPECT_GT(detailed_stats.committed_size_bytes,
            detailed_stats.resident_size_bytes);
  EXPECT_EQ(0u, detailed_stats.pooled_memory_size_bytes);
  bool found_page = false;
  for (const auto& space_stats : detailed_stats.space_stats) {
    if (space_stats.committed_size_bytes == 0) continue;

    // We should find a single page here that contains memory that was
    // discarded.
    EXPECT_EQ(1u, space_stats.page_stats.size());
    const auto& page_stats = space_stats.page_stats[0];
    EXPECT_GT(page_stats.committed_size_bytes, page_stats.resident_size_bytes);
    found_page = true;
  }
  EXPECT_TRUE(found_page);
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/unittests/heap/cppgc/heap-unittest.cc                                      0000664 0000000 0000000 00000034472 14746647661 0024212 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/heap.h"

#include <algorithm>
#include <iterator>
#include <numeric>

#include "include/cppgc/allocation.h"
#include "include/cppgc/cross-thread-persistent.h"
#include "include/cppgc/heap-consistency.h"
#include "include/cppgc/heap-state.h"
#include "include/cppgc/persistent.h"
#include "include/cppgc/prefinalizer.h"
#include "src/heap/cppgc/globals.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class GCHeapTest : public testing::TestWithHeap {
 public:
  void ConservativeGC() {
    internal::Heap::From(GetHeap())->CollectGarbage(
        GCConfig::ConservativeAtomicConfig());
  }
  void PreciseGC() {
    internal::Heap::From(GetHeap())->CollectGarbage(
        GCConfig::PreciseAtomicConfig());
  }
};

class GCHeapDeathTest : public GCHeapTest {};

class Foo : public GarbageCollected<Foo> {
 public:
  static size_t destructor_callcount;

  Foo() { destructor_callcount = 0; }
  ~Foo() { destructor_callcount++; }

  void Trace(cppgc::Visitor*) const {}
};

size_t Foo::destructor_callcount;

template <size_t Size>
class GCed : public GarbageCollected<GCed<Size>> {
 public:
  void Trace(cppgc::Visitor*) const {}
  char buf[Size];
};

}  // namespace

TEST_F(GCHeapTest, PreciseGCReclaimsObjectOnStack) {
  Foo* volatile do_not_access =
      MakeGarbageCollected<Foo>(GetAllocationHandle());
  USE(do_not_access);
  EXPECT_EQ(0u, Foo::destructor_callcount);
  PreciseGC();
  EXPECT_EQ(1u, Foo::destructor_callcount);
  PreciseGC();
  EXPECT_EQ(1u, Foo::destructor_callcount);
}

namespace {

const void* ConservativeGCReturningObject(cppgc::Heap* heap,
                                          const void* object) {
  internal::Heap::From(heap)->CollectGarbage(
      GCConfig::ConservativeAtomicConfig());
  return object;
}

}  // namespace

TEST_F(GCHeapTest, ConservativeGCRetainsObjectOnStack) {
  Foo* volatile object = MakeGarbageCollected<Foo>(GetAllocationHandle());
  EXPECT_EQ(0u, Foo::destructor_callcount);
  EXPECT_EQ(object, ConservativeGCReturningObject(GetHeap(), object));
  EXPECT_EQ(0u, Foo::destructor_callcount);
  PreciseGC();
  EXPECT_EQ(1u, Foo::destructor_callcount);
  PreciseGC();
  EXPECT_EQ(1u, Foo::destructor_callcount);
}

namespace {

class GCedWithFinalizer final : public GarbageCollected<GCedWithFinalizer> {
 public:
  static size_t destructor_counter;

  GCedWithFinalizer() { destructor_counter = 0; }
  ~GCedWithFinalizer() { destructor_counter++; }
  void Trace(Visitor* visitor) const {}
};
// static
size_t GCedWithFinalizer::destructor_counter = 0;

class LargeObjectGCDuringCtor final
    : public GarbageCollected<LargeObjectGCDuringCtor> {
 public:
  static constexpr size_t kDataSize = kLargeObjectSizeThreshold + 1;

  explicit LargeObjectGCDuringCtor(cppgc::Heap* heap)
      : child_(MakeGarbageCollected<GCedWithFinalizer>(
            heap->GetAllocationHandle())) {
    internal::Heap::From(heap)->CollectGarbage(
        GCConfig::ConservativeAtomicConfig());
  }

  void Trace(Visitor* visitor) const { visitor->Trace(child_); }

  char data[kDataSize];
  Member<GCedWithFinalizer> child_;
};

}  // namespace

TEST_F(GCHeapTest, ConservativeGCFromLargeObjectCtorFindsObject) {
  GCedWithFinalizer::destructor_counter = 0;
  MakeGarbageCollected<LargeObjectGCDuringCtor>(GetAllocationHandle(),
                                                GetHeap());
  EXPECT_EQ(0u, GCedWithFinalizer::destructor_counter);
}

TEST_F(GCHeapTest, ObjectPayloadSize) {
  static constexpr size_t kNumberOfObjectsPerArena = 16;
  static constexpr size_t kObjectSizes[] = {1, 32, 64, 128,
                                            2 * kLargeObjectSizeThreshold};

  EXPECT_EQ(0u, Heap::From(GetHeap())->ObjectPayloadSize());

  {
    subtle::NoGarbageCollectionScope no_gc(*Heap::From(GetHeap()));

    for (size_t k = 0; k < kNumberOfObjectsPerArena; ++k) {
      MakeGarbageCollected<GCed<kObjectSizes[0]>>(GetAllocationHandle());
      MakeGarbageCollected<GCed<kObjectSizes[1]>>(GetAllocationHandle());
      MakeGarbageCollected<GCed<kObjectSizes[2]>>(GetAllocationHandle());
      MakeGarbageCollected<GCed<kObjectSizes[3]>>(GetAllocationHandle());
      MakeGarbageCollected<GCed<kObjectSizes[4]>>(GetAllocationHandle());
    }

    size_t aligned_object_sizes[arraysize(kObjectSizes)];
    std::transform(std::cbegin(kObjectSizes), std::cend(kObjectSizes),
                   std::begin(aligned_object_sizes), [](size_t size) {
                     return RoundUp(size, kAllocationGranularity);
                   });
    const size_t expected_size = std::accumulate(
        std::cbegin(aligned_object_sizes), std::cend(aligned_object_sizes), 0u,
        [](size_t acc, size_t size) {
          return acc + kNumberOfObjectsPerArena * size;
        });
    // TODO(chromium:1056170): Change to EXPECT_EQ when proper sweeping is
    // implemented.
    EXPECT_LE(expected_size, Heap::From(GetHeap())->ObjectPayloadSize());
  }

  PreciseGC();
  EXPECT_EQ(0u, Heap::From(GetHeap())->ObjectPayloadSize());
}

TEST_F(GCHeapTest, AllocateWithAdditionalBytes) {
  static constexpr size_t kBaseSize = sizeof(HeapObjectHeader) + sizeof(Foo);
  static constexpr size_t kAdditionalBytes = 10u * kAllocationGranularity;
  {
    Foo* object = MakeGarbageCollected<Foo>(GetAllocationHandle());
    EXPECT_LE(kBaseSize, HeapObjectHeader::FromObject(object).AllocatedSize());
  }
  {
    Foo* object = MakeGarbageCollected<Foo>(GetAllocationHandle(),
                                            AdditionalBytes(kAdditionalBytes));
    EXPECT_LE(kBaseSize + kAdditionalBytes,
              HeapObjectHeader::FromObject(object).AllocatedSize());
  }
  {
    Foo* object = MakeGarbageCollected<Foo>(
        GetAllocationHandle(),
        AdditionalBytes(kAdditionalBytes * kAdditionalBytes));
    EXPECT_LE(kBaseSize + kAdditionalBytes * kAdditionalBytes,
              HeapObjectHeader::FromObject(object).AllocatedSize());
  }
}

TEST_F(GCHeapTest, AllocatedSizeDependOnAdditionalBytes) {
  static constexpr size_t kAdditionalBytes = 10u * kAllocationGranularity;
  Foo* object = MakeGarbageCollected<Foo>(GetAllocationHandle());
  Foo* object_with_bytes = MakeGarbageCollected<Foo>(
      GetAllocationHandle(), AdditionalBytes(kAdditionalBytes));
  Foo* object_with_more_bytes = MakeGarbageCollected<Foo>(
      GetAllocationHandle(),
      AdditionalBytes(kAdditionalBytes * kAdditionalBytes));
  EXPECT_LT(HeapObjectHeader::FromObject(object).AllocatedSize(),
            HeapObjectHeader::FromObject(object_with_bytes).AllocatedSize());
  EXPECT_LT(
      HeapObjectHeader::FromObject(object_with_bytes).AllocatedSize(),
      HeapObjectHeader::FromObject(object_with_more_bytes).AllocatedSize());
}

TEST_F(GCHeapTest, Epoch) {
  const size_t epoch_before = internal::Heap::From(GetHeap())->epoch();
  PreciseGC();
  const size_t epoch_after_gc = internal::Heap::From(GetHeap())->epoch();
  EXPECT_EQ(epoch_after_gc, epoch_before + 1);
}

TEST_F(GCHeapTest, NoGarbageCollectionScope) {
  const size_t epoch_before = internal::Heap::From(GetHeap())->epoch();
  {
    subtle::NoGarbageCollectionScope scope(GetHeap()->GetHeapHandle());
    PreciseGC();
  }
  const size_t epoch_after_gc = internal::Heap::From(GetHeap())->epoch();
  EXPECT_EQ(epoch_after_gc, epoch_before);
}

TEST_F(GCHeapTest, IsGarbageCollectionAllowed) {
  EXPECT_TRUE(
      subtle::DisallowGarbageCollectionScope::IsGarbageCollectionAllowed(
          GetHeap()->GetHeapHandle()));
  {
    subtle::DisallowGarbageCollectionScope disallow_gc(*Heap::From(GetHeap()));
    EXPECT_FALSE(
        subtle::DisallowGarbageCollectionScope::IsGarbageCollectionAllowed(
            GetHeap()->GetHeapHandle()));
  }
}

TEST_F(GCHeapTest, IsMarking) {
  GCConfig config =
      GCConfig::PreciseIncrementalMarkingConcurrentSweepingConfig();
  auto* heap = Heap::From(GetHeap());
  EXPECT_FALSE(subtle::HeapState::IsMarking(*heap));
  heap->StartIncrementalGarbageCollection(config);
  EXPECT_TRUE(subtle::HeapState::IsMarking(*heap));
  heap->FinalizeIncrementalGarbageCollectionIfRunning(config);
  EXPECT_FALSE(subtle::HeapState::IsMarking(*heap));
  heap->AsBase().sweeper().FinishIfRunning();
  EXPECT_FALSE(subtle::HeapState::IsMarking(*heap));
}

TEST_F(GCHeapTest, IsSweeping) {
  GCConfig config =
      GCConfig::PreciseIncrementalMarkingConcurrentSweepingConfig();
  auto* heap = Heap::From(GetHeap());
  EXPECT_FALSE(subtle::HeapState::IsSweeping(*heap));
  heap->StartIncrementalGarbageCollection(config);
  EXPECT_FALSE(subtle::HeapState::IsSweeping(*heap));
  heap->FinalizeIncrementalGarbageCollectionIfRunning(config);
  EXPECT_TRUE(subtle::HeapState::IsSweeping(*heap));
  heap->AsBase().sweeper().FinishIfRunning();
  EXPECT_FALSE(subtle::HeapState::IsSweeping(*heap));
}

namespace {

class GCedExpectSweepingOnOwningThread final
    : public GarbageCollected<GCedExpectSweepingOnOwningThread> {
 public:
  explicit GCedExpectSweepingOnOwningThread(const HeapHandle& heap_handle)
      : heap_handle_(heap_handle) {}
  ~GCedExpectSweepingOnOwningThread() {
    EXPECT_TRUE(subtle::HeapState::IsSweepingOnOwningThread(heap_handle_));
  }

  void Trace(Visitor*) const {}

 private:
  const HeapHandle& heap_handle_;
};

}  // namespace

TEST_F(GCHeapTest, IsSweepingOnOwningThread) {
  GCConfig config =
      GCConfig::PreciseIncrementalMarkingConcurrentSweepingConfig();
  auto* heap = Heap::From(GetHeap());
  MakeGarbageCollected<GCedExpectSweepingOnOwningThread>(
      heap->GetAllocationHandle(), *heap);
  EXPECT_FALSE(subtle::HeapState::IsSweepingOnOwningThread(*heap));
  heap->StartIncrementalGarbageCollection(config);
  EXPECT_FALSE(subtle::HeapState::IsSweepingOnOwningThread(*heap));
  heap->FinalizeIncrementalGarbageCollectionIfRunning(config);
  EXPECT_FALSE(subtle::HeapState::IsSweepingOnOwningThread(*heap));
  heap->AsBase().sweeper().FinishIfRunning();
  EXPECT_FALSE(subtle::HeapState::IsSweepingOnOwningThread(*heap));
}

namespace {

class ExpectAtomicPause final : public GarbageCollected<ExpectAtomicPause> {
  CPPGC_USING_PRE_FINALIZER(ExpectAtomicPause, PreFinalizer);

 public:
  explicit ExpectAtomicPause(HeapHandle& handle) : handle_(handle) {}
  ~ExpectAtomicPause() {
    EXPECT_TRUE(subtle::HeapState::IsInAtomicPause(handle_));
  }
  void PreFinalizer() {
    EXPECT_TRUE(subtle::HeapState::IsInAtomicPause(handle_));
  }
  void Trace(Visitor*) const {}

 private:
  HeapHandle& handle_;
};

}  // namespace

TEST_F(GCHeapTest, IsInAtomicPause) {
  GCConfig config = GCConfig::PreciseIncrementalConfig();
  auto* heap = Heap::From(GetHeap());
  MakeGarbageCollected<ExpectAtomicPause>(heap->object_allocator(), *heap);
  EXPECT_FALSE(subtle::HeapState::IsInAtomicPause(*heap));
  heap->StartIncrementalGarbageCollection(config);
  EXPECT_FALSE(subtle::HeapState::IsInAtomicPause(*heap));
  heap->FinalizeIncrementalGarbageCollectionIfRunning(config);
  EXPECT_FALSE(subtle::HeapState::IsInAtomicPause(*heap));
  heap->AsBase().sweeper().FinishIfRunning();
  EXPECT_FALSE(subtle::HeapState::IsInAtomicPause(*heap));
}

TEST_F(GCHeapTest, TerminateEmptyHeap) { Heap::From(GetHeap())->Terminate(); }

TEST_F(GCHeapTest, TerminateClearsPersistent) {
  Persistent<Foo> foo = MakeGarbageCollected<Foo>(GetAllocationHandle());
  EXPECT_TRUE(foo.Get());
  Heap::From(GetHeap())->Terminate();
  EXPECT_FALSE(foo.Get());
}

TEST_F(GCHeapTest, TerminateInvokesDestructor) {
  Persistent<Foo> foo = MakeGarbageCollected<Foo>(GetAllocationHandle());
  EXPECT_EQ(0u, Foo::destructor_callcount);
  Heap::From(GetHeap())->Terminate();
  EXPECT_EQ(1u, Foo::destructor_callcount);
}

namespace {

template <template <typename> class PersistentType>
class Cloner final : public GarbageCollected<Cloner<PersistentType>> {
 public:
  static size_t destructor_count;

  Cloner(cppgc::AllocationHandle& handle, size_t count)
      : handle_(handle), count_(count) {}

  ~Cloner() {
    EXPECT_FALSE(new_instance_);
    destructor_count++;
    if (count_) {
      new_instance_ =
          MakeGarbageCollected<Cloner>(handle_, handle_, count_ - 1);
    }
  }

  void Trace(Visitor*) const {}

 private:
  static PersistentType<Cloner> new_instance_;

  cppgc::AllocationHandle& handle_;
  size_t count_;
};

// static
template <template <typename> class PersistentType>
PersistentType<Cloner<PersistentType>> Cloner<PersistentType>::new_instance_;
// static
template <template <typename> class PersistentType>
size_t Cloner<PersistentType>::destructor_count;

}  // namespace

template <template <typename> class PersistentType>
void TerminateReclaimsNewState(std::shared_ptr<Platform> platform) {
  auto heap = cppgc::Heap::Create(platform);
  using ClonerImpl = Cloner<PersistentType>;
  Persistent<ClonerImpl> cloner = MakeGarbageCollected<ClonerImpl>(
      heap->GetAllocationHandle(), heap->GetAllocationHandle(), 1);
  ClonerImpl::destructor_count = 0;
  EXPECT_TRUE(cloner.Get());
  Heap::From(heap.get())->Terminate();
  EXPECT_FALSE(cloner.Get());
  EXPECT_EQ(2u, ClonerImpl::destructor_count);
}

TEST_F(GCHeapTest, TerminateReclaimsNewState) {
  TerminateReclaimsNewState<Persistent>(GetPlatformHandle());
  TerminateReclaimsNewState<WeakPersistent>(GetPlatformHandle());
  TerminateReclaimsNewState<cppgc::subtle::CrossThreadPersistent>(
      GetPlatformHandle());
  TerminateReclaimsNewState<cppgc::subtle::WeakCrossThreadPersistent>(
      GetPlatformHandle());
}

TEST_F(GCHeapDeathTest, TerminateProhibitsAllocation) {
  Heap::From(GetHeap())->Terminate();
  EXPECT_DEATH_IF_SUPPORTED(MakeGarbageCollected<Foo>(GetAllocationHandle()),
                            "");
}

template <template <typename> class PersistentType>
void LargeChainOfNewStates(cppgc::Heap& heap) {
  using ClonerImpl = Cloner<PersistentType>;
  Persistent<ClonerImpl> cloner = MakeGarbageCollected<ClonerImpl>(
      heap.GetAllocationHandle(), heap.GetAllocationHandle(), 1000);
  ClonerImpl::destructor_count = 0;
  EXPECT_TRUE(cloner.Get());
  // Terminate() requires destructors to stop creating new state within a few
  // garbage collections.
  EXPECT_DEATH_IF_SUPPORTED(Heap::From(&heap)->Terminate(), "");
}

TEST_F(GCHeapDeathTest, LargeChainOfNewStatesPersistent) {
  LargeChainOfNewStates<Persistent>(*GetHeap());
}

TEST_F(GCHeapDeathTest, LargeChainOfNewStatesCrossThreadPersistent) {
  LargeChainOfNewStates<subtle::CrossThreadPersistent>(*GetHeap());
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                      node-23.7.0/deps/v8/test/unittests/heap/cppgc/liveness-broker-unittest.cc                           0000664 0000000 0000000 00000002635 14746647661 0026403 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2021 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/liveness-broker.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/garbage-collected.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/liveness-broker.h"
#include "test/unittests/heap/cppgc/tests.h"

namespace cppgc {
namespace internal {

namespace {

using LivenessBrokerTest = testing::TestSupportingAllocationOnly;

class GCed : public GarbageCollected<GCed> {
 public:
  void Trace(cppgc::Visitor*) const {}
};

}  // namespace

TEST_F(LivenessBrokerTest, IsHeapObjectAliveForConstPointer) {
  // Regression test: http://crbug.com/661363.
  GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);
  LivenessBroker broker = internal::LivenessBrokerFactory::Create();
  EXPECT_TRUE(header.TryMarkAtomic());
  EXPECT_TRUE(broker.IsHeapObjectAlive(object));
  const GCed* const_object = const_cast<const GCed*>(object);
  EXPECT_TRUE(broker.IsHeapObjectAlive(const_object));
}

TEST_F(LivenessBrokerTest, IsHeapObjectAliveNullptr) {
  GCed* object = nullptr;
  LivenessBroker broker = internal::LivenessBrokerFactory::Create();
  EXPECT_TRUE(broker.IsHeapObjectAlive(object));
}

}  // namespace internal
}  // namespace cppgc
                                                                                                   node-23.7.0/deps/v8/test/unittests/heap/cppgc/logging-unittest.cc                                   0000664 0000000 0000000 00000004231 14746647661 0024711 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/internal/logging.h"

#include <string>

#include "include/cppgc/source-location.h"
#include "testing/gmock/include/gmock/gmock.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {
// GCC < 9 has a bug due to which calling non-constexpr functions are not
// allowed even on constexpr path:
// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=67026.
#if !defined(__GNUC__) || defined(__clang__)
constexpr int CheckInConstexpr(int a) {
  CPPGC_DCHECK(a > 0);
  CPPGC_CHECK(a > 0);
  return a;
}
#endif
}  // namespace

TEST(LoggingTest, Pass) {
  CPPGC_DCHECK(true);
  CPPGC_CHECK(true);
}

TEST(LoggingTest, Fail) {
#if DEBUG
  EXPECT_DEATH_IF_SUPPORTED(CPPGC_DCHECK(false), "");
#endif
  EXPECT_DEATH_IF_SUPPORTED(CPPGC_CHECK(false), "");
}

TEST(LoggingTest, DontReportUnused) {
  int a = 1;
  CPPGC_DCHECK(a);
}

#if !defined(__GNUC__) || defined(__clang__)
TEST(LoggingTest, ConstexprContext) {
  constexpr int a = CheckInConstexpr(1);
  CPPGC_DCHECK(a);
}
#endif

#if DEBUG && !defined(OFFICIAL_BUILD) && GTEST_HAS_DEATH_TEST
TEST(LoggingTest, Message) {
  using ::testing::ContainsRegex;
  EXPECT_DEATH_IF_SUPPORTED(CPPGC_DCHECK(5 == 7),
                            ContainsRegex("failed.*5 == 7"));
  EXPECT_DEATH_IF_SUPPORTED(CPPGC_CHECK(5 == 7),
                            ContainsRegex("failed.*5 == 7"));
}

#if V8_SUPPORTS_SOURCE_LOCATION
TEST(LoggingTest, SourceLocation) {
  using ::testing::AllOf;
  using ::testing::HasSubstr;
  // clang-format off
  constexpr auto loc = SourceLocation::Current();
  EXPECT_DEATH_IF_SUPPORTED(CPPGC_DCHECK(false), AllOf(HasSubstr(loc.FileName()), HasSubstr(std::to_string(loc.Line() + 1)))); // NOLINT(whitespace/line_length)
  EXPECT_DEATH_IF_SUPPORTED(CPPGC_CHECK(false), AllOf(HasSubstr(loc.FileName()), HasSubstr(std::to_string(loc.Line() + 2)))); // NOLINT(whitespace/line_length)
  // clang-format on
}
#endif  // V8_SUPPORTS_SOURCE_LOCATION

#endif  // DEBUG

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/unittests/heap/cppgc/marker-unittest.cc                                    0000664 0000000 0000000 00000043546 14746647661 0024560 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/marker.h"

#include <memory>

#include "include/cppgc/allocation.h"
#include "include/cppgc/ephemeron-pair.h"
#include "include/cppgc/internal/pointer-policies.h"
#include "include/cppgc/member.h"
#include "include/cppgc/persistent.h"
#include "include/cppgc/trace-trait.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/marking-visitor.h"
#include "src/heap/cppgc/object-allocator.h"
#include "src/heap/cppgc/stats-collector.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {
class MarkerTest : public testing::TestWithHeap {
 public:
  void DoMarking(StackState stack_state) {
    const MarkingConfig config = {CollectionType::kMajor, stack_state};
    auto* heap = Heap::From(GetHeap());
    InitializeMarker(*heap, GetPlatformHandle().get(), config);
    marker_->FinishMarking(stack_state);
    // Pretend do finish sweeping as StatsCollector verifies that Notify*
    // methods are called in the right order.
    heap->stats_collector()->NotifySweepingCompleted(
        GCConfig::SweepingType::kAtomic);
  }

  void InitializeMarker(HeapBase& heap, cppgc::Platform* platform,
                        MarkingConfig config) {
    marker_ = std::make_unique<Marker>(heap, platform, config);
    marker_->StartMarking();
  }

  Marker* marker() const { return marker_.get(); }

  void ResetMarker() { marker_.reset(); }

 private:
  std::unique_ptr<Marker> marker_;
};

class GCed : public GarbageCollected<GCed> {
 public:
  void SetChild(GCed* child) { child_ = child; }
  void SetWeakChild(GCed* child) { weak_child_ = child; }
  GCed* child() const { return child_.Get(); }
  GCed* weak_child() const { return weak_child_.Get(); }
  void Trace(cppgc::Visitor* visitor) const {
    visitor->Trace(child_);
    visitor->Trace(weak_child_);
  }

 private:
  Member<GCed> child_;
  WeakMember<GCed> weak_child_;
};

template <typename T>
V8_NOINLINE T access(volatile const T& t) {
  return t;
}

}  // namespace

TEST_F(MarkerTest, PersistentIsMarked) {
  Persistent<GCed> object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);
  EXPECT_FALSE(header.IsMarked());
  DoMarking(StackState::kNoHeapPointers);
  EXPECT_TRUE(header.IsMarked());
}

TEST_F(MarkerTest, ReachableMemberIsMarked) {
  Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
  parent->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  HeapObjectHeader& header = HeapObjectHeader::FromObject(parent->child());
  EXPECT_FALSE(header.IsMarked());
  DoMarking(StackState::kNoHeapPointers);
  EXPECT_TRUE(header.IsMarked());
}

TEST_F(MarkerTest, UnreachableMemberIsNotMarked) {
  Member<GCed> object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);
  EXPECT_FALSE(header.IsMarked());
  DoMarking(StackState::kNoHeapPointers);
  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkerTest, ObjectReachableFromStackIsMarked) {
  GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  EXPECT_FALSE(HeapObjectHeader::FromObject(object).IsMarked());
  DoMarking(StackState::kMayContainHeapPointers);
  EXPECT_TRUE(HeapObjectHeader::FromObject(object).IsMarked());
  access(object);
}

TEST_F(MarkerTest, ObjectReachableOnlyFromStackIsNotMarkedIfStackIsEmpty) {
  GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);
  EXPECT_FALSE(header.IsMarked());
  DoMarking(StackState::kNoHeapPointers);
  EXPECT_FALSE(header.IsMarked());
  access(object);
}

TEST_F(MarkerTest, WeakReferenceToUnreachableObjectIsCleared) {
  {
    WeakPersistent<GCed> weak_object =
        MakeGarbageCollected<GCed>(GetAllocationHandle());
    EXPECT_TRUE(weak_object);
    DoMarking(StackState::kNoHeapPointers);
    EXPECT_FALSE(weak_object);
  }
  {
    Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
    parent->SetWeakChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
    EXPECT_TRUE(parent->weak_child());
    DoMarking(StackState::kNoHeapPointers);
    EXPECT_FALSE(parent->weak_child());
  }
}

TEST_F(MarkerTest, WeakReferenceToReachableObjectIsNotCleared) {
  // Reachable from Persistent
  {
    Persistent<GCed> object = MakeGarbageCollected<GCed>(GetAllocationHandle());
    WeakPersistent<GCed> weak_object(object);
    EXPECT_TRUE(weak_object);
    DoMarking(StackState::kNoHeapPointers);
    EXPECT_TRUE(weak_object);
  }
  {
    Persistent<GCed> object = MakeGarbageCollected<GCed>(GetAllocationHandle());
    Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
    parent->SetWeakChild(object);
    EXPECT_TRUE(parent->weak_child());
    DoMarking(StackState::kNoHeapPointers);
    EXPECT_TRUE(parent->weak_child());
  }
  // Reachable from Member
  {
    Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
    WeakPersistent<GCed> weak_object(
        MakeGarbageCollected<GCed>(GetAllocationHandle()));
    parent->SetChild(weak_object);
    EXPECT_TRUE(weak_object);
    DoMarking(StackState::kNoHeapPointers);
    EXPECT_TRUE(weak_object);
  }
  {
    Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
    parent->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
    parent->SetWeakChild(parent->child());
    EXPECT_TRUE(parent->weak_child());
    DoMarking(StackState::kNoHeapPointers);
    EXPECT_TRUE(parent->weak_child());
  }
  // Reachable from stack
  {
    GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
    WeakPersistent<GCed> weak_object(object);
    EXPECT_TRUE(weak_object);
    DoMarking(StackState::kMayContainHeapPointers);
    EXPECT_TRUE(weak_object);
    access(object);
  }
  {
    GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
    Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
    parent->SetWeakChild(object);
    EXPECT_TRUE(parent->weak_child());
    DoMarking(StackState::kMayContainHeapPointers);
    EXPECT_TRUE(parent->weak_child());
    access(object);
  }
}

TEST_F(MarkerTest, DeepHierarchyIsMarked) {
  static constexpr int kHierarchyDepth = 10;
  Persistent<GCed> root = MakeGarbageCollected<GCed>(GetAllocationHandle());
  GCed* parent = root;
  for (int i = 0; i < kHierarchyDepth; ++i) {
    parent->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
    parent->SetWeakChild(parent->child());
    parent = parent->child();
  }
  DoMarking(StackState::kNoHeapPointers);
  EXPECT_TRUE(HeapObjectHeader::FromObject(root).IsMarked());
  parent = root;
  for (int i = 0; i < kHierarchyDepth; ++i) {
    EXPECT_TRUE(HeapObjectHeader::FromObject(parent->child()).IsMarked());
    EXPECT_TRUE(parent->weak_child());
    parent = parent->child();
  }
}

TEST_F(MarkerTest, NestedObjectsOnStackAreMarked) {
  GCed* root = MakeGarbageCollected<GCed>(GetAllocationHandle());
  root->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  root->child()->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  DoMarking(StackState::kMayContainHeapPointers);
  EXPECT_TRUE(HeapObjectHeader::FromObject(root).IsMarked());
  EXPECT_TRUE(HeapObjectHeader::FromObject(root->child()).IsMarked());
  EXPECT_TRUE(HeapObjectHeader::FromObject(root->child()->child()).IsMarked());
}

namespace {

class GCedWithCallback : public GarbageCollected<GCedWithCallback> {
 public:
  template <typename Callback>
  explicit GCedWithCallback(Callback callback) {
    callback(this);
  }

  template <typename Callback>
  GCedWithCallback(Callback callback, GCed* gced) : gced_(gced) {
    callback(this);
  }

  void Trace(Visitor* visitor) const { visitor->Trace(gced_); }

  GCed* gced() const { return gced_; }

 private:
  Member<GCed> gced_;
};

}  // namespace

TEST_F(MarkerTest, InConstructionObjectIsEventuallyMarkedEmptyStack) {
  static const MarkingConfig config = {CollectionType::kMajor,
                                       StackState::kMayContainHeapPointers};
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(), config);
  GCedWithCallback* object = MakeGarbageCollected<GCedWithCallback>(
      GetAllocationHandle(), [marker = marker()](GCedWithCallback* obj) {
        Member<GCedWithCallback> member(obj);
        marker->Visitor().Trace(member);
      });
  EXPECT_FALSE(HeapObjectHeader::FromObject(object).IsMarked());
  marker()->FinishMarking(StackState::kMayContainHeapPointers);
  EXPECT_TRUE(HeapObjectHeader::FromObject(object).IsMarked());
}

TEST_F(MarkerTest, InConstructionObjectIsEventuallyMarkedNonEmptyStack) {
  static const MarkingConfig config = {CollectionType::kMajor,
                                       StackState::kMayContainHeapPointers};
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(), config);
  MakeGarbageCollected<GCedWithCallback>(
      GetAllocationHandle(), [marker = marker()](GCedWithCallback* obj) {
        Member<GCedWithCallback> member(obj);
        marker->Visitor().Trace(member);
        EXPECT_FALSE(HeapObjectHeader::FromObject(obj).IsMarked());
        marker->FinishMarking(StackState::kMayContainHeapPointers);
        EXPECT_TRUE(HeapObjectHeader::FromObject(obj).IsMarked());
      });
}

namespace {

// Storage that can be used to hide a pointer from the GC. Only useful when
// dealing with the stack separately.
class GCObliviousObjectStorage final {
 public:
  GCObliviousObjectStorage()
      : storage_(std::make_unique<const void*>(nullptr)) {}

  template <typename T>
  void set_object(T* t) {
    *storage_.get() = TraceTrait<T>::GetTraceDescriptor(t).base_object_payload;
  }

  const void* object() const { return *storage_; }

 private:
  std::unique_ptr<const void*> storage_;
};

V8_NOINLINE void RegisterInConstructionObject(
    AllocationHandle& allocation_handle, Visitor& v,
    GCObliviousObjectStorage& storage) {
  // Create deeper stack to avoid finding any temporary reference in the caller.
  char space[500];
  USE(space);
  MakeGarbageCollected<GCedWithCallback>(
      allocation_handle,
      [&visitor = v, &storage](GCedWithCallback* obj) {
        Member<GCedWithCallback> member(obj);
        // Adds GCedWithCallback to in-construction objects.
        visitor.Trace(member);
        EXPECT_FALSE(HeapObjectHeader::FromObject(obj).IsMarked());
        // The inner object GCed is only found if GCedWithCallback is processed.
        storage.set_object(obj->gced());
      },
      // Initializing store does not trigger a write barrier.
      MakeGarbageCollected<GCed>(allocation_handle));
}

}  // namespace

TEST_F(MarkerTest,
       InConstructionObjectIsEventuallyMarkedDifferentNonEmptyStack) {
  static const MarkingConfig config = {CollectionType::kMajor,
                                       StackState::kMayContainHeapPointers};
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(), config);

  GCObliviousObjectStorage storage;
  RegisterInConstructionObject(GetAllocationHandle(), marker()->Visitor(),
                               storage);
  EXPECT_FALSE(HeapObjectHeader::FromObject(storage.object()).IsMarked());
  marker()->FinishMarking(StackState::kMayContainHeapPointers);
  EXPECT_TRUE(HeapObjectHeader::FromObject(storage.object()).IsMarked());
}

TEST_F(MarkerTest, SentinelNotClearedOnWeakPersistentHandling) {
  static const MarkingConfig config = {
      CollectionType::kMajor, StackState::kNoHeapPointers,
      MarkingConfig::MarkingType::kIncremental};
  Persistent<GCed> root = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto* tmp = MakeGarbageCollected<GCed>(GetAllocationHandle());
  root->SetWeakChild(tmp);
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(), config);
  while (!marker()->IncrementalMarkingStepForTesting(
      StackState::kNoHeapPointers)) {
  }
  // {root} object must be marked at this point because we do not allow
  // encountering kSentinelPointer in WeakMember on regular Trace() calls.
  ASSERT_TRUE(HeapObjectHeader::FromObject(root.Get()).IsMarked());
  root->SetWeakChild(kSentinelPointer);
  marker()->FinishMarking(StackState::kNoHeapPointers);
  EXPECT_EQ(kSentinelPointer, root->weak_child());
}

namespace {

class SimpleObject final : public GarbageCollected<SimpleObject> {
 public:
  void Trace(Visitor*) const {}
};

class ObjectWithEphemeronPair final
    : public GarbageCollected<ObjectWithEphemeronPair> {
 public:
  explicit ObjectWithEphemeronPair(AllocationHandle& handle)
      : ephemeron_pair_(MakeGarbageCollected<SimpleObject>(handle),
                        MakeGarbageCollected<SimpleObject>(handle)) {}

  void Trace(Visitor* visitor) const {
    // First trace the ephemeron pair. The key is not yet marked as live, so the
    // pair should be recorded for later processing. Then strongly mark the key.
    // Marking the key will not trigger another worklist processing iteration,
    // as it merely continues the same loop for regular objects and will leave
    // the main marking worklist empty. If recording the ephemeron pair doesn't
    // as well, we will get a crash when destroying the marker.
    visitor->Trace(ephemeron_pair_);
    visitor->TraceStrongly(ephemeron_pair_.key);
  }

 private:
  const EphemeronPair<SimpleObject, SimpleObject> ephemeron_pair_;
};

}  // namespace

TEST_F(MarkerTest, MarkerProcessesAllEphemeronPairs) {
  static const MarkingConfig config = {CollectionType::kMajor,
                                       StackState::kNoHeapPointers,
                                       MarkingConfig::MarkingType::kAtomic};
  Persistent<ObjectWithEphemeronPair> obj =
      MakeGarbageCollected<ObjectWithEphemeronPair>(GetAllocationHandle(),
                                                    GetAllocationHandle());
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(), config);
  marker()->FinishMarking(StackState::kNoHeapPointers);
  ResetMarker();
}

// Incremental Marking

class IncrementalMarkingTest : public testing::TestWithHeap {
 public:
  static constexpr MarkingConfig IncrementalPreciseMarkingConfig = {
      CollectionType::kMajor, StackState::kNoHeapPointers,
      MarkingConfig::MarkingType::kIncremental};

  void FinishSteps(StackState stack_state) {
    while (!SingleStep(stack_state)) {
    }
  }

  void FinishMarking() {
    GetMarkerRef()->FinishMarking(StackState::kMayContainHeapPointers);
    // Pretend do finish sweeping as StatsCollector verifies that Notify*
    // methods are called in the right order.
    GetMarkerRef().reset();
    Heap::From(GetHeap())->stats_collector()->NotifySweepingCompleted(
        GCConfig::SweepingType::kIncremental);
  }

  void InitializeMarker(HeapBase& heap, cppgc::Platform* platform,
                        MarkingConfig config) {
    GetMarkerRef() = std::make_unique<Marker>(heap, platform, config);
    GetMarkerRef()->StartMarking();
  }

  MarkerBase* marker() const { return Heap::From(GetHeap())->marker(); }

 private:
  bool SingleStep(StackState stack_state) {
    return GetMarkerRef()->IncrementalMarkingStepForTesting(stack_state);
  }
};

constexpr MarkingConfig IncrementalMarkingTest::IncrementalPreciseMarkingConfig;

TEST_F(IncrementalMarkingTest, RootIsMarkedAfterMarkingStarted) {
  Persistent<GCed> root = MakeGarbageCollected<GCed>(GetAllocationHandle());
  EXPECT_FALSE(HeapObjectHeader::FromObject(root).IsMarked());
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(),
                   IncrementalPreciseMarkingConfig);
  EXPECT_TRUE(HeapObjectHeader::FromObject(root).IsMarked());
  FinishMarking();
}

TEST_F(IncrementalMarkingTest, MemberIsMarkedAfterMarkingSteps) {
  Persistent<GCed> root = MakeGarbageCollected<GCed>(GetAllocationHandle());
  root->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  HeapObjectHeader& header = HeapObjectHeader::FromObject(root->child());
  EXPECT_FALSE(header.IsMarked());
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(),
                   IncrementalPreciseMarkingConfig);
  FinishSteps(StackState::kNoHeapPointers);
  EXPECT_TRUE(header.IsMarked());
  FinishMarking();
}

TEST_F(IncrementalMarkingTest,
       MemberWithWriteBarrierIsMarkedAfterMarkingSteps) {
  Persistent<GCed> root = MakeGarbageCollected<GCed>(GetAllocationHandle());
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(),
                   IncrementalPreciseMarkingConfig);
  root->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  FinishSteps(StackState::kNoHeapPointers);
  HeapObjectHeader& header = HeapObjectHeader::FromObject(root->child());
  EXPECT_TRUE(header.IsMarked());
  FinishMarking();
}

namespace {
class Holder : public GarbageCollected<Holder> {
 public:
  void Trace(Visitor* visitor) const { visitor->Trace(member_); }

  Member<GCedWithCallback> member_;
};
}  // namespace

TEST_F(IncrementalMarkingTest, IncrementalStepDuringAllocation) {
  Persistent<Holder> holder =
      MakeGarbageCollected<Holder>(GetAllocationHandle());
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(),
                   IncrementalPreciseMarkingConfig);
  const HeapObjectHeader* header;
  MakeGarbageCollected<GCedWithCallback>(
      GetAllocationHandle(), [this, &holder, &header](GCedWithCallback* obj) {
        header = &HeapObjectHeader::FromObject(obj);
        holder->member_ = obj;
        EXPECT_FALSE(header->IsMarked());
        FinishSteps(StackState::kMayContainHeapPointers);
        EXPECT_FALSE(header->IsMarked());
      });
  FinishSteps(StackState::kNoHeapPointers);
  EXPECT_TRUE(header->IsMarked());
  FinishMarking();
}

TEST_F(IncrementalMarkingTest, MarkingRunsOutOfWorkEventually) {
  InitializeMarker(*Heap::From(GetHeap()), GetPlatformHandle().get(),
                   IncrementalPreciseMarkingConfig);
  FinishSteps(StackState::kNoHeapPointers);
  FinishMarking();
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                          node-23.7.0/deps/v8/test/unittests/heap/cppgc/marking-verifier-unittest.cc                          0000664 0000000 0000000 00000022546 14746647661 0026535 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/marking-verifier.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/member.h"
#include "include/cppgc/persistent.h"
#include "include/cppgc/prefinalizer.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/heap.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class MarkingVerifierTest : public testing::TestWithHeap {
 public:
  V8_NOINLINE void VerifyMarking(HeapBase& heap, StackState stack_state,
                                 size_t expected_marked_bytes) {
    Heap::From(GetHeap())->object_allocator().ResetLinearAllocationBuffers();
    Heap::From(GetHeap())->stack()->SetMarkerAndCallback(
        [&heap, stack_state, expected_marked_bytes]() {
          MarkingVerifier verifier(heap, CollectionType::kMajor);
          verifier.Run(stack_state, expected_marked_bytes);
        });
  }
};

class GCed : public GarbageCollected<GCed> {
 public:
  void SetChild(GCed* child) { child_ = child; }
  void SetWeakChild(GCed* child) { weak_child_ = child; }
  GCed* child() const { return child_.Get(); }
  GCed* weak_child() const { return weak_child_.Get(); }
  void Trace(cppgc::Visitor* visitor) const {
    visitor->Trace(child_);
    visitor->Trace(weak_child_);
  }

 private:
  Member<GCed> child_;
  WeakMember<GCed> weak_child_;
};

template <typename T>
V8_NOINLINE T access(volatile const T& t) {
  return t;
}

bool MarkHeader(HeapObjectHeader& header) {
  if (header.TryMarkAtomic()) {
    BasePage::FromPayload(&header)->IncrementMarkedBytes(
        header.AllocatedSize());
    return true;
  }
  return false;
}

}  // namespace

// Following tests should not crash.

TEST_F(MarkingVerifierTest, DoesNotDieOnMarkedOnStackReference) {
  GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto& header = HeapObjectHeader::FromObject(object);
  ASSERT_TRUE(MarkHeader(header));
  VerifyMarking(Heap::From(GetHeap())->AsBase(),
                StackState::kMayContainHeapPointers, header.AllocatedSize());
  access(object);
}

TEST_F(MarkingVerifierTest, DoesNotDieOnMarkedMember) {
  Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto& parent_header = HeapObjectHeader::FromObject(parent.Get());
  ASSERT_TRUE(MarkHeader(parent_header));
  parent->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  auto& child_header = HeapObjectHeader::FromObject(parent->child());
  ASSERT_TRUE(MarkHeader(child_header));
  VerifyMarking(Heap::From(GetHeap())->AsBase(), StackState::kNoHeapPointers,
                parent_header.AllocatedSize() + child_header.AllocatedSize());
}

TEST_F(MarkingVerifierTest, DoesNotDieOnMarkedWeakMember) {
  Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto& parent_header = HeapObjectHeader::FromObject(parent.Get());
  ASSERT_TRUE(MarkHeader(parent_header));
  parent->SetWeakChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  auto& child_header = HeapObjectHeader::FromObject(parent->weak_child());
  ASSERT_TRUE(MarkHeader(child_header));
  VerifyMarking(Heap::From(GetHeap())->AsBase(), StackState::kNoHeapPointers,
                parent_header.AllocatedSize() + child_header.AllocatedSize());
}

namespace {

class GCedWithCallback : public GarbageCollected<GCedWithCallback> {
 public:
  template <typename Callback>
  explicit GCedWithCallback(Callback callback) {
    callback(this);
  }
  void Trace(cppgc::Visitor* visitor) const {}
};

}  // namespace

TEST_F(MarkingVerifierTest, DoesNotDieOnInConstructionOnObject) {
  MakeGarbageCollected<GCedWithCallback>(
      GetAllocationHandle(), [this](GCedWithCallback* obj) {
        auto& header = HeapObjectHeader::FromObject(obj);
        CHECK(MarkHeader(header));
        VerifyMarking(Heap::From(GetHeap())->AsBase(),
                      StackState::kMayContainHeapPointers,
                      header.AllocatedSize());
      });
}

namespace {
class GCedWithCallbackAndChild final
    : public GarbageCollected<GCedWithCallbackAndChild> {
 public:
  template <typename Callback>
  GCedWithCallbackAndChild(GCed* gced, Callback callback) : child_(gced) {
    callback(this);
  }
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(child_); }

 private:
  Member<GCed> child_;
};

template <typename T>
struct Holder : public GarbageCollected<Holder<T>> {
 public:
  void Trace(cppgc::Visitor* visitor) const { visitor->Trace(object); }
  Member<T> object = nullptr;
};
}  // namespace

TEST_F(MarkingVerifierTest, DoesntDieOnInConstructionObjectWithWriteBarrier) {
  // Regression test: https://crbug.com/v8/10989.
  // GCedWithCallbackAndChild is marked by write barrier and then discarded by
  // FlushNotFullyConstructedObjects because it is already marked.
  Persistent<Holder<GCedWithCallbackAndChild>> persistent =
      MakeGarbageCollected<Holder<GCedWithCallbackAndChild>>(
          GetAllocationHandle());
  GCConfig config = GCConfig::PreciseIncrementalConfig();
  Heap::From(GetHeap())->StartIncrementalGarbageCollection(config);
  MakeGarbageCollected<GCedWithCallbackAndChild>(
      GetAllocationHandle(), MakeGarbageCollected<GCed>(GetAllocationHandle()),
      [&persistent](GCedWithCallbackAndChild* obj) {
        persistent->object = obj;
      });
  GetMarkerRef()->IncrementalMarkingStepForTesting(StackState::kNoHeapPointers);
  Heap::From(GetHeap())->FinalizeIncrementalGarbageCollectionIfRunning(config);
}

// Death tests.

namespace {

class MarkingVerifierDeathTest : public MarkingVerifierTest {
 protected:
  template <template <typename T> class Reference>
  void TestResurrectingPreFinalizer();
};

}  // namespace

TEST_F(MarkingVerifierDeathTest, DieOnUnmarkedOnStackReference) {
  GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto& header = HeapObjectHeader::FromObject(object);
  USE(header);
  EXPECT_DEATH_IF_SUPPORTED(VerifyMarking(Heap::From(GetHeap())->AsBase(),
                                          StackState::kMayContainHeapPointers,
                                          header.AllocatedSize()),
                            "");
  access(object);
}

TEST_F(MarkingVerifierDeathTest, DieOnUnmarkedMember) {
  Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto& parent_header = HeapObjectHeader::FromObject(parent);
  ASSERT_TRUE(parent_header.TryMarkAtomic());
  parent->SetChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  EXPECT_DEATH_IF_SUPPORTED(
      VerifyMarking(Heap::From(GetHeap())->AsBase(),
                    StackState::kNoHeapPointers, parent_header.AllocatedSize()),
      "");
}

TEST_F(MarkingVerifierDeathTest, DieOnUnmarkedWeakMember) {
  Persistent<GCed> parent = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto& parent_header = HeapObjectHeader::FromObject(parent);
  ASSERT_TRUE(parent_header.TryMarkAtomic());
  parent->SetWeakChild(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  EXPECT_DEATH_IF_SUPPORTED(
      VerifyMarking(Heap::From(GetHeap())->AsBase(),
                    StackState::kNoHeapPointers, parent_header.AllocatedSize()),
      "");
}

#ifdef CPPGC_VERIFY_HEAP

TEST_F(MarkingVerifierDeathTest, DieOnUnexpectedLiveByteCount) {
  GCed* object = MakeGarbageCollected<GCed>(GetAllocationHandle());
  auto& header = HeapObjectHeader::FromObject(object);
  ASSERT_TRUE(header.TryMarkAtomic());
  EXPECT_DEATH_IF_SUPPORTED(VerifyMarking(Heap::From(GetHeap())->AsBase(),
                                          StackState::kMayContainHeapPointers,
                                          header.AllocatedSize() - 1),
                            "");
}

#endif  // CPPGC_VERIFY_HEAP

namespace {

template <template <typename T> class Reference>
class ResurrectingPreFinalizer
    : public GarbageCollected<ResurrectingPreFinalizer<Reference>> {
  CPPGC_USING_PRE_FINALIZER(ResurrectingPreFinalizer<Reference>, Dispose);

 public:
  class Storage : public GarbageCollected<Storage> {
   public:
    void Trace(Visitor* visitor) const { visitor->Trace(ref); }

    Reference<GCed> ref;
  };

  ResurrectingPreFinalizer(Storage* storage, GCed* object_that_dies)
      : storage_(storage), object_that_dies_(object_that_dies) {}

  void Trace(Visitor* visitor) const {
    visitor->Trace(storage_);
    visitor->Trace(object_that_dies_);
  }

 private:
  void Dispose() { storage_->ref = object_that_dies_; }

  Member<Storage> storage_;
  Member<GCed> object_that_dies_;
};

}  // namespace

template <template <typename T> class Reference>
void MarkingVerifierDeathTest::TestResurrectingPreFinalizer() {
  Persistent<typename ResurrectingPreFinalizer<Reference>::Storage> storage(
      MakeGarbageCollected<
          typename ResurrectingPreFinalizer<Reference>::Storage>(
          GetAllocationHandle()));
  MakeGarbageCollected<ResurrectingPreFinalizer<Reference>>(
      GetAllocationHandle(), storage.Get(),
      MakeGarbageCollected<GCed>(GetAllocationHandle()));
  EXPECT_DEATH_IF_SUPPORTED(PreciseGC(), "");
}

#if CPPGC_VERIFY_HEAP

TEST_F(MarkingVerifierDeathTest, DiesOnResurrectedMember) {
  TestResurrectingPreFinalizer<Member>();
}

TEST_F(MarkingVerifierDeathTest, DiesOnResurrectedWeakMember) {
  TestResurrectingPreFinalizer<WeakMember>();
}

#endif  // CPPGC_VERIFY_HEAP

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                          node-23.7.0/deps/v8/test/unittests/heap/cppgc/marking-visitor-unittest.cc                           0000664 0000000 0000000 00000030660 14746647661 0026415 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/marking-visitor.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/member.h"
#include "include/cppgc/persistent.h"
#include "include/cppgc/source-location.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/marker.h"
#include "src/heap/cppgc/marking-state.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class MarkingVisitorTest : public testing::TestWithHeap {
 public:
  MarkingVisitorTest()
      : marker_(std::make_unique<Marker>(*Heap::From(GetHeap()),
                                         GetPlatformHandle().get())) {
    marker_->StartMarking();
  }
  ~MarkingVisitorTest() override { marker_->ClearAllWorklistsForTesting(); }

  Marker* GetMarker() { return marker_.get(); }

 private:
  std::unique_ptr<Marker> marker_;
};

class GCed : public GarbageCollected<GCed> {
 public:
  void Trace(cppgc::Visitor*) const {}
};

class Mixin : public GarbageCollectedMixin {};
class GCedWithMixin : public GarbageCollected<GCedWithMixin>, public Mixin {
 public:
  void Trace(cppgc::Visitor*) const override {}
};

class TestMarkingVisitor : public MutatorMarkingVisitor {
 public:
  explicit TestMarkingVisitor(Marker* marker)
      : MutatorMarkingVisitor(marker->heap(),
                              marker->MutatorMarkingStateForTesting()) {}
  ~TestMarkingVisitor() { marking_state_.Publish(); }

  BasicMarkingState& marking_state() { return marking_state_; }
};

class TestRootMarkingVisitor : public RootMarkingVisitor {
 public:
  explicit TestRootMarkingVisitor(Marker* marker)
      : RootMarkingVisitor(marker->MutatorMarkingStateForTesting()) {}
  ~TestRootMarkingVisitor() { mutator_marking_state_.Publish(); }

  MutatorMarkingState& marking_state() { return mutator_marking_state_; }
};

}  // namespace

TEST_F(MarkingVisitorTest, MarkedBytesAreInitiallyZero) {
  EXPECT_EQ(0u, GetMarker()->MutatorMarkingStateForTesting().marked_bytes());
}

// Strong references are marked.

TEST_F(MarkingVisitorTest, MarkMember) {
  Member<GCed> object(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(object);

  EXPECT_TRUE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, MarkMemberMixin) {
  GCedWithMixin* object(
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle()));
  Member<Mixin> mixin(object);
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(mixin);

  EXPECT_TRUE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, MarkPersistent) {
  Persistent<GCed> object(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestRootMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(object);

  EXPECT_TRUE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, MarkPersistentMixin) {
  GCedWithMixin* object(
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle()));
  Persistent<Mixin> mixin(object);
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestRootMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(mixin);

  EXPECT_TRUE(header.IsMarked());
}

// Weak references are not marked.

TEST_F(MarkingVisitorTest, DontMarkWeakMember) {
  WeakMember<GCed> object(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(object);

  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, DontMarkWeakMemberMixin) {
  GCedWithMixin* object(
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle()));
  WeakMember<Mixin> mixin(object);
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(mixin);

  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, DontMarkWeakPersistent) {
  WeakPersistent<GCed> object(
      MakeGarbageCollected<GCed>(GetAllocationHandle()));
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestRootMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(object);

  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, DontMarkWeakPersistentMixin) {
  GCedWithMixin* object(
      MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle()));
  WeakPersistent<Mixin> mixin(object);
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestRootMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.Trace(mixin);

  EXPECT_FALSE(header.IsMarked());
}

// In construction objects are not marked.

namespace {

class GCedWithInConstructionCallback
    : public GarbageCollected<GCedWithInConstructionCallback> {
 public:
  template <typename Callback>
  explicit GCedWithInConstructionCallback(Callback callback) {
    callback(this);
  }
  void Trace(cppgc::Visitor*) const {}
};

class MixinWithInConstructionCallback : public GarbageCollectedMixin {
 public:
  template <typename Callback>
  explicit MixinWithInConstructionCallback(Callback callback) {
    callback(this);
  }
};
class GCedWithMixinWithInConstructionCallback
    : public GarbageCollected<GCedWithMixinWithInConstructionCallback>,
      public MixinWithInConstructionCallback {
 public:
  template <typename Callback>
  explicit GCedWithMixinWithInConstructionCallback(Callback callback)
      : MixinWithInConstructionCallback(callback) {}
  void Trace(cppgc::Visitor*) const override {}
};

}  // namespace

TEST_F(MarkingVisitorTest, MarkMemberInConstruction) {
  TestMarkingVisitor visitor(GetMarker());
  GCedWithInConstructionCallback* gced =
      MakeGarbageCollected<GCedWithInConstructionCallback>(
          GetAllocationHandle(),
          [&visitor](GCedWithInConstructionCallback* obj) {
            Member<GCedWithInConstructionCallback> object(obj);
            visitor.Trace(object);
          });
  HeapObjectHeader& header = HeapObjectHeader::FromObject(gced);
  EXPECT_TRUE(visitor.marking_state().not_fully_constructed_worklist().Contains(
      &header));
  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, MarkMemberMixinInConstruction) {
  TestMarkingVisitor visitor(GetMarker());
  GCedWithMixinWithInConstructionCallback* gced =
      MakeGarbageCollected<GCedWithMixinWithInConstructionCallback>(
          GetAllocationHandle(),
          [&visitor](MixinWithInConstructionCallback* obj) {
            Member<MixinWithInConstructionCallback> mixin(obj);
            visitor.Trace(mixin);
          });
  HeapObjectHeader& header = HeapObjectHeader::FromObject(gced);
  EXPECT_TRUE(visitor.marking_state().not_fully_constructed_worklist().Contains(
      &header));
  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, DontMarkWeakMemberInConstruction) {
  TestMarkingVisitor visitor(GetMarker());
  GCedWithInConstructionCallback* gced =
      MakeGarbageCollected<GCedWithInConstructionCallback>(
          GetAllocationHandle(),
          [&visitor](GCedWithInConstructionCallback* obj) {
            WeakMember<GCedWithInConstructionCallback> object(obj);
            visitor.Trace(object);
          });
  HeapObjectHeader& header = HeapObjectHeader::FromObject(gced);
  EXPECT_FALSE(
      visitor.marking_state().not_fully_constructed_worklist().Contains(
          &header));
  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, DontMarkWeakMemberMixinInConstruction) {
  TestMarkingVisitor visitor(GetMarker());
  GCedWithMixinWithInConstructionCallback* gced =
      MakeGarbageCollected<GCedWithMixinWithInConstructionCallback>(
          GetAllocationHandle(),
          [&visitor](MixinWithInConstructionCallback* obj) {
            WeakMember<MixinWithInConstructionCallback> mixin(obj);
            visitor.Trace(mixin);
          });
  HeapObjectHeader& header = HeapObjectHeader::FromObject(gced);
  EXPECT_FALSE(
      visitor.marking_state().not_fully_constructed_worklist().Contains(
          &header));
  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, MarkPersistentInConstruction) {
  TestRootMarkingVisitor visitor(GetMarker());
  GCedWithInConstructionCallback* gced =
      MakeGarbageCollected<GCedWithInConstructionCallback>(
          GetAllocationHandle(),
          [&visitor](GCedWithInConstructionCallback* obj) {
            Persistent<GCedWithInConstructionCallback> object(obj);
            visitor.Trace(object);
          });
  HeapObjectHeader& header = HeapObjectHeader::FromObject(gced);
  EXPECT_TRUE(visitor.marking_state().not_fully_constructed_worklist().Contains(
      &header));
  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, MarkPersistentMixinInConstruction) {
  TestRootMarkingVisitor visitor(GetMarker());
  GCedWithMixinWithInConstructionCallback* gced =
      MakeGarbageCollected<GCedWithMixinWithInConstructionCallback>(
          GetAllocationHandle(),
          [&visitor](MixinWithInConstructionCallback* obj) {
            Persistent<MixinWithInConstructionCallback> mixin(obj);
            visitor.Trace(mixin);
          });
  HeapObjectHeader& header = HeapObjectHeader::FromObject(gced);
  EXPECT_TRUE(visitor.marking_state().not_fully_constructed_worklist().Contains(
      &header));
  EXPECT_FALSE(header.IsMarked());
}

TEST_F(MarkingVisitorTest, StrongTracingMarksWeakMember) {
  WeakMember<GCed> object(MakeGarbageCollected<GCed>(GetAllocationHandle()));
  HeapObjectHeader& header = HeapObjectHeader::FromObject(object);

  TestMarkingVisitor visitor(GetMarker());

  EXPECT_FALSE(header.IsMarked());

  visitor.TraceStrongly(object);

  EXPECT_TRUE(header.IsMarked());
}

namespace {

struct GCedWithDestructor : GarbageCollected<GCedWithDestructor> {
  ~GCedWithDestructor() { ++g_finalized; }

  static size_t g_finalized;

  void Trace(Visitor* v) const {}
};

size_t GCedWithDestructor::g_finalized = 0;

struct GCedWithInConstructionCallbackWithMember : GCedWithDestructor {
  template <typename Callback>
  explicit GCedWithInConstructionCallbackWithMember(Callback callback) {
    callback(this);
  }

  void Trace(Visitor* v) const {
    GCedWithDestructor::Trace(v);
    v->Trace(member);
  }
  Member<GCed> member;
};

struct ConservativeTracerTest : public testing::TestWithHeap {
  ConservativeTracerTest() { GCedWithDestructor::g_finalized = 0; }
};

}  // namespace

TEST_F(ConservativeTracerTest, TraceConservativelyInConstructionObject) {
  auto* volatile gced =
      MakeGarbageCollected<GCedWithInConstructionCallbackWithMember>(
          GetAllocationHandle(),
          [this](GCedWithInConstructionCallbackWithMember* obj) V8_NOINLINE {
            [](GCedWithInConstructionCallbackWithMember* obj,
               AllocationHandle& handle) V8_NOINLINE {
              obj->member = MakeGarbageCollected<GCed>(handle);
            }(obj, GetAllocationHandle());
            ConservativeGC();
          });
  USE(gced);

  ConservativeGC();

  EXPECT_EQ(0u, GCedWithDestructor::g_finalized);
  // Call into HoH::GetGCInfoIndex to prevent the compiler to optimize away the
  // stack variable.
  EXPECT_EQ(HeapObjectHeader::FromObject(gced).GetGCInfoIndex(),
            GCInfoTrait<GCedWithInConstructionCallbackWithMember>::Index());
}

TEST_F(ConservativeTracerTest, TraceConservativelyStack) {
  volatile std::array<Member<GCedWithDestructor>, 16u> members =
      [this]() V8_NOINLINE {
        std::array<Member<GCedWithDestructor>, 16u> members;
        for (auto& member : members)
          member =
              MakeGarbageCollected<GCedWithDestructor>(GetAllocationHandle());
        return members;
      }();
  USE(members);

  ConservativeGC();

  EXPECT_EQ(0u, GCedWithDestructor::g_finalized);
  // Call into HoH::GetGCInfoIndex to prevent the compiler to optimize away the
  // stack variable.
  auto member =
      const_cast<std::remove_volatile_t<decltype(members)>&>(members)[0];
  EXPECT_EQ(HeapObjectHeader::FromObject(member.Get()).GetGCInfoIndex(),
            GCInfoTrait<GCedWithDestructor>::Index());
}

}  // namespace internal
}  // namespace cppgc
                                                                                node-23.7.0/deps/v8/test/unittests/heap/cppgc/member-unittest.cc                                    0000664 0000000 0000000 00000056177 14746647661 0024552 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/member.h"

#include <algorithm>
#include <vector>

#include "include/cppgc/allocation.h"
#include "include/cppgc/garbage-collected.h"
#include "include/cppgc/internal/member-storage.h"
#include "include/cppgc/internal/pointer-policies.h"
#include "include/cppgc/persistent.h"
#include "include/cppgc/sentinel-pointer.h"
#include "include/cppgc/type-traits.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

struct GCed : GarbageCollected<GCed> {
  double d;
  virtual void Trace(cppgc::Visitor*) const {}
};

struct DerivedMixin : GarbageCollectedMixin {
  void Trace(cppgc::Visitor* v) const override {}
};

struct DerivedGCed : GCed, DerivedMixin {
  void Trace(cppgc::Visitor* v) const override { GCed::Trace(v); }
};

// Compile tests.
static_assert(!IsWeakV<Member<GCed>>, "Member is always strong.");
static_assert(IsWeakV<WeakMember<GCed>>, "WeakMember is always weak.");

static_assert(IsMemberTypeV<Member<GCed>>, "Member must be Member.");
static_assert(IsMemberTypeV<const Member<GCed>>,
              "const Member must be Member.");
static_assert(IsMemberTypeV<const Member<GCed>&>,
              "const Member ref must be Member.");
static_assert(!IsMemberTypeV<WeakMember<GCed>>,
              "WeakMember must not be Member.");
static_assert(!IsMemberTypeV<UntracedMember<GCed>>,
              "UntracedMember must not be Member.");
static_assert(!IsMemberTypeV<int>, "int must not be Member.");
static_assert(!IsWeakMemberTypeV<Member<GCed>>,
              "Member must not be WeakMember.");
static_assert(IsWeakMemberTypeV<WeakMember<GCed>>,
              "WeakMember must be WeakMember.");
static_assert(!IsWeakMemberTypeV<UntracedMember<GCed>>,
              "UntracedMember must not be WeakMember.");
static_assert(!IsWeakMemberTypeV<int>, "int must not be WeakMember.");
static_assert(!IsUntracedMemberTypeV<Member<GCed>>,
              "Member must not be UntracedMember.");
static_assert(!IsUntracedMemberTypeV<WeakMember<GCed>>,
              "WeakMember must not be UntracedMember.");
static_assert(IsUntracedMemberTypeV<UntracedMember<GCed>>,
              "UntracedMember must be UntracedMember.");
static_assert(!IsUntracedMemberTypeV<int>, "int must not be UntracedMember.");
static_assert(IsMemberOrWeakMemberTypeV<Member<GCed>>,
              "Member must be Member.");
static_assert(IsMemberOrWeakMemberTypeV<WeakMember<GCed>>,
              "WeakMember must be WeakMember.");
static_assert(!IsMemberOrWeakMemberTypeV<UntracedMember<GCed>>,
              "UntracedMember is neither Member nor WeakMember.");
static_assert(!IsMemberOrWeakMemberTypeV<int>,
              "int is neither Member nor WeakMember.");
static_assert(IsAnyMemberTypeV<Member<GCed>>, "Member must be a member type.");
static_assert(IsAnyMemberTypeV<WeakMember<GCed>>,
              "WeakMember must be a member type.");
static_assert(IsAnyMemberTypeV<UntracedMember<GCed>>,
              "UntracedMember must be a member type.");
static_assert(!IsAnyMemberTypeV<int>, "int must not be a member type.");
static_assert(
    IsAnyMemberTypeV<
        internal::BasicMember<GCed, class SomeTag, NoWriteBarrierPolicy,
                              DefaultMemberCheckingPolicy, RawPointer>>,
    "Any custom member must be a member type.");

struct CustomWriteBarrierPolicy {
  static size_t InitializingWriteBarriersTriggered;
  static size_t AssigningWriteBarriersTriggered;
  static void InitializingBarrier(const void* slot, const void* value) {
    ++InitializingWriteBarriersTriggered;
  }
  template <WriteBarrierSlotType>
  static void AssigningBarrier(const void* slot, const void* value) {
    ++AssigningWriteBarriersTriggered;
  }
  template <WriteBarrierSlotType>
  static void AssigningBarrier(const void* slot, DefaultMemberStorage) {
    ++AssigningWriteBarriersTriggered;
  }
};
size_t CustomWriteBarrierPolicy::InitializingWriteBarriersTriggered = 0;
size_t CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered = 0;

using MemberWithCustomBarrier =
    BasicMember<GCed, StrongMemberTag, CustomWriteBarrierPolicy>;

struct CustomCheckingPolicy {
  static std::vector<GCed*> Cached;
  static size_t ChecksTriggered;
  void CheckPointer(const void* ptr) {
    EXPECT_NE(Cached.cend(), std::find(Cached.cbegin(), Cached.cend(), ptr));
    ++ChecksTriggered;
  }
};
std::vector<GCed*> CustomCheckingPolicy::Cached;
size_t CustomCheckingPolicy::ChecksTriggered = 0;

using MemberWithCustomChecking =
    BasicMember<GCed, StrongMemberTag, DijkstraWriteBarrierPolicy,
                CustomCheckingPolicy>;

class MemberTest : public testing::TestSupportingAllocationOnly {};

}  // namespace

template <template <typename> class MemberType>
void EmptyTest() {
  {
    MemberType<GCed> empty;
    EXPECT_EQ(nullptr, empty.Get());
    EXPECT_EQ(nullptr, empty.Release());
  }
  {
    MemberType<GCed> empty = nullptr;
    EXPECT_EQ(nullptr, empty.Get());
    EXPECT_EQ(nullptr, empty.Release());
  }
  {
    // Move-constructs empty from another Member that is created from nullptr.
    MemberType<const GCed> empty = nullptr;
    EXPECT_EQ(nullptr, empty.Get());
    EXPECT_EQ(nullptr, empty.Release());
  }
}

TEST_F(MemberTest, Empty) {
  EmptyTest<Member>();
  EmptyTest<WeakMember>();
  EmptyTest<UntracedMember>();
}

template <template <typename> class MemberType>
void AtomicCtorTest(cppgc::Heap* heap) {
  {
    GCed* gced = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType<GCed> member(gced,
                            typename MemberType<GCed>::AtomicInitializerTag());
    EXPECT_EQ(gced, member.Get());
  }
  {
    GCed* gced = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType<GCed> member(*gced,
                            typename MemberType<GCed>::AtomicInitializerTag());
    EXPECT_EQ(gced, member.Get());
  }
  {
    MemberType<GCed> member(nullptr,
                            typename MemberType<GCed>::AtomicInitializerTag());
    EXPECT_FALSE(member.Get());
  }
  {
    SentinelPointer s;
    MemberType<GCed> member(s,
                            typename MemberType<GCed>::AtomicInitializerTag());
    EXPECT_EQ(s, member.Get());
  }
}

TEST_F(MemberTest, AtomicCtor) {
  cppgc::Heap* heap = GetHeap();
  AtomicCtorTest<Member>(heap);
  AtomicCtorTest<WeakMember>(heap);
  AtomicCtorTest<UntracedMember>(heap);
}

template <template <typename> class MemberType>
void ClearTest(cppgc::Heap* heap) {
  MemberType<GCed> member =
      MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
  EXPECT_NE(nullptr, member.Get());
  member.Clear();
  EXPECT_EQ(nullptr, member.Get());
}

TEST_F(MemberTest, Clear) {
  cppgc::Heap* heap = GetHeap();
  ClearTest<Member>(heap);
  ClearTest<WeakMember>(heap);
  ClearTest<UntracedMember>(heap);
}

template <template <typename> class MemberType>
void ReleaseTest(cppgc::Heap* heap) {
  GCed* gced = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
  MemberType<GCed> member = gced;
  EXPECT_NE(nullptr, member.Get());
  GCed* raw = member.Release();
  EXPECT_EQ(gced, raw);
  EXPECT_EQ(nullptr, member.Get());
}

TEST_F(MemberTest, Release) {
  cppgc::Heap* heap = GetHeap();
  ReleaseTest<Member>(heap);
  ReleaseTest<WeakMember>(heap);
  ReleaseTest<UntracedMember>(heap);
}

template <template <typename> class MemberType1,
          template <typename> class MemberType2>
void SwapTest(cppgc::Heap* heap) {
  GCed* gced1 = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
  GCed* gced2 = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
  MemberType1<GCed> member1 = gced1;
  MemberType2<GCed> member2 = gced2;
  EXPECT_EQ(gced1, member1.Get());
  EXPECT_EQ(gced2, member2.Get());
  member1.Swap(member2);
  EXPECT_EQ(gced2, member1.Get());
  EXPECT_EQ(gced1, member2.Get());
}

TEST_F(MemberTest, Swap) {
  cppgc::Heap* heap = GetHeap();
  SwapTest<Member, Member>(heap);
  SwapTest<Member, WeakMember>(heap);
  SwapTest<Member, UntracedMember>(heap);
  SwapTest<WeakMember, Member>(heap);
  SwapTest<WeakMember, WeakMember>(heap);
  SwapTest<WeakMember, UntracedMember>(heap);
  SwapTest<UntracedMember, Member>(heap);
  SwapTest<UntracedMember, WeakMember>(heap);
  SwapTest<UntracedMember, UntracedMember>(heap);
}

template <template <typename> class MemberType1,
          template <typename> class MemberType2>
void MoveTest(cppgc::Heap* heap) {
  {
    GCed* gced1 = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType1<GCed> member1 = gced1;
    MemberType2<GCed> member2(std::move(member1));
    // Move-from member must be in empty state.
    EXPECT_FALSE(member1);
    EXPECT_EQ(gced1, member2.Get());
  }
  {
    GCed* gced1 = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType1<GCed> member1 = gced1;
    MemberType2<GCed> member2;
    member2 = std::move(member1);
    // Move-from member must be in empty state.
    EXPECT_FALSE(member1);
    EXPECT_EQ(gced1, member2.Get());
  }
}

TEST_F(MemberTest, Move) {
  cppgc::Heap* heap = GetHeap();
  MoveTest<Member, Member>(heap);
  MoveTest<Member, WeakMember>(heap);
  MoveTest<Member, UntracedMember>(heap);
  MoveTest<WeakMember, Member>(heap);
  MoveTest<WeakMember, WeakMember>(heap);
  MoveTest<WeakMember, UntracedMember>(heap);
  MoveTest<UntracedMember, Member>(heap);
  MoveTest<UntracedMember, WeakMember>(heap);
  MoveTest<UntracedMember, UntracedMember>(heap);
}

template <template <typename> class MemberType1,
          template <typename> class MemberType2>
void HeterogeneousConversionTest(cppgc::Heap* heap) {
  {
    MemberType1<GCed> member1 =
        MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType2<GCed> member2 = member1;
    EXPECT_EQ(member1.Get(), member2.Get());
  }
  {
    MemberType1<DerivedGCed> member1 =
        MakeGarbageCollected<DerivedGCed>(heap->GetAllocationHandle());
    MemberType2<GCed> member2 = member1;
    EXPECT_EQ(member1.Get(), member2.Get());
  }
  {
    MemberType1<GCed> member1 =
        MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType2<GCed> member2;
    member2 = member1;
    EXPECT_EQ(member1.Get(), member2.Get());
  }
  {
    MemberType1<DerivedGCed> member1 =
        MakeGarbageCollected<DerivedGCed>(heap->GetAllocationHandle());
    MemberType2<GCed> member2;
    member2 = member1;
    EXPECT_EQ(member1.Get(), member2.Get());
  }
}

TEST_F(MemberTest, HeterogeneousInterface) {
  cppgc::Heap* heap = GetHeap();
  HeterogeneousConversionTest<Member, Member>(heap);
  HeterogeneousConversionTest<Member, WeakMember>(heap);
  HeterogeneousConversionTest<Member, UntracedMember>(heap);
  HeterogeneousConversionTest<WeakMember, Member>(heap);
  HeterogeneousConversionTest<WeakMember, WeakMember>(heap);
  HeterogeneousConversionTest<WeakMember, UntracedMember>(heap);
  HeterogeneousConversionTest<UntracedMember, Member>(heap);
  HeterogeneousConversionTest<UntracedMember, WeakMember>(heap);
  HeterogeneousConversionTest<UntracedMember, UntracedMember>(heap);
}

template <template <typename> class MemberType,
          template <typename> class PersistentType>
void PersistentConversionTest(cppgc::Heap* heap) {
  {
    PersistentType<GCed> persistent =
        MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType<GCed> member = persistent;
    EXPECT_EQ(persistent.Get(), member.Get());
  }
  {
    PersistentType<DerivedGCed> persistent =
        MakeGarbageCollected<DerivedGCed>(heap->GetAllocationHandle());
    MemberType<GCed> member = persistent;
    EXPECT_EQ(persistent.Get(), member.Get());
  }
  {
    PersistentType<GCed> persistent =
        MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType<GCed> member;
    member = persistent;
    EXPECT_EQ(persistent.Get(), member.Get());
  }
  {
    PersistentType<DerivedGCed> persistent =
        MakeGarbageCollected<DerivedGCed>(heap->GetAllocationHandle());
    MemberType<GCed> member;
    member = persistent;
    EXPECT_EQ(persistent.Get(), member.Get());
  }
}

TEST_F(MemberTest, PersistentConversion) {
  cppgc::Heap* heap = GetHeap();
  PersistentConversionTest<Member, Persistent>(heap);
  PersistentConversionTest<Member, WeakPersistent>(heap);
  PersistentConversionTest<WeakMember, Persistent>(heap);
  PersistentConversionTest<WeakMember, WeakPersistent>(heap);
  PersistentConversionTest<UntracedMember, Persistent>(heap);
  PersistentConversionTest<UntracedMember, WeakPersistent>(heap);
}

template <template <typename> class MemberType1,
          template <typename> class MemberType2>
void EqualityTest(cppgc::Heap* heap) {
  {
    GCed* gced = MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType1<GCed> member1 = gced;
    MemberType2<GCed> member2 = gced;
    EXPECT_TRUE(member1 == member2);
    EXPECT_TRUE(member1 == gced);
    EXPECT_TRUE(member2 == gced);
    EXPECT_FALSE(member1 != member2);
    EXPECT_FALSE(member1 != gced);
    EXPECT_FALSE(member2 != gced);

    member2 = member1;
    EXPECT_TRUE(member1 == member2);
    EXPECT_TRUE(member1 == gced);
    EXPECT_TRUE(member2 == gced);
    EXPECT_FALSE(member1 != member2);
    EXPECT_FALSE(member1 != gced);
    EXPECT_FALSE(member2 != gced);
  }
  {
    MemberType1<GCed> member1 =
        MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    MemberType2<GCed> member2 =
        MakeGarbageCollected<GCed>(heap->GetAllocationHandle());
    EXPECT_TRUE(member1 != member2);
    EXPECT_TRUE(member1 != member2.Get());
    EXPECT_FALSE(member1 == member2);
    EXPECT_FALSE(member1 == member2.Get());
  }
}

TEST_F(MemberTest, EqualityTest) {
  cppgc::Heap* heap = GetHeap();
  EqualityTest<Member, Member>(heap);
  EqualityTest<Member, WeakMember>(heap);
  EqualityTest<Member, UntracedMember>(heap);
  EqualityTest<WeakMember, Member>(heap);
  EqualityTest<WeakMember, WeakMember>(heap);
  EqualityTest<WeakMember, UntracedMember>(heap);
  EqualityTest<UntracedMember, Member>(heap);
  EqualityTest<UntracedMember, WeakMember>(heap);
  EqualityTest<UntracedMember, UntracedMember>(heap);
}

TEST_F(MemberTest, HeterogeneousEqualityTest) {
  cppgc::Heap* heap = GetHeap();
  {
    auto* gced = MakeGarbageCollected<DerivedGCed>(heap->GetAllocationHandle());
    auto* derived = static_cast<DerivedMixin*>(gced);
    ASSERT_NE(reinterpret_cast<void*>(gced), reinterpret_cast<void*>(derived));
  }
  {
    auto* gced = MakeGarbageCollected<DerivedGCed>(heap->GetAllocationHandle());
    Member<DerivedGCed> member = gced;
#define EXPECT_MIXIN_EQUAL(Mixin) \
  EXPECT_TRUE(member == mixin);   \
  EXPECT_TRUE(member == gced);    \
  EXPECT_TRUE(mixin == gced);     \
  EXPECT_FALSE(member != mixin);  \
  EXPECT_FALSE(member != gced);   \
  EXPECT_FALSE(mixin != gced);
    {
      // Construct from raw.
      Member<DerivedMixin> mixin = gced;
      EXPECT_MIXIN_EQUAL(mixin);
    }
    {
      // Copy construct from member.
      Member<DerivedMixin> mixin = member;
      EXPECT_MIXIN_EQUAL(mixin);
    }
    {
      // Move construct from member.
      Member<DerivedMixin> mixin = std::move(member);
      member = gced;
      EXPECT_MIXIN_EQUAL(mixin);
    }
    {
      // Copy assign from member.
      Member<DerivedMixin> mixin;
      mixin = member;
      EXPECT_MIXIN_EQUAL(mixin);
    }
    {
      // Move assign from member.
      Member<DerivedMixin> mixin;
      mixin = std::move(member);
      member = gced;
      EXPECT_MIXIN_EQUAL(mixin);
    }
#undef EXPECT_MIXIN_EQUAL
  }
}

TEST_F(MemberTest, WriteBarrierTriggered) {
  CustomWriteBarrierPolicy::InitializingWriteBarriersTriggered = 0;
  CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered = 0;
  GCed* gced = MakeGarbageCollected<GCed>(GetAllocationHandle());
  MemberWithCustomBarrier member1 = gced;
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::InitializingWriteBarriersTriggered);
  EXPECT_EQ(0u, CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered);
  member1 = gced;
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::InitializingWriteBarriersTriggered);
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered);
  member1 = nullptr;
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::InitializingWriteBarriersTriggered);
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered);
  MemberWithCustomBarrier member2 = nullptr;
  // No initializing barriers for std::nullptr_t.
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::InitializingWriteBarriersTriggered);
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered);
  member2 = kSentinelPointer;
  EXPECT_EQ(kSentinelPointer, member2.Get());
  EXPECT_EQ(kSentinelPointer, member2);
  // No initializing barriers for pointer sentinel.
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::InitializingWriteBarriersTriggered);
  EXPECT_EQ(1u, CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered);
  member2.Swap(member1);
  EXPECT_EQ(3u, CustomWriteBarrierPolicy::AssigningWriteBarriersTriggered);
}

TEST_F(MemberTest, CheckingPolicy) {
  static constexpr size_t kElements = 64u;
  CustomCheckingPolicy::ChecksTriggered = 0u;

  for (std::size_t i = 0; i < kElements; ++i) {
    CustomCheckingPolicy::Cached.push_back(
        MakeGarbageCollected<GCed>(GetAllocationHandle()));
  }

  MemberWithCustomChecking member;
  for (GCed* item : CustomCheckingPolicy::Cached) {
    member = item;
  }
  EXPECT_EQ(CustomCheckingPolicy::Cached.size(),
            CustomCheckingPolicy::ChecksTriggered);
}

namespace {

class MemberHeapTest : public testing::TestWithHeap {};

class GCedWithMembers final : public GarbageCollected<GCedWithMembers> {
 public:
  static size_t live_count_;

  GCedWithMembers() : GCedWithMembers(nullptr, nullptr) {}
  explicit GCedWithMembers(GCedWithMembers* strong, GCedWithMembers* weak)
      : strong_nested_(strong), weak_nested_(weak) {
    ++live_count_;
  }

  ~GCedWithMembers() { --live_count_; }

  void Trace(cppgc::Visitor* visitor) const {
    visitor->Trace(strong_nested_);
    visitor->Trace(weak_nested_);
  }

  bool WasNestedCleared() const { return !weak_nested_; }

 private:
  Member<GCedWithMembers> strong_nested_;
  WeakMember<GCedWithMembers> weak_nested_;
};
size_t GCedWithMembers::live_count_ = 0;

}  // namespace

TEST_F(MemberHeapTest, MemberRetainsObject) {
  EXPECT_EQ(0u, GCedWithMembers::live_count_);
  {
    GCedWithMembers* nested_object =
        MakeGarbageCollected<GCedWithMembers>(GetAllocationHandle());
    Persistent<GCedWithMembers> gced_with_members =
        MakeGarbageCollected<GCedWithMembers>(GetAllocationHandle(),
                                              nested_object, nested_object);
    EXPECT_EQ(2u, GCedWithMembers::live_count_);
    PreciseGC();
    EXPECT_EQ(2u, GCedWithMembers::live_count_);
    EXPECT_FALSE(gced_with_members->WasNestedCleared());
  }
  PreciseGC();
  EXPECT_EQ(0u, GCedWithMembers::live_count_);
  {
    GCedWithMembers* nested_object =
        MakeGarbageCollected<GCedWithMembers>(GetAllocationHandle());
    GCedWithMembers* gced_with_members = MakeGarbageCollected<GCedWithMembers>(
        GetAllocationHandle(), nested_object, nested_object);
    EXPECT_EQ(2u, GCedWithMembers::live_count_);
    ConservativeGC();
    EXPECT_EQ(2u, GCedWithMembers::live_count_);
    EXPECT_FALSE(gced_with_members->WasNestedCleared());
  }
  PreciseGC();
  EXPECT_EQ(0u, GCedWithMembers::live_count_);
}

TEST_F(MemberHeapTest, WeakMemberDoesNotRetainObject) {
  EXPECT_EQ(0u, GCedWithMembers::live_count_);
  auto* weak_nested =
      MakeGarbageCollected<GCedWithMembers>(GetAllocationHandle());
  Persistent<GCedWithMembers> gced_with_members(
      MakeGarbageCollected<GCedWithMembers>(GetAllocationHandle(), nullptr,
                                            weak_nested));
  PreciseGC();
  EXPECT_EQ(1u, GCedWithMembers::live_count_);
  EXPECT_TRUE(gced_with_members->WasNestedCleared());
}

namespace {
class GCedWithConstWeakMember
    : public GarbageCollected<GCedWithConstWeakMember> {
 public:
  explicit GCedWithConstWeakMember(const GCedWithMembers* weak)
      : weak_member_(weak) {}

  void Trace(Visitor* visitor) const { visitor->Trace(weak_member_); }

  const GCedWithMembers* weak_member() const { return weak_member_; }

 private:
  const WeakMember<const GCedWithMembers> weak_member_;
};
}  // namespace

TEST_F(MemberHeapTest, ConstWeakRefIsClearedOnGC) {
  const WeakPersistent<const GCedWithMembers> weak_persistent =
      MakeGarbageCollected<GCedWithMembers>(GetAllocationHandle());
  Persistent<GCedWithConstWeakMember> persistent =
      MakeGarbageCollected<GCedWithConstWeakMember>(GetAllocationHandle(),
                                                    weak_persistent);
  PreciseGC();
  EXPECT_FALSE(weak_persistent);
  EXPECT_FALSE(persistent->weak_member());
}

#if V8_ENABLE_CHECKS

namespace {
class MemberHeapDeathTest : public testing::TestWithHeap {};

class LinkedNode final : public GarbageCollected<LinkedNode> {
 public:
  explicit LinkedNode(LinkedNode* next) : next_(next) {}
  void Trace(Visitor* v) const { v->Trace(next_); }

  void SetNext(LinkedNode* next) { next_ = next; }

 private:
  Member<LinkedNode> next_;
};

}  // namespace

// The following tests create multiple heaps per thread, which is not supported
// with pointer compression enabled.
#if !defined(CPPGC_POINTER_COMPRESSION)
TEST_F(MemberHeapDeathTest, CheckForOffHeapMemberCrashesOnReassignment) {
  std::vector<Member<LinkedNode>> off_heap_member;
  // Verification state is constructed on first assignment.
  off_heap_member.emplace_back(
      MakeGarbageCollected<LinkedNode>(GetAllocationHandle(), nullptr));
  {
    auto tmp_heap = cppgc::Heap::Create(platform_);
    auto* tmp_obj = MakeGarbageCollected<LinkedNode>(
        tmp_heap->GetAllocationHandle(), nullptr);
    EXPECT_DEATH_IF_SUPPORTED(off_heap_member[0] = tmp_obj, "");
  }
}

TEST_F(MemberHeapDeathTest, CheckForOnStackMemberCrashesOnReassignment) {
  Member<LinkedNode> stack_member;
  // Verification state is constructed on first assignment.
  stack_member =
      MakeGarbageCollected<LinkedNode>(GetAllocationHandle(), nullptr);
  {
    auto tmp_heap = cppgc::Heap::Create(platform_);
    auto* tmp_obj = MakeGarbageCollected<LinkedNode>(
        tmp_heap->GetAllocationHandle(), nullptr);
    EXPECT_DEATH_IF_SUPPORTED(stack_member = tmp_obj, "");
  }
}

TEST_F(MemberHeapDeathTest, CheckForOnHeapMemberCrashesOnInitialAssignment) {
  auto* obj = MakeGarbageCollected<LinkedNode>(GetAllocationHandle(), nullptr);
  {
    auto tmp_heap = cppgc::Heap::Create(platform_);
    EXPECT_DEATH_IF_SUPPORTED(
        // For regular on-heap Member references the verification state is
        // constructed eagerly on creating the reference.
        MakeGarbageCollected<LinkedNode>(tmp_heap->GetAllocationHandle(), obj),
        "");
  }
}
#endif  // defined(CPPGC_POINTER_COMPRESSION)

#if defined(CPPGC_POINTER_COMPRESSION)
TEST_F(MemberTest, CompressDecompress) {
  CompressedPointer cp;
  EXPECT_EQ(nullptr, cp.Load());

  Member<GCed> member;
  cp.Store(member.Get());
  EXPECT_EQ(nullptr, cp.Load());

  cp.Store(kSentinelPointer);
  EXPECT_EQ(kSentinelPointer, cp.Load());

  member = kSentinelPointer;
  cp.Store(member.Get());
  EXPECT_EQ(kSentinelPointer, cp.Load());

  member = MakeGarbageCollected<GCed>(GetAllocationHandle());
  cp.Store(member.Get());
  EXPECT_EQ(member.Get(), cp.Load());
}
#endif  // defined(CPPGC_POINTER_COMPRESSION)

#endif  // V8_ENABLE_CHECKS

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/unittests/heap/cppgc/metric-recorder-unittest.cc                           0000664 0000000 0000000 00000030473 14746647661 0026360 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/metric-recorder.h"

#include "src/heap/cppgc/stats-collector.h"
#include "test/unittests/heap/cppgc/tests.h"

namespace cppgc {
namespace internal {

namespace {
class MetricRecorderImpl final : public MetricRecorder {
 public:
  void AddMainThreadEvent(const GCCycle& event) final {
    GCCycle_event = event;
    GCCycle_callcount++;
  }
  void AddMainThreadEvent(const MainThreadIncrementalMark& event) final {
    MainThreadIncrementalMark_event = event;
    MainThreadIncrementalMark_callcount++;
  }
  void AddMainThreadEvent(const MainThreadIncrementalSweep& event) final {
    MainThreadIncrementalSweep_event = event;
    MainThreadIncrementalSweep_callcount++;
  }

  static size_t GCCycle_callcount;
  static GCCycle GCCycle_event;
  static size_t MainThreadIncrementalMark_callcount;
  static MainThreadIncrementalMark MainThreadIncrementalMark_event;
  static size_t MainThreadIncrementalSweep_callcount;
  static MainThreadIncrementalSweep MainThreadIncrementalSweep_event;
};

// static
size_t MetricRecorderImpl::GCCycle_callcount = 0u;
MetricRecorderImpl::GCCycle MetricRecorderImpl::GCCycle_event;
size_t MetricRecorderImpl::MainThreadIncrementalMark_callcount = 0u;
MetricRecorderImpl::MainThreadIncrementalMark
    MetricRecorderImpl::MainThreadIncrementalMark_event;
size_t MetricRecorderImpl::MainThreadIncrementalSweep_callcount = 0u;
MetricRecorderImpl::MainThreadIncrementalSweep
    MetricRecorderImpl::MainThreadIncrementalSweep_event;

class MetricRecorderTest : public testing::TestWithHeap {
 public:
  MetricRecorderTest() : stats(Heap::From(GetHeap())->stats_collector()) {
    stats->SetMetricRecorder(std::make_unique<MetricRecorderImpl>());
  }

  void StartGC() {
    stats->NotifyMarkingStarted(CollectionType::kMajor,
                                GCConfig::MarkingType::kIncremental,
                                GCConfig::IsForcedGC::kNotForced);
  }
  void EndGC(size_t marked_bytes) {
    stats->NotifyMarkingCompleted(marked_bytes);
    stats->NotifySweepingCompleted(GCConfig::SweepingType::kIncremental);
  }

  StatsCollector* stats;
};
}  // namespace

TEST_F(MetricRecorderTest, IncrementalScopesReportedImmediately) {
  MetricRecorderImpl::GCCycle_callcount = 0u;
  MetricRecorderImpl::MainThreadIncrementalMark_callcount = 0u;
  MetricRecorderImpl::MainThreadIncrementalSweep_callcount = 0u;
  StartGC();
  {
    EXPECT_EQ(0u, MetricRecorderImpl::MainThreadIncrementalMark_callcount);
    {
      StatsCollector::EnabledScope scope(
          Heap::From(GetHeap())->stats_collector(),
          StatsCollector::kIncrementalMark);
      scope.DecreaseStartTimeForTesting(
          v8::base::TimeDelta::FromMilliseconds(1));
    }
    EXPECT_EQ(1u, MetricRecorderImpl::MainThreadIncrementalMark_callcount);
    EXPECT_LT(0u,
              MetricRecorderImpl::MainThreadIncrementalMark_event.duration_us);
  }
  {
    EXPECT_EQ(0u, MetricRecorderImpl::MainThreadIncrementalSweep_callcount);
    {
      StatsCollector::EnabledScope scope(
          Heap::From(GetHeap())->stats_collector(),
          StatsCollector::kIncrementalSweep);
      scope.DecreaseStartTimeForTesting(
          v8::base::TimeDelta::FromMilliseconds(1));
    }
    EXPECT_EQ(1u, MetricRecorderImpl::MainThreadIncrementalSweep_callcount);
    EXPECT_LT(0u,
              MetricRecorderImpl::MainThreadIncrementalSweep_event.duration_us);
  }
  EXPECT_EQ(0u, MetricRecorderImpl::GCCycle_callcount);
  EndGC(0);
}

TEST_F(MetricRecorderTest, NonIncrementalScopesNotReportedImmediately) {
  MetricRecorderImpl::GCCycle_callcount = 0u;
  MetricRecorderImpl::MainThreadIncrementalMark_callcount = 0u;
  MetricRecorderImpl::MainThreadIncrementalSweep_callcount = 0u;
  StartGC();
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicMark);
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicWeak);
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicCompact);
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicSweep);
  }
  {
    StatsCollector::EnabledConcurrentScope scope(
        Heap::From(GetHeap())->stats_collector(),
        StatsCollector::kConcurrentMark);
  }
  {
    StatsCollector::EnabledConcurrentScope scope(
        Heap::From(GetHeap())->stats_collector(),
        StatsCollector::kConcurrentSweep);
  }
  EXPECT_EQ(0u, MetricRecorderImpl::MainThreadIncrementalMark_callcount);
  EXPECT_EQ(0u, MetricRecorderImpl::MainThreadIncrementalSweep_callcount);
  EXPECT_EQ(0u, MetricRecorderImpl::GCCycle_callcount);
  EndGC(0);
}

TEST_F(MetricRecorderTest, CycleEndMetricsReportedOnGcEnd) {
  MetricRecorderImpl::GCCycle_callcount = 0u;
  MetricRecorderImpl::MainThreadIncrementalMark_callcount = 0u;
  MetricRecorderImpl::MainThreadIncrementalSweep_callcount = 0u;
  StartGC();
  EndGC(0);
  EXPECT_EQ(0u, MetricRecorderImpl::MainThreadIncrementalMark_callcount);
  EXPECT_EQ(0u, MetricRecorderImpl::MainThreadIncrementalSweep_callcount);
  EXPECT_EQ(1u, MetricRecorderImpl::GCCycle_callcount);
}

TEST_F(MetricRecorderTest, CycleEndHistogramReportsCorrectValues) {
  StartGC();
  {
    // Warmup scope to make sure everything is loaded in memory and reduce noise
    // in timing measurements.
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kIncrementalMark);
  }
  EndGC(1000);
  StartGC();
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kIncrementalMark);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(10));
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kIncrementalSweep);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(20));
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicMark);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(30));
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicWeak);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(50));
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicCompact);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(60));
  }
  {
    StatsCollector::EnabledScope scope(Heap::From(GetHeap())->stats_collector(),
                                       StatsCollector::kAtomicSweep);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(70));
  }
  {
    StatsCollector::EnabledConcurrentScope scope(
        Heap::From(GetHeap())->stats_collector(),
        StatsCollector::kConcurrentMark);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(80));
  }
  {
    StatsCollector::EnabledConcurrentScope scope(
        Heap::From(GetHeap())->stats_collector(),
        StatsCollector::kConcurrentSweep);
    scope.DecreaseStartTimeForTesting(
        v8::base::TimeDelta::FromMilliseconds(100));
  }
  EndGC(300);
  // Check durations.
  static constexpr int64_t kDurationComparisonTolerance = 5000;
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.main_thread_incremental
                         .mark_duration_us -
                     10000),
            kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.main_thread_incremental
                         .sweep_duration_us -
                     20000),
            kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.main_thread_atomic
                         .mark_duration_us -
                     30000),
            kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.main_thread_atomic
                         .weak_duration_us -
                     50000),
            kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.main_thread_atomic
                         .compact_duration_us -
                     60000),
            kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.main_thread_atomic
                         .sweep_duration_us -
                     70000),
            kDurationComparisonTolerance);
  EXPECT_LT(
      std::abs(MetricRecorderImpl::GCCycle_event.main_thread.mark_duration_us -
               40000),
      kDurationComparisonTolerance);
  EXPECT_LT(
      std::abs(MetricRecorderImpl::GCCycle_event.main_thread.weak_duration_us -
               50000),
      kDurationComparisonTolerance);
  EXPECT_LT(
      std::abs(
          MetricRecorderImpl::GCCycle_event.main_thread.compact_duration_us -
          60000),
      kDurationComparisonTolerance);
  EXPECT_LT(
      std::abs(MetricRecorderImpl::GCCycle_event.main_thread.sweep_duration_us -
               90000),
      kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.total.mark_duration_us -
                     120000),
            kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.total.weak_duration_us -
                     50000),
            kDurationComparisonTolerance);
  EXPECT_LT(
      std::abs(MetricRecorderImpl::GCCycle_event.total.compact_duration_us -
               60000),
      kDurationComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event.total.sweep_duration_us -
                     190000),
            kDurationComparisonTolerance);
  // Check collection rate and efficiency.
  EXPECT_DOUBLE_EQ(
      0.7, MetricRecorderImpl::GCCycle_event.collection_rate_in_percent);
  static constexpr double kEfficiencyComparisonTolerance = 0.0005;
  EXPECT_LT(
      std::abs(MetricRecorderImpl::GCCycle_event.efficiency_in_bytes_per_us -
               (700.0 / (120000 + 50000 + 60000 + 190000))),
      kEfficiencyComparisonTolerance);
  EXPECT_LT(std::abs(MetricRecorderImpl::GCCycle_event
                         .main_thread_efficiency_in_bytes_per_us -
                     (700.0 / (40000 + 50000 + 60000 + 90000))),
            kEfficiencyComparisonTolerance);
}

TEST_F(MetricRecorderTest, ObjectSizeMetricsNoAllocations) {
  // Populate previous event.
  StartGC();
  EndGC(1000);
  // Populate current event.
  StartGC();
  EndGC(800);
  EXPECT_EQ(1000u, MetricRecorderImpl::GCCycle_event.objects.before_bytes);
  EXPECT_EQ(800u, MetricRecorderImpl::GCCycle_event.objects.after_bytes);
  EXPECT_EQ(200u, MetricRecorderImpl::GCCycle_event.objects.freed_bytes);
  EXPECT_EQ(0u, MetricRecorderImpl::GCCycle_event.memory.before_bytes);
  EXPECT_EQ(0u, MetricRecorderImpl::GCCycle_event.memory.after_bytes);
  EXPECT_EQ(0u, MetricRecorderImpl::GCCycle_event.memory.freed_bytes);
}

TEST_F(MetricRecorderTest, ObjectSizeMetricsWithAllocations) {
  // Populate previous event.
  StartGC();
  EndGC(1000);
  // Populate current event.
  StartGC();
  stats->NotifyAllocation(300);
  stats->NotifyAllocatedMemory(1400);
  stats->NotifyFreedMemory(700);
  stats->NotifyMarkingCompleted(800);
  stats->NotifyAllocation(150);
  stats->NotifyAllocatedMemory(1000);
  stats->NotifyFreedMemory(400);
  stats->NotifySweepingCompleted(GCConfig::SweepingType::kAtomic);
  EXPECT_EQ(1300u, MetricRecorderImpl::GCCycle_event.objects.before_bytes);
  EXPECT_EQ(800, MetricRecorderImpl::GCCycle_event.objects.after_bytes);
  EXPECT_EQ(500u, MetricRecorderImpl::GCCycle_event.objects.freed_bytes);
  EXPECT_EQ(700u, MetricRecorderImpl::GCCycle_event.memory.before_bytes);
  EXPECT_EQ(300u, MetricRecorderImpl::GCCycle_event.memory.after_bytes);
  EXPECT_EQ(400u, MetricRecorderImpl::GCCycle_event.memory.freed_bytes);
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                     node-23.7.0/deps/v8/test/unittests/heap/cppgc/minor-gc-unittest.cc                                  0000664 0000000 0000000 00000065445 14746647661 0025014 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(CPPGC_YOUNG_GENERATION)

#include <initializer_list>
#include <vector>

#include "include/cppgc/allocation.h"
#include "include/cppgc/explicit-management.h"
#include "include/cppgc/heap-consistency.h"
#include "include/cppgc/internal/caged-heap-local-data.h"
#include "include/cppgc/persistent.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/heap-visitor.h"
#include "src/heap/cppgc/heap.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

bool IsHeapObjectYoung(void* obj) {
  return HeapObjectHeader::FromObject(obj).IsYoung();
}

bool IsHeapObjectOld(void* obj) { return !IsHeapObjectYoung(obj); }

class SimpleGCedBase : public GarbageCollected<SimpleGCedBase> {
 public:
  static size_t destructed_objects;

  virtual ~SimpleGCedBase() { ++destructed_objects; }

  virtual void Trace(Visitor* v) const { v->Trace(next); }

  Member<SimpleGCedBase> next;
};

size_t SimpleGCedBase::destructed_objects;

template <size_t Size>
class SimpleGCed : public SimpleGCedBase {
  char array[Size];
};

using Small = SimpleGCed<64>;
using Large = SimpleGCed<kLargeObjectSizeThreshold * 2>;

template <typename Type>
struct OtherType;
template <>
struct OtherType<Small> {
  using Type = Large;
};
template <>
struct OtherType<Large> {
  using Type = Small;
};

void ExpectPageYoung(BasePage& page) {
  EXPECT_TRUE(page.contains_young_objects());
  auto& age_table = CagedHeapLocalData::Get().age_table;
  EXPECT_EQ(AgeTable::Age::kYoung,
            age_table.GetAgeForRange(
                CagedHeap::OffsetFromAddress(page.PayloadStart()),
                CagedHeap::OffsetFromAddress(page.PayloadEnd())));
}

void ExpectPageMixed(BasePage& page) {
  EXPECT_TRUE(page.contains_young_objects());
  auto& age_table = CagedHeapLocalData::Get().age_table;
  EXPECT_EQ(AgeTable::Age::kMixed,
            age_table.GetAgeForRange(
                CagedHeap::OffsetFromAddress(page.PayloadStart()),
                CagedHeap::OffsetFromAddress(page.PayloadEnd())));
}

void ExpectPageOld(BasePage& page) {
  EXPECT_FALSE(page.contains_young_objects());
  auto& age_table = CagedHeapLocalData::Get().age_table;
  EXPECT_EQ(AgeTable::Age::kOld,
            age_table.GetAgeForRange(
                CagedHeap::OffsetFromAddress(page.PayloadStart()),
                CagedHeap::OffsetFromAddress(page.PayloadEnd())));
}

class RememberedSetExtractor : HeapVisitor<RememberedSetExtractor> {
  friend class HeapVisitor<RememberedSetExtractor>;

 public:
  static std::set<void*> Extract(cppgc::Heap* heap) {
    RememberedSetExtractor extractor;
    extractor.Traverse(Heap::From(heap)->raw_heap());
    return std::move(extractor.slots_);
  }

 private:
  void VisitPage(BasePage& page) {
    auto* slot_set = page.slot_set();
    if (!slot_set) return;

    const uintptr_t page_start = reinterpret_cast<uintptr_t>(&page);
    const size_t buckets_size = SlotSet::BucketsForSize(page.AllocatedSize());

    slot_set->Iterate(
        page_start, 0, buckets_size,
        [this](SlotSet::Address slot) {
          slots_.insert(reinterpret_cast<void*>(slot));
          return heap::base::KEEP_SLOT;
        },
        SlotSet::EmptyBucketMode::FREE_EMPTY_BUCKETS);
  }

  bool VisitNormalPage(NormalPage& page) {
    VisitPage(page);
    return true;
  }

  bool VisitLargePage(LargePage& page) {
    VisitPage(page);
    return true;
  }

  std::set<void*> slots_;
};

}  // namespace

class MinorGCTest : public testing::TestWithHeap {
 public:
  MinorGCTest() : testing::TestWithHeap() {
    // Enable young generation flag and run GC. After the first run the heap
    // will enable minor GC.
    Heap::From(GetHeap())->EnableGenerationalGC();
    CollectMajor();

    SimpleGCedBase::destructed_objects = 0;
  }

  ~MinorGCTest() override { Heap::From(GetHeap())->Terminate(); }

  static size_t DestructedObjects() {
    return SimpleGCedBase::destructed_objects;
  }

  void CollectMinor() {
    Heap::From(GetHeap())->CollectGarbage(GCConfig::MinorPreciseAtomicConfig());
  }

  void CollectMinorWithStack() {
    Heap::From(GetHeap())->CollectGarbage(
        GCConfig::MinorConservativeAtomicConfig());
  }

  void CollectMajor() {
    Heap::From(GetHeap())->CollectGarbage(GCConfig::PreciseAtomicConfig());
  }

  void CollectMajorWithStack() {
    Heap::From(GetHeap())->CollectGarbage(GCConfig::ConservativeAtomicConfig());
  }

  const auto& RememberedSourceObjects() const {
    return Heap::From(GetHeap())->remembered_set().remembered_source_objects_;
  }

  const auto& RememberedInConstructionObjects() const {
    return Heap::From(GetHeap())
        ->remembered_set()
        .remembered_in_construction_objects_.previous;
  }
};

template <typename SmallOrLarge>
class MinorGCTestForType : public MinorGCTest {
 public:
  using Type = SmallOrLarge;
};

using ObjectTypes = ::testing::Types<Small, Large>;
TYPED_TEST_SUITE(MinorGCTestForType, ObjectTypes);

namespace {

enum class GCType {
  kMinor,
  kMajor,
};

enum class StackType {
  kWithout,
  kWith,
};

template <GCType gc_type, StackType stack_type, typename... Args>
void RunGCAndExpectObjectsPromoted(MinorGCTest& test, Args*... args) {
  EXPECT_TRUE((IsHeapObjectYoung(args) && ...));
  if constexpr (gc_type == GCType::kMajor) {
    if constexpr (stack_type == StackType::kWithout) {
      test.CollectMajor();
    } else {
      test.CollectMajorWithStack();
    }
  } else {
    if constexpr (stack_type == StackType::kWithout) {
      test.CollectMinor();
    } else {
      test.CollectMinorWithStack();
    }
  }
  EXPECT_TRUE((IsHeapObjectOld(args) && ...));
}

struct ExpectRememberedSlotsAdded final {
  ExpectRememberedSlotsAdded(
      const MinorGCTest& test,
      std::initializer_list<void*> slots_expected_to_be_remembered)
      : test_(test),
        slots_expected_to_be_remembered_(slots_expected_to_be_remembered),
        initial_slots_(RememberedSetExtractor::Extract(test.GetHeap())) {
    // Check that the remembered set doesn't contain specified slots.
    EXPECT_FALSE(std::includes(initial_slots_.begin(), initial_slots_.end(),
                               slots_expected_to_be_remembered_.begin(),
                               slots_expected_to_be_remembered_.end()));
  }

  ~ExpectRememberedSlotsAdded() {
    const auto current_slots = RememberedSetExtractor::Extract(test_.GetHeap());
    EXPECT_EQ(initial_slots_.size() + slots_expected_to_be_remembered_.size(),
              current_slots.size());
    EXPECT_TRUE(std::includes(current_slots.begin(), current_slots.end(),
                              slots_expected_to_be_remembered_.begin(),
                              slots_expected_to_be_remembered_.end()));
  }

 private:
  const MinorGCTest& test_;
  std::set<void*> slots_expected_to_be_remembered_;
  std::set<void*> initial_slots_;
};

struct ExpectRememberedSlotsRemoved final {
  ExpectRememberedSlotsRemoved(
      const MinorGCTest& test,
      std::initializer_list<void*> slots_expected_to_be_removed)
      : test_(test),
        slots_expected_to_be_removed_(slots_expected_to_be_removed),
        initial_slots_(RememberedSetExtractor::Extract(test.GetHeap())) {
    DCHECK_GE(initial_slots_.size(), slots_expected_to_be_removed_.size());
    // Check that the remembered set does contain specified slots to be removed.
    EXPECT_TRUE(std::includes(initial_slots_.begin(), initial_slots_.end(),
                              slots_expected_to_be_removed_.begin(),
                              slots_expected_to_be_removed_.end()));
  }

  ~ExpectRememberedSlotsRemoved() {
    const auto current_slots = RememberedSetExtractor::Extract(test_.GetHeap());
    EXPECT_EQ(initial_slots_.size() - slots_expected_to_be_removed_.size(),
              current_slots.size());
    EXPECT_FALSE(std::includes(current_slots.begin(), current_slots.end(),
                               slots_expected_to_be_removed_.begin(),
                               slots_expected_to_be_removed_.end()));
  }

 private:
  const MinorGCTest& test_;
  std::set<void*> slots_expected_to_be_removed_;
  std::set<void*> initial_slots_;
};

struct ExpectNoRememberedSlotsAdded final {
  explicit ExpectNoRememberedSlotsAdded(const MinorGCTest& test)
      : test_(test),
        initial_remembered_slots_(
            RememberedSetExtractor::Extract(test.GetHeap())) {}

  ~ExpectNoRememberedSlotsAdded() {
    EXPECT_EQ(initial_remembered_slots_,
              RememberedSetExtractor::Extract(test_.GetHeap()));
  }

 private:
  const MinorGCTest& test_;
  std::set<void*> initial_remembered_slots_;
};

}  // namespace

TYPED_TEST(MinorGCTestForType, MinorCollection) {
  using Type = typename TestFixture::Type;

  MakeGarbageCollected<Type>(this->GetAllocationHandle());
  EXPECT_EQ(0u, TestFixture::DestructedObjects());
  MinorGCTest::CollectMinor();
  EXPECT_EQ(1u, TestFixture::DestructedObjects());

  {
    subtle::NoGarbageCollectionScope no_gc_scope(*Heap::From(this->GetHeap()));

    Type* prev = nullptr;
    for (size_t i = 0; i < 64; ++i) {
      auto* ptr = MakeGarbageCollected<Type>(this->GetAllocationHandle());
      ptr->next = prev;
      prev = ptr;
    }
  }

  MinorGCTest::CollectMinor();
  EXPECT_EQ(65u, TestFixture::DestructedObjects());
}

TYPED_TEST(MinorGCTestForType, StickyBits) {
  using Type = typename TestFixture::Type;

  Persistent<Type> p1 = MakeGarbageCollected<Type>(this->GetAllocationHandle());
  TestFixture::CollectMinor();
  EXPECT_FALSE(HeapObjectHeader::FromObject(p1.Get()).IsYoung());
  TestFixture::CollectMajor();
  EXPECT_FALSE(HeapObjectHeader::FromObject(p1.Get()).IsYoung());
  EXPECT_EQ(0u, TestFixture::DestructedObjects());
}

TYPED_TEST(MinorGCTestForType, OldObjectIsNotVisited) {
  using Type = typename TestFixture::Type;

  Persistent<Type> p = MakeGarbageCollected<Type>(this->GetAllocationHandle());
  TestFixture::CollectMinor();
  EXPECT_EQ(0u, TestFixture::DestructedObjects());
  EXPECT_FALSE(HeapObjectHeader::FromObject(p.Get()).IsYoung());

  // Check that the old deleted object won't be visited during minor GC.
  Type* raw = p.Release();
  TestFixture::CollectMinor();
  EXPECT_EQ(0u, TestFixture::DestructedObjects());
  EXPECT_FALSE(HeapObjectHeader::FromObject(raw).IsYoung());
  EXPECT_FALSE(HeapObjectHeader::FromObject(raw).IsFree());

  // Check that the old deleted object will be revisited in major GC.
  TestFixture::CollectMajor();
  EXPECT_EQ(1u, TestFixture::DestructedObjects());
}

template <typename Type1, typename Type2>
void InterGenerationalPointerTest(MinorGCTest* test, cppgc::Heap* heap) {
  Persistent<Type1> old =
      MakeGarbageCollected<Type1>(heap->GetAllocationHandle());
  test->CollectMinor();
  EXPECT_FALSE(HeapObjectHeader::FromObject(old.Get()).IsYoung());

  Type2* young = nullptr;

  {
    subtle::NoGarbageCollectionScope no_gc_scope(*Heap::From(heap));

    // Allocate young objects.
    for (size_t i = 0; i < 64; ++i) {
      auto* ptr = MakeGarbageCollected<Type2>(heap->GetAllocationHandle());
      ptr->next = young;
      young = ptr;
      EXPECT_TRUE(HeapObjectHeader::FromObject(young).IsYoung());
      const uintptr_t offset = CagedHeap::OffsetFromAddress(young);
      // Age may be young or unknown.
      EXPECT_NE(AgeTable::Age::kOld,
                CagedHeapLocalData::Get().age_table.GetAge(offset));
    }
  }

  auto remembered_set_size_before_barrier =
      RememberedSetExtractor::Extract(test->GetHeap()).size();

  // Issue generational barrier.
  old->next = young;

  auto remembered_set_size_after_barrier =
      RememberedSetExtractor::Extract(test->GetHeap()).size();

  EXPECT_EQ(remembered_set_size_before_barrier + 1u,
            remembered_set_size_after_barrier);

  // Check that the remembered set is visited.
  test->CollectMinor();

  EXPECT_EQ(0u, MinorGCTest::DestructedObjects());
  EXPECT_TRUE(RememberedSetExtractor::Extract(test->GetHeap()).empty());

  for (size_t i = 0; i < 64; ++i) {
    EXPECT_FALSE(HeapObjectHeader::FromObject(young).IsFree());
    EXPECT_FALSE(HeapObjectHeader::FromObject(young).IsYoung());
    young = static_cast<Type2*>(young->next.Get());
  }

  old.Release();
  test->CollectMajor();
  EXPECT_EQ(65u, MinorGCTest::DestructedObjects());
}

TYPED_TEST(MinorGCTestForType, InterGenerationalPointerForSamePageTypes) {
  using Type = typename TestFixture::Type;
  InterGenerationalPointerTest<Type, Type>(this, this->GetHeap());
}

TYPED_TEST(MinorGCTestForType, InterGenerationalPointerForDifferentPageTypes) {
  using Type = typename TestFixture::Type;
  InterGenerationalPointerTest<Type, typename OtherType<Type>::Type>(
      this, this->GetHeap());
}

TYPED_TEST(MinorGCTestForType, OmitGenerationalBarrierForOnStackObject) {
  using Type = typename TestFixture::Type;

  class StackAllocated : GarbageCollected<StackAllocated> {
    CPPGC_STACK_ALLOCATED();

   public:
    Type* ptr = nullptr;
  } stack_object;

  // Try issuing generational barrier for on-stack object.
  stack_object.ptr = MakeGarbageCollected<Type>(this->GetAllocationHandle());
  subtle::HeapConsistency::WriteBarrierParams params;
  EXPECT_EQ(subtle::HeapConsistency::WriteBarrierType::kNone,
            subtle::HeapConsistency::GetWriteBarrierType(
                reinterpret_cast<void*>(&stack_object.ptr), stack_object.ptr,
                params));
}

TYPED_TEST(MinorGCTestForType, OmitGenerationalBarrierForSentinels) {
  using Type = typename TestFixture::Type;

  Persistent<Type> old =
      MakeGarbageCollected<Type>(this->GetAllocationHandle());

  TestFixture::CollectMinor();
  EXPECT_FALSE(HeapObjectHeader::FromObject(old.Get()).IsYoung());

  {
    ExpectNoRememberedSlotsAdded _(*this);
    // Try issuing generational barrier for nullptr.
    old->next = static_cast<Type*>(nullptr);
  }
  {
    ExpectNoRememberedSlotsAdded _(*this);
    // Try issuing generational barrier for sentinel.
    old->next = kSentinelPointer;
  }
}

template <typename From, typename To>
void TestRememberedSetInvalidation(MinorGCTest& test) {
  Persistent<From> old = MakeGarbageCollected<From>(test.GetAllocationHandle());

  test.CollectMinor();

  auto* young = MakeGarbageCollected<To>(test.GetAllocationHandle());

  {
    ExpectRememberedSlotsAdded _(test, {old->next.GetSlotForTesting()});
    // Issue the generational barrier.
    old->next = young;
  }

  {
    ExpectRememberedSlotsRemoved _(test, {old->next.GetSlotForTesting()});
    // Release the persistent and free the old object.
    auto* old_raw = old.Release();
    subtle::FreeUnreferencedObject(test.GetHeapHandle(), *old_raw);
  }

  // Visiting remembered slots must not fail.
  test.CollectMinor();
}

TYPED_TEST(MinorGCTestForType, RememberedSetInvalidationOnPromptlyFree) {
  using Type1 = typename TestFixture::Type;
  using Type2 = typename OtherType<Type1>::Type;
  TestRememberedSetInvalidation<Type1, Type1>(*this);
  TestRememberedSetInvalidation<Type1, Type2>(*this);
}

TEST_F(MinorGCTest, RememberedSetInvalidationOnShrink) {
  using Member = Member<Small>;

  static constexpr size_t kTrailingMembers = 64;
  static constexpr size_t kBytesToAllocate = kTrailingMembers * sizeof(Member);

  static constexpr size_t kFirstMemberToInvalidate = kTrailingMembers / 2;
  static constexpr size_t kLastMemberToInvalidate = kTrailingMembers;

  // Create an object with additional kBytesToAllocate bytes.
  Persistent<Small> old = MakeGarbageCollected<Small>(
      this->GetAllocationHandle(), AdditionalBytes(kBytesToAllocate));

  auto get_member = [&old](size_t i) -> Member& {
    return *reinterpret_cast<Member*>(reinterpret_cast<uint8_t*>(old.Get()) +
                                      sizeof(Small) + i * sizeof(Member));
  };

  CollectMinor();

  auto* young = MakeGarbageCollected<Small>(GetAllocationHandle());

  const size_t remembered_set_size_before_barrier =
      RememberedSetExtractor::Extract(GetHeap()).size();

  // Issue the generational barriers.
  for (size_t i = kFirstMemberToInvalidate; i < kLastMemberToInvalidate; ++i) {
    // Construct the member.
    new (&get_member(i)) Member;
    // Issue the barrier.
    get_member(i) = young;
  }

  const auto remembered_set_size_after_barrier =
      RememberedSetExtractor::Extract(GetHeap()).size();

  // Check that barriers hit (kLastMemberToInvalidate -
  // kFirstMemberToInvalidate) times.
  EXPECT_EQ(remembered_set_size_before_barrier +
                (kLastMemberToInvalidate - kFirstMemberToInvalidate),
            remembered_set_size_after_barrier);

  // Shrink the buffer for old object.
  subtle::Resize(*old, AdditionalBytes(kBytesToAllocate / 2));

  const auto remembered_set_after_shrink =
      RememberedSetExtractor::Extract(GetHeap()).size();

  // Check that the reference was invalidated.
  EXPECT_EQ(remembered_set_size_before_barrier, remembered_set_after_shrink);

  // Visiting remembered slots must not fail.
  CollectMinor();
}

namespace {

template <typename Value>
struct InlinedObject {
  struct Inner {
    Inner() = default;
    explicit Inner(AllocationHandle& handle)
        : ref(MakeGarbageCollected<Value>(handle)) {}

    void Trace(Visitor* v) const { v->Trace(ref); }

    double d = -1.;
    Member<Value> ref;
  };

  InlinedObject() = default;
  explicit InlinedObject(AllocationHandle& handle)
      : ref(MakeGarbageCollected<Value>(handle)), inner(handle) {}

  void Trace(cppgc::Visitor* v) const {
    v->Trace(ref);
    v->Trace(inner);
  }

  int a_ = -1;
  Member<Value> ref;
  Inner inner;
};

template <typename Value>
class GCedWithInlinedArray
    : public GarbageCollected<GCedWithInlinedArray<Value>> {
 public:
  static constexpr size_t kNumObjects = 16;

  GCedWithInlinedArray(HeapHandle& heap_handle, AllocationHandle& alloc_handle)
      : heap_handle_(heap_handle), alloc_handle_(alloc_handle) {}

  using WriteBarrierParams = subtle::HeapConsistency::WriteBarrierParams;
  using HeapConsistency = subtle::HeapConsistency;

  void SetInPlaceRange(size_t from, size_t to) {
    DCHECK_GT(to, from);
    DCHECK_GT(kNumObjects, from);

    for (; from != to; ++from)
      new (&objects[from]) InlinedObject<Value>(alloc_handle_);

    GenerationalBarrierForSourceObject(&objects[from]);
  }

  void Trace(cppgc::Visitor* v) const {
    for (const auto& object : objects) v->Trace(object);
  }

  InlinedObject<Value> objects[kNumObjects];

 private:
  void GenerationalBarrierForSourceObject(void* object) {
    DCHECK(object);
    WriteBarrierParams params;
    const auto barrier_type = HeapConsistency::GetWriteBarrierType(
        object, params, [this]() -> HeapHandle& { return heap_handle_; });
    EXPECT_EQ(HeapConsistency::WriteBarrierType::kGenerational, barrier_type);
    HeapConsistency::GenerationalBarrierForSourceObject(params, object);
  }

  HeapHandle& heap_handle_;
  AllocationHandle& alloc_handle_;
};

}  // namespace

TYPED_TEST(MinorGCTestForType, GenerationalBarrierDeferredTracing) {
  using Type = typename TestFixture::Type;

  Persistent<GCedWithInlinedArray<Type>> array =
      MakeGarbageCollected<GCedWithInlinedArray<Type>>(
          this->GetAllocationHandle(), this->GetHeapHandle(),
          this->GetAllocationHandle());

  this->CollectMinor();

  EXPECT_TRUE(IsHeapObjectOld(array.Get()));

  const auto& remembered_objects = this->RememberedSourceObjects();
  {
    ExpectNoRememberedSlotsAdded _(*this);
    EXPECT_EQ(0u, remembered_objects.count(
                      &HeapObjectHeader::FromObject(array->objects)));

    array->SetInPlaceRange(2, 4);

    EXPECT_EQ(1u, remembered_objects.count(
                      &HeapObjectHeader::FromObject(array->objects)));
  }

  RunGCAndExpectObjectsPromoted<GCType::kMinor, StackType::kWithout>(
      *this, array->objects[2].ref.Get(), array->objects[2].inner.ref.Get(),
      array->objects[3].ref.Get(), array->objects[3].inner.ref.Get());

  EXPECT_EQ(0u, remembered_objects.size());
}

namespace {
class GCedWithCustomWeakCallback final
    : public GarbageCollected<GCedWithCustomWeakCallback> {
 public:
  static size_t custom_callback_called;

  void CustomWeakCallbackMethod(const LivenessBroker& broker) {
    custom_callback_called++;
  }

  void Trace(cppgc::Visitor* visitor) const {
    visitor->RegisterWeakCallbackMethod<
        GCedWithCustomWeakCallback,
        &GCedWithCustomWeakCallback::CustomWeakCallbackMethod>(this);
  }
};
size_t GCedWithCustomWeakCallback::custom_callback_called = 0;
}  // namespace

TEST_F(MinorGCTest, ReexecuteCustomCallback) {
  // Create an object with additional kBytesToAllocate bytes.
  Persistent<GCedWithCustomWeakCallback> old =
      MakeGarbageCollected<GCedWithCustomWeakCallback>(GetAllocationHandle());

  CollectMinor();
  EXPECT_EQ(1u, GCedWithCustomWeakCallback::custom_callback_called);

  CollectMinor();
  EXPECT_EQ(2u, GCedWithCustomWeakCallback::custom_callback_called);

  CollectMinor();
  EXPECT_EQ(3u, GCedWithCustomWeakCallback::custom_callback_called);

  CollectMajor();
  // The callback must be called only once.
  EXPECT_EQ(4u, GCedWithCustomWeakCallback::custom_callback_called);
}

TEST_F(MinorGCTest, AgeTableIsReset) {
  using Type1 = SimpleGCed<16>;
  using Type2 = SimpleGCed<64>;
  using Type3 = SimpleGCed<kLargeObjectSizeThreshold * 2>;

  Persistent<Type1> p1 = MakeGarbageCollected<Type1>(GetAllocationHandle());
  Persistent<Type2> p2 = MakeGarbageCollected<Type2>(GetAllocationHandle());
  Persistent<Type3> p3 = MakeGarbageCollected<Type3>(GetAllocationHandle());

  auto* page1 = BasePage::FromPayload(p1.Get());
  auto* page2 = BasePage::FromPayload(p2.Get());
  auto* page3 = BasePage::FromPayload(p3.Get());

  ASSERT_FALSE(page1->is_large());
  ASSERT_FALSE(page2->is_large());
  ASSERT_TRUE(page3->is_large());

  ASSERT_NE(page1, page2);
  ASSERT_NE(page1, page3);
  ASSERT_NE(page2, page3);

  // First, expect all the pages to be young.
  ExpectPageYoung(*page1);
  ExpectPageYoung(*page2);
  ExpectPageYoung(*page3);

  CollectMinor();

  // Expect pages to be promoted after the minor GC.
  ExpectPageOld(*page1);
  ExpectPageOld(*page2);
  ExpectPageOld(*page3);

  // Allocate another objects on the normal pages and a new large page.
  p1 = MakeGarbageCollected<Type1>(GetAllocationHandle());
  p2 = MakeGarbageCollected<Type2>(GetAllocationHandle());
  p3 = MakeGarbageCollected<Type3>(GetAllocationHandle());

  // Expect now the normal pages to be mixed.
  ExpectPageMixed(*page1);
  ExpectPageMixed(*page2);
  // The large page must remain old.
  ExpectPageOld(*page3);

  CollectMajor();

  // After major GC all the pages must also become old.
  ExpectPageOld(*page1);
  ExpectPageOld(*page2);
  ExpectPageOld(*BasePage::FromPayload(p3.Get()));
}

namespace {

template <GCType type>
struct GCOnConstruction {
  explicit GCOnConstruction(MinorGCTest& test, size_t depth) {
    if constexpr (type == GCType::kMajor) {
      test.CollectMajorWithStack();
    } else {
      test.CollectMinorWithStack();
    }
    EXPECT_EQ(depth, test.RememberedInConstructionObjects().size());
  }
};

template <GCType type>
struct InConstructionWithYoungRef
    : GarbageCollected<InConstructionWithYoungRef<type>> {
  using ValueType = SimpleGCed<64>;

  explicit InConstructionWithYoungRef(MinorGCTest& test)
      : call_gc(test, 1u),
        m(MakeGarbageCollected<ValueType>(test.GetAllocationHandle())) {}

  void Trace(Visitor* v) const { v->Trace(m); }

  GCOnConstruction<type> call_gc;
  Member<ValueType> m;
};

}  // namespace

TEST_F(MinorGCTest, RevisitInConstructionObjectsMinorMinorWithStack) {
  static constexpr auto kFirstGCType = GCType::kMinor;

  auto* gced = MakeGarbageCollected<InConstructionWithYoungRef<kFirstGCType>>(
      GetAllocationHandle(), *this);

  RunGCAndExpectObjectsPromoted<GCType::kMinor, StackType::kWith>(
      *this, gced->m.Get());

  EXPECT_EQ(0u, RememberedInConstructionObjects().size());
}

TEST_F(MinorGCTest, RevisitInConstructionObjectsMinorMinorWithoutStack) {
  static constexpr auto kFirstGCType = GCType::kMinor;

  Persistent<InConstructionWithYoungRef<kFirstGCType>> gced =
      MakeGarbageCollected<InConstructionWithYoungRef<kFirstGCType>>(
          GetAllocationHandle(), *this);

  RunGCAndExpectObjectsPromoted<GCType::kMinor, StackType::kWithout>(
      *this, gced->m.Get());

  EXPECT_EQ(0u, RememberedInConstructionObjects().size());
}

TEST_F(MinorGCTest, RevisitInConstructionObjectsMajorMinorWithStack) {
  static constexpr auto kFirstGCType = GCType::kMajor;

  auto* gced = MakeGarbageCollected<InConstructionWithYoungRef<kFirstGCType>>(
      GetAllocationHandle(), *this);

  RunGCAndExpectObjectsPromoted<GCType::kMinor, StackType::kWith>(
      *this, gced->m.Get());

  EXPECT_EQ(0u, RememberedInConstructionObjects().size());
}

TEST_F(MinorGCTest, RevisitInConstructionObjectsMajorMinorWithoutStack) {
  static constexpr auto kFirstGCType = GCType::kMajor;

  Persistent<InConstructionWithYoungRef<kFirstGCType>> gced =
      MakeGarbageCollected<InConstructionWithYoungRef<kFirstGCType>>(
          GetAllocationHandle(), *this);

  RunGCAndExpectObjectsPromoted<GCType::kMinor, StackType::kWithout>(
      *this, gced->m.Get());

  EXPECT_EQ(0u, RememberedInConstructionObjects().size());
}

TEST_F(MinorGCTest, PreviousInConstructionObjectsAreDroppedAfterFullGC) {
  MakeGarbageCollected<InConstructionWithYoungRef<GCType::kMinor>>(
      GetAllocationHandle(), *this);

  EXPECT_EQ(1u, RememberedInConstructionObjects().size());

  CollectMajor();

  EXPECT_EQ(0u, RememberedInConstructionObjects().size());
}

namespace {

template <GCType type>
struct NestedInConstructionWithYoungRef
    : GarbageCollected<NestedInConstructionWithYoungRef<type>> {
  using ValueType = SimpleGCed<64>;

  NestedInConstructionWithYoungRef(MinorGCTest& test, size_t depth)
      : NestedInConstructionWithYoungRef(test, 1, depth) {}

  NestedInConstructionWithYoungRef(MinorGCTest& test, size_t current_depth,
                                   size_t max_depth)
      : current_depth(current_depth),
        max_depth(max_depth),
        next(current_depth != max_depth
                 ? MakeGarbageCollected<NestedInConstructionWithYoungRef<type>>(
                       test.GetAllocationHandle(), test, current_depth + 1,
                       max_depth)
                 : nullptr),
        call_gc(test, current_depth),
        m(MakeGarbageCollected<ValueType>(test.GetAllocationHandle())) {}

  void Trace(Visitor* v) const {
    v->Trace(next);
    v->Trace(m);
  }

  size_t current_depth = 0;
  size_t max_depth = 0;

  Member<NestedInConstructionWithYoungRef<type>> next;
  GCOnConstruction<type> call_gc;
  Member<ValueType> m;
};

}  // namespace

TEST_F(MinorGCTest, RevisitNestedInConstructionObjects) {
  static constexpr auto kFirstGCType = GCType::kMinor;

  Persistent<NestedInConstructionWithYoungRef<kFirstGCType>> gced =
      MakeGarbageCollected<NestedInConstructionWithYoungRef<kFirstGCType>>(
          GetAllocationHandle(), *this, 10);

  CollectMinor();

  for (auto* p = gced.Get(); p; p = p->next.Get()) {
    EXPECT_TRUE(IsHeapObjectOld(p));
    EXPECT_TRUE(IsHeapObjectOld(p->m));
  }

  EXPECT_EQ(0u, RememberedInConstructionObjects().size());
}

}  // namespace internal
}  // namespace cppgc

#endif
                                                                                                                                                                                                                           node-23.7.0/deps/v8/test/unittests/heap/cppgc/name-trait-unittest.cc                                0000664 0000000 0000000 00000013354 14746647661 0025332 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/internal/name-trait.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/garbage-collected.h"
#include "src/base/build_config.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

struct NoName : public GarbageCollected<NoName> {
  virtual void Trace(Visitor*) const {}
};

struct OtherNoName : public GarbageCollected<OtherNoName> {
  virtual void Trace(Visitor*) const {}
};

class ClassWithName final : public GarbageCollected<ClassWithName>,
                            public NameProvider {
 public:
  explicit ClassWithName(const char* name) : name_(name) {}
  virtual void Trace(Visitor*) const {}
  const char* GetHumanReadableName() const final { return name_; }

 private:
  const char* name_;
};

}  // namespace

TEST(NameTraitTest, InternalNamesHiddenInOfficialBuild) {
  // Use a runtime test instead of static_assert to allow local builds but block
  // enabling the feature accidentally through the waterfall.
  //
  // Do not include such type information in official builds to
  // (a) save binary size on string literals, and
  // (b) avoid exposing internal types until it has been clarified whether
  //     exposing internals in DevTools is fine.
#if defined(OFFICIAL_BUILD)
  EXPECT_FALSE(NameProvider::SupportsCppClassNamesAsObjectNames());
#endif
}

TEST(NameTraitTest, DefaultName) {
  EXPECT_STREQ(
      NameProvider::SupportsCppClassNamesAsObjectNames()
          ? "cppgc::internal::(anonymous namespace)::NoName"
          : "InternalNode",
      NameTrait<NoName>::GetName(
          nullptr, HeapObjectNameForUnnamedObject::kUseClassNameIfSupported)
          .value);
  EXPECT_STREQ(
      NameProvider::SupportsCppClassNamesAsObjectNames()
          ? "cppgc::internal::(anonymous namespace)::OtherNoName"
          : "InternalNode",
      NameTrait<OtherNoName>::GetName(
          nullptr, HeapObjectNameForUnnamedObject::kUseClassNameIfSupported)
          .value);
  // The following ignores `NameProvider::SupportsCppClassNamesAsObjectNames()`
  // and just always returns the hidden name, independent of the build support.
  EXPECT_STREQ("InternalNode",
               NameTrait<NoName>::GetName(
                   nullptr, HeapObjectNameForUnnamedObject::kUseHiddenName)
                   .value);
  EXPECT_STREQ("InternalNode",
               NameTrait<OtherNoName>::GetName(
                   nullptr, HeapObjectNameForUnnamedObject::kUseHiddenName)
                   .value);
}

TEST(NameTraitTest, CustomName) {
  ClassWithName with_name("CustomName");
  EXPECT_STREQ(
      "CustomName",
      NameTrait<ClassWithName>::GetName(
          &with_name, HeapObjectNameForUnnamedObject::kUseClassNameIfSupported)
          .value);
  EXPECT_STREQ("CustomName",
               NameTrait<ClassWithName>::GetName(
                   &with_name, HeapObjectNameForUnnamedObject::kUseHiddenName)
                   .value);
}

namespace {

class TraitTester : public NameTraitBase {
 public:
  // Expose type signature parser to allow testing various inputs.
  using NameTraitBase::GetNameFromTypeSignature;
};

}  // namespace

TEST(NameTraitTest, NoTypeAvailable) {
  HeapObjectName name = TraitTester::GetNameFromTypeSignature(nullptr);
  EXPECT_STREQ(NameProvider::kNoNameDeducible, name.value);
  EXPECT_FALSE(name.name_was_hidden);
}

TEST(NameTraitTest, ParsingPrettyFunction) {
  // Test assumes that __PRETTY_FUNCTION__ and friends return a string
  // containing the the type as [T = <type>].
  HeapObjectName name = TraitTester::GetNameFromTypeSignature(
      "Some signature of a method [T = ClassNameInSignature]");
  EXPECT_STREQ("ClassNameInSignature", name.value);
  EXPECT_FALSE(name.name_was_hidden);
  // While object names are generally leaky, the test needs to be cleaned up
  // gracefully.
  delete[] name.value;
}

class HeapObjectHeaderNameTest : public testing::TestWithHeap {};

TEST_F(HeapObjectHeaderNameTest, LookupNameThroughGCInfo) {
  auto* no_name = MakeGarbageCollected<NoName>(GetAllocationHandle());
  auto no_name_tuple = HeapObjectHeader::FromObject(no_name).GetName();
  EXPECT_STREQ(NameProvider::kHiddenName, no_name_tuple.value);
  EXPECT_TRUE(no_name_tuple.name_was_hidden);

  ClassNameAsHeapObjectNameScope class_names_scope(*Heap::From(GetHeap()));
  no_name_tuple = HeapObjectHeader::FromObject(no_name).GetName();
  if (NameProvider::SupportsCppClassNamesAsObjectNames()) {
    EXPECT_STREQ("cppgc::internal::(anonymous namespace)::NoName",
                 no_name_tuple.value);
    EXPECT_FALSE(no_name_tuple.name_was_hidden);
  } else {
    EXPECT_STREQ(NameProvider::kHiddenName, no_name_tuple.value);
    EXPECT_FALSE(no_name_tuple.name_was_hidden);
  }

  auto* other_no_name =
      MakeGarbageCollected<OtherNoName>(GetAllocationHandle());
  auto other_no_name_tuple =
      HeapObjectHeader::FromObject(other_no_name).GetName();
  if (NameProvider::SupportsCppClassNamesAsObjectNames()) {
    EXPECT_STREQ("cppgc::internal::(anonymous namespace)::OtherNoName",
                 other_no_name_tuple.value);
    EXPECT_FALSE(other_no_name_tuple.name_was_hidden);
  } else {
    EXPECT_STREQ(NameProvider::kHiddenName, other_no_name_tuple.value);
    EXPECT_FALSE(other_no_name_tuple.name_was_hidden);
  }

  auto* class_with_name =
      MakeGarbageCollected<ClassWithName>(GetAllocationHandle(), "CustomName");
  auto class_with_name_tuple =
      HeapObjectHeader::FromObject(class_with_name).GetName();
  EXPECT_STREQ("CustomName", class_with_name_tuple.value);
  EXPECT_FALSE(class_with_name_tuple.name_was_hidden);
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/test/unittests/heap/cppgc/object-size-trait-unittest.cc                         0000664 0000000 0000000 00000002751 14746647661 0026627 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "include/cppgc/object-size-trait.h"

#include "include/cppgc/allocation.h"
#include "include/cppgc/garbage-collected.h"
#include "src/heap/cppgc/heap.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class ObjectSizeTraitTest : public testing::TestWithHeap {};

class GCed : public GarbageCollected<GCed> {
 public:
  void Trace(Visitor*) const {}
};

class NotGCed {};
class Mixin : public GarbageCollectedMixin {};
class UnmanagedMixinWithDouble {
 protected:
  virtual void ForceVTable() {}
};
class GCedWithMixin : public GarbageCollected<GCedWithMixin>,
                      public UnmanagedMixinWithDouble,
                      public Mixin {};

}  // namespace

TEST_F(ObjectSizeTraitTest, GarbageCollected) {
  auto* obj = cppgc::MakeGarbageCollected<GCed>(GetAllocationHandle());
  EXPECT_GE(subtle::ObjectSizeTrait<GCed>::GetSize(*obj), sizeof(GCed));
}

TEST_F(ObjectSizeTraitTest, GarbageCollectedMixin) {
  auto* obj = cppgc::MakeGarbageCollected<GCedWithMixin>(GetAllocationHandle());
  Mixin& mixin = static_cast<Mixin&>(*obj);
  EXPECT_NE(static_cast<void*>(&mixin), obj);
  EXPECT_GE(subtle::ObjectSizeTrait<Mixin>::GetSize(mixin),
            sizeof(GCedWithMixin));
}

}  // namespace internal
}  // namespace cppgc
                       node-23.7.0/deps/v8/test/unittests/heap/cppgc/object-start-bitmap-unittest.cc                       0000664 0000000 0000000 00000013075 14746647661 0027144 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/object-start-bitmap.h"

#include "include/cppgc/allocation.h"
#include "src/base/macros.h"
#include "src/base/page-allocator.h"
#include "src/heap/cppgc/globals.h"
#include "src/heap/cppgc/heap-object-header.h"
#include "src/heap/cppgc/page-memory.h"
#include "src/heap/cppgc/raw-heap.h"
#include "test/unittests/heap/cppgc/tests.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

namespace {

class PageWithBitmap final {
 public:
  PageWithBitmap()
      : base_(allocator_.AllocatePages(
            nullptr, kPageSize, kPageSize,
            v8::base::PageAllocator::Permission::kReadWrite)),
        bitmap_(new(base_) ObjectStartBitmap) {}

  PageWithBitmap(const PageWithBitmap&) = delete;
  PageWithBitmap& operator=(const PageWithBitmap&) = delete;

  ~PageWithBitmap() { allocator_.FreePages(base_, kPageSize); }

  ObjectStartBitmap& bitmap() const { return *bitmap_; }

  void* base() const { return base_; }
  size_t size() const { return kPageSize; }

  v8::base::PageAllocator allocator_;
  void* base_;
  ObjectStartBitmap* bitmap_;
};

class ObjectStartBitmapTest : public ::testing::Test {
 protected:
  void AllocateObject(size_t object_position) {
    bitmap().SetBit(ObjectAddress(object_position));
  }

  void FreeObject(size_t object_position) {
    bitmap().ClearBit(ObjectAddress(object_position));
  }

  bool CheckObjectAllocated(size_t object_position) {
    return bitmap().CheckBit(ObjectAddress(object_position));
  }

  Address ObjectAddress(size_t pos) const {
    return reinterpret_cast<Address>(reinterpret_cast<uintptr_t>(page.base()) +
                                     pos * ObjectStartBitmap::Granularity());
  }

  HeapObjectHeader* ObjectHeader(size_t pos) const {
    return reinterpret_cast<HeapObjectHeader*>(ObjectAddress(pos));
  }

  ObjectStartBitmap& bitmap() const { return page.bitmap(); }

  bool IsEmpty() const {
    size_t count = 0;
    bitmap().Iterate([&count](Address) { count++; });
    return count == 0;
  }

 private:
  PageWithBitmap page;
};

}  // namespace

TEST_F(ObjectStartBitmapTest, MoreThanZeroEntriesPossible) {
  const size_t max_entries = ObjectStartBitmap::MaxEntries();
  EXPECT_LT(0u, max_entries);
}

TEST_F(ObjectStartBitmapTest, InitialEmpty) { EXPECT_TRUE(IsEmpty()); }

TEST_F(ObjectStartBitmapTest, SetBitImpliesNonEmpty) {
  AllocateObject(0);
  EXPECT_FALSE(IsEmpty());
}

TEST_F(ObjectStartBitmapTest, SetBitCheckBit) {
  constexpr size_t object_num = 7;
  AllocateObject(object_num);
  EXPECT_TRUE(CheckObjectAllocated(object_num));
}

TEST_F(ObjectStartBitmapTest, SetBitClearbitCheckBit) {
  constexpr size_t object_num = 77;
  AllocateObject(object_num);
  FreeObject(object_num);
  EXPECT_FALSE(CheckObjectAllocated(object_num));
}

TEST_F(ObjectStartBitmapTest, SetBitClearBitImpliesEmpty) {
  constexpr size_t object_num = 123;
  AllocateObject(object_num);
  FreeObject(object_num);
  EXPECT_TRUE(IsEmpty());
}

TEST_F(ObjectStartBitmapTest, AdjacentObjectsAtBegin) {
  AllocateObject(0);
  AllocateObject(1);
  EXPECT_FALSE(CheckObjectAllocated(3));
  size_t count = 0;
  bitmap().Iterate([&count, this](Address current) {
    if (count == 0) {
      EXPECT_EQ(ObjectAddress(0), current);
    } else if (count == 1) {
      EXPECT_EQ(ObjectAddress(1), current);
    }
    count++;
  });
  EXPECT_EQ(2u, count);
}

TEST_F(ObjectStartBitmapTest, AdjacentObjectsAtEnd) {
  static constexpr size_t last_entry_index =
      ObjectStartBitmap::MaxEntries() - 1;
  AllocateObject(last_entry_index);
  AllocateObject(last_entry_index - 1);
  EXPECT_FALSE(CheckObjectAllocated(last_entry_index - 2));
  size_t count = 0;
  bitmap().Iterate([&count, this](Address current) {
    if (count == 0) {
      EXPECT_EQ(ObjectAddress(last_entry_index - 1), current);
    } else if (count == 1) {
      EXPECT_EQ(ObjectAddress(last_entry_index), current);
    }
    count++;
  });
  EXPECT_EQ(2u, count);
}

TEST_F(ObjectStartBitmapTest, FindHeaderExact) {
  constexpr size_t object_num = 654;
  AllocateObject(object_num);
  EXPECT_EQ(ObjectHeader(object_num),
            bitmap().FindHeader(ObjectAddress(object_num)));
}

TEST_F(ObjectStartBitmapTest, FindHeaderApproximate) {
  static const size_t kInternalDelta = 37;
  constexpr size_t object_num = 654;
  AllocateObject(object_num);
  EXPECT_EQ(ObjectHeader(object_num),
            bitmap().FindHeader(ObjectAddress(object_num) + kInternalDelta));
}

TEST_F(ObjectStartBitmapTest, FindHeaderIteratingWholeBitmap) {
  AllocateObject(0);
  Address hint_index = ObjectAddress(ObjectStartBitmap::MaxEntries() - 1);
  EXPECT_EQ(ObjectHeader(0), bitmap().FindHeader(hint_index));
}

TEST_F(ObjectStartBitmapTest, FindHeaderNextCell) {
  // This white box test makes use of the fact that cells are of type uint8_t.
  const size_t kCellSize = sizeof(uint8_t);
  AllocateObject(0);
  AllocateObject(kCellSize - 1);
  Address hint = ObjectAddress(kCellSize);
  EXPECT_EQ(ObjectHeader(kCellSize - 1), bitmap().FindHeader(hint));
}

TEST_F(ObjectStartBitmapTest, FindHeaderSameCell) {
  // This white box test makes use of the fact that cells are of type uint8_t.
  const size_t kCellSize = sizeof(uint8_t);
  AllocateObject(0);
  AllocateObject(kCellSize - 1);
  Address hint = ObjectAddress(kCellSize);
  EXPECT_EQ(ObjectHeader(kCellSize - 1), bitmap().FindHeader(hint));
  EXPECT_EQ(ObjectHeader(kCellSize - 1),
            bitmap().FindHeader(ObjectAddress(kCellSize - 1)));
}

}  // namespace internal
}  // namespace cppgc
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/unittests/heap/cppgc/page-memory-unittest.cc                               0000664 0000000 0000000 00000035776 14746647661 0025527 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/heap/cppgc/page-memory.h"

#include <algorithm>

#include "src/base/page-allocator.h"
#include "src/heap/cppgc/platform.h"
#include "testing/gtest/include/gtest/gtest.h"

namespace cppgc {
namespace internal {

TEST(MemoryRegionTest, Construct) {
  constexpr size_t kSize = 17;
  uint8_t dummy[kSize];
  const MemoryRegion region(dummy, kSize);
  EXPECT_EQ(dummy, region.base());
  EXPECT_EQ(kSize, region.size());
  EXPECT_EQ(dummy + kSize, region.end());
}

namespace {

Address AtOffset(uint8_t* base, intptr_t offset) {
  return reinterpret_cast<Address>(reinterpret_cast<intptr_t>(base) + offset);
}

}  // namespace

TEST(MemoryRegionTest, ContainsAddress) {
  constexpr size_t kSize = 7;
  uint8_t dummy[kSize];
  const MemoryRegion region(dummy, kSize);
  EXPECT_FALSE(region.Contains(AtOffset(dummy, -1)));
  EXPECT_TRUE(region.Contains(dummy));
  EXPECT_TRUE(region.Contains(dummy + kSize - 1));
  EXPECT_FALSE(region.Contains(AtOffset(dummy, kSize)));
}

TEST(MemoryRegionTest, ContainsMemoryRegion) {
  constexpr size_t kSize = 7;
  uint8_t dummy[kSize];
  const MemoryRegion region(dummy, kSize);
  const MemoryRegion contained_region1(dummy, kSize - 1);
  EXPECT_TRUE(region.Contains(contained_region1));
  const MemoryRegion contained_region2(dummy + 1, kSize - 1);
  EXPECT_TRUE(region.Contains(contained_region2));
  const MemoryRegion not_contained_region1(AtOffset(dummy, -1), kSize);
  EXPECT_FALSE(region.Contains(not_contained_region1));
  const MemoryRegion not_contained_region2(AtOffset(dummy, kSize), 1);
  EXPECT_FALSE(region.Contains(not_contained_region2));
}

TEST(PageMemoryTest, Construct) {
  constexpr size_t kOverallSize = 17;
  uint8_t dummy[kOverallSize];
  const MemoryRegion overall_region(dummy, kOverallSize);
  const MemoryRegion writeable_region(dummy + 1, kOverallSize - 2);
  const PageMemory page_memory(overall_region, writeable_region);
  EXPECT_EQ(dummy, page_memory.overall_region().base());
  EXPECT_EQ(dummy + kOverallSize, page_memory.overall_region().end());
  EXPECT_EQ(dummy + 1, page_memory.writeable_region().base());
  EXPECT_EQ(dummy + kOverallSize - 1, page_memory.writeable_region().end());
}

#if DEBUG

TEST(PageMemoryDeathTest, ConstructNonContainedRegions) {
  constexpr size_t kOverallSize = 17;
  uint8_t dummy[kOverallSize];
  const MemoryRegion overall_region(dummy, kOverallSize);
  const MemoryRegion writeable_region(dummy + 1, kOverallSize);
  EXPECT_DEATH_IF_SUPPORTED(PageMemory(overall_region, writeable_region), "");
}

#endif  // DEBUG

// See the comment in globals.h when setting |kGuardPageSize| for details.
#if !(defined(V8_TARGET_ARCH_ARM64) && defined(V8_OS_MACOS))
TEST(PageMemoryRegionTest, PlatformUsesGuardPages) {
  // This tests that the testing allocator actually uses protected guard
  // regions.
  v8::base::PageAllocator allocator;
#if defined(V8_HOST_ARCH_PPC64) && !defined(_AIX)
  EXPECT_FALSE(SupportsCommittingGuardPages(allocator));
#elif defined(V8_HOST_ARCH_ARM64) || defined(V8_HOST_ARCH_LOONG64)
  if (allocator.CommitPageSize() == 4096) {
    EXPECT_TRUE(SupportsCommittingGuardPages(allocator));
  } else {
    // Arm64 supports both 16k and 64k OS pages.
    EXPECT_FALSE(SupportsCommittingGuardPages(allocator));
  }
#else  // Regular case.
  EXPECT_TRUE(SupportsCommittingGuardPages(allocator));
#endif
}
#endif  // !(defined(V8_TARGET_ARCH_ARM64) && defined(V8_OS_MACOS))

namespace {

V8_NOINLINE uint8_t access(volatile const uint8_t& u) { return u; }

}  // namespace

TEST(PageBackendDeathTest, ReservationIsFreed) {
  // Full sequence as part of the death test macro as otherwise, the macro
  // may expand to statements that re-purpose the previously freed memory
  // and thus not crash.
  EXPECT_DEATH_IF_SUPPORTED(
      v8::base::PageAllocator allocator; Address base; {
        PageBackend backend(allocator, allocator);
        base = backend.TryAllocateLargePageMemory(1024);
      } access(*base);
      , "");
}

TEST(PageBackendDeathTest, FrontGuardPageAccessCrashes) {
  v8::base::PageAllocator allocator;
  PageBackend backend(allocator, allocator);
  auto* base = backend.TryAllocateNormalPageMemory();
  if (SupportsCommittingGuardPages(allocator)) {
    EXPECT_DEATH_IF_SUPPORTED(access(base[-kGuardPageSize]), "");
  }
}

TEST(PageBackendDeathTest, BackGuardPageAccessCrashes) {
  v8::base::PageAllocator allocator;
  PageBackend backend(allocator, allocator);
  auto* base = backend.TryAllocateNormalPageMemory();
  if (SupportsCommittingGuardPages(allocator)) {
    EXPECT_DEATH_IF_SUPPORTED(access(base[kPageSize - 2 * kGuardPageSize]), "");
  }
}

TEST(PageBackendTreeTest, AddNormalLookupRemove) {
  v8::base::PageAllocator allocator;
  PageBackend backend(allocator, allocator);
  auto* writable_base = backend.TryAllocateNormalPageMemory();
  auto* reserved_base = writable_base - kGuardPageSize;
  auto& tree = backend.get_page_memory_region_tree_for_testing();
  ASSERT_EQ(
      reserved_base,
      tree.Lookup(reserved_base)->GetPageMemory().overall_region().base());
  ASSERT_EQ(reserved_base, tree.Lookup(reserved_base + kPageSize - 1)
                               ->GetPageMemory()
                               .overall_region()
                               .base());
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base - 1));
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base + kPageSize));
  backend.FreeNormalPageMemory(writable_base,
                               FreeMemoryHandling::kDoNotDiscard);
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base));
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base + kPageSize - 1));
}

TEST(PageBackendTreeTest, AddLargeLookupRemove) {
  v8::base::PageAllocator allocator;
  constexpr size_t kLargeSize = 5012;
  const size_t allocated_page_size =
      RoundUp(kLargeSize + 2 * kGuardPageSize, allocator.AllocatePageSize());
  PageBackend backend(allocator, allocator);
  auto* writable_base = backend.TryAllocateLargePageMemory(kLargeSize);
  auto* reserved_base = writable_base - kGuardPageSize;
  auto& tree = backend.get_page_memory_region_tree_for_testing();
  ASSERT_EQ(
      reserved_base,
      tree.Lookup(reserved_base)->GetPageMemory().overall_region().base());
  ASSERT_EQ(reserved_base, tree.Lookup(reserved_base + allocated_page_size - 1)
                               ->GetPageMemory()
                               .overall_region()
                               .base());
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base - 1));
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base + allocated_page_size));
  backend.FreeLargePageMemory(writable_base);
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base));
  ASSERT_EQ(nullptr, tree.Lookup(reserved_base + allocated_page_size - 1));
}

TEST(PageBackendTreeTest, AddLookupRemoveMultiple) {
  v8::base::PageAllocator allocator;
  constexpr size_t kLargeSize = 3127;
  const size_t allocated_page_size =
      RoundUp(kLargeSize + 2 * kGuardPageSize, allocator.AllocatePageSize());

  PageBackend backend(allocator, allocator);
  auto& tree = backend.get_page_memory_region_tree_for_testing();

  auto* writable_normal_base = backend.TryAllocateNormalPageMemory();
  auto* reserved_normal_base = writable_normal_base - kGuardPageSize;
  auto* writable_large_base = backend.TryAllocateLargePageMemory(kLargeSize);
  auto* reserved_large_base = writable_large_base - kGuardPageSize;

  ASSERT_EQ(reserved_normal_base, tree.Lookup(reserved_normal_base)
                                      ->GetPageMemory()
                                      .overall_region()
                                      .base());
  ASSERT_EQ(reserved_normal_base,
            tree.Lookup(reserved_normal_base + kPageSize - 1)
                ->GetPageMemory()
                .overall_region()
                .base());
  ASSERT_EQ(reserved_large_base, tree.Lookup(reserved_large_base)
                                     ->GetPageMemory()
                                     .overall_region()
                                     .base());
  ASSERT_EQ(reserved_large_base,
            tree.Lookup(reserved_large_base + allocated_page_size - 1)
                ->GetPageMemory()
                .overall_region()
                .base());

  backend.FreeNormalPageMemory(writable_normal_base,
                               FreeMemoryHandling::kDoNotDiscard);

  ASSERT_EQ(reserved_large_base, tree.Lookup(reserved_large_base)
                                     ->GetPageMemory()
                                     .overall_region()
                                     .base());
  ASSERT_EQ(reserved_large_base,
            tree.Lookup(reserved_large_base + allocated_page_size - 1)
                ->GetPageMemory()
                .overall_region()
                .base());

  backend.FreeLargePageMemory(writable_large_base);

  ASSERT_EQ(nullptr, tree.Lookup(reserved_large_base));
  ASSERT_EQ(nullptr,
            tree.Lookup(reserved_large_base + allocated_page_size - 1));
}

TEST(PageBackendPoolTest, ConstructorEmpty) {
  v8::base::PageAllocator allocator;
  PageBackend backend(allocator, allocator);
  auto& pool = backend.page_pool();
  EXPECT_EQ(nullptr, pool.Take());
}

TEST(PageBackendPoolTest, AddTake) {
  v8::base::PageAllocator allocator;
  PageBackend backend(allocator, allocator);
  auto& pool = backend.page_pool();
  auto& raw_pool = pool.get_raw_pool_for_testing();

  EXPECT_TRUE(raw_pool.empty());
  auto* writable_base1 = backend.TryAllocateNormalPageMemory();
  EXPECT_TRUE(raw_pool.empty());

  backend.FreeNormalPageMemory(writable_base1,
                               FreeMemoryHandling::kDoNotDiscard);
  EXPECT_FALSE(raw_pool.empty());
  EXPECT_TRUE(raw_pool[0].region);
  EXPECT_EQ(raw_pool[0].region->GetPageMemory().writeable_region().base(),
            writable_base1);

  auto* writable_base2 = backend.TryAllocateNormalPageMemory();
  EXPECT_TRUE(raw_pool.empty());
  EXPECT_EQ(writable_base1, writable_base2);
}

namespace {
void AddTakeWithDiscardInBetween(bool decommit_pooled_pages) {
  v8::base::PageAllocator allocator;
  PageBackend backend(allocator, allocator);
  auto& pool =