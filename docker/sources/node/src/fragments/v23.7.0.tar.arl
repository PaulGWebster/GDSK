# Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests that out-of-bounds stores to a Uint8ClampedArray that are aliased to out-of-bounds loads don't crash.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS foo(array, 100000000, 42) is undefined
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/dfg-uint8clampedarray-out-of-bounds-put-by-val-alias.js             0000664 0000000 0000000 00000003366 14746647661 0030635 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Tests that out-of-bounds stores to a Uint8ClampedArray that are aliased to out-of-bounds loads don't crash."
);

function foo(a, i, v)
{
    var result = a[i];
    a[i] = v;
    return result;
}

for (var i = 0; i < 200; ++i) {
    var array = new Uint8ClampedArray(1);
    shouldBe("foo(array, 100000000, 42)", "" + (void 0));
}
                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/test/webkit/dfg-value-to-int32-with-side-effect-expected.txt                    0000664 0000000 0000000 00000013651 14746647661 0027233 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests that a side-effecting ValueToInt32 only executes once when there is an OSR exit.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS result.length is 2
PASS result[0] is 5
PASS counter is 100
PASS successfullyParsed is true

TEST COMPLETE

                                                                                       node-23.7.0/deps/v8/test/webkit/dfg-value-to-int32-with-side-effect.js                              0000664 0000000 0000000 00000003502 14746647661 0025223 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Tests that a side-effecting ValueToInt32 only executes once when there is an OSR exit."
);

function foo(a, b) {
    var result = a | b.f;
    return [result, a];
}

var counter = 0;
for (var i = 0; i < 100; ++i) {
    var result = foo({valueOf:function() { counter++; return 1; }}, {f:i == 99 ? 5.5 : 5});
    shouldBe("result.length", "2");
    shouldBe("result[0]", "5");
}

shouldBe("counter", "100");
                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/dfg-weak-js-constant-silent-fill-expected.txt                       0000664 0000000 0000000 00000154523 14746647661 0027031 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests that DFG silent spill and fill of WeakJSConstants does not result in nonsense.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS o1.f is 42
PASS o2.f is false
PASS o3.f is false
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/dfg-weak-js-constant-silent-fill.js                                 0000664 0000000 0000000 00000004156 14746647661 0025023 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Tests that DFG silent spill and fill of WeakJSConstants does not result in nonsense."
);

function foo(a, b, c, d)
{
    a.f = 42; // WeakJSConstants corresponding to the o.f transition get created here.
    var x = !d; // Silent spilling and filling happens here.
    b.f = x; // The WeakJSConstants get reused here.
    var y = !d; // Silent spilling and filling happens here.
    c.f = y; // The WeakJSConstants get reused here.
}

var Empty = "";

for (var i = 0; i < 1000; ++i) {
    var o1 = new Object();
    var o2 = new Object();
    var o3 = new Object();
    eval(Empty + "foo(o1, o2, o3, \"stuff\")");
    shouldBe("o1.f", "42");
    shouldBe("o2.f", "false");
    shouldBe("o3.f", "false");
}
                                                                                                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/dictionary-no-cache-expected.txt                                    0000664 0000000 0000000 00000003624 14746647661 0024476 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test to ensure that we handle caching of prototype chains containing dictionaries.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS foundNewPrototypeProperty is true
PASS foundRemovedPrototypeProperty is false
PASS calledNewPrototypeSetter is true
PASS getTestProperty(test4) is "on prototype"
PASS getTestProperty(test4) is "on self"
PASS getTestProperty(test5) is "on prototype's prototype"
PASS getTestProperty(test5) is "on self"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                            node-23.7.0/deps/v8/test/webkit/dictionary-no-cache.js                                              0000664 0000000 0000000 00000006776 14746647661 0022507 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test to ensure that we handle caching of prototype chains containing dictionaries.");

var Test = function(){};

var methodCount = 65;

for (var i = 0; i < methodCount; i++){
    Test.prototype['myMethod' + i] = function(){};
}

var test1 = new Test();

for (var k in test1);

Test.prototype.myAdditionalMethod = function(){};
var test2 = new Test();
var j = k;
var foundNewPrototypeProperty = false;
for (var k in test2){
    if ("myAdditionalMethod" == k) foundNewPrototypeProperty = true;
}
shouldBeTrue('foundNewPrototypeProperty');

var Test = function(){};
for (var i = 0; i < methodCount; i++){
    Test.prototype['myMethod' + i] = function(){};
}
var test1 = new Test();

for (var k in test1);

delete (Test.prototype)[k]
var test2 = new Test();
var j = k;
var foundRemovedPrototypeProperty = false;
for (var k in test2){
    if (j == k) foundRemovedPrototypeProperty = true;
}
shouldBeFalse("foundRemovedPrototypeProperty");

var Test = function(){};
for (var i = 0; i < methodCount; i++){
    Test.prototype['myMethod' + i] = function(){};
}

function update(test) {
    test.newProperty = true;
}
var test1 = new Test();
update(test1);

var test2 = new Test();
update(test2);

var test3 = new Test();
update(test3);
var calledNewPrototypeSetter = false;
Test.prototype.__defineSetter__("newProperty", function(){ calledNewPrototypeSetter = true; });
var test4 = new Test();
update(test4);
shouldBeTrue('calledNewPrototypeSetter');

var test4 = {__proto__:{prop:"on prototype"}};
for (var i = 0; i < 200; i++)
    test4[i]=[i];

var test5 = {__proto__:{__proto__:{prop:"on prototype's prototype"}}};
for (var i = 0; i < 200; i++)
    test5[i]=[i];

getTestProperty = function(o) {
    return o.prop;
}

getTestProperty(test4);
getTestProperty(test4);
shouldBe("getTestProperty(test4)", '"on prototype"');
test4.prop = "on self";
shouldBe("getTestProperty(test4)", '"on self"');

getTestProperty = function(o) {
    return o.prop;
}

getTestProperty(test5);
getTestProperty(test5);
shouldBe("getTestProperty(test5)", '"on prototype\'s prototype"');
test5.prop = "on self";
shouldBe("getTestProperty(test5)", '"on self"');
  node-23.7.0/deps/v8/test/webkit/dictionary-prototype-caching-expected.txt                           0000664 0000000 0000000 00000003476 14746647661 0026465 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test to ensure correct behaviour of prototype caching with dictionary prototypes

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS protoTest(o) is 'PASS'
PASS protoTest(o) is undefined.
PASS protoKeys is [1,2,3]
PASS protoKeys is [1,2,3]
PASS testFunction(subclass1) is true
PASS testFunction(subclass2) is true
PASS testFunction(subclass2) is true
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/dictionary-prototype-caching.js                                     0000664 0000000 0000000 00000005570 14746647661 0024460 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test to ensure correct behaviour of prototype caching with dictionary prototypes");

function protoTest(o) {
    return o.protoProp;
}

var proto = {protoProp: "PASS", propToRemove: "foo"};
var o = { __proto__: proto };

delete proto.propToRemove;

// Prototype lookup caching will attempt to convert proto back to an ordinary structure
protoTest(o);
protoTest(o);
protoTest(o);
shouldBe("protoTest(o)", "'PASS'");
delete proto.protoProp;
proto.fakeProtoProp = "FAIL";
shouldBeUndefined("protoTest(o)");

function protoTest2(o) {
    return o.b;
}

var proto = {a:1, b:"meh", c:2};
var o = { __proto__: proto };

delete proto.b;
proto.d = 3;
protoTest2(o);
protoTest2(o);
protoTest2(o);
var protoKeys = [];
for (var i in proto)
    protoKeys.push(proto[i]);

shouldBe("protoKeys", "[1,2,3]");

function protoTest3(o) {
    return o.b;
}

var proto = {a:1, b:"meh", c:2};
var o = { __proto__: proto };

delete proto.b;
protoTest2(o);
protoTest2(o);
protoTest2(o);
proto.d = 3;
var protoKeys = [];
for (var i in proto)
    protoKeys.push(proto[i]);

shouldBe("protoKeys", "[1,2,3]");

function testFunction(o) {
    return o.test;
}

var proto = { test: true };
var subclass1 = { __proto__: proto };
var subclass2 = { __proto__: proto };
for (var i = 0; i < 500; i++)
    subclass2["a"+i]="a"+i;

testFunction(subclass1);
shouldBeTrue("testFunction(subclass1)");
shouldBeTrue("testFunction(subclass2)");
proto.test = false
subclass2.test = true;
shouldBeTrue("testFunction(subclass2)");
                                                                                                                                        node-23.7.0/deps/v8/test/webkit/do-while-semicolon-expected.txt                                     0000664 0000000 0000000 00000003322 14746647661 0024347 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks that toString() round-trip on a function that has do..while in JavaScript does not insert extra semicolon.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS ueuf1 is uf1
PASS ueuf2 is uf2
PASS ueuf3 is uf3
PASS ueuf4 is uf4
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/do-while-semicolon.js                                               0000664 0000000 0000000 00000004170 14746647661 0022347 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"This test checks that toString() round-trip on a function that has do..while in JavaScript does not insert extra semicolon."
);

function f1() {
    do {} while(0);
}

function f2() {
    do {} while(0)
}

function f3() {
    do {} while(0)   ;
}

function f4() {
    do {} while(0)  /*empty*/ ;
}



if (typeof uneval == "undefined")
    uneval = function(x) { return '(' + x.toString()+ ')'; }


uf1 = uneval(f1);
ueuf1 = uneval(eval(uneval(f1)));

uf2 = uneval(f2);
ueuf2 = uneval(eval(uneval(f2)));

uf3 = uneval(f3);
ueuf3 = uneval(eval(uneval(f3)));

uf4 = uneval(f4);
ueuf4 = uneval(eval(uneval(f4)));



shouldBe("ueuf1", "uf1");
shouldBe("ueuf2", "uf2");
shouldBe("ueuf3", "uf3");
shouldBe("ueuf4", "uf4");
                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/duplicate-param-crash-expected.txt                                  0000664 0000000 0000000 00000003422 14746647661 0025020 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests to ensure that activations are built correctly in the face of duplicate parameter names and do not cause crashes.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS test1("success")() is "success"
PASS test2("success", "success", "success", "success", "success", "success", "success")() is "success"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/duplicate-param-crash.js                                            0000664 0000000 0000000 00000003570 14746647661 0023022 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'Tests to ensure that activations are built correctly in the face of duplicate parameter names and do not cause crashes.'
);

function test1(a, b, b, b, b, b, b) {
    return function() {
        return a;
    }
}

shouldBe('test1("success")()', '"success"');

function test2(a, a, a, a, a, a, b) {
    return function() {
        return b;
    }
}

shouldBe('test2("success", "success", "success", "success", "success", "success", "success")()', '"success"');
                                                                                                                                        node-23.7.0/deps/v8/test/webkit/duplicate-param-gc-crash-expected.txt                               0000664 0000000 0000000 00000003310 14746647661 0025403 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests to ensure that activations are built correctly in the face of duplicate parameter names and do not cause crashes.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS test1Closure() is "success"
PASS test2Closure() is "success"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/duplicate-param-gc-crash.js                                         0000664 0000000 0000000 00000004641 14746647661 0023411 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'Tests to ensure that activations are built correctly in the face of duplicate parameter names and do not cause crashes.'
);

function gc()
{
    if (this.GCController)
        GCController.collect();
    else
        for (var i = 0; i < 10000; ++i) // Allocate a sufficient number of objects to force a GC.
            ({});
}

function eatRegisters(param)
{
    if (param > 10)
        return;
    eatRegisters(param + 1);
}

function test1(a, b, b, b, b, b, b) {
    return function() {
        return a[0];
    }
}

var test1Closure = test1(["success"]);

var extra = test1("success");
eatRegisters(0);
gc();

shouldBe('test1Closure()', '"success"');

function test2(a, a, a, a, a, a, b) {
    return function() {
        return b[0];
    }
}

var test2Closure = test2("success", "success", "success", "success", "success", "success", ["success"]);
extra =  test2("success", "success", "success", "success", "success", "success", ["success"]);

eatRegisters(0);
gc();

shouldBe('test2Closure()', '"success"');
                                                                                               node-23.7.0/deps/v8/test/webkit/enter-dictionary-indexing-mode-with-blank-indexing-type-expected.txt0000664 0000000 0000000 00000003253 14746647661 0033501 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests that putting an object into dictionary mode when it has a blank indexing type doesn't cause us to crash.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Object.isFrozen(Array.prototype) is true
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/enter-dictionary-indexing-mode-with-blank-indexing-type.js          0000664 0000000 0000000 00000003353 14746647661 0031500 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Tests that putting an object into dictionary mode when it has a blank indexing type doesn't cause us to crash."
);

// Freezing the Array prototype causes us to create ArrayStorage on the prototype, which has a blank indexing type.
Object.freeze(Array.prototype);

shouldBe("Object.isFrozen(Array.prototype)", "true");
                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/equality-expected.txt                                               0000664 0000000 0000000 00000055122 14746647661 0022513 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test for equality of many combinations types.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS 0 == 0 is true
PASS 0 == 1 is false
PASS 0 == 0.1 is false
PASS 0 == 2 is false
PASS 0 == 3 is false
PASS 0 == 4 is false
PASS 0 == 5 is false
PASS 0 == 6 is false
PASS 0 == 7 is false
PASS 0 == -0 is true
PASS 0 == "0" is true
PASS 0 == "1" is false
PASS 0 == "0.1" is false
PASS 0 == "-0" is true
PASS 0 == null is false
PASS 0 == undefined is false
PASS 0 == false is true
PASS 0 == true is false
PASS 0 == new String("0") is true
PASS 0 == new Object is false
PASS 1 == 0 is false
PASS 1 == 1 is true
PASS 1 == 0.1 is false
PASS 1 == 2 is false
PASS 1 == 3 is false
PASS 1 == 4 is false
PASS 1 == 5 is false
PASS 1 == 6 is false
PASS 1 == 7 is false
PASS 1 == -0 is false
PASS 1 == "0" is false
PASS 1 == "1" is true
PASS 1 == "0.1" is false
PASS 1 == "-0" is false
PASS 1 == null is false
PASS 1 == undefined is false
PASS 1 == false is false
PASS 1 == true is true
PASS 1 == new String("0") is false
PASS 1 == new Object is false
PASS 0.1 == 0 is false
PASS 0.1 == 1 is false
PASS 0.1 == 0.1 is true
PASS 0.1 == 2 is false
PASS 0.1 == 3 is false
PASS 0.1 == 4 is false
PASS 0.1 == 5 is false
PASS 0.1 == 6 is false
PASS 0.1 == 7 is false
PASS 0.1 == -0 is false
PASS 0.1 == "0" is false
PASS 0.1 == "1" is false
PASS 0.1 == "0.1" is true
PASS 0.1 == "-0" is false
PASS 0.1 == null is false
PASS 0.1 == undefined is false
PASS 0.1 == false is false
PASS 0.1 == true is false
PASS 0.1 == new String("0") is false
PASS 0.1 == new Object is false
PASS 2 == 0 is false
PASS 2 == 1 is false
PASS 2 == 0.1 is false
PASS 2 == 2 is true
PASS 2 == 3 is false
PASS 2 == 4 is false
PASS 2 == 5 is false
PASS 2 == 6 is false
PASS 2 == 7 is false
PASS 2 == -0 is false
PASS 2 == "0" is false
PASS 2 == "1" is false
PASS 2 == "0.1" is false
PASS 2 == "-0" is false
PASS 2 == null is false
PASS 2 == undefined is false
PASS 2 == false is false
PASS 2 == true is false
PASS 2 == new String("0") is false
PASS 2 == new Object is false
PASS 3 == 0 is false
PASS 3 == 1 is false
PASS 3 == 0.1 is false
PASS 3 == 2 is false
PASS 3 == 3 is true
PASS 3 == 4 is false
PASS 3 == 5 is false
PASS 3 == 6 is false
PASS 3 == 7 is false
PASS 3 == -0 is false
PASS 3 == "0" is false
PASS 3 == "1" is false
PASS 3 == "0.1" is false
PASS 3 == "-0" is false
PASS 3 == null is false
PASS 3 == undefined is false
PASS 3 == false is false
PASS 3 == true is false
PASS 3 == new String("0") is false
PASS 3 == new Object is false
PASS 4 == 0 is false
PASS 4 == 1 is false
PASS 4 == 0.1 is false
PASS 4 == 2 is false
PASS 4 == 3 is false
PASS 4 == 4 is true
PASS 4 == 5 is false
PASS 4 == 6 is false
PASS 4 == 7 is false
PASS 4 == -0 is false
PASS 4 == "0" is false
PASS 4 == "1" is false
PASS 4 == "0.1" is false
PASS 4 == "-0" is false
PASS 4 == null is false
PASS 4 == undefined is false
PASS 4 == false is false
PASS 4 == true is false
PASS 4 == new String("0") is false
PASS 4 == new Object is false
PASS 5 == 0 is false
PASS 5 == 1 is false
PASS 5 == 0.1 is false
PASS 5 == 2 is false
PASS 5 == 3 is false
PASS 5 == 4 is false
PASS 5 == 5 is true
PASS 5 == 6 is false
PASS 5 == 7 is false
PASS 5 == -0 is false
PASS 5 == "0" is false
PASS 5 == "1" is false
PASS 5 == "0.1" is false
PASS 5 == "-0" is false
PASS 5 == null is false
PASS 5 == undefined is false
PASS 5 == false is false
PASS 5 == true is false
PASS 5 == new String("0") is false
PASS 5 == new Object is false
PASS 6 == 0 is false
PASS 6 == 1 is false
PASS 6 == 0.1 is false
PASS 6 == 2 is false
PASS 6 == 3 is false
PASS 6 == 4 is false
PASS 6 == 5 is false
PASS 6 == 6 is true
PASS 6 == 7 is false
PASS 6 == -0 is false
PASS 6 == "0" is false
PASS 6 == "1" is false
PASS 6 == "0.1" is false
PASS 6 == "-0" is false
PASS 6 == null is false
PASS 6 == undefined is false
PASS 6 == false is false
PASS 6 == true is false
PASS 6 == new String("0") is false
PASS 6 == new Object is false
PASS 7 == 0 is false
PASS 7 == 1 is false
PASS 7 == 0.1 is false
PASS 7 == 2 is false
PASS 7 == 3 is false
PASS 7 == 4 is false
PASS 7 == 5 is false
PASS 7 == 6 is false
PASS 7 == 7 is true
PASS 7 == -0 is false
PASS 7 == "0" is false
PASS 7 == "1" is false
PASS 7 == "0.1" is false
PASS 7 == "-0" is false
PASS 7 == null is false
PASS 7 == undefined is false
PASS 7 == false is false
PASS 7 == true is false
PASS 7 == new String("0") is false
PASS 7 == new Object is false
PASS -0 == 0 is true
PASS -0 == 1 is false
PASS -0 == 0.1 is false
PASS -0 == 2 is false
PASS -0 == 3 is false
PASS -0 == 4 is false
PASS -0 == 5 is false
PASS -0 == 6 is false
PASS -0 == 7 is false
PASS -0 == -0 is true
PASS -0 == "0" is true
PASS -0 == "1" is false
PASS -0 == "0.1" is false
PASS -0 == "-0" is true
PASS -0 == null is false
PASS -0 == undefined is false
PASS -0 == false is true
PASS -0 == true is false
PASS -0 == new String("0") is true
PASS -0 == new Object is false
PASS "0" == 0 is true
PASS "0" == 1 is false
PASS "0" == 0.1 is false
PASS "0" == 2 is false
PASS "0" == 3 is false
PASS "0" == 4 is false
PASS "0" == 5 is false
PASS "0" == 6 is false
PASS "0" == 7 is false
PASS "0" == -0 is true
PASS "0" == "0" is true
PASS "0" == "1" is false
PASS "0" == "0.1" is false
PASS "0" == "-0" is false
PASS "0" == null is false
PASS "0" == undefined is false
PASS "0" == false is true
PASS "0" == true is false
PASS "0" == new String("0") is true
PASS "0" == new Object is false
PASS "1" == 0 is false
PASS "1" == 1 is true
PASS "1" == 0.1 is false
PASS "1" == 2 is false
PASS "1" == 3 is false
PASS "1" == 4 is false
PASS "1" == 5 is false
PASS "1" == 6 is false
PASS "1" == 7 is false
PASS "1" == -0 is false
PASS "1" == "0" is false
PASS "1" == "1" is true
PASS "1" == "0.1" is false
PASS "1" == "-0" is false
PASS "1" == null is false
PASS "1" == undefined is false
PASS "1" == false is false
PASS "1" == true is true
PASS "1" == new String("0") is false
PASS "1" == new Object is false
PASS "0.1" == 0 is false
PASS "0.1" == 1 is false
PASS "0.1" == 0.1 is true
PASS "0.1" == 2 is false
PASS "0.1" == 3 is false
PASS "0.1" == 4 is false
PASS "0.1" == 5 is false
PASS "0.1" == 6 is false
PASS "0.1" == 7 is false
PASS "0.1" == -0 is false
PASS "0.1" == "0" is false
PASS "0.1" == "1" is false
PASS "0.1" == "0.1" is true
PASS "0.1" == "-0" is false
PASS "0.1" == null is false
PASS "0.1" == undefined is false
PASS "0.1" == false is false
PASS "0.1" == true is false
PASS "0.1" == new String("0") is false
PASS "0.1" == new Object is false
PASS "-0" == 0 is true
PASS "-0" == 1 is false
PASS "-0" == 0.1 is false
PASS "-0" == 2 is false
PASS "-0" == 3 is false
PASS "-0" == 4 is false
PASS "-0" == 5 is false
PASS "-0" == 6 is false
PASS "-0" == 7 is false
PASS "-0" == -0 is true
PASS "-0" == "0" is false
PASS "-0" == "1" is false
PASS "-0" == "0.1" is false
PASS "-0" == "-0" is true
PASS "-0" == null is false
PASS "-0" == undefined is false
PASS "-0" == false is true
PASS "-0" == true is false
PASS "-0" == new String("0") is false
PASS "-0" == new Object is false
PASS null == 0 is false
PASS null == 1 is false
PASS null == 0.1 is false
PASS null == 2 is false
PASS null == 3 is false
PASS null == 4 is false
PASS null == 5 is false
PASS null == 6 is false
PASS null == 7 is false
PASS null == -0 is false
PASS null == "0" is false
PASS null == "1" is false
PASS null == "0.1" is false
PASS null == "-0" is false
PASS null == null is true
PASS null == undefined is true
PASS null == false is false
PASS null == true is false
PASS null == new String("0") is false
PASS null == new Object is false
PASS undefined == 0 is false
PASS undefined == 1 is false
PASS undefined == 0.1 is false
PASS undefined == 2 is false
PASS undefined == 3 is false
PASS undefined == 4 is false
PASS undefined == 5 is false
PASS undefined == 6 is false
PASS undefined == 7 is false
PASS undefined == -0 is false
PASS undefined == "0" is false
PASS undefined == "1" is false
PASS undefined == "0.1" is false
PASS undefined == "-0" is false
PASS undefined == null is true
PASS undefined == undefined is true
PASS undefined == false is false
PASS undefined == true is false
PASS undefined == new String("0") is false
PASS undefined == new Object is false
PASS false == 0 is true
PASS false == 1 is false
PASS false == 0.1 is false
PASS false == 2 is false
PASS false == 3 is false
PASS false == 4 is false
PASS false == 5 is false
PASS false == 6 is false
PASS false == 7 is false
PASS false == -0 is true
PASS false == "0" is true
PASS false == "1" is false
PASS false == "0.1" is false
PASS false == "-0" is true
PASS false == null is false
PASS false == undefined is false
PASS false == false is true
PASS false == true is false
PASS false == new String("0") is true
PASS false == new Object is false
PASS true == 0 is false
PASS true == 1 is true
PASS true == 0.1 is false
PASS true == 2 is false
PASS true == 3 is false
PASS true == 4 is false
PASS true == 5 is false
PASS true == 6 is false
PASS true == 7 is false
PASS true == -0 is false
PASS true == "0" is false
PASS true == "1" is true
PASS true == "0.1" is false
PASS true == "-0" is false
PASS true == null is false
PASS true == undefined is false
PASS true == false is false
PASS true == true is true
PASS true == new String("0") is false
PASS true == new Object is false
PASS new String("0") == 0 is true
PASS new String("0") == 1 is false
PASS new String("0") == 0.1 is false
PASS new String("0") == 2 is false
PASS new String("0") == 3 is false
PASS new String("0") == 4 is false
PASS new String("0") == 5 is false
PASS new String("0") == 6 is false
PASS new String("0") == 7 is false
PASS new String("0") == -0 is true
PASS new String("0") == "0" is true
PASS new String("0") == "1" is false
PASS new String("0") == "0.1" is false
PASS new String("0") == "-0" is false
PASS new String("0") == null is false
PASS new String("0") == undefined is false
PASS new String("0") == false is true
PASS new String("0") == true is false
PASS new String("0") == new String("0") is false
PASS new String("0") == new Object is false
PASS new Object == 0 is false
PASS new Object == 1 is false
PASS new Object == 0.1 is false
PASS new Object == 2 is false
PASS new Object == 3 is false
PASS new Object == 4 is false
PASS new Object == 5 is false
PASS new Object == 6 is false
PASS new Object == 7 is false
PASS new Object == -0 is false
PASS new Object == "0" is false
PASS new Object == "1" is false
PASS new Object == "0.1" is false
PASS new Object == "-0" is false
PASS new Object == null is false
PASS new Object == undefined is false
PASS new Object == false is false
PASS new Object == true is false
PASS new Object == new String("0") is false
PASS new Object == new Object is false
PASS 0 === 0 is true
PASS 0 === 1 is false
PASS 0 === 0.1 is false
PASS 0 === 2 is false
PASS 0 === 3 is false
PASS 0 === 4 is false
PASS 0 === 5 is false
PASS 0 === 6 is false
PASS 0 === 7 is false
PASS 0 === -0 is true
PASS 0 === "0" is false
PASS 0 === "1" is false
PASS 0 === "0.1" is false
PASS 0 === "-0" is false
PASS 0 === null is false
PASS 0 === undefined is false
PASS 0 === false is false
PASS 0 === true is false
PASS 0 === new String("0") is false
PASS 0 === new Object is false
PASS 1 === 0 is false
PASS 1 === 1 is true
PASS 1 === 0.1 is false
PASS 1 === 2 is false
PASS 1 === 3 is false
PASS 1 === 4 is false
PASS 1 === 5 is false
PASS 1 === 6 is false
PASS 1 === 7 is false
PASS 1 === -0 is false
PASS 1 === "0" is false
PASS 1 === "1" is false
PASS 1 === "0.1" is false
PASS 1 === "-0" is false
PASS 1 === null is false
PASS 1 === undefined is false
PASS 1 === false is false
PASS 1 === true is false
PASS 1 === new String("0") is false
PASS 1 === new Object is false
PASS 0.1 === 0 is false
PASS 0.1 === 1 is false
PASS 0.1 === 0.1 is true
PASS 0.1 === 2 is false
PASS 0.1 === 3 is false
PASS 0.1 === 4 is false
PASS 0.1 === 5 is false
PASS 0.1 === 6 is false
PASS 0.1 === 7 is false
PASS 0.1 === -0 is false
PASS 0.1 === "0" is false
PASS 0.1 === "1" is false
PASS 0.1 === "0.1" is false
PASS 0.1 === "-0" is false
PASS 0.1 === null is false
PASS 0.1 === undefined is false
PASS 0.1 === false is false
PASS 0.1 === true is false
PASS 0.1 === new String("0") is false
PASS 0.1 === new Object is false
PASS 2 === 0 is false
PASS 2 === 1 is false
PASS 2 === 0.1 is false
PASS 2 === 2 is true
PASS 2 === 3 is false
PASS 2 === 4 is false
PASS 2 === 5 is false
PASS 2 === 6 is false
PASS 2 === 7 is false
PASS 2 === -0 is false
PASS 2 === "0" is false
PASS 2 === "1" is false
PASS 2 === "0.1" is false
PASS 2 === "-0" is false
PASS 2 === null is false
PASS 2 === undefined is false
PASS 2 === false is false
PASS 2 === true is false
PASS 2 === new String("0") is false
PASS 2 === new Object is false
PASS 3 === 0 is false
PASS 3 === 1 is false
PASS 3 === 0.1 is false
PASS 3 === 2 is false
PASS 3 === 3 is true
PASS 3 === 4 is false
PASS 3 === 5 is false
PASS 3 === 6 is false
PASS 3 === 7 is false
PASS 3 === -0 is false
PASS 3 === "0" is false
PASS 3 === "1" is false
PASS 3 === "0.1" is false
PASS 3 === "-0" is false
PASS 3 === null is false
PASS 3 === undefined is false
PASS 3 === false is false
PASS 3 === true is false
PASS 3 === new String("0") is false
PASS 3 === new Object is false
PASS 4 === 0 is false
PASS 4 === 1 is false
PASS 4 === 0.1 is false
PASS 4 === 2 is false
PASS 4 === 3 is false
PASS 4 === 4 is true
PASS 4 === 5 is false
PASS 4 === 6 is false
PASS 4 === 7 is false
PASS 4 === -0 is false
PASS 4 === "0" is false
PASS 4 === "1" is false
PASS 4 === "0.1" is false
PASS 4 === "-0" is false
PASS 4 === null is false
PASS 4 === undefined is false
PASS 4 === false is false
PASS 4 === true is false
PASS 4 === new String("0") is false
PASS 4 === new Object is false
PASS 5 === 0 is false
PASS 5 === 1 is false
PASS 5 === 0.1 is false
PASS 5 === 2 is false
PASS 5 === 3 is false
PASS 5 === 4 is false
PASS 5 === 5 is true
PASS 5 === 6 is false
PASS 5 === 7 is false
PASS 5 === -0 is false
PASS 5 === "0" is false
PASS 5 === "1" is false
PASS 5 === "0.1" is false
PASS 5 === "-0" is false
PASS 5 === null is false
PASS 5 === undefined is false
PASS 5 === false is false
PASS 5 === true is false
PASS 5 === new String("0") is false
PASS 5 === new Object is false
PASS 6 === 0 is false
PASS 6 === 1 is false
PASS 6 === 0.1 is false
PASS 6 === 2 is false
PASS 6 === 3 is false
PASS 6 === 4 is false
PASS 6 === 5 is false
PASS 6 === 6 is true
PASS 6 === 7 is false
PASS 6 === -0 is false
PASS 6 === "0" is false
PASS 6 === "1" is false
PASS 6 === "0.1" is false
PASS 6 === "-0" is false
PASS 6 === null is false
PASS 6 === undefined is false
PASS 6 === false is false
PASS 6 === true is false
PASS 6 === new String("0") is false
PASS 6 === new Object is false
PASS 7 === 0 is false
PASS 7 === 1 is false
PASS 7 === 0.1 is false
PASS 7 === 2 is false
PASS 7 === 3 is false
PASS 7 === 4 is false
PASS 7 === 5 is false
PASS 7 === 6 is false
PASS 7 === 7 is true
PASS 7 === -0 is false
PASS 7 === "0" is false
PASS 7 === "1" is false
PASS 7 === "0.1" is false
PASS 7 === "-0" is false
PASS 7 === null is false
PASS 7 === undefined is false
PASS 7 === false is false
PASS 7 === true is false
PASS 7 === new String("0") is false
PASS 7 === new Object is false
PASS -0 === 0 is true
PASS -0 === 1 is false
PASS -0 === 0.1 is false
PASS -0 === 2 is false
PASS -0 === 3 is false
PASS -0 === 4 is false
PASS -0 === 5 is false
PASS -0 === 6 is false
PASS -0 === 7 is false
PASS -0 === -0 is true
PASS -0 === "0" is false
PASS -0 === "1" is false
PASS -0 === "0.1" is false
PASS -0 === "-0" is false
PASS -0 === null is false
PASS -0 === undefined is false
PASS -0 === false is false
PASS -0 === true is false
PASS -0 === new String("0") is false
PASS -0 === new Object is false
PASS "0" === 0 is false
PASS "0" === 1 is false
PASS "0" === 0.1 is false
PASS "0" === 2 is false
PASS "0" === 3 is false
PASS "0" === 4 is false
PASS "0" === 5 is false
PASS "0" === 6 is false
PASS "0" === 7 is false
PASS "0" === -0 is false
PASS "0" === "0" is true
PASS "0" === "1" is false
PASS "0" === "0.1" is false
PASS "0" === "-0" is false
PASS "0" === null is false
PASS "0" === undefined is false
PASS "0" === false is false
PASS "0" === true is false
PASS "0" === new String("0") is false
PASS "0" === new Object is false
PASS "1" === 0 is false
PASS "1" === 1 is false
PASS "1" === 0.1 is false
PASS "1" === 2 is false
PASS "1" === 3 is false
PASS "1" === 4 is false
PASS "1" === 5 is false
PASS "1" === 6 is false
PASS "1" === 7 is false
PASS "1" === -0 is false
PASS "1" === "0" is false
PASS "1" === "1" is true
PASS "1" === "0.1" is false
PASS "1" === "-0" is false
PASS "1" === null is false
PASS "1" === undefined is false
PASS "1" === false is false
PASS "1" === true is false
PASS "1" === new String("0") is false
PASS "1" === new Object is false
PASS "0.1" === 0 is false
PASS "0.1" === 1 is false
PASS "0.1" === 0.1 is false
PASS "0.1" === 2 is false
PASS "0.1" === 3 is false
PASS "0.1" === 4 is false
PASS "0.1" === 5 is false
PASS "0.1" === 6 is false
PASS "0.1" === 7 is false
PASS "0.1" === -0 is false
PASS "0.1" === "0" is false
PASS "0.1" === "1" is false
PASS "0.1" === "0.1" is true
PASS "0.1" === "-0" is false
PASS "0.1" === null is false
PASS "0.1" === undefined is false
PASS "0.1" === false is false
PASS "0.1" === true is false
PASS "0.1" === new String("0") is false
PASS "0.1" === new Object is false
PASS "-0" === 0 is false
PASS "-0" === 1 is false
PASS "-0" === 0.1 is false
PASS "-0" === 2 is false
PASS "-0" === 3 is false
PASS "-0" === 4 is false
PASS "-0" === 5 is false
PASS "-0" === 6 is false
PASS "-0" === 7 is false
PASS "-0" === -0 is false
PASS "-0" === "0" is false
PASS "-0" === "1" is false
PASS "-0" === "0.1" is false
PASS "-0" === "-0" is true
PASS "-0" === null is false
PASS "-0" === undefined is false
PASS "-0" === false is false
PASS "-0" === true is false
PASS "-0" === new String("0") is false
PASS "-0" === new Object is false
PASS null === 0 is false
PASS null === 1 is false
PASS null === 0.1 is false
PASS null === 2 is false
PASS null === 3 is false
PASS null === 4 is false
PASS null === 5 is false
PASS null === 6 is false
PASS null === 7 is false
PASS null === -0 is false
PASS null === "0" is false
PASS null === "1" is false
PASS null === "0.1" is false
PASS null === "-0" is false
PASS null === null is true
PASS null === undefined is false
PASS null === false is false
PASS null === true is false
PASS null === new String("0") is false
PASS null === new Object is false
PASS undefined === 0 is false
PASS undefined === 1 is false
PASS undefined === 0.1 is false
PASS undefined === 2 is false
PASS undefined === 3 is false
PASS undefined === 4 is false
PASS undefined === 5 is false
PASS undefined === 6 is false
PASS undefined === 7 is false
PASS undefined === -0 is false
PASS undefined === "0" is false
PASS undefined === "1" is false
PASS undefined === "0.1" is false
PASS undefined === "-0" is false
PASS undefined === null is false
PASS undefined === undefined is true
PASS undefined === false is false
PASS undefined === true is false
PASS undefined === new String("0") is false
PASS undefined === new Object is false
PASS false === 0 is false
PASS false === 1 is false
PASS false === 0.1 is false
PASS false === 2 is false
PASS false === 3 is false
PASS false === 4 is false
PASS false === 5 is false
PASS false === 6 is false
PASS false === 7 is false
PASS false === -0 is false
PASS false === "0" is false
PASS false === "1" is false
PASS false === "0.1" is false
PASS false === "-0" is false
PASS false === null is false
PASS false === undefined is false
PASS false === false is true
PASS false === true is false
PASS false === new String("0") is false
PASS false === new Object is false
PASS true === 0 is false
PASS true === 1 is false
PASS true === 0.1 is false
PASS true === 2 is false
PASS true === 3 is false
PASS true === 4 is false
PASS true === 5 is false
PASS true === 6 is false
PASS true === 7 is false
PASS true === -0 is false
PASS true === "0" is false
PASS true === "1" is false
PASS true === "0.1" is false
PASS true === "-0" is false
PASS true === null is false
PASS true === undefined is false
PASS true === false is false
PASS true === true is true
PASS true === new String("0") is false
PASS true === new Object is false
PASS new String("0") === 0 is false
PASS new String("0") === 1 is false
PASS new String("0") === 0.1 is false
PASS new String("0") === 2 is false
PASS new String("0") === 3 is false
PASS new String("0") === 4 is false
PASS new String("0") === 5 is false
PASS new String("0") === 6 is false
PASS new String("0") === 7 is false
PASS new String("0") === -0 is false
PASS new String("0") === "0" is false
PASS new String("0") === "1" is false
PASS new String("0") === "0.1" is false
PASS new String("0") === "-0" is false
PASS new String("0") === null is false
PASS new String("0") === undefined is false
PASS new String("0") === false is false
PASS new String("0") === true is false
PASS new String("0") === new String("0") is false
PASS new String("0") === new Object is false
PASS new Object === 0 is false
PASS new Object === 1 is false
PASS new Object === 0.1 is false
PASS new Object === 2 is false
PASS new Object === 3 is false
PASS new Object === 4 is false
PASS new Object === 5 is false
PASS new Object === 6 is false
PASS new Object === 7 is false
PASS new Object === -0 is false
PASS new Object === "0" is false
PASS new Object === "1" is false
PASS new Object === "0.1" is false
PASS new Object === "-0" is false
PASS new Object === null is false
PASS new Object === undefined is false
PASS new Object === false is false
PASS new Object === true is false
PASS new Object === new String("0") is false
PASS new Object === new Object is false
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/equality.js                                                         0000664 0000000 0000000 00000005666 14746647661 0020521 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'Test for equality of many combinations types.'
);

var values = [ '0', '1', '0.1', '2', '3', '4', '5', '6', '7', '-0', '"0"', '"1"', '"0.1"', '"-0"', 'null', 'undefined', 'false', 'true', 'new String("0")', 'new Object' ];

var exceptions = [
    '"-0" == false',
    '"0" == false',
    '"0" == new String("0")',
    '"1" == true',
    '-0 == "-0"',
    '-0 == "0"',
    '-0 == false',
    '-0 == new String("0")',
    '0 == "-0"',
    '0 == "0"',
    '0 == -0',
    '0 == false',
    '0 == new String("0")',
    '0 === -0',
    '0.1 == "0.1"',
    '1 == "1"',
    '1 == true',
    'new Object == new Object',
    'new Object === new Object',
    'new String("0") == false',
    'new String("0") == new String("0")',
    'new String("0") === new String("0")',
    'null == undefined',
];

var exceptionMap = new Object;

var i, j;

for (i = 0; i < exceptions.length; ++i)
    exceptionMap[exceptions[i]] = 1;

for (i = 0; i < values.length; ++i) {
    for (j = 0; j < values.length; ++j) {
        var expression = values[i] + " == " + values[j];
        var reversed = values[j] + " == " + values[i];
        shouldBe(expression, ((i == j) ^ (exceptionMap[expression] || exceptionMap[reversed])) ? "true" : "false");
    }
}

for (i = 0; i < values.length; ++i) {
    for (j = 0; j < values.length; ++j) {
        var expression = values[i] + " === " + values[j];
        var reversed = values[j] + " === " + values[i];
        shouldBe(expression, ((i == j) ^ (exceptionMap[expression] || exceptionMap[reversed])) ? "true" : "false");
    }
}
                                                                          node-23.7.0/deps/v8/test/webkit/eval-and-with-expected.txt                                          0000664 0000000 0000000 00000004267 14746647661 0023322 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test case checks variable resolution in the presence of both eval and with.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS freeVarInsideEvalAndWith({}, "true")() is true
PASS freeVarInsideEvalAndWith({}, "false")() is false
PASS freeVarInsideEvalAndWith({}, "var x = 10; x")() == 10 is true
PASS freeVarInsideEvalAndWith({}, "var x = 10; (function (){return x;})")()() == 10 is true
PASS localVarInsideEvalAndWith({}, "true") is true
PASS localVarInsideEvalAndWith({}, "false") is false
PASS localVarInsideEvalAndWith({}, "var x = true; x") is true
PASS localVarInsideEvalAndWith({}, "var x = 10; (function (){return x;})")() == 10 is true
PASS localVarInsideEvalAndWith(y={x:false}, "var x = true; x && y.x") is true
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/eval-and-with.js                                                    0000664 0000000 0000000 00000004604 14746647661 0021313 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"This test case checks variable resolution in the presence of both eval and with."
);

// Direct non-strict eval inside a with.

function freeVarInsideEvalAndWith(o, str)
{
    with (o)
    {
        return function () { return eval(str); }
    }
}

shouldBeTrue('freeVarInsideEvalAndWith({}, "true")()')
shouldBeFalse('freeVarInsideEvalAndWith({}, "false")()')
shouldBeTrue('freeVarInsideEvalAndWith({}, "var x = 10; x")() == 10')
shouldBeTrue('freeVarInsideEvalAndWith({}, "var x = 10; (function (){return x;})")()() == 10')

function localVarInsideEvalAndWith(o, str)
{
    with (o)
    {
        return eval(str);
    }
}

shouldBeTrue('localVarInsideEvalAndWith({}, "true")')
shouldBeFalse('localVarInsideEvalAndWith({}, "false")')
shouldBeTrue('localVarInsideEvalAndWith({}, "var x = true; x")')
shouldBeTrue('localVarInsideEvalAndWith({}, "var x = 10; (function (){return x;})")() == 10')

var y;
shouldBeTrue('localVarInsideEvalAndWith(y={x:false}, "var x = true; x && y.x")')
                                                                                                                            node-23.7.0/deps/v8/test/webkit/eval-cache-crash-expected.txt                                       0000664 0000000 0000000 00000003231 14746647661 0023736 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test to make sure the eval code cache doesn't crash or give wrong results in odd situations.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS first is 'first'
PASS second is 'second'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/eval-cache-crash.js                                                 0000664 0000000 0000000 00000003332 14746647661 0021736 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Test to make sure the eval code cache doesn't crash or give wrong results in odd situations."
);


var str = "(function () { return a; })";
var a = "first";
var first = eval(str)();
shouldBe("first", "'first'");

with ({a : "second"}) {
    var second = eval(str)();
}

shouldBe("second", "'second'");
                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/eval-throw-return-expected.txt                                      0000664 0000000 0000000 00000004350 14746647661 0024260 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test verifies the result returned by the eval function when exceptions are thrown and caught whithin the contents of the evaluated string.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS eval("1;") is 1
PASS eval("1; try { 2; throwFunc(); } catch (e){3;} finally {}") is 3
PASS eval("1; try { 2; throwFunc(); } catch (e){3;} finally {4;}") is 3
PASS eval("function blah() { 1; }\n blah();") is undefined
PASS eval("var x = 1;") is undefined
PASS eval("if (true) { 1; } else { 2; }") is 1
PASS eval("if (false) { 1; } else { 2; }") is 2
PASS eval("try{1; if (true) { 2; throw \"\"; } else { 2; }} catch(e){}") is undefined
PASS eval("1; var i = 0; do { ++i; 2; } while(i!=1);") is 2
PASS eval("1; twoFunc();") is undefined
PASS eval("1; with ( { a: 0 } ) { 2; }") is 2
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/eval-throw-return.js                                                0000664 0000000 0000000 00000004537 14746647661 0022265 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description('This test verifies the result returned by the eval function when exceptions are thrown and caught whithin the contents of the evaluated string.');

function throwFunc() {
  throw "";
}

function throwOnReturn(){
  1;
  return throwFunc();
}

function twoFunc() {
  2;
}

shouldBe('eval("1;")', "1");
shouldBe('eval("1; try { 2; throwFunc(); } catch (e){3;} finally {}")', "3");
shouldBe('eval("1; try { 2; throwFunc(); } catch (e){3;} finally {4;}")', "3");
shouldBe('eval("function blah() { 1; }\\n blah();")', "undefined");
shouldBe('eval("var x = 1;")', "undefined");
shouldBe('eval("if (true) { 1; } else { 2; }")', "1");
shouldBe('eval("if (false) { 1; } else { 2; }")', "2");
shouldBe('eval("try{1; if (true) { 2; throw \\"\\"; } else { 2; }} catch(e){}")', "undefined");
shouldBe('eval("1; var i = 0; do { ++i; 2; } while(i!=1);")', "2");
shouldBe('eval("1; twoFunc();")', "undefined");
shouldBe('eval("1; with ( { a: 0 } ) { 2; }")', "2");
                                                                                                                                                                 node-23.7.0/deps/v8/test/webkit/eval-var-decl-expected.txt                                          0000664 0000000 0000000 00000003536 14746647661 0023302 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test case checks whether variables cause properties to be defined even before reaching the declaration statement in various cases.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS this.hasOwnProperty("foo") is true
PASS this.hasOwnProperty("bar") is true
PASS firstEvalResult is true
PASS secondEvalResult is false
PASS thirdEvalResult is true
PASS testEvalInCatch() is true
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/eval-var-decl.js                                                    0000664 0000000 0000000 00000005102 14746647661 0021267 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"This test case checks whether variables cause properties to be defined even before reaching the declaration statement in various cases."
);

shouldBeTrue('this.hasOwnProperty("foo")');
var foo = 3;

delete bar;
shouldBeTrue('this.hasOwnProperty("bar")');
var bar = 3;

var firstEvalResult = eval('var result = this.hasOwnProperty("y"); var y = 3; result');
shouldBeTrue("firstEvalResult");

var secondEvalResult = eval('delete x; var result = this.hasOwnProperty("x"); var x = 3; result');
shouldBeFalse("secondEvalResult");

var thirdEvalResult = false;
try {
    thirdEvalResult = (function(){ var x=false; try { throw ""; } catch (e) { eval("var x = true;"); } return x; })();
} catch (e) {
    thirdEvalResult = "Threw exception!";
}
shouldBeTrue("thirdEvalResult");

// Check that the correct this value is passed to a function called having been caught from a throw, where the catch block contains an eval (bug#).
function checkThis()
{
    "use strict";
    return this === undefined;
}
function testEvalInCatch()
{
    try {
        throw checkThis;
    } catch(e) {
        eval('');
        return e();
    }
    return false;
}
shouldBeTrue("testEvalInCatch()");
                                                                                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/exception-for-nonobject-expected.txt                                0000664 0000000 0000000 00000003434 14746647661 0025416 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test for correct handling of exceptions from instanceof and 'new' expressions

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS new {}.undefined threw exception TypeError: {}.undefined is not a constructor.
PASS 1 instanceof {}.undefined threw exception TypeError: Right-hand side of 'instanceof' is not an object.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                    node-23.7.0/deps/v8/test/webkit/exception-for-nonobject.js                                          0000664 0000000 0000000 00000003110 14746647661 0023403 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test for correct handling of exceptions from instanceof and 'new' expressions");

shouldThrow("new {}.undefined");
shouldThrow("1 instanceof {}.undefined");
                                                                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/exception-propagate-from-dfg-to-llint-expected.txt                  0000664 0000000 0000000 00000003233 14746647661 0030067 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Ensures that we pass exceptions to the correct codeblock when throwing from the DFG to the LLInt.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Caught exception in correct codeblock
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/exception-propagate-from-dfg-to-llint.js                            0000664 0000000 0000000 00000014531 14746647661 0026070 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Ensures that we pass exceptions to the correct codeblock when throwing from the DFG to the LLInt.");
var o = {
    toString: function() { if (shouldThrow) throw {}; return ""; }
};

var shouldThrow = false;
function h(o) {
    return String(o);
}

try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}
try { shouldThrow = !shouldThrow; h(o); } catch (e) {}


function g() {
    with({})
        h(o);
}

function f1() {
    try {
        g();
    } catch (e) {
        testFailed("Caught exception in wrong codeblock");
    }
}

function f2() {
    try {
        g();
    } catch (e) {
        testPassed("Caught exception in correct codeblock");
    }
}

f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
f1();
shouldThrow = true;
f2();
var successfullyParsed = true;
                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/exception-try-finally-scope-error-expected.txt                      0000664 0000000 0000000 00000003215 14746647661 0027356 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test makes sure stack unwinding works correctly in combination with dynamically added scopes

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS result is "inner scope"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/exception-try-finally-scope-error.js                                0000664 0000000 0000000 00000004173 14746647661 0025360 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description('This test makes sure stack unwinding works correctly in combination with dynamically added scopes');

function gc()
{
    if (this.GCController)
        GCController.collect();
    else
        for (var i = 0; i < 10000; ++i) // Allocate a sufficient number of objects to force a GC.
            ({});
}

var result;
function runTest() {
    var test = "outer scope";
    with({test:"inner scope"})
       (function () { try { throw ""; } finally { result = test; shouldBe("result", '"inner scope"'); return;}})()
}
runTest();

try{
(function() {
    try {
        throw "";
    } catch(y) {
        throw (function(){});
    } finally {
    }
})()
}catch(r){
}

// Just clobber any temporaries
a=({});
a*=a*a*a;

gc();
                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/exception-with-handler-inside-eval-with-dynamic-scope-expected.txt  0000664 0000000 0000000 00000003716 14746647661 0033142 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test makes sure stack unwinding works correctly when it occurs inside an eval contained in a dynamic scope.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS result is "inner scope"
PASS result is "inner scope"
PASS result is "innermost scope"
PASS result is "innermost scope"
PASS result is "inner scope"
PASS result is "inner scope"
PASS result is "inner scope"
PASS result is "innermost scope"
PASS result is "innermost scope"
PASS result is "outer scope"
PASS result is "outer scope"
PASS successfullyParsed is true

TEST COMPLETE

                                                  node-23.7.0/deps/v8/test/webkit/exception-with-handler-inside-eval-with-dynamic-scope.js            0000664 0000000 0000000 00000006333 14746647661 0031136 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description('This test makes sure stack unwinding works correctly when it occurs inside an eval contained in a dynamic scope.');
var result;
function runTest() {
    var test = "outer scope";
    with({test:"inner scope"}) {
        eval("try { throw ''; } catch (e) { result = test; shouldBe('result', '\"inner scope\"'); }");
        result = null;
        eval("try { with({test:'innermost scope'}) throw ''; } catch (e) { result = test; shouldBe('result', '\"inner scope\"'); }");
        result = null;
        eval("with ({test:'innermost scope'}) try { throw ''; } catch (e) { result = test; shouldBe('result', '\"innermost scope\"'); }");
        result = null;
        with ({test:'innermost scope'}) eval("try { throw ''; } catch (e) { result = test; shouldBe('result', '\"innermost scope\"'); }");
        result = null;
        try {
            eval("try { throw ''; } finally { result = test; shouldBe('result', '\"inner scope\"'); result = null; undeclared; }");
        } catch(e) {
            result = test;
            shouldBe('result', '"inner scope"');
            result = null;
            eval("try { with({test:'innermost scope'}) throw ''; } catch (e) { result = test; shouldBe('result', '\"inner scope\"'); }");
            result = null;
            eval("with ({test:'innermost scope'}) try { throw ''; } catch (e) { result = test; shouldBe('result', '\"innermost scope\"'); }");
            result = null;
            with ({test:'innermost scope'}) eval("try { throw ''; } catch (e) { result = test; shouldBe('result', '\"innermost scope\"'); }");
        }
    }
    result = test;
    eval("try { throw ''; } catch (e) { result = test; shouldBe('result', '\"outer scope\"'); }");
    eval("result = test");
    eval("try { throw ''; } catch (e) { result = test; shouldBe('result', '\"outer scope\"'); }");
}
runTest();
                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/                                                               0000775 0000000 0000000 00000000000 14746647661 0017246 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/                                                            0000775 0000000 0000000 00000000000 14746647661 0017662 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/JSON-parse-reviver-expected.txt                             0000664 0000000 0000000 00000013301 14746647661 0025561 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test behaviour of JSON reviver function.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".



Ensure the holder for our array is indeed an array
PASS Array.isArray(currentHolder) is true
PASS currentHolder.length is 5

Ensure that the holder already has all the properties present at the start of filtering
PASS currentHolder[0] is "a value"
PASS currentHolder[1] is "another value"
PASS currentHolder[2] is "and another value"
PASS currentHolder[3] is "to delete"
PASS currentHolder[4] is "extra value"

Ensure the holder for our array is indeed an array
PASS Array.isArray(currentHolder) is true
PASS currentHolder.length is 5

Ensure that we always get the same holder
PASS currentHolder is lastHolder

Ensure that returning undefined has removed the property 0 from the holder during filtering.
PASS currentHolder.hasOwnProperty(0) is false

Ensure the holder for our array is indeed an array
PASS Array.isArray(currentHolder) is true
PASS currentHolder.length is 5

Ensure that we always get the same holder
PASS currentHolder is lastHolder

Ensure that changing the value of a property is reflected while filtering.
PASS currentHolder[2] is "a replaced value"

Ensure that the changed value is reflected in the arguments passed to the reviver
PASS value is currentHolder[2]

Ensure the holder for our array is indeed an array
PASS Array.isArray(currentHolder) is true
PASS currentHolder.length is 5

Ensure that we always get the same holder
PASS currentHolder is lastHolder

Ensure that we visited a value that we have deleted, and that deletion is reflected while filtering.
PASS currentHolder.hasOwnProperty(3) is false

Ensure that when visiting a deleted property value is undefined
PASS value is undefined.

Ensure the holder for our array is indeed an array
PASS Array.isArray(currentHolder) is true
PASS currentHolder.length is 4

Ensure that we always get the same holder
PASS currentHolder is lastHolder
PASS Ensured that property was visited despite Array length being reduced.
PASS value is undefined.

Ensure that we created the root holder as specified in ES5
PASS '' in lastHolder is true
PASS result is lastHolder['']

Ensure that a deleted value is revived if the reviver function returns a value
PASS result.hasOwnProperty(3) is true

Test behaviour of revivor used in conjunction with an object
PASS currentHolder != globalObject is true

Ensure that the holder already has all the properties present at the start of filtering
PASS currentHolder['a property'] is "a value"
PASS currentHolder['another property'] is "another value"
PASS currentHolder['and another property'] is "and another value"
PASS currentHolder['to delete'] is "will be deleted"
PASS currentHolder != globalObject is true

Ensure that we get the same holder object for each property
PASS currentHolder is lastHolder

Ensure that returning undefined has correctly removed the property 'a property' from the holder object
PASS currentHolder.hasOwnProperty('a property') is false
PASS currentHolder != globalObject is true

Ensure that we get the same holder object for each property
PASS currentHolder is lastHolder
Ensure that changing the value of a property is reflected while filtering.
PASS currentHolder['and another property'] is "a replaced value"

Ensure that the changed value is reflected in the arguments passed to the reviver
PASS value is "a replaced value"
PASS currentHolder != globalObject is true

Ensure that we get the same holder object for each property
PASS currentHolder is lastHolder

Ensure that we visited a value that we have deleted, and that deletion is reflected while filtering.
PASS currentHolder.hasOwnProperty('to delete') is false

Ensure that when visiting a deleted property value is undefined
PASS value is undefined.

Ensure that we created the root holder as specified in ES5
PASS lastHolder.hasOwnProperty('') is true
PASS result.hasOwnProperty('a property') is false
PASS result.hasOwnProperty('to delete') is true
PASS result is lastHolder['']

Test behaviour of revivor that introduces a cycle
PASS JSON.parse("[0,1]", reviveAddsCycle) threw exception RangeError: Maximum call stack size exceeded.

Test behaviour of revivor that introduces a new array classed object (the result of a regex)
PASS JSON.stringify(JSON.parse("[0,1]", reviveIntroducesNewArrayLikeObject)) is '[0,["a","a"]]'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/JSON-parse-reviver.js                                       0000664 0000000 0000000 00000020367 14746647661 0023571 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test behaviour of JSON reviver function.")
if (!Array.isArray)
    Array.isArray = function(o) { return o.constructor === Array; }

function arrayReviver(i,v) {
    if (i != "") {
        currentHolder = this;
        debug("");
        debug("Ensure the holder for our array is indeed an array");
        shouldBeTrue("Array.isArray(currentHolder)");
        shouldBe("currentHolder.length", "" + expectedLength);
        if (i > 0) {
            debug("");
            debug("Ensure that we always get the same holder");
            shouldBe("currentHolder", "lastHolder");
        }
        switch (Number(i)) {
        case 0:
            v = undefined;
            debug("");
            debug("Ensure that the holder already has all the properties present at the start of filtering");
            shouldBe("currentHolder[0]", '"a value"');
            shouldBe("currentHolder[1]", '"another value"');
            shouldBe("currentHolder[2]", '"and another value"');
            shouldBe("currentHolder[3]", '"to delete"');
            shouldBe("currentHolder[4]", '"extra value"');
            break;

        case 1:
            debug("");
            debug("Ensure that returning undefined has removed the property 0 from the holder during filtering.");
            shouldBeFalse("currentHolder.hasOwnProperty(0)");
            currentHolder[2] = "a replaced value";
            break;

        case 2:
            debug("");
            debug("Ensure that changing the value of a property is reflected while filtering.")
            shouldBe("currentHolder[2]", '"a replaced value"');
            value = v;
            debug("");
            debug("Ensure that the changed value is reflected in the arguments passed to the reviver");
            shouldBe("value", "currentHolder[2]");
            delete this[3];
            break;

        case 3:
            debug("");
            debug("Ensure that we visited a value that we have deleted, and that deletion is reflected while filtering.");
            shouldBeFalse("currentHolder.hasOwnProperty(3)");
            value = v;
            debug("");
            debug("Ensure that when visiting a deleted property value is undefined");
            shouldBeUndefined("value");
            this.length = 3;
            v = "undelete the property";
            expectedLength = 4;
            break;

        case 4:
            if (this.length != 4) {
                testFailed("Did not call reviver for deleted property");
                expectedLength = this.length = 3;
                break;
            }

        case 5:
            testPassed("Ensured that property was visited despite Array length being reduced.");
            value = v;
            shouldBeUndefined("value");
            this[10] = "fail";
            break;

        default:
            testFailed("Visited unexpected property " + i + " with value " + v);
        }
    }
    lastHolder = this;
    return v;
}
expectedLength = 5;
var result = JSON.parse('["a value", "another value", "and another value", "to delete", "extra value"]', arrayReviver);
debug("");
debug("Ensure that we created the root holder as specified in ES5");
shouldBeTrue("'' in lastHolder");
shouldBe("result", "lastHolder['']");
debug("");
debug("Ensure that a deleted value is revived if the reviver function returns a value");
shouldBeTrue("result.hasOwnProperty(3)");

function objectReviver(i,v) {
    if (i != "") {
        currentHolder = this;
        shouldBeTrue("currentHolder != globalObject");
        if (seen) {
            debug("");
            debug("Ensure that we get the same holder object for each property");
            shouldBe("currentHolder", "lastHolder");
        }
        seen = true;
        switch (i) {
        case "a property":
            v = undefined;
            debug("");
            debug("Ensure that the holder already has all the properties present at the start of filtering");
            shouldBe("currentHolder['a property']", '"a value"');
            shouldBe("currentHolder['another property']", '"another value"');
            shouldBe("currentHolder['and another property']", '"and another value"');
            shouldBe("currentHolder['to delete']", '"will be deleted"');
            break;

        case "another property":
            debug("");
            debug("Ensure that returning undefined has correctly removed the property 'a property' from the holder object");
            shouldBeFalse("currentHolder.hasOwnProperty('a property')");
            currentHolder['and another property'] = "a replaced value";
            break;

        case "and another property":
            debug("Ensure that changing the value of a property is reflected while filtering.");
            shouldBe("currentHolder['and another property']", '"a replaced value"');
            value = v;
            debug("");
            debug("Ensure that the changed value is reflected in the arguments passed to the reviver");
            shouldBe("value", '"a replaced value"');
            delete this["to delete"];
            break;

        case "to delete":
            debug("");
            debug("Ensure that we visited a value that we have deleted, and that deletion is reflected while filtering.");
            shouldBeFalse("currentHolder.hasOwnProperty('to delete')");
            value = v;
            debug("");
            debug("Ensure that when visiting a deleted property value is undefined");
            shouldBeUndefined("value");
            v = "undelete the property";
            this["new property"] = "fail";
            break;
        default:
            testFailed("Visited unexpected property " + i + " with value " + v);
        }
    }
    lastHolder = this;
    return v;
}

debug("");
debug("Test behaviour of revivor used in conjunction with an object");
var seen = false;
var globalObject = this;
var result = JSON.parse('{"a property" : "a value", "another property" : "another value", "and another property" : "and another value", "to delete" : "will be deleted"}', objectReviver);
debug("");
debug("Ensure that we created the root holder as specified in ES5");
shouldBeTrue("lastHolder.hasOwnProperty('')");
shouldBeFalse("result.hasOwnProperty('a property')");
shouldBeTrue("result.hasOwnProperty('to delete')");
shouldBe("result", "lastHolder['']");

debug("");
debug("Test behaviour of revivor that introduces a cycle");
function reviveAddsCycle(i, v) {
    if (i == 0)
        this[1] = this;
    return v;
}

shouldThrow('JSON.parse("[0,1]", reviveAddsCycle)');

debug("");
debug("Test behaviour of revivor that introduces a new array classed object (the result of a regex)");
var createdBadness = false;
function reviveIntroducesNewArrayLikeObject(i, v) {
    if (i == 0 && !createdBadness) {
        this[1] = /(a)+/.exec("a");
        createdBadness = true;
    }
    return v;
}

shouldBe('JSON.stringify(JSON.parse("[0,1]", reviveIntroducesNewArrayLikeObject))', '\'[0,["a","a"]]\'');
                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/Object-defineProperty-expected.txt                          0000664 0000000 0000000 00000052477 14746647661 0026444 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test to ensure correct behaviour of Object.defineProperty

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {}), 'foo')) is JSON.stringify({writable: false, enumerable: false, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {get:undefined}), 'foo')) is JSON.stringify({enumerable: false, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, writable: false}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, writable: true}), 'foo')) is JSON.stringify({value: 1, writable: true, enumerable: false, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, enumerable: false}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, enumerable: true}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: true, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, configurable: false}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, configurable: true}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: false, configurable: true})
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty([1,2,3], 'foo', {value:1, configurable: true}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: false, configurable: true})
PASS Object.getOwnPropertyDescriptor(Object.defineProperty([1,2,3], '1', {value:'foo', configurable: true}), '1').value is 'foo'
PASS a=[1,2,3], Object.defineProperty(a, '1', {value:'foo', configurable: true}), a[1] is 'foo'
PASS Object.getOwnPropertyDescriptor(Object.defineProperty([1,2,3], '1', {get:getter, configurable: true}), '1').get is getter
PASS Object.defineProperty([1,2,3], '1', {get:getter, configurable: true})[1] threw exception called getter.
PASS Object.defineProperty() threw exception TypeError: Object.defineProperty called on non-object.
PASS Object.defineProperty(null) threw exception TypeError: Object.defineProperty called on non-object.
PASS Object.defineProperty('foo') threw exception TypeError: Object.defineProperty called on non-object.
PASS Object.defineProperty({}) threw exception TypeError: Property description must be an object: undefined.
PASS Object.defineProperty({}, 'foo') threw exception TypeError: Property description must be an object: undefined.
PASS Object.defineProperty({}, 'foo', {get:undefined, value:true}).foo threw exception TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object>.
PASS Object.defineProperty({get foo() { return true; } }, 'foo', {configurable:false}).foo is true
PASS Object.defineProperty(createUnconfigurableProperty({}, 'foo'), 'foo', {configurable: true}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(createUnconfigurableProperty({}, 'foo'), 'foo', {writable: true}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(createUnconfigurableProperty({}, 'foo'), 'foo', {enumerable: true}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(createUnconfigurableProperty({}, 'foo', false, true), 'foo', {enumerable: false}), 'foo' threw exception TypeError: Cannot redefine property: foo.
PASS JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty(createUnconfigurableProperty({}, 'foo', true), 'foo', {writable: false}), 'foo')) is JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})
PASS Object.defineProperty({}, 'foo', {value:1, get: function(){}}) threw exception TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object>.
PASS Object.defineProperty({}, 'foo', {value:1, set: function(){}}) threw exception TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object>.
PASS Object.defineProperty({}, 'foo', {writable:true, get: function(){}}) threw exception TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object>.
PASS Object.defineProperty({}, 'foo', {writable:true, set: function(){}}) threw exception TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object>.
PASS Object.defineProperty({}, 'foo', {get: null}) threw exception TypeError: Getter must be a function: null.
PASS Object.defineProperty({}, 'foo', {set: null}) threw exception TypeError: Setter must be a function: null.
PASS Object.defineProperty({}, 'foo', {set: setter}).foo='test' threw exception called setter.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter}), 'foo', {set: setter1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter}), 'foo', {get: getter1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter}), 'foo', {value: 1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {set: setter1}).foo='test' threw exception called setter1.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {get: getter1}).foo threw exception called getter1.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {value: true}).foo is true
PASS 'foo' in Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {writable: true}) is true
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {writable: true}).foo is undefined.
PASS Object.defineProperty({}, 'foo', {get: getter}).foo threw exception called getter.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter}), 'foo', {get: getter1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter}), 'foo', {set: setter1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {get: getter1}).foo threw exception called getter1.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {set: setter1}).foo='test' threw exception called setter1.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {value: true}).foo is true
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {writable: true}).foo is undefined.
PASS 'foo' in Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {writable: true}) is true
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {set: setter1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true}), 'foo', {set: setter1}).foo='test' threw exception called setter1.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {get: getter1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {set: setter1}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true}), 'foo', {get: getter1}).foo threw exception called getter1.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true}), 'foo', {set: setter1}).foo='test' threw exception called setter1.
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true, writable: false}), 'foo', {value: 2, configurable: true, writable: true}).foo is 2
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true, writable: false}), 'foo', {value: 2, configurable: true, writable: false}).foo is 2
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: false, writable: false}), 'foo', {value: 1, configurable: false, writable: false}).foo is 1
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: true}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: false}).foo is 2
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: false}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: false}).foo is 2
PASS var result = false; var o = Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: true}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: false}); for (x in o) result = true; result is false
PASS var result = false; var o = Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: false}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: true}); for (x in o) result = true; result is true
PASS var o = Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true}); delete o.foo; o.foo is undefined.
PASS var o = Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: false}); delete o.foo; o.foo is 1
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true}), 'foo', {value:2}).foo is 2
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: false}), 'foo', {value:2}).foo threw exception TypeError: Cannot redefine property: foo.
PASS var o = Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true}), 'foo', {value:2}); o.foo = 3; o.foo is 2
PASS Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {value:2, configurable: true}) threw exception TypeError: Cannot redefine property: foo.
PASS Object.defineProperty(Object.defineProperty([], 'foo', {value: 1}), 'foo', {value:2, configurable: true}) threw exception TypeError: Cannot redefine property: foo.
PASS var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo is 42
PASS var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo = 42; o.result; is 42
PASS var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo is undefined
PASS var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo = 42; o.result; is 42
PASS var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo is undefined
PASS var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo = 42; o.result; is 42
PASS var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo is 42
PASS var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo = 42; o.result; is undefined
PASS var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo is 42
PASS var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo = 42; o.result; is undefined
PASS var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo is undefined
PASS var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo = 42; o.result; is undefined
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo is 13
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo = 42; o.result; is 42
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo is undefined
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo = 42; o.result; is 42
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo is 42
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo = 42; o.result; is 13
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo is 42
PASS var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo = 42; o.result; is undefined
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo is 42
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo = 42; o.result; is 42
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo is undefined
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo = 42; o.result; is 42
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo is undefined
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo = 42; o.result; is 42
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo is 42
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo = 42; o.result; threw exception TypeError: Cannot set property foo of #<Object> which has only a getter.
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo is 42
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo = 42; o.result; threw exception TypeError: Cannot set property foo of #<Object> which has only a getter.
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo is undefined
PASS 'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo = 42; o.result; threw exception TypeError: Cannot set property foo of #<Object> which has only a getter.
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo is 13
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo = 42; o.result; is 42
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo is undefined
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo = 42; o.result; is 42
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo is 42
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo = 42; o.result; is 13
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo is 42
PASS 'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo = 42; o.result; threw exception TypeError: Cannot set property foo of #<Object> which has only a getter.
PASS 0 in Object.prototype is true
PASS '0' in Object.prototype is true
PASS var o = {}; o.readOnly = false; o.readOnly is true
PASS 'use strict'; var o = {}; o.readOnly = false; o.readOnly threw exception TypeError: Cannot assign to read only property 'readOnly' of object '#<Object>'.
PASS Object.getOwnPropertyDescriptor(Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return false; }, configurable: true}), 'foo', {value:false}), 'foo').writable is false
PASS Object.getOwnPropertyDescriptor(Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return false; }, configurable: true}), 'foo', {value:false, writable: false}), 'foo').writable is false
PASS Object.getOwnPropertyDescriptor(Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return false; }, configurable: true}), 'foo', {value:false, writable: true}), 'foo').writable is true
PASS var a = Object.defineProperty([], 'length', {writable: false}); a[0] = 42; 0 in a; is false
PASS 'use strict'; var a = Object.defineProperty([], 'length', {writable: false}); a[0] = 42; 0 in a; threw exception TypeError: Cannot assign to read only property 'length' of object '[object Array]'.
PASS var a = Object.defineProperty([42], '0', {writable: false}); a[0] = false; a[0]; is 42
PASS 'use strict'; var a = Object.defineProperty([42], '0', {writable: false}); a[0] = false; a[0]; threw exception TypeError: Cannot assign to read only property '0' of object '[object Array]'.
PASS var a = Object.defineProperty([], '0', {set: undefined}); a[0] = 42; a[0]; is undefined.
PASS 'use strict'; var a = Object.defineProperty([], '0', {set: undefined}); a[0] = 42; a[0]; threw exception TypeError: Cannot set property 0 of [object Array] which has only a getter.
PASS anObj.slot1 is "foo"
PASS anObj.slot2 is "bar"
PASS anObj.propertyIsEnumerable('slot1') is true
PASS anObj.propertyIsEnumerable('slot2') is false
PASS anObj.slot4 is "goo"
PASS anObj.slot5 is 123
PASS anObj._Slot5 is 123
PASS Object.getOwnPropertyDescriptor(anObj, 'slot5') is undefined.
PASS anObj.slot5 is 456
PASS anObj._Slot5 is 123
PASS Object.getOwnPropertyDescriptor(anObj, 'slot5').value is 456
PASS anObj.slot1 is "foo"
PASS anObj.slot2 is "bar"
PASS anObj.propertyIsEnumerable('slot1') is true
PASS anObj.propertyIsEnumerable('slot2') is false
PASS anObj.slot4 is "goo"
PASS anObj.slot5 is 123
PASS anObj._Slot5 is 123
PASS Object.getOwnPropertyDescriptor(anObj, 'slot5') is undefined.
PASS anObj.slot5 is 456
PASS anObj._Slot5 is 123
PASS Object.getOwnPropertyDescriptor(anObj, 'slot5').value is 456
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                 node-23.7.0/deps/v8/test/webkit/fast/js/Object-defineProperty.js                                    0000664 0000000 0000000 00000053766 14746647661 0024444 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test to ensure correct behaviour of Object.defineProperty");

shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {}), 'foo'))",
         "JSON.stringify({writable: false, enumerable: false, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {get:undefined}), 'foo'))",
         "JSON.stringify({enumerable: false, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, writable: false}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, writable: true}), 'foo'))",
         "JSON.stringify({value: 1, writable: true, enumerable: false, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, enumerable: false}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, enumerable: true}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: true, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, configurable: false}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty({}, 'foo', {value:1, configurable: true}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: false, configurable: true})");
shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty([1,2,3], 'foo', {value:1, configurable: true}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: false, configurable: true})");
shouldBe("Object.getOwnPropertyDescriptor(Object.defineProperty([1,2,3], '1', {value:'foo', configurable: true}), '1').value", "'foo'");
shouldBe("a=[1,2,3], Object.defineProperty(a, '1', {value:'foo', configurable: true}), a[1]", "'foo'");
shouldBe("Object.getOwnPropertyDescriptor(Object.defineProperty([1,2,3], '1', {get:getter, configurable: true}), '1').get", "getter");
shouldThrow("Object.defineProperty([1,2,3], '1', {get:getter, configurable: true})[1]", "'called getter'");

shouldThrow("Object.defineProperty()");
shouldThrow("Object.defineProperty(null)");
shouldThrow("Object.defineProperty('foo')");
shouldThrow("Object.defineProperty({})");
shouldThrow("Object.defineProperty({}, 'foo')");
shouldThrow("Object.defineProperty({}, 'foo', {get:undefined, value:true}).foo");
shouldBeTrue("Object.defineProperty({get foo() { return true; } }, 'foo', {configurable:false}).foo");

function createUnconfigurableProperty(o, prop, writable, enumerable) {
    writable = writable || false;
    enumerable = enumerable || false;
    return Object.defineProperty(o, prop, {value:1, configurable:false, writable: writable, enumerable: enumerable});
}
shouldThrow("Object.defineProperty(createUnconfigurableProperty({}, 'foo'), 'foo', {configurable: true})");
shouldThrow("Object.defineProperty(createUnconfigurableProperty({}, 'foo'), 'foo', {writable: true})");
shouldThrow("Object.defineProperty(createUnconfigurableProperty({}, 'foo'), 'foo', {enumerable: true})");
shouldThrow("Object.defineProperty(createUnconfigurableProperty({}, 'foo', false, true), 'foo', {enumerable: false}), 'foo'");

shouldBe("JSON.stringify(Object.getOwnPropertyDescriptor(Object.defineProperty(createUnconfigurableProperty({}, 'foo', true), 'foo', {writable: false}), 'foo'))",
         "JSON.stringify({value: 1, writable: false, enumerable: false, configurable: false})");

shouldThrow("Object.defineProperty({}, 'foo', {value:1, get: function(){}})");
shouldThrow("Object.defineProperty({}, 'foo', {value:1, set: function(){}})");
shouldThrow("Object.defineProperty({}, 'foo', {writable:true, get: function(){}})");
shouldThrow("Object.defineProperty({}, 'foo', {writable:true, set: function(){}})");
shouldThrow("Object.defineProperty({}, 'foo', {get: null})");
shouldThrow("Object.defineProperty({}, 'foo', {set: null})");
function getter(){ throw "called getter"; }
function getter1(){ throw "called getter1"; }
function setter(){ throw "called setter"; }
function setter1(){ throw "called setter1"; }
shouldThrow("Object.defineProperty({}, 'foo', {set: setter}).foo='test'", "'called setter'");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter}), 'foo', {set: setter1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter}), 'foo', {get: getter1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter}), 'foo', {value: 1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {set: setter1}).foo='test'", "'called setter1'");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {get: getter1}).foo", "'called getter1'");
shouldBeTrue("Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {value: true}).foo");
shouldBeTrue("'foo' in Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {writable: true})");
shouldBeUndefined("Object.defineProperty(Object.defineProperty({}, 'foo', {set: setter, configurable: true}), 'foo', {writable: true}).foo");
shouldThrow("Object.defineProperty({}, 'foo', {get: getter}).foo", "'called getter'");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter}), 'foo', {get: getter1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter}), 'foo', {set: setter1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {get: getter1}).foo", "'called getter1'");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {set: setter1}).foo='test'", "'called setter1'");
shouldBeTrue("Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {value: true}).foo");
shouldBeUndefined("Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {writable: true}).foo");
shouldBeTrue("'foo' in Object.defineProperty(Object.defineProperty({}, 'foo', {get: getter, configurable: true}), 'foo', {writable: true})");

shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {set: setter1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true}), 'foo', {set: setter1}).foo='test'", "'called setter1'");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {get: getter1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {set: setter1})");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true}), 'foo', {get: getter1}).foo", "'called getter1'");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true}), 'foo', {set: setter1}).foo='test'", "'called setter1'");

// Should be able to redefine an non-writable property, if it is configurable.
shouldBe("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true, writable: false}), 'foo', {value: 2, configurable: true, writable: true}).foo", "2");
shouldBe("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: true, writable: false}), 'foo', {value: 2, configurable: true, writable: false}).foo", "2");

// Should be able to redefine an non-writable, non-configurable property, with the same value and attributes.
shouldBe("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1, configurable: false, writable: false}), 'foo', {value: 1, configurable: false, writable: false}).foo", "1");

// Should be able to redefine a configurable accessor, with the same or with different attributes.
// Check the accessor function changed.
shouldBe("Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: true}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: false}).foo", "2");
shouldBe("Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: false}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: false}).foo", "2");
// Check the attributes changed.
shouldBeFalse("var result = false; var o = Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: true}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: false}); for (x in o) result = true; result");
shouldBeTrue("var result = false; var o = Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true, enumerable: false}), 'foo', {get: function() { return 2; }, configurable: true, enumerable: true}); for (x in o) result = true; result");

// Should be able to define an non-configurable accessor.
shouldBeUndefined("var o = Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true}); delete o.foo; o.foo");
shouldBe("var o = Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: false}); delete o.foo; o.foo", '1');
shouldBe("Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true}), 'foo', {value:2}).foo", "2");
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: false}), 'foo', {value:2}).foo");

// Defining a data descriptor over an accessor should result in a read only property.
shouldBe("var o = Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return 1; }, configurable: true}), 'foo', {value:2}); o.foo = 3; o.foo", "2");

// Trying to redefine a non-configurable property as configurable should throw.
shouldThrow("Object.defineProperty(Object.defineProperty({}, 'foo', {value: 1}), 'foo', {value:2, configurable: true})");
shouldThrow("Object.defineProperty(Object.defineProperty([], 'foo', {value: 1}), 'foo', {value:2, configurable: true})");

// Test an object with a getter setter.
// Either accessor may be omitted or replaced with undefined, or both may be replaced with undefined.
shouldBe("var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo", '42')
shouldBe("var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo = 42; o.result;", '42');
shouldBe("var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo", 'undefined')
shouldBe("var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo = 42; o.result;", '42');
shouldBe("var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo", 'undefined')
shouldBe("var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo = 42; o.result;", '42');
shouldBe("var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo", '42')
shouldBe("var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo = 42; o.result;", 'undefined');
shouldBe("var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo", '42')
shouldBe("var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo = 42; o.result;", 'undefined');
shouldBe("var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo", 'undefined')
shouldBe("var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo = 42; o.result;", 'undefined');
// Test replacing or removing either the getter or setter individually.
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo", '13')
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo = 42; o.result;", '42')
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo", 'undefined')
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo = 42; o.result;", '42')
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo", '42')
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo = 42; o.result;", '13')
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo", '42')
shouldBe("var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo = 42; o.result;", 'undefined')

// Repeat of the above, in strict mode.
// Either accessor may be omitted or replaced with undefined, or both may be replaced with undefined.
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo", '42')
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}); o.foo = 42; o.result;", '42');
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo", 'undefined')
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:function(x){this.result = x;}}); o.foo = 42; o.result;", '42');
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo", 'undefined')
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {set:function(x){this.result = x;}}); o.foo = 42; o.result;", '42');
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo", '42')
shouldThrow("'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}, set:undefined}); o.foo = 42; o.result;");
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo", '42')
shouldThrow("'use strict'; var o = Object.defineProperty({}, 'foo', {get:function(){return 42;}}); o.foo = 42; o.result;");
shouldBe("'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo", 'undefined')
shouldThrow("'use strict'; var o = Object.defineProperty({}, 'foo', {get:undefined, set:undefined}); o.foo = 42; o.result;");
// Test replacing or removing either the getter or setter individually.
shouldBe("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo", '13')
shouldBe("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:function(){return 13;}}); o.foo = 42; o.result;", '42')
shouldBe("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo", 'undefined')
shouldBe("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {get:undefined}); o.foo = 42; o.result;", '42')
shouldBe("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo", '42')
shouldBe("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:function(){this.result = 13;}}); o.foo = 42; o.result;", '13')
shouldBe("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo", '42')
shouldThrow("'use strict'; var o = Object.defineProperty(Object.defineProperty({foo:1}, 'foo', {get:function(){return 42;}, set:function(x){this.result = x;}}), 'foo', {set:undefined}); o.foo = 42; o.result;")

Object.defineProperty(Object.prototype, 0, {get:function(){ return false; }, configurable:true})
shouldBeTrue("0 in Object.prototype");
shouldBeTrue("'0' in Object.prototype");
delete Object.prototype[0];

Object.defineProperty(Object.prototype, 'readOnly', {value:true, configurable:true, writable:false})
shouldBeTrue("var o = {}; o.readOnly = false; o.readOnly");
shouldThrow("'use strict'; var o = {}; o.readOnly = false; o.readOnly");
delete Object.prototype.readOnly;

// Check the writable attribute is set correctly when redefining an accessor as a data descriptor.
shouldBeFalse("Object.getOwnPropertyDescriptor(Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return false; }, configurable: true}), 'foo', {value:false}), 'foo').writable");
shouldBeFalse("Object.getOwnPropertyDescriptor(Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return false; }, configurable: true}), 'foo', {value:false, writable: false}), 'foo').writable");
shouldBeTrue("Object.getOwnPropertyDescriptor(Object.defineProperty(Object.defineProperty({}, 'foo', {get: function() { return false; }, configurable: true}), 'foo', {value:false, writable: true}), 'foo').writable");

// If array length is read-only, [[Put]] should fail.
shouldBeFalse("var a = Object.defineProperty([], 'length', {writable: false}); a[0] = 42; 0 in a;");
shouldThrow("'use strict'; var a = Object.defineProperty([], 'length', {writable: false}); a[0] = 42; 0 in a;");

// If array property is read-only, [[Put]] should fail.
shouldBe("var a = Object.defineProperty([42], '0', {writable: false}); a[0] = false; a[0];", '42');
shouldThrow("'use strict'; var a = Object.defineProperty([42], '0', {writable: false}); a[0] = false; a[0];");

// If array property is an undefined setter, [[Put]] should fail.
shouldBeUndefined("var a = Object.defineProperty([], '0', {set: undefined}); a[0] = 42; a[0];");
shouldThrow("'use strict'; var a = Object.defineProperty([], '0', {set: undefined}); a[0] = 42; a[0];");

function testObject()
{
    // Test case from https://bugs.webkit.org/show_bug.cgi?id=38636
    Object.defineProperty(anObj, 'slot1', {value: 'foo', enumerable: true});
    Object.defineProperty(anObj, 'slot2', {value: 'bar', writable: true});
    Object.defineProperty(anObj, 'slot3', {value: 'baz', enumerable: false});
    Object.defineProperty(anObj, 'slot4', {value: 'goo', configurable: false});
    shouldBe("anObj.slot1", '"foo"');
    shouldBe("anObj.slot2", '"bar"');
    anObj.slot2 = 'bad value';
    shouldBeTrue("anObj.propertyIsEnumerable('slot1')");
    shouldBeFalse("anObj.propertyIsEnumerable('slot2')");
    delete anObj.slot4;
    shouldBe("anObj.slot4", '"goo"');

    // Test case from https://bugs.webkit.org/show_bug.cgi?id=48911
    Object.defineProperty(Object.getPrototypeOf(anObj), 'slot5', {get: function() { return this._Slot5; }, set: function(v) { this._Slot5 = v; }, configurable: false});
    anObj.slot5 = 123;
    shouldBe("anObj.slot5", '123');
    shouldBe("anObj._Slot5", '123');
    shouldBeUndefined("Object.getOwnPropertyDescriptor(anObj, 'slot5')");
    Object.defineProperty(anObj, 'slot5', { value: 456 });
    shouldBe("anObj.slot5", '456');
    shouldBe("anObj._Slot5", '123');
    shouldBe("Object.getOwnPropertyDescriptor(anObj, 'slot5').value", '456');
}
var anObj = {};
testObject();
var anObj = this;
testObject();
          node-23.7.0/deps/v8/test/webkit/fast/js/Promise-already-rejected-expected.txt                       0000664 0000000 0000000 00000000326 14746647661 0027043 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Resolve or reject do not take effect on a rejected Promise.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is "foo"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/test/webkit/fast/js/Promise-already-rejected.js                                 0000664 0000000 0000000 00000003462 14746647661 0025045 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Resolve or reject do not take effect on a rejected Promise.');

var result;

new Promise(function(resolve, reject) {
  reject('foo');
  resolve('resolve');
  reject('reject');
}).then(function() {
  testFailed('fulfilled');
  finishJSTest();
}, function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'foo');
  finishJSTest();
});
                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/Promise-already-resolved-expected.txt                       0000664 0000000 0000000 00000000326 14746647661 0027101 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Resolve or reject do not take effect on a resolved Promise.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is "foo"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/test/webkit/fast/js/Promise-already-resolved.js                                 0000664 0000000 0000000 00000003614 14746647661 0025102 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Resolve or reject do not take effect on a resolved Promise.');

var result;

new Promise(function(resolve, reject) {
  var anotherResolve;
  resolve(new Promise(function(r) { anotherResolve = r; }));
  resolve('resolve');
  reject('reject');
  anotherResolve('foo');
}).then(function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'foo');
  finishJSTest();
}, function() {
  testFailed('rejected');
  finishJSTest();
});
                                                                                                                    node-23.7.0/deps/v8/test/webkit/fast/js/Promise-catch-expected.txt                                  0000664 0000000 0000000 00000000572 14746647661 0024724 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.prototype.catch.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS thisInInit is undefined
PASS firstPromise instanceof Promise is true
PASS secondPromise instanceof Promise is true
PASS thisInOnFulfilled is undefined
PASS result is "hello"
PASS result is "bye"
PASS fulfilled
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/Promise-catch.js                                            0000664 0000000 0000000 00000004741 14746647661 0022724 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony --ignore-unhandled-promises
'use strict';
description('Test Promise.prototype.catch.');

var reject;
var result;
var thisInInit;
var thisInOnFulfilled;

var firstPromise = new Promise(function(_, newReject) {
  thisInInit = this;
  reject = newReject;
});

var secondPromise = firstPromise.catch(function(localResult) {
  thisInOnFulfilled = this;
  shouldBe('thisInOnFulfilled', 'undefined');
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  return 'bye';
});

secondPromise.then(function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'bye');
  testPassed('fulfilled');
  finishJSTest();
}, function() {
  testFailed('rejected');
  finishJSTest();
});

shouldBe('thisInInit', 'undefined');
shouldBeTrue('firstPromise instanceof Promise');
shouldBeTrue('secondPromise instanceof Promise');

try {
  firstPromise.catch(null);
} catch (e) {
  testFailed('catch(null) should not throw an exception');
}
try {
  firstPromise.catch(37);
} catch (e) {
  testFailed('catch(37) should not throw an exception');
}

reject('hello');
                               node-23.7.0/deps/v8/test/webkit/fast/js/Promise-chained-then-expected.txt                           0000664 0000000 0000000 00000000623 14746647661 0026166 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test chained Promise.prototype.then.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

This should be the first debug output.
PASS fulfilled
PASS result is "hello"
PASS fulfilled
PASS result is "hello2"
PASS rejected
PASS result is "error"
PASS rejected
PASS result is "error2"
PASS fulfilled
PASS result is "recovered"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/Promise-chained-then.js                                     0000664 0000000 0000000 00000005430 14746647661 0024165 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright //     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test chained Promise.prototype.then.');

var resolve;
var promise = new Promise(function (r) {resolve = r;});
var result;

promise.then(function(localResult) {  // fulfilled - continue
  testPassed('fulfilled');
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  return 'hello2';
}, function() {
  testFailed('rrejected');
}).then()  // pass through
.then(function(localResult) {  // fulfilled - throw an exception
  testPassed('fulfilled');
  result = localResult;
  shouldBeEqualToString('result', 'hello2');
  throw 'error';
}, function() {
  testFailed('rejected');
}).then(function() {  // rejected - throw an exception
  testFailed('fulfilled');
}, function(localResult) {
  testPassed('rejected');
  result = localResult;
  shouldBeEqualToString('result', 'error');
  throw 'error2';
}).then() // pass through
.then(function() {  // rejected - recover
  testFailed('fulfilled');
}, function(localResult) {
  testPassed('rejected');
  result = localResult;
  shouldBeEqualToString('result', 'error2');
  return 'recovered';
}).then(function(localResult) {  // fulfilled - the last
  testPassed('fulfilled');
  result = localResult;
  shouldBeEqualToString('result', 'recovered');
  finishJSTest();
}, function() {
  testFailed('rejected');
  finishJSTest();
});

resolve('hello');
debug('This should be the first debug output.');
                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/Promise-exception-expected.txt                              0000664 0000000 0000000 00000000416 14746647661 0025635 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        An exception thrown from an onFulfilled callback should reject the Promise.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS thisInThenCallback is undefined
PASS result is "foobar"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/Promise-exception.js                                        0000664 0000000 0000000 00000003673 14746647661 0023643 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('An exception thrown from an onFulfilled callback should reject the Promise.');

var thisInThenCallback;
var result;

new Promise(function(resolve) {
  resolve('hello');
}).then(function(result) {
  throw 'foobar';
}).then(function(localResult) {
  testFailed('Unexpected invocation of onFulfilled');
}, function(localResult) {
  thisInThenCallback = this;
  shouldBe('thisInThenCallback', 'undefined');
  result = localResult;
  shouldBeEqualToString('result', 'foobar');
  finishJSTest();
});
                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/Promise-init-callback-receiver-expected.txt                 0000664 0000000 0000000 00000000333 14746647661 0030134 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        |this| in Promise constructor should be undefined.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS receiverInStrict is undefined
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/Promise-init-callback-receiver.js                           0000664 0000000 0000000 00000003204 14746647661 0026132 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('|this| in Promise constructor should be undefined.');

var receiverInStrict;
new Promise(function () {
    receiverInStrict = this;
    shouldBe('receiverInStrict', 'undefined');
});
                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/Promise-init-expected.txt                                   0000664 0000000 0000000 00000001250 14746647661 0024577 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise construction.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS promise instanceof Promise is true
PASS promise.constructor is Promise
PASS thisInInit is undefined
PASS resolve instanceof Function is true
PASS reject instanceof Function is true
PASS new Promise() threw exception TypeError: Promise resolver undefined is not a function.
PASS new Promise(37) threw exception TypeError: Promise resolver 37 is not a function.
PASS promise = new Promise(function() { throw Error("foo"); }) did not throw exception.
PASS result.message is "foo"
PASS fulfilled
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/Promise-init.js                                             0000664 0000000 0000000 00000005401 14746647661 0022577 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise construction.');

var thisInInit;
var resolve, reject;
var result;
var promise = new Promise(function(newResolve, newReject) {
  thisInInit = this;
  resolve = newResolve;
  reject = newReject;
});

shouldBeTrue('promise instanceof Promise');
shouldBe('promise.constructor', 'Promise');
shouldBe('thisInInit', 'undefined');
shouldBeTrue('resolve instanceof Function');
shouldBeTrue('reject instanceof Function');

shouldThrow('new Promise()', '"TypeError: Promise resolver undefined is not a function"');
shouldThrow('new Promise(37)', '"TypeError: Promise resolver 37 is not a function"');

try {
  promise = new Promise(function() { throw Error('foo'); });
  testPassed('promise = new Promise(function() { throw Error("foo"); }) did not throw exception.');
} catch (e) {
  testFailed('new Promise(function() { throw Error(\'foo\'); }) should not throw an exception.');
}

promise.then(undefined, function(localResult) {
  result = localResult;
  shouldBeEqualToString('result.message', 'foo');
});

new Promise(function(resolve) {
  resolve("hello");
  throw Error("foo");
}).then(function(localResult) {
  result = localResult;
  testPassed('fulfilled');
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
}, function(localResult) {
  result = localResult;
  testFailed('rejected');
  finishJSTest();
});
                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/Promise-onFulfilled-deep-expected.txt                       0000664 0000000 0000000 00000000333 14746647661 0027013 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether deeply chained then-s work.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is undefined
PASS result is 5042
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/Promise-onFulfilled-deep.js                                 0000664 0000000 0000000 00000003601 14746647661 0025012 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether deeply chained then-s work.');

var result;
var resolve;
var promise = new Promise(function (r) { resolve = r; });

for (var i = 0; i < 5000; ++i) {
  promise = promise.then(function (value) { return value + 1; }, function () { testFailed('rejected'); });
}

promise.then(function (value) {
  result = value;
  shouldBe('result', '5042');
}).then(finishJSTest, finishJSTest);

shouldBe('result', 'undefined');
resolve(42);
                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/Promise-onRejected-deep-expected.txt                        0000664 0000000 0000000 00000000333 14746647661 0026632 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether deeply chained then-s work.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is undefined
PASS result is 5042
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/Promise-onRejected-deep.js                                  0000664 0000000 0000000 00000003630 14746647661 0024633 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether deeply chained then-s work.');

var result;
var reject;
var promise = new Promise(function (_, r) { reject = r; });

for (var i = 0; i < 5000; ++i) {
  promise = promise.then(function (value) { testFailed('fulfilled'); throw value + 1; }, function (value) { throw value + 1; });
}

promise.catch(function (value) {
  result = value;
  shouldBe('result', '5042');
}).then(finishJSTest, finishJSTest);

shouldBe('result', 'undefined');
reject(42);
                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/Promise-reject-expected.txt                                 0000664 0000000 0000000 00000000431 14746647661 0025110 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise rejection.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS promiseState is "pending"
PASS promiseState is "pending"
PASS promiseState is "rejected"
PASS promiseResult is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/Promise-reject.js                                           0000664 0000000 0000000 00000004145 14746647661 0023114 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise rejection.');

var reject;
var promise = new Promise(function(_, r) { reject = r; });
var promiseState = 'pending';
var promiseResult = undefined;
promise.then(function(result) {
  promiseState = 'fulfilled';
  promiseResult = result;
}, function(result) {
  promiseState = 'rejected';
  promiseResult = result;
});

shouldBeEqualToString('promiseState', 'pending');

reject('hello');

shouldBeEqualToString('promiseState', 'pending');

promise.then(function() {
  testFailed('fulfilled.');
  finishJSTest();
}, function() {
  shouldBeEqualToString('promiseState', 'rejected');
  shouldBeEqualToString('promiseResult', 'hello');
  finishJSTest();
});
                                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-chain-expected.txt                          0000664 0000000 0000000 00000000323 14746647661 0026373 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test chained Promise resolutions.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is "hello"
PASS result is "bye"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-chain.js                                    0000664 0000000 0000000 00000004560 14746647661 0024400 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test chained Promise resolutions.');

var resolve1, resolve2, resolve3;
var reject4, resolve5, resolve6;
var result;
var promise1 = new Promise(function(r) { resolve1 = r; });
var promise2 = new Promise(function(r) { resolve2 = r; });
var promise3 = new Promise(function(r) { resolve3 = r; });
var promise4 = new Promise(function(_, r) { reject4 = r; });
var promise5 = new Promise(function(r) { resolve5 = r; });
var promise6 = new Promise(function(r) { resolve6 = r; });

resolve3(promise2);
resolve2(promise1);
resolve6(promise5);
resolve5(promise4);

promise3.then(function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'hello');
}, function() {
  testFailed('rejected');
});

promise6.then(function() {
  testFailed('fulfilled');
  finishJSTest();
}, function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'bye');
  finishJSTest();
});

resolve1('hello');
reject4('bye');
                                                                                                                                                node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-expected.txt                                0000664 0000000 0000000 00000000331 14746647661 0025312 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise resolution.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS thisInOnFulfilled is undefined
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-state-expected.txt                          0000664 0000000 0000000 00000000502 14746647661 0026430 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether Promise processes microtasks in the correct order.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS promiseState is "pending"
PASS promiseState is "pending"
PASS promiseState is "fulfilled"
PASS promiseResult is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-state.js                                    0000664 0000000 0000000 00000004230 14746647661 0024430 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether Promise processes microtasks in the correct order.');

var resolve;
var promise = new Promise(function(r) { resolve = r; });
var promiseState = 'pending';
var promiseResult = undefined;
promise.then(function(result) {
  promiseState = 'fulfilled';
  promiseResult = result;
}, function(result) {
  promiseState = 'rejected';
  promiseResult = result;
});

shouldBeEqualToString('promiseState', 'pending');

resolve('hello');

shouldBeEqualToString('promiseState', 'pending');

promise.then(function() {
  shouldBeEqualToString('promiseState', 'fulfilled');
  shouldBeEqualToString('promiseResult', 'hello');
  finishJSTest();
}, function() {
  testFailed('promise is rejected.');
  finishJSTest();
});
                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-itself-expected.txt                    0000664 0000000 0000000 00000000443 14746647661 0027553 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether Promise will be rejected if it is resolved with itself.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS rejected
PASS result is "TypeError: Chaining cycle detected for promise #<Promise>"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-itself.js                              0000664 0000000 0000000 00000003604 14746647661 0025553 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether Promise will be rejected if it is resolved with itself.');

var resolve;
var result;

var promise = new Promise(function(r) { resolve = r; });
promise.then(function () {
  testFailed('fulfilled');
}, function (error) {
  testPassed('rejected');
  result = error.toString();
  shouldBeEqualToString('result', 'TypeError: Chaining cycle detected for promise #<Promise>');
}).then(finishJSTest, finishJSTest);

resolve(promise);
                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-then-exception-expected.txt            0000664 0000000 0000000 00000000377 14746647661 0031225 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether Promise treats thenable correctly.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

The promise is already rejected now.
PASS rejected
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-then-exception.js                      0000664 0000000 0000000 00000003556 14746647661 0027225 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether Promise treats thenable correctly.');

var callback;
var result;

new Promise(function(resolve) {
  resolve({then: function() { throw 'hello'; }});
}).then(function() {
  testFailed('fulfilled');
  finishJSTest();
}, function(localResult) {
  testPassed('rejected');
  result = localResult
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
});

debug('The promise is already rejected now.');
                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-then-fulfill-expected.txt              0000664 0000000 0000000 00000000460 14746647661 0030655 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether Promise treats thenable correctly.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

The promise is not fulfilled now.
PASS value.then is called.
PASS thisValue is value
PASS fulfilled
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-then-fulfill.js                        0000664 0000000 0000000 00000003777 14746647661 0026671 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether Promise treats thenable correctly.');

var thisValue;
var result;
var value = {
  then: function(onFulfilled) {
    testPassed('value.then is called.');
    thisValue = this;
    shouldBe('thisValue', 'value');
    onFulfilled('hello');
  }
};

new Promise(function(resolve) {
  resolve(value);
}).then(function(localResult) {
  testPassed('fulfilled');
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
}, function() {
  testFailed('rejected');
  finishJSTest();
});

debug('The promise is not fulfilled now.');
 node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-then-reject-expected.txt               0000664 0000000 0000000 00000000456 14746647661 0030501 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether Promise treats thenable correctly.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

The promise is not rejected now.
PASS value.then is called.
PASS thisValue is value
PASS rejected
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve-with-then-reject.js                         0000664 0000000 0000000 00000004011 14746647661 0026466 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether Promise treats thenable correctly.');

var thisValue;
var result;
var value = {
  then: function(onFulfilled, onRejected) {
    testPassed('value.then is called.');
    thisValue = this;
    shouldBe('thisValue', 'value');
    onRejected('hello');
  }
};

new Promise(function(resolve) {
  resolve(value);
}).then(function() {
  testFailed('fulfilled');
  finishJSTest();
}, function(localResult) {
  testPassed('rejected');
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
});

debug('The promise is not rejected now.');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/Promise-resolve.js                                          0000664 0000000 0000000 00000003474 14746647661 0023323 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise resolution.');

var thisInOnFulfilled;
var result;

new Promise(function(resolve) {
  resolve('hello');
}).then(function(localResult) {
  thisInOnFulfilled = this;
  shouldBe('thisInOnFulfilled', 'undefined');
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
}, function() {
  fail('rejected');
  finishJSTest();
});
                                                                                                                                                                                                    node-23.7.0/deps/v8/test/webkit/fast/js/Promise-simple-expected.txt                                 0000664 0000000 0000000 00000000353 14746647661 0025130 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS thisInInit is undefined
PASS thisInOnFulfilled is undefined
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/Promise-simple.js                                           0000664 0000000 0000000 00000003555 14746647661 0023135 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise.');

var resolve;
var thisInInit;
var thisInOnFulfilled;
var result;

new Promise(function(newResolve) {
  thisInInit = this;
  resolve = newResolve;
}).then(function(localResult) {
  thisInOnFulfilled = this;
  shouldBe('thisInOnFulfilled', 'undefined');
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
});

shouldBe('thisInInit', 'undefined');

resolve('hello');
                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-all-expected.txt                             0000664 0000000 0000000 00000001505 14746647661 0025674 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.all

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is undefined
PASS Promise.all() is rejected.
PASS Promise.all([]) is fulfilled.
PASS result.length is 0
PASS Promise.all([p1, p2, p3]) is fulfilled.
PASS result.length is 3
PASS result[0] is "p1"
PASS result[1] is "p2"
PASS result[2] is "p3"
PASS Promise.all([p1, p6, p5]) is rejected.
PASS result is "p6"
PASS Promise.all([p9]) is fulfilled.
PASS result.length is 1
PASS result[0] is "p2"
PASS Promise.all([p9,,,]) is fulfilled.
PASS result.length is 3
PASS result[0] is "p2"
PASS result[1] is undefined
PASS result[2] is undefined
PASS Promise.all([p9,42]) is fulfilled.
PASS result.length is 2
PASS result[0] is "p2"
PASS result[1] is 42
PASS Promise.all({}) is rejected.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-all.js                                       0000664 0000000 0000000 00000011355 14746647661 0023676 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony --ignore-unhandled-promises
'use strict';
description('Test Promise.all');

var result = undefined;

var p1 = new Promise(function(resolve) { resolve('p1'); });
var p2 = new Promise(function(resolve) { resolve('p2'); });
var p3 = new Promise(function(resolve) { resolve('p3'); });
var p4 = new Promise(function() {});
var p5 = new Promise(function() {});
var p6 = new Promise(function(_, reject) { reject('p6'); });
var p7 = new Promise(function(_, reject) { reject('p7'); });
var p8 = new Promise(function(_, reject) { reject('p8'); });
var p9 = new Promise(function(resolve) { resolve(p2); });

Promise.all([p1, p2, p5]).then(function(result) {
  testFailed('Promise.all([p1, p2, p5]) is fulfilled.');
}, function() {
  testFailed('Promise.all([p1, p2, p5]) is rejected.');
});

Promise.all().then(function() {
  testFailed('Promise.all() is fulfilled.');
}, function() {
  testPassed('Promise.all() is rejected.');
  return Promise.all([]).then(function(localResult) {
    testPassed('Promise.all([]) is fulfilled.');
    result = localResult;
    shouldBe('result.length', '0');
  }, function() {
    testFailed('Promise.all([]) is rejected.');
  });
}).then(function() {
  return Promise.all([p1, p2, p3]).then(function(localResult) {
    testPassed('Promise.all([p1, p2, p3]) is fulfilled.');
    result = localResult;
    shouldBe('result.length', '3');
    shouldBeEqualToString('result[0]', 'p1');
    shouldBeEqualToString('result[1]', 'p2');
    shouldBeEqualToString('result[2]', 'p3');
  }, function() {
    testFailed('Promise.all([p1, p2, p3]) is rejected.');
  });
}).then(function() {
  return Promise.all([p1, p6, p5]).then(function(localResult) {
    testFailed('Promise.all([p1, p6, p5]) is fulfilled.');
  }, function(localResult) {
    testPassed('Promise.all([p1, p6, p5]) is rejected.');
    result = localResult;
    shouldBeEqualToString('result', 'p6');
  });
}).then(function() {
  return Promise.all([p9]).then(function(localResult) {
    testPassed('Promise.all([p9]) is fulfilled.');
    result = localResult;
    shouldBe('result.length', '1');
    shouldBeEqualToString('result[0]', 'p2');
  }, function(result) {
    testFailed('Promise.all([p9]) is rejected.');
  });
}).then(function() {
  // Array hole should not be skipped.
  return Promise.all([p9,,,]).then(function(localResult) {
    testPassed('Promise.all([p9,,,]) is fulfilled.');
    result = localResult;
    shouldBe('result.length', '3');
    shouldBeEqualToString('result[0]', 'p2');
    shouldBe('result[1]', 'undefined');
    shouldBe('result[2]', 'undefined');
  }, function(localResult) {
    testFailed('Promise.all([p9,,,]) is rejected.');
  });
}).then(function() {
  // Immediate value should be converted to a promise object by the
  // ToPromise operation.
  return Promise.all([p9,42]).then(function(localResult) {
    testPassed('Promise.all([p9,42]) is fulfilled.');
    result = localResult;
    shouldBe('result.length', '2');
    shouldBeEqualToString('result[0]', 'p2');
    shouldBe('result[1]', '42');
  }, function(localResult) {
    testFailed('Promise.all([p9,42]) is rejected.');
  });
}).then(function() {
  return Promise.all({}).then(function(localResult) {
    testFailed('Promise.all({}) is fulfilled.');
  }, function(localResult) {
    testPassed('Promise.all({}) is rejected.');
  });
}).then(finishJSTest, finishJSTest);

shouldBe('result', 'undefined');
                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-cast-expected.txt                            0000664 0000000 0000000 00000000444 14746647661 0026057 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.resolve as cast

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS promise is value
PASS result is undefined
PASS result2 is undefined
PASS result is "hello"
PASS result2 is 42
PASS fulfilled
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-cast.js                                      0000664 0000000 0000000 00000004223 14746647661 0024054 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise.resolve as cast');

var result = undefined;
var result2 = undefined;

var resolve;
var value = new Promise(function (r) { resolve = r;} );
var promise = Promise.resolve(value);

// If [[IsPromise]] is true, Promise.resolve simply returns argument.
shouldBe('promise', 'value');

promise.then(function(res) {
  result = res;
  shouldBeEqualToString('result', 'hello');

  return Promise.resolve(42).then(function (res) {
      result2 = res;
      shouldBe('result2', '42');
  });
}).then(function () {
  testPassed('fulfilled');
  finishJSTest();
}, function() {
  testFailed('rejected');
  finishJSTest();
});

resolve('hello');
shouldBe('result', 'undefined');
shouldBe('result2', 'undefined');
                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-race-expected.txt                            0000664 0000000 0000000 00000001055 14746647661 0026036 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.race

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is undefined
PASS Promise.race() is rejected.
PASS Promise.race({}) is rejected.
PASS Promise.race([p4, p1, p6]) is fulfilled.
PASS result is "p1"
PASS Promise.race([p4, p6, p1]) is rejected.
PASS result is "p6"
PASS Promise.race([p9]) is fulfilled.
PASS result is "p2"
PASS Promise.race([p4,,]) is fulfilled.
PASS result is undefined
PASS Promise.race([p4,42]) is fulfilled.
PASS result is 42
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-race.js                                      0000664 0000000 0000000 00000010532 14746647661 0024034 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony --ignore-unhandled-promises
'use strict';
description('Test Promise.race');

var result;

var p1 = new Promise(function(resolve) { resolve('p1'); });
var p2 = new Promise(function(resolve) { resolve('p2'); });
var p3 = new Promise(function(resolve) { resolve('p3'); });
var p4 = new Promise(function() {});
var p5 = new Promise(function() {});
var p6 = new Promise(function(_, reject) { reject('p6'); });
var p7 = new Promise(function(_, reject) { reject('p7'); });
var p8 = new Promise(function(_, reject) { reject('p8'); });
var p9 = new Promise(function(resolve) { resolve(p2); });

Promise.race([p4, p5]).then(function(localResult) {
  testFailed('Promise.race([p4, p5]) is fulfilled.');
}, function() {
  testFailed('Promise.race([p4, p5]) is rejected.');
});

// If the argument is an empty array, the result promise won't be fulfilled.
Promise.race([]).then(function(localResult) {
  testFailed('Promise.race([]) is fulfilled.');
}, function() {
  testFailed('Promise.race([]) is rejected.');
});

Promise.race().then(function(localResult) {
  testFailed('Promise.race() is fulfilled.');
}, function() {
  testPassed('Promise.race() is rejected.');
}).then(function() {
  return Promise.race({}).then(function(localResult) {
    testFailed('Promise.race({}) is fulfilled.');
  }, function() {
    testPassed('Promise.race({}) is rejected.');
  });
}).then(function() {
  return Promise.race([p4, p1, p6]).then(function(localResult) {
    testPassed('Promise.race([p4, p1, p6]) is fulfilled.');
    result = localResult;
    shouldBeEqualToString('result', 'p1');
  }, function() {
    testFailed('Promise.race([p4, p1, p6]) is rejected.');
  });
}).then(function() {
  return Promise.race([p4, p6, p1]).then(function(localResult) {
    testFailed('Promise.race([p4, p6, p1]) is fulfilled.');
  }, function(localResult) {
    testPassed('Promise.race([p4, p6, p1]) is rejected.');
    result = localResult;
    shouldBeEqualToString('result', 'p6');
  });
}).then(function() {
  return Promise.race([p9]).then(function(localResult) {
    testPassed('Promise.race([p9]) is fulfilled.');
    result = localResult;
    shouldBeEqualToString('result', 'p2');
  }, function() {
    testFailed('Promise.race([p9]) is rejected.');
  });
}).then(function() {
  // Array hole should not be skipped.
  return Promise.race([p4,,]).then(function(localResult) {
    testPassed('Promise.race([p4,,]) is fulfilled.');
    result = localResult;
    shouldBe('result', 'undefined');
  }, function() {
    testFailed('Promise.race([p4,,]) is rejected.');
  });
}).then(function() {
  // Immediate value should be converted to a promise object by the
  // ToPromise operation.
  return Promise.race([p4,42]).then(function(localResult) {
    testPassed('Promise.race([p4,42]) is fulfilled.');
    result = localResult;
    shouldBe('result', '42');
  }, function() {
    testFailed('Promise.race([p4,42]) is rejected.');
  });
}).then(finishJSTest, finishJSTest);

shouldBe('result', 'undefined');
                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-reject-expected.txt                          0000664 0000000 0000000 00000000311 14746647661 0026372 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.reject

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is undefined
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-reject.js                                    0000664 0000000 0000000 00000003361 14746647661 0024400 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise.reject');

var result = undefined;

Promise.reject('hello').then(function(result) {
  testFailed('fulfilled');
  finishJSTest();
}, function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
});
shouldBe('result', 'undefined');
                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-resolve-expected.txt                         0000664 0000000 0000000 00000000312 14746647661 0026576 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.resolve

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is undefined
PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/Promise-static-resolve.js                                   0000664 0000000 0000000 00000003507 14746647661 0024605 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise.resolve');

var result = undefined;

var resolve;
var promise = Promise.resolve(new Promise(function (r) { resolve = r;} ));

promise.then(function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
}, function() {
  testFailed('rejected');
  finishJSTest();
});

resolve('hello');
shouldBe('result', 'undefined');
                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/Promise-then-callback-receiver-expected.txt                 0000664 0000000 0000000 00000000441 14746647661 0030127 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test whether then callback receivers are correctly set.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS fulfilled
PASS thisInOnFulfilled is undefined
PASS rejected
PASS thisInOnRejected is undefined
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/Promise-then-callback-receiver.js                           0000664 0000000 0000000 00000004064 14746647661 0026132 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test whether then callback receivers are correctly set.');

var thisInOnFulfilled;
var thisInOnRejected;

Promise.resolve().then(function () {
  return Promise.resolve(42).then(function () {
    testPassed('fulfilled');
    thisInOnFulfilled = this;
    shouldBe('thisInOnFulfilled', 'undefined');
  }, function () {
    testFailed('rejected');
  });
}).then(function () {
  return Promise.reject(42).then(function () {
    testFailed('fulfilled');
  }, function () {
    testPassed('rejected');
    thisInOnRejected = this;
    shouldBe('thisInOnRejected', 'undefined');
  });
}).then(finishJSTest, finishJSTest);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/Promise-then-expected.txt                                   0000664 0000000 0000000 00000000642 14746647661 0024576 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Test Promise.prototype.then

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS thisInInit is undefined
PASS firstPromise instanceof Promise is true
PASS secondPromise instanceof Promise is true
PASS thisInOnFulfilled is undefined
PASS result is "hello"
PASS result is "world"
PASS rejected
PASS result is "exception"
PASS resolved
PASS successfullyParsed is true

TEST COMPLETE

                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/Promise-then-without-callbacks-expected.txt                 0000664 0000000 0000000 00000000322 14746647661 0030207 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        Promise.prototype.then should work without callbacks.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".

PASS result is "hello"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/Promise-then-without-callbacks.js                           0000664 0000000 0000000 00000003343 14746647661 0026213 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Promise.prototype.then should work without callbacks.');

var result;
new Promise(function(resolve) { resolve('hello'); }).then(
  // then without callbacks
).then(function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  finishJSTest();
});
                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/Promise-then.js                                             0000664 0000000 0000000 00000004744 14746647661 0022603 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Flags: --harmony
'use strict';
description('Test Promise.prototype.then');

var resolve;
var result;
var thisInOnFulfilled;
var thisInInit;

var firstPromise = new Promise(function(newResolve) {
  thisInInit = this;
  resolve = newResolve;
});

var secondPromise = firstPromise.then(function(localResult) {
  thisInOnFulfilled = this;
  shouldBe('thisInOnFulfilled', 'undefined');
  result = localResult;
  shouldBeEqualToString('result', 'hello');
  return 'world';
});

shouldBe('thisInInit', 'undefined');
shouldBeTrue('firstPromise instanceof Promise');
shouldBeTrue('secondPromise instanceof Promise');

secondPromise.then(undefined, 37).then(function(localResult) {
  result = localResult;
  shouldBeEqualToString('result', 'world');
  throw 'exception'
}).then(1, 2).then(function() {
  testFailed('resolved');
}, function(localResult) {
  testPassed('rejected');
  result = localResult;
  shouldBeEqualToString('result', 'exception');
}).then(function() {
  testPassed('resolved');
  finishJSTest();
}, function() {
  testFailed('rejected');
  finishJSTest();
});

resolve('hello');
                            node-23.7.0/deps/v8/test/webkit/fast/js/arguments-expected.txt                                      0000664 0000000 0000000 00000020067 14746647661 0024234 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test thoroughly checks the behaviour of the 'arguments' object.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS access_1(1, 2, 3) is 1
PASS access_2(1, 2, 3) is 2
PASS access_3(1, 2, 3) is 3
PASS access_4(1, 2, 3) is undefined
PASS access_5(1, 2, 3) is undefined
PASS access_1(1) is 1
PASS access_2(1) is undefined
PASS access_3(1) is undefined
PASS access_4(1) is undefined
PASS access_5(1) is undefined
PASS access_1(1, 2, 3, 4, 5) is 1
PASS access_2(1, 2, 3, 4, 5) is 2
PASS access_3(1, 2, 3, 4, 5) is 3
PASS access_4(1, 2, 3, 4, 5) is 4
PASS access_5(1, 2, 3, 4, 5) is 5
PASS argumentLengthIs5() is 5
PASS argumentLengthIs5(1,2,3,4,5) is 5
PASS argumentLengthIs5(1,2,3,4,5,6,7,8,9,10) is 5
PASS duplicateArgumentAndReturnLast_call(1) is 1
PASS duplicateArgumentAndReturnFirst_call(1) is 1
PASS duplicateArgumentAndReturnLast_apply(1) is 1
PASS duplicateArgumentAndReturnFirst_apply(1) is 1
PASS tear_off_equal_access_1(1, 2, 3) is 1
PASS tear_off_equal_access_2(1, 2, 3) is 2
PASS tear_off_equal_access_3(1, 2, 3) is 3
PASS tear_off_equal_access_4(1, 2, 3) is undefined
PASS tear_off_equal_access_5(1, 2, 3) is undefined
PASS tear_off_too_few_access_1(1) is 1
PASS tear_off_too_few_access_2(1) is undefined
PASS tear_off_too_few_access_3(1) is undefined
PASS tear_off_too_few_access_4(1) is undefined
PASS tear_off_too_few_access_5(1) is undefined
PASS tear_off_too_many_access_1(1, 2, 3, 4, 5) is 1
PASS tear_off_too_many_access_2(1, 2, 3, 4, 5) is 2
PASS tear_off_too_many_access_3(1, 2, 3, 4, 5) is 3
PASS tear_off_too_many_access_4(1, 2, 3, 4, 5) is 4
PASS tear_off_too_many_access_5(1, 2, 3, 4, 5) is 5
PASS live_1(0, 2, 3) is 1
PASS live_2(1, 0, 3) is 2
PASS live_3(1, 2, 0) is 3
PASS live_1(0) is 1
PASS live_2(1) is undefined
PASS live_3(1) is undefined
PASS live_1(0, 2, 3, 4, 5) is 1
PASS live_2(1, 0, 3, 4, 5) is 2
PASS live_3(1, 2, 0, 4, 5) is 3
PASS extra_args_modify_4(1, 2, 3, 0, 5) is 4
PASS extra_args_modify_5(1, 2, 3, 4, 0) is 5
PASS tear_off_live_1(0, 2, 3)() is 1
PASS tear_off_live_2(1, 0, 3)() is 2
PASS tear_off_live_3(1, 2, 0)() is 3
PASS tear_off_live_1(0)() is 1
PASS tear_off_live_2(1)() is undefined
PASS tear_off_live_3(1)() is undefined
PASS tear_off_live_1(0, 2, 3, 4, 5)() is 1
PASS tear_off_live_2(1, 0, 3, 4, 5)() is 2
PASS tear_off_live_3(1, 2, 0, 4, 5)() is 3
PASS tear_off_extra_args_modify_4(1, 2, 3, 0, 5)() is 4
PASS tear_off_extra_args_modify_5(1, 2, 3, 4, 0)() is 5
PASS delete_1(1, 2, 3) is undefined
PASS delete_2(1, 2, 3) is undefined
PASS delete_3(1, 2, 3) is undefined
PASS delete_4(1, 2, 3) is undefined
PASS delete_5(1, 2, 3) is undefined
PASS delete_1(1) is undefined
PASS delete_2(1) is undefined
PASS delete_3(1) is undefined
PASS delete_4(1) is undefined
PASS delete_5(1) is undefined
PASS delete_1(1, 2, 3, 4, 5) is undefined
PASS delete_2(1, 2, 3, 4, 5) is undefined
PASS delete_3(1, 2, 3, 4, 5) is undefined
PASS delete_4(1, 2, 3, 4, 5) is undefined
PASS delete_5(1, 2, 3, 4, 5) is undefined
PASS tear_off_delete_1(1, 2, 3)() is undefined
PASS tear_off_delete_2(1, 2, 3)() is undefined
PASS tear_off_delete_3(1, 2, 3)() is undefined
PASS tear_off_delete_4(1, 2, 3)() is undefined
PASS tear_off_delete_5(1, 2, 3)() is undefined
PASS tear_off_delete_1(1)() is undefined
PASS tear_off_delete_2(1)() is undefined
PASS tear_off_delete_3(1)() is undefined
PASS tear_off_delete_4(1)() is undefined
PASS tear_off_delete_5(1)() is undefined
PASS tear_off_delete_1(1, 2, 3, 4, 5)() is undefined
PASS tear_off_delete_2(1, 2, 3, 4, 5)() is undefined
PASS tear_off_delete_3(1, 2, 3, 4, 5)() is undefined
PASS tear_off_delete_4(1, 2, 3, 4, 5)() is undefined
PASS tear_off_delete_5(1, 2, 3, 4, 5)() is undefined
PASS delete_not_live_1(1, 2, 3) is 1
PASS delete_not_live_2(1, 2, 3) is 2
PASS delete_not_live_3(1, 2, 3) is 3
PASS delete_not_live_1(1) is 1
PASS delete_not_live_2(1) is undefined
PASS delete_not_live_3(1) is undefined
PASS delete_not_live_1(1, 2, 3, 4, 5) is 1
PASS delete_not_live_2(1, 2, 3, 4, 5) is 2
PASS delete_not_live_3(1, 2, 3, 4, 5) is 3
PASS tear_off_delete_not_live_1(1, 2, 3)() is 1
PASS tear_off_delete_not_live_2(1, 2, 3)() is 2
PASS tear_off_delete_not_live_3(1, 2, 3)() is 3
PASS tear_off_delete_not_live_1(1)() is 1
PASS tear_off_delete_not_live_2(1)() is undefined
PASS tear_off_delete_not_live_3(1)() is undefined
PASS tear_off_delete_not_live_1(1, 2, 3, 4, 5)() is 1
PASS tear_off_delete_not_live_2(1, 2, 3, 4, 5)() is 2
PASS tear_off_delete_not_live_3(1, 2, 3, 4, 5)() is 3
PASS access_after_delete_named_2(1, 2, 3) is 2
PASS access_after_delete_named_3(1, 2, 3) is 3
PASS access_after_delete_named_4(1, 2, 3) is undefined
PASS access_after_delete_named_2(1) is undefined
PASS access_after_delete_named_3(1) is undefined
PASS access_after_delete_named_4(1) is undefined
PASS access_after_delete_named_2(1, 2, 3, 4) is 2
PASS access_after_delete_named_3(1, 2, 3, 4) is 3
PASS access_after_delete_named_4(1, 2, 3, 4) is 4
PASS access_after_delete_extra_1(1, 2, 3) is 1
PASS access_after_delete_extra_2(1, 2, 3) is 2
PASS access_after_delete_extra_3(1, 2, 3) is 3
PASS access_after_delete_extra_5(1, 2, 3) is undefined
PASS access_after_delete_extra_1(1) is 1
PASS access_after_delete_extra_2(1) is undefined
PASS access_after_delete_extra_3(1) is undefined
PASS access_after_delete_extra_5(1) is undefined
PASS access_after_delete_extra_1(1, 2, 3, 4, 5) is 1
PASS access_after_delete_extra_2(1, 2, 3, 4, 5) is 2
PASS access_after_delete_extra_3(1, 2, 3, 4, 5) is 3
PASS access_after_delete_extra_5(1, 2, 3, 4, 5) is 5
PASS argumentsParam(true) is true
PASS argumentsFunctionConstructorParam(true) is true
PASS argumentsVarUndefined() is '[object Arguments]'
PASS argumentCalleeInException() is argumentCalleeInException
PASS shadowedArgumentsApply([true]) is true
PASS shadowedArgumentsLength([]) is 0
PASS shadowedArgumentsLength() threw exception TypeError: Cannot read properties of undefined (reading 'length').
PASS shadowedArgumentsCallee([]) is undefined.
PASS shadowedArgumentsIndex([true]) is true
PASS descriptor.value is "one"
PASS descriptor.writable is true
PASS descriptor.enumerable is true
PASS descriptor.configurable is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS true is true
PASS false is false
PASS true is true
PASS false is false
PASS false is false
PASS undefined is undefined.
PASS true is true
PASS false is false
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/arguments.js                                                0000664 0000000 0000000 00000043034 14746647661 0022231 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"This test thoroughly checks the behaviour of the 'arguments' object."
);

function access_1(a, b, c)
{
    return arguments[0];
}

function access_2(a, b, c)
{
    return arguments[1];
}

function access_3(a, b, c)
{
    return arguments[2];
}

function access_4(a, b, c)
{
    return arguments[3];
}

function access_5(a, b, c)
{
    return arguments[4];
}

function argumentLengthIs5() {
    arguments.length = 5;
    return arguments.length;
}

function duplicateArgumentAndReturnLast_call(a) {
    Array.prototype.push.call(arguments, a);
    return arguments[1];
}

function duplicateArgumentAndReturnFirst_call(a) {
    Array.prototype.push.call(arguments, a);
    return arguments[0];
}

function duplicateArgumentAndReturnLast_apply(a) {
    Array.prototype.push.apply(arguments, arguments);
    return arguments[1];
}

function duplicateArgumentAndReturnFirst_apply(a) {
    Array.prototype.push.apply(arguments, arguments);
    return arguments[0];
}

shouldBe("access_1(1, 2, 3)", "1");
shouldBe("access_2(1, 2, 3)", "2");
shouldBe("access_3(1, 2, 3)", "3");
shouldBe("access_4(1, 2, 3)", "undefined");
shouldBe("access_5(1, 2, 3)", "undefined");

shouldBe("access_1(1)", "1");
shouldBe("access_2(1)", "undefined");
shouldBe("access_3(1)", "undefined");
shouldBe("access_4(1)", "undefined");
shouldBe("access_5(1)", "undefined");

shouldBe("access_1(1, 2, 3, 4, 5)", "1");
shouldBe("access_2(1, 2, 3, 4, 5)", "2");
shouldBe("access_3(1, 2, 3, 4, 5)", "3");
shouldBe("access_4(1, 2, 3, 4, 5)", "4");
shouldBe("access_5(1, 2, 3, 4, 5)", "5");

shouldBe("argumentLengthIs5()", "5");
shouldBe("argumentLengthIs5(1,2,3,4,5)", "5");
shouldBe("argumentLengthIs5(1,2,3,4,5,6,7,8,9,10)", "5");
shouldBe("duplicateArgumentAndReturnLast_call(1)", "1");
shouldBe("duplicateArgumentAndReturnFirst_call(1)", "1");
shouldBe("duplicateArgumentAndReturnLast_apply(1)", "1");
shouldBe("duplicateArgumentAndReturnFirst_apply(1)", "1");

function f(a, b, c)
{
    return arguments;
}

function tear_off_equal_access_1(a, b, c)
{
    return f(a, b, c)[0];
}

function tear_off_equal_access_2(a, b, c)
{
    return f(a, b, c)[1];
}

function tear_off_equal_access_3(a, b, c)
{
    return f(a, b, c)[2];
}

function tear_off_equal_access_4(a, b, c)
{
    return f(a, b, c)[3];
}

function tear_off_equal_access_5(a, b, c)
{
    return f(a, b, c)[4];
}

shouldBe("tear_off_equal_access_1(1, 2, 3)", "1");
shouldBe("tear_off_equal_access_2(1, 2, 3)", "2");
shouldBe("tear_off_equal_access_3(1, 2, 3)", "3");
shouldBe("tear_off_equal_access_4(1, 2, 3)", "undefined");
shouldBe("tear_off_equal_access_5(1, 2, 3)", "undefined");

function tear_off_too_few_access_1(a)
{
    return f(a)[0];
}

function tear_off_too_few_access_2(a)
{
    return f(a)[1];
}

function tear_off_too_few_access_3(a)
{
    return f(a)[2];
}

function tear_off_too_few_access_4(a)
{
    return f(a)[3];
}

function tear_off_too_few_access_5(a)
{
    return f(a)[4];
}

shouldBe("tear_off_too_few_access_1(1)", "1");
shouldBe("tear_off_too_few_access_2(1)", "undefined");
shouldBe("tear_off_too_few_access_3(1)", "undefined");
shouldBe("tear_off_too_few_access_4(1)", "undefined");
shouldBe("tear_off_too_few_access_5(1)", "undefined");

function tear_off_too_many_access_1(a, b, c, d, e)
{
    return f(a, b, c, d, e)[0];
}

function tear_off_too_many_access_2(a, b, c, d, e)
{
    return f(a, b, c, d, e)[1];
}

function tear_off_too_many_access_3(a, b, c, d, e)
{
    return f(a, b, c, d, e)[2];
}

function tear_off_too_many_access_4(a, b, c, d, e)
{
    return f(a, b, c, d, e)[3];
}

function tear_off_too_many_access_5(a, b, c, d, e)
{
    return f(a, b, c, d, e)[4];
}

shouldBe("tear_off_too_many_access_1(1, 2, 3, 4, 5)", "1");
shouldBe("tear_off_too_many_access_2(1, 2, 3, 4, 5)", "2");
shouldBe("tear_off_too_many_access_3(1, 2, 3, 4, 5)", "3");
shouldBe("tear_off_too_many_access_4(1, 2, 3, 4, 5)", "4");
shouldBe("tear_off_too_many_access_5(1, 2, 3, 4, 5)", "5");

function live_1(a, b, c)
{
    arguments[0] = 1;
    return a;
}

function live_2(a, b, c)
{
    arguments[1] = 2;
    return b;
}

function live_3(a, b, c)
{
    arguments[2] = 3;
    return c;
}

shouldBe("live_1(0, 2, 3)", "1");
shouldBe("live_2(1, 0, 3)", "2");
shouldBe("live_3(1, 2, 0)", "3");

// Arguments that were not provided are not live
shouldBe("live_1(0)", "1");
shouldBe("live_2(1)", "undefined");
shouldBe("live_3(1)", "undefined");

shouldBe("live_1(0, 2, 3, 4, 5)", "1");
shouldBe("live_2(1, 0, 3, 4, 5)", "2");
shouldBe("live_3(1, 2, 0, 4, 5)", "3");

function extra_args_modify_4(a, b, c)
{
    arguments[3] = 4;
    return arguments[3];
}

function extra_args_modify_5(a, b, c)
{
    arguments[4] = 5;
    return arguments[4];
}

shouldBe("extra_args_modify_4(1, 2, 3, 0, 5)", "4");
shouldBe("extra_args_modify_5(1, 2, 3, 4, 0)", "5");

function tear_off_live_1(a, b, c)
{
    var args = arguments;
    return function()
    {
        args[0] = 1;
        return a;
    };
}

function tear_off_live_2(a, b, c)
{
    var args = arguments;
    return function()
    {
        args[1] = 2;
        return b;
    };
}

function tear_off_live_3(a, b, c)
{
    var args = arguments;
    return function()
    {
        args[2] = 3;
        return c;
    };
}

shouldBe("tear_off_live_1(0, 2, 3)()", "1");
shouldBe("tear_off_live_2(1, 0, 3)()", "2");
shouldBe("tear_off_live_3(1, 2, 0)()", "3");

// Arguments that were not provided are not live
shouldBe("tear_off_live_1(0)()", "1");
shouldBe("tear_off_live_2(1)()", "undefined");
shouldBe("tear_off_live_3(1)()", "undefined");

shouldBe("tear_off_live_1(0, 2, 3, 4, 5)()", "1");
shouldBe("tear_off_live_2(1, 0, 3, 4, 5)()", "2");
shouldBe("tear_off_live_3(1, 2, 0, 4, 5)()", "3");

function tear_off_extra_args_modify_4(a, b, c)
{
    return function()
    {
        arguments[3] = 4;
        return arguments[3];
    }
}

function tear_off_extra_args_modify_5(a, b, c)
{
    return function()
    {
        arguments[4] = 5;
        return arguments[4];
    }
}

shouldBe("tear_off_extra_args_modify_4(1, 2, 3, 0, 5)()", "4");
shouldBe("tear_off_extra_args_modify_5(1, 2, 3, 4, 0)()", "5");

function delete_1(a, b, c)
{
    delete arguments[0];
    return arguments[0];
}

function delete_2(a, b, c)
{
    delete arguments[1];
    return arguments[1];
}

function delete_3(a, b, c)
{
    delete arguments[2];
    return arguments[2];
}

function delete_4(a, b, c)
{
    delete arguments[3];
    return arguments[3];
}

function delete_5(a, b, c)
{
    delete arguments[4];
    return arguments[4];
}

shouldBe("delete_1(1, 2, 3)", "undefined");
shouldBe("delete_2(1, 2, 3)", "undefined");
shouldBe("delete_3(1, 2, 3)", "undefined");
shouldBe("delete_4(1, 2, 3)", "undefined");
shouldBe("delete_5(1, 2, 3)", "undefined");

shouldBe("delete_1(1)", "undefined");
shouldBe("delete_2(1)", "undefined");
shouldBe("delete_3(1)", "undefined");
shouldBe("delete_4(1)", "undefined");
shouldBe("delete_5(1)", "undefined");

shouldBe("delete_1(1, 2, 3, 4, 5)", "undefined");
shouldBe("delete_2(1, 2, 3, 4, 5)", "undefined");
shouldBe("delete_3(1, 2, 3, 4, 5)", "undefined");
shouldBe("delete_4(1, 2, 3, 4, 5)", "undefined");
shouldBe("delete_5(1, 2, 3, 4, 5)", "undefined");

function tear_off_delete_1(a, b, c)
{
    return function()
    {
        delete arguments[0];
        return arguments[0];
    };
}

function tear_off_delete_2(a, b, c)
{
    return function()
    {
        delete arguments[1];
        return arguments[1];
    };
}

function tear_off_delete_3(a, b, c)
{
    return function()
    {
        delete arguments[2];
        return arguments[2];
    };
}

function tear_off_delete_4(a, b, c)
{
    return function()
    {
        delete arguments[3];
        return arguments[3];
    };
}

function tear_off_delete_5(a, b, c)
{
    return function()
    {
        delete arguments[4];
        return arguments[4];
    };
}

shouldBe("tear_off_delete_1(1, 2, 3)()", "undefined");
shouldBe("tear_off_delete_2(1, 2, 3)()", "undefined");
shouldBe("tear_off_delete_3(1, 2, 3)()", "undefined");
shouldBe("tear_off_delete_4(1, 2, 3)()", "undefined");
shouldBe("tear_off_delete_5(1, 2, 3)()", "undefined");

shouldBe("tear_off_delete_1(1)()", "undefined");
shouldBe("tear_off_delete_2(1)()", "undefined");
shouldBe("tear_off_delete_3(1)()", "undefined");
shouldBe("tear_off_delete_4(1)()", "undefined");
shouldBe("tear_off_delete_5(1)()", "undefined");

shouldBe("tear_off_delete_1(1, 2, 3, 4, 5)()", "undefined");
shouldBe("tear_off_delete_2(1, 2, 3, 4, 5)()", "undefined");
shouldBe("tear_off_delete_3(1, 2, 3, 4, 5)()", "undefined");
shouldBe("tear_off_delete_4(1, 2, 3, 4, 5)()", "undefined");
shouldBe("tear_off_delete_5(1, 2, 3, 4, 5)()", "undefined");

function delete_not_live_1(a, b, c)
{
    delete arguments[0];
    return a;
}

function delete_not_live_2(a, b, c)
{
    delete arguments[1];
    return b;
}

function delete_not_live_3(a, b, c)
{
    delete arguments[2];
    return c;
}

shouldBe("delete_not_live_1(1, 2, 3)", "1");
shouldBe("delete_not_live_2(1, 2, 3)", "2");
shouldBe("delete_not_live_3(1, 2, 3)", "3");

shouldBe("delete_not_live_1(1)", "1");
shouldBe("delete_not_live_2(1)", "undefined");
shouldBe("delete_not_live_3(1)", "undefined");

shouldBe("delete_not_live_1(1, 2, 3, 4, 5)", "1");
shouldBe("delete_not_live_2(1, 2, 3, 4, 5)", "2");
shouldBe("delete_not_live_3(1, 2, 3, 4, 5)", "3");

function tear_off_delete_not_live_1(a, b, c)
{
    return function()
    {
        delete arguments[0];
        return a;
    };
}

function tear_off_delete_not_live_2(a, b, c)
{
    return function ()
    {
        delete arguments[1];
        return b;
    };
}

function tear_off_delete_not_live_3(a, b, c)
{
    return function()
    {
        delete arguments[2];
        return c;
    };
}

shouldBe("tear_off_delete_not_live_1(1, 2, 3)()", "1");
shouldBe("tear_off_delete_not_live_2(1, 2, 3)()", "2");
shouldBe("tear_off_delete_not_live_3(1, 2, 3)()", "3");

shouldBe("tear_off_delete_not_live_1(1)()", "1");
shouldBe("tear_off_delete_not_live_2(1)()", "undefined");
shouldBe("tear_off_delete_not_live_3(1)()", "undefined");

shouldBe("tear_off_delete_not_live_1(1, 2, 3, 4, 5)()", "1");
shouldBe("tear_off_delete_not_live_2(1, 2, 3, 4, 5)()", "2");
shouldBe("tear_off_delete_not_live_3(1, 2, 3, 4, 5)()", "3");

function access_after_delete_named_2(a, b, c)
{
    delete arguments[0];
    return b;
}

function access_after_delete_named_3(a, b, c)
{
    delete arguments[0];
    return c;
}

function access_after_delete_named_4(a, b, c)
{
    delete arguments[0];
    return arguments[3];
}

shouldBe("access_after_delete_named_2(1, 2, 3)", "2");
shouldBe("access_after_delete_named_3(1, 2, 3)", "3");
shouldBe("access_after_delete_named_4(1, 2, 3)", "undefined");

shouldBe("access_after_delete_named_2(1)", "undefined");
shouldBe("access_after_delete_named_3(1)", "undefined");
shouldBe("access_after_delete_named_4(1)", "undefined");

shouldBe("access_after_delete_named_2(1, 2, 3, 4)", "2");
shouldBe("access_after_delete_named_3(1, 2, 3, 4)", "3");
shouldBe("access_after_delete_named_4(1, 2, 3, 4)", "4");

function access_after_delete_extra_1(a, b, c)
{
    delete arguments[3];
    return a;
}

function access_after_delete_extra_2(a, b, c)
{
    delete arguments[3];
    return b;
}

function access_after_delete_extra_3(a, b, c)
{
    delete arguments[3];
    return c;
}

function access_after_delete_extra_5(a, b, c)
{
    delete arguments[3];
    return arguments[4];
}

shouldBe("access_after_delete_extra_1(1, 2, 3)", "1");
shouldBe("access_after_delete_extra_2(1, 2, 3)", "2");
shouldBe("access_after_delete_extra_3(1, 2, 3)", "3");
shouldBe("access_after_delete_extra_5(1, 2, 3)", "undefined");

shouldBe("access_after_delete_extra_1(1)", "1");
shouldBe("access_after_delete_extra_2(1)", "undefined");
shouldBe("access_after_delete_extra_3(1)", "undefined");
shouldBe("access_after_delete_extra_5(1)", "undefined");

shouldBe("access_after_delete_extra_1(1, 2, 3, 4, 5)", "1");
shouldBe("access_after_delete_extra_2(1, 2, 3, 4, 5)", "2");
shouldBe("access_after_delete_extra_3(1, 2, 3, 4, 5)", "3");
shouldBe("access_after_delete_extra_5(1, 2, 3, 4, 5)", "5");

function argumentsParam(arguments)
{
    return arguments;
}
shouldBeTrue("argumentsParam(true)");

var argumentsFunctionConstructorParam = new Function("arguments", "return arguments;");
shouldBeTrue("argumentsFunctionConstructorParam(true)");

function argumentsVarUndefined()
{
    var arguments;
    return String(arguments);
}
shouldBe("argumentsVarUndefined()", "'[object Arguments]'");

function argumentCalleeInException() {
    try {
        throw "";
    } catch (e) {
        return arguments.callee;
    }
}
shouldBe("argumentCalleeInException()", "argumentCalleeInException")

function shadowedArgumentsApply(arguments) {
    return function(a){ return a; }.apply(null, arguments);
}

function shadowedArgumentsLength(arguments) {
    return arguments.length;
}

function shadowedArgumentsCallee(arguments) {
    return arguments.callee;
}

function shadowedArgumentsIndex(arguments) {
    return arguments[0]
}

shouldBeTrue("shadowedArgumentsApply([true])");
shouldBe("shadowedArgumentsLength([])", '0');
shouldThrow("shadowedArgumentsLength()");
shouldBeUndefined("shadowedArgumentsCallee([])");
shouldBeTrue("shadowedArgumentsIndex([true])");

descriptor = (function(){ return Object.getOwnPropertyDescriptor(arguments, 1); })("zero","one","two");
shouldBe("descriptor.value", '"one"');
shouldBe("descriptor.writable", 'true');
shouldBe("descriptor.enumerable", 'true');
shouldBe("descriptor.configurable", 'true');

// Test cases for [[DefineOwnProperty]] applied to the arguments object.
(function(a0,a1,a2,a3){
    Object.defineProperties(arguments, {
        1: { get: function(){ return 201; } },
        2: { value: 202, writable: false },
        3: { writable: false },
    });

    // Test a0 is a live mapped argument.
    shouldBeTrue(String( a0 === 100 ));
    shouldBeTrue(String( arguments[0] === 100 ));
    a0 = 300;
    shouldBeTrue(String( a0 === 300 ));
    shouldBeTrue(String( arguments[0] === 300 ));
    arguments[0] = 400;
    shouldBeTrue(String( a0 === 400 ));
    shouldBeTrue(String( arguments[0] === 400 ));

    // When a1 is redefined as an accessor, it is no longer live.
    shouldBeTrue(String( a1 === 101 ));
    shouldBeTrue(String( arguments[1] === 201 ));
    a1 = 301;
    shouldBeTrue(String( a1 === 301 ));
    shouldBeTrue(String( arguments[1] === 201 ));
    arguments[1] = 401;
    shouldBeTrue(String( a1 === 301 ));
    shouldBeTrue(String( arguments[1] === 201 ));

    // When a2 is made read-only the value is set, but it is no longer live.
    // (per 10.6 [[DefineOwnProperty]] 5.b.ii.1)
    shouldBeTrue(String( a2 === 202 ));
    shouldBeTrue(String( arguments[2] === 202 ));
    a2 = 302;
    shouldBeTrue(String( a2 === 302 ));
    shouldBeTrue(String( arguments[2] === 202 ));
    arguments[2] = 402;
    shouldBeTrue(String( a2 === 302 ));
    shouldBeTrue(String( arguments[2] === 202 ));

    // When a3 is made read-only, it is no longer live.
    // (per 10.6 [[DefineOwnProperty]] 5.b.ii.1)
    shouldBeTrue(String( a3 === 103 ));
    shouldBeTrue(String( arguments[3] === 103 ));
    a3 = 303;
    shouldBeTrue(String( a3 === 303 ));
    shouldBeTrue(String( arguments[3] === 103 ));
    arguments[3] = 403;
    shouldBeTrue(String( a3 === 303 ));
    shouldBeTrue(String( arguments[3] === 103 ));

})(100,101,102,103);

// Test cases for [[DefineOwnProperty]] applied to the arguments object.
(function(arg){
    shouldBeTrue(String( Object.getOwnPropertyDescriptor(arguments, 0).writable ));
    shouldBeTrue(String( Object.getOwnPropertyDescriptor(arguments, 0).enumerable ));
    Object.defineProperty(arguments, 0, { writable: false });
    shouldBeFalse(String( Object.getOwnPropertyDescriptor(arguments, 0).writable ));
    shouldBeTrue(String( Object.getOwnPropertyDescriptor(arguments, 0).enumerable ));
    Object.defineProperty(arguments, 0, { enumerable: false });
    shouldBeFalse(String( Object.getOwnPropertyDescriptor(arguments, 0).writable ));
    shouldBeFalse(String( Object.getOwnPropertyDescriptor(arguments, 0).enumerable ));

    delete arguments[1];
    shouldBeUndefined(String( Object.getOwnPropertyDescriptor(arguments, 1) ));
    Object.defineProperty(arguments, 1, { writable: true });
    shouldBeTrue(String( Object.getOwnPropertyDescriptor(arguments, 1).writable ));
    shouldBeFalse(String( Object.getOwnPropertyDescriptor(arguments, 1).enumerable ));
})(0,1);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/test/webkit/fast/js/array-bad-time-expected.txt                                 0000664 0000000 0000000 00000101507 14746647661 0025024 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests that defining a setter on the Array prototype works even if it is done after arrays are allocated.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
PASS "0,1,2,3,4" is "0,1,2,3,4"
Henceforth I will have a bad time.
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS ouches is 50
PASS successfullyParsed is true

TEST COMPLETE
                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/array-bad-time.js                                           0000664 0000000 0000000 00000004265 14746647661 0023025 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Tests that defining a setter on the Array prototype works even if it is done after arrays are allocated."
);

var ouches = 0;

function foo(haveABadTime) {
    var result = [];
    result.length = 5;
    for (var i = 0; i < result.length; ++i) {
        if (i == haveABadTime) {
            debug("Henceforth I will have a bad time.");
            Array.prototype.__defineSetter__("3", function() { ouches++; });
        }
        result[i] = i;
    }
    return result;
}

var expected = "\"0,1,2,3,4\"";

for (var i = 0; i < 1000; ++i) {
    var haveABadTime;
    if (i == 950) {
        haveABadTime = 2;
        expected = "\"0,1,2,,4\"";
    } else
        haveABadTime = -1;
    shouldBe("\"" + foo(haveABadTime).join(",") + "\"", expected);
}

shouldBe("ouches", "50");
                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/array-float-delete-expected.txt                             0000664 0000000 0000000 00000003177 14746647661 0025713 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks for regression against 6234: Can delete array index property incorrectly.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS a[1] is "before"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/webkit/fast/js/array-float-delete.js                                       0000664 0000000 0000000 00000003264 14746647661 0023706 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'This test checks for regression against <a href="https://bugs.webkit.org/show_bug.cgi?id=6234">6234: Can delete array index property incorrectly.</a>'
);

var a = new Array();
a[1]     = "before";
a['1.0'] = "after";
delete a['1.0'];
shouldBe("a[1]", '"before"');
                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/array-functions-non-arrays-expected.txt                     0000664 0000000 0000000 00000021352 14746647661 0027440 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test some array functions on non-array objects.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS properties(['b', 'a']) is '0:b, 1:a, length:2(DontDelete, DontEnum)'
PASS properties({ length:2, 0:'b', 1:'a' }) is '0:b, 1:a, length:2'
PASS properties(new OneItemConstructor) is '0:a(FromPrototype), length:1(FromPrototype)'
PASS properties(new TwoItemConstructor) is '0:b(FromPrototype), 1:a(FromPrototype), length:2(FromPrototype)'
PASS Array.prototype.toString.call({}) is "[object Object]"
PASS Array.prototype.toString.call(new Date) is "[object Date]"
PASS Array.prototype.toString.call({sort: function() { return 'sort' }}) is "[object Object]"
PASS Array.prototype.toString.call({join: function() { return 'join' }}) is "join"
PASS Array.prototype.toString.call({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3}) is "a,b,c"
PASS ({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3}).toString() is "a,b,c"
PASS Array.prototype.toString.call({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3, join: function() { return 'join' }}) is "join"
PASS ({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3, join: function() { return 'join' }}).toString() is "join"
PASS Array.prototype.toString.call(42) is "Number.prototype.join:42"
PASS [0, 1, 2].toString() is "array-join"
FAIL Array.prototype.toLocaleString.call({}) should throw an exception. Was .
PASS Array.prototype.concat.call(x = { length:2, 0:'b', 1:'a' }) is [x]
PASS Array.prototype.join.call({}) is ''
PASS Array.prototype.join.call(['b', 'a']) is 'b,a'
PASS Array.prototype.join.call({ length:2, 0:'b', 1:'a' }) is 'b,a'
PASS Array.prototype.join.call(new TwoItemConstructor) is 'b,a'
PASS Array.prototype.pop.call({}) is undefined
PASS Array.prototype.pop.call({ length:2, 0:'b', 1:'a' }) is 'a'
PASS Array.prototype.pop.call({ length:2, 0:'b', 1:'a' }) is 'a'
PASS Array.prototype.pop.call(new TwoItemConstructor) is 'a'
PASS Array.prototype.pop.call(x = {}); properties(x) is 'length:0'
PASS Array.prototype.pop.call(x = ['b', 'a']); properties(x) is '0:b, length:1(DontDelete, DontEnum)'
PASS Array.prototype.pop.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:b, length:1'
PASS Array.prototype.pop.call(x = new TwoItemConstructor); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), length:1'
PASS Array.prototype.push.call({}) is 0
PASS Array.prototype.push.call(['b', 'a']) is 2
PASS Array.prototype.push.call({ length:2, 0:'b', 1:'a' }) is 2
PASS Array.prototype.push.call(new TwoItemConstructor) is 2
PASS Array.prototype.push.call(x = {}); properties(x) is 'length:0'
PASS Array.prototype.push.call(x = ['b', 'a']); properties(x) is '0:b, 1:a, length:2(DontDelete, DontEnum)'
PASS Array.prototype.push.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:b, 1:a, length:2'
PASS Array.prototype.push.call(x = new TwoItemConstructor); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), length:2'
PASS Array.prototype.push.call({}, 'c') is 1
PASS Array.prototype.push.call(['b', 'a'], 'c') is 3
PASS Array.prototype.push.call({ length:2, 0:'b', 1:'a' }, 'c') is 3
PASS Array.prototype.push.call(new TwoItemConstructor, 'c') is 3
PASS Array.prototype.push.call(x = {}, 'c'); properties(x) is '0:c, length:1'
PASS Array.prototype.push.call(x = ['b', 'a'], 'c'); properties(x) is '0:b, 1:a, 2:c, length:3(DontDelete, DontEnum)'
PASS Array.prototype.push.call(x = { length:2, 0:'b', 1:'a' }, 'c'); properties(x) is '0:b, 1:a, 2:c, length:3'
PASS Array.prototype.push.call(x = new TwoItemConstructor, 'c'); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), 2:c, length:3'
PASS properties(Array.prototype.reverse.call({})) is ''
PASS properties(Array.prototype.reverse.call(['b', 'a'])) is '0:a, 1:b, length:2(DontDelete, DontEnum)'
PASS properties(Array.prototype.reverse.call({ length:2, 0:'b', 1:'a' })) is '0:a, 1:b, length:2'
PASS properties(Array.prototype.reverse.call(new OneItemConstructor)) is '0:a(FromPrototype), length:1(FromPrototype)'
PASS properties(Array.prototype.reverse.call(new TwoItemConstructor)) is '0:a, 1:b, length:2(FromPrototype)'
PASS Array.prototype.shift.call({}) is undefined
PASS Array.prototype.shift.call(['b', 'a']) is 'b'
PASS Array.prototype.shift.call({ length:2, 0:'b', 1:'a' }) is 'b'
PASS Array.prototype.shift.call(new TwoItemConstructor) is 'b'
PASS Array.prototype.shift.call(x = {}); properties(x) is 'length:0'
PASS Array.prototype.shift.call(x = ['b', 'a']); properties(x) is '0:a, length:1(DontDelete, DontEnum)'
PASS Array.prototype.shift.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:a, length:1'
PASS Array.prototype.shift.call(x = new TwoItemConstructor); properties(x) is '0:a, 1:a(FromPrototype), length:1'
PASS Array.prototype.slice.call({}, 0, 1) is []
PASS Array.prototype.slice.call(['b', 'a'], 0, 1) is ['b']
PASS Array.prototype.slice.call({ length:2, 0:'b', 1:'a' }, 0, 1) is ['b']
PASS Array.prototype.slice.call(new TwoItemConstructor, 0, 1) is ['b']
PASS properties(Array.prototype.sort.call({})) is ''
PASS properties(Array.prototype.sort.call(['b', 'a'])) is '0:a, 1:b, length:2(DontDelete, DontEnum)'
PASS properties(Array.prototype.sort.call({ length:2, 0:'b', 1:'a' })) is '0:a, 1:b, length:2'
PASS properties(Array.prototype.sort.call(new OneItemConstructor)) is '0:a(FromPrototype), length:1(FromPrototype)'
PASS properties(Array.prototype.sort.call(new TwoItemConstructor)) is '0:a, 1:b, length:2(FromPrototype)'
PASS Array.prototype.splice.call({}, 0, 1) is []
PASS Array.prototype.splice.call(['b', 'a'], 0, 1) is ['b']
PASS Array.prototype.splice.call({ length:2, 0:'b', 1:'a' }, 0, 1) is ['b']
PASS Array.prototype.splice.call(new TwoItemConstructor, 0, 1) is ['b']
PASS Array.prototype.splice.call(x = {}, 0, 1); properties(x) is 'length:0'
PASS Array.prototype.splice.call(x = ['b', 'a'], 0, 1); properties(x) is '0:a, length:1(DontDelete, DontEnum)'
PASS Array.prototype.splice.call(x = { length:2, 0:'b', 1:'a' }, 0, 1); properties(x) is '0:a, length:1'
PASS Array.prototype.splice.call(x = new TwoItemConstructor, 0, 1); properties(x) is '0:a, 1:a(FromPrototype), length:1'
PASS Array.prototype.unshift.call({}) is 0
PASS Array.prototype.unshift.call(['b', 'a']) is 2
PASS Array.prototype.unshift.call({ length:2, 0:'b', 1:'a' }) is 2
PASS Array.prototype.unshift.call(new TwoItemConstructor) is 2
PASS Array.prototype.unshift.call(x = {}); properties(x) is 'length:0'
PASS Array.prototype.unshift.call(x = ['b', 'a']); properties(x) is '0:b, 1:a, length:2(DontDelete, DontEnum)'
PASS Array.prototype.unshift.call(x = { length:2, 0:'b', 1:'a' }); properties(x) is '0:b, 1:a, length:2'
PASS Array.prototype.unshift.call(x = new TwoItemConstructor); properties(x) is '0:b(FromPrototype), 1:a(FromPrototype), length:2'
PASS Array.prototype.unshift.call({}, 'c') is 1
PASS Array.prototype.unshift.call(['b', 'a'], 'c') is 3
PASS Array.prototype.unshift.call({ length:2, 0:'b', 1:'a' }, 'c') is 3
PASS Array.prototype.unshift.call(new TwoItemConstructor, 'c') is 3
PASS Array.prototype.unshift.call(x = {}, 'c'); properties(x) is '0:c, length:1'
PASS Array.prototype.unshift.call(x = ['b', 'a'], 'c'); properties(x) is '0:c, 1:b, 2:a, length:3(DontDelete, DontEnum)'
PASS Array.prototype.unshift.call(x = { length:2, 0:'b', 1:'a' }, 'c'); properties(x) is '0:c, 1:b, 2:a, length:3'
PASS Array.prototype.unshift.call(x = new TwoItemConstructor, 'c'); properties(x) is '0:c, 1:b, 2:a, length:3'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/array-functions-non-arrays.js                               0000664 0000000 0000000 00000026516 14746647661 0025445 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Test some array functions on non-array objects."
);

function properties(object, extraName1, extraName2, extraName3)
{
    var string = "";

    // destructive, lists properties
    var names = [];
    var enumerables = {};
    for (propertyName in object) {
        names.push(propertyName);
        enumerables[propertyName] = 1;
    }
    names.push("length");
    names.push(extraName1);
    names.push(extraName2);
    names.push(extraName3);
    names.sort();

    var propertyStrings = [];
    for (i = 0; i < names.length; ++i) {
        var name = names[i];
        if (name == names[i - 1])
            continue;
        if (!(name in object))
            continue;

        var propertyString = name + ":" + object[name];

        var flags = [];
        if (!object.hasOwnProperty(name))
            flags.push("FromPrototype");
        if (!enumerables[name])
            flags.push("DontEnum");
        if (name != "length") {
            try {
                object[name] = "ReadOnlyTestValue";
            } catch (e) {
            }
            if (object[name] != "ReadOnlyTestValue")
                flags.push("ReadOnly");
        }
        delete object[name];
        if (object.hasOwnProperty(name))
            flags.push("DontDelete");

        flags.sort();

        if (flags.length)
            propertyString += "(" + flags.join(", ") + ")";

        propertyStrings.push(propertyString);
    }
    return propertyStrings.join(", ");
}

var x;

var oneItemPrototype = { length:1, 0:'a' };
function OneItemConstructor()
{
}
OneItemConstructor.prototype = oneItemPrototype;

var twoItemPrototype = { length:2, 0:'b', 1:'a' };
function TwoItemConstructor()
{
}
TwoItemConstructor.prototype = twoItemPrototype;

shouldBe("properties(['b', 'a'])", "'0:b, 1:a, length:2(DontDelete, DontEnum)'");
shouldBe("properties({ length:2, 0:'b', 1:'a' })", "'0:b, 1:a, length:2'");

shouldBe("properties(new OneItemConstructor)", "'0:a(FromPrototype), length:1(FromPrototype)'");
shouldBe("properties(new TwoItemConstructor)", "'0:b(FromPrototype), 1:a(FromPrototype), length:2(FromPrototype)'");

shouldBe("Array.prototype.toString.call({})", '"' + ({}).toString() + '"');
shouldBe("Array.prototype.toString.call(new Date)", '"' + Object.prototype.toString.call(new Date) + '"');
shouldBe("Array.prototype.toString.call({sort: function() { return 'sort' }})", '"' + Object.prototype.toString.call({}) + '"');
shouldBe("Array.prototype.toString.call({join: function() { return 'join' }})", '"join"');
shouldBe("Array.prototype.toString.call({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3})", '"a,b,c"');
shouldBe("({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3}).toString()", '"a,b,c"');
shouldBe("Array.prototype.toString.call({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3, join: function() { return 'join' }})", '"join"');
shouldBe("({__proto__: Array.prototype, 0: 'a', 1: 'b', 2: 'c', length: 3, join: function() { return 'join' }}).toString()", '"join"');
Number.prototype.join = function() { return "Number.prototype.join:" + this; }
shouldBe("Array.prototype.toString.call(42)", '"Number.prototype.join:42"');
var arrayJoin = Array.prototype.join;
Array.prototype.join = function() { return 'array-join' };
shouldBe("[0, 1, 2].toString()", '"array-join"');
Array.prototype.join = arrayJoin;

shouldThrow("Array.prototype.toLocaleString.call({})");

shouldBe("Array.prototype.concat.call(x = { length:2, 0:'b', 1:'a' })", "[x]");

shouldBe("Array.prototype.join.call({})", "''");
shouldBe("Array.prototype.join.call(['b', 'a'])", "'b,a'");
shouldBe("Array.prototype.join.call({ length:2, 0:'b', 1:'a' })", "'b,a'");
shouldBe("Array.prototype.join.call(new TwoItemConstructor)", "'b,a'");

shouldBe("Array.prototype.pop.call({})", "undefined");
shouldBe("Array.prototype.pop.call({ length:2, 0:'b', 1:'a' })", "'a'");
shouldBe("Array.prototype.pop.call({ length:2, 0:'b', 1:'a' })", "'a'");
shouldBe("Array.prototype.pop.call(new TwoItemConstructor)", "'a'");
shouldBe("Array.prototype.pop.call(x = {}); properties(x)", "'length:0'");
shouldBe("Array.prototype.pop.call(x = ['b', 'a']); properties(x)", "'0:b, length:1(DontDelete, DontEnum)'");
shouldBe("Array.prototype.pop.call(x = { length:2, 0:'b', 1:'a' }); properties(x)", "'0:b, length:1'");
shouldBe("Array.prototype.pop.call(x = new TwoItemConstructor); properties(x)", "'0:b(FromPrototype), 1:a(FromPrototype), length:1'");

shouldBe("Array.prototype.push.call({})", "0");
shouldBe("Array.prototype.push.call(['b', 'a'])", "2");
shouldBe("Array.prototype.push.call({ length:2, 0:'b', 1:'a' })", "2");
shouldBe("Array.prototype.push.call(new TwoItemConstructor)", "2");
shouldBe("Array.prototype.push.call(x = {}); properties(x)", "'length:0'");
shouldBe("Array.prototype.push.call(x = ['b', 'a']); properties(x)", "'0:b, 1:a, length:2(DontDelete, DontEnum)'");
shouldBe("Array.prototype.push.call(x = { length:2, 0:'b', 1:'a' }); properties(x)", "'0:b, 1:a, length:2'");
shouldBe("Array.prototype.push.call(x = new TwoItemConstructor); properties(x)", "'0:b(FromPrototype), 1:a(FromPrototype), length:2'");
shouldBe("Array.prototype.push.call({}, 'c')", "1");
shouldBe("Array.prototype.push.call(['b', 'a'], 'c')", "3");
shouldBe("Array.prototype.push.call({ length:2, 0:'b', 1:'a' }, 'c')", "3");
shouldBe("Array.prototype.push.call(new TwoItemConstructor, 'c')", "3");
shouldBe("Array.prototype.push.call(x = {}, 'c'); properties(x)", "'0:c, length:1'");
shouldBe("Array.prototype.push.call(x = ['b', 'a'], 'c'); properties(x)", "'0:b, 1:a, 2:c, length:3(DontDelete, DontEnum)'");
shouldBe("Array.prototype.push.call(x = { length:2, 0:'b', 1:'a' }, 'c'); properties(x)", "'0:b, 1:a, 2:c, length:3'");
shouldBe("Array.prototype.push.call(x = new TwoItemConstructor, 'c'); properties(x)", "'0:b(FromPrototype), 1:a(FromPrototype), 2:c, length:3'");

shouldBe("properties(Array.prototype.reverse.call({}))", "''");
shouldBe("properties(Array.prototype.reverse.call(['b', 'a']))", "'0:a, 1:b, length:2(DontDelete, DontEnum)'");
shouldBe("properties(Array.prototype.reverse.call({ length:2, 0:'b', 1:'a' }))", "'0:a, 1:b, length:2'");
shouldBe("properties(Array.prototype.reverse.call(new OneItemConstructor))", "'0:a(FromPrototype), length:1(FromPrototype)'");
shouldBe("properties(Array.prototype.reverse.call(new TwoItemConstructor))", "'0:a, 1:b, length:2(FromPrototype)'");

shouldBe("Array.prototype.shift.call({})", "undefined");
shouldBe("Array.prototype.shift.call(['b', 'a'])", "'b'");
shouldBe("Array.prototype.shift.call({ length:2, 0:'b', 1:'a' })", "'b'");
shouldBe("Array.prototype.shift.call(new TwoItemConstructor)", "'b'");
shouldBe("Array.prototype.shift.call(x = {}); properties(x)", "'length:0'");
shouldBe("Array.prototype.shift.call(x = ['b', 'a']); properties(x)", "'0:a, length:1(DontDelete, DontEnum)'");
shouldBe("Array.prototype.shift.call(x = { length:2, 0:'b', 1:'a' }); properties(x)", "'0:a, length:1'");
shouldBe("Array.prototype.shift.call(x = new TwoItemConstructor); properties(x)", "'0:a, 1:a(FromPrototype), length:1'");

shouldBe("Array.prototype.slice.call({}, 0, 1)", "[]");
shouldBe("Array.prototype.slice.call(['b', 'a'], 0, 1)", "['b']");
shouldBe("Array.prototype.slice.call({ length:2, 0:'b', 1:'a' }, 0, 1)", "['b']");
shouldBe("Array.prototype.slice.call(new TwoItemConstructor, 0, 1)", "['b']");

shouldBe("properties(Array.prototype.sort.call({}))", "''");
shouldBe("properties(Array.prototype.sort.call(['b', 'a']))", "'0:a, 1:b, length:2(DontDelete, DontEnum)'");
shouldBe("properties(Array.prototype.sort.call({ length:2, 0:'b', 1:'a' }))", "'0:a, 1:b, length:2'");
shouldBe("properties(Array.prototype.sort.call(new OneItemConstructor))", "'0:a(FromPrototype), length:1(FromPrototype)'");
shouldBe("properties(Array.prototype.sort.call(new TwoItemConstructor))", "'0:a, 1:b, length:2(FromPrototype)'");

shouldBe("Array.prototype.splice.call({}, 0, 1)", "[]");
shouldBe("Array.prototype.splice.call(['b', 'a'], 0, 1)", "['b']");
shouldBe("Array.prototype.splice.call({ length:2, 0:'b', 1:'a' }, 0, 1)", "['b']");
shouldBe("Array.prototype.splice.call(new TwoItemConstructor, 0, 1)", "['b']");
shouldBe("Array.prototype.splice.call(x = {}, 0, 1); properties(x)", "'length:0'");
shouldBe("Array.prototype.splice.call(x = ['b', 'a'], 0, 1); properties(x)", "'0:a, length:1(DontDelete, DontEnum)'");
shouldBe("Array.prototype.splice.call(x = { length:2, 0:'b', 1:'a' }, 0, 1); properties(x)", "'0:a, length:1'");
shouldBe("Array.prototype.splice.call(x = new TwoItemConstructor, 0, 1); properties(x)", "'0:a, 1:a(FromPrototype), length:1'");

shouldBe("Array.prototype.unshift.call({})", "0");
shouldBe("Array.prototype.unshift.call(['b', 'a'])", "2");
shouldBe("Array.prototype.unshift.call({ length:2, 0:'b', 1:'a' })", "2");
shouldBe("Array.prototype.unshift.call(new TwoItemConstructor)", "2");
shouldBe("Array.prototype.unshift.call(x = {}); properties(x)", "'length:0'");
shouldBe("Array.prototype.unshift.call(x = ['b', 'a']); properties(x)", "'0:b, 1:a, length:2(DontDelete, DontEnum)'");
shouldBe("Array.prototype.unshift.call(x = { length:2, 0:'b', 1:'a' }); properties(x)", "'0:b, 1:a, length:2'");
shouldBe("Array.prototype.unshift.call(x = new TwoItemConstructor); properties(x)", "'0:b(FromPrototype), 1:a(FromPrototype), length:2'");
shouldBe("Array.prototype.unshift.call({}, 'c')", "1");
shouldBe("Array.prototype.unshift.call(['b', 'a'], 'c')", "3");
shouldBe("Array.prototype.unshift.call({ length:2, 0:'b', 1:'a' }, 'c')", "3");
shouldBe("Array.prototype.unshift.call(new TwoItemConstructor, 'c')", "3");
shouldBe("Array.prototype.unshift.call(x = {}, 'c'); properties(x)", "'0:c, length:1'");
shouldBe("Array.prototype.unshift.call(x = ['b', 'a'], 'c'); properties(x)", "'0:c, 1:b, 2:a, length:3(DontDelete, DontEnum)'");
shouldBe("Array.prototype.unshift.call(x = { length:2, 0:'b', 1:'a' }, 'c'); properties(x)", "'0:c, 1:b, 2:a, length:3'");
shouldBe("Array.prototype.unshift.call(x = new TwoItemConstructor, 'c'); properties(x)", "'0:c, 1:b, 2:a, length:3'");

// FIXME: Add tests for every, forEach, some, indexOf, lastIndexOf, filter, and map
                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/array-prototype-properties-expected.txt                     0000664 0000000 0000000 00000010336 14746647661 0027600 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This is a test case for bug 64679.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Array.prototype.toString.call(undefined) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.toLocaleString.call(undefined) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.concat.call(undefined, []) threw exception TypeError: Array.prototype.concat called on null or undefined.
PASS Array.prototype.join.call(undefined, []) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.pop.call(undefined) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.push.call(undefined, {}) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.reverse.call(undefined) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.shift.call(undefined) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.slice.call(undefined, 0, 1) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.sort.call(undefined) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.splice.call(undefined, 0, 1) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.unshift.call(undefined, {}) threw exception TypeError: Cannot convert undefined or null to object.
PASS Array.prototype.every.call(undefined, toString) threw exception TypeError: Array.prototype.every called on null or undefined.
PASS Array.prototype.forEach.call(undefined, toString) threw exception TypeError: Array.prototype.forEach called on null or undefined.
PASS Array.prototype.some.call(undefined, toString) threw exception TypeError: Array.prototype.some called on null or undefined.
PASS Array.prototype.indexOf.call(undefined, 0) threw exception TypeError: Array.prototype.indexOf called on null or undefined.
PASS Array.prototype.indlastIndexOfexOf.call(undefined, 0) threw exception TypeError: Cannot read properties of undefined (reading 'call').
PASS Array.prototype.filter.call(undefined, toString) threw exception TypeError: Array.prototype.filter called on null or undefined.
PASS Array.prototype.reduce.call(undefined, toString) threw exception TypeError: Array.prototype.reduce called on null or undefined.
PASS Array.prototype.reduceRight.call(undefined, toString) threw exception TypeError: Array.prototype.reduceRight called on null or undefined.
PASS Array.prototype.map.call(undefined, toString) threw exception TypeError: Array.prototype.map called on null or undefined.
PASS [{toLocaleString:function(){throw 1}},{toLocaleString:function(){throw 2}}].toLocaleString() threw exception 1.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/array-prototype-properties.js                               0000664 0000000 0000000 00000006076 14746647661 0025604 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'This is a test case for <a href="https://bugs.webkit.org/show_bug.cgi?id=64679">bug 64679</a>.'
);

// These calls pass undefined as this value, and as such should throw in toObject.
shouldThrow("Array.prototype.toString.call(undefined)");
shouldThrow("Array.prototype.toLocaleString.call(undefined)");
shouldThrow("Array.prototype.concat.call(undefined, [])");
shouldThrow("Array.prototype.join.call(undefined, [])");
shouldThrow("Array.prototype.pop.call(undefined)");
shouldThrow("Array.prototype.push.call(undefined, {})");
shouldThrow("Array.prototype.reverse.call(undefined)");
shouldThrow("Array.prototype.shift.call(undefined)");
shouldThrow("Array.prototype.slice.call(undefined, 0, 1)");
shouldThrow("Array.prototype.sort.call(undefined)");
shouldThrow("Array.prototype.splice.call(undefined, 0, 1)");
shouldThrow("Array.prototype.unshift.call(undefined, {})");
shouldThrow("Array.prototype.every.call(undefined, toString)");
shouldThrow("Array.prototype.forEach.call(undefined, toString)");
shouldThrow("Array.prototype.some.call(undefined, toString)");
shouldThrow("Array.prototype.indexOf.call(undefined, 0)");
shouldThrow("Array.prototype.indlastIndexOfexOf.call(undefined, 0)");
shouldThrow("Array.prototype.filter.call(undefined, toString)");
shouldThrow("Array.prototype.reduce.call(undefined, toString)");
shouldThrow("Array.prototype.reduceRight.call(undefined, toString)");
shouldThrow("Array.prototype.map.call(undefined, toString)");

// Test exception ordering in Array.prototype.toLocaleString ( https://bugs.webkit.org/show_bug.cgi?id=80663 )
shouldThrow("[{toLocaleString:function(){throw 1}},{toLocaleString:function(){throw 2}}].toLocaleString()", '1');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/array-slow-put-expected.txt                                 0000664 0000000 0000000 00000011023 14746647661 0025125 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests that defining a setter on the Array prototype works.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS "0,1,2,,4" is "0,1,2,,4"
PASS ouches is 100
PASS successfullyParsed is true

TEST COMPLETE
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/array-slow-put.js                                           0000664 0000000 0000000 00000003513 14746647661 0023130 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Tests that defining a setter on the Array prototype works."
);

var ouches = 0;
Array.prototype.__defineSetter__("3", function() { ouches++; });

function foo() {
    var result = [];
    result.length = 5;
    for (var i = 0; i < result.length; ++i)
        result[i] = i;
    return result;
}

for (var i = 0; i < 100; ++i)
    shouldBe("\"" + foo().join(",") + "\"", "\"0,1,2,,4\"");

shouldBe("ouches", "100");
                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/array-tostring-ignore-separator-expected.txt                0000664 0000000 0000000 00000003235 14746647661 0030471 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks for regressions against 6261:Do not use a separator argument when doing toString/toLocalString.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS a.toString('!') is '5,3'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/array-tostring-ignore-separator.js                          0000664 0000000 0000000 00000003320 14746647661 0026462 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'This test checks for regressions against <a href="https://bugs.webkit.org/show_bug.cgi?id=6261">6261:Do not use a separator argument when doing toString/toLocalString.</a>'
);

var a = new Array;
a[0] = 5;
a[1] = 3;
//Shouldn't use argument for toString
shouldBe("a.toString('!')", "'5,3'");
                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/test/webkit/fast/js/basic-strict-mode-expected.txt                              0000664 0000000 0000000 00000061213 14746647661 0025536 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test behaviour of strict mode

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS testThis.call(null) is null
PASS testThis.call(1) is 1
PASS testThis.call(true) is true
PASS testThis.call(false) is false
PASS testThis.call(undefined) is undefined
PASS testLineContinuation.call(undefined) === undefined is false
PASS testEscapeSequence.call(undefined) === undefined is false
PASS testThis.call('a string') is 'a string'
PASS testThisDotAccess.call('a string') is 'a string'.length
PASS testThisDotAccess.call(null) threw exception TypeError: Cannot read properties of null (reading 'length').
PASS testThisDotAccess.call(undefined) threw exception TypeError: Cannot read properties of undefined (reading 'length').
PASS testThisDotAccess.call(true) is undefined.
PASS testThisDotAccess.call(false) is undefined.
PASS testThisDotAccess.call(1) is undefined.
PASS testThisBracketAccess.call('a string', 'length') is 'a string'.length
PASS testThisBracketAccess.call(null, 'length') threw exception TypeError: Cannot read properties of null (reading 'length').
PASS testThisBracketAccess.call(undefined, 'length') threw exception TypeError: Cannot read properties of undefined (reading 'length').
PASS testThisBracketAccess.call(true, 'length') is undefined.
PASS testThisBracketAccess.call(false, 'length') is undefined.
PASS testThisBracketAccess.call(1, 'length') is undefined.
PASS Function('"use strict"; return this;')() is undefined.
PASS Function('"use strict"; with({});') threw exception SyntaxError: Strict mode code may not include a with statement.
PASS testGlobalAccess() is undefined
PASS testThis.call() is undefined
PASS testThis.apply() is undefined
PASS testThis.call(undefined) is undefined
PASS testThis.apply(undefined) is undefined
PASS (function eval(){'use strict';}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function eval(){'use strict';})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (eval){'use strict';}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function (eval){'use strict';})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function arguments(){'use strict';}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function arguments(){'use strict';})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (arguments){'use strict';}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function (arguments){'use strict';})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; var eval;}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function (){'use strict'; var eval;})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; var arguments;}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function (){'use strict'; var arguments;})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; try{}catch(eval){}}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function (){'use strict'; try{}catch(eval){}})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; try{}catch(arguments){}}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){(function (){'use strict'; try{}catch(arguments){}})}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (a, a){'use strict';}) threw exception SyntaxError: Duplicate parameter name not allowed in this context.
PASS (function (){(function (a, a){'use strict';})}) threw exception SyntaxError: Duplicate parameter name not allowed in this context.
PASS (function (a){'use strict'; delete a;})() threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){(function (a){'use strict'; delete a;})()}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){'use strict'; var a; delete a;})() threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){(function (){'use strict'; var a; delete a;})()}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){var a; function f() {'use strict'; delete a;} })() threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){(function (){var a; function f() {'use strict'; delete a;} })()}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){'use strict'; with(1){};}) threw exception SyntaxError: Strict mode code may not include a with statement.
PASS (function (){(function (){'use strict'; with(1){};})}) threw exception SyntaxError: Strict mode code may not include a with statement.
PASS (function (){'use strict'; arguments.callee; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function (){'use strict'; arguments.caller; })() is undefined.
PASS (function f(){'use strict'; f.arguments; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function f(){'use strict'; f.caller; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function f(){'use strict'; f.arguments=5; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function f(){'use strict'; f.caller=5; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function (arg){'use strict'; arguments.callee; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function (arg){'use strict'; arguments.caller; })() is undefined.
PASS (function f(arg){'use strict'; f.arguments; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function f(arg){'use strict'; f.caller; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function f(arg){'use strict'; f.arguments=5; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS (function f(arg){'use strict'; f.caller=5; })() threw exception TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them.
PASS "caller" in function(){"use strict"} is true
PASS (function(){"use strict";}).hasOwnProperty("caller") is false
PASS (function(){"use strict";}).__proto__.hasOwnProperty("caller") is true
PASS "arguments" in function(){"use strict"} is true
PASS (function(){"use strict";}).hasOwnProperty("arguments") is false
PASS (function(){"use strict";}).__proto__.hasOwnProperty("arguments") is true
PASS 'use strict'; (function (){with(1){};}) threw exception SyntaxError: Strict mode code may not include a with statement.
PASS (function (){'use strict'; (function (){with(1){};})}) threw exception SyntaxError: Strict mode code may not include a with statement.
PASS 'use strict'; (function (){var a; delete a;}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){'use strict'; (function (){var a; delete a;})}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS 'use strict'; var a; (function (){ delete a;}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){'use strict'; var a; (function (){ delete a;})}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS var a; (function (){ 'use strict'; delete a;}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){var a; (function (){ 'use strict'; delete a;})}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS 'misc directive'; 'use strict'; with({}){} threw exception SyntaxError: Strict mode code may not include a with statement.
PASS (function (){'misc directive'; 'use strict'; with({}){}}) threw exception SyntaxError: Strict mode code may not include a with statement.
PASS 'use strict'; return threw exception SyntaxError: Illegal return statement.
PASS 'use strict'; break threw exception SyntaxError: Illegal break statement.
PASS (function (){'use strict'; break}) threw exception SyntaxError: Illegal break statement.
PASS 'use strict'; continue threw exception SyntaxError: Illegal continue statement: no surrounding iteration statement.
PASS (function (){'use strict'; continue}) threw exception SyntaxError: Illegal continue statement: no surrounding iteration statement.
PASS 'use strict'; for(;;)return threw exception SyntaxError: Illegal return statement.
PASS 'use strict'; for(;;)break missingLabel threw exception SyntaxError: Undefined label 'missingLabel'.
PASS (function (){'use strict'; for(;;)break missingLabel}) threw exception SyntaxError: Undefined label 'missingLabel'.
PASS 'use strict'; for(;;)continue missingLabel threw exception SyntaxError: Undefined label 'missingLabel'.
PASS (function (){'use strict'; for(;;)continue missingLabel}) threw exception SyntaxError: Undefined label 'missingLabel'.
PASS 'use strict'; 007; threw exception SyntaxError: Octal literals are not allowed in strict mode..
PASS (function (){'use strict'; 007;}) threw exception SyntaxError: Octal literals are not allowed in strict mode..
PASS 'use strict'; '\007'; threw exception SyntaxError: Octal escape sequences are not allowed in strict mode..
PASS (function (){'use strict'; '\007';}) threw exception SyntaxError: Octal escape sequences are not allowed in strict mode..
PASS '\007'; 'use strict'; threw exception SyntaxError: Octal escape sequences are not allowed in strict mode..
PASS (function (){'\007'; 'use strict';}) threw exception SyntaxError: Octal escape sequences are not allowed in strict mode..
PASS 'use strict'; delete aDeletableProperty; threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){'use strict'; delete aDeletableProperty;}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS 'use strict'; (function (){ delete someDeclaredGlobal;}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){'use strict'; (function (){ delete someDeclaredGlobal;})}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){ 'use strict'; delete someDeclaredGlobal;}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS (function (){(function (){ 'use strict'; delete someDeclaredGlobal;})}) threw exception SyntaxError: Delete of an unqualified identifier in strict mode..
PASS 'use strict'; if (0) { someGlobal = 'Shouldn\'t be able to assign this.'; }; true; is true
PASS 'use strict'; someGlobal = 'Shouldn\'t be able to assign this.';  threw exception ReferenceError: someGlobal is not defined.
PASS 'use strict'; (function f(){ f = 'shouldn\'t be able to assign to function expression name'; })() threw exception TypeError: Assignment to constant variable..
PASS 'use strict'; eval('var introducedVariable = "FAIL: variable introduced into containing scope";'); introducedVariable threw exception ReferenceError: introducedVariable is not defined.
PASS 'use strict'; objectWithReadonlyProperty.prop = 'fail' threw exception TypeError: Cannot assign to read only property 'prop' of object '#<Object>'.
PASS 'use strict'; delete objectWithReadonlyProperty.prop threw exception TypeError: Cannot delete property 'prop' of #<Object>.
PASS 'use strict'; delete objectWithReadonlyProperty[readonlyPropName] threw exception TypeError: Cannot delete property 'prop' of #<Object>.
PASS 'use strict'; ++eval threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; ++eval}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; eval++ threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; eval++}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; --eval threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; --eval}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; eval-- threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; eval--}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; function f() { ++arguments } threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; function f() { ++arguments }}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; function f() { arguments++ } threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; function f() { arguments++ }}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; function f() { --arguments } threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; function f() { --arguments }}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; function f() { arguments-- } threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict'; function f() { arguments-- }}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS global.eval('"use strict"; if (0) ++arguments; true;') threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; ++(1, eval) threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS (function (){'use strict'; ++(1, eval)}) threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS 'use strict'; (1, eval)++ threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS (function (){'use strict'; (1, eval)++}) threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS 'use strict'; --(1, eval) threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS (function (){'use strict'; --(1, eval)}) threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS 'use strict'; (1, eval)-- threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS (function (){'use strict'; (1, eval)--}) threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS 'use strict'; function f() { ++(1, arguments) } threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS (function (){'use strict'; function f() { ++(1, arguments) }}) threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS 'use strict'; function f() { (1, arguments)++ } threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS (function (){'use strict'; function f() { (1, arguments)++ }}) threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS 'use strict'; function f() { --(1, arguments) } threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS (function (){'use strict'; function f() { --(1, arguments) }}) threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS 'use strict'; function f() { (1, arguments)-- } threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS (function (){'use strict'; function f() { (1, arguments)-- }}) threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
FAIL 'use strict'; undefined; if (0) delete +a.b should throw an exception. Was undefined.
FAIL (function (){'use strict'; undefined; if (0) delete +a.b}) should throw an exception. Was function (){'use strict'; undefined; if (0) delete +a.b}.
FAIL 'use strict'; undefined; if (0) delete ++a.b should throw an exception. Was undefined.
FAIL (function (){'use strict'; undefined; if (0) delete ++a.b}) should throw an exception. Was function (){'use strict'; undefined; if (0) delete ++a.b}.
FAIL 'use strict'; undefined; if (0) delete void a.b should throw an exception. Was undefined.
FAIL (function (){'use strict'; undefined; if (0) delete void a.b}) should throw an exception. Was function (){'use strict'; undefined; if (0) delete void a.b}.
PASS (function (a){'use strict'; a = false; return a !== arguments[0]; })(true) is true
PASS (function (a){'use strict'; arguments[0] = false; return a !== arguments[0]; })(true) is true
PASS (function (a){'use strict'; a=false; return arguments; })(true)[0] is true
PASS (function (a){'use strict'; arguments[0]=false; return a; })(true) is true
PASS (function (a){'use strict'; arguments[0]=true; return arguments; })(false)[0] is true
PASS (function (){'use strict';  arguments[0]=true; return arguments; })(false)[0] is true
PASS (function (a){'use strict'; arguments[0]=true; a=false; return arguments; })()[0] is true
PASS (function (a){'use strict'; arguments[0]=false; a=true; return a; })() is true
PASS (function (a){'use strict'; arguments[0]=true; return arguments; })()[0] is true
PASS (function (){'use strict';  arguments[0]=true; return arguments; })()[0] is true
PASS (function (a){'use strict'; var local; (function (){local;})(); a = false; return a !== arguments[0]; })(true) is true
PASS (function (a){'use strict'; var local; (function (){local;})(); arguments[0] = false; return a !== arguments[0]; })(true) is true
PASS (function (a){'use strict'; var local; (function (){local;})(); a=false; return arguments; })(true)[0] is true
PASS (function (a){'use strict'; var local; (function (){local;})(); arguments[0]=false; return a; })(true) is true
PASS (function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; return arguments; })(false)[0] is true
PASS (function (){'use strict';  var local; (function (){local;})(); arguments[0]=true; return arguments; })(false)[0] is true
PASS (function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; a=false; return arguments; })()[0] is true
PASS (function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; return arguments; })()[0] is true
PASS (function (a){'use strict'; var local; (function (){local;})(); arguments[0]=false; a=true; return a; })() is true
PASS (function (){'use strict';  var local; (function (){local;})(); arguments[0]=true; return arguments; })()[0] is true
PASS 'use strict'; (function (){var a = true; eval('var a = false'); return a; })() is true
PASS (function (){var a = true; eval('"use strict"; var a = false'); return a; })() is true
PASS (function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(f.__proto__, 'arguments').value; })() is undefined.
PASS (function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(f.__proto__, 'caller').value; })() is undefined.
PASS (function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(arguments, 'callee').value; })() is undefined.
PASS (function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(arguments, 'caller'); })() is undefined.
PASS (function f(arg){'use strict'; var descriptor = Object.getOwnPropertyDescriptor(arguments, 'callee'); return descriptor.get === descriptor.set; })() is true
PASS (function f(arg){'use strict'; var descriptor = Object.getOwnPropertyDescriptor(f.__proto__, 'caller'); return descriptor.get === descriptor.set; })() is true
PASS (function f(arg){'use strict'; var descriptor = Object.getOwnPropertyDescriptor(f.__proto__, 'arguments'); return descriptor.get === descriptor.set; })() is true
PASS 'use strict'; (function f() { for(var i in this); })(); true; is true
PASS 'use strict'̻ threw exception SyntaxError: Invalid or unexpected token.
PASS (function (){'use strict'̻}) threw exception SyntaxError: Invalid or unexpected token.
PASS 'use strict'5.f threw exception SyntaxError: Invalid or unexpected token.
PASS (function (){'use strict'5.f}) threw exception SyntaxError: Invalid or unexpected token.
PASS 'use strict';̻ threw exception SyntaxError: Invalid or unexpected token.
PASS (function (){'use strict';̻}) threw exception SyntaxError: Invalid or unexpected token.
PASS 'use strict';5.f threw exception SyntaxError: Invalid or unexpected token.
PASS (function (){'use strict';5.f}) threw exception SyntaxError: Invalid or unexpected token.
PASS 'use strict';1-(eval=1); threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict';1-(eval=1);}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict';arguments=1; threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict';arguments=1;}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict';1-(arguments=1); threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict';1-(arguments=1);}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict';var a=(eval=1); threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict';var a=(eval=1);}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict';var a=(arguments=1); threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS (function (){'use strict';var a=(arguments=1);}) threw exception SyntaxError: Unexpected eval or arguments in strict mode.
PASS 'use strict'; try { throw 1; } catch (e) { aGlobal = true; } is true
PASS 'use strict'; (function () { try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal; is true
PASS (function () {'use strict';  try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal; is true
PASS try { throw 1; } catch (e) { aGlobal = true; } is true
PASS (function () { try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal; is true
PASS (function () {try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal; is true
FAIL String(Object.getOwnPropertyDescriptor((function() { "use strict"; }).__proto__, "caller").get) should be function () {
    [native code]
}. Was function () { [native code] }.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/basic-strict-mode.js                                        0000664 0000000 0000000 00000032512 14746647661 0023534 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test behaviour of strict mode");

var globalThisTest;
function testThis() {
    "use strict";
    return this;
}
function testThisDotAccess() {
    "use strict";
    return this.length;
}
function testThisBracketAccess(prop) {
    "use strict";
    return this[prop];
}
function testGlobalAccess() {
    return testThis();
}
function shouldBeSyntaxError(str) {
    shouldThrow(str);
    shouldThrow("(function (){" + str + "})");
}
function testLineContinuation() {
    "use stric\
t";
    return this;
}
function testEscapeSequence() {
    "use\u0020strict";
    return this;
}

shouldBe("testThis.call(null)", "null");
shouldBe("testThis.call(1)", "1");
shouldBe("testThis.call(true)", "true");
shouldBe("testThis.call(false)", "false");
shouldBe("testThis.call(undefined)", "undefined");
shouldBeFalse("testLineContinuation.call(undefined) === undefined");
shouldBeFalse("testEscapeSequence.call(undefined) === undefined");
shouldBe("testThis.call('a string')", "'a string'");
shouldBe("testThisDotAccess.call('a string')", "'a string'.length");
shouldThrow("testThisDotAccess.call(null)");
shouldThrow("testThisDotAccess.call(undefined)");
shouldBeUndefined("testThisDotAccess.call(true)");
shouldBeUndefined("testThisDotAccess.call(false)");
shouldBeUndefined("testThisDotAccess.call(1)");
shouldBe("testThisBracketAccess.call('a string', 'length')", "'a string'.length");
shouldThrow("testThisBracketAccess.call(null, 'length')");
shouldThrow("testThisBracketAccess.call(undefined, 'length')");
shouldBeUndefined("testThisBracketAccess.call(true, 'length')");
shouldBeUndefined("testThisBracketAccess.call(false, 'length')");
shouldBeUndefined("testThisBracketAccess.call(1, 'length')");
shouldBeUndefined("Function('\"use strict\"; return this;')()");
shouldThrow("Function('\"use strict\"; with({});')");


shouldBe("testGlobalAccess()", "undefined");
shouldBe("testThis.call()", "undefined");
shouldBe("testThis.apply()", "undefined");
shouldBe("testThis.call(undefined)", "undefined");
shouldBe("testThis.apply(undefined)", "undefined");

shouldBeSyntaxError("(function eval(){'use strict';})");
shouldBeSyntaxError("(function (eval){'use strict';})");
shouldBeSyntaxError("(function arguments(){'use strict';})");
shouldBeSyntaxError("(function (arguments){'use strict';})");
shouldBeSyntaxError("(function (){'use strict'; var eval;})");
shouldBeSyntaxError("(function (){'use strict'; var arguments;})");
shouldBeSyntaxError("(function (){'use strict'; try{}catch(eval){}})");
shouldBeSyntaxError("(function (){'use strict'; try{}catch(arguments){}})");
shouldBeSyntaxError("(function (a, a){'use strict';})");
shouldBeSyntaxError("(function (a){'use strict'; delete a;})()");
shouldBeSyntaxError("(function (){'use strict'; var a; delete a;})()");
shouldBeSyntaxError("(function (){var a; function f() {'use strict'; delete a;} })()");
shouldBeSyntaxError("(function (){'use strict'; with(1){};})");
shouldThrow("(function (){'use strict'; arguments.callee; })()");
shouldBeUndefined("(function (){'use strict'; arguments.caller; })()");
shouldThrow("(function f(){'use strict'; f.arguments; })()");
shouldThrow("(function f(){'use strict'; f.caller; })()");
shouldThrow("(function f(){'use strict'; f.arguments=5; })()");
shouldThrow("(function f(){'use strict'; f.caller=5; })()");
shouldThrow("(function (arg){'use strict'; arguments.callee; })()");
shouldBeUndefined("(function (arg){'use strict'; arguments.caller; })()");
shouldThrow("(function f(arg){'use strict'; f.arguments; })()");
shouldThrow("(function f(arg){'use strict'; f.caller; })()");
shouldThrow("(function f(arg){'use strict'; f.arguments=5; })()");
shouldThrow("(function f(arg){'use strict'; f.caller=5; })()");

// arguments/caller poisoning should be visible on the intrinsic %FunctionPrototype%, but not throw with 'in' & 'hasOwnProperty'.
shouldBeTrue('"caller" in function(){"use strict"}');
shouldBeFalse('(function(){"use strict";}).hasOwnProperty("caller")');
shouldBeTrue('(function(){"use strict";}).__proto__.hasOwnProperty("caller")');
shouldBeTrue('"arguments" in function(){"use strict"}');
shouldBeFalse('(function(){"use strict";}).hasOwnProperty("arguments")');
shouldBeTrue('(function(){"use strict";}).__proto__.hasOwnProperty("arguments")');

shouldBeSyntaxError("'use strict'; (function (){with(1){};})");
shouldBeSyntaxError("'use strict'; (function (){var a; delete a;})");
shouldBeSyntaxError("'use strict'; var a; (function (){ delete a;})");
shouldBeSyntaxError("var a; (function (){ 'use strict'; delete a;})");
shouldBeSyntaxError("'misc directive'; 'use strict'; with({}){}");
shouldThrow("'use strict'; return");
shouldBeSyntaxError("'use strict'; break");
shouldBeSyntaxError("'use strict'; continue");
shouldThrow("'use strict'; for(;;)return");
shouldBeSyntaxError("'use strict'; for(;;)break missingLabel");
shouldBeSyntaxError("'use strict'; for(;;)continue missingLabel");
shouldBeSyntaxError("'use strict'; 007;");
shouldBeSyntaxError("'use strict'; '\\007';");
shouldBeSyntaxError("'\\007'; 'use strict';");

var someDeclaredGlobal;
aDeletableProperty = 'test';

shouldBeSyntaxError("'use strict'; delete aDeletableProperty;");
shouldBeSyntaxError("'use strict'; (function (){ delete someDeclaredGlobal;})");
shouldBeSyntaxError("(function (){ 'use strict'; delete someDeclaredGlobal;})");
shouldBeTrue("'use strict'; if (0) { someGlobal = 'Shouldn\\'t be able to assign this.'; }; true;");
shouldThrow("'use strict'; someGlobal = 'Shouldn\\'t be able to assign this.'; ");
shouldThrow("'use strict'; (function f(){ f = 'shouldn\\'t be able to assign to function expression name'; })()");
shouldThrow("'use strict'; eval('var introducedVariable = \"FAIL: variable introduced into containing scope\";'); introducedVariable");
var objectWithReadonlyProperty = {};
Object.defineProperty(objectWithReadonlyProperty, "prop", {value: "value", writable:false});
shouldThrow("'use strict'; objectWithReadonlyProperty.prop = 'fail'");
shouldThrow("'use strict'; delete objectWithReadonlyProperty.prop");
readonlyPropName = "prop";
shouldThrow("'use strict'; delete objectWithReadonlyProperty[readonlyPropName]");
shouldBeSyntaxError("'use strict'; ++eval");
shouldBeSyntaxError("'use strict'; eval++");
shouldBeSyntaxError("'use strict'; --eval");
shouldBeSyntaxError("'use strict'; eval--");
shouldBeSyntaxError("'use strict'; function f() { ++arguments }");
shouldBeSyntaxError("'use strict'; function f() { arguments++ }");
shouldBeSyntaxError("'use strict'; function f() { --arguments }");
shouldBeSyntaxError("'use strict'; function f() { arguments-- }");
var global = this;
shouldThrow("global.eval('\"use strict\"; if (0) ++arguments; true;')");
shouldBeSyntaxError("'use strict'; ++(1, eval)");
shouldBeSyntaxError("'use strict'; (1, eval)++");
shouldBeSyntaxError("'use strict'; --(1, eval)");
shouldBeSyntaxError("'use strict'; (1, eval)--");
shouldBeSyntaxError("'use strict'; function f() { ++(1, arguments) }");
shouldBeSyntaxError("'use strict'; function f() { (1, arguments)++ }");
shouldBeSyntaxError("'use strict'; function f() { --(1, arguments) }");
shouldBeSyntaxError("'use strict'; function f() { (1, arguments)-- }");
shouldBeSyntaxError("'use strict'; undefined; if (0) delete +a.b");
shouldBeSyntaxError("'use strict'; undefined; if (0) delete ++a.b");
shouldBeSyntaxError("'use strict'; undefined; if (0) delete void a.b");

shouldBeTrue("(function (a){'use strict'; a = false; return a !== arguments[0]; })(true)");
shouldBeTrue("(function (a){'use strict'; arguments[0] = false; return a !== arguments[0]; })(true)");
shouldBeTrue("(function (a){'use strict'; a=false; return arguments; })(true)[0]");
shouldBeTrue("(function (a){'use strict'; arguments[0]=false; return a; })(true)");
shouldBeTrue("(function (a){'use strict'; arguments[0]=true; return arguments; })(false)[0]");
shouldBeTrue("(function (){'use strict';  arguments[0]=true; return arguments; })(false)[0]");
shouldBeTrue("(function (a){'use strict'; arguments[0]=true; a=false; return arguments; })()[0]");
shouldBeTrue("(function (a){'use strict'; arguments[0]=false; a=true; return a; })()");
shouldBeTrue("(function (a){'use strict'; arguments[0]=true; return arguments; })()[0]");
shouldBeTrue("(function (){'use strict';  arguments[0]=true; return arguments; })()[0]");

// Same tests again, this time forcing an activation to be created as well
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); a = false; return a !== arguments[0]; })(true)");
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); arguments[0] = false; return a !== arguments[0]; })(true)");
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); a=false; return arguments; })(true)[0]");
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=false; return a; })(true)");
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; return arguments; })(false)[0]");
shouldBeTrue("(function (){'use strict';  var local; (function (){local;})(); arguments[0]=true; return arguments; })(false)[0]");
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; a=false; return arguments; })()[0]");
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=true; return arguments; })()[0]");
shouldBeTrue("(function (a){'use strict'; var local; (function (){local;})(); arguments[0]=false; a=true; return a; })()");
shouldBeTrue("(function (){'use strict';  var local; (function (){local;})(); arguments[0]=true; return arguments; })()[0]");

shouldBeTrue("'use strict'; (function (){var a = true; eval('var a = false'); return a; })()");
shouldBeTrue("(function (){var a = true; eval('\"use strict\"; var a = false'); return a; })()");

shouldBeUndefined("(function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(f.__proto__, 'arguments').value; })()");
shouldBeUndefined("(function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(f.__proto__, 'caller').value; })()");
shouldBeUndefined("(function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(arguments, 'callee').value; })()");
shouldBeUndefined("(function f(arg){'use strict'; return Object.getOwnPropertyDescriptor(arguments, 'caller'); })()");
shouldBeTrue("(function f(arg){'use strict'; var descriptor = Object.getOwnPropertyDescriptor(arguments, 'callee'); return descriptor.get === descriptor.set; })()");
shouldBeTrue("(function f(arg){'use strict'; var descriptor = Object.getOwnPropertyDescriptor(f.__proto__, 'caller'); return descriptor.get === descriptor.set; })()");
shouldBeTrue("(function f(arg){'use strict'; var descriptor = Object.getOwnPropertyDescriptor(f.__proto__, 'arguments'); return descriptor.get === descriptor.set; })()");
shouldBeTrue("'use strict'; (function f() { for(var i in this); })(); true;")

shouldBeSyntaxError("'use strict'\u033b");
shouldBeSyntaxError("'use strict'5.f");
shouldBeSyntaxError("'use strict';\u033b");
shouldBeSyntaxError("'use strict';5.f");
shouldBeSyntaxError("'use strict';1-(eval=1);");
shouldBeSyntaxError("'use strict';arguments=1;");
shouldBeSyntaxError("'use strict';1-(arguments=1);");
shouldBeSyntaxError("'use strict';var a=(eval=1);");
shouldBeSyntaxError("'use strict';var a=(arguments=1);");

var aGlobal = false;
shouldBeTrue("'use strict'; try { throw 1; } catch (e) { aGlobal = true; }");
aGlobal = false;
shouldBeTrue("'use strict'; (function () { try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal;");
aGlobal = false;
shouldBeTrue("(function () {'use strict';  try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal;");
aGlobal = false;
shouldBeTrue("try { throw 1; } catch (e) { aGlobal = true; }");
aGlobal = false;
shouldBeTrue("(function () { try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal;");
aGlobal = false;
shouldBeTrue("(function () {try { throw 1; } catch (e) { aGlobal = true; }})(); aGlobal;");

// Make sure this doesn't crash!
shouldBe('String(Object.getOwnPropertyDescriptor((function() { "use strict"; }).__proto__, "caller").get)', "'function () {\\n    [native code]\\n}'");
                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/date-big-setmonth-expected.txt                              0000664 0000000 0000000 00000003240 14746647661 0025534 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks for a regression against Date.setMonth fails with big values due to overflow.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS d.valueOf() is new Date(1980, 8, 1).valueOf()
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/test/webkit/fast/js/date-big-setmonth.js                                        0000664 0000000 0000000 00000003265 14746647661 0023541 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'This test checks for a regression against <a href="https://bugs.webkit.org/show_bug.cgi?id=4781">Date.setMonth fails with big values due to overflow</a>.'
);

var d = new Date(1970, 0, 1);
d.setMonth(128);
shouldBe("d.valueOf()", "new Date(1980, 8, 1).valueOf()");
                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/date-negative-setmonth-expected.txt                         0000664 0000000 0000000 00000003226 14746647661 0026601 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks for a regression against Date.setMonth fails with negative values.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS d.valueOf() is new Date(2004, 9, 15).valueOf()
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/test/webkit/fast/js/date-negative-setmonth.js                                   0000664 0000000 0000000 00000003253 14746647661 0024577 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'This test checks for a regression against <a href="https://bugs.webkit.org/show_bug.cgi?id=5280">Date.setMonth fails with negative values</a>.'
);

var d = new Date(2005, 6, 15);
d.setMonth(-3);
shouldBe("d.valueOf()", "new Date(2004, 9, 15).valueOf()");
                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/date-preserve-milliseconds-expected.txt                     0000664 0000000 0000000 00000003627 14746647661 0027463 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The following test checks if an existing milliseconds value gets preserved if a call to setHours(), setMinutes() or setSeconds() does not specify the milliseconds. See https://bugs.webkit.org/show_bug.cgi?id=3759

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS d.getMilliseconds() is 1
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/date-preserve-milliseconds.js                               0000664 0000000 0000000 00000004311 14746647661 0025450 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
'The following test checks if an existing milliseconds value gets preserved if a call to setHours(), setMinutes() or setSeconds() does not specify the milliseconds. See <a href="https://bugs.webkit.org/show_bug.cgi?id=3759">https://bugs.webkit.org/show_bug.cgi?id=3759</a>'
);

var d = new Date(0);
d.setMilliseconds(1);

var oldValue = d.getMilliseconds();

d.setHours(8);
shouldBe("d.getMilliseconds()", oldValue.toString());
d.setHours(8, 30);
shouldBe("d.getMilliseconds()", oldValue.toString());
d.setHours(8, 30, 40);
shouldBe("d.getMilliseconds()", oldValue.toString());
d.setMinutes(45);
shouldBe("d.getMilliseconds()", oldValue.toString());
d.setMinutes(45, 40);
shouldBe("d.getMilliseconds()", oldValue.toString());
d.setSeconds(50);
shouldBe("d.getMilliseconds()", oldValue.toString());
                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/date-toisostring-expected.txt                               0000664 0000000 0000000 00000004734 14746647661 0025531 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests for Date.toISOString

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Date.toISOString.call({}) threw exception TypeError: Cannot read properties of undefined (reading 'call').
PASS Date.toISOString.call(0) threw exception TypeError: Cannot read properties of undefined (reading 'call').
PASS new Date(-400).toISOString() is '1969-12-31T23:59:59.600Z'
PASS new Date(0).toISOString() is '1970-01-01T00:00:00.000Z'
PASS new Date('1 January 1500 UTC').toISOString() is '1500-01-01T00:00:00.000Z'
PASS new Date('1 January 2000 UTC').toISOString() is '2000-01-01T00:00:00.000Z'
PASS new Date('1 January 4000 UTC').toISOString() is '4000-01-01T00:00:00.000Z'
PASS new Date('1 January 100000 UTC').toISOString() is '+100000-01-01T00:00:00.000Z'
FAIL new Date('1 January -1 UTC').toISOString() should be -000001-01-01T00:00:00.000Z. Threw exception RangeError: Invalid time value
PASS new Date('10 March 2000 UTC').toISOString() is '2000-03-10T00:00:00.000Z'
PASS throwsRangeError("new Date(NaN).toISOString()") is true
PASS successfullyParsed is true

TEST COMPLETE

                                    node-23.7.0/deps/v8/test/webkit/fast/js/date-toisostring.js                                         0000664 0000000 0000000 00000004624 14746647661 0023525 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Tests for Date.toISOString");

function throwsRangeError(str)
{
    try {
        eval(str);
    } catch (e) {
        return e instanceof RangeError;
    }
    return false;
}

shouldThrow("Date.toISOString.call({})");
shouldThrow("Date.toISOString.call(0)");

shouldBe("new Date(-400).toISOString()", "'1969-12-31T23:59:59.600Z'");
shouldBe("new Date(0).toISOString()", "'1970-01-01T00:00:00.000Z'");
shouldBe("new Date('1 January 1500 UTC').toISOString()", "'1500-01-01T00:00:00.000Z'");
shouldBe("new Date('1 January 2000 UTC').toISOString()", "'2000-01-01T00:00:00.000Z'");
shouldBe("new Date('1 January 4000 UTC').toISOString()", "'4000-01-01T00:00:00.000Z'");
shouldBe("new Date('1 January 100000 UTC').toISOString()", "'+100000-01-01T00:00:00.000Z'");
shouldBe("new Date('1 January -1 UTC').toISOString()", "'-000001-01-01T00:00:00.000Z'");
shouldBe("new Date('10 March 2000 UTC').toISOString()", "'2000-03-10T00:00:00.000Z'");
shouldBeTrue('throwsRangeError("new Date(NaN).toISOString()")');
                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/deep-recursion-test-expected.txt                            0000664 0000000 0000000 00000004112 14746647661 0026121 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test how deep we can recurse, and that we get an exception when we do, as opposed to a stack overflow.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


FAIL msg should be RangeError: Maximum call stack size exceeded.. Was RangeError: Maximum call stack size exceeded.
FAIL msg should be RangeError: Maximum call stack size exceeded.. Was RangeError: Maximum call stack size exceeded.
FAIL msg should be RangeError: Maximum call stack size exceeded.. Was RangeError: Maximum call stack size exceeded.
FAIL msg should be RangeError: Maximum call stack size exceeded.. Was RangeError: Maximum call stack size exceeded.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/deep-recursion-test.js                                      0000664 0000000 0000000 00000005556 14746647661 0024134 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This neuters too low stack size passed by the flag fuzzer.
// Flags: --stack-size=864

description("This test how deep we can recurse, and that we get an exception when we do, as opposed to a stack overflow.");

    function simpleRecursion(depth) {
        if (depth)
            simpleRecursion(depth - 1);
    }

    try {
        simpleRecursion(4000);
    } catch (ex) {
        debug("FAIL: " + ex);
    }

    try {
        simpleRecursion(10000000);
    } catch (ex) {
        var msg = String(eval(ex));
        shouldBe("msg", "'RangeError: Maximum call stack size exceeded.'");
    }

    try {
        simpleRecursion(1000000000);
    } catch (ex) {
        var msg = String(eval(ex));
        shouldBe("msg", "'RangeError: Maximum call stack size exceeded.'");
    }

    var tooFewArgsDepth = 0;

    function tooFewArgsRecursion(a) {
        if (tooFewArgsDepth) {
            tooFewArgsDepth--;
            tooFewArgsRecursion();
        }
    }

    try {
        tooFewArgsDepth = 10000000;
        tooFewArgsRecursion();
    } catch (ex) {
        var msg = String(eval(ex));
        shouldBe("msg", "'RangeError: Maximum call stack size exceeded.'");
    }

    function tooManyArgsRecursion(depth) {
        if (depth)
            tooManyArgsRecursion(depth - 1, 1);
    }

    try {
        tooManyArgsRecursion(10000000, 1);
    } catch (ex) {
        var msg = String(eval(ex));
        shouldBe("msg", "'RangeError: Maximum call stack size exceeded.'");
    }
                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/end-in-string-escape-expected.txt                           0000664 0000000 0000000 00000003216 14746647661 0026140 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test for bug 33641: Assertion failure in Lexer.cpp if input stream ends while in string escape.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


Passed if no assertion failure.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/end-in-string-escape.js                                     0000664 0000000 0000000 00000003236 14746647661 0024140 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description('Test for <a href="https://bugs.webkit.org/show_bug.cgi?id=33641">bug 33641</a>: Assertion failure in Lexer.cpp if input stream ends while in string escape.');

debug("Passed if no assertion failure.");

try {
    eval('"\\');
} catch (ex) {
}
                                                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/exception-properties-expected.txt                           0000664 0000000 0000000 00000003443 14746647661 0026416 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test for correct properties on Error objects.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS enumerableProperties(error) is []
FAIL enumerableProperties(nativeError) should be stack,line,sourceURL. Was .
PASS Object.getPrototypeOf(nativeError).name is "RangeError"
PASS Object.getPrototypeOf(nativeError).message is ""
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/exception-properties.js                                     0000664 0000000 0000000 00000004020 14746647661 0024404 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test for correct properties on Error objects.");

function enumerableProperties(object)
{
    var result = [];
    for (var i in object)
        result.push(i);
    return result;
}

try {
    // generate a RangeError.
    [].length = -1;
} catch (rangeError) {
    var nativeError = rangeError;
    var error = new Error("message");

    shouldBe('enumerableProperties(error)', '[]');
    shouldBe('enumerableProperties(nativeError)', '["stack", "line", "sourceURL"]');

    shouldBe('Object.getPrototypeOf(nativeError).name', '"RangeError"');
    shouldBe('Object.getPrototypeOf(nativeError).message', '""');
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/test/webkit/fast/js/exception-registerfile-shrink-expected.txt                  0000664 0000000 0000000 00000003214 14746647661 0030176 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test for REGRESSION(r60392): Registerfile can be unwound too far following an exception. If the test doesn't crash, you pass.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/test/webkit/fast/js/exception-registerfile-shrink.js                            0000664 0000000 0000000 00000003310 14746647661 0026171 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"Test for <a href='https://bugs.webkit.org/show_bug.cgi?id=41948'>REGRESSION(r60392): Registerfile can be unwound too far following an exception</a>. If the test doesn't crash, you pass."
);

eval('try { throw 0; } catch(e) {}');

var x = new String();
'' + escape(x.substring(0, 1));
                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/excessive-comma-usage-expected.txt                          0000664 0000000 0000000 00000003347 14746647661 0026423 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Test that we can handle excessively large initializer lists

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS new Function(initializerTestString)() is true
PASS new Function(declarationTestString)() is true
PASS new Function(commaExpressionTestString)() is true
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/excessive-comma-usage.js                                    0000664 0000000 0000000 00000004136 14746647661 0024416 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("Test that we can handle excessively large initializer lists");

var initializerTestString = "var a=0";
for (var i = 0; i < 5000; i++)
    initializerTestString += ",a"+i+"="+i;
initializerTestString += ";return true;";

var declarationTestString = "var a";
for (var i = 0; i < 5000; i++)
    declarationTestString += ",a"+i;
declarationTestString += ";return true;";

var commaExpressionTestString = "1";
for (var i = 0; i < 2500; i++)
    commaExpressionTestString += ",1";
commaExpressionTestString += ";return true;";

shouldBeTrue("new Function(initializerTestString)()");
shouldBeTrue("new Function(declarationTestString)()");
shouldBeTrue("new Function(commaExpressionTestString)()");
                                                                                                                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/test/webkit/fast/js/function-apply-expected.txt                                 0000664 0000000 0000000 00000006507 14746647661 0025202 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Tests to ensure that Function.apply works correctly for Arrays, arguments and array-like objects.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS argumentsApply1(1, 2, 3) is 1
PASS argumentsApply2(1, 2, 3) is 2
PASS argumentsApply3(1, 2, 3) is 3
PASS argumentsApplyLength(1, 2, 3) is 3
PASS argumentsApplyExcessArguments(1, 2, 3) is 3
PASS executedAdditionalArgument is true
PASS arrayApply1([1, 2, 3]) is 1
PASS arrayApply2([1, 2, 3]) is 2
PASS arrayApply3([1, 2, 3]) is 3
PASS arrayApplyLength([1, 2, 3]) is 3
PASS argumentsApplyDelete1(1, 2, 3) is 1
PASS argumentsApplyDelete2(1, 2, 3) is undefined
PASS argumentsApplyDelete3(1, 2, 3) is 3
PASS argumentsApplyDeleteLength(1, 2, 3) is 3
PASS arrayApplyDelete1([1, 2, 3]) is 1
PASS arrayApplyDelete2([1, 2, 3]) is undefined
PASS arrayApplyDelete3([1, 2, 3]) is 3
PASS arrayApplyDeleteLength([1, 2, 3]) is 3
PASS argumentsApplyChangeLength1(1) is 2
PASS argumentsApplyChangeLength2(1) is 2
PASS argumentsApplyChangeLength3(1) is 2
PASS argumentsApplyChangeLength4(1) is 0
PASS argumentsApplyChangeLength5(1) is 0
PASS arrayApplyChangeLength1() is 2
PASS arrayApplyChangeLength2() is 2
PASS arrayApplyChangeLength3() is 2
PASS arrayApplyChangeLength4() is 0
PASS var a = []; a.length = 0xFFFE; [].constructor.apply('', a).length is 0xFFFE
PASS var a = []; a.length = 0xFFFF; [].constructor.apply('', a).length is 0xFFFF
PASS var a = []; a.length = 0x10000; [].constructor.apply('', a).length is 0x10000
PASS var a = []; a.length = 0x10001; [].constructor.apply('', a).length is 0x10001
PASS var a = []; a.length = 0xFFFFFFFE; [].constructor.apply('', a).length threw exception RangeError: Invalid array length.
PASS var a = []; a.length = 0xFFFFFFFF; [].constructor.apply('', a).length threw exception RangeError: Invalid array length.
PASS (function(a,b,c,d){ return d ? -1 : (a+b+c); }).apply(undefined, {length:3, 0:100, 1:20, 2:3}) is 123
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/function-apply.js                                           0000664 0000000 0000000 00000017062 14746647661 0023176 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// This neuters too low stack size passed by the flag fuzzer.
// Flags: --stack-size=864

description('Tests to ensure that Function.apply works correctly for Arrays, arguments and array-like objects.');

function argumentsApply1(a, b, c)
{
    function t(a, b, c)
    {
        return a;
    }
    return t.apply(null, arguments);
}

function argumentsApply2(a, b, c)
{
    function t(a, b, c)
    {
        return b;
    }
    return t.apply(null, arguments);
}

function argumentsApply3(a, b, c)
{
    function t(a, b, c)
    {
        return c;
    }
    return t.apply(null, arguments);
}

function argumentsApplyLength(a, b, c)
{
    function t(a, b, c)
    {
        return arguments.length;
    }
    return t.apply(null, arguments);
}
var executedAdditionalArgument = false;
function argumentsApplyExcessArguments(a, b, c)
{
    function t(a, b, c)
    {
        return arguments.length;
    }
    return t.apply(null, arguments, executedAdditionalArgument = true);
}

shouldBe("argumentsApply1(1, 2, 3)", "1");
shouldBe("argumentsApply2(1, 2, 3)", "2");
shouldBe("argumentsApply3(1, 2, 3)", "3");
shouldBe("argumentsApplyLength(1, 2, 3)", "3");
shouldBe("argumentsApplyExcessArguments(1, 2, 3)", "3");
shouldBeTrue("executedAdditionalArgument");

function arrayApply1(array)
{
    function t(a, b, c)
    {
        return a;
    }
    return t.apply(null, array);
}

function arrayApply2(array)
{
    function t(a, b, c)
    {
        return b;
    }
    return t.apply(null, array);
}

function arrayApply3(array)
{
    function t(a, b, c)
    {
        return c;
    }
    return t.apply(null, array);
}

function arrayApplyLength(array)
{
    function t(a, b, c)
    {
        return arguments.length;
    }
    return t.apply(null, array);
}

shouldBe("arrayApply1([1, 2, 3])", "1");
shouldBe("arrayApply2([1, 2, 3])", "2");
shouldBe("arrayApply3([1, 2, 3])", "3");
shouldBe("arrayApplyLength([1, 2, 3])", "3");


function argumentsApplyDelete1(a, b, c)
{
    function t(a, b, c)
    {
        return a;
    }
    delete arguments[1];
    return t.apply(null, arguments);
}

function argumentsApplyDelete2(a, b, c)
{
    function t(a, b, c)
    {
        return b;
    }
    delete arguments[1];
    return t.apply(null, arguments);
}

function argumentsApplyDelete3(a, b, c)
{
    function t(a, b, c)
    {
        return c;
    }
    delete arguments[1];
    return t.apply(null, arguments);
}

function argumentsApplyDeleteLength(a, b, c)
{
    function t(a, b, c)
    {
        return arguments.length;
    }
    delete arguments[1];
    return t.apply(null, arguments);
}

shouldBe("argumentsApplyDelete1(1, 2, 3)", "1");
shouldBe("argumentsApplyDelete2(1, 2, 3)", "undefined");
shouldBe("argumentsApplyDelete3(1, 2, 3)", "3");
shouldBe("argumentsApplyDeleteLength(1, 2, 3)", "3");


function arrayApplyDelete1(array)
{
    function t(a, b, c)
    {
        return a;
    }
    delete array[1];
    return t.apply(null, array);
}

function arrayApplyDelete2(array)
{
    function t(a, b, c)
    {
        return b;
    }
    delete array[1];
    return t.apply(null, array);
}

function arrayApplyDelete3(array)
{
    function t(a, b, c)
    {
        return c;
    }
    delete array[1];
    return t.apply(null, array);
}

function arrayApplyDeleteLength(array)
{
    function t(a, b, c)
    {
        return arguments.length;
    }
    delete array[1];
    return t.apply(null, array);
}

shouldBe("arrayApplyDelete1([1, 2, 3])", "1");
shouldBe("arrayApplyDelete2([1, 2, 3])", "undefined");
shouldBe("arrayApplyDelete3([1, 2, 3])", "3");
shouldBe("arrayApplyDeleteLength([1, 2, 3])", "3");


function argumentsApplyChangeLength1()
{
    function f() {
        return arguments.length;
    };
    arguments.length = 2;
    return f.apply(null, arguments);
}


function argumentsApplyChangeLength2()
{
    function f(a) {
        return arguments.length;
    };
    arguments.length = 2;
    return f.apply(null, arguments);
}


function argumentsApplyChangeLength3()
{
    function f(a, b, c) {
        return arguments.length;
    };
    arguments.length = 2;
    return f.apply(null, arguments);
};

function argumentsApplyChangeLength4()
{
    function f() {
        return arguments.length;
    };
    arguments.length = 0;
    return f.apply(null, arguments);
};

function argumentsApplyChangeLength5()
{
    function f() {
        return arguments.length;
    };
    arguments.length = "Not A Number";
    return f.apply(null, arguments);
}

shouldBe("argumentsApplyChangeLength1(1)", "2");
shouldBe("argumentsApplyChangeLength2(1)", "2");
shouldBe("argumentsApplyChangeLength3(1)", "2");
shouldBe("argumentsApplyChangeLength4(1)", "0");
shouldBe("argumentsApplyChangeLength5(1)", "0");

function arrayApplyChangeLength1()
{
    function f() {
        return arguments.length;
    };
    var array = [];
    array.length = 2;
    return f.apply(null, array);
}

function arrayApplyChangeLength2()
{
    function f(a) {
        return arguments.length;
    };
    var array = [];
    array.length = 2;
    return f.apply(null, array);
}

function arrayApplyChangeLength3()
{
    function f(a, b, c) {
        return arguments.length;
    };
    var array = [];
    array.length = 2;
    return f.apply(null, array);
}

function arrayApplyChangeLength4()
{
    function f() {
        return arguments.length;
    };
    var array = [1];
    array.length = 0;
    return f.apply(null, array);
};

shouldBe("arrayApplyChangeLength1()", "2");
shouldBe("arrayApplyChangeLength2()", "2");
shouldBe("arrayApplyChangeLength3()", "2");
shouldBe("arrayApplyChangeLength4()", "0");

shouldBe("var a = []; a.length = 0xFFFE; [].constructor.apply('', a).length", "0xFFFE");
shouldBe("var a = []; a.length = 0xFFFF; [].constructor.apply('', a).length", "0xFFFF");
shouldBe("var a = []; a.length = 0x10000; [].constructor.apply('', a).length", "0x10000");
shouldBe("var a = []; a.length = 0x10001; [].constructor.apply('', a).length", "0x10001");
shouldThrow("var a = []; a.length = 0xFFFFFFFE; [].constructor.apply('', a).length");
shouldThrow("var a = []; a.length = 0xFFFFFFFF; [].constructor.apply('', a).length");

// ES5 permits apply with array-like objects.
shouldBe("(function(a,b,c,d){ return d ? -1 : (a+b+c); }).apply(undefined, {length:3, 0:100, 1:20, 2:3})", '123');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/function-constructor-error-expected.txt                     0000664 0000000 0000000 00000003554 14746647661 0027570 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks that the Function constructor detects some syntax errors correctly (bug#59795).

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


FAIL Function('(i + (j)') should throw SyntaxError: Expected token ')'. Threw exception SyntaxError: Unexpected token '}'.
FAIL Function('return (i + (j)') should throw SyntaxError: Expected token ')'. Threw exception SyntaxError: Unexpected token '}'.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                    node-23.7.0/deps/v8/test/webkit/fast/js/function-constructor-error.js                               0000664 0000000 0000000 00000003261 14746647661 0025561 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"This test checks that the Function constructor detects some syntax errors correctly (bug#59795)."
);

shouldThrow("Function('(i + (j)')", '"SyntaxError: Expected token \')\'"');
shouldThrow("Function('return (i + (j)')", '"SyntaxError: Expected token \')\'"');
                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/function-decompilation-operators-expected.txt               0000664 0000000 0000000 00000010455 14746647661 0030715 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks toString() round-trip decompilation for binary and unary operators.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS decompiledFunction is 'function () {  x + + y;}'
PASS decompiledFunction is 'function () {  x + - y;}'
PASS decompiledFunction is 'function () {  x - + y;}'
PASS decompiledFunction is 'function () {  x - - y;}'
PASS decompiledFunction is 'function () {  x * + y;}'
PASS decompiledFunction is 'function () {  x * - y;}'
PASS decompiledFunction is 'function () {  x / + y;}'
PASS decompiledFunction is 'function () {  x / - y;}'
PASS decompiledFunction is 'function () {  x % + y;}'
PASS decompiledFunction is 'function () {  x % - y;}'
PASS decompiledFunction is 'function () {  x++ + y;}'
PASS decompiledFunction is 'function () {  x++ - y;}'
PASS decompiledFunction is 'function () {  x++ * y;}'
PASS decompiledFunction is 'function () {  x++ / y;}'
PASS decompiledFunction is 'function () {  x-- + y;}'
PASS decompiledFunction is 'function () {  x-- - y;}'
PASS decompiledFunction is 'function () {  x-- * y;}'
PASS decompiledFunction is 'function () {  x-- / y;}'
PASS decompiledFunction is 'function () {  x + ++y;}'
PASS decompiledFunction is 'function () {  x - ++y;}'
PASS decompiledFunction is 'function () {  x * ++y;}'
PASS decompiledFunction is 'function () {  x / ++y;}'
PASS decompiledFunction is 'function () {  x + --y;}'
PASS decompiledFunction is 'function () {  x - --y;}'
PASS decompiledFunction is 'function () {  x * --y;}'
PASS decompiledFunction is 'function () {  x / --y;}'
PASS decompiledFunction is 'function () {  x++ + ++y;}'
PASS decompiledFunction is 'function () {  x++ - ++y;}'
PASS decompiledFunction is 'function () {  x++ * ++y;}'
PASS decompiledFunction is 'function () {  x++ / ++y;}'
PASS decompiledFunction is 'function () {  x-- + ++y;}'
PASS decompiledFunction is 'function () {  x-- - ++y;}'
PASS decompiledFunction is 'function () {  x-- * ++y;}'
PASS decompiledFunction is 'function () {  x-- / ++y;}'
PASS decompiledFunction is 'function () {  x++ + --y;}'
PASS decompiledFunction is 'function () {  x++ - --y;}'
PASS decompiledFunction is 'function () {  x++ * --y;}'
PASS decompiledFunction is 'function () {  x++ / --y;}'
PASS decompiledFunction is 'function () {  x-- + --y;}'
PASS decompiledFunction is 'function () {  x-- - --y;}'
PASS decompiledFunction is 'function () {  x-- * --y;}'
PASS decompiledFunction is 'function () {  x-- / --y;}'
PASS decompiledFunction is 'function () {  + + x;}'
PASS decompiledFunction is 'function () {  + - x;}'
PASS decompiledFunction is 'function () {  - + x;}'
PASS decompiledFunction is 'function () {  - - x;}'
PASS decompiledFunction is 'function () {  1;}'
PASS decompiledFunction is 'function () {  -1;}'
PASS decompiledFunction is 'function () {  - -1;}'
PASS decompiledFunction is 'function () {  - - 0;}'
PASS decompiledFunction is 'function () {  - - NaN;}'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/function-decompilation-operators.js                         0000664 0000000 0000000 00000005317 14746647661 0026714 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("This test checks toString() round-trip decompilation for binary and unary operators.");

    var tests = [
        "x + + y",
        "x + - y",
        "x - + y",
        "x - - y",
        "x * + y",
        "x * - y",
        "x / + y",
        "x / - y",
        "x % + y",
        "x % - y",
        "x++ + y",
        "x++ - y",
        "x++ * y",
        "x++ / y",
        "x-- + y",
        "x-- - y",
        "x-- * y",
        "x-- / y",
        "x + ++y",
        "x - ++y",
        "x * ++y",
        "x / ++y",
        "x + --y",
        "x - --y",
        "x * --y",
        "x / --y",
        "x++ + ++y",
        "x++ - ++y",
        "x++ * ++y",
        "x++ / ++y",
        "x-- + ++y",
        "x-- - ++y",
        "x-- * ++y",
        "x-- / ++y",
        "x++ + --y",
        "x++ - --y",
        "x++ * --y",
        "x++ / --y",
        "x-- + --y",
        "x-- - --y",
        "x-- * --y",
        "x-- / --y",
        "+ + x",
        "+ - x",
        "- + x",
        "- - x",
        "1",
        "-1",
        "- -1",
        "- - 0",
        "- - NaN"
    ];

    for (test in tests) {
        var decompiledFunction = eval("(function () {  " + tests[test] + ";})").toString().replace(/\n/g, "");
        shouldBe("decompiledFunction", "'function () {  " + tests[test] + ";}'");
    }
                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/webkit/fast/js/function-toString-parentheses-expected.txt                  0000664 0000000 0000000 00000105365 14746647661 0030207 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks that parentheses are preserved when significant, and not added where inappropriate. We need this test because the JavaScriptCore parser removes all parentheses and the serializer then adds them back.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS compileAndSerialize('a * b * c') is 'a * b * c'
PASS compileAndSerialize('(a * b) * c') is '(a * b) * c'
PASS compileAndSerialize('a * (b * c)') is 'a * (b * c)'
PASS compileAndSerialize('a * b + c') is 'a * b + c'
PASS compileAndSerialize('(a * b) + c') is '(a * b) + c'
PASS compileAndSerialize('a * (b + c)') is 'a * (b + c)'
PASS compileAndSerialize('a * b - c') is 'a * b - c'
PASS compileAndSerialize('(a * b) - c') is '(a * b) - c'
PASS compileAndSerialize('a * (b - c)') is 'a * (b - c)'
PASS compileAndSerialize('a / b / c') is 'a / b / c'
PASS compileAndSerialize('(a / b) / c') is '(a / b) / c'
PASS compileAndSerialize('a / (b / c)') is 'a / (b / c)'
PASS compileAndSerialize('a * b / c') is 'a * b / c'
PASS compileAndSerialize('(a * b) / c') is '(a * b) / c'
PASS compileAndSerialize('a * (b / c)') is 'a * (b / c)'
PASS compileAndSerialize('a / b + c') is 'a / b + c'
PASS compileAndSerialize('(a / b) + c') is '(a / b) + c'
PASS compileAndSerialize('a / (b + c)') is 'a / (b + c)'
PASS compileAndSerialize('a % b % c') is 'a % b % c'
PASS compileAndSerialize('(a % b) % c') is '(a % b) % c'
PASS compileAndSerialize('a % (b % c)') is 'a % (b % c)'
PASS compileAndSerialize('a * b % c') is 'a * b % c'
PASS compileAndSerialize('(a * b) % c') is '(a * b) % c'
PASS compileAndSerialize('a * (b % c)') is 'a * (b % c)'
PASS compileAndSerialize('a % b + c') is 'a % b + c'
PASS compileAndSerialize('(a % b) + c') is '(a % b) + c'
PASS compileAndSerialize('a % (b + c)') is 'a % (b + c)'
PASS compileAndSerialize('a + b + c') is 'a + b + c'
PASS compileAndSerialize('(a + b) + c') is '(a + b) + c'
PASS compileAndSerialize('a + (b + c)') is 'a + (b + c)'
PASS compileAndSerialize('a + b << c') is 'a + b << c'
PASS compileAndSerialize('(a + b) << c') is '(a + b) << c'
PASS compileAndSerialize('a + (b << c)') is 'a + (b << c)'
PASS compileAndSerialize('a + b >> c') is 'a + b >> c'
PASS compileAndSerialize('(a + b) >> c') is '(a + b) >> c'
PASS compileAndSerialize('a + (b >> c)') is 'a + (b >> c)'
PASS compileAndSerialize('a + b >>> c') is 'a + b >>> c'
PASS compileAndSerialize('(a + b) >>> c') is '(a + b) >>> c'
PASS compileAndSerialize('a + (b >>> c)') is 'a + (b >>> c)'
PASS compileAndSerialize('a - b - c') is 'a - b - c'
PASS compileAndSerialize('(a - b) - c') is '(a - b) - c'
PASS compileAndSerialize('a - (b - c)') is 'a - (b - c)'
PASS compileAndSerialize('a + b - c') is 'a + b - c'
PASS compileAndSerialize('(a + b) - c') is '(a + b) - c'
PASS compileAndSerialize('a + (b - c)') is 'a + (b - c)'
PASS compileAndSerialize('a - b << c') is 'a - b << c'
PASS compileAndSerialize('(a - b) << c') is '(a - b) << c'
PASS compileAndSerialize('a - (b << c)') is 'a - (b << c)'
PASS compileAndSerialize('a << b << c') is 'a << b << c'
PASS compileAndSerialize('(a << b) << c') is '(a << b) << c'
PASS compileAndSerialize('a << (b << c)') is 'a << (b << c)'
PASS compileAndSerialize('a << b < c') is 'a << b < c'
PASS compileAndSerialize('(a << b) < c') is '(a << b) < c'
PASS compileAndSerialize('a << (b < c)') is 'a << (b < c)'
PASS compileAndSerialize('a << b > c') is 'a << b > c'
PASS compileAndSerialize('(a << b) > c') is '(a << b) > c'
PASS compileAndSerialize('a << (b > c)') is 'a << (b > c)'
PASS compileAndSerialize('a << b <= c') is 'a << b <= c'
PASS compileAndSerialize('(a << b) <= c') is '(a << b) <= c'
PASS compileAndSerialize('a << (b <= c)') is 'a << (b <= c)'
PASS compileAndSerialize('a << b >= c') is 'a << b >= c'
PASS compileAndSerialize('(a << b) >= c') is '(a << b) >= c'
PASS compileAndSerialize('a << (b >= c)') is 'a << (b >= c)'
PASS compileAndSerialize('a << b instanceof c') is 'a << b instanceof c'
PASS compileAndSerialize('(a << b) instanceof c') is '(a << b) instanceof c'
PASS compileAndSerialize('a << (b instanceof c)') is 'a << (b instanceof c)'
PASS compileAndSerialize('a << b in c') is 'a << b in c'
PASS compileAndSerialize('(a << b) in c') is '(a << b) in c'
PASS compileAndSerialize('a << (b in c)') is 'a << (b in c)'
PASS compileAndSerialize('a >> b >> c') is 'a >> b >> c'
PASS compileAndSerialize('(a >> b) >> c') is '(a >> b) >> c'
PASS compileAndSerialize('a >> (b >> c)') is 'a >> (b >> c)'
PASS compileAndSerialize('a << b >> c') is 'a << b >> c'
PASS compileAndSerialize('(a << b) >> c') is '(a << b) >> c'
PASS compileAndSerialize('a << (b >> c)') is 'a << (b >> c)'
PASS compileAndSerialize('a >> b < c') is 'a >> b < c'
PASS compileAndSerialize('(a >> b) < c') is '(a >> b) < c'
PASS compileAndSerialize('a >> (b < c)') is 'a >> (b < c)'
PASS compileAndSerialize('a >>> b >>> c') is 'a >>> b >>> c'
PASS compileAndSerialize('(a >>> b) >>> c') is '(a >>> b) >>> c'
PASS compileAndSerialize('a >>> (b >>> c)') is 'a >>> (b >>> c)'
PASS compileAndSerialize('a << b >>> c') is 'a << b >>> c'
PASS compileAndSerialize('(a << b) >>> c') is '(a << b) >>> c'
PASS compileAndSerialize('a << (b >>> c)') is 'a << (b >>> c)'
PASS compileAndSerialize('a >>> b < c') is 'a >>> b < c'
PASS compileAndSerialize('(a >>> b) < c') is '(a >>> b) < c'
PASS compileAndSerialize('a >>> (b < c)') is 'a >>> (b < c)'
PASS compileAndSerialize('a < b < c') is 'a < b < c'
PASS compileAndSerialize('(a < b) < c') is '(a < b) < c'
PASS compileAndSerialize('a < (b < c)') is 'a < (b < c)'
PASS compileAndSerialize('a < b == c') is 'a < b == c'
PASS compileAndSerialize('(a < b) == c') is '(a < b) == c'
PASS compileAndSerialize('a < (b == c)') is 'a < (b == c)'
PASS compileAndSerialize('a < b != c') is 'a < b != c'
PASS compileAndSerialize('(a < b) != c') is '(a < b) != c'
PASS compileAndSerialize('a < (b != c)') is 'a < (b != c)'
PASS compileAndSerialize('a < b === c') is 'a < b === c'
PASS compileAndSerialize('(a < b) === c') is '(a < b) === c'
PASS compileAndSerialize('a < (b === c)') is 'a < (b === c)'
PASS compileAndSerialize('a < b !== c') is 'a < b !== c'
PASS compileAndSerialize('(a < b) !== c') is '(a < b) !== c'
PASS compileAndSerialize('a < (b !== c)') is 'a < (b !== c)'
PASS compileAndSerialize('a > b > c') is 'a > b > c'
PASS compileAndSerialize('(a > b) > c') is '(a > b) > c'
PASS compileAndSerialize('a > (b > c)') is 'a > (b > c)'
PASS compileAndSerialize('a < b > c') is 'a < b > c'
PASS compileAndSerialize('(a < b) > c') is '(a < b) > c'
PASS compileAndSerialize('a < (b > c)') is 'a < (b > c)'
PASS compileAndSerialize('a > b == c') is 'a > b == c'
PASS compileAndSerialize('(a > b) == c') is '(a > b) == c'
PASS compileAndSerialize('a > (b == c)') is 'a > (b == c)'
PASS compileAndSerialize('a <= b <= c') is 'a <= b <= c'
PASS compileAndSerialize('(a <= b) <= c') is '(a <= b) <= c'
PASS compileAndSerialize('a <= (b <= c)') is 'a <= (b <= c)'
PASS compileAndSerialize('a < b <= c') is 'a < b <= c'
PASS compileAndSerialize('(a < b) <= c') is '(a < b) <= c'
PASS compileAndSerialize('a < (b <= c)') is 'a < (b <= c)'
PASS compileAndSerialize('a <= b == c') is 'a <= b == c'
PASS compileAndSerialize('(a <= b) == c') is '(a <= b) == c'
PASS compileAndSerialize('a <= (b == c)') is 'a <= (b == c)'
PASS compileAndSerialize('a >= b >= c') is 'a >= b >= c'
PASS compileAndSerialize('(a >= b) >= c') is '(a >= b) >= c'
PASS compileAndSerialize('a >= (b >= c)') is 'a >= (b >= c)'
PASS compileAndSerialize('a < b >= c') is 'a < b >= c'
PASS compileAndSerialize('(a < b) >= c') is '(a < b) >= c'
PASS compileAndSerialize('a < (b >= c)') is 'a < (b >= c)'
PASS compileAndSerialize('a >= b == c') is 'a >= b == c'
PASS compileAndSerialize('(a >= b) == c') is '(a >= b) == c'
PASS compileAndSerialize('a >= (b == c)') is 'a >= (b == c)'
PASS compileAndSerialize('a instanceof b instanceof c') is 'a instanceof b instanceof c'
PASS compileAndSerialize('(a instanceof b) instanceof c') is '(a instanceof b) instanceof c'
PASS compileAndSerialize('a instanceof (b instanceof c)') is 'a instanceof (b instanceof c)'
PASS compileAndSerialize('a < b instanceof c') is 'a < b instanceof c'
PASS compileAndSerialize('(a < b) instanceof c') is '(a < b) instanceof c'
PASS compileAndSerialize('a < (b instanceof c)') is 'a < (b instanceof c)'
PASS compileAndSerialize('a instanceof b == c') is 'a instanceof b == c'
PASS compileAndSerialize('(a instanceof b) == c') is '(a instanceof b) == c'
PASS compileAndSerialize('a instanceof (b == c)') is 'a instanceof (b == c)'
PASS compileAndSerialize('a in b in c') is 'a in b in c'
PASS compileAndSerialize('(a in b) in c') is '(a in b) in c'
PASS compileAndSerialize('a in (b in c)') is 'a in (b in c)'
PASS compileAndSerialize('a < b in c') is 'a < b in c'
PASS compileAndSerialize('(a < b) in c') is '(a < b) in c'
PASS compileAndSerialize('a < (b in c)') is 'a < (b in c)'
PASS compileAndSerialize('a in b == c') is 'a in b == c'
PASS compileAndSerialize('(a in b) == c') is '(a in b) == c'
PASS compileAndSerialize('a in (b == c)') is 'a in (b == c)'
PASS compileAndSerialize('a == b == c') is 'a == b == c'
PASS compileAndSerialize('(a == b) == c') is '(a == b) == c'
PASS compileAndSerialize('a == (b == c)') is 'a == (b == c)'
PASS compileAndSerialize('a == b & c') is 'a == b & c'
PASS compileAndSerialize('(a == b) & c') is '(a == b) & c'
PASS compileAndSerialize('a == (b & c)') is 'a == (b & c)'
PASS compileAndSerialize('a != b != c') is 'a != b != c'
PASS compileAndSerialize('(a != b) != c') is '(a != b) != c'
PASS compileAndSerialize('a != (b != c)') is 'a != (b != c)'
PASS compileAndSerialize('a == b != c') is 'a == b != c'
PASS compileAndSerialize('(a == b) != c') is '(a == b) != c'
PASS compileAndSerialize('a == (b != c)') is 'a == (b != c)'
PASS compileAndSerialize('a != b & c') is 'a != b & c'
PASS compileAndSerialize('(a != b) & c') is '(a != b) & c'
PASS compileAndSerialize('a != (b & c)') is 'a != (b & c)'
PASS compileAndSerialize('a === b === c') is 'a === b === c'
PASS compileAndSerialize('(a === b) === c') is '(a === b) === c'
PASS compileAndSerialize('a === (b === c)') is 'a === (b === c)'
PASS compileAndSerialize('a == b === c') is 'a == b === c'
PASS compileAndSerialize('(a == b) === c') is '(a == b) === c'
PASS compileAndSerialize('a == (b === c)') is 'a == (b === c)'
PASS compileAndSerialize('a === b & c') is 'a === b & c'
PASS compileAndSerialize('(a === b) & c') is '(a === b) & c'
PASS compileAndSerialize('a === (b & c)') is 'a === (b & c)'
PASS compileAndSerialize('a !== b !== c') is 'a !== b !== c'
PASS compileAndSerialize('(a !== b) !== c') is '(a !== b) !== c'
PASS compileAndSerialize('a !== (b !== c)') is 'a !== (b !== c)'
PASS compileAndSerialize('a == b !== c') is 'a == b !== c'
PASS compileAndSerialize('(a == b) !== c') is '(a == b) !== c'
PASS compileAndSerialize('a == (b !== c)') is 'a == (b !== c)'
PASS compileAndSerialize('a !== b & c') is 'a !== b & c'
PASS compileAndSerialize('(a !== b) & c') is '(a !== b) & c'
PASS compileAndSerialize('a !== (b & c)') is 'a !== (b & c)'
PASS compileAndSerialize('a & b & c') is 'a & b & c'
PASS compileAndSerialize('(a & b) & c') is '(a & b) & c'
PASS compileAndSerialize('a & (b & c)') is 'a & (b & c)'
PASS compileAndSerialize('a & b ^ c') is 'a & b ^ c'
PASS compileAndSerialize('(a & b) ^ c') is '(a & b) ^ c'
PASS compileAndSerialize('a & (b ^ c)') is 'a & (b ^ c)'
PASS compileAndSerialize('a ^ b ^ c') is 'a ^ b ^ c'
PASS compileAndSerialize('(a ^ b) ^ c') is '(a ^ b) ^ c'
PASS compileAndSerialize('a ^ (b ^ c)') is 'a ^ (b ^ c)'
PASS compileAndSerialize('a ^ b | c') is 'a ^ b | c'
PASS compileAndSerialize('(a ^ b) | c') is '(a ^ b) | c'
PASS compileAndSerialize('a ^ (b | c)') is 'a ^ (b | c)'
PASS compileAndSerialize('a | b | c') is 'a | b | c'
PASS compileAndSerialize('(a | b) | c') is '(a | b) | c'
PASS compileAndSerialize('a | (b | c)') is 'a | (b | c)'
PASS compileAndSerialize('a | b && c') is 'a | b && c'
PASS compileAndSerialize('(a | b) && c') is '(a | b) && c'
PASS compileAndSerialize('a | (b && c)') is 'a | (b && c)'
PASS compileAndSerialize('a && b && c') is 'a && b && c'
PASS compileAndSerialize('(a && b) && c') is '(a && b) && c'
PASS compileAndSerialize('a && (b && c)') is 'a && (b && c)'
PASS compileAndSerialize('a && b || c') is 'a && b || c'
PASS compileAndSerialize('(a && b) || c') is '(a && b) || c'
PASS compileAndSerialize('a && (b || c)') is 'a && (b || c)'
PASS compileAndSerialize('a || b || c') is 'a || b || c'
PASS compileAndSerialize('(a || b) || c') is '(a || b) || c'
PASS compileAndSerialize('a || (b || c)') is 'a || (b || c)'
PASS compileAndSerialize('a = b = c') is 'a = b = c'
FAIL compileAndSerialize('(a = b) = c') should be (a = b) = c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b = c)') is 'a = (b = c)'
PASS compileAndSerialize('a = b + c') is 'a = b + c'
PASS compileAndSerialize('(a = b) + c') is '(a = b) + c'
PASS compileAndSerialize('a = (b + c)') is 'a = (b + c)'
PASS compileAndSerialize('a + b = c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) = c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b = c)') is 'a + (b = c)'
PASS compileAndSerialize('a *= b *= c') is 'a *= b *= c'
FAIL compileAndSerialize('(a *= b) *= c') should be (a *= b) *= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a *= (b *= c)') is 'a *= (b *= c)'
PASS compileAndSerialize('a = b *= c') is 'a = b *= c'
FAIL compileAndSerialize('(a = b) *= c') should be (a = b) *= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b *= c)') is 'a = (b *= c)'
PASS compileAndSerialize('a *= b + c') is 'a *= b + c'
PASS compileAndSerialize('(a *= b) + c') is '(a *= b) + c'
PASS compileAndSerialize('a *= (b + c)') is 'a *= (b + c)'
PASS compileAndSerialize('a + b *= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) *= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b *= c)') is 'a + (b *= c)'
PASS compileAndSerialize('a /= b /= c') is 'a /= b /= c'
FAIL compileAndSerialize('(a /= b) /= c') should be (a /= b) /= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a /= (b /= c)') is 'a /= (b /= c)'
PASS compileAndSerialize('a = b /= c') is 'a = b /= c'
FAIL compileAndSerialize('(a = b) /= c') should be (a = b) /= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b /= c)') is 'a = (b /= c)'
PASS compileAndSerialize('a /= b + c') is 'a /= b + c'
PASS compileAndSerialize('(a /= b) + c') is '(a /= b) + c'
PASS compileAndSerialize('a /= (b + c)') is 'a /= (b + c)'
PASS compileAndSerialize('a + b /= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) /= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b /= c)') is 'a + (b /= c)'
PASS compileAndSerialize('a %= b %= c') is 'a %= b %= c'
FAIL compileAndSerialize('(a %= b) %= c') should be (a %= b) %= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a %= (b %= c)') is 'a %= (b %= c)'
PASS compileAndSerialize('a = b %= c') is 'a = b %= c'
FAIL compileAndSerialize('(a = b) %= c') should be (a = b) %= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b %= c)') is 'a = (b %= c)'
PASS compileAndSerialize('a %= b + c') is 'a %= b + c'
PASS compileAndSerialize('(a %= b) + c') is '(a %= b) + c'
PASS compileAndSerialize('a %= (b + c)') is 'a %= (b + c)'
PASS compileAndSerialize('a + b %= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) %= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b %= c)') is 'a + (b %= c)'
PASS compileAndSerialize('a += b += c') is 'a += b += c'
FAIL compileAndSerialize('(a += b) += c') should be (a += b) += c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a += (b += c)') is 'a += (b += c)'
PASS compileAndSerialize('a = b += c') is 'a = b += c'
FAIL compileAndSerialize('(a = b) += c') should be (a = b) += c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b += c)') is 'a = (b += c)'
PASS compileAndSerialize('a += b + c') is 'a += b + c'
PASS compileAndSerialize('(a += b) + c') is '(a += b) + c'
PASS compileAndSerialize('a += (b + c)') is 'a += (b + c)'
PASS compileAndSerialize('a + b += c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) += c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b += c)') is 'a + (b += c)'
PASS compileAndSerialize('a -= b -= c') is 'a -= b -= c'
FAIL compileAndSerialize('(a -= b) -= c') should be (a -= b) -= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a -= (b -= c)') is 'a -= (b -= c)'
PASS compileAndSerialize('a = b -= c') is 'a = b -= c'
FAIL compileAndSerialize('(a = b) -= c') should be (a = b) -= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b -= c)') is 'a = (b -= c)'
PASS compileAndSerialize('a -= b + c') is 'a -= b + c'
PASS compileAndSerialize('(a -= b) + c') is '(a -= b) + c'
PASS compileAndSerialize('a -= (b + c)') is 'a -= (b + c)'
PASS compileAndSerialize('a + b -= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) -= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b -= c)') is 'a + (b -= c)'
PASS compileAndSerialize('a <<= b <<= c') is 'a <<= b <<= c'
FAIL compileAndSerialize('(a <<= b) <<= c') should be (a <<= b) <<= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a <<= (b <<= c)') is 'a <<= (b <<= c)'
PASS compileAndSerialize('a = b <<= c') is 'a = b <<= c'
FAIL compileAndSerialize('(a = b) <<= c') should be (a = b) <<= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b <<= c)') is 'a = (b <<= c)'
PASS compileAndSerialize('a <<= b + c') is 'a <<= b + c'
PASS compileAndSerialize('(a <<= b) + c') is '(a <<= b) + c'
PASS compileAndSerialize('a <<= (b + c)') is 'a <<= (b + c)'
PASS compileAndSerialize('a + b <<= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) <<= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b <<= c)') is 'a + (b <<= c)'
PASS compileAndSerialize('a >>= b >>= c') is 'a >>= b >>= c'
FAIL compileAndSerialize('(a >>= b) >>= c') should be (a >>= b) >>= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a >>= (b >>= c)') is 'a >>= (b >>= c)'
PASS compileAndSerialize('a = b >>= c') is 'a = b >>= c'
FAIL compileAndSerialize('(a = b) >>= c') should be (a = b) >>= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b >>= c)') is 'a = (b >>= c)'
PASS compileAndSerialize('a >>= b + c') is 'a >>= b + c'
PASS compileAndSerialize('(a >>= b) + c') is '(a >>= b) + c'
PASS compileAndSerialize('a >>= (b + c)') is 'a >>= (b + c)'
PASS compileAndSerialize('a + b >>= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) >>= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b >>= c)') is 'a + (b >>= c)'
PASS compileAndSerialize('a >>>= b >>>= c') is 'a >>>= b >>>= c'
FAIL compileAndSerialize('(a >>>= b) >>>= c') should be (a >>>= b) >>>= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a >>>= (b >>>= c)') is 'a >>>= (b >>>= c)'
PASS compileAndSerialize('a = b >>>= c') is 'a = b >>>= c'
FAIL compileAndSerialize('(a = b) >>>= c') should be (a = b) >>>= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b >>>= c)') is 'a = (b >>>= c)'
PASS compileAndSerialize('a >>>= b + c') is 'a >>>= b + c'
PASS compileAndSerialize('(a >>>= b) + c') is '(a >>>= b) + c'
PASS compileAndSerialize('a >>>= (b + c)') is 'a >>>= (b + c)'
PASS compileAndSerialize('a + b >>>= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) >>>= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b >>>= c)') is 'a + (b >>>= c)'
PASS compileAndSerialize('a &= b &= c') is 'a &= b &= c'
FAIL compileAndSerialize('(a &= b) &= c') should be (a &= b) &= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a &= (b &= c)') is 'a &= (b &= c)'
PASS compileAndSerialize('a = b &= c') is 'a = b &= c'
FAIL compileAndSerialize('(a = b) &= c') should be (a = b) &= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b &= c)') is 'a = (b &= c)'
PASS compileAndSerialize('a &= b + c') is 'a &= b + c'
PASS compileAndSerialize('(a &= b) + c') is '(a &= b) + c'
PASS compileAndSerialize('a &= (b + c)') is 'a &= (b + c)'
PASS compileAndSerialize('a + b &= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) &= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b &= c)') is 'a + (b &= c)'
PASS compileAndSerialize('a ^= b ^= c') is 'a ^= b ^= c'
FAIL compileAndSerialize('(a ^= b) ^= c') should be (a ^= b) ^= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a ^= (b ^= c)') is 'a ^= (b ^= c)'
PASS compileAndSerialize('a = b ^= c') is 'a = b ^= c'
FAIL compileAndSerialize('(a = b) ^= c') should be (a = b) ^= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b ^= c)') is 'a = (b ^= c)'
PASS compileAndSerialize('a ^= b + c') is 'a ^= b + c'
PASS compileAndSerialize('(a ^= b) + c') is '(a ^= b) + c'
PASS compileAndSerialize('a ^= (b + c)') is 'a ^= (b + c)'
PASS compileAndSerialize('a + b ^= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) ^= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b ^= c)') is 'a + (b ^= c)'
PASS compileAndSerialize('a |= b |= c') is 'a |= b |= c'
FAIL compileAndSerialize('(a |= b) |= c') should be (a |= b) |= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a |= (b |= c)') is 'a |= (b |= c)'
PASS compileAndSerialize('a = b |= c') is 'a = b |= c'
FAIL compileAndSerialize('(a = b) |= c') should be (a = b) |= c. Threw exception SyntaxError: Invalid left-hand side in assignment
PASS compileAndSerialize('a = (b |= c)') is 'a = (b |= c)'
PASS compileAndSerialize('a |= b + c') is 'a |= b + c'
PASS compileAndSerialize('(a |= b) + c') is '(a |= b) + c'
PASS compileAndSerialize('a |= (b + c)') is 'a |= (b + c)'
PASS compileAndSerialize('a + b |= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(a + b) |= c') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('a + (b |= c)') is 'a + (b |= c)'
PASS compileAndSerialize('delete a + b') is 'delete a + b'
PASS compileAndSerialize('(delete a) + b') is '(delete a) + b'
PASS compileAndSerialize('delete (a + b)') is 'delete (a + b)'
PASS compileAndSerialize('!delete a') is '!delete a'
PASS compileAndSerialize('!(delete a)') is '!(delete a)'
PASS compileAndSerialize('void a + b') is 'void a + b'
PASS compileAndSerialize('(void a) + b') is '(void a) + b'
PASS compileAndSerialize('void (a + b)') is 'void (a + b)'
PASS compileAndSerialize('!void a') is '!void a'
PASS compileAndSerialize('!(void a)') is '!(void a)'
PASS compileAndSerialize('typeof a + b') is 'typeof a + b'
PASS compileAndSerialize('(typeof a) + b') is '(typeof a) + b'
PASS compileAndSerialize('typeof (a + b)') is 'typeof (a + b)'
PASS compileAndSerialize('!typeof a') is '!typeof a'
PASS compileAndSerialize('!(typeof a)') is '!(typeof a)'
PASS compileAndSerialize('++a + b') is '++a + b'
PASS compileAndSerialize('(++a) + b') is '(++a) + b'
PASS compileAndSerialize('++(a + b)') threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS compileAndSerialize('!++a') is '!++a'
PASS compileAndSerialize('!(++a)') is '!(++a)'
PASS compileAndSerialize('--a + b') is '--a + b'
PASS compileAndSerialize('(--a) + b') is '(--a) + b'
PASS compileAndSerialize('--(a + b)') threw exception SyntaxError: Invalid left-hand side expression in prefix operation.
PASS compileAndSerialize('!--a') is '!--a'
PASS compileAndSerialize('!(--a)') is '!(--a)'
PASS compileAndSerialize('+ a + b') is '+ a + b'
PASS compileAndSerialize('(+ a) + b') is '(+ a) + b'
PASS compileAndSerialize('+ (a + b)') is '+ (a + b)'
PASS compileAndSerialize('!+ a') is '!+ a'
PASS compileAndSerialize('!(+ a)') is '!(+ a)'
PASS compileAndSerialize('- a + b') is '- a + b'
PASS compileAndSerialize('(- a) + b') is '(- a) + b'
PASS compileAndSerialize('- (a + b)') is '- (a + b)'
PASS compileAndSerialize('!- a') is '!- a'
PASS compileAndSerialize('!(- a)') is '!(- a)'
PASS compileAndSerialize('~a + b') is '~a + b'
PASS compileAndSerialize('(~a) + b') is '(~a) + b'
PASS compileAndSerialize('~(a + b)') is '~(a + b)'
PASS compileAndSerialize('!~a') is '!~a'
PASS compileAndSerialize('!(~a)') is '!(~a)'
PASS compileAndSerialize('!a + b') is '!a + b'
PASS compileAndSerialize('(!a) + b') is '(!a) + b'
PASS compileAndSerialize('!(a + b)') is '!(a + b)'
PASS compileAndSerialize('!!a') is '!!a'
PASS compileAndSerialize('!(!a)') is '!(!a)'
PASS compileAndSerialize('!a++') is '!a++'
PASS compileAndSerialize('!(a++)') is '!(a++)'
PASS compileAndSerialize('(!a)++') threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS compileAndSerialize('!a--') is '!a--'
PASS compileAndSerialize('!(a--)') is '!(a--)'
PASS compileAndSerialize('(!a)--') threw exception SyntaxError: Invalid left-hand side expression in postfix operation.
PASS compileAndSerialize('(-1)[a]') is '(-1)[a]'
PASS compileAndSerialize('(-1)[a] = b') is '(-1)[a] = b'
PASS compileAndSerialize('(-1)[a] += b') is '(-1)[a] += b'
PASS compileAndSerialize('(-1)[a]++') is '(-1)[a]++'
PASS compileAndSerialize('++(-1)[a]') is '++(-1)[a]'
PASS compileAndSerialize('(-1)[a]()') is '(-1)[a]()'
PASS compileAndSerialize('new (-1)()') is 'new (-1)()'
PASS compileAndSerialize('(-1).a') is '(-1).a'
PASS compileAndSerialize('(-1).a = b') is '(-1).a = b'
PASS compileAndSerialize('(-1).a += b') is '(-1).a += b'
PASS compileAndSerialize('(-1).a++') is '(-1).a++'
PASS compileAndSerialize('++(-1).a') is '++(-1).a'
PASS compileAndSerialize('(-1).a()') is '(-1).a()'
PASS compileAndSerialize('(- 0)[a]') is '(- 0)[a]'
PASS compileAndSerialize('(- 0)[a] = b') is '(- 0)[a] = b'
PASS compileAndSerialize('(- 0)[a] += b') is '(- 0)[a] += b'
PASS compileAndSerialize('(- 0)[a]++') is '(- 0)[a]++'
PASS compileAndSerialize('++(- 0)[a]') is '++(- 0)[a]'
PASS compileAndSerialize('(- 0)[a]()') is '(- 0)[a]()'
PASS compileAndSerialize('new (- 0)()') is 'new (- 0)()'
PASS compileAndSerialize('(- 0).a') is '(- 0).a'
PASS compileAndSerialize('(- 0).a = b') is '(- 0).a = b'
PASS compileAndSerialize('(- 0).a += b') is '(- 0).a += b'
PASS compileAndSerialize('(- 0).a++') is '(- 0).a++'
PASS compileAndSerialize('++(- 0).a') is '++(- 0).a'
PASS compileAndSerialize('(- 0).a()') is '(- 0).a()'
PASS compileAndSerialize('(1)[a]') is '(1)[a]'
PASS compileAndSerialize('(1)[a] = b') is '(1)[a] = b'
PASS compileAndSerialize('(1)[a] += b') is '(1)[a] += b'
PASS compileAndSerialize('(1)[a]++') is '(1)[a]++'
PASS compileAndSerialize('++(1)[a]') is '++(1)[a]'
PASS compileAndSerialize('(1)[a]()') is '(1)[a]()'
PASS compileAndSerialize('new (1)()') is 'new (1)()'
PASS compileAndSerialize('(1).a') is '(1).a'
PASS compileAndSerialize('(1).a = b') is '(1).a = b'
PASS compileAndSerialize('(1).a += b') is '(1).a += b'
PASS compileAndSerialize('(1).a++') is '(1).a++'
PASS compileAndSerialize('++(1).a') is '++(1).a'
PASS compileAndSerialize('(1).a()') is '(1).a()'
PASS compileAndSerialize('(-1) = a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) = a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 = a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) *= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) *= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 *= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) /= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) /= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 /= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) %= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) %= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 %= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) += a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) += a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 += a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) -= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) -= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 -= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) <<= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) <<= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 <<= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) >>= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) >>= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 >>= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) >>>= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) >>>= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 >>>= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) &= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) &= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 &= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) ^= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) ^= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 ^= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(-1) |= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('(- 0) |= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerialize('1 |= a') threw exception SyntaxError: Invalid left-hand side in assignment.
PASS compileAndSerializeLeftmostTest('({ }).x') is '({ }).x'
PASS compileAndSerializeLeftmostTest('x = { }') is 'x = { }'
PASS compileAndSerializeLeftmostTest('(function () { })()') is '(function () { })()'
PASS compileAndSerializeLeftmostTest('x = function () { }') is 'x = function () { }'
PASS compileAndSerializeLeftmostTest('var a') is 'var a'
PASS compileAndSerializeLeftmostTest('var a = 1') is 'var a = 1'
PASS compileAndSerializeLeftmostTest('var a, b') is 'var a, b'
PASS compileAndSerializeLeftmostTest('var a = 1, b = 2') is 'var a = 1, b = 2'
PASS compileAndSerializeLeftmostTest('var a, b, c') is 'var a, b, c'
PASS compileAndSerializeLeftmostTest('var a = 1, b = 2, c = 3') is 'var a = 1, b = 2, c = 3'
PASS compileAndSerializeLeftmostTest('const a = 1') is 'const a = 1'
PASS compileAndSerializeLeftmostTest('const a = (1, 2)') is 'const a = (1, 2)'
FAIL compileAndSerializeLeftmostTest('const a, b = 1') should be const a, b = 1. Threw exception SyntaxError: Missing initializer in const declaration
FAIL compileAndSerializeLeftmostTest('const a = 1, b') should be const a = 1, b. Threw exception SyntaxError: Missing initializer in const declaration
PASS compileAndSerializeLeftmostTest('const a = 1, b = 1') is 'const a = 1, b = 1'
PASS compileAndSerializeLeftmostTest('const a = (1, 2), b = 1') is 'const a = (1, 2), b = 1'
PASS compileAndSerializeLeftmostTest('const a = 1, b = (1, 2)') is 'const a = 1, b = (1, 2)'
PASS compileAndSerializeLeftmostTest('const a = (1, 2), b = (1, 2)') is 'const a = (1, 2), b = (1, 2)'
PASS compileAndSerialize('(function () { new (a.b()).c })') is '(function () { new (a.b()).c })'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/function-toString-parentheses.js                            0000664 0000000 0000000 00000022434 14746647661 0026200 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"This test checks that parentheses are preserved when significant, and not added where inappropriate. " +
"We need this test because the JavaScriptCore parser removes all parentheses and the serializer then adds them back."
);

function compileAndSerialize(expression)
{
    var f = eval("(function () { return " + expression + "; })");
    var serializedString = f.toString();
    serializedString = serializedString.replace(/[ \t\r\n]+/g, " ");
    serializedString = serializedString.replace("function () { return ", "");
    serializedString = serializedString.replace("; }", "");
    return serializedString;
}

function compileAndSerializeLeftmostTest(expression)
{
    var f = eval("(function () { " + expression + "; })");
    var serializedString = f.toString();
    serializedString = serializedString.replace(/[ \t\r\n]+/g, " ");
    serializedString = serializedString.replace("function () { ", "");
    serializedString = serializedString.replace("; }", "");
    return serializedString;
}

var removesExtraParentheses = compileAndSerialize("(a + b) + c") == "a + b + c";

function testKeepParentheses(expression)
{
  shouldBe("compileAndSerialize('" + expression + "')",
           "'" + expression + "'");
}

function testOptionalParentheses(expression)
{
  stripped_expression = removesExtraParentheses
        ? expression.replace(/\(/g, '').replace(/\)/g, '')
        : expression;
  shouldBe("compileAndSerialize('" + expression + "')",
           "'" + stripped_expression + "'");
}

function testLeftAssociativeSame(opA, opB)
{
    testKeepParentheses("a " + opA + " b " + opB + " c");
    testOptionalParentheses("(a " + opA + " b) " + opB + " c");
    testKeepParentheses("a " + opA + " (b " + opB + " c)");
}

function testRightAssociativeSame(opA, opB)
{
    testKeepParentheses("a " + opA + " b " + opB + " c");
    testKeepParentheses("(a " + opA + " b) " + opB + " c");
    testOptionalParentheses("a " + opA + " (b " + opB + " c)");
}

function testHigherFirst(opHigher, opLower)
{
    testKeepParentheses("a " + opHigher + " b " + opLower + " c");
    testOptionalParentheses("(a " + opHigher + " b) " + opLower + " c");
    testKeepParentheses("a " + opHigher + " (b " + opLower + " c)");
}

function testLowerFirst(opLower, opHigher)
{
    testKeepParentheses("a " + opLower + " b " + opHigher + " c");
    testKeepParentheses("(a " + opLower + " b) " + opHigher + " c");
    testOptionalParentheses("a " + opLower + " (b " + opHigher + " c)");
}

var binaryOperators = [
    [ "*", "/", "%" ], [ "+", "-" ],
    [ "<<", ">>", ">>>" ],
    [ "<", ">", "<=", ">=", "instanceof", "in" ],
    [ "==", "!=", "===", "!==" ],
    [ "&" ], [ "^" ], [ "|" ],
    [ "&&" ], [ "||" ]
];

for (i = 0; i < binaryOperators.length; ++i) {
    var ops = binaryOperators[i];
    for (j = 0; j < ops.length; ++j) {
        var op = ops[j];
        testLeftAssociativeSame(op, op);
        if (j != 0)
            testLeftAssociativeSame(ops[0], op);
        if (i < binaryOperators.length - 1) {
            var nextOps = binaryOperators[i + 1];
            if (j == 0)
                for (k = 0; k < nextOps.length; ++k)
                    testHigherFirst(op, nextOps[k]);
            else
                testHigherFirst(op, nextOps[0]);
        }
    }
}

var assignmentOperators = [ "=", "*=", "/=" , "%=", "+=", "-=", "<<=", ">>=", ">>>=", "&=", "^=", "|=" ];

for (i = 0; i < assignmentOperators.length; ++i) {
    var op = assignmentOperators[i];
    testRightAssociativeSame(op, op);
    if (i != 0)
        testRightAssociativeSame("=", op);
    testLowerFirst(op, "+");
    shouldThrow("compileAndSerialize('a + b " + op + " c')");
    shouldThrow("compileAndSerialize('(a + b) " + op + " c')");
    testKeepParentheses("a + (b " + op + " c)");
}

var prefixOperators = [ "delete", "void", "typeof", "++", "--", "+", "-", "~", "!" ];
var prefixOperatorSpace = [ " ", " ", " ", "", "", " ", " ", "", "" ];

for (i = 0; i < prefixOperators.length; ++i) {
    var op = prefixOperators[i] + prefixOperatorSpace[i];
    testKeepParentheses("" + op + "a + b");
    testOptionalParentheses("(" + op + "a) + b");
    if (prefixOperators[i] !== "++" && prefixOperators[i] !== "--")
        testKeepParentheses("" + op + "(a + b)");
    else
        shouldThrow("compileAndSerialize('" + op + "(a + b)')");
    testKeepParentheses("!" + op + "a");
    testOptionalParentheses("!(" + op + "a)");
}


testKeepParentheses("!a++");
testOptionalParentheses("!(a++)");
shouldThrow("compileAndSerialize('(!a)++')");

testKeepParentheses("!a--");
testOptionalParentheses("!(a--)");
shouldThrow("compileAndSerialize('(!a)--')");

testKeepParentheses("(-1)[a]");
testKeepParentheses("(-1)[a] = b");
testKeepParentheses("(-1)[a] += b");
testKeepParentheses("(-1)[a]++");
testKeepParentheses("++(-1)[a]");
testKeepParentheses("(-1)[a]()");

testKeepParentheses("new (-1)()");

testKeepParentheses("(-1).a");
testKeepParentheses("(-1).a = b");
testKeepParentheses("(-1).a += b");
testKeepParentheses("(-1).a++");
testKeepParentheses("++(-1).a");
testKeepParentheses("(-1).a()");

testKeepParentheses("(- 0)[a]");
testKeepParentheses("(- 0)[a] = b");
testKeepParentheses("(- 0)[a] += b");
testKeepParentheses("(- 0)[a]++");
testKeepParentheses("++(- 0)[a]");
testKeepParentheses("(- 0)[a]()");

testKeepParentheses("new (- 0)()");

testKeepParentheses("(- 0).a");
testKeepParentheses("(- 0).a = b");
testKeepParentheses("(- 0).a += b");
testKeepParentheses("(- 0).a++");
testKeepParentheses("++(- 0).a");
testKeepParentheses("(- 0).a()");

testOptionalParentheses("(1)[a]");
testOptionalParentheses("(1)[a] = b");
testOptionalParentheses("(1)[a] += b");
testOptionalParentheses("(1)[a]++");
testOptionalParentheses("++(1)[a]");

shouldBe("compileAndSerialize('(1)[a]()')",
    removesExtraParentheses ? "'1[a]()'" : "'(1)[a]()'");

shouldBe("compileAndSerialize('new (1)()')",
    removesExtraParentheses ? "'new 1()'" : "'new (1)()'");

testKeepParentheses("(1).a");
testKeepParentheses("(1).a = b");
testKeepParentheses("(1).a += b");
testKeepParentheses("(1).a++");
testKeepParentheses("++(1).a");
testKeepParentheses("(1).a()");

for (i = 0; i < assignmentOperators.length; ++i) {
    var op = assignmentOperators[i];
    shouldThrow("compileAndSerialize('(-1) " + op + " a')");
    shouldThrow("compileAndSerialize('(- 0) " + op + " a')");
    shouldThrow("compileAndSerialize('1 " + op + " a')");
}

shouldBe("compileAndSerializeLeftmostTest('({ }).x')", "'({ }).x'");
shouldBe("compileAndSerializeLeftmostTest('x = { }')", "'x = { }'");
shouldBe("compileAndSerializeLeftmostTest('(function () { })()')", "'(function () { })()'");
shouldBe("compileAndSerializeLeftmostTest('x = function () { }')", "'x = function () { }'");

shouldBe("compileAndSerializeLeftmostTest('var a')", "'var a'");
shouldBe("compileAndSerializeLeftmostTest('var a = 1')", "'var a = 1'");
shouldBe("compileAndSerializeLeftmostTest('var a, b')", "'var a, b'");
shouldBe("compileAndSerializeLeftmostTest('var a = 1, b = 2')", "'var a = 1, b = 2'");
shouldBe("compileAndSerializeLeftmostTest('var a, b, c')", "'var a, b, c'");
shouldBe("compileAndSerializeLeftmostTest('var a = 1, b = 2, c = 3')", "'var a = 1, b = 2, c = 3'");

shouldBe("compileAndSerializeLeftmostTest('const a = 1')", "'const a = 1'");
shouldBe("compileAndSerializeLeftmostTest('const a = (1, 2)')", "'const a = (1, 2)'");
shouldBe("compileAndSerializeLeftmostTest('const a, b = 1')", "'const a, b = 1'");
shouldBe("compileAndSerializeLeftmostTest('const a = 1, b')", "'const a = 1, b'");
shouldBe("compileAndSerializeLeftmostTest('const a = 1, b = 1')", "'const a = 1, b = 1'");
shouldBe("compileAndSerializeLeftmostTest('const a = (1, 2), b = 1')", "'const a = (1, 2), b = 1'");
shouldBe("compileAndSerializeLeftmostTest('const a = 1, b = (1, 2)')", "'const a = 1, b = (1, 2)'");
shouldBe("compileAndSerializeLeftmostTest('const a = (1, 2), b = (1, 2)')", "'const a = (1, 2), b = (1, 2)'");

shouldBe("compileAndSerialize('(function () { new (a.b()).c })')", "'(function () { new (a.b()).c })'");
                                                                                                                                                                                                                                    node-23.7.0/deps/v8/test/webkit/fast/js/function-toString-semicolon-insertion-expected.txt          0000664 0000000 0000000 00000004075 14746647661 0031662 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This test checks that functions re-string-ify in a way that is syntactically compatible with concatenation.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


FAIL (function (){return}).toString() should be function () {return;}. Was function (){return}.
FAIL (function (){return }).toString() should be function () {return; }. Was function (){return }.
FAIL (function (){return
}).toString() should be function () {return;
}. Was function (){return
}.
FAIL (function (){}).toString() should be function () {}. Was function (){}.
FAIL (function (){ }).toString() should be function () { }. Was function (){ }.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/function-toString-semicolon-insertion.js                    0000664 0000000 0000000 00000003622 14746647661 0027655 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description(
"This test checks that functions re-string-ify in a way that is syntactically " +
"compatible with concatenation."
);

shouldBe("(function (){return}).toString()", "'function () {return;}'");
shouldBe("(function (){return }).toString()", "'function () {return; }'");
shouldBe("(function (){return" + "\n" + "}).toString()", "'function () {return;" + "\\n" + "}'");
shouldBe("(function (){}).toString()", "'function () {}'");
shouldBe("(function (){ }).toString()", "'function () { }'");
                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/kde/                                                        0000775 0000000 0000000 00000000000 14746647661 0020425 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/kde/Array-expected.txt                                      0000664 0000000 0000000 00000011044 14746647661 0024043 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Array().length is 0
PASS (new Array()).length is 0
PASS (new Array(3)).length is 3
PASS (new Array(11, 22)).length is 2
PASS (new Array(11, 22))[0] is 11
PASS Array(11, 22)[1] is 22
PASS (new Array(11, 22))[3] is undefined.
PASS String(new Array(11, 22)) is '11,22'
PASS var a = []; a[0] = 33; a[0] is 33
PASS var a = []; a[0] = 33; a.length is 1
PASS var a = [11, 22]; a.length = 1; String(a); is '11'
PASS var a = [11, 22]; a.length = 1; a.length; is 1
PASS caught; is true
PASS ename is 'RangeError'
PASS caught; is true
PASS ename is 'RangeError'
PASS var a = [11, 22]; a.length = 1; a[1]; is undefined.
PASS Array().toString() is ''
PASS Array(3).toString() is ',,'
PASS Array(11, 22).toString() is '11,22'
PASS String(Array(11, 22).concat(33)) is '11,22,33'
PASS String(Array(2).concat(33, 44)) is ',,33,44'
PASS String(Array(2).concat(Array(2))) is ',,,'
PASS String(Array(11,22).concat(Array(33,44))) is '11,22,33,44'
PASS String(Array(1,2).concat(3,Array(4,5))) is '1,2,3,4,5'
PASS var a = new Array(1,2,3); delete a[1]; String(a.concat(4)) is '1,,3,4'
PASS [1,2,3,4].slice(1, 3).toString() is '2,3'
PASS [1,2,3,4].slice(-3, -1).toString() is '2,3'
PASS [1,2].slice(-9, 0).length is 0
PASS [1,2].slice(1).toString() is '2'
PASS [1,2].slice().toString() is '1,2'
PASS (new Array('a')).length is 1
PASS (new Array('a'))[0] is 'a'
PASS (new Array('a'))[1] is undefined.
PASS Array('a').length is 1
PASS Array('a')[0] is 'a'
PASS String(Array()) is ''
PASS String(Array('a','b')) is 'a,b'
PASS [].length is 0
PASS ['a'].length is 1
PASS ['a'][0] is 'a'
PASS ['a',,'c'][2] is 'c'
PASS ['a',undefined,'c'][1] is undefined
PASS ['a',,'c'][1] is undefined
PASS 1 in ['a',,'c'] is false
PASS 1 in ['a',undefined,'c'] is true
PASS 1 in arrayWithDeletion is false
PASS forInSum([]) is ''
PASS forInSum(Array()) is ''
PASS forInSum(Array('a')) is 'a'
PASS forInSum([,undefined,'x','aa']) is 'undefinedxaa'
PASS forInSum(a0) is ''
PASS forInSum(a1) is 'a'
PASS String([].sort()) is ''
PASS String([3,1,'2'].sort()) is '1,2,3'
PASS String([,'x','aa'].sort()) is 'aa,x,'
PASS String([,undefined,'x','aa'].sort()) is 'aa,x,,'
PASS 2 in [,undefined,'x','aa'].sort() is true
PASS 3 in [,undefined,'x','aa'].sort() is false
PASS var a = ['aa', 'b', 'cccc', 'ddd']; String(a.sort(comp)) is 'b,aa,ddd,cccc'
PASS [0, Infinity].sort(function(a, b) { return a - b }).toString() is '0,Infinity'
PASS [].unshift('a') is 1
PASS ['c'].unshift('a', 'b') is 3
PASS var a = []; a.unshift('a'); String(a) is 'a'
PASS var a = ['c']; a.unshift('a', 'b'); String(a) is 'a,b,c'
PASS String(['a', 'b', 'c'].splice(1, 2, 'x', 'y')) is 'b,c'
PASS arr.length is 40
PASS arr[maxint] is "test"
PASS arr.length is 40
PASS arr[maxint] is undefined
PASS arr.length is maxint
PASS arr[maxint-1] is "test2"
PASS arr.length is 40
PASS arr[55.5] is "test"
PASS arr[65.11111111111111111111111111111] is "test"
PASS arr.length is 40
PASS arr[55.5] is undefined
PASS arr[65.11111111111111111111111111111] is undefined
PASS propnames.length is 3
PASS propnames[0] is '0'
PASS propnames[1] is '1'
PASS propnames[2] is '2'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/kde/Array.js                                                0000664 0000000 0000000 00000017650 14746647661 0022052 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// 15.4 Array Objects
// (c) 2001 Harri Porten <porten@kde.org>

shouldBe("Array().length", "0");
shouldBe("(new Array()).length", "0");
shouldBe("(new Array(3)).length", "3");
shouldBe("(new Array(11, 22)).length", "2");
shouldBe("(new Array(11, 22))[0]", "11");
shouldBe("Array(11, 22)[1]", "22");
shouldBeUndefined("(new Array(11, 22))[3]");
shouldBe("String(new Array(11, 22))", "'11,22'");
shouldBe("var a = []; a[0] = 33; a[0]", "33");
shouldBe("var a = []; a[0] = 33; a.length", "1");
shouldBe("var a = [11, 22]; a.length = 1; String(a);", "'11'");
shouldBe("var a = [11, 22]; a.length = 1; a.length;", "1");

// range checks
var caught = false;
var ename = "";
try {
  [].length = -1;
} catch (e) {
  // expect Range Error
  caught = true;
  ename = e.name;
}

shouldBeTrue("caught;");
shouldBe("ename", "'RangeError'");

caught = false;
ename = "";
try {
  new Array(Infinity);
} catch (e) {
  // expect Range Error
  caught = true;
  ename = e.name;
}
shouldBeTrue("caught;");
shouldBe("ename", "'RangeError'");

shouldBeUndefined("var a = [11, 22]; a.length = 1; a[1];");
shouldBe("Array().toString()", "''");
shouldBe("Array(3).toString()", "',,'");
shouldBe("Array(11, 22).toString()", "'11,22'");
shouldBe("String(Array(11, 22).concat(33))", "'11,22,33'");
shouldBe("String(Array(2).concat(33, 44))", "',,33,44'");
shouldBe("String(Array(2).concat(Array(2)))", "',,,'");
shouldBe("String(Array(11,22).concat(Array(33,44)))", "'11,22,33,44'");
shouldBe("String(Array(1,2).concat(3,Array(4,5)))", "'1,2,3,4,5'");
shouldBe("var a = new Array(1,2,3); delete a[1]; String(a.concat(4))", "'1,,3,4'");

shouldBe("[1,2,3,4].slice(1, 3).toString()", "'2,3'");
shouldBe("[1,2,3,4].slice(-3, -1).toString()", "'2,3'");
shouldBe("[1,2].slice(-9, 0).length", "0");
shouldBe("[1,2].slice(1).toString()", "'2'");
shouldBe("[1,2].slice().toString()", "'1,2'");

// 2nd set.
shouldBe("(new Array('a')).length", "1");
shouldBe("(new Array('a'))[0]", "'a'");
shouldBeUndefined("(new Array('a'))[1]");

shouldBe("Array('a').length", "1");
shouldBe("Array('a')[0]", "'a'");

shouldBe("String(Array())", "''");
shouldBe("String(Array('a','b'))", "'a,b'");

shouldBe("[].length", "0");
shouldBe("['a'].length", "1");
shouldBe("['a'][0]", "'a'");
shouldBe("['a',,'c'][2]", "'c'");
shouldBe("['a',undefined,'c'][1]", "undefined");
shouldBe("['a',,'c'][1]", "undefined");
shouldBe("1 in ['a',,'c']", "false");
shouldBe("1 in ['a',undefined,'c']", "true");

var arrayWithDeletion = ['a','b','c'];
delete arrayWithDeletion[1];
shouldBe("1 in arrayWithDeletion", "false");

function forInSum(_a) {
  var s = '';
  for (i in _a)
    s += _a[i];
  return s;
}

shouldBe("forInSum([])", "''");
shouldBe("forInSum(Array())", "''");
shouldBe("forInSum(Array('a'))", "'a'");
shouldBe("forInSum([,undefined,'x','aa'])", "'undefinedxaa'");

var a0 = [];
shouldBe("forInSum(a0)", "''");

var a1 = [ 'a' ];
shouldBe("forInSum(a1)", "'a'");

shouldBe("String([].sort())", "''")
shouldBe("String([3,1,'2'].sort())", "'1,2,3'");
shouldBe("String([,'x','aa'].sort())", "'aa,x,'");
shouldBe("String([,undefined,'x','aa'].sort())", "'aa,x,,'");
shouldBe("2 in [,undefined,'x','aa'].sort()", "true");
shouldBe("3 in [,undefined,'x','aa'].sort()", "false");

// sort by length
function comp(a, b) {
  var la = String(a).length;
  var lb = String(b).length;
  if (la < lb)
    return -1;
  else if (la > lb)
    return 1;
  else
    return 0;
}
shouldBe("var a = ['aa', 'b', 'cccc', 'ddd']; String(a.sort(comp))", "'b,aa,ddd,cccc'");

// +/-Infinity as function return value
shouldBe("[0, Infinity].sort(function(a, b) { return a - b }).toString()", "'0,Infinity'");

// Array.unshift()
shouldBe("[].unshift('a')", "1");
shouldBe("['c'].unshift('a', 'b')", "3");
shouldBe("var a = []; a.unshift('a'); String(a)", "'a'");
shouldBe("var a = ['c']; a.unshift('a', 'b'); String(a)", "'a,b,c'");

// Array.splice()
shouldBe("String(['a', 'b', 'c'].splice(1, 2, 'x', 'y'))", "'b,c'");

var maxint = Math.pow(2,32)-1;
var arr = new Array();

// 2^32 should not be treated as a valid array index, i.e.
// setting the property on the array should not result in
// the length being modified

arr.length = 40;
arr[maxint] = "test";
shouldBe("arr.length","40");
shouldBe("arr[maxint]","\"test\"");
delete arr[maxint];
shouldBe("arr.length","40");
shouldBe("arr[maxint]","undefined");
arr[maxint-1] = "test2";
shouldBe("arr.length","maxint");
shouldBe("arr[maxint-1]","\"test2\"");

// Floating point numbers also should not be treated as valid array indices.
arr.length = 40;
arr[55.5] = "test"; // does fit in a JSImmediate number
arr[65.11111111111111111111111111111] = "test"; // does not fit in a JSImmediate number
shouldBe("arr.length","40");
shouldBe("arr[55.5]","\"test\"");
shouldBe("arr[65.11111111111111111111111111111]","\"test\"");
delete arr[55.5];
delete arr[65.11111111111111111111111111111];
shouldBe("arr.length","40");
shouldBe("arr[55.5]","undefined");
shouldBe("arr[65.11111111111111111111111111111]","undefined");

arr = new Array('a','b','c');
arr.__proto__ = { 1: 'x' };
var propnames = new Array();
for (i in arr)
  propnames.push(i);
propnames.sort();
shouldBe("propnames.length","3");
shouldBe("propnames[0]","'0'");
shouldBe("propnames[1]","'1'");
shouldBe("propnames[2]","'2'");

function testToString() {
  // backup
  var backupNumberToString = Number.prototype.toString;
  var backupNumberToLocaleString = Number.prototype.toLocaleString;
  var backupRegExpToString = RegExp.prototype.toString;
  var backupRegExpToLocaleString = RegExp.prototype.toLocaleString;

  // change functions
  Number.prototype.toString = function() { return "toString"; }
  Number.prototype.toLocaleString = function() { return "toLocaleString"; }
  RegExp.prototype.toString = function() { return "toString2"; }
  RegExp.prototype.toLocaleString = function() { return "toLocaleString2"; }

  // the tests
  shouldBe("[1].toString()", "'1'");
  shouldBe("[1].toLocaleString()", "'toLocaleString'");
  Number.prototype.toLocaleString = "invalid";
  shouldBe("[1].toLocaleString()", "'1'");
  shouldBe("[/r/].toString()", "'toString2'");
  shouldBe("[/r/].toLocaleString()", "'toLocaleString2'");
  RegExp.prototype.toLocaleString = "invalid";
  shouldBe("[/r/].toLocaleString()", "'toString2'");

  var caught = false;
  try {
    [{ toString : 0 }].toString();
  } catch (e) {
    caught = true;
  }
  shouldBeTrue("caught");

  // restore
  Number.prototype.toString = backupNumberToString;
  Number.prototype.toLocaleString = backupNumberToLocaleString;
  RegExp.prototype.toString = backupRegExpToString;
  RegExp.prototype.toLocaleString = backupRegExpToLocaleString;
}
                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/kde/Boolean-expected.txt                                    0000664 0000000 0000000 00000003505 14746647661 0024347 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Boolean() is false
PASS Boolean(true) is true
PASS Boolean(false) is false
PASS (new Boolean(true)).valueOf() is true
PASS (new Boolean(false)).valueOf() is false
PASS (new Boolean(Boolean(true))).valueOf() is true
PASS true.valueOf() === true is true
PASS false.toString() === 'false' is true
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/kde/Boolean.js                                              0000664 0000000 0000000 00000003435 14746647661 0022347 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("Boolean()", "false");
shouldBe("Boolean(true)", "true");
shouldBe("Boolean(false)", "false");
shouldBe("(new Boolean(true)).valueOf()", "true");
shouldBe("(new Boolean(false)).valueOf()", "false");
shouldBe("(new Boolean(Boolean(true))).valueOf()", "true");
shouldBeTrue("true.valueOf() === true");
shouldBeTrue("false.toString() === 'false'");
                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/kde/Date-setYear-expected.txt                               0000664 0000000 0000000 00000003670 14746647661 0025262 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


Start Of Test
PASS d.setYear(-1), d.getFullYear() is -1
PASS d.setYear(0), d.getFullYear() is 1900
PASS d.setYear(1), d.getFullYear() is 1901
PASS d.setYear(99), d.getFullYear() is 1999
PASS d.setYear(100), d.getFullYear() is 100
PASS d.setYear(2050), d.getFullYear() is 2050
PASS d.setYear(1899), d.getFullYear() is 1899
PASS d.setYear(2000), d.getFullYear() is 2000
PASS d.setYear(2100), d.getFullYear() is 2100
PASS successfullyParsed is true

TEST COMPLETE

                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/kde/Date-setYear.js                                         0000664 0000000 0000000 00000003677 14746647661 0023267 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
debug("Start Of Test");

var d = new Date();
shouldBe("d.setYear(-1), d.getFullYear()", "-1");
shouldBe("d.setYear(0), d.getFullYear()", "1900");
shouldBe("d.setYear(1), d.getFullYear()", "1901");
shouldBe("d.setYear(99), d.getFullYear()", "1999");
shouldBe("d.setYear(100), d.getFullYear()", "100");
shouldBe("d.setYear(2050), d.getFullYear()", "2050");
shouldBe("d.setYear(1899), d.getFullYear()", "1899");
shouldBe("d.setYear(2000), d.getFullYear()", "2000");
shouldBe("d.setYear(2100), d.getFullYear()", "2100");
                                                                 node-23.7.0/deps/v8/test/webkit/fast/js/kde/Error-expected.txt                                      0000664 0000000 0000000 00000003532 14746647661 0024061 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Error('msg').message is 'msg'
PASS (new Error('msg')).message is 'msg'
PASS (new Error('msg')).name is 'Error'
PASS Object.prototype.toString.apply(Error()) is '[object Error]'
PASS Object.prototype.toString.apply(Error) is '[object Function]'
PASS Object.prototype.toString.apply(EvalError) is '[object Function]'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/Error.js                                                0000664 0000000 0000000 00000003720 14746647661 0022056 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// Error constructor called as a function
shouldBe("Error('msg').message", "'msg'");

// Error Constructor called as part of a new expression
shouldBe("(new Error('msg')).message", "'msg'");
// moved to evil-n.js shouldBeUndefined("(new Error()).message");
shouldBe("(new Error('msg')).name", "'Error'");

shouldBe("Object.prototype.toString.apply(Error())", "'[object Error]'");
shouldBe("Object.prototype.toString.apply(Error)", "'[object Function]'");
shouldBe("Object.prototype.toString.apply(EvalError)", "'[object Function]'");
                                                node-23.7.0/deps/v8/test/webkit/fast/js/kde/GlobalObject-expected.txt                               0000664 0000000 0000000 00000006475 14746647661 0025330 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS h.charCodeAt(1) is 239
PASS u.charCodeAt(1) is 4660
PASS escape(h) is 'a%EFc'
PASS escape(u) is 'a%u1234c'
PASS escape(z) is '%00'
PASS unescape(escape(h)) is h
PASS unescape(escape(u)) is u
PASS unescape(escape(z)) is z
PASS isNaN(NaN) is true
PASS isNaN('NaN') is true
PASS isNaN('1') is false
PASS isFinite(1) is true
PASS isFinite('1') is true
PASS isFinite('a') is false
PASS isNaN(parseInt("Hello", 8)) is true
PASS isNaN(parseInt("FFF", 10)) is true
PASS isNaN(parseInt(".5", 10)) is true
PASS isFinite(Infinity) is false
PASS isFinite('Infinity') is false
PASS isNaN(parseInt()) is true
PASS isNaN(parseInt('')) is true
PASS isNaN(parseInt(' ')) is true
PASS isNaN(parseInt('a')) is true
PASS parseInt(1) is 1
PASS parseInt(1234567890123456) is 1234567890123456
PASS parseInt(1.2) is 1
PASS parseInt(' 2.3') is 2
PASS parseInt('0x10') is 16
PASS parseInt('11', 0) is 11
PASS parseInt('F', 16) is 15
PASS isNaN(parseInt('10', 40)) is true
PASS parseInt('3x') is 3
PASS parseInt('3 x') is 3
PASS isNaN(parseInt('Infinity')) is true
PASS parseInt("15") is 15
PASS parseInt("015") is 15
PASS parseInt("0xf") is 15
PASS parseInt("15", 0) is 15
PASS parseInt("15", 10) is 15
PASS parseInt("F", 16) is 15
PASS parseInt("17", 8) is 15
PASS parseInt("15.99", 10) is 15
PASS parseInt("FXX123", 16) is 15
PASS parseInt("1111", 2) is 15
PASS parseInt("15*3", 10) is 15
PASS parseInt("0x7", 10) is 0
PASS parseInt("1x7", 10) is 1
PASS isNaN(parseFloat()) is true
PASS isNaN(parseFloat('')) is true
PASS isNaN(parseFloat(' ')) is true
PASS isNaN(parseFloat('a')) is true
PASS parseFloat(1) is 1
PASS parseFloat(' 2.3') is 2.3
PASS parseFloat('3.1 x', 3) is 3.1
PASS parseFloat('3.1x', 3) is 3.1
PASS isFinite(parseFloat('Infinity')) is false
PASS delete NaN is false
PASS delete Infinity is false
PASS delete undefined is false
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/kde/GlobalObject.js                                         0000664 0000000 0000000 00000007475 14746647661 0023327 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
var h = "a\xefc";
var u = "a\u1234c";
var z = "\x00";

shouldBe("h.charCodeAt(1)", "239");
shouldBe("u.charCodeAt(1)", "4660");
shouldBe("escape(h)", "'a%EFc'");
shouldBe("escape(u)", "'a%u1234c'");
shouldBe("escape(z)", "'%00'");
shouldBe("unescape(escape(h))", "h");
shouldBe("unescape(escape(u))", "u");
shouldBe("unescape(escape(z))", "z");

shouldBeTrue("isNaN(NaN)");
shouldBeTrue("isNaN('NaN')");
shouldBeFalse("isNaN('1')");

shouldBeTrue("isFinite(1)");
shouldBeTrue("isFinite('1')");

// all should return NaN because 1st char is non-number
shouldBeFalse("isFinite('a')");
shouldBe('isNaN(parseInt("Hello", 8))', "true");
shouldBe('isNaN(parseInt("FFF", 10))', "true");
shouldBe('isNaN(parseInt(".5", 10))', "true");

shouldBeFalse("isFinite(Infinity)");
shouldBeFalse("isFinite('Infinity')");

shouldBeTrue("isNaN(parseInt())");
shouldBeTrue("isNaN(parseInt(''))");
shouldBeTrue("isNaN(parseInt(' '))");
shouldBeTrue("isNaN(parseInt('a'))");
shouldBe("parseInt(1)", "1");
shouldBe("parseInt(1234567890123456)", "1234567890123456");
shouldBe("parseInt(1.2)", "1");
shouldBe("parseInt(' 2.3')", "2");
shouldBe("parseInt('0x10')", "16");
shouldBe("parseInt('11', 0)", "11");
shouldBe("parseInt('F', 16)", "15");

shouldBeTrue("isNaN(parseInt('10', 40))");
shouldBe("parseInt('3x')", "3");
shouldBe("parseInt('3 x')", "3");
shouldBeTrue("isNaN(parseInt('Infinity'))");

// all should return 15
shouldBe('parseInt("15")', "15");
shouldBe('parseInt("015")', "15"); // ES5 prohibits parseInt from handling octal, see annex E.
shouldBe('parseInt("0xf")', "15");
shouldBe('parseInt("15", 0)', "15");
shouldBe('parseInt("15", 10)', "15");
shouldBe('parseInt("F", 16)', "15");
shouldBe('parseInt("17", 8)', "15");
shouldBe('parseInt("15.99", 10)', "15");
shouldBe('parseInt("FXX123", 16)', "15");
shouldBe('parseInt("1111", 2)', "15");
shouldBe('parseInt("15*3", 10)', "15");

// this should be 0
shouldBe('parseInt("0x7", 10)', "0");
shouldBe('parseInt("1x7", 10)', "1");

shouldBeTrue("isNaN(parseFloat())");
shouldBeTrue("isNaN(parseFloat(''))");
shouldBeTrue("isNaN(parseFloat(' '))");
shouldBeTrue("isNaN(parseFloat('a'))");
shouldBe("parseFloat(1)", "1");
shouldBe("parseFloat(' 2.3')", "2.3");
shouldBe("parseFloat('3.1 x', 3)", "3.1");
shouldBe("parseFloat('3.1x', 3)", "3.1");
shouldBeFalse("isFinite(parseFloat('Infinity'))");
shouldBeFalse("delete NaN");
shouldBeFalse("delete Infinity");
shouldBeFalse("delete undefined");
                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/kde/Number-expected.txt                                     0000664 0000000 0000000 00000100406 14746647661 0024216 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Number() is 0
PASS Number(1) is 1
PASS Number(1.1) is 1.1
PASS Number('1.2') is 1.2
PASS isNaN(Number('a')) is true
PASS (new Number()).valueOf() is 0
PASS (new Number(.4)).valueOf() is 0.4
PASS (new Number('1.')).valueOf() is 1
PASS isNaN(new Number('a')) is true
PASS isNaN(Number.NaN) is true
PASS Number.NEGATIVE_INFINITY is -Infinity
PASS Number.POSITIVE_INFINITY is Infinity
PASS (1).toString() is '1'
PASS typeof (1).toString() is 'string'
PASS (10).toString(16) is 'a'
PASS (8.5).toString(16) is '8.8'
PASS (-8.5).toString(16) is '-8.8'
PASS Number.NaN.toString(16) is 'NaN'
PASS Number.POSITIVE_INFINITY.toString(16) is 'Infinity'
PASS Number.NEGATIVE_INFINITY.toString(16) is '-Infinity'
PASS Number.MAX_VALUE.toString(2).length is 1024
PASS (1).valueOf() is 1
PASS typeof (1).valueOf() is 'number'
PASS Number(1234.567).toFixed(0) is "1235"
PASS Number(1234.567).toFixed(undefined) is "1235"
PASS Number(-1234.567).toFixed(0) is "-1235"
PASS Number(-1234.567).toFixed(undefined) is "-1235"
PASS Number(0).toFixed(7) is "0.0000000"
PASS Number(0.003).toFixed(0) is "0"
PASS Number(-0.003).toFixed(0) is "-0"
PASS Number(40.1234567890123).toFixed(7) is "40.1234568"
PASS Number(-40.1234567890123).toFixed(7) is "-40.1234568"
PASS Number(4).toFixed(7) is "4.0000000"
PASS Number(-4).toFixed(7) is "-4.0000000"
PASS Number(0.000056).toFixed(7) is "0.0000560"
PASS Number(-0.000056).toFixed(7) is "-0.0000560"
PASS Number(NaN).toFixed(7) is "NaN"
PASS Number(Infinity).toFixed(7) is "Infinity"
PASS Number(-Infinity).toFixed(7) is "-Infinity"
PASS Number(Math.pow(10,4)).toFixed(13) is "10000.0000000000000"
PASS Number(Math.pow(10,17)).toFixed(16) is "100000000000000000.0000000000000000"
PASS Number(Math.pow(10,18)).toFixed(17) is "1000000000000000000.00000000000000000"
PASS Number(Math.pow(10,19)).toFixed(18) is "10000000000000000000.000000000000000000"
PASS Number(Math.pow(10,17)).toFixed(20) is "100000000000000000.00000000000000000000"
PASS Number(Math.pow(10,18)).toFixed(20) is "1000000000000000000.00000000000000000000"
PASS Number(Math.pow(10,19)).toFixed(20) is "10000000000000000000.00000000000000000000"
PASS Number(Math.pow(10,20)).toFixed(20) is "100000000000000000000.00000000000000000000"
PASS Number(Math.pow(10,21)).toFixed(20) is "1e+21"
PASS Number(-Math.pow(10,4)).toFixed(13) is "-10000.0000000000000"
PASS Number(-Math.pow(10,17)).toFixed(16) is "-100000000000000000.0000000000000000"
PASS Number(-Math.pow(10,18)).toFixed(17) is "-1000000000000000000.00000000000000000"
PASS Number(-Math.pow(10,19)).toFixed(18) is "-10000000000000000000.000000000000000000"
PASS Number(-Math.pow(10,17)).toFixed(20) is "-100000000000000000.00000000000000000000"
PASS Number(-Math.pow(10,18)).toFixed(20) is "-1000000000000000000.00000000000000000000"
PASS Number(-Math.pow(10,19)).toFixed(20) is "-10000000000000000000.00000000000000000000"
PASS Number(-Math.pow(10,20)).toFixed(20) is "-100000000000000000000.00000000000000000000"
PASS Number(-Math.pow(10,21)).toFixed(20) is "-1e+21"
PASS toFixedOrException(2,-1).indexOf('Range') >= 0 is true
PASS Number(2).toFixed(0) is "2"
PASS Number(2).toFixed(20) is "2.00000000000000000000"
FAIL toFixedOrException(2,21).indexOf('Range') >= 0 should be true. Was false.
PASS toFixedOrException(-2,-1).indexOf('Range') >= 0 is true
PASS Number(-2).toFixed(0) is "-2"
PASS Number(-2).toFixed(20) is "-2.00000000000000000000"
FAIL toFixedOrException(-2,21).indexOf('Range') >= 0 should be true. Was false.
PASS Number(NaN).toExponential() is "NaN"
PASS Number(Infinity).toExponential() is "Infinity"
PASS Number(-Infinity).toExponential() is "-Infinity"
PASS Number(NaN).toExponential(4) is "NaN"
PASS Number(Infinity).toExponential(4) is "Infinity"
PASS Number(-Infinity).toExponential(4) is "-Infinity"
PASS Number(123.456).toExponential() is "1.23456e+2"
PASS try { Number(123.456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS Number(123.456).toExponential(0) is "1e+2"
PASS Number(123.456).toExponential(1) is "1.2e+2"
PASS Number(123.456).toExponential(2) is "1.23e+2"
PASS Number(123.456).toExponential(3) is "1.235e+2"
PASS Number(123.456).toExponential(4) is "1.2346e+2"
PASS Number(123.456).toExponential(5) is "1.23456e+2"
PASS Number(123.456).toExponential(6) is "1.234560e+2"
PASS Number(123.456).toExponential(7) is "1.2345600e+2"
PASS Number(123.456).toExponential(8) is "1.23456000e+2"
PASS Number(123.456).toExponential(9) is "1.234560000e+2"
PASS Number(123.456).toExponential(10) is "1.2345600000e+2"
PASS Number(123.456).toExponential(11) is "1.23456000000e+2"
PASS Number(123.456).toExponential(12) is "1.234560000000e+2"
PASS Number(123.456).toExponential(13) is "1.2345600000000e+2"
PASS Number(123.456).toExponential(14) is "1.23456000000000e+2"
PASS Number(123.456).toExponential(15) is "1.234560000000000e+2"
PASS Number(123.456).toExponential(16) is "1.2345600000000000e+2"
PASS Number(123.456).toExponential(17) is "1.23456000000000003e+2"
PASS Number(123.456).toExponential(18) is "1.234560000000000031e+2"
PASS Number(123.456).toExponential(19) is "1.2345600000000000307e+2"
PASS Number(123.456).toExponential(20) is "1.23456000000000003070e+2"
FAIL try { Number(123.456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; } should be true (of type boolean). Was 1.234560000000000030695e+2 (of type string).
PASS Number(-123.456).toExponential() is "-1.23456e+2"
PASS try { Number(-123.456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS Number(-123.456).toExponential(0) is "-1e+2"
PASS Number(-123.456).toExponential(1) is "-1.2e+2"
PASS Number(-123.456).toExponential(2) is "-1.23e+2"
PASS Number(-123.456).toExponential(3) is "-1.235e+2"
PASS Number(-123.456).toExponential(4) is "-1.2346e+2"
PASS Number(-123.456).toExponential(5) is "-1.23456e+2"
PASS Number(-123.456).toExponential(6) is "-1.234560e+2"
PASS Number(-123.456).toExponential(7) is "-1.2345600e+2"
PASS Number(-123.456).toExponential(8) is "-1.23456000e+2"
PASS Number(-123.456).toExponential(9) is "-1.234560000e+2"
PASS Number(-123.456).toExponential(10) is "-1.2345600000e+2"
PASS Number(-123.456).toExponential(11) is "-1.23456000000e+2"
PASS Number(-123.456).toExponential(12) is "-1.234560000000e+2"
PASS Number(-123.456).toExponential(13) is "-1.2345600000000e+2"
PASS Number(-123.456).toExponential(14) is "-1.23456000000000e+2"
PASS Number(-123.456).toExponential(15) is "-1.234560000000000e+2"
PASS Number(-123.456).toExponential(16) is "-1.2345600000000000e+2"
PASS Number(-123.456).toExponential(17) is "-1.23456000000000003e+2"
PASS Number(-123.456).toExponential(18) is "-1.234560000000000031e+2"
PASS Number(-123.456).toExponential(19) is "-1.2345600000000000307e+2"
PASS Number(-123.456).toExponential(20) is "-1.23456000000000003070e+2"
FAIL try { Number(-123.456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; } should be true (of type boolean). Was -1.234560000000000030695e+2 (of type string).
PASS Number(.000123456).toExponential() is "1.23456e-4"
PASS try { Number(.000123456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS Number(.000123456).toExponential(0) is "1e-4"
PASS Number(.000123456).toExponential(1) is "1.2e-4"
PASS Number(.000123456).toExponential(2) is "1.23e-4"
PASS Number(.000123456).toExponential(3) is "1.235e-4"
PASS Number(.000123456).toExponential(4) is "1.2346e-4"
PASS Number(.000123456).toExponential(5) is "1.23456e-4"
PASS Number(.000123456).toExponential(6) is "1.234560e-4"
PASS Number(.000123456).toExponential(7) is "1.2345600e-4"
PASS Number(.000123456).toExponential(8) is "1.23456000e-4"
PASS Number(.000123456).toExponential(9) is "1.234560000e-4"
PASS Number(.000123456).toExponential(10) is "1.2345600000e-4"
PASS Number(.000123456).toExponential(11) is "1.23456000000e-4"
PASS Number(.000123456).toExponential(12) is "1.234560000000e-4"
PASS Number(.000123456).toExponential(13) is "1.2345600000000e-4"
PASS Number(.000123456).toExponential(14) is "1.23456000000000e-4"
PASS Number(.000123456).toExponential(15) is "1.234560000000000e-4"
PASS Number(.000123456).toExponential(16) is "1.2345600000000001e-4"
PASS Number(.000123456).toExponential(17) is "1.23456000000000005e-4"
PASS Number(.000123456).toExponential(18) is "1.234560000000000052e-4"
PASS Number(.000123456).toExponential(19) is "1.2345600000000000519e-4"
PASS Number(.000123456).toExponential(20) is "1.23456000000000005188e-4"
FAIL try { Number(.000123456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; } should be true (of type boolean). Was 1.234560000000000051876e-4 (of type string).
PASS Number(-.000123456).toExponential() is "-1.23456e-4"
PASS try { Number(-.000123456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS Number(-.000123456).toExponential(0) is "-1e-4"
PASS Number(-.000123456).toExponential(1) is "-1.2e-4"
PASS Number(-.000123456).toExponential(2) is "-1.23e-4"
PASS Number(-.000123456).toExponential(3) is "-1.235e-4"
PASS Number(-.000123456).toExponential(4) is "-1.2346e-4"
PASS Number(-.000123456).toExponential(5) is "-1.23456e-4"
PASS Number(-.000123456).toExponential(6) is "-1.234560e-4"
PASS Number(-.000123456).toExponential(7) is "-1.2345600e-4"
PASS Number(-.000123456).toExponential(8) is "-1.23456000e-4"
PASS Number(-.000123456).toExponential(9) is "-1.234560000e-4"
PASS Number(-.000123456).toExponential(10) is "-1.2345600000e-4"
PASS Number(-.000123456).toExponential(11) is "-1.23456000000e-4"
PASS Number(-.000123456).toExponential(12) is "-1.234560000000e-4"
PASS Number(-.000123456).toExponential(13) is "-1.2345600000000e-4"
PASS Number(-.000123456).toExponential(14) is "-1.23456000000000e-4"
PASS Number(-.000123456).toExponential(15) is "-1.234560000000000e-4"
PASS Number(-.000123456).toExponential(16) is "-1.2345600000000001e-4"
PASS Number(-.000123456).toExponential(17) is "-1.23456000000000005e-4"
PASS Number(-.000123456).toExponential(18) is "-1.234560000000000052e-4"
PASS Number(-.000123456).toExponential(19) is "-1.2345600000000000519e-4"
PASS Number(-.000123456).toExponential(20) is "-1.23456000000000005188e-4"
FAIL try { Number(-.000123456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; } should be true (of type boolean). Was -1.234560000000000051876e-4 (of type string).
PASS Number(123.4567890123456789012).toExponential() is "1.2345678901234568e+2"
PASS try { Number(123.4567890123456789012).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS Number(123.4567890123456789012).toExponential(0) is "1e+2"
PASS Number(123.4567890123456789012).toExponential(1) is "1.2e+2"
PASS Number(123.4567890123456789012).toExponential(2) is "1.23e+2"
PASS Number(123.4567890123456789012).toExponential(3) is "1.235e+2"
PASS Number(123.4567890123456789012).toExponential(4) is "1.2346e+2"
PASS Number(123.4567890123456789012).toExponential(5) is "1.23457e+2"
PASS Number(123.4567890123456789012).toExponential(6) is "1.234568e+2"
PASS Number(123.4567890123456789012).toExponential(7) is "1.2345679e+2"
PASS Number(123.4567890123456789012).toExponential(8) is "1.23456789e+2"
PASS Number(123.4567890123456789012).toExponential(9) is "1.234567890e+2"
PASS Number(123.4567890123456789012).toExponential(10) is "1.2345678901e+2"
PASS Number(123.4567890123456789012).toExponential(11) is "1.23456789012e+2"
PASS Number(123.4567890123456789012).toExponential(12) is "1.234567890123e+2"
PASS Number(123.4567890123456789012).toExponential(13) is "1.2345678901235e+2"
PASS Number(123.4567890123456789012).toExponential(14) is "1.23456789012346e+2"
PASS Number(123.4567890123456789012).toExponential(15) is "1.234567890123457e+2"
PASS Number(123.4567890123456789012).toExponential(16) is "1.2345678901234568e+2"
PASS Number(123.4567890123456789012).toExponential(17) is "1.23456789012345681e+2"
PASS Number(123.4567890123456789012).toExponential(18) is "1.234567890123456806e+2"
PASS Number(123.4567890123456789012).toExponential(19) is "1.2345678901234568059e+2"
PASS Number(123.4567890123456789012).toExponential(20) is "1.23456789012345680590e+2"
FAIL try { Number(123.4567890123456789012).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; } should be true (of type boolean). Was 1.234567890123456805895e+2 (of type string).
PASS Number(-123.4567890123456789012).toExponential() is "-1.2345678901234568e+2"
PASS try { Number(-123.4567890123456789012).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS Number(-123.4567890123456789012).toExponential(0) is "-1e+2"
PASS Number(-123.4567890123456789012).toExponential(1) is "-1.2e+2"
PASS Number(-123.4567890123456789012).toExponential(2) is "-1.23e+2"
PASS Number(-123.4567890123456789012).toExponential(3) is "-1.235e+2"
PASS Number(-123.4567890123456789012).toExponential(4) is "-1.2346e+2"
PASS Number(-123.4567890123456789012).toExponential(5) is "-1.23457e+2"
PASS Number(-123.4567890123456789012).toExponential(6) is "-1.234568e+2"
PASS Number(-123.4567890123456789012).toExponential(7) is "-1.2345679e+2"
PASS Number(-123.4567890123456789012).toExponential(8) is "-1.23456789e+2"
PASS Number(-123.4567890123456789012).toExponential(9) is "-1.234567890e+2"
PASS Number(-123.4567890123456789012).toExponential(10) is "-1.2345678901e+2"
PASS Number(-123.4567890123456789012).toExponential(11) is "-1.23456789012e+2"
PASS Number(-123.4567890123456789012).toExponential(12) is "-1.234567890123e+2"
PASS Number(-123.4567890123456789012).toExponential(13) is "-1.2345678901235e+2"
PASS Number(-123.4567890123456789012).toExponential(14) is "-1.23456789012346e+2"
PASS Number(-123.4567890123456789012).toExponential(15) is "-1.234567890123457e+2"
PASS Number(-123.4567890123456789012).toExponential(16) is "-1.2345678901234568e+2"
PASS Number(-123.4567890123456789012).toExponential(17) is "-1.23456789012345681e+2"
PASS Number(-123.4567890123456789012).toExponential(18) is "-1.234567890123456806e+2"
PASS Number(-123.4567890123456789012).toExponential(19) is "-1.2345678901234568059e+2"
PASS Number(-123.4567890123456789012).toExponential(20) is "-1.23456789012345680590e+2"
FAIL try { Number(-123.4567890123456789012).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; } should be true (of type boolean). Was -1.234567890123456805895e+2 (of type string).
PASS Number(.0000000000000000000001).toExponential() is "1e-22"
PASS Number(.0000000000000000000012).toExponential() is "1.2e-21"
PASS Number(.0000000000000000000123).toExponential() is "1.23e-20"
PASS Number(.0000000000000000000123).toExponential() is "1.23e-20"
PASS Number(.0000000000000000001234).toExponential() is "1.234e-19"
PASS Number(.0000000000000000012345).toExponential() is "1.2345e-18"
PASS Number(.0000000000000000123456).toExponential() is "1.23456e-17"
PASS Number(.0000000000000001234567).toExponential() is "1.234567e-16"
PASS Number(.0000000000000012345678).toExponential() is "1.2345678e-15"
PASS Number(.0000000000000123456789).toExponential() is "1.23456789e-14"
PASS Number(.0000000000001234567890).toExponential() is "1.23456789e-13"
PASS Number(.0000000000012345678901).toExponential() is "1.2345678901e-12"
PASS Number(.0000000000123456789012).toExponential() is "1.23456789012e-11"
PASS Number(.0000000001234567890123).toExponential() is "1.234567890123e-10"
PASS Number(.0000000012345678901234).toExponential() is "1.2345678901234e-9"
PASS Number(.0000000123456789012345).toExponential() is "1.23456789012345e-8"
PASS Number(.0000001234567890123456).toExponential() is "1.234567890123456e-7"
PASS Number(.0000012345678901234567).toExponential() is "1.2345678901234567e-6"
PASS Number(.0000123456789012345678).toExponential() is "1.2345678901234568e-5"
PASS Number(.0001234567890123456789).toExponential() is "1.2345678901234567e-4"
PASS Number(.0012345678901234567890).toExponential() is "1.2345678901234567e-3"
PASS Number(.0123456789012345678901).toExponential() is "1.2345678901234568e-2"
PASS Number(1.234567890123456789012).toExponential() is "1.2345678901234567e+0"
PASS Number(12.34567890123456789012).toExponential() is "1.2345678901234567e+1"
PASS Number(123.4567890123456789012).toExponential() is "1.2345678901234568e+2"
PASS Number(1234.567890123456789012).toExponential() is "1.234567890123457e+3"
PASS Number(12345.67890123456789012).toExponential() is "1.2345678901234567e+4"
PASS Number(123456.7890123456789012).toExponential() is "1.2345678901234567e+5"
PASS Number(1234567.890123456789012).toExponential() is "1.2345678901234567e+6"
PASS Number(12345678.90123456789012).toExponential() is "1.2345678901234567e+7"
PASS Number(123456789.0123456789012).toExponential() is "1.2345678901234567e+8"
PASS Number(1234567890.123456789012).toExponential() is "1.2345678901234567e+9"
PASS Number(12345678901.23456789012).toExponential() is "1.2345678901234568e+10"
PASS Number(123456789012.3456789012).toExponential() is "1.2345678901234567e+11"
PASS Number(1234567890123.456789012).toExponential() is "1.2345678901234568e+12"
PASS Number(12345678901234.56789012).toExponential() is "1.2345678901234568e+13"
PASS Number(123456789012345.6789012).toExponential() is "1.2345678901234567e+14"
PASS Number(1234567890123456.789012).toExponential() is "1.2345678901234568e+15"
PASS Number(12345678901234567.89012).toExponential() is "1.2345678901234568e+16"
PASS Number(123456789012345678.9012).toExponential() is "1.2345678901234568e+17"
PASS Number(1234567890123456789.012).toExponential() is "1.2345678901234568e+18"
PASS Number(12345678901234567890.12).toExponential() is "1.2345678901234567e+19"
PASS Number(123456789012345678901.2).toExponential() is "1.2345678901234568e+20"
PASS Number(-.0000000000000000000001).toExponential() is "-1e-22"
PASS Number(-.0000000000000000000012).toExponential() is "-1.2e-21"
PASS Number(-.0000000000000000000123).toExponential() is "-1.23e-20"
PASS Number(-.0000000000000000000123).toExponential() is "-1.23e-20"
PASS Number(-.0000000000000000001234).toExponential() is "-1.234e-19"
PASS Number(-.0000000000000000012345).toExponential() is "-1.2345e-18"
PASS Number(-.0000000000000000123456).toExponential() is "-1.23456e-17"
PASS Number(-.0000000000000001234567).toExponential() is "-1.234567e-16"
PASS Number(-.0000000000000012345678).toExponential() is "-1.2345678e-15"
PASS Number(-.0000000000000123456789).toExponential() is "-1.23456789e-14"
PASS Number(-.0000000000001234567890).toExponential() is "-1.23456789e-13"
PASS Number(-.0000000000012345678901).toExponential() is "-1.2345678901e-12"
PASS Number(-.0000000000123456789012).toExponential() is "-1.23456789012e-11"
PASS Number(-.0000000001234567890123).toExponential() is "-1.234567890123e-10"
PASS Number(-.0000000012345678901234).toExponential() is "-1.2345678901234e-9"
PASS Number(-.0000000123456789012345).toExponential() is "-1.23456789012345e-8"
PASS Number(-.0000001234567890123456).toExponential() is "-1.234567890123456e-7"
PASS Number(-.0000012345678901234567).toExponential() is "-1.2345678901234567e-6"
PASS Number(-.0000123456789012345678).toExponential() is "-1.2345678901234568e-5"
PASS Number(-.0001234567890123456789).toExponential() is "-1.2345678901234567e-4"
PASS Number(-.0012345678901234567890).toExponential() is "-1.2345678901234567e-3"
PASS Number(-.0123456789012345678901).toExponential() is "-1.2345678901234568e-2"
PASS Number(-1.234567890123456789012).toExponential() is "-1.2345678901234567e+0"
PASS Number(-12.34567890123456789012).toExponential() is "-1.2345678901234567e+1"
PASS Number(-123.4567890123456789012).toExponential() is "-1.2345678901234568e+2"
PASS Number(-1234.567890123456789012).toExponential() is "-1.234567890123457e+3"
PASS Number(-12345.67890123456789012).toExponential() is "-1.2345678901234567e+4"
PASS Number(-123456.7890123456789012).toExponential() is "-1.2345678901234567e+5"
PASS Number(-1234567.890123456789012).toExponential() is "-1.2345678901234567e+6"
PASS Number(-12345678.90123456789012).toExponential() is "-1.2345678901234567e+7"
PASS Number(-123456789.0123456789012).toExponential() is "-1.2345678901234567e+8"
PASS Number(-1234567890.123456789012).toExponential() is "-1.2345678901234567e+9"
PASS Number(-12345678901.23456789012).toExponential() is "-1.2345678901234568e+10"
PASS Number(-123456789012.3456789012).toExponential() is "-1.2345678901234567e+11"
PASS Number(-1234567890123.456789012).toExponential() is "-1.2345678901234568e+12"
PASS Number(-12345678901234.56789012).toExponential() is "-1.2345678901234568e+13"
PASS Number(-123456789012345.6789012).toExponential() is "-1.2345678901234567e+14"
PASS Number(-1234567890123456.789012).toExponential() is "-1.2345678901234568e+15"
PASS Number(-12345678901234567.89012).toExponential() is "-1.2345678901234568e+16"
PASS Number(-123456789012345678.9012).toExponential() is "-1.2345678901234568e+17"
PASS Number(-1234567890123456789.012).toExponential() is "-1.2345678901234568e+18"
PASS Number(-12345678901234567890.12).toExponential() is "-1.2345678901234567e+19"
PASS Number(-123456789012345678901.2).toExponential() is "-1.2345678901234568e+20"
PASS try { Number(1).toPrecision(-1); } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS try { Number(1).toPrecision(0); } catch (e) { String(e).indexOf('Range') >= 0; } is true
PASS try { Number(1).toPrecision(1); } catch (e) { String(e); } is "1"
PASS try { Number(1).toPrecision(21); } catch (e) { String(e); } is "1.00000000000000000000"
FAIL try { Number(1).toPrecision(22); } catch (e) { String(e).indexOf('Range') >= 0; } should be true (of type boolean). Was 1.000000000000000000000 (of type string).
PASS Number(NaN).toPrecision() is "NaN"
PASS Number(NaN).toPrecision(1) is "NaN"
PASS Number(Infinity).toPrecision() is "Infinity"
PASS Number(Infinity).toPrecision(1) is "Infinity"
PASS Number(-Infinity).toPrecision() is "-Infinity"
PASS Number(-Infinity).toPrecision(1) is "-Infinity"
PASS Number(.0000000012345).toPrecision(2) is "1.2e-9"
PASS Number(.000000012345).toPrecision(2) is "1.2e-8"
PASS Number(.00000012345).toPrecision(2) is "1.2e-7"
PASS Number(.0000012345).toPrecision(2) is "0.0000012"
PASS Number(.000012345).toPrecision(2) is "0.000012"
PASS Number(.00012345).toPrecision(2) is "0.00012"
PASS Number(.0012345).toPrecision(2) is "0.0012"
PASS Number(.012345).toPrecision(2) is "0.012"
PASS Number(.12345).toPrecision(2) is "0.12"
PASS Number(1.2345).toPrecision(2) is "1.2"
PASS Number(12.345).toPrecision(2) is "12"
PASS Number(123.45).toPrecision(2) is "1.2e+2"
PASS Number(1234.5).toPrecision(2) is "1.2e+3"
PASS Number(12345).toPrecision(2) is "1.2e+4"
PASS Number(12345.67).toPrecision(4) is "1.235e+4"
PASS Number(12344.67).toPrecision(4) is "1.234e+4"
PASS Number(0.0001234567890123456789012345).toPrecision() is "0.00012345678901234567"
PASS Number(0.0001234567890123456789012345).toPrecision(1) is "0.0001"
PASS Number(0.0001234567890123456789012345).toPrecision(2) is "0.00012"
PASS Number(0.0001234567890123456789012345).toPrecision(3) is "0.000123"
PASS Number(0.0001234567890123456789012345).toPrecision(4) is "0.0001235"
PASS Number(0.0001234567890123456789012345).toPrecision(5) is "0.00012346"
PASS Number(0.0001234567890123456789012345).toPrecision(6) is "0.000123457"
PASS Number(0.0001234567890123456789012345).toPrecision(7) is "0.0001234568"
PASS Number(0.0001234567890123456789012345).toPrecision(8) is "0.00012345679"
PASS Number(0.0001234567890123456789012345).toPrecision(9) is "0.000123456789"
PASS Number(0.0001234567890123456789012345).toPrecision(10) is "0.0001234567890"
PASS Number(0.0001234567890123456789012345).toPrecision(11) is "0.00012345678901"
PASS Number(0.0001234567890123456789012345).toPrecision(12) is "0.000123456789012"
PASS Number(0.0001234567890123456789012345).toPrecision(13) is "0.0001234567890123"
PASS Number(0.0001234567890123456789012345).toPrecision(14) is "0.00012345678901235"
PASS Number(0.0001234567890123456789012345).toPrecision(15) is "0.000123456789012346"
PASS Number(0.0001234567890123456789012345).toPrecision(16) is "0.0001234567890123457"
PASS Number(0.0001234567890123456789012345).toPrecision(17) is "0.00012345678901234567"
PASS Number(0.0001234567890123456789012345).toPrecision(18) is "0.000123456789012345671"
PASS Number(0.0001234567890123456789012345).toPrecision(19) is "0.0001234567890123456713"
PASS Number(0.0001234567890123456789012345).toPrecision(20) is "0.00012345678901234567130"
PASS Number(0.0001234567890123456789012345).toPrecision(21) is "0.000123456789012345671298"
PASS Number(12345.67890123456789012345).toPrecision() is "12345.678901234567"
PASS Number(12345.67890123456789012345).toPrecision(1) is "1e+4"
PASS Number(12345.67890123456789012345).toPrecision(2) is "1.2e+4"
PASS Number(12345.67890123456789012345).toPrecision(3) is "1.23e+4"
PASS Number(12345.67890123456789012345).toPrecision(4) is "1.235e+4"
PASS Number(12345.67890123456789012345).toPrecision(5) is "12346"
PASS Number(12345.67890123456789012345).toPrecision(6) is "12345.7"
PASS Number(12345.67890123456789012345).toPrecision(7) is "12345.68"
PASS Number(12345.67890123456789012345).toPrecision(8) is "12345.679"
PASS Number(12345.67890123456789012345).toPrecision(9) is "12345.6789"
PASS Number(12345.67890123456789012345).toPrecision(10) is "12345.67890"
PASS Number(12345.67890123456789012345).toPrecision(11) is "12345.678901"
PASS Number(12345.67890123456789012345).toPrecision(12) is "12345.6789012"
PASS Number(12345.67890123456789012345).toPrecision(13) is "12345.67890123"
PASS Number(12345.67890123456789012345).toPrecision(14) is "12345.678901235"
PASS Number(12345.67890123456789012345).toPrecision(15) is "12345.6789012346"
PASS Number(12345.67890123456789012345).toPrecision(16) is "12345.67890123457"
PASS Number(12345.67890123456789012345).toPrecision(17) is "12345.678901234567"
PASS Number(12345.67890123456789012345).toPrecision(18) is "12345.6789012345671"
PASS Number(12345.67890123456789012345).toPrecision(19) is "12345.67890123456709"
PASS Number(12345.67890123456789012345).toPrecision(20) is "12345.678901234567093"
PASS Number(12345.67890123456789012345).toPrecision(21) is "12345.6789012345670926"
PASS Number(-.0000000012345).toPrecision(2) is "-1.2e-9"
PASS Number(-.000000012345).toPrecision(2) is "-1.2e-8"
PASS Number(-.00000012345).toPrecision(2) is "-1.2e-7"
PASS Number(-.0000012345).toPrecision(2) is "-0.0000012"
PASS Number(-.000012345).toPrecision(2) is "-0.000012"
PASS Number(-.00012345).toPrecision(2) is "-0.00012"
PASS Number(-.0012345).toPrecision(2) is "-0.0012"
PASS Number(-.012345).toPrecision(2) is "-0.012"
PASS Number(-.12345).toPrecision(2) is "-0.12"
PASS Number(-1.2345).toPrecision(2) is "-1.2"
PASS Number(-12.345).toPrecision(2) is "-12"
PASS Number(-123.45).toPrecision(2) is "-1.2e+2"
PASS Number(-1234.5).toPrecision(2) is "-1.2e+3"
PASS Number(-12345).toPrecision(2) is "-1.2e+4"
PASS Number(-12345.67).toPrecision(4) is "-1.235e+4"
PASS Number(-12344.67).toPrecision(4) is "-1.234e+4"
PASS Number(-0.0001234567890123456789012345).toPrecision() is "-0.00012345678901234567"
PASS Number(-0.0001234567890123456789012345).toPrecision(1) is "-0.0001"
PASS Number(-0.0001234567890123456789012345).toPrecision(2) is "-0.00012"
PASS Number(-0.0001234567890123456789012345).toPrecision(3) is "-0.000123"
PASS Number(-0.0001234567890123456789012345).toPrecision(4) is "-0.0001235"
PASS Number(-0.0001234567890123456789012345).toPrecision(5) is "-0.00012346"
PASS Number(-0.0001234567890123456789012345).toPrecision(6) is "-0.000123457"
PASS Number(-0.0001234567890123456789012345).toPrecision(7) is "-0.0001234568"
PASS Number(-0.0001234567890123456789012345).toPrecision(8) is "-0.00012345679"
PASS Number(-0.0001234567890123456789012345).toPrecision(9) is "-0.000123456789"
PASS Number(-0.0001234567890123456789012345).toPrecision(10) is "-0.0001234567890"
PASS Number(-0.0001234567890123456789012345).toPrecision(11) is "-0.00012345678901"
PASS Number(-0.0001234567890123456789012345).toPrecision(12) is "-0.000123456789012"
PASS Number(-0.0001234567890123456789012345).toPrecision(13) is "-0.0001234567890123"
PASS Number(-0.0001234567890123456789012345).toPrecision(14) is "-0.00012345678901235"
PASS Number(-0.0001234567890123456789012345).toPrecision(15) is "-0.000123456789012346"
PASS Number(-0.0001234567890123456789012345).toPrecision(16) is "-0.0001234567890123457"
PASS Number(-0.0001234567890123456789012345).toPrecision(17) is "-0.00012345678901234567"
PASS Number(-0.0001234567890123456789012345).toPrecision(18) is "-0.000123456789012345671"
PASS Number(-0.0001234567890123456789012345).toPrecision(19) is "-0.0001234567890123456713"
PASS Number(-0.0001234567890123456789012345).toPrecision(20) is "-0.00012345678901234567130"
PASS Number(-0.0001234567890123456789012345).toPrecision(21) is "-0.000123456789012345671298"
PASS Number(-12345.67890123456789012345).toPrecision() is "-12345.678901234567"
PASS Number(-12345.67890123456789012345).toPrecision(1) is "-1e+4"
PASS Number(-12345.67890123456789012345).toPrecision(2) is "-1.2e+4"
PASS Number(-12345.67890123456789012345).toPrecision(3) is "-1.23e+4"
PASS Number(-12345.67890123456789012345).toPrecision(4) is "-1.235e+4"
PASS Number(-12345.67890123456789012345).toPrecision(5) is "-12346"
PASS Number(-12345.67890123456789012345).toPrecision(6) is "-12345.7"
PASS Number(-12345.67890123456789012345).toPrecision(7) is "-12345.68"
PASS Number(-12345.67890123456789012345).toPrecision(8) is "-12345.679"
PASS Number(-12345.67890123456789012345).toPrecision(9) is "-12345.6789"
PASS Number(-12345.67890123456789012345).toPrecision(10) is "-12345.67890"
PASS Number(-12345.67890123456789012345).toPrecision(11) is "-12345.678901"
PASS Number(-12345.67890123456789012345).toPrecision(12) is "-12345.6789012"
PASS Number(-12345.67890123456789012345).toPrecision(13) is "-12345.67890123"
PASS Number(-12345.67890123456789012345).toPrecision(14) is "-12345.678901235"
PASS Number(-12345.67890123456789012345).toPrecision(15) is "-12345.6789012346"
PASS Number(-12345.67890123456789012345).toPrecision(16) is "-12345.67890123457"
PASS Number(-12345.67890123456789012345).toPrecision(17) is "-12345.678901234567"
PASS Number(-12345.67890123456789012345).toPrecision(18) is "-12345.6789012345671"
PASS Number(-12345.67890123456789012345).toPrecision(19) is "-12345.67890123456709"
PASS Number(-12345.67890123456789012345).toPrecision(20) is "-12345.678901234567093"
PASS Number(-12345.67890123456789012345).toPrecision(21) is "-12345.6789012345670926"
PASS Number(0).toPrecision() is "0"
PASS Number(0).toPrecision(1) is "0"
PASS Number(0).toPrecision(2) is "0.0"
PASS Number(0).toPrecision(3) is "0.00"
PASS Number(0).toPrecision(4) is "0.000"
PASS Number(0).toPrecision(5) is "0.0000"
PASS Number(0).toPrecision(6) is "0.00000"
PASS Number(0).toPrecision(7) is "0.000000"
PASS Number(0).toPrecision(8) is "0.0000000"
PASS Number(0).toPrecision(9) is "0.00000000"
PASS Number(0).toPrecision(10) is "0.000000000"
PASS Number(0).toPrecision(11) is "0.0000000000"
PASS Number(0).toPrecision(12) is "0.00000000000"
PASS Number(0).toPrecision(13) is "0.000000000000"
PASS Number(0).toPrecision(14) is "0.0000000000000"
PASS Number(0).toPrecision(15) is "0.00000000000000"
PASS Number(0).toPrecision(16) is "0.000000000000000"
PASS Number(0).toPrecision(17) is "0.0000000000000000"
PASS Number(0).toPrecision(18) is "0.00000000000000000"
PASS Number(0).toPrecision(19) is "0.000000000000000000"
PASS Number(0).toPrecision(20) is "0.0000000000000000000"
PASS Number(0).toPrecision(21) is "0.00000000000000000000"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/test/webkit/fast/js/kde/Number.js                                               0000664 0000000 0000000 00000107261 14746647661 0022222 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("Number()", "0");
shouldBe("Number(1)", "1");
shouldBe("Number(1.1)", "1.1");
shouldBe("Number('1.2')", "1.2");
shouldBe("isNaN(Number('a'))", "true");

shouldBe("(new Number()).valueOf()", "0");
shouldBe("(new Number(.4)).valueOf()", "0.4");
shouldBe("(new Number('1.')).valueOf()", "1");
shouldBe("isNaN(new Number('a'))", "true");

shouldBe("isNaN(Number.NaN)", "true");
shouldBe("Number.NEGATIVE_INFINITY", "-Infinity");
shouldBe("Number.POSITIVE_INFINITY", "Infinity");

shouldBe("(1).toString()", "'1'");
shouldBe("typeof (1).toString()", "'string'");
shouldBe("(10).toString(16)", "'a'");
shouldBe("(8.5).toString(16)", "'8.8'");
shouldBe("(-8.5).toString(16)", "'-8.8'");
shouldBe("Number.NaN.toString(16)", "'NaN'");
shouldBe("Number.POSITIVE_INFINITY.toString(16)", "'Infinity'");
shouldBe("Number.NEGATIVE_INFINITY.toString(16)", "'-Infinity'");
shouldBe("Number.MAX_VALUE.toString(2).length", "1024");
shouldBe("(1).valueOf()", "1");
shouldBe("typeof (1).valueOf()", "'number'");

function toFixedOrException(val,fractionDigits)
{
  var s = "";
  try {
    s = String(Number(val).toFixed(fractionDigits));
  }
  catch (e) {
    s = String(e);
  }
  return s;
}

shouldBe("Number(1234.567).toFixed(0)","\"1235\"");
shouldBe("Number(1234.567).toFixed(undefined)","\"1235\"");
shouldBe("Number(-1234.567).toFixed(0)","\"-1235\"");
shouldBe("Number(-1234.567).toFixed(undefined)","\"-1235\"");
shouldBe("Number(0).toFixed(7)","\"0.0000000\"");
shouldBe("Number(0.003).toFixed(0)","\"0\"");
shouldBe("Number(-0.003).toFixed(0)","\"-0\"");
shouldBe("Number(40.1234567890123).toFixed(7)","\"40.1234568\"");
shouldBe("Number(-40.1234567890123).toFixed(7)","\"-40.1234568\"");
shouldBe("Number(4).toFixed(7)","\"4.0000000\"");
shouldBe("Number(-4).toFixed(7)","\"-4.0000000\"");
shouldBe("Number(0.000056).toFixed(7)","\"0.0000560\"");
shouldBe("Number(-0.000056).toFixed(7)","\"-0.0000560\"");
shouldBe("Number(NaN).toFixed(7)","\"NaN\"");
shouldBe("Number(Infinity).toFixed(7)","\"Infinity\"");
shouldBe("Number(-Infinity).toFixed(7)","\"-Infinity\"");
shouldBe("Number(Math.pow(10,4)).toFixed(13)","\"10000.0000000000000\"");
shouldBe("Number(Math.pow(10,17)).toFixed(16)","\"100000000000000000.0000000000000000\"");
shouldBe("Number(Math.pow(10,18)).toFixed(17)","\"1000000000000000000.00000000000000000\"");
shouldBe("Number(Math.pow(10,19)).toFixed(18)","\"10000000000000000000.000000000000000000\"");
shouldBe("Number(Math.pow(10,17)).toFixed(20)","\"100000000000000000.00000000000000000000\"");
shouldBe("Number(Math.pow(10,18)).toFixed(20)","\"1000000000000000000.00000000000000000000\"");
shouldBe("Number(Math.pow(10,19)).toFixed(20)","\"10000000000000000000.00000000000000000000\"");
shouldBe("Number(Math.pow(10,20)).toFixed(20)","\"100000000000000000000.00000000000000000000\"");
shouldBe("Number(Math.pow(10,21)).toFixed(20)","\"1e+21\"");
shouldBe("Number(-Math.pow(10,4)).toFixed(13)","\"-10000.0000000000000\"");
shouldBe("Number(-Math.pow(10,17)).toFixed(16)","\"-100000000000000000.0000000000000000\"");
shouldBe("Number(-Math.pow(10,18)).toFixed(17)","\"-1000000000000000000.00000000000000000\"");
shouldBe("Number(-Math.pow(10,19)).toFixed(18)","\"-10000000000000000000.000000000000000000\"");
shouldBe("Number(-Math.pow(10,17)).toFixed(20)","\"-100000000000000000.00000000000000000000\"");
shouldBe("Number(-Math.pow(10,18)).toFixed(20)","\"-1000000000000000000.00000000000000000000\"");
shouldBe("Number(-Math.pow(10,19)).toFixed(20)","\"-10000000000000000000.00000000000000000000\"");
shouldBe("Number(-Math.pow(10,20)).toFixed(20)","\"-100000000000000000000.00000000000000000000\"");
shouldBe("Number(-Math.pow(10,21)).toFixed(20)","\"-1e+21\"");
shouldBeTrue("toFixedOrException(2,-1).indexOf('Range') >= 0");
shouldBe("Number(2).toFixed(0)","\"2\"");
shouldBe("Number(2).toFixed(20)","\"2.00000000000000000000\"");
shouldBeTrue("toFixedOrException(2,21).indexOf('Range') >= 0");
shouldBeTrue("toFixedOrException(-2,-1).indexOf('Range') >= 0");
shouldBe("Number(-2).toFixed(0)","\"-2\"");
shouldBe("Number(-2).toFixed(20)","\"-2.00000000000000000000\"");
shouldBeTrue("toFixedOrException(-2,21).indexOf('Range') >= 0");




shouldBe("Number(NaN).toExponential()","\"NaN\"");
shouldBe("Number(Infinity).toExponential()","\"Infinity\"");
shouldBe("Number(-Infinity).toExponential()","\"-Infinity\"");
shouldBe("Number(NaN).toExponential(4)","\"NaN\"");
shouldBe("Number(Infinity).toExponential(4)","\"Infinity\"");
shouldBe("Number(-Infinity).toExponential(4)","\"-Infinity\"");
shouldBe("Number(123.456).toExponential()","\"1.23456e+2\"");
shouldBeTrue("try { Number(123.456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(123.456).toExponential(0)","\"1e+2\"");
shouldBe("Number(123.456).toExponential(1)","\"1.2e+2\"");
shouldBe("Number(123.456).toExponential(2)","\"1.23e+2\"");
shouldBe("Number(123.456).toExponential(3)","\"1.235e+2\"");
shouldBe("Number(123.456).toExponential(4)","\"1.2346e+2\"");
shouldBe("Number(123.456).toExponential(5)","\"1.23456e+2\"");
shouldBe("Number(123.456).toExponential(6)","\"1.234560e+2\"");
shouldBe("Number(123.456).toExponential(7)","\"1.2345600e+2\"");
shouldBe("Number(123.456).toExponential(8)","\"1.23456000e+2\"");
shouldBe("Number(123.456).toExponential(9)","\"1.234560000e+2\"");
shouldBe("Number(123.456).toExponential(10)","\"1.2345600000e+2\"");
shouldBe("Number(123.456).toExponential(11)","\"1.23456000000e+2\"");
shouldBe("Number(123.456).toExponential(12)","\"1.234560000000e+2\"");
shouldBe("Number(123.456).toExponential(13)","\"1.2345600000000e+2\"");
shouldBe("Number(123.456).toExponential(14)","\"1.23456000000000e+2\"");
shouldBe("Number(123.456).toExponential(15)","\"1.234560000000000e+2\"");
shouldBe("Number(123.456).toExponential(16)","\"1.2345600000000000e+2\"");
shouldBe("Number(123.456).toExponential(17)","\"1.23456000000000003e+2\"");
shouldBe("Number(123.456).toExponential(18)","\"1.234560000000000031e+2\"");
shouldBe("Number(123.456).toExponential(19)","\"1.2345600000000000307e+2\"");
shouldBe("Number(123.456).toExponential(20)","\"1.23456000000000003070e+2\"");
shouldBeTrue("try { Number(123.456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(-123.456).toExponential()","\"-1.23456e+2\"");
shouldBeTrue("try { Number(-123.456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(-123.456).toExponential(0)","\"-1e+2\"");
shouldBe("Number(-123.456).toExponential(1)","\"-1.2e+2\"");
shouldBe("Number(-123.456).toExponential(2)","\"-1.23e+2\"");
shouldBe("Number(-123.456).toExponential(3)","\"-1.235e+2\"");
shouldBe("Number(-123.456).toExponential(4)","\"-1.2346e+2\"");
shouldBe("Number(-123.456).toExponential(5)","\"-1.23456e+2\"");
shouldBe("Number(-123.456).toExponential(6)","\"-1.234560e+2\"");
shouldBe("Number(-123.456).toExponential(7)","\"-1.2345600e+2\"");
shouldBe("Number(-123.456).toExponential(8)","\"-1.23456000e+2\"");
shouldBe("Number(-123.456).toExponential(9)","\"-1.234560000e+2\"");
shouldBe("Number(-123.456).toExponential(10)","\"-1.2345600000e+2\"");
shouldBe("Number(-123.456).toExponential(11)","\"-1.23456000000e+2\"");
shouldBe("Number(-123.456).toExponential(12)","\"-1.234560000000e+2\"");
shouldBe("Number(-123.456).toExponential(13)","\"-1.2345600000000e+2\"");
shouldBe("Number(-123.456).toExponential(14)","\"-1.23456000000000e+2\"");
shouldBe("Number(-123.456).toExponential(15)","\"-1.234560000000000e+2\"");
shouldBe("Number(-123.456).toExponential(16)","\"-1.2345600000000000e+2\"");
shouldBe("Number(-123.456).toExponential(17)","\"-1.23456000000000003e+2\"");
shouldBe("Number(-123.456).toExponential(18)","\"-1.234560000000000031e+2\"");
shouldBe("Number(-123.456).toExponential(19)","\"-1.2345600000000000307e+2\"");
shouldBe("Number(-123.456).toExponential(20)","\"-1.23456000000000003070e+2\"");
shouldBeTrue("try { Number(-123.456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(.000123456).toExponential()","\"1.23456e-4\"");
shouldBeTrue("try { Number(.000123456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(.000123456).toExponential(0)","\"1e-4\"");
shouldBe("Number(.000123456).toExponential(1)","\"1.2e-4\"");
shouldBe("Number(.000123456).toExponential(2)","\"1.23e-4\"");
shouldBe("Number(.000123456).toExponential(3)","\"1.235e-4\"");
shouldBe("Number(.000123456).toExponential(4)","\"1.2346e-4\"");
shouldBe("Number(.000123456).toExponential(5)","\"1.23456e-4\"");
shouldBe("Number(.000123456).toExponential(6)","\"1.234560e-4\"");
shouldBe("Number(.000123456).toExponential(7)","\"1.2345600e-4\"");
shouldBe("Number(.000123456).toExponential(8)","\"1.23456000e-4\"");
shouldBe("Number(.000123456).toExponential(9)","\"1.234560000e-4\"");
shouldBe("Number(.000123456).toExponential(10)","\"1.2345600000e-4\"");
shouldBe("Number(.000123456).toExponential(11)","\"1.23456000000e-4\"");
shouldBe("Number(.000123456).toExponential(12)","\"1.234560000000e-4\"");
shouldBe("Number(.000123456).toExponential(13)","\"1.2345600000000e-4\"");
shouldBe("Number(.000123456).toExponential(14)","\"1.23456000000000e-4\"");
shouldBe("Number(.000123456).toExponential(15)","\"1.234560000000000e-4\"");
shouldBe("Number(.000123456).toExponential(16)","\"1.2345600000000001e-4\"");
shouldBe("Number(.000123456).toExponential(17)","\"1.23456000000000005e-4\"");
shouldBe("Number(.000123456).toExponential(18)","\"1.234560000000000052e-4\"");
shouldBe("Number(.000123456).toExponential(19)","\"1.2345600000000000519e-4\"");
shouldBe("Number(.000123456).toExponential(20)","\"1.23456000000000005188e-4\"");
shouldBeTrue("try { Number(.000123456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(-.000123456).toExponential()","\"-1.23456e-4\"");
shouldBeTrue("try { Number(-.000123456).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(-.000123456).toExponential(0)","\"-1e-4\"");
shouldBe("Number(-.000123456).toExponential(1)","\"-1.2e-4\"");
shouldBe("Number(-.000123456).toExponential(2)","\"-1.23e-4\"");
shouldBe("Number(-.000123456).toExponential(3)","\"-1.235e-4\"");
shouldBe("Number(-.000123456).toExponential(4)","\"-1.2346e-4\"");
shouldBe("Number(-.000123456).toExponential(5)","\"-1.23456e-4\"");
shouldBe("Number(-.000123456).toExponential(6)","\"-1.234560e-4\"");
shouldBe("Number(-.000123456).toExponential(7)","\"-1.2345600e-4\"");
shouldBe("Number(-.000123456).toExponential(8)","\"-1.23456000e-4\"");
shouldBe("Number(-.000123456).toExponential(9)","\"-1.234560000e-4\"");
shouldBe("Number(-.000123456).toExponential(10)","\"-1.2345600000e-4\"");
shouldBe("Number(-.000123456).toExponential(11)","\"-1.23456000000e-4\"");
shouldBe("Number(-.000123456).toExponential(12)","\"-1.234560000000e-4\"");
shouldBe("Number(-.000123456).toExponential(13)","\"-1.2345600000000e-4\"");
shouldBe("Number(-.000123456).toExponential(14)","\"-1.23456000000000e-4\"");
shouldBe("Number(-.000123456).toExponential(15)","\"-1.234560000000000e-4\"");
shouldBe("Number(-.000123456).toExponential(16)","\"-1.2345600000000001e-4\"");
shouldBe("Number(-.000123456).toExponential(17)","\"-1.23456000000000005e-4\"");
shouldBe("Number(-.000123456).toExponential(18)","\"-1.234560000000000052e-4\"");
shouldBe("Number(-.000123456).toExponential(19)","\"-1.2345600000000000519e-4\"");
shouldBe("Number(-.000123456).toExponential(20)","\"-1.23456000000000005188e-4\"");
shouldBeTrue("try { Number(-.000123456).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(123.4567890123456789012).toExponential()","\"1.2345678901234568e+2\"");
shouldBeTrue("try { Number(123.4567890123456789012).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(123.4567890123456789012).toExponential(0)","\"1e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(1)","\"1.2e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(2)","\"1.23e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(3)","\"1.235e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(4)","\"1.2346e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(5)","\"1.23457e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(6)","\"1.234568e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(7)","\"1.2345679e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(8)","\"1.23456789e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(9)","\"1.234567890e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(10)","\"1.2345678901e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(11)","\"1.23456789012e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(12)","\"1.234567890123e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(13)","\"1.2345678901235e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(14)","\"1.23456789012346e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(15)","\"1.234567890123457e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(16)","\"1.2345678901234568e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(17)","\"1.23456789012345681e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(18)","\"1.234567890123456806e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(19)","\"1.2345678901234568059e+2\"");
shouldBe("Number(123.4567890123456789012).toExponential(20)","\"1.23456789012345680590e+2\"");
shouldBeTrue("try { Number(123.4567890123456789012).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(-123.4567890123456789012).toExponential()","\"-1.2345678901234568e+2\"");
shouldBeTrue("try { Number(-123.4567890123456789012).toExponential(-1) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(-123.4567890123456789012).toExponential(0)","\"-1e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(1)","\"-1.2e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(2)","\"-1.23e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(3)","\"-1.235e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(4)","\"-1.2346e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(5)","\"-1.23457e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(6)","\"-1.234568e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(7)","\"-1.2345679e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(8)","\"-1.23456789e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(9)","\"-1.234567890e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(10)","\"-1.2345678901e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(11)","\"-1.23456789012e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(12)","\"-1.234567890123e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(13)","\"-1.2345678901235e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(14)","\"-1.23456789012346e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(15)","\"-1.234567890123457e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(16)","\"-1.2345678901234568e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(17)","\"-1.23456789012345681e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(18)","\"-1.234567890123456806e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(19)","\"-1.2345678901234568059e+2\"");
shouldBe("Number(-123.4567890123456789012).toExponential(20)","\"-1.23456789012345680590e+2\"");
shouldBeTrue("try { Number(-123.4567890123456789012).toExponential(21) } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(.0000000000000000000001).toExponential()","\"1e-22\"");
shouldBe("Number(.0000000000000000000012).toExponential()","\"1.2e-21\"");
shouldBe("Number(.0000000000000000000123).toExponential()","\"1.23e-20\"");
shouldBe("Number(.0000000000000000000123).toExponential()","\"1.23e-20\"");
shouldBe("Number(.0000000000000000001234).toExponential()","\"1.234e-19\"");
shouldBe("Number(.0000000000000000012345).toExponential()","\"1.2345e-18\"");
shouldBe("Number(.0000000000000000123456).toExponential()","\"1.23456e-17\"");
shouldBe("Number(.0000000000000001234567).toExponential()","\"1.234567e-16\"");
shouldBe("Number(.0000000000000012345678).toExponential()","\"1.2345678e-15\"");
shouldBe("Number(.0000000000000123456789).toExponential()","\"1.23456789e-14\"");
shouldBe("Number(.0000000000001234567890).toExponential()","\"1.23456789e-13\"");
shouldBe("Number(.0000000000012345678901).toExponential()","\"1.2345678901e-12\"");
shouldBe("Number(.0000000000123456789012).toExponential()","\"1.23456789012e-11\"");
shouldBe("Number(.0000000001234567890123).toExponential()","\"1.234567890123e-10\"");
shouldBe("Number(.0000000012345678901234).toExponential()","\"1.2345678901234e-9\"");
shouldBe("Number(.0000000123456789012345).toExponential()","\"1.23456789012345e-8\"");
shouldBe("Number(.0000001234567890123456).toExponential()","\"1.234567890123456e-7\"");
shouldBe("Number(.0000012345678901234567).toExponential()","\"1.2345678901234567e-6\"");
shouldBe("Number(.0000123456789012345678).toExponential()","\"1.2345678901234568e-5\"");
shouldBe("Number(.0001234567890123456789).toExponential()","\"1.2345678901234567e-4\"");
shouldBe("Number(.0012345678901234567890).toExponential()","\"1.2345678901234567e-3\"");
shouldBe("Number(.0123456789012345678901).toExponential()","\"1.2345678901234568e-2\"");
shouldBe("Number(1.234567890123456789012).toExponential()","\"1.2345678901234567e+0\"");
shouldBe("Number(12.34567890123456789012).toExponential()","\"1.2345678901234567e+1\"");
shouldBe("Number(123.4567890123456789012).toExponential()","\"1.2345678901234568e+2\"");
shouldBe("Number(1234.567890123456789012).toExponential()","\"1.234567890123457e+3\"");
shouldBe("Number(12345.67890123456789012).toExponential()","\"1.2345678901234567e+4\"");
shouldBe("Number(123456.7890123456789012).toExponential()","\"1.2345678901234567e+5\"");
shouldBe("Number(1234567.890123456789012).toExponential()","\"1.2345678901234567e+6\"");
shouldBe("Number(12345678.90123456789012).toExponential()","\"1.2345678901234567e+7\"");
shouldBe("Number(123456789.0123456789012).toExponential()","\"1.2345678901234567e+8\"");
shouldBe("Number(1234567890.123456789012).toExponential()","\"1.2345678901234567e+9\"");
shouldBe("Number(12345678901.23456789012).toExponential()","\"1.2345678901234568e+10\"");
shouldBe("Number(123456789012.3456789012).toExponential()","\"1.2345678901234567e+11\"");
shouldBe("Number(1234567890123.456789012).toExponential()","\"1.2345678901234568e+12\"");
shouldBe("Number(12345678901234.56789012).toExponential()","\"1.2345678901234568e+13\"");
shouldBe("Number(123456789012345.6789012).toExponential()","\"1.2345678901234567e+14\"");
shouldBe("Number(1234567890123456.789012).toExponential()","\"1.2345678901234568e+15\"");
shouldBe("Number(12345678901234567.89012).toExponential()","\"1.2345678901234568e+16\"");
shouldBe("Number(123456789012345678.9012).toExponential()","\"1.2345678901234568e+17\"");
shouldBe("Number(1234567890123456789.012).toExponential()","\"1.2345678901234568e+18\"");
shouldBe("Number(12345678901234567890.12).toExponential()","\"1.2345678901234567e+19\"");
shouldBe("Number(123456789012345678901.2).toExponential()","\"1.2345678901234568e+20\"");
shouldBe("Number(-.0000000000000000000001).toExponential()","\"-1e-22\"");
shouldBe("Number(-.0000000000000000000012).toExponential()","\"-1.2e-21\"");
shouldBe("Number(-.0000000000000000000123).toExponential()","\"-1.23e-20\"");
shouldBe("Number(-.0000000000000000000123).toExponential()","\"-1.23e-20\"");
shouldBe("Number(-.0000000000000000001234).toExponential()","\"-1.234e-19\"");
shouldBe("Number(-.0000000000000000012345).toExponential()","\"-1.2345e-18\"");
shouldBe("Number(-.0000000000000000123456).toExponential()","\"-1.23456e-17\"");
shouldBe("Number(-.0000000000000001234567).toExponential()","\"-1.234567e-16\"");
shouldBe("Number(-.0000000000000012345678).toExponential()","\"-1.2345678e-15\"");
shouldBe("Number(-.0000000000000123456789).toExponential()","\"-1.23456789e-14\"");
shouldBe("Number(-.0000000000001234567890).toExponential()","\"-1.23456789e-13\"");
shouldBe("Number(-.0000000000012345678901).toExponential()","\"-1.2345678901e-12\"");
shouldBe("Number(-.0000000000123456789012).toExponential()","\"-1.23456789012e-11\"");
shouldBe("Number(-.0000000001234567890123).toExponential()","\"-1.234567890123e-10\"");
shouldBe("Number(-.0000000012345678901234).toExponential()","\"-1.2345678901234e-9\"");
shouldBe("Number(-.0000000123456789012345).toExponential()","\"-1.23456789012345e-8\"");
shouldBe("Number(-.0000001234567890123456).toExponential()","\"-1.234567890123456e-7\"");
shouldBe("Number(-.0000012345678901234567).toExponential()","\"-1.2345678901234567e-6\"");
shouldBe("Number(-.0000123456789012345678).toExponential()","\"-1.2345678901234568e-5\"");
shouldBe("Number(-.0001234567890123456789).toExponential()","\"-1.2345678901234567e-4\"");
shouldBe("Number(-.0012345678901234567890).toExponential()","\"-1.2345678901234567e-3\"");
shouldBe("Number(-.0123456789012345678901).toExponential()","\"-1.2345678901234568e-2\"");
shouldBe("Number(-1.234567890123456789012).toExponential()","\"-1.2345678901234567e+0\"");
shouldBe("Number(-12.34567890123456789012).toExponential()","\"-1.2345678901234567e+1\"");
shouldBe("Number(-123.4567890123456789012).toExponential()","\"-1.2345678901234568e+2\"");
shouldBe("Number(-1234.567890123456789012).toExponential()","\"-1.234567890123457e+3\"");
shouldBe("Number(-12345.67890123456789012).toExponential()","\"-1.2345678901234567e+4\"");
shouldBe("Number(-123456.7890123456789012).toExponential()","\"-1.2345678901234567e+5\"");
shouldBe("Number(-1234567.890123456789012).toExponential()","\"-1.2345678901234567e+6\"");
shouldBe("Number(-12345678.90123456789012).toExponential()","\"-1.2345678901234567e+7\"");
shouldBe("Number(-123456789.0123456789012).toExponential()","\"-1.2345678901234567e+8\"");
shouldBe("Number(-1234567890.123456789012).toExponential()","\"-1.2345678901234567e+9\"");
shouldBe("Number(-12345678901.23456789012).toExponential()","\"-1.2345678901234568e+10\"");
shouldBe("Number(-123456789012.3456789012).toExponential()","\"-1.2345678901234567e+11\"");
shouldBe("Number(-1234567890123.456789012).toExponential()","\"-1.2345678901234568e+12\"");
shouldBe("Number(-12345678901234.56789012).toExponential()","\"-1.2345678901234568e+13\"");
shouldBe("Number(-123456789012345.6789012).toExponential()","\"-1.2345678901234567e+14\"");
shouldBe("Number(-1234567890123456.789012).toExponential()","\"-1.2345678901234568e+15\"");
shouldBe("Number(-12345678901234567.89012).toExponential()","\"-1.2345678901234568e+16\"");
shouldBe("Number(-123456789012345678.9012).toExponential()","\"-1.2345678901234568e+17\"");
shouldBe("Number(-1234567890123456789.012).toExponential()","\"-1.2345678901234568e+18\"");
shouldBe("Number(-12345678901234567890.12).toExponential()","\"-1.2345678901234567e+19\"");
shouldBe("Number(-123456789012345678901.2).toExponential()","\"-1.2345678901234568e+20\"");

shouldBeTrue("try { Number(1).toPrecision(-1); } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBeTrue("try { Number(1).toPrecision(0); } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("try { Number(1).toPrecision(1); } catch (e) { String(e); }","\"1\"");
shouldBe("try { Number(1).toPrecision(21); } catch (e) { String(e); }","\"1.00000000000000000000\"");
shouldBeTrue("try { Number(1).toPrecision(22); } catch (e) { String(e).indexOf('Range') >= 0; }");
shouldBe("Number(NaN).toPrecision()","\"NaN\"");
shouldBe("Number(NaN).toPrecision(1)","\"NaN\"");
shouldBe("Number(Infinity).toPrecision()","\"Infinity\"");
shouldBe("Number(Infinity).toPrecision(1)","\"Infinity\"");
shouldBe("Number(-Infinity).toPrecision()","\"-Infinity\"");
shouldBe("Number(-Infinity).toPrecision(1)","\"-Infinity\"");
shouldBe("Number(.0000000012345).toPrecision(2)","\"1.2e-9\"");
shouldBe("Number(.000000012345).toPrecision(2)","\"1.2e-8\"");
shouldBe("Number(.00000012345).toPrecision(2)","\"1.2e-7\"");
shouldBe("Number(.0000012345).toPrecision(2)","\"0.0000012\"");
shouldBe("Number(.000012345).toPrecision(2)","\"0.000012\"");
shouldBe("Number(.00012345).toPrecision(2)","\"0.00012\"");
shouldBe("Number(.0012345).toPrecision(2)","\"0.0012\"");
shouldBe("Number(.012345).toPrecision(2)","\"0.012\"");
shouldBe("Number(.12345).toPrecision(2)","\"0.12\"");
shouldBe("Number(1.2345).toPrecision(2)","\"1.2\"");
shouldBe("Number(12.345).toPrecision(2)","\"12\"");
shouldBe("Number(123.45).toPrecision(2)","\"1.2e+2\"");
shouldBe("Number(1234.5).toPrecision(2)","\"1.2e+3\"");
shouldBe("Number(12345).toPrecision(2)","\"1.2e+4\"");
shouldBe("Number(12345.67).toPrecision(4)","\"1.235e+4\"");
shouldBe("Number(12344.67).toPrecision(4)","\"1.234e+4\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision()","\"0.00012345678901234567\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(1)","\"0.0001\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(2)","\"0.00012\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(3)","\"0.000123\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(4)","\"0.0001235\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(5)","\"0.00012346\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(6)","\"0.000123457\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(7)","\"0.0001234568\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(8)","\"0.00012345679\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(9)","\"0.000123456789\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(10)","\"0.0001234567890\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(11)","\"0.00012345678901\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(12)","\"0.000123456789012\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(13)","\"0.0001234567890123\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(14)","\"0.00012345678901235\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(15)","\"0.000123456789012346\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(16)","\"0.0001234567890123457\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(17)","\"0.00012345678901234567\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(18)","\"0.000123456789012345671\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(19)","\"0.0001234567890123456713\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(20)","\"0.00012345678901234567130\"");
shouldBe("Number(0.0001234567890123456789012345).toPrecision(21)","\"0.000123456789012345671298\"");
shouldBe("Number(12345.67890123456789012345).toPrecision()","\"12345.678901234567\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(1)","\"1e+4\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(2)","\"1.2e+4\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(3)","\"1.23e+4\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(4)","\"1.235e+4\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(5)","\"12346\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(6)","\"12345.7\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(7)","\"12345.68\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(8)","\"12345.679\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(9)","\"12345.6789\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(10)","\"12345.67890\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(11)","\"12345.678901\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(12)","\"12345.6789012\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(13)","\"12345.67890123\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(14)","\"12345.678901235\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(15)","\"12345.6789012346\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(16)","\"12345.67890123457\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(17)","\"12345.678901234567\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(18)","\"12345.6789012345671\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(19)","\"12345.67890123456709\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(20)","\"12345.678901234567093\"");
shouldBe("Number(12345.67890123456789012345).toPrecision(21)","\"12345.6789012345670926\"");
shouldBe("Number(-.0000000012345).toPrecision(2)","\"-1.2e-9\"");
shouldBe("Number(-.000000012345).toPrecision(2)","\"-1.2e-8\"");
shouldBe("Number(-.00000012345).toPrecision(2)","\"-1.2e-7\"");
shouldBe("Number(-.0000012345).toPrecision(2)","\"-0.0000012\"");
shouldBe("Number(-.000012345).toPrecision(2)","\"-0.000012\"");
shouldBe("Number(-.00012345).toPrecision(2)","\"-0.00012\"");
shouldBe("Number(-.0012345).toPrecision(2)","\"-0.0012\"");
shouldBe("Number(-.012345).toPrecision(2)","\"-0.012\"");
shouldBe("Number(-.12345).toPrecision(2)","\"-0.12\"");
shouldBe("Number(-1.2345).toPrecision(2)","\"-1.2\"");
shouldBe("Number(-12.345).toPrecision(2)","\"-12\"");
shouldBe("Number(-123.45).toPrecision(2)","\"-1.2e+2\"");
shouldBe("Number(-1234.5).toPrecision(2)","\"-1.2e+3\"");
shouldBe("Number(-12345).toPrecision(2)","\"-1.2e+4\"");
shouldBe("Number(-12345.67).toPrecision(4)","\"-1.235e+4\"");
shouldBe("Number(-12344.67).toPrecision(4)","\"-1.234e+4\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision()","\"-0.00012345678901234567\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(1)","\"-0.0001\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(2)","\"-0.00012\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(3)","\"-0.000123\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(4)","\"-0.0001235\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(5)","\"-0.00012346\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(6)","\"-0.000123457\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(7)","\"-0.0001234568\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(8)","\"-0.00012345679\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(9)","\"-0.000123456789\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(10)","\"-0.0001234567890\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(11)","\"-0.00012345678901\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(12)","\"-0.000123456789012\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(13)","\"-0.0001234567890123\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(14)","\"-0.00012345678901235\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(15)","\"-0.000123456789012346\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(16)","\"-0.0001234567890123457\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(17)","\"-0.00012345678901234567\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(18)","\"-0.000123456789012345671\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(19)","\"-0.0001234567890123456713\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(20)","\"-0.00012345678901234567130\"");
shouldBe("Number(-0.0001234567890123456789012345).toPrecision(21)","\"-0.000123456789012345671298\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision()","\"-12345.678901234567\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(1)","\"-1e+4\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(2)","\"-1.2e+4\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(3)","\"-1.23e+4\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(4)","\"-1.235e+4\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(5)","\"-12346\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(6)","\"-12345.7\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(7)","\"-12345.68\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(8)","\"-12345.679\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(9)","\"-12345.6789\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(10)","\"-12345.67890\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(11)","\"-12345.678901\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(12)","\"-12345.6789012\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(13)","\"-12345.67890123\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(14)","\"-12345.678901235\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(15)","\"-12345.6789012346\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(16)","\"-12345.67890123457\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(17)","\"-12345.678901234567\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(18)","\"-12345.6789012345671\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(19)","\"-12345.67890123456709\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(20)","\"-12345.678901234567093\"");
shouldBe("Number(-12345.67890123456789012345).toPrecision(21)","\"-12345.6789012345670926\"");
shouldBe("Number(0).toPrecision()","\"0\"");
shouldBe("Number(0).toPrecision(1)","\"0\"");
shouldBe("Number(0).toPrecision(2)","\"0.0\"");
shouldBe("Number(0).toPrecision(3)","\"0.00\"");
shouldBe("Number(0).toPrecision(4)","\"0.000\"");
shouldBe("Number(0).toPrecision(5)","\"0.0000\"");
shouldBe("Number(0).toPrecision(6)","\"0.00000\"");
shouldBe("Number(0).toPrecision(7)","\"0.000000\"");
shouldBe("Number(0).toPrecision(8)","\"0.0000000\"");
shouldBe("Number(0).toPrecision(9)","\"0.00000000\"");
shouldBe("Number(0).toPrecision(10)","\"0.000000000\"");
shouldBe("Number(0).toPrecision(11)","\"0.0000000000\"");
shouldBe("Number(0).toPrecision(12)","\"0.00000000000\"");
shouldBe("Number(0).toPrecision(13)","\"0.000000000000\"");
shouldBe("Number(0).toPrecision(14)","\"0.0000000000000\"");
shouldBe("Number(0).toPrecision(15)","\"0.00000000000000\"");
shouldBe("Number(0).toPrecision(16)","\"0.000000000000000\"");
shouldBe("Number(0).toPrecision(17)","\"0.0000000000000000\"");
shouldBe("Number(0).toPrecision(18)","\"0.00000000000000000\"");
shouldBe("Number(0).toPrecision(19)","\"0.000000000000000000\"");
shouldBe("Number(0).toPrecision(20)","\"0.0000000000000000000\"");
shouldBe("Number(0).toPrecision(21)","\"0.00000000000000000000\"");
                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/kde/Object-expected.txt                                     0000664 0000000 0000000 00000003766 14746647661 0024207 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS typeof Object() is 'object'
PASS var o = Object(); o.x = 11; o.x; is 11
PASS Object(1).valueOf() is 1
PASS Object(true).valueOf() is true
PASS Object('s').valueOf() is 's'
PASS typeof (new Object()) is 'object'
PASS (new Object(1)).valueOf() is 1
PASS (new Object(true)).valueOf() is true
PASS (new Object('s')).valueOf() is 's'
PASS String(Object()) is '[object Object]'
PASS Object().toString() is '[object Object]'
PASS String(Object().valueOf()) is '[object Object]'
PASS successfullyParsed is true

TEST COMPLETE

          node-23.7.0/deps/v8/test/webkit/fast/js/kde/Object.js                                               0000664 0000000 0000000 00000004250 14746647661 0022172 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("typeof Object()", "'object'");
shouldBe("var o = Object(); o.x = 11; o.x;", "11"); // wanted behaviour ?
// shouldBe("Object(undefined)", ???);
// shouldBe("Object(null)", ???);
shouldBe("Object(1).valueOf()", "1");
shouldBe("Object(true).valueOf()", "true");
shouldBe("Object('s').valueOf()", "'s'");

shouldBe("typeof (new Object())", "'object'");
// shouldBe("new Object(undefined)", ???);
// shouldBe("new Object(null)", ???);
shouldBe("(new Object(1)).valueOf()", "1");
shouldBe("(new Object(true)).valueOf()", "true");
shouldBe("(new Object('s')).valueOf()", "'s'");

shouldBe("String(Object())", "'[object Object]'");
shouldBe("Object().toString()", "'[object Object]'");
shouldBe("String(Object().valueOf())", "'[object Object]'");
                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/kde/Prototype-expected.txt                                  0000664 0000000 0000000 00000003204 14746647661 0024771 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS s.area() is 9
PASS b.name is 'a book'
PASS b.author is 'Fred'
PASS delete Boolean.prototype is false
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/kde/Prototype.js                                            0000664 0000000 0000000 00000004461 14746647661 0022775 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
///////////////////////////////////////////////////////

function Square(x)
{
  this.x = x;
}

new Square(0); // create prototype

function Square_area() { return this.x * this.x; }
Square.prototype.area = Square_area;
var s = new Square(3);
shouldBe("s.area()", "9");

///////////////////////////////////////////////////////

function Item(name){
  this.name = name;
}

function Book(name, author){
  this.base = Item;         // set Item constructor as method of Book object
  this.base(name);           // set the value of name property
  this.author = author;
}
Book.prototype = new Item;
var b = new Book("a book", "Fred");        // create object instance
//edebug(e"b.name"));
shouldBe("b.name", "'a book'");
shouldBe("b.author", "'Fred'");                  // outpus "Fred"

///////////////////////////////////////////////////////

shouldBe("delete Boolean.prototype", "false");
                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/kde/RegExp-expected.txt                                     0000664 0000000 0000000 00000012232 14746647661 0024157 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS (new RegExp()).source is '(?:)'
PASS Boolean(new RegExp()) is true
PASS isNaN(Number(new RegExp())) is true
PASS RegExp(/x/).source is 'x'
PASS RegExp('x', 'g').global is true
PASS RegExp('x').source is 'x'
PASS new RegExp('x').source is 'x'
PASS (/a/).global is false
PASS typeof (/a/).global is 'boolean'
PASS rg.global is true
PASS (/a/).ignoreCase is false
PASS ri.ignoreCase is true
PASS (/a/).multiline is false
PASS rm.multiline is true
PASS rg.toString() is '/a/g'
PASS ri.toString() is '/a/i'
PASS rm.toString() is '/a/m'
PASS rg.global is true
PASS ri.ignoreCase is true
PASS rm.multiline is true
PASS Boolean(/a/.test) is true
PASS /(b)c/.exec('abcd').toString() is "bc,b"
PASS /(b)c/.exec('abcd').length is 2
PASS /(b)c/.exec('abcd').index is 1
PASS /(b)c/.exec('abcd').input is 'abcd'
PASS rs.source is 'foo'
PASS var r = new RegExp(/x/); r.global=true; r.lastIndex = -1; typeof r.test('a') is 'boolean'
PASS 'abcdefghi'.match(/(abc)def(ghi)/).toString() is 'abcdefghi,abc,ghi'
PASS /(abc)def(ghi)/.exec('abcdefghi').toString() is 'abcdefghi,abc,ghi'
PASS RegExp.$1 is 'abc'
PASS RegExp.$2 is 'ghi'
PASS RegExp.$3 is ''
PASS 'abcdefghi'.match(/(a(b(c(d(e)f)g)h)i)/).toString() is 'abcdefghi,abcdefghi,bcdefgh,cdefg,def,e'
PASS RegExp.$1 is 'abcdefghi'
PASS RegExp.$2 is 'bcdefgh'
PASS RegExp.$3 is 'cdefg'
PASS RegExp.$4 is 'def'
PASS RegExp.$5 is 'e'
PASS RegExp.$6 is ''
PASS '(100px 200px 150px 15px)'.match(/\((\d+)(px)* (\d+)(px)* (\d+)(px)* (\d+)(px)*\)/).toString() is '(100px 200px 150px 15px),100,px,200,px,150,px,15,px'
PASS RegExp.$1 is '100'
PASS RegExp.$3 is '200'
PASS RegExp.$5 is '150'
PASS RegExp.$7 is '15'
PASS ''.match(/((\d+)(px)* (\d+)(px)* (\d+)(px)* (\d+)(px)*)/) is null
PASS RegExp.$1 is '100'
PASS RegExp.$3 is '200'
PASS RegExp.$5 is '150'
PASS RegExp.$7 is '15'
PASS 'faure@kde.org'.match(invalidChars) == null is true
PASS 'faure-kde@kde.org'.match(invalidChars) == null is false
PASS 'test1test2'.replace('test','X') is 'X1test2'
PASS 'test1test2'.replace(/\d/,'X') is 'testXtest2'
PASS '1test2test3'.replace(/\d/,'') is 'test2test3'
PASS 'test1test2'.replace(/test/g,'X') is 'X1X2'
PASS '1test2test3'.replace(/\d/g,'') is 'testtest'
PASS '1test2test3'.replace(/x/g,'') is '1test2test3'
PASS 'test1test2'.replace(/(te)(st)/g,'$2$1') is 'stte1stte2'
PASS 'foo+bar'.replace(/\+/g,'%2B') is 'foo%2Bbar'
PASS caught is true
PASS 'foo'.replace(/z?/g,'x') is 'xfxoxox'
PASS 'test test'.replace(/\s*/g,'') is 'testtest'
PASS 'abc$%@'.replace(/[^0-9a-z]*/gi,'') is 'abc'
PASS 'ab'.replace(/[^\d\.]*/gi,'') is ''
PASS '1ab'.replace(/[^\d\.]*/gi,'') is '1'
PASS '1test2test3blah'.split(/test/).toString() is '1,2,3blah'
PASS reg.exec(str).toString() is '98 ,98 '
PASS reg.lastIndex is 3
PASS RegExp.$1 is '98 '
PASS RegExp.$2 is ''
PASS reg.exec(str).toString() is '76 ,76 '
PASS reg.lastIndex is 6
PASS RegExp.$1 is '76 '
PASS RegExp.$2 is ''
PASS reg.exec(str) is null
PASS reg.lastIndex is 0
PASS myRe=/d(b+)d/g; myArray = myRe.exec('cdbbdbsbz'); myRe.lastIndex is 5
PASS reg.ignoreCase == true is true
PASS reg.global === false is true
PASS reg.multiline === false is true
PASS reg.test('UGO') is true
PASS reg.x = 1; reg.x is 1
PASS var r2 = reg; r2.x = 2; reg.x is 2
PASS str.match(re).toString() is 'Chapter 3.4.5.1,Chapter 3.4.5.1,.1'
PASS str.match(/d/gi).toString() is 'D,d'
PASS /\u0061/.source is '\\u0061'
PASS 'abc'.match(/\u0062/).toString() is 'b'
FAIL Object.prototype.toString.apply(RegExp.prototype) should be [object RegExp]. Was [object Object].
PASS typeof RegExp.prototype.toString() is 'string'
PASS new RegExp().toString() is '/(?:)/'
PASS (new RegExp('(?:)')).source is '(?:)'
PASS /(?:)/.toString() is '/(?:)/'
PASS /(?:)/.source is '(?:)'
Done.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/RegExp.js                                               0000664 0000000 0000000 00000016566 14746647661 0022173 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("(new RegExp()).source", "'(?:)'");
shouldBe("Boolean(new RegExp())", "true");
shouldBeTrue("isNaN(Number(new RegExp()))");

// RegExp constructor called as a function
shouldBe("RegExp(/x/).source", "'x'");
//shouldBe("RegExp(/x/, 'g').source", "'/x/'"); // can't supply flags when constructing one RegExp from another, says mozilla
shouldBe("RegExp('x', 'g').global", "true");
shouldBe("RegExp('x').source", "'x'");

// RegExp constructor
shouldBe("new RegExp('x').source", "'x'");

var ri = /a/i;
var rm = /a/m;
var rg = /a/g;

shouldBeFalse("(/a/).global");
shouldBe("typeof (/a/).global", "'boolean'");
shouldBeTrue("rg.global");
shouldBeFalse("(/a/).ignoreCase");
shouldBeTrue("ri.ignoreCase");
shouldBeFalse("(/a/).multiline");
shouldBeTrue("rm.multiline");
shouldBe("rg.toString()", "'/a/g'");
shouldBe("ri.toString()", "'/a/i'");
shouldBe("rm.toString()", "'/a/m'");

// check properety attributes
rg.global = false;
shouldBeTrue("rg.global");
ri.ignoreCase = false;
shouldBeTrue("ri.ignoreCase");
rm.multiline = false;
shouldBeTrue("rm.multiline");

shouldBe("Boolean(/a/.test)", "true");
shouldBe("/(b)c/.exec('abcd').toString()", "\"bc,b\"");
shouldBe("/(b)c/.exec('abcd').length", "2");
shouldBe("/(b)c/.exec('abcd').index", "1");
shouldBe("/(b)c/.exec('abcd').input", "'abcd'");

var rs = /foo/;
rs.source = "bar";
shouldBe("rs.source", "'foo'");

shouldBe("var r = new RegExp(/x/); r.global=true; r.lastIndex = -1; typeof r.test('a')", "'boolean'");

shouldBe("'abcdefghi'.match(/(abc)def(ghi)/).toString()","'abcdefghi,abc,ghi'");
shouldBe("/(abc)def(ghi)/.exec('abcdefghi').toString()","'abcdefghi,abc,ghi'");
shouldBe("RegExp.$1","'abc'");
shouldBe("RegExp.$2","'ghi'");
shouldBe("RegExp.$3","''");

shouldBe("'abcdefghi'.match(/(a(b(c(d(e)f)g)h)i)/).toString()", "'abcdefghi,abcdefghi,bcdefgh,cdefg,def,e'");
shouldBe("RegExp.$1","'abcdefghi'");
shouldBe("RegExp.$2","'bcdefgh'");
shouldBe("RegExp.$3","'cdefg'");
shouldBe("RegExp.$4","'def'");
shouldBe("RegExp.$5","'e'");
shouldBe("RegExp.$6","''");

shouldBe("'(100px 200px 150px 15px)'.match(/\\((\\d+)(px)* (\\d+)(px)* (\\d+)(px)* (\\d+)(px)*\\)/).toString()","'(100px 200px 150px 15px),100,px,200,px,150,px,15,px'");
shouldBe("RegExp.$1","'100'");
shouldBe("RegExp.$3","'200'");
shouldBe("RegExp.$5","'150'");
shouldBe("RegExp.$7","'15'");
shouldBe("''.match(/\((\\d+)(px)* (\\d+)(px)* (\\d+)(px)* (\\d+)(px)*\)/)","null");
// After a failed match, cached results on the RegExp object are unchanged.
shouldBe("RegExp.$1","'100'");
shouldBe("RegExp.$3","'200'");
shouldBe("RegExp.$5","'150'");
shouldBe("RegExp.$7","'15'");

var invalidChars = /[^@\.\w]/g; // #47092
shouldBe("'faure@kde.org'.match(invalidChars) == null", "true");
shouldBe("'faure-kde@kde.org'.match(invalidChars) == null", "false");

shouldBe("'test1test2'.replace('test','X')","'X1test2'");
shouldBe("'test1test2'.replace(/\\d/,'X')","'testXtest2'");
shouldBe("'1test2test3'.replace(/\\d/,'')","'test2test3'");
shouldBe("'test1test2'.replace(/test/g,'X')","'X1X2'");
shouldBe("'1test2test3'.replace(/\\d/g,'')","'testtest'");
shouldBe("'1test2test3'.replace(/x/g,'')","'1test2test3'");
shouldBe("'test1test2'.replace(/(te)(st)/g,'$2$1')","'stte1stte2'");
shouldBe("'foo+bar'.replace(/\\+/g,'%2B')", "'foo%2Bbar'");
var caught = false; try { new RegExp("+"); } catch (e) { caught = true; }
shouldBeTrue("caught"); // #40435
shouldBe("'foo'.replace(/z?/g,'x')", "'xfxoxox'");
shouldBe("'test test'.replace(/\\s*/g,'')","'testtest'"); // #50985
shouldBe("'abc$%@'.replace(/[^0-9a-z]*/gi,'')","'abc'"); // #50848
shouldBe("'ab'.replace(/[^\\d\\.]*/gi,'')","''"); // #75292
shouldBe("'1ab'.replace(/[^\\d\\.]*/gi,'')","'1'"); // #75292

shouldBe("'1test2test3blah'.split(/test/).toString()","'1,2,3blah'");
var reg = /(\d\d )/g;
var str = new String('98 76 blah');
shouldBe("reg.exec(str).toString()","'98 ,98 '");
shouldBe("reg.lastIndex","3");
shouldBe("RegExp.$1","'98 '");
shouldBe("RegExp.$2","''");

shouldBe("reg.exec(str).toString()","'76 ,76 '");
shouldBe("reg.lastIndex","6");
shouldBe("RegExp.$1","'76 '");
shouldBe("RegExp.$2","''");

shouldBe("reg.exec(str)","null");
shouldBe("reg.lastIndex","0");

// http://www.devguru.com/Technologies/ecmascript/quickref/regexp_lastindex.html
// Looks IE-only though
//shouldBe( "var re=/ships*\s/; re.exec('the hardships of traveling'); re.lastIndex", "14" );
//shouldBe( "var re=/ships*\s/; str='the hardships of traveling'; re.exec(str); re.exec(str); re.lastIndex", "0" );

// http://devedge.netscape.com/library/manuals/2000/javascript/1.5/guide/regexp.html
shouldBe( "myRe=/d(b+)d/g; myArray = myRe.exec('cdbbdbsbz'); myRe.lastIndex", "5" );

reg = /^u/i;
shouldBeTrue("reg.ignoreCase == true");
shouldBeTrue("reg.global === false");
shouldBeTrue("reg.multiline === false");
shouldBeTrue("reg.test('UGO')");

// regexp are writable ?
shouldBe("reg.x = 1; reg.x", "1");
// shared data ?
shouldBe("var r2 = reg; r2.x = 2; reg.x", "2");

var str = new String("For more information, see Chapter 3.4.5.1");
re = /(chapter \d+(\.\d)*)/i;
// This returns the array containing Chapter 3.4.5.1,Chapter 3.4.5.1,.1
// 'Chapter 3.4.5.1' is the first match and the first value remembered from (Chapter \d+(\.\d)*).
// '.1' is the second value remembered from (\.\d)
shouldBe("str.match(re).toString()","'Chapter 3.4.5.1,Chapter 3.4.5.1,.1'");

str = "abcDdcba";
// The returned array contains D, d.
shouldBe("str.match(/d/gi).toString()","'D,d'");

// unicode escape sequence
shouldBe("/\\u0061/.source", "'\\\\u0061'");
shouldBe("'abc'.match(/\\u0062/).toString()", "'b'");

shouldBe("Object.prototype.toString.apply(RegExp.prototype)",
         "'[object RegExp]'");

// not sure what this should return. most importantly
// it doesn't throw an exception
shouldBe("typeof RegExp.prototype.toString()", "'string'");

// Empty regular expressions have string representation /(?:)/
shouldBe("new RegExp().toString()", "'/(?:)/'");
shouldBe("(new RegExp('(?:)')).source", "'(?:)'");
shouldBe("/(?:)/.toString()", "'/(?:)/'");
shouldBe("/(?:)/.source", "'(?:)'");

debug("Done.");
                                                                                                                                          node-23.7.0/deps/v8/test/webkit/fast/js/kde/arguments-scope-expected.txt                            0000664 0000000 0000000 00000003144 14746647661 0026103 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS test0
PASS test1
PASS test2
PASS test3
PASS test4.(1)
PASS test4.(2)
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/kde/arguments-scope.js                                      0000664 0000000 0000000 00000005170 14746647661 0024102 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// We can't use normal shouldBe here, since they'd eval in the wrong context...

function shouldBeOfType(msg, val, type) {
  if (typeof(val) != type)
    testFailed(msg + ": value has type " + typeof(val) + " , not:" + type);
  else
    testPassed(msg);
}

function test0() {
    var arguments;
    // var execution should not overwrite something that was
    // in scope beforehand -- e.g. the arguments thing
    shouldBeOfType("test0", arguments, 'object');
 }

function test1() {
    // No need to undef-initialize something in scope already!
    shouldBeOfType("test1", arguments, 'object');
    var arguments;
}

function test2(arguments) {
    // Formals OTOH can overwrite the args object
    shouldBeOfType("test2", arguments, 'number');
}


function test3() {
    // Ditto for functions..
    shouldBeOfType("test3", arguments, 'function');
    function arguments() {}
}

function test4() {
    // Here, the -declaration- part of the var below should have no
    // effect..
    shouldBeOfType('test4.(1)', arguments, 'object');
    var arguments = 4;
    // .. but the assignment shoud just happen
    shouldBeOfType('test4.(2)', arguments, 'number');
}


test0();
test1();
test2(42);
test3();
test4();
                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/kde/assignments-expected.txt                                0000664 0000000 0000000 00000003430 14746647661 0025320 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS var i = 1; i is 1
PASS j = k = 2 is 2
PASS var i; i is undefined.
PASS var i = 1; i <<= 2 is 4
PASS var i = 8; i >>= 1 is 4
PASS var i = 1; i >>= 2 is 0
PASS var i = -8; i >>= 24 is -1
PASS var i = 8; i >>>= 2 is 2
PASS var i = -8; i >>>= 24 is 255
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                        node-23.7.0/deps/v8/test/webkit/fast/js/kde/assignments.js                                          0000664 0000000 0000000 00000003451 14746647661 0023321 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// simple assignment
shouldBe("var i = 1; i", "1");
shouldBe("j = k = 2", "2");
shouldBeUndefined("var i; i");

// compound assignments
shouldBe("var i = 1; i <<= 2", "4");
shouldBe("var i = 8; i >>= 1", "4");
shouldBe("var i = 1; i >>= 2", "0");
shouldBe("var i = -8; i >>= 24", "-1");
shouldBe("var i = 8; i >>>= 2", "2");
shouldBe("var i = -8; i >>>= 24", "255");
                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/kde/cast-expected.txt                                       0000664 0000000 0000000 00000003301 14746647661 0023714 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Boolean(1) === true is true
PASS var s = String; s(1) === '1' is true
PASS n = Number; n(true) === 1 is true
PASS String(Array('a', 'b'        )) is 'a,b'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/kde/cast.js                                                 0000664 0000000 0000000 00000003165 14746647661 0021722 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBeTrue("Boolean(1) === true");
shouldBeTrue("var s = String; s(1) === '1'");
shouldBeTrue("n = Number; n(true) === 1");
shouldBe("String(Array('a', 'b'        ))", "'a,b'");
                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/kde/comment-1-expected.txt                                  0000664 0000000 0000000 00000003032 14746647661 0024563 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/comment-1.js                                            0000664 0000000 0000000 00000002724 14746647661 0022570 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// comment with linebreak
                                            node-23.7.0/deps/v8/test/webkit/fast/js/kde/comment-2-expected.txt                                  0000664 0000000 0000000 00000003032 14746647661 0024564 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/comment-2.js                                            0000664 0000000 0000000 00000002724 14746647661 0022571 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// comment with linebreak
                                            node-23.7.0/deps/v8/test/webkit/fast/js/kde/completion-expected.txt                                 0000664 0000000 0000000 00000003175 14746647661 0025144 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS foo(), i is 2
PASS caught is true
PASS val is 11
PASS val is 12
PASS val is 14
PASS val is 15
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/test/webkit/fast/js/kde/completion.js                                           0000664 0000000 0000000 00000003545 14746647661 0023143 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
var i = 1;

function foo() {
  i = 2;
  return;
  i = 3;
}

shouldBe("foo(), i", "2");

var caught = false;
try { eval("return;"); } catch(e) { caught = true; }
shouldBeTrue("caught");

// value completions take precedence
var val = eval("11; { }");
shouldBe("val", "11");
val = eval("12; ;");
shouldBe("val", "12");
val = eval("14; function f() {}");
shouldBe("val", "14");
val = eval("15; var v = 0");
shouldBe("val", "15");
                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/kde/conditional-expected.txt                                0000664 0000000 0000000 00000003302 14746647661 0025266 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS true ? 1 : 2 is 1
PASS false ? 1 : 2 is 2
PASS 'abc' ? 1 : 2 is 1
PASS null ? 1 : 2 is 2
PASS undefined ? 1 : 2 is 2
PASS /*var a=1;if (undefined) a = 2;*/ a is 1
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/kde/conditional.js                                          0000664 0000000 0000000 00000003267 14746647661 0023276 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("true ? 1 : 2", "1");
shouldBe("false ? 1 : 2", "2");
shouldBe("'abc' ? 1 : 2", "1");
shouldBe("null ? 1 : 2", "2");
shouldBe("undefined ? 1 : 2", "2");
var a = 1;
if ( undefined )
  a = 2;
shouldBe("/*var a=1;if (undefined) a = 2;*/ a", "1");
                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/kde/constructor_length-expected.txt                         0000664 0000000 0000000 00000003632 14746647661 0026717 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Object.length is 1
PASS Function.length is 1
PASS Array.length is 1
PASS String.length is 1
PASS Boolean.length is 1
PASS Number.length is 1
PASS Date.length is 7
PASS RegExp.length is 2
PASS Error.length is 1
PASS EvalError.length is 1
PASS RangeError.length is 1
PASS ReferenceError.length is 1
PASS SyntaxError.length is 1
PASS TypeError.length is 1
PASS URIError.length is 1
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/constructor_length.js                                   0000664 0000000 0000000 00000003643 14746647661 0024717 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("Object.length","1");
shouldBe("Function.length","1");
shouldBe("Array.length","1");
shouldBe("String.length","1");
shouldBe("Boolean.length","1");
shouldBe("Number.length","1");
shouldBe("Date.length","7");
shouldBe("RegExp.length","2");
shouldBe("Error.length","1");
shouldBe("EvalError.length","1");
shouldBe("RangeError.length","1");
shouldBe("ReferenceError.length","1");
shouldBe("SyntaxError.length","1");
shouldBe("TypeError.length","1");
shouldBe("URIError.length","1");
                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/kde/crash-1-expected.txt                                    0000664 0000000 0000000 00000003032 14746647661 0024221 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/crash-1.js                                              0000664 0000000 0000000 00000003065 14746647661 0022225 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// infinite recursion
try {
  var v = [];
  v[0] = v;
  v.toString();
} catch (e) {
  debug("OK. Caught an exception.");
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/test/webkit/fast/js/kde/crash-2-expected.txt                                    0000664 0000000 0000000 00000003062 14746647661 0024225 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


OK. Caught an exception
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/kde/crash-2.js                                              0000664 0000000 0000000 00000003063 14746647661 0022224 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// infinite recursion 2
function foo() {
   foo();
}

try {
  foo();
} catch (e) {
  debug("OK. Caught an exception");
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/kde/delete-expected.txt                                     0000664 0000000 0000000 00000003162 14746647661 0024231 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS a = 1; delete a; is true
PASS delete nonexistent; is true
PASS delete NaN is false
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/kde/delete.js                                               0000664 0000000 0000000 00000003052 14746647661 0022225 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("a = 1; delete a;", "true");
shouldBe("delete nonexistent;", "true");
shouldBe("delete NaN", "false");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/empty-expected.txt                                      0000664 0000000 0000000 00000003032 14746647661 0024121 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/empty.js                                                0000664 0000000 0000000 00000002672 14746647661 0022130 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/encode_decode_uri-expected.txt                          0000664 0000000 0000000 00000346112 14746647661 0026413 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS decodeURI(encodeURI(String.fromCharCode(0))) is String.fromCharCode(0)
PASS decodeURI(encodeURI(String.fromCharCode(55295))) is String.fromCharCode(55295)
PASS decodeURI(encodeURI(String.fromCharCode(57344))) is String.fromCharCode(57344)
PASS decodeURI(encodeURI(String.fromCharCode(65533))) is String.fromCharCode(65533)
PASS decodeURI(encodeURI(String.fromCharCode(65534))) is String.fromCharCode(65534)
PASS decodeURI(encodeURI(String.fromCharCode(65535))) is String.fromCharCode(65535)
PASS encodeURI(String.fromCharCode(56320)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(57343)) threw exception URIError: URI malformed.
PASS decodeURI(encodeURI(String.fromCharCode(55296) + String.fromCharCode(56320))) is String.fromCharCode(55296) + String.fromCharCode(56320)
PASS decodeURI(encodeURI(String.fromCharCode(56319) + String.fromCharCode(56320))) is String.fromCharCode(56319) + String.fromCharCode(56320)
PASS decodeURI(encodeURI(String.fromCharCode(55296) + String.fromCharCode(57343))) is String.fromCharCode(55296) + String.fromCharCode(57343)
PASS decodeURI(encodeURI(String.fromCharCode(56319) + String.fromCharCode(57343))) is String.fromCharCode(56319) + String.fromCharCode(57343)
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(0)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(55295)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(55296)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(56319)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(57344)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(57344)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(65533)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(65534)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(65535)) threw exception URIError: URI malformed.
PASS decodeURI(encodeURI(String.fromCharCode(1))) is String.fromCharCode(1)
PASS decodeURI(encodeURI(String.fromCharCode(252))) is String.fromCharCode(252)
PASS decodeURI(encodeURI(String.fromCharCode(503))) is String.fromCharCode(503)
PASS decodeURI(encodeURI(String.fromCharCode(754))) is String.fromCharCode(754)
PASS decodeURI(encodeURI(String.fromCharCode(1005))) is String.fromCharCode(1005)
PASS decodeURI(encodeURI(String.fromCharCode(1256))) is String.fromCharCode(1256)
PASS decodeURI(encodeURI(String.fromCharCode(1507))) is String.fromCharCode(1507)
PASS decodeURI(encodeURI(String.fromCharCode(1758))) is String.fromCharCode(1758)
PASS decodeURI(encodeURI(String.fromCharCode(2009))) is String.fromCharCode(2009)
PASS decodeURI(encodeURI(String.fromCharCode(2260))) is String.fromCharCode(2260)
PASS decodeURI(encodeURI(String.fromCharCode(2511))) is String.fromCharCode(2511)
PASS decodeURI(encodeURI(String.fromCharCode(2762))) is String.fromCharCode(2762)
PASS decodeURI(encodeURI(String.fromCharCode(3013))) is String.fromCharCode(3013)
PASS decodeURI(encodeURI(String.fromCharCode(3264))) is String.fromCharCode(3264)
PASS decodeURI(encodeURI(String.fromCharCode(3515))) is String.fromCharCode(3515)
PASS decodeURI(encodeURI(String.fromCharCode(3766))) is String.fromCharCode(3766)
PASS decodeURI(encodeURI(String.fromCharCode(4017))) is String.fromCharCode(4017)
PASS decodeURI(encodeURI(String.fromCharCode(4268))) is String.fromCharCode(4268)
PASS decodeURI(encodeURI(String.fromCharCode(4519))) is String.fromCharCode(4519)
PASS decodeURI(encodeURI(String.fromCharCode(4770))) is String.fromCharCode(4770)
PASS decodeURI(encodeURI(String.fromCharCode(5021))) is String.fromCharCode(5021)
PASS decodeURI(encodeURI(String.fromCharCode(5272))) is String.fromCharCode(5272)
PASS decodeURI(encodeURI(String.fromCharCode(5523))) is String.fromCharCode(5523)
PASS decodeURI(encodeURI(String.fromCharCode(5774))) is String.fromCharCode(5774)
PASS decodeURI(encodeURI(String.fromCharCode(6025))) is String.fromCharCode(6025)
PASS decodeURI(encodeURI(String.fromCharCode(6276))) is String.fromCharCode(6276)
PASS decodeURI(encodeURI(String.fromCharCode(6527))) is String.fromCharCode(6527)
PASS decodeURI(encodeURI(String.fromCharCode(6778))) is String.fromCharCode(6778)
PASS decodeURI(encodeURI(String.fromCharCode(7029))) is String.fromCharCode(7029)
PASS decodeURI(encodeURI(String.fromCharCode(7280))) is String.fromCharCode(7280)
PASS decodeURI(encodeURI(String.fromCharCode(7531))) is String.fromCharCode(7531)
PASS decodeURI(encodeURI(String.fromCharCode(7782))) is String.fromCharCode(7782)
PASS decodeURI(encodeURI(String.fromCharCode(8033))) is String.fromCharCode(8033)
PASS decodeURI(encodeURI(String.fromCharCode(8284))) is String.fromCharCode(8284)
PASS decodeURI(encodeURI(String.fromCharCode(8535))) is String.fromCharCode(8535)
PASS decodeURI(encodeURI(String.fromCharCode(8786))) is String.fromCharCode(8786)
PASS decodeURI(encodeURI(String.fromCharCode(9037))) is String.fromCharCode(9037)
PASS decodeURI(encodeURI(String.fromCharCode(9288))) is String.fromCharCode(9288)
PASS decodeURI(encodeURI(String.fromCharCode(9539))) is String.fromCharCode(9539)
PASS decodeURI(encodeURI(String.fromCharCode(9790))) is String.fromCharCode(9790)
PASS decodeURI(encodeURI(String.fromCharCode(10041))) is String.fromCharCode(10041)
PASS decodeURI(encodeURI(String.fromCharCode(10292))) is String.fromCharCode(10292)
PASS decodeURI(encodeURI(String.fromCharCode(10543))) is String.fromCharCode(10543)
PASS decodeURI(encodeURI(String.fromCharCode(10794))) is String.fromCharCode(10794)
PASS decodeURI(encodeURI(String.fromCharCode(11045))) is String.fromCharCode(11045)
PASS decodeURI(encodeURI(String.fromCharCode(11296))) is String.fromCharCode(11296)
PASS decodeURI(encodeURI(String.fromCharCode(11547))) is String.fromCharCode(11547)
PASS decodeURI(encodeURI(String.fromCharCode(11798))) is String.fromCharCode(11798)
PASS decodeURI(encodeURI(String.fromCharCode(12049))) is String.fromCharCode(12049)
PASS decodeURI(encodeURI(String.fromCharCode(12300))) is String.fromCharCode(12300)
PASS decodeURI(encodeURI(String.fromCharCode(12551))) is String.fromCharCode(12551)
PASS decodeURI(encodeURI(String.fromCharCode(12802))) is String.fromCharCode(12802)
PASS decodeURI(encodeURI(String.fromCharCode(13053))) is String.fromCharCode(13053)
PASS decodeURI(encodeURI(String.fromCharCode(13304))) is String.fromCharCode(13304)
PASS decodeURI(encodeURI(String.fromCharCode(13555))) is String.fromCharCode(13555)
PASS decodeURI(encodeURI(String.fromCharCode(13806))) is String.fromCharCode(13806)
PASS decodeURI(encodeURI(String.fromCharCode(14057))) is String.fromCharCode(14057)
PASS decodeURI(encodeURI(String.fromCharCode(14308))) is String.fromCharCode(14308)
PASS decodeURI(encodeURI(String.fromCharCode(14559))) is String.fromCharCode(14559)
PASS decodeURI(encodeURI(String.fromCharCode(14810))) is String.fromCharCode(14810)
PASS decodeURI(encodeURI(String.fromCharCode(15061))) is String.fromCharCode(15061)
PASS decodeURI(encodeURI(String.fromCharCode(15312))) is String.fromCharCode(15312)
PASS decodeURI(encodeURI(String.fromCharCode(15563))) is String.fromCharCode(15563)
PASS decodeURI(encodeURI(String.fromCharCode(15814))) is String.fromCharCode(15814)
PASS decodeURI(encodeURI(String.fromCharCode(16065))) is String.fromCharCode(16065)
PASS decodeURI(encodeURI(String.fromCharCode(16316))) is String.fromCharCode(16316)
PASS decodeURI(encodeURI(String.fromCharCode(16567))) is String.fromCharCode(16567)
PASS decodeURI(encodeURI(String.fromCharCode(16818))) is String.fromCharCode(16818)
PASS decodeURI(encodeURI(String.fromCharCode(17069))) is String.fromCharCode(17069)
PASS decodeURI(encodeURI(String.fromCharCode(17320))) is String.fromCharCode(17320)
PASS decodeURI(encodeURI(String.fromCharCode(17571))) is String.fromCharCode(17571)
PASS decodeURI(encodeURI(String.fromCharCode(17822))) is String.fromCharCode(17822)
PASS decodeURI(encodeURI(String.fromCharCode(18073))) is String.fromCharCode(18073)
PASS decodeURI(encodeURI(String.fromCharCode(18324))) is String.fromCharCode(18324)
PASS decodeURI(encodeURI(String.fromCharCode(18575))) is String.fromCharCode(18575)
PASS decodeURI(encodeURI(String.fromCharCode(18826))) is String.fromCharCode(18826)
PASS decodeURI(encodeURI(String.fromCharCode(19077))) is String.fromCharCode(19077)
PASS decodeURI(encodeURI(String.fromCharCode(19328))) is String.fromCharCode(19328)
PASS decodeURI(encodeURI(String.fromCharCode(19579))) is String.fromCharCode(19579)
PASS decodeURI(encodeURI(String.fromCharCode(19830))) is String.fromCharCode(19830)
PASS decodeURI(encodeURI(String.fromCharCode(20081))) is String.fromCharCode(20081)
PASS decodeURI(encodeURI(String.fromCharCode(20332))) is String.fromCharCode(20332)
PASS decodeURI(encodeURI(String.fromCharCode(20583))) is String.fromCharCode(20583)
PASS decodeURI(encodeURI(String.fromCharCode(20834))) is String.fromCharCode(20834)
PASS decodeURI(encodeURI(String.fromCharCode(21085))) is String.fromCharCode(21085)
PASS decodeURI(encodeURI(String.fromCharCode(21336))) is String.fromCharCode(21336)
PASS decodeURI(encodeURI(String.fromCharCode(21587))) is String.fromCharCode(21587)
PASS decodeURI(encodeURI(String.fromCharCode(21838))) is String.fromCharCode(21838)
PASS decodeURI(encodeURI(String.fromCharCode(22089))) is String.fromCharCode(22089)
PASS decodeURI(encodeURI(String.fromCharCode(22340))) is String.fromCharCode(22340)
PASS decodeURI(encodeURI(String.fromCharCode(22591))) is String.fromCharCode(22591)
PASS decodeURI(encodeURI(String.fromCharCode(22842))) is String.fromCharCode(22842)
PASS decodeURI(encodeURI(String.fromCharCode(23093))) is String.fromCharCode(23093)
PASS decodeURI(encodeURI(String.fromCharCode(23344))) is String.fromCharCode(23344)
PASS decodeURI(encodeURI(String.fromCharCode(23595))) is String.fromCharCode(23595)
PASS decodeURI(encodeURI(String.fromCharCode(23846))) is String.fromCharCode(23846)
PASS decodeURI(encodeURI(String.fromCharCode(24097))) is String.fromCharCode(24097)
PASS decodeURI(encodeURI(String.fromCharCode(24348))) is String.fromCharCode(24348)
PASS decodeURI(encodeURI(String.fromCharCode(24599))) is String.fromCharCode(24599)
PASS decodeURI(encodeURI(String.fromCharCode(24850))) is String.fromCharCode(24850)
PASS decodeURI(encodeURI(String.fromCharCode(25101))) is String.fromCharCode(25101)
PASS decodeURI(encodeURI(String.fromCharCode(25352))) is String.fromCharCode(25352)
PASS decodeURI(encodeURI(String.fromCharCode(25603))) is String.fromCharCode(25603)
PASS decodeURI(encodeURI(String.fromCharCode(25854))) is String.fromCharCode(25854)
PASS decodeURI(encodeURI(String.fromCharCode(26105))) is String.fromCharCode(26105)
PASS decodeURI(encodeURI(String.fromCharCode(26356))) is String.fromCharCode(26356)
PASS decodeURI(encodeURI(String.fromCharCode(26607))) is String.fromCharCode(26607)
PASS decodeURI(encodeURI(String.fromCharCode(26858))) is String.fromCharCode(26858)
PASS decodeURI(encodeURI(String.fromCharCode(27109))) is String.fromCharCode(27109)
PASS decodeURI(encodeURI(String.fromCharCode(27360))) is String.fromCharCode(27360)
PASS decodeURI(encodeURI(String.fromCharCode(27611))) is String.fromCharCode(27611)
PASS decodeURI(encodeURI(String.fromCharCode(27862))) is String.fromCharCode(27862)
PASS decodeURI(encodeURI(String.fromCharCode(28113))) is String.fromCharCode(28113)
PASS decodeURI(encodeURI(String.fromCharCode(28364))) is String.fromCharCode(28364)
PASS decodeURI(encodeURI(String.fromCharCode(28615))) is String.fromCharCode(28615)
PASS decodeURI(encodeURI(String.fromCharCode(28866))) is String.fromCharCode(28866)
PASS decodeURI(encodeURI(String.fromCharCode(29117))) is String.fromCharCode(29117)
PASS decodeURI(encodeURI(String.fromCharCode(29368))) is String.fromCharCode(29368)
PASS decodeURI(encodeURI(String.fromCharCode(29619))) is String.fromCharCode(29619)
PASS decodeURI(encodeURI(String.fromCharCode(29870))) is String.fromCharCode(29870)
PASS decodeURI(encodeURI(String.fromCharCode(30121))) is String.fromCharCode(30121)
PASS decodeURI(encodeURI(String.fromCharCode(30372))) is String.fromCharCode(30372)
PASS decodeURI(encodeURI(String.fromCharCode(30623))) is String.fromCharCode(30623)
PASS decodeURI(encodeURI(String.fromCharCode(30874))) is String.fromCharCode(30874)
PASS decodeURI(encodeURI(String.fromCharCode(31125))) is String.fromCharCode(31125)
PASS decodeURI(encodeURI(String.fromCharCode(31376))) is String.fromCharCode(31376)
PASS decodeURI(encodeURI(String.fromCharCode(31627))) is String.fromCharCode(31627)
PASS decodeURI(encodeURI(String.fromCharCode(31878))) is String.fromCharCode(31878)
PASS decodeURI(encodeURI(String.fromCharCode(32129))) is String.fromCharCode(32129)
PASS decodeURI(encodeURI(String.fromCharCode(32380))) is String.fromCharCode(32380)
PASS decodeURI(encodeURI(String.fromCharCode(32631))) is String.fromCharCode(32631)
PASS decodeURI(encodeURI(String.fromCharCode(32882))) is String.fromCharCode(32882)
PASS decodeURI(encodeURI(String.fromCharCode(33133))) is String.fromCharCode(33133)
PASS decodeURI(encodeURI(String.fromCharCode(33384))) is String.fromCharCode(33384)
PASS decodeURI(encodeURI(String.fromCharCode(33635))) is String.fromCharCode(33635)
PASS decodeURI(encodeURI(String.fromCharCode(33886))) is String.fromCharCode(33886)
PASS decodeURI(encodeURI(String.fromCharCode(34137))) is String.fromCharCode(34137)
PASS decodeURI(encodeURI(String.fromCharCode(34388))) is String.fromCharCode(34388)
PASS decodeURI(encodeURI(String.fromCharCode(34639))) is String.fromCharCode(34639)
PASS decodeURI(encodeURI(String.fromCharCode(34890))) is String.fromCharCode(34890)
PASS decodeURI(encodeURI(String.fromCharCode(35141))) is String.fromCharCode(35141)
PASS decodeURI(encodeURI(String.fromCharCode(35392))) is String.fromCharCode(35392)
PASS decodeURI(encodeURI(String.fromCharCode(35643))) is String.fromCharCode(35643)
PASS decodeURI(encodeURI(String.fromCharCode(35894))) is String.fromCharCode(35894)
PASS decodeURI(encodeURI(String.fromCharCode(36145))) is String.fromCharCode(36145)
PASS decodeURI(encodeURI(String.fromCharCode(36396))) is String.fromCharCode(36396)
PASS decodeURI(encodeURI(String.fromCharCode(36647))) is String.fromCharCode(36647)
PASS decodeURI(encodeURI(String.fromCharCode(36898))) is String.fromCharCode(36898)
PASS decodeURI(encodeURI(String.fromCharCode(37149))) is String.fromCharCode(37149)
PASS decodeURI(encodeURI(String.fromCharCode(37400))) is String.fromCharCode(37400)
PASS decodeURI(encodeURI(String.fromCharCode(37651))) is String.fromCharCode(37651)
PASS decodeURI(encodeURI(String.fromCharCode(37902))) is String.fromCharCode(37902)
PASS decodeURI(encodeURI(String.fromCharCode(38153))) is String.fromCharCode(38153)
PASS decodeURI(encodeURI(String.fromCharCode(38404))) is String.fromCharCode(38404)
PASS decodeURI(encodeURI(String.fromCharCode(38655))) is String.fromCharCode(38655)
PASS decodeURI(encodeURI(String.fromCharCode(38906))) is String.fromCharCode(38906)
PASS decodeURI(encodeURI(String.fromCharCode(39157))) is String.fromCharCode(39157)
PASS decodeURI(encodeURI(String.fromCharCode(39408))) is String.fromCharCode(39408)
PASS decodeURI(encodeURI(String.fromCharCode(39659))) is String.fromCharCode(39659)
PASS decodeURI(encodeURI(String.fromCharCode(39910))) is String.fromCharCode(39910)
PASS decodeURI(encodeURI(String.fromCharCode(40161))) is String.fromCharCode(40161)
PASS decodeURI(encodeURI(String.fromCharCode(40412))) is String.fromCharCode(40412)
PASS decodeURI(encodeURI(String.fromCharCode(40663))) is String.fromCharCode(40663)
PASS decodeURI(encodeURI(String.fromCharCode(40914))) is String.fromCharCode(40914)
PASS decodeURI(encodeURI(String.fromCharCode(41165))) is String.fromCharCode(41165)
PASS decodeURI(encodeURI(String.fromCharCode(41416))) is String.fromCharCode(41416)
PASS decodeURI(encodeURI(String.fromCharCode(41667))) is String.fromCharCode(41667)
PASS decodeURI(encodeURI(String.fromCharCode(41918))) is String.fromCharCode(41918)
PASS decodeURI(encodeURI(String.fromCharCode(42169))) is String.fromCharCode(42169)
PASS decodeURI(encodeURI(String.fromCharCode(42420))) is String.fromCharCode(42420)
PASS decodeURI(encodeURI(String.fromCharCode(42671))) is String.fromCharCode(42671)
PASS decodeURI(encodeURI(String.fromCharCode(42922))) is String.fromCharCode(42922)
PASS decodeURI(encodeURI(String.fromCharCode(43173))) is String.fromCharCode(43173)
PASS decodeURI(encodeURI(String.fromCharCode(43424))) is String.fromCharCode(43424)
PASS decodeURI(encodeURI(String.fromCharCode(43675))) is String.fromCharCode(43675)
PASS decodeURI(encodeURI(String.fromCharCode(43926))) is String.fromCharCode(43926)
PASS decodeURI(encodeURI(String.fromCharCode(44177))) is String.fromCharCode(44177)
PASS decodeURI(encodeURI(String.fromCharCode(44428))) is String.fromCharCode(44428)
PASS decodeURI(encodeURI(String.fromCharCode(44679))) is String.fromCharCode(44679)
PASS decodeURI(encodeURI(String.fromCharCode(44930))) is String.fromCharCode(44930)
PASS decodeURI(encodeURI(String.fromCharCode(45181))) is String.fromCharCode(45181)
PASS decodeURI(encodeURI(String.fromCharCode(45432))) is String.fromCharCode(45432)
PASS decodeURI(encodeURI(String.fromCharCode(45683))) is String.fromCharCode(45683)
PASS decodeURI(encodeURI(String.fromCharCode(45934))) is String.fromCharCode(45934)
PASS decodeURI(encodeURI(String.fromCharCode(46185))) is String.fromCharCode(46185)
PASS decodeURI(encodeURI(String.fromCharCode(46436))) is String.fromCharCode(46436)
PASS decodeURI(encodeURI(String.fromCharCode(46687))) is String.fromCharCode(46687)
PASS decodeURI(encodeURI(String.fromCharCode(46938))) is String.fromCharCode(46938)
PASS decodeURI(encodeURI(String.fromCharCode(47189))) is String.fromCharCode(47189)
PASS decodeURI(encodeURI(String.fromCharCode(47440))) is String.fromCharCode(47440)
PASS decodeURI(encodeURI(String.fromCharCode(47691))) is String.fromCharCode(47691)
PASS decodeURI(encodeURI(String.fromCharCode(47942))) is String.fromCharCode(47942)
PASS decodeURI(encodeURI(String.fromCharCode(48193))) is String.fromCharCode(48193)
PASS decodeURI(encodeURI(String.fromCharCode(48444))) is String.fromCharCode(48444)
PASS decodeURI(encodeURI(String.fromCharCode(48695))) is String.fromCharCode(48695)
PASS decodeURI(encodeURI(String.fromCharCode(48946))) is String.fromCharCode(48946)
PASS decodeURI(encodeURI(String.fromCharCode(49197))) is String.fromCharCode(49197)
PASS decodeURI(encodeURI(String.fromCharCode(49448))) is String.fromCharCode(49448)
PASS decodeURI(encodeURI(String.fromCharCode(49699))) is String.fromCharCode(49699)
PASS decodeURI(encodeURI(String.fromCharCode(49950))) is String.fromCharCode(49950)
PASS decodeURI(encodeURI(String.fromCharCode(50201))) is String.fromCharCode(50201)
PASS decodeURI(encodeURI(String.fromCharCode(50452))) is String.fromCharCode(50452)
PASS decodeURI(encodeURI(String.fromCharCode(50703))) is String.fromCharCode(50703)
PASS decodeURI(encodeURI(String.fromCharCode(50954))) is String.fromCharCode(50954)
PASS decodeURI(encodeURI(String.fromCharCode(51205))) is String.fromCharCode(51205)
PASS decodeURI(encodeURI(String.fromCharCode(51456))) is String.fromCharCode(51456)
PASS decodeURI(encodeURI(String.fromCharCode(51707))) is String.fromCharCode(51707)
PASS decodeURI(encodeURI(String.fromCharCode(51958))) is String.fromCharCode(51958)
PASS decodeURI(encodeURI(String.fromCharCode(52209))) is String.fromCharCode(52209)
PASS decodeURI(encodeURI(String.fromCharCode(52460))) is String.fromCharCode(52460)
PASS decodeURI(encodeURI(String.fromCharCode(52711))) is String.fromCharCode(52711)
PASS decodeURI(encodeURI(String.fromCharCode(52962))) is String.fromCharCode(52962)
PASS decodeURI(encodeURI(String.fromCharCode(53213))) is String.fromCharCode(53213)
PASS decodeURI(encodeURI(String.fromCharCode(53464))) is String.fromCharCode(53464)
PASS decodeURI(encodeURI(String.fromCharCode(53715))) is String.fromCharCode(53715)
PASS decodeURI(encodeURI(String.fromCharCode(53966))) is String.fromCharCode(53966)
PASS decodeURI(encodeURI(String.fromCharCode(54217))) is String.fromCharCode(54217)
PASS decodeURI(encodeURI(String.fromCharCode(54468))) is String.fromCharCode(54468)
PASS decodeURI(encodeURI(String.fromCharCode(54719))) is String.fromCharCode(54719)
PASS decodeURI(encodeURI(String.fromCharCode(54970))) is String.fromCharCode(54970)
PASS decodeURI(encodeURI(String.fromCharCode(55221))) is String.fromCharCode(55221)
PASS decodeURI(encodeURI(String.fromCharCode(57345))) is String.fromCharCode(57345)
PASS decodeURI(encodeURI(String.fromCharCode(57596))) is String.fromCharCode(57596)
PASS decodeURI(encodeURI(String.fromCharCode(57847))) is String.fromCharCode(57847)
PASS decodeURI(encodeURI(String.fromCharCode(58098))) is String.fromCharCode(58098)
PASS decodeURI(encodeURI(String.fromCharCode(58349))) is String.fromCharCode(58349)
PASS decodeURI(encodeURI(String.fromCharCode(58600))) is String.fromCharCode(58600)
PASS decodeURI(encodeURI(String.fromCharCode(58851))) is String.fromCharCode(58851)
PASS decodeURI(encodeURI(String.fromCharCode(59102))) is String.fromCharCode(59102)
PASS decodeURI(encodeURI(String.fromCharCode(59353))) is String.fromCharCode(59353)
PASS decodeURI(encodeURI(String.fromCharCode(59604))) is String.fromCharCode(59604)
PASS decodeURI(encodeURI(String.fromCharCode(59855))) is String.fromCharCode(59855)
PASS decodeURI(encodeURI(String.fromCharCode(60106))) is String.fromCharCode(60106)
PASS decodeURI(encodeURI(String.fromCharCode(60357))) is String.fromCharCode(60357)
PASS decodeURI(encodeURI(String.fromCharCode(60608))) is String.fromCharCode(60608)
PASS decodeURI(encodeURI(String.fromCharCode(60859))) is String.fromCharCode(60859)
PASS decodeURI(encodeURI(String.fromCharCode(61110))) is String.fromCharCode(61110)
PASS decodeURI(encodeURI(String.fromCharCode(61361))) is String.fromCharCode(61361)
PASS decodeURI(encodeURI(String.fromCharCode(61612))) is String.fromCharCode(61612)
PASS decodeURI(encodeURI(String.fromCharCode(61863))) is String.fromCharCode(61863)
PASS decodeURI(encodeURI(String.fromCharCode(62114))) is String.fromCharCode(62114)
PASS decodeURI(encodeURI(String.fromCharCode(62365))) is String.fromCharCode(62365)
PASS decodeURI(encodeURI(String.fromCharCode(62616))) is String.fromCharCode(62616)
PASS decodeURI(encodeURI(String.fromCharCode(62867))) is String.fromCharCode(62867)
PASS decodeURI(encodeURI(String.fromCharCode(63118))) is String.fromCharCode(63118)
PASS decodeURI(encodeURI(String.fromCharCode(63369))) is String.fromCharCode(63369)
PASS decodeURI(encodeURI(String.fromCharCode(63620))) is String.fromCharCode(63620)
PASS decodeURI(encodeURI(String.fromCharCode(63871))) is String.fromCharCode(63871)
PASS decodeURI(encodeURI(String.fromCharCode(64122))) is String.fromCharCode(64122)
PASS decodeURI(encodeURI(String.fromCharCode(64373))) is String.fromCharCode(64373)
PASS decodeURI(encodeURI(String.fromCharCode(64624))) is String.fromCharCode(64624)
PASS decodeURI(encodeURI(String.fromCharCode(64875))) is String.fromCharCode(64875)
PASS decodeURI(encodeURI(String.fromCharCode(65126))) is String.fromCharCode(65126)
PASS decodeURI(encodeURI(String.fromCharCode(65377))) is String.fromCharCode(65377)
PASS encodeURI(String.fromCharCode(56321)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(56572)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(56823)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(57074)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(57325)) threw exception URIError: URI malformed.
PASS decodeURI(encodeURI(String.fromCharCode(55297) + String.fromCharCode(56320))) is String.fromCharCode(55297) + String.fromCharCode(56320)
PASS decodeURI(encodeURI(String.fromCharCode(55548) + String.fromCharCode(56320))) is String.fromCharCode(55548) + String.fromCharCode(56320)
PASS decodeURI(encodeURI(String.fromCharCode(55799) + String.fromCharCode(56320))) is String.fromCharCode(55799) + String.fromCharCode(56320)
PASS decodeURI(encodeURI(String.fromCharCode(56050) + String.fromCharCode(56320))) is String.fromCharCode(56050) + String.fromCharCode(56320)
PASS decodeURI(encodeURI(String.fromCharCode(56301) + String.fromCharCode(56320))) is String.fromCharCode(56301) + String.fromCharCode(56320)
PASS decodeURI(encodeURI(String.fromCharCode(55296) + String.fromCharCode(56321))) is String.fromCharCode(55296) + String.fromCharCode(56321)
PASS decodeURI(encodeURI(String.fromCharCode(55296) + String.fromCharCode(56572))) is String.fromCharCode(55296) + String.fromCharCode(56572)
PASS decodeURI(encodeURI(String.fromCharCode(55296) + String.fromCharCode(56823))) is String.fromCharCode(55296) + String.fromCharCode(56823)
PASS decodeURI(encodeURI(String.fromCharCode(55296) + String.fromCharCode(57074))) is String.fromCharCode(55296) + String.fromCharCode(57074)
PASS decodeURI(encodeURI(String.fromCharCode(55296) + String.fromCharCode(57325))) is String.fromCharCode(55296) + String.fromCharCode(57325)
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(1)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(252)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(503)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(754)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(1005)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(1256)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(1507)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(1758)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(2009)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(2260)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(2511)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(2762)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(3013)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(3264)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(3515)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(3766)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(4017)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(4268)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(4519)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(4770)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(5021)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(5272)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(5523)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(5774)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(6025)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(6276)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(6527)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(6778)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(7029)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(7280)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(7531)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(7782)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(8033)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(8284)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(8535)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(8786)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(9037)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(9288)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(9539)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(9790)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(10041)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(10292)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(10543)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(10794)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(11045)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(11296)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(11547)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(11798)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(12049)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(12300)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(12551)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(12802)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(13053)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(13304)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(13555)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(13806)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(14057)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(14308)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(14559)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(14810)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(15061)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(15312)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(15563)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(15814)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(16065)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(16316)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(16567)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(16818)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(17069)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(17320)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(17571)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(17822)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(18073)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(18324)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(18575)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(18826)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(19077)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(19328)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(19579)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(19830)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(20081)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(20332)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(20583)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(20834)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(21085)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(21336)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(21587)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(21838)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(22089)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(22340)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(22591)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(22842)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(23093)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(23344)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(23595)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(23846)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(24097)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(24348)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(24599)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(24850)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(25101)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(25352)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(25603)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(25854)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(26105)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(26356)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(26607)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(26858)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(27109)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(27360)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(27611)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(27862)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(28113)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(28364)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(28615)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(28866)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(29117)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(29368)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(29619)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(29870)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(30121)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(30372)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(30623)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(30874)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(31125)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(31376)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(31627)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(31878)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(32129)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(32380)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(32631)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(32882)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(33133)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(33384)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(33635)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(33886)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(34137)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(34388)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(34639)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(34890)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(35141)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(35392)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(35643)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(35894)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(36145)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(36396)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(36647)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(36898)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(37149)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(37400)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(37651)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(37902)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(38153)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(38404)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(38655)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(38906)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(39157)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(39408)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(39659)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(39910)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(40161)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(40412)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(40663)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(40914)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(41165)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(41416)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(41667)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(41918)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(42169)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(42420)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(42671)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(42922)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(43173)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(43424)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(43675)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(43926)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(44177)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(44428)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(44679)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(44930)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(45181)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(45432)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(45683)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(45934)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(46185)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(46436)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(46687)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(46938)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(47189)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(47440)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(47691)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(47942)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(48193)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(48444)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(48695)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(48946)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(49197)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(49448)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(49699)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(49950)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(50201)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(50452)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(50703)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(50954)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(51205)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(51456)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(51707)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(51958)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(52209)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(52460)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(52711)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(52962)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(53213)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(53464)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(53715)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(53966)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(54217)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(54468)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(54719)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(54970)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(55221)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(55472)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(55723)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(55974)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(56225)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(57345)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(57596)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(57847)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(58098)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(58349)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(58600)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(58851)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(59102)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(59353)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(59604)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(59855)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(60106)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(60357)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(60608)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(60859)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(61110)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(61361)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(61612)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(61863)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(62114)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(62365)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(62616)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(62867)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(63118)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(63369)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(63620)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(63871)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(64122)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(64373)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(64624)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(64875)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(65126)) threw exception URIError: URI malformed.
PASS encodeURI(String.fromCharCode(55296) + String.fromCharCode(65377)) threw exception URIError: URI malformed.
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(0))) is String.fromCharCode(0)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55295))) is String.fromCharCode(55295)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(57344))) is String.fromCharCode(57344)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(65533))) is String.fromCharCode(65533)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(65534))) is String.fromCharCode(65534)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(65535))) is String.fromCharCode(65535)
PASS encodeURIComponent(String.fromCharCode(56320)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(57343)) threw exception URIError: URI malformed.
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(56320))) is String.fromCharCode(55296) + String.fromCharCode(56320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(56319) + String.fromCharCode(56320))) is String.fromCharCode(56319) + String.fromCharCode(56320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57343))) is String.fromCharCode(55296) + String.fromCharCode(57343)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(56319) + String.fromCharCode(57343))) is String.fromCharCode(56319) + String.fromCharCode(57343)
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(0)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(55295)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(55296)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(56319)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57344)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57344)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(65533)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(65534)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(65535)) threw exception URIError: URI malformed.
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(1))) is String.fromCharCode(1)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(252))) is String.fromCharCode(252)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(503))) is String.fromCharCode(503)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(754))) is String.fromCharCode(754)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(1005))) is String.fromCharCode(1005)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(1256))) is String.fromCharCode(1256)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(1507))) is String.fromCharCode(1507)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(1758))) is String.fromCharCode(1758)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(2009))) is String.fromCharCode(2009)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(2260))) is String.fromCharCode(2260)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(2511))) is String.fromCharCode(2511)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(2762))) is String.fromCharCode(2762)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(3013))) is String.fromCharCode(3013)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(3264))) is String.fromCharCode(3264)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(3515))) is String.fromCharCode(3515)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(3766))) is String.fromCharCode(3766)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(4017))) is String.fromCharCode(4017)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(4268))) is String.fromCharCode(4268)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(4519))) is String.fromCharCode(4519)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(4770))) is String.fromCharCode(4770)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(5021))) is String.fromCharCode(5021)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(5272))) is String.fromCharCode(5272)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(5523))) is String.fromCharCode(5523)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(5774))) is String.fromCharCode(5774)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(6025))) is String.fromCharCode(6025)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(6276))) is String.fromCharCode(6276)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(6527))) is String.fromCharCode(6527)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(6778))) is String.fromCharCode(6778)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(7029))) is String.fromCharCode(7029)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(7280))) is String.fromCharCode(7280)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(7531))) is String.fromCharCode(7531)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(7782))) is String.fromCharCode(7782)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(8033))) is String.fromCharCode(8033)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(8284))) is String.fromCharCode(8284)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(8535))) is String.fromCharCode(8535)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(8786))) is String.fromCharCode(8786)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(9037))) is String.fromCharCode(9037)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(9288))) is String.fromCharCode(9288)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(9539))) is String.fromCharCode(9539)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(9790))) is String.fromCharCode(9790)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(10041))) is String.fromCharCode(10041)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(10292))) is String.fromCharCode(10292)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(10543))) is String.fromCharCode(10543)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(10794))) is String.fromCharCode(10794)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(11045))) is String.fromCharCode(11045)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(11296))) is String.fromCharCode(11296)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(11547))) is String.fromCharCode(11547)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(11798))) is String.fromCharCode(11798)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(12049))) is String.fromCharCode(12049)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(12300))) is String.fromCharCode(12300)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(12551))) is String.fromCharCode(12551)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(12802))) is String.fromCharCode(12802)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(13053))) is String.fromCharCode(13053)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(13304))) is String.fromCharCode(13304)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(13555))) is String.fromCharCode(13555)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(13806))) is String.fromCharCode(13806)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(14057))) is String.fromCharCode(14057)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(14308))) is String.fromCharCode(14308)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(14559))) is String.fromCharCode(14559)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(14810))) is String.fromCharCode(14810)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(15061))) is String.fromCharCode(15061)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(15312))) is String.fromCharCode(15312)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(15563))) is String.fromCharCode(15563)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(15814))) is String.fromCharCode(15814)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(16065))) is String.fromCharCode(16065)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(16316))) is String.fromCharCode(16316)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(16567))) is String.fromCharCode(16567)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(16818))) is String.fromCharCode(16818)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(17069))) is String.fromCharCode(17069)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(17320))) is String.fromCharCode(17320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(17571))) is String.fromCharCode(17571)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(17822))) is String.fromCharCode(17822)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(18073))) is String.fromCharCode(18073)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(18324))) is String.fromCharCode(18324)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(18575))) is String.fromCharCode(18575)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(18826))) is String.fromCharCode(18826)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(19077))) is String.fromCharCode(19077)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(19328))) is String.fromCharCode(19328)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(19579))) is String.fromCharCode(19579)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(19830))) is String.fromCharCode(19830)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(20081))) is String.fromCharCode(20081)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(20332))) is String.fromCharCode(20332)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(20583))) is String.fromCharCode(20583)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(20834))) is String.fromCharCode(20834)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(21085))) is String.fromCharCode(21085)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(21336))) is String.fromCharCode(21336)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(21587))) is String.fromCharCode(21587)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(21838))) is String.fromCharCode(21838)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(22089))) is String.fromCharCode(22089)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(22340))) is String.fromCharCode(22340)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(22591))) is String.fromCharCode(22591)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(22842))) is String.fromCharCode(22842)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(23093))) is String.fromCharCode(23093)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(23344))) is String.fromCharCode(23344)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(23595))) is String.fromCharCode(23595)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(23846))) is String.fromCharCode(23846)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(24097))) is String.fromCharCode(24097)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(24348))) is String.fromCharCode(24348)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(24599))) is String.fromCharCode(24599)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(24850))) is String.fromCharCode(24850)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(25101))) is String.fromCharCode(25101)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(25352))) is String.fromCharCode(25352)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(25603))) is String.fromCharCode(25603)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(25854))) is String.fromCharCode(25854)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(26105))) is String.fromCharCode(26105)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(26356))) is String.fromCharCode(26356)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(26607))) is String.fromCharCode(26607)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(26858))) is String.fromCharCode(26858)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(27109))) is String.fromCharCode(27109)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(27360))) is String.fromCharCode(27360)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(27611))) is String.fromCharCode(27611)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(27862))) is String.fromCharCode(27862)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(28113))) is String.fromCharCode(28113)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(28364))) is String.fromCharCode(28364)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(28615))) is String.fromCharCode(28615)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(28866))) is String.fromCharCode(28866)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(29117))) is String.fromCharCode(29117)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(29368))) is String.fromCharCode(29368)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(29619))) is String.fromCharCode(29619)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(29870))) is String.fromCharCode(29870)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(30121))) is String.fromCharCode(30121)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(30372))) is String.fromCharCode(30372)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(30623))) is String.fromCharCode(30623)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(30874))) is String.fromCharCode(30874)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(31125))) is String.fromCharCode(31125)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(31376))) is String.fromCharCode(31376)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(31627))) is String.fromCharCode(31627)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(31878))) is String.fromCharCode(31878)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(32129))) is String.fromCharCode(32129)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(32380))) is String.fromCharCode(32380)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(32631))) is String.fromCharCode(32631)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(32882))) is String.fromCharCode(32882)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(33133))) is String.fromCharCode(33133)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(33384))) is String.fromCharCode(33384)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(33635))) is String.fromCharCode(33635)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(33886))) is String.fromCharCode(33886)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(34137))) is String.fromCharCode(34137)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(34388))) is String.fromCharCode(34388)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(34639))) is String.fromCharCode(34639)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(34890))) is String.fromCharCode(34890)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(35141))) is String.fromCharCode(35141)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(35392))) is String.fromCharCode(35392)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(35643))) is String.fromCharCode(35643)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(35894))) is String.fromCharCode(35894)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(36145))) is String.fromCharCode(36145)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(36396))) is String.fromCharCode(36396)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(36647))) is String.fromCharCode(36647)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(36898))) is String.fromCharCode(36898)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(37149))) is String.fromCharCode(37149)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(37400))) is String.fromCharCode(37400)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(37651))) is String.fromCharCode(37651)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(37902))) is String.fromCharCode(37902)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(38153))) is String.fromCharCode(38153)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(38404))) is String.fromCharCode(38404)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(38655))) is String.fromCharCode(38655)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(38906))) is String.fromCharCode(38906)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(39157))) is String.fromCharCode(39157)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(39408))) is String.fromCharCode(39408)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(39659))) is String.fromCharCode(39659)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(39910))) is String.fromCharCode(39910)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(40161))) is String.fromCharCode(40161)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(40412))) is String.fromCharCode(40412)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(40663))) is String.fromCharCode(40663)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(40914))) is String.fromCharCode(40914)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(41165))) is String.fromCharCode(41165)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(41416))) is String.fromCharCode(41416)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(41667))) is String.fromCharCode(41667)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(41918))) is String.fromCharCode(41918)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(42169))) is String.fromCharCode(42169)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(42420))) is String.fromCharCode(42420)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(42671))) is String.fromCharCode(42671)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(42922))) is String.fromCharCode(42922)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(43173))) is String.fromCharCode(43173)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(43424))) is String.fromCharCode(43424)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(43675))) is String.fromCharCode(43675)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(43926))) is String.fromCharCode(43926)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(44177))) is String.fromCharCode(44177)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(44428))) is String.fromCharCode(44428)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(44679))) is String.fromCharCode(44679)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(44930))) is String.fromCharCode(44930)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(45181))) is String.fromCharCode(45181)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(45432))) is String.fromCharCode(45432)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(45683))) is String.fromCharCode(45683)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(45934))) is String.fromCharCode(45934)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(46185))) is String.fromCharCode(46185)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(46436))) is String.fromCharCode(46436)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(46687))) is String.fromCharCode(46687)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(46938))) is String.fromCharCode(46938)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(47189))) is String.fromCharCode(47189)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(47440))) is String.fromCharCode(47440)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(47691))) is String.fromCharCode(47691)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(47942))) is String.fromCharCode(47942)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(48193))) is String.fromCharCode(48193)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(48444))) is String.fromCharCode(48444)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(48695))) is String.fromCharCode(48695)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(48946))) is String.fromCharCode(48946)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(49197))) is String.fromCharCode(49197)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(49448))) is String.fromCharCode(49448)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(49699))) is String.fromCharCode(49699)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(49950))) is String.fromCharCode(49950)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(50201))) is String.fromCharCode(50201)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(50452))) is String.fromCharCode(50452)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(50703))) is String.fromCharCode(50703)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(50954))) is String.fromCharCode(50954)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(51205))) is String.fromCharCode(51205)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(51456))) is String.fromCharCode(51456)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(51707))) is String.fromCharCode(51707)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(51958))) is String.fromCharCode(51958)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(52209))) is String.fromCharCode(52209)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(52460))) is String.fromCharCode(52460)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(52711))) is String.fromCharCode(52711)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(52962))) is String.fromCharCode(52962)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(53213))) is String.fromCharCode(53213)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(53464))) is String.fromCharCode(53464)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(53715))) is String.fromCharCode(53715)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(53966))) is String.fromCharCode(53966)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(54217))) is String.fromCharCode(54217)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(54468))) is String.fromCharCode(54468)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(54719))) is String.fromCharCode(54719)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(54970))) is String.fromCharCode(54970)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55221))) is String.fromCharCode(55221)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(57345))) is String.fromCharCode(57345)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(57596))) is String.fromCharCode(57596)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(57847))) is String.fromCharCode(57847)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(58098))) is String.fromCharCode(58098)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(58349))) is String.fromCharCode(58349)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(58600))) is String.fromCharCode(58600)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(58851))) is String.fromCharCode(58851)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(59102))) is String.fromCharCode(59102)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(59353))) is String.fromCharCode(59353)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(59604))) is String.fromCharCode(59604)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(59855))) is String.fromCharCode(59855)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(60106))) is String.fromCharCode(60106)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(60357))) is String.fromCharCode(60357)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(60608))) is String.fromCharCode(60608)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(60859))) is String.fromCharCode(60859)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(61110))) is String.fromCharCode(61110)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(61361))) is String.fromCharCode(61361)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(61612))) is String.fromCharCode(61612)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(61863))) is String.fromCharCode(61863)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(62114))) is String.fromCharCode(62114)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(62365))) is String.fromCharCode(62365)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(62616))) is String.fromCharCode(62616)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(62867))) is String.fromCharCode(62867)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(63118))) is String.fromCharCode(63118)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(63369))) is String.fromCharCode(63369)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(63620))) is String.fromCharCode(63620)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(63871))) is String.fromCharCode(63871)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(64122))) is String.fromCharCode(64122)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(64373))) is String.fromCharCode(64373)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(64624))) is String.fromCharCode(64624)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(64875))) is String.fromCharCode(64875)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(65126))) is String.fromCharCode(65126)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(65377))) is String.fromCharCode(65377)
PASS encodeURIComponent(String.fromCharCode(56321)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(56572)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(56823)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(57074)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(57325)) threw exception URIError: URI malformed.
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55297) + String.fromCharCode(56320))) is String.fromCharCode(55297) + String.fromCharCode(56320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55548) + String.fromCharCode(56320))) is String.fromCharCode(55548) + String.fromCharCode(56320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55799) + String.fromCharCode(56320))) is String.fromCharCode(55799) + String.fromCharCode(56320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(56050) + String.fromCharCode(56320))) is String.fromCharCode(56050) + String.fromCharCode(56320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(56301) + String.fromCharCode(56320))) is String.fromCharCode(56301) + String.fromCharCode(56320)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(56321))) is String.fromCharCode(55296) + String.fromCharCode(56321)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(56572))) is String.fromCharCode(55296) + String.fromCharCode(56572)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(56823))) is String.fromCharCode(55296) + String.fromCharCode(56823)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57074))) is String.fromCharCode(55296) + String.fromCharCode(57074)
PASS decodeURIComponent(encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57325))) is String.fromCharCode(55296) + String.fromCharCode(57325)
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(1)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(252)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(503)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(754)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(1005)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(1256)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(1507)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(1758)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(2009)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(2260)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(2511)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(2762)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(3013)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(3264)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(3515)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(3766)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(4017)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(4268)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(4519)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(4770)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(5021)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(5272)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(5523)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(5774)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(6025)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(6276)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(6527)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(6778)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(7029)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(7280)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(7531)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(7782)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(8033)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(8284)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(8535)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(8786)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(9037)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(9288)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(9539)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(9790)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(10041)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(10292)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(10543)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(10794)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(11045)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(11296)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(11547)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(11798)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(12049)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(12300)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(12551)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(12802)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(13053)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(13304)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(13555)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(13806)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(14057)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(14308)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(14559)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(14810)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(15061)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(15312)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(15563)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(15814)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(16065)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(16316)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(16567)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(16818)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(17069)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(17320)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(17571)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(17822)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(18073)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(18324)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(18575)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(18826)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(19077)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(19328)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(19579)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(19830)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(20081)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(20332)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(20583)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(20834)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(21085)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(21336)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(21587)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(21838)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(22089)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(22340)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(22591)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(22842)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(23093)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(23344)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(23595)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(23846)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(24097)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(24348)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(24599)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(24850)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(25101)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(25352)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(25603)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(25854)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(26105)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(26356)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(26607)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(26858)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(27109)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(27360)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(27611)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(27862)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(28113)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(28364)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(28615)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(28866)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(29117)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(29368)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(29619)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(29870)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(30121)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(30372)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(30623)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(30874)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(31125)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(31376)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(31627)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(31878)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(32129)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(32380)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(32631)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(32882)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(33133)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(33384)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(33635)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(33886)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(34137)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(34388)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(34639)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(34890)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(35141)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(35392)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(35643)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(35894)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(36145)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(36396)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(36647)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(36898)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(37149)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(37400)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(37651)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(37902)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(38153)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(38404)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(38655)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(38906)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(39157)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(39408)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(39659)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(39910)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(40161)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(40412)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(40663)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(40914)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(41165)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(41416)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(41667)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(41918)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(42169)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(42420)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(42671)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(42922)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(43173)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(43424)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(43675)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(43926)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(44177)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(44428)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(44679)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(44930)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(45181)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(45432)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(45683)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(45934)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(46185)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(46436)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(46687)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(46938)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(47189)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(47440)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(47691)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(47942)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(48193)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(48444)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(48695)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(48946)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(49197)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(49448)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(49699)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(49950)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(50201)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(50452)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(50703)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(50954)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(51205)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(51456)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(51707)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(51958)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(52209)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(52460)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(52711)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(52962)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(53213)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(53464)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(53715)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(53966)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(54217)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(54468)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(54719)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(54970)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(55221)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(55472)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(55723)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(55974)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(56225)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57345)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57596)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(57847)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(58098)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(58349)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(58600)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(58851)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(59102)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(59353)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(59604)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(59855)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(60106)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(60357)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(60608)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(60859)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(61110)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(61361)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(61612)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(61863)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(62114)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(62365)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(62616)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(62867)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(63118)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(63369)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(63620)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(63871)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(64122)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(64373)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(64624)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(64875)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(65126)) threw exception URIError: URI malformed.
PASS encodeURIComponent(String.fromCharCode(55296) + String.fromCharCode(65377)) threw exception URIError: URI malformed.
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/encode_decode_uri.js                                    0000664 0000000 0000000 00000011412 14746647661 0024401 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// --------------------------------------------------------------------------------

var resolution = 251; // set to 1 for 100% coverage

function checkEncodeException(encodeFunctionName,c1,c2)
{
    if (c2 == undefined)
        shouldThrow(encodeFunctionName
            + "(String.fromCharCode(" + c1 + "))");
    else
        shouldThrow(encodeFunctionName
            + "(String.fromCharCode(" + c1 + ") + String.fromCharCode(" + c2 + "))");
}

function checkEncodeDecode(encodeFunctionName, decodeFunctionName, c1, c2)
{
    if (c2 == undefined)
        shouldBe(decodeFunctionName + "(" + encodeFunctionName
            + "(String.fromCharCode(" + c1 + ")))",
            "String.fromCharCode(" + c1 + ")");
    else
        shouldBe(decodeFunctionName + "(" + encodeFunctionName
            + "(String.fromCharCode(" + c1 + ") + String.fromCharCode(" + c2 + ")))",
            "String.fromCharCode(" + c1 + ") + String.fromCharCode(" + c2 + ")");
}

function checkWithFunctions(encodeFunction, decodeFunction)
{
    checkEncodeDecode(encodeFunction, decodeFunction, 0);
    checkEncodeDecode(encodeFunction, decodeFunction, 0xD7FF);

    checkEncodeDecode(encodeFunction, decodeFunction, 0xE000);
    checkEncodeDecode(encodeFunction, decodeFunction, 0xFFFD);
    checkEncodeDecode(encodeFunction, decodeFunction, 0xFFFE);
    checkEncodeDecode(encodeFunction, decodeFunction, 0xFFFF);

    checkEncodeException(encodeFunction, 0xDC00);
    checkEncodeException(encodeFunction, 0xDFFF);

    checkEncodeDecode(encodeFunction, decodeFunction, 0xD800, 0xDC00);
    checkEncodeDecode(encodeFunction, decodeFunction, 0xDBFF, 0xDC00);
    checkEncodeDecode(encodeFunction, decodeFunction, 0xD800, 0xDFFF);
    checkEncodeDecode(encodeFunction, decodeFunction, 0xDBFF, 0xDFFF);

    checkEncodeException(encodeFunction, 0xD800, 0);
    checkEncodeException(encodeFunction, 0xD800, 0xD7FF);
    checkEncodeException(encodeFunction, 0xD800, 0xD800);
    checkEncodeException(encodeFunction, 0xD800, 0xDBFF);
    checkEncodeException(encodeFunction, 0xD800, 0xE000);
    checkEncodeException(encodeFunction, 0xD800, 0xE000);
    checkEncodeException(encodeFunction, 0xD800, 0xFFFD);
    checkEncodeException(encodeFunction, 0xD800, 0xFFFE);
    checkEncodeException(encodeFunction, 0xD800, 0xFFFF);

    for (var charcode = 1; charcode < 0xD7FF; charcode += resolution)
        checkEncodeDecode(encodeFunction, decodeFunction, charcode);

    for (var charcode = 0xE001; charcode < 0xFFFD; charcode += resolution)
        checkEncodeDecode(encodeFunction, decodeFunction, charcode);

    for (var charcode = 0xDC01; charcode < 0xDFFF; charcode += resolution)
        checkEncodeException(encodeFunction, charcode);

    for (var charcode = 0xD801; charcode < 0xDBFF; charcode += resolution)
        checkEncodeDecode(encodeFunction, decodeFunction, charcode, 0xDC00);

    for (var charcode = 0xDC01; charcode < 0xDFFF; charcode += resolution)
        checkEncodeDecode(encodeFunction, decodeFunction, 0xD800, charcode);

    for (var charcode = 1; charcode < 0xDBFF; charcode += resolution)
        checkEncodeException(encodeFunction, 0xD800, charcode);

    for (var charcode = 0xE001; charcode < 0xFFFD; charcode += resolution)
        checkEncodeException(encodeFunction, 0xD800, charcode);
}

checkWithFunctions("encodeURI", "decodeURI");
checkWithFunctions("encodeURIComponent", "decodeURIComponent");
                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/eval-expected.txt                                       0000664 0000000 0000000 00000003262 14746647661 0023717 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS eval.length is 1
PASS eval('this') is this
PASS bx is 99
PASS cx is 99
PASS Skipping test for deprecated Object.prototype.eval()
PASS lotto() is 0
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/kde/eval.js                                                 0000664 0000000 0000000 00000004202 14746647661 0021710 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("eval.length", "1");
shouldBe("eval('this')", "this");

function MyObject() {
  this.x = 99;
}

eval("b = new MyObject();");
var bx = b.x   // rule out side effects of eval() in shouldBe() test function
shouldBe("bx", "99");


eval("var c = new MyObject();"); // the 'var' makes a difference
var cx = c.x;
shouldBe("cx", "99");

// KDE bug #45679
if (true.eval) {
  var o = { str:1 };
  shouldBe("o.eval('str')", "1");
  shouldBe("o.eval('this')", "this");
} else {
  testPassed("Skipping test for deprecated Object.prototype.eval()");
}

// problem from within khtml
function lotto() {
  // j must be accessible to eval()
  for (var j = 0; j < 1; j++)
    return eval('j');
}
shouldBe("lotto()", "0");
                                                                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/test/webkit/fast/js/kde/evil-n-expected.txt                                     0000664 0000000 0000000 00000003133 14746647661 0024157 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS (new Error()).message is ''
PASS ''.split(/.*/).length is 0
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/kde/evil-n.js                                               0000664 0000000 0000000 00000003066 14746647661 0022162 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("(new Error()).message", "''");

// the empty match isn't taken in account
shouldBe("''.split(/.*/).length", "0");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/test/webkit/fast/js/kde/exception_propagation-expected.txt                      0000664 0000000 0000000 00000006447 14746647661 0027401 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS func_ret_with_ex_func is 4
PASS func_ret_from_ex_throw_args is 4
PASS set_from_throw_func_args is 4
PASS set_from_func_throw_args is 4
PASS set_from_before_func_throw_args is 1
PASS function_param_order is 'abc'
PASS new_param_order is 'abc'
PASS elision_param_order is 'abc'
PASS comma_order is 'abc'
PASS OpEqEq_part1 is 1
PASS OpEqEq_part2 is 4
PASS OpNotEq_part1 is 1
PASS OpNotEq_part2 is 4
PASS OpStrEq_part1 is 1
PASS OpStrEq_part2 is 4
PASS OpStrNEq_part1 is 1
PASS OpStrNEq_part2 is 4
PASS OpLess_part1 is 1
PASS OpLess_part2 is 4
PASS OpLessEq_part1 is 1
PASS OpLessEq_part2 is 4
PASS OpGreater_part1 is 1
PASS OpGreater_part2 is 4
PASS OpGreaterEq_part1 is 1
PASS OpGreaterEq_part2 is 4
PASS OpAnd_part1 is 1
PASS OpAnd_part2 is 4
PASS OpOr_part1 is 1
PASS OpOr_part2 is 4
PASS OpBitAnd_part1 is 1
PASS OpBitAnd_part2 is 4
PASS OpBitXOr_part1 is 1
PASS OpBitXOr_part2 is 4
PASS OpBitOr_part1 is 1
PASS OpBitOr_part2 is 4
PASS OpLShift_part1 is 1
PASS OpLShift_part2 is 4
PASS OpRShift_part1 is 1
PASS OpRShift_part2 is 4
PASS OpURShift_part1 is 1
PASS OpURShift_part2 is 4
PASS OpInstanceOf_part1 is 1
PASS OpInstanceOf_part2 is 4
PASS set_from_if_stmt is 4
PASS set_from_if_else_stmt is 4
PASS set_from_else_in_if_else_stmt is 4
PASS comma_left is 1
PASS comma_left is 4
PASS vardecl_assign_throws is 4
PASS var_assign_before_throw_run is true
PASS var_assign_after_throw_run is false
PASS do_val is 5
PASS while_val is 4
PASS for_val_part1_throw2 is 1
PASS for_val_part1_throw3 is 1
PASS for_val_part2_throw1 is 4
PASS for_val_part2_throw3 is 1
PASS for_val_part3_throw1 is 4
PASS for_val_part3_throw2 is 4
PASS for_val_part1_throwbody is 1
PASS for_val_part2_throwbody is 1
PASS for_val_part3_throwbody is 4
PASS set_inside_with_throw is 4
PASS set_inside_with_cantconverttoobject is 4
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                         node-23.7.0/deps/v8/test/webkit/fast/js/kde/exception_propagation.js                                0000664 0000000 0000000 00000022160 14746647661 0025365 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
var global = this;
function myfunc() {
}
function throwex() {
  throw new Error("test exception");
}

//---------------------------
var func_ret_with_ex_func = 4;
try {
  func_ret_with_ex_func = throwex()();
}
catch (e) {
}
shouldBe("func_ret_with_ex_func", "4");

// ---------------------------------

var func_ret_from_ex_throw_args = 4;
try {
  func_ret_from_ex_throw_args = Math.abs(throwex());
}
catch (e) {
}
shouldBe("func_ret_from_ex_throw_args", "4");

// ---------------------------------

var set_from_throw_func_args = 4;
try {
  throwex()(set_from_throw_func_args = 1);
}
catch (e) {
}
shouldBe("set_from_throw_func_args","4");

// ---------------------------------

var set_from_func_throw_args = 4;
try {
  myfunc(throwex(), set_from_func_throw_args = 1);
}
catch (e) {
}
shouldBe("set_from_func_throw_args","4");

// ---------------------------------

var set_from_before_func_throw_args = 4;
try {
  myfunc(set_from_before_func_throw_args = 1, throwex());
}
catch (e) {
}
shouldBe("set_from_before_func_throw_args","1");

// ---------------------------------

// ### move to function.js
var function_param_order = "";
function aparam() {
  function_param_order += "a";
}
function bparam() {
  function_param_order += "b";
}
function cparam() {
  function_param_order += "c";
}
myfunc(aparam(),bparam(),cparam());
shouldBe("function_param_order","'abc'");

// ---------------------------------
// ### move to function.js
var new_param_order = "";
function anewparam() {
  new_param_order += "a";
}
function bnewparam() {
  new_param_order += "b";
}
function cnewparam() {
  new_param_order += "c";
}
new myfunc(anewparam(),bnewparam(),cnewparam());
shouldBe("new_param_order","'abc'");

// ---------------------------------
// ### move to function.js
var elision_param_order = "";
function aelision() {
  elision_param_order += "a";
}
function belision() {
  elision_param_order += "b";
}
function celision() {
  elision_param_order += "c";
}
[aelision(),belision(),celision()];
shouldBe("elision_param_order","'abc'");

// ---------------------------------
// ### move to function.js
var comma_order = "";
function acomma() {
  comma_order += "a";
}
function bcomma() {
  comma_order += "b";
}
function ccomma() {
  comma_order += "c";
}
acomma(),bcomma(),ccomma();
shouldBe("comma_order","'abc'");

// ---------------------------------

function checkOperator(op,name) {
  var code =(
    "global."+name+"_part1 = 4;\n"+
    "try {\n"+
    "  ("+name+"_part1 = 1) "+op+" throwex();\n"+
    "}\n"+
    "catch (e) {\n"+
    "}\n"+
    "shouldBe('"+name+"_part1', '1');\n"+
    "global."+name+"_part2 = 4;\n"+
    "try {\n"+
    "  throwex() "+op+" ("+name+"_part2 = 1);\n"+
    "}\n"+
    "catch (e) {\n"+
    "}\n"+
    "shouldBe('"+name+"_part2', '4');\n");
//  print("\n\n\n");
//  print(code);
  eval(code);
}

checkOperator("==","OpEqEq");
checkOperator("!=","OpNotEq");
checkOperator("===","OpStrEq");
checkOperator("!==","OpStrNEq");
// ### these generate a syntax error in mozilla - kjs should do the same (?)
//checkOperator("+=","OpPlusEq");
//checkOperator("-=","OpMinusEq");
//checkOperator("*=","OpMultEq");
//checkOperator("/=","OpDivEq");
//                  OpPlusPlus,
//                  OpMinusMinus,
checkOperator("<","OpLess");
checkOperator("<=","OpLessEq");
checkOperator(">","OpGreater");
checkOperator(">=","OpGreaterEq");
//checkOperator("&=","OpAndEq");
//checkOperator("^=","OpXOrEq");
//checkOperator("|=","OpOrEq");
//checkOperator("%=","OpModEq");
checkOperator("&&","OpAnd");
checkOperator("||","OpOr");
checkOperator("&","OpBitAnd");
checkOperator("^","OpBitXOr");
checkOperator("|","OpBitOr");
checkOperator("<<","OpLShift");
checkOperator(">>","OpRShift");
checkOperator(">>>","OpURShift");
//                  OpIn,
checkOperator("instanceof","OpInstanceOf");

// ---------------------------------
var set_from_if_stmt = 4;
try {
  if (throwex()) {
    set_from_if_stmt = 1;
  }
}
catch (e) {
}
shouldBe("set_from_if_stmt","4");

// ---------------------------------
var set_from_if_else_stmt = 4;
try {
  if (throwex()) {
    set_from_if_else_stmt = 1;
  }
  else {
    undefined;
  }
}
catch (e) {
}
shouldBe("set_from_if_else_stmt","4");

// ---------------------------------

var set_from_else_in_if_else_stmt = 4;
try {
  if (throwex()) {
    undefined;
  }
  else {
    set_from_else_in_if_else_stmt = 1;
  }
}
catch (e) {
}
shouldBe("set_from_else_in_if_else_stmt","4");

// ---------------------------------

var comma_left = 4;
try {
  comma_left = 1, throwex();
}
catch (e) {
}
shouldBe("comma_left","1");

// ---------------------------------

var comma_left = 4;
try {
   throwex(), comma_left = 1;
}
catch (e) {
}
shouldBe("comma_left","4");

var vardecl_assign_throws = 4;
try {
  var vardecl_assign_throws = throwex();
}
catch (e) {
}
shouldBe("vardecl_assign_throws","4");

// ---------------------------------

var var_assign_before_throw_run = false;
function var_assign_before_throw() {
  var_assign_before_throw_run = true;
  return 1;
}

var var_assign_after_throw_run = false;
function var_assign_after_throw() {
  var_assign_after_throw_run = true;
  return 1;
}

try {
  var var_assign1 = var_assign_before_throw(),
      var_assign2 = throwex(),
      var_assign1 = var_assign_before_throw();
}
catch (e) {
}
shouldBe("var_assign_before_throw_run","true");
shouldBe("var_assign_after_throw_run","false");

// ---------------------------------

var do_val = 4;
try {
  do {
    do_val++;
  }
  while (throwex());
}
catch (e) {
}
shouldBe("do_val","5");

// ---------------------------------
var while_val = 4;
try {
  while (throwex()) {
    while_val++;
  }
}
catch (e) {
}
shouldBe("while_val","4");

// ---------------------------------
var for_val_part1_throw2 = 4;
try {
  for (for_val_part1_throw2 = 1; throwex(); ) {
  }
}
catch (e) {
}
shouldBe("for_val_part1_throw2","1");

// ---------------------------------
var for_val_part1_throw3 = 4;
try {
  for (for_val_part1_throw3 = 1; ; throwex()) {
  }
}
catch (e) {
}
shouldBe("for_val_part1_throw3","1");

// ---------------------------------
var for_val_part2_throw1 = 4;
try {
  for (throwex(); for_val_part2_throw1 = 1; ) {
  }
}
catch (e) {
}
shouldBe("for_val_part2_throw1","4");

// ---------------------------------
var for_val_part2_throw3 = 4;
try {
  for (; for_val_part2_throw3 = 1; throwex()) {
  }
}
catch (e) {
}
shouldBe("for_val_part2_throw3","1");

// ---------------------------------
var for_val_part3_throw1 = 4;
try {
  for (throwex(); ; for_val_part3_throw1 = 1) {
  }
}
catch (e) {
}
shouldBe("for_val_part3_throw1","4");

// ---------------------------------
var for_val_part3_throw2 = 4;
try {
  for (; throwex(); for_val_part3_throw2 = 1) {
  }
}
catch (e) {
}
shouldBe("for_val_part3_throw2","4");

// ---------------------------------
var for_val_part1_throwbody = 4;
try {
  for (for_val_part1_throwbody = 1; ;) {
    throwex();
  }
}
catch (e) {
}
shouldBe("for_val_part1_throwbody","1");

// ---------------------------------
var for_val_part2_throwbody = 4;
try {
  for (; for_val_part2_throwbody = 1; ) {
    throwex();
  }
}
catch (e) {
}
shouldBe("for_val_part2_throwbody","1");

// ---------------------------------
var for_val_part3_throwbody = 4;
try {
  for (; ; for_val_part3_throwbody = 1) {
    throwex();
  }
}
catch (e) {
}
shouldBe("for_val_part3_throwbody","4");

// ---------------------------------
var set_inside_with_throw = 4;
try {
  with (throwex()) {
    set_inside_with_throw = 1;
  }
}
catch (e) {
}
shouldBe("set_inside_with_throw","4");

// ---------------------------------
var set_inside_with_cantconverttoobject = 4;
try {
  with (undefined) {
    print("FAIL. This message should not be displayed");
    set_inside_with_cantconverttoobject = 1;
  }
}
catch (e) {
}
shouldBe("set_inside_with_cantconverttoobject","4");
// ### test case, sw
                                                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/test/webkit/fast/js/kde/exceptions-expected.txt                                 0000664 0000000 0000000 00000003511 14746647661 0025146 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


Except a lot of errors. They should all be caught and lead to PASS
testing throw() .......... Passed
testing throw() .......... Passed
ReferenceError .......... Passed
error propagation in functions .......... Passed
catch
finally
Math() error .......... Passed
Abort while() on error .......... Passed
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/kde/exceptions.js                                           0000664 0000000 0000000 00000006264 14746647661 0023154 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
function kdeShouldBe(a, b, c)
{
  if ( a == b )
   debug(c+" .......... Passed");
  else
   debug(c+" .......... Failed");
}

function testThrow()
{
  var caught = false;
  try {
    throw 99;
  } catch (e) {
    caught = true;
  }
  kdeShouldBe(caught, true, "testing throw()");
}

// same as above but lacking a semicolon after throw
function testThrow2()
{
  var caught = false;
  try {
    throw 99
  } catch (e) {
    caught = true;
  }
  kdeShouldBe(caught, true, "testing throw()");
}

function testReferenceError()
{
  var err = "noerror";
  var caught = false;
  try {
    var dummy = nonexistent; // throws reference error
  } catch (e) {
    caught = true;
    err = e.name;
  }
  // test err
  kdeShouldBe(caught, true, "ReferenceError");
}

function testFunctionErrorHelper()
{
   var a = b;  // throws reference error
}

function testFunctionError()
{
  var caught = false;
  try {
    testFunctionErrorHelper();
  } catch (e) {
    caught = true;
  }
  kdeShouldBe(caught, true, "error propagation in functions");
}

function testMathFunctionError()
{
  var caught = false;
  try {
    Math();
  } catch (e) {
    debug("catch");
    caught = true;
  } finally {
    debug("finally");
  }
  kdeShouldBe(caught, true, "Math() error");
}

function testWhileAbortion()
{
  var caught = 0;
  try {
    while (a=b, 1) {         // "endless error" in condition
      ;
    }
  } catch (e) {
    caught++;
  }

  try {
    while (1) {
      var a = b;        // error in body
    }
  } catch (e) {
    caught++;
  }
  kdeShouldBe(caught, 2, "Abort while() on error");
}

debug("Except a lot of errors. They should all be caught and lead to PASS");
testThrow();
testThrow2();
testReferenceError();
testFunctionError();
testMathFunctionError();
testWhileAbortion();
                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/kde/func-decl-expected.txt                                  0000664 0000000 0000000 00000004344 14746647661 0024632 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Due to changes in ES2015 function hoisting semantics, this test is
# no longer really accurate and is expected to fail. test262 and mjsunit
# tests verify the correct semantics.
KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


FAIL Function declaration takes effect at entry: value has type undefined , not:function
PASS Decl not yet overwritten
PASS After assign (0)
PASS function decls have no execution content
PASS After assign #2 (0)
FAIL Decl already overwritten: value has type function , not:number
PASS After assign (1)
PASS function decls have no execution content
PASS After assign #2 (1)
FAIL Decl already overwritten: value has type function , not:number
PASS After assign (2)
PASS function decls have no execution content
PASS After assign #2 (2)
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/test/webkit/fast/js/kde/func-decl.js                                            0000664 0000000 0000000 00000004661 14746647661 0022632 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// We can't use normal shouldBe here, since they'd eval in the wrong context...
function shouldBeOfType(msg, val, type) {
  if (typeof(val) != type)
    testFailed(msg + ": value has type " + typeof(val) + " , not:" + type);
  else
    testPassed(msg);
}

function shouldBeVal(msg, val, expected) {
  if (val != expected)
    testFailed(msg + ": value is " + val + " , not:" + expected);
  else
    testPassed(msg);
}

f = "global";

function test() {
  try {
    shouldBeOfType("Function declaration takes effect at entry", f, "function");
  }
  catch (e) {
    testFailed("Scoping very broken!");
  }

  for (var i = 0; i < 3; ++i) {
    if (i == 0)
      shouldBeOfType("Decl not yet overwritten", f, 'function');
    else
      shouldBeOfType("Decl already overwritten", f, 'number');

    f = 3;
    shouldBeVal("After assign ("+i+")", f, 3);

    function f() {};
    shouldBeVal("function decls have no execution content", f, 3);

    f = 5;

    shouldBeVal("After assign #2 ("+i+")", f, 5);
  }
}

test();
                                                                               node-23.7.0/deps/v8/test/webkit/fast/js/kde/inbuilt_function_proto-expected.txt                     0000664 0000000 0000000 00000016431 14746647661 0027570 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS Object.prototype.toString.__proto__ is Function.prototype
PASS Object.prototype.valueOf.__proto__ is Function.prototype
PASS Array.prototype.toString.__proto__ is Function.prototype
PASS Array.prototype.toLocaleString.__proto__ is Function.prototype
PASS Array.prototype.concat.__proto__ is Function.prototype
PASS Array.prototype.join.__proto__ is Function.prototype
PASS Array.prototype.pop.__proto__ is Function.prototype
PASS Array.prototype.push.__proto__ is Function.prototype
PASS Array.prototype.reverse.__proto__ is Function.prototype
PASS Array.prototype.shift.__proto__ is Function.prototype
PASS Array.prototype.slice.__proto__ is Function.prototype
PASS Array.prototype.sort.__proto__ is Function.prototype
PASS Array.prototype.splice.__proto__ is Function.prototype
PASS Array.prototype.unshift.__proto__ is Function.prototype
PASS String.prototype.toString.__proto__ is Function.prototype
PASS String.prototype.valueOf.__proto__ is Function.prototype
PASS String.prototype.charAt.__proto__ is Function.prototype
PASS String.prototype.charCodeAt.__proto__ is Function.prototype
PASS String.prototype.indexOf.__proto__ is Function.prototype
PASS String.prototype.lastIndexOf.__proto__ is Function.prototype
PASS String.prototype.match.__proto__ is Function.prototype
PASS String.prototype.normalize.__proto__ is Function.prototype
PASS String.prototype.replace.__proto__ is Function.prototype
PASS String.prototype.search.__proto__ is Function.prototype
PASS String.prototype.slice.__proto__ is Function.prototype
PASS String.prototype.split.__proto__ is Function.prototype
PASS String.prototype.substr.__proto__ is Function.prototype
PASS String.prototype.substring.__proto__ is Function.prototype
PASS String.prototype.toLowerCase.__proto__ is Function.prototype
PASS String.prototype.toUpperCase.__proto__ is Function.prototype
PASS String.prototype.big.__proto__ is Function.prototype
PASS String.prototype.small.__proto__ is Function.prototype
PASS String.prototype.blink.__proto__ is Function.prototype
PASS String.prototype.bold.__proto__ is Function.prototype
PASS String.prototype.fixed.__proto__ is Function.prototype
PASS String.prototype.italics.__proto__ is Function.prototype
PASS String.prototype.strike.__proto__ is Function.prototype
PASS String.prototype.sub.__proto__ is Function.prototype
PASS String.prototype.sup.__proto__ is Function.prototype
PASS String.prototype.fontcolor.__proto__ is Function.prototype
PASS String.prototype.fontsize.__proto__ is Function.prototype
PASS String.prototype.anchor.__proto__ is Function.prototype
PASS String.prototype.link.__proto__ is Function.prototype
PASS Boolean.prototype.toString.__proto__ is Function.prototype
PASS Boolean.prototype.valueOf.__proto__ is Function.prototype
PASS Date.prototype.toString.__proto__ is Function.prototype
PASS Date.prototype.toUTCString.__proto__ is Function.prototype
PASS Date.prototype.toDateString.__proto__ is Function.prototype
PASS Date.prototype.toTimeString.__proto__ is Function.prototype
PASS Date.prototype.toLocaleString.__proto__ is Function.prototype
PASS Date.prototype.toLocaleDateString.__proto__ is Function.prototype
PASS Date.prototype.toLocaleTimeString.__proto__ is Function.prototype
PASS Date.prototype.valueOf.__proto__ is Function.prototype
PASS Date.prototype.getTime.__proto__ is Function.prototype
PASS Date.prototype.getFullYear.__proto__ is Function.prototype
PASS Date.prototype.getUTCFullYear.__proto__ is Function.prototype
PASS Date.prototype.toGMTString.__proto__ is Function.prototype
PASS Date.prototype.getMonth.__proto__ is Function.prototype
PASS Date.prototype.getUTCMonth.__proto__ is Function.prototype
PASS Date.prototype.getDate.__proto__ is Function.prototype
PASS Date.prototype.getUTCDate.__proto__ is Function.prototype
PASS Date.prototype.getDay.__proto__ is Function.prototype
PASS Date.prototype.getUTCDay.__proto__ is Function.prototype
PASS Date.prototype.getHours.__proto__ is Function.prototype
PASS Date.prototype.getUTCHours.__proto__ is Function.prototype
PASS Date.prototype.getMinutes.__proto__ is Function.prototype
PASS Date.prototype.getUTCMinutes.__proto__ is Function.prototype
PASS Date.prototype.getSeconds.__proto__ is Function.prototype
PASS Date.prototype.getUTCSeconds.__proto__ is Function.prototype
PASS Date.prototype.getMilliseconds.__proto__ is Function.prototype
PASS Date.prototype.getUTCMilliseconds.__proto__ is Function.prototype
PASS Date.prototype.getTimezoneOffset.__proto__ is Function.prototype
PASS Date.prototype.setTime.__proto__ is Function.prototype
PASS Date.prototype.setMilliseconds.__proto__ is Function.prototype
PASS Date.prototype.setUTCMilliseconds.__proto__ is Function.prototype
PASS Date.prototype.setSeconds.__proto__ is Function.prototype
PASS Date.prototype.setUTCSeconds.__proto__ is Function.prototype
PASS Date.prototype.setMinutes.__proto__ is Function.prototype
PASS Date.prototype.setUTCMinutes.__proto__ is Function.prototype
PASS Date.prototype.setHours.__proto__ is Function.prototype
PASS Date.prototype.setUTCHours.__proto__ is Function.prototype
PASS Date.prototype.setDate.__proto__ is Function.prototype
PASS Date.prototype.setUTCDate.__proto__ is Function.prototype
PASS Date.prototype.setMonth.__proto__ is Function.prototype
PASS Date.prototype.setUTCMonth.__proto__ is Function.prototype
PASS Date.prototype.setFullYear.__proto__ is Function.prototype
PASS Date.prototype.setUTCFullYear.__proto__ is Function.prototype
PASS Date.prototype.setYear.__proto__ is Function.prototype
PASS Date.prototype.getYear.__proto__ is Function.prototype
PASS Date.prototype.toGMTString.__proto__ is Function.prototype
PASS RegExp.prototype.exec.__proto__ is Function.prototype
PASS RegExp.prototype.test.__proto__ is Function.prototype
PASS RegExp.prototype.toString.__proto__ is Function.prototype
PASS Error.prototype.toString.__proto__ is Function.prototype
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                       node-23.7.0/deps/v8/test/webkit/fast/js/kde/inbuilt_function_proto.js                               0000664 0000000 0000000 00000017513 14746647661 0025570 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
shouldBe("Object.prototype.toString.__proto__","Function.prototype");
shouldBe("Object.prototype.valueOf.__proto__","Function.prototype");
shouldBe("Array.prototype.toString.__proto__","Function.prototype");
shouldBe("Array.prototype.toLocaleString.__proto__","Function.prototype");
shouldBe("Array.prototype.concat.__proto__","Function.prototype");
shouldBe("Array.prototype.join.__proto__","Function.prototype");
shouldBe("Array.prototype.pop.__proto__","Function.prototype");
shouldBe("Array.prototype.push.__proto__","Function.prototype");
shouldBe("Array.prototype.reverse.__proto__","Function.prototype");
shouldBe("Array.prototype.shift.__proto__","Function.prototype");
shouldBe("Array.prototype.slice.__proto__","Function.prototype");
shouldBe("Array.prototype.sort.__proto__","Function.prototype");
shouldBe("Array.prototype.splice.__proto__","Function.prototype");
shouldBe("Array.prototype.unshift.__proto__","Function.prototype");
shouldBe("String.prototype.toString.__proto__","Function.prototype");
shouldBe("String.prototype.valueOf.__proto__","Function.prototype");
shouldBe("String.prototype.charAt.__proto__","Function.prototype");
shouldBe("String.prototype.charCodeAt.__proto__","Function.prototype");
shouldBe("String.prototype.indexOf.__proto__","Function.prototype");
shouldBe("String.prototype.lastIndexOf.__proto__","Function.prototype");
shouldBe("String.prototype.match.__proto__","Function.prototype");
shouldBe("String.prototype.normalize.__proto__","Function.prototype");
shouldBe("String.prototype.replace.__proto__","Function.prototype");
shouldBe("String.prototype.search.__proto__","Function.prototype");
shouldBe("String.prototype.slice.__proto__","Function.prototype");
shouldBe("String.prototype.split.__proto__","Function.prototype");
shouldBe("String.prototype.substr.__proto__","Function.prototype");
shouldBe("String.prototype.substring.__proto__","Function.prototype");
shouldBe("String.prototype.toLowerCase.__proto__","Function.prototype");
shouldBe("String.prototype.toUpperCase.__proto__","Function.prototype");
shouldBe("String.prototype.big.__proto__","Function.prototype");
shouldBe("String.prototype.small.__proto__","Function.prototype");
shouldBe("String.prototype.blink.__proto__","Function.prototype");
shouldBe("String.prototype.bold.__proto__","Function.prototype");
shouldBe("String.prototype.fixed.__proto__","Function.prototype");
shouldBe("String.prototype.italics.__proto__","Function.prototype");
shouldBe("String.prototype.strike.__proto__","Function.prototype");
shouldBe("String.prototype.sub.__proto__","Function.prototype");
shouldBe("String.prototype.sup.__proto__","Function.prototype");
shouldBe("String.prototype.fontcolor.__proto__","Function.prototype");
shouldBe("String.prototype.fontsize.__proto__","Function.prototype");
shouldBe("String.prototype.anchor.__proto__","Function.prototype");
shouldBe("String.prototype.link.__proto__","Function.prototype");
shouldBe("Boolean.prototype.toString.__proto__","Function.prototype");
shouldBe("Boolean.prototype.valueOf.__proto__","Function.prototype");
shouldBe("Date.prototype.toString.__proto__","Function.prototype");
shouldBe("Date.prototype.toUTCString.__proto__","Function.prototype");
shouldBe("Date.prototype.toDateString.__proto__","Function.prototype");
shouldBe("Date.prototype.toTimeString.__proto__","Function.prototype");
shouldBe("Date.prototype.toLocaleString.__proto__","Function.prototype");
shouldBe("Date.prototype.toLocaleDateString.__proto__","Function.prototype");
shouldBe("Date.prototype.toLocaleTimeString.__proto__","Function.prototype");
shouldBe("Date.prototype.valueOf.__proto__","Function.prototype");
shouldBe("Date.prototype.getTime.__proto__","Function.prototype");
shouldBe("Date.prototype.getFullYear.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCFullYear.__proto__","Function.prototype");
shouldBe("Date.prototype.toGMTString.__proto__","Function.prototype");
shouldBe("Date.prototype.getMonth.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCMonth.__proto__","Function.prototype");
shouldBe("Date.prototype.getDate.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCDate.__proto__","Function.prototype");
shouldBe("Date.prototype.getDay.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCDay.__proto__","Function.prototype");
shouldBe("Date.prototype.getHours.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCHours.__proto__","Function.prototype");
shouldBe("Date.prototype.getMinutes.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCMinutes.__proto__","Function.prototype");
shouldBe("Date.prototype.getSeconds.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCSeconds.__proto__","Function.prototype");
shouldBe("Date.prototype.getMilliseconds.__proto__","Function.prototype");
shouldBe("Date.prototype.getUTCMilliseconds.__proto__","Function.prototype");
shouldBe("Date.prototype.getTimezoneOffset.__proto__","Function.prototype");
shouldBe("Date.prototype.setTime.__proto__","Function.prototype");
shouldBe("Date.prototype.setMilliseconds.__proto__","Function.prototype");
shouldBe("Date.prototype.setUTCMilliseconds.__proto__","Function.prototype");
shouldBe("Date.prototype.setSeconds.__proto__","Function.prototype");
shouldBe("Date.prototype.setUTCSeconds.__proto__","Function.prototype");
shouldBe("Date.prototype.setMinutes.__proto__","Function.prototype");
shouldBe("Date.prototype.setUTCMinutes.__proto__","Function.prototype");
shouldBe("Date.prototype.setHours.__proto__","Function.prototype");
shouldBe("Date.prototype.setUTCHours.__proto__","Function.prototype");
shouldBe("Date.prototype.setDate.__proto__","Function.prototype");
shouldBe("Date.prototype.setUTCDate.__proto__","Function.prototype");
shouldBe("Date.prototype.setMonth.__proto__","Function.prototype");
shouldBe("Date.prototype.setUTCMonth.__proto__","Function.prototype");
shouldBe("Date.prototype.setFullYear.__proto__","Function.prototype");
shouldBe("Date.prototype.setUTCFullYear.__proto__","Function.prototype");
shouldBe("Date.prototype.setYear.__proto__","Function.prototype");
shouldBe("Date.prototype.getYear.__proto__","Function.prototype");
shouldBe("Date.prototype.toGMTString.__proto__","Function.prototype");
shouldBe("RegExp.prototype.exec.__proto__","Function.prototype");
shouldBe("RegExp.prototype.test.__proto__","Function.prototype");
shouldBe("RegExp.prototype.toString.__proto__","Function.prototype");
shouldBe("Error.prototype.toString.__proto__","Function.prototype");
                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/kde/iteration-expected.txt                                  0000664 0000000 0000000 00000003237 14746647661 0024770 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS count is 10
PASS count is 5
PASS count is 10
PASS properties is 'a=11;b=22;'
PASS list is '[0]=100;[1]=101;'
PASS list is '123'
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/test/webkit/fast/js/kde/iteration.js                                            0000664 0000000 0000000 00000004537 14746647661 0022772 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
// 12.6.1
var count = 0;
do {
  count++;
} while (count < 10);
shouldBe("count", "10");

count = 0;
for (var i = 0; i < 10; i++) {
  if (i == 5)
    break;
  count++;
}
shouldBe("count", "5");

// 12.6.3
count = 0;
for (i = 0; i < 10; i++) {
  count++;
}
shouldBe("count", "10");

// 12.6.4
obj = new Object();
obj.a = 11;
obj.b = 22;

properties = "";
for ( prop in obj )
  properties += (prop + "=" + obj[prop] + ";");

shouldBe("properties", "'a=11;b=22;'");

// now a test verifying the order. not standardized but common.
obj.y = 33;
obj.x = 44;
properties = "";
for ( prop in obj )
  properties += prop;
// shouldBe("properties", "'abyx'");

arr = new Array;
arr[0] = 100;
arr[1] = 101;
list = "";
for ( var j in arr ) {
  list += "[" + j + "]=" + arr[j] + ";";
}
shouldBe("list","'[0]=100;[1]=101;'");

list = "";
for (var a = [1,2,3], length = a.length, i = 0; i < length; i++) {
  list += a[i];
}
shouldBe("list", "'123'");
                                                                                                                                                                 node-23.7.0/deps/v8/test/webkit/fast/js/kde/j-comment-3-expected.txt                                0000664 0000000 0000000 00000003032 14746647661 0025014 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/j-comment-3.js                                          0000664 0000000 0000000 00000002727 14746647661 0023024 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
<!-- HTML comment (not ECMA)
                                         node-23.7.0/deps/v8/test/webkit/fast/js/kde/j-comment-4-expected.txt                                0000664 0000000 0000000 00000003032 14746647661 0025015 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/j-comment-4.js                                          0000664 0000000 0000000 00000002735 14746647661 0023024 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
--> end of HTML comment (not ECMA)
                                   node-23.7.0/deps/v8/test/webkit/fast/js/kde/literals-expected.txt                                   0000664 0000000 0000000 00000003213 14746647661 0024603 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS x is 1
PASS 0x0 is 0
PASS 0xF is 15
PASS 0xFF is 255
PASS 01 is 1
PASS 010 is 8
PASS 09 is 9
PASS 019 is 19
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/test/webkit/fast/js/kde/literals.js                                             0000664 0000000 0000000 00000003323 14746647661 0022603 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

description("KDE JS Test");
var x = 0;
eval("\u0009 \u000B \u000C \u00A0x = 1;");
shouldBe("x", "1");

// hex (non-normative)
shouldBe("0x0", "0");
shouldBe("0xF", "15");
shouldBe("0xFF", "255");

// octal (non-normative)
shouldBe("01", "1");
shouldBe("010", "8");
shouldBe("09", "9");
shouldBe("019", "19");
                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/test/webkit/fast/js/kde/lval-exceptions-expected.txt                            0000664 0000000 0000000 00000004052 14746647661 0026103 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2013 the V8 project authors. All rights reserved.
# Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS function () { a = x; } threw exception ReferenceError: x is not defined.
PASS function () { x += "foo"; } threw exception ReferenceError: x is not defined.
PASS function () { b = a.x; } did not throw an exception
PASS function () { b = a['x']; } did not throw an exception
PASS function () { a['x'] += 'baz'; } did not throw an exception
PASS a['x'] is "undefinedbaz"
PASS function () { b = a.y; } did not throw an exception
PASS function () { a.y += 'glarch'; } did not throw an exception
PASS a['y'] is "undefinedglarch"
PASS successfullyParsed is true

TEST COMPLETE

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/test/webkit/fast/js/kde/lval-exceptions.js                                      0000664 0000000 0000000 00000005666 14746647661 0024115 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2013 the V8 project authors. All rights reserved.
// Copyright (C) 2005, 2006, 2007, 2008, 2009 Apple Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1.  Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 2.  Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMP