entry.name);
              }
            }
          }
        });
        this.missingEntries = [];
        for (let name of dummyEntryNames) {
          let tmpEntry = new Entry(0, name, 0, 0, 0, 0, 0, 0);
          tmpEntry.page = this.page;
          this.missingEntries.push(tmpEntry);
        };
      }
      forEach(fun) {
        // Show also all entries which are in at least one version.
        // Concatenate our real entries.
        if (this.missingEntries == null) {
          this._initializeMissingEntries();
        }
        let tmpEntries = this.missingEntries.concat(this.entries);

        // The compared entries are sorted by absolute impact.
        tmpEntries.sort((a, b) => {
          return b.time - a.time
        });
        tmpEntries.forEach(fun);
      }
      sort() {
        this.entries.sort((a, b) => {
          return b.time - a.time;
        });
      }
      cssClass() {
        if (this.page.total == this) return 'total';
        return '';
      }
      get isGroup() {
        return true
      }
      getVarianceForProperty(property) {
        let sum = 0;
        const key = property + 'Variance';
        this.entries.forEach((entry) => {
          const value = entry[key];
          sum += value * value;
        });
        return Math.sqrt(sum);
      }
      get timeVariancePercent() {
        if (this._time == 0) return 0;
        return this.getVarianceForProperty('time') / this._time * 100
      }
      get timeVariance() {
        return this.getVarianceForProperty('time')
      }
    }
    GroupedEntry.prefix = 'Group-';

    class UnclassifiedEntry extends GroupedEntry {
      constructor(page) {
        super(Group.groups.get('unclassified'));
        this.page = page;
        this._time = undefined;
        this._count = undefined;
      }
      add(entry) {
        console.log("Adding unclassified:", entry);
        this.entries.push(entry);
        entry.parent = this;
        return true;
      }
      forEachPageGroup(fun) {
        this.page.forEachGroup((group) => {
          if (group == this) return;
          if (group == this.page.total) return;
          fun(group);
        });
      }
      get time() {
        if (this._time === undefined) {
          this._time = this.page.total._time;
          this.forEachPageGroup((group) => {
            if (group.addsToTotal) this._time -= group._time;
          });
        }
        return this.getCompareWithBaseline(this._time, '_time');
      }
      get count() {
        if (this._count === undefined) {
          this._count = this.page.total._count;
          this.forEachPageGroup((group) => {
            this._count -= group._count;
          });
        }
        return this.getCompareWithBaseline(this._count, '_count');
      }
    }
  </script>
</head>

<body id="body" onmousemove="handleUpdatePopover(event)" onload="handleBodyLoad()" class="noDiff">
  <h1>Runtime Stats Komparator</h1>

  <section id="inputs" class="panel alwaysVisible">
    <input type="checkbox" id="inputsCheckbox" class="panelCloserInput">
    <label class="panelCloserLabel" for="inputsCheckbox">▼</label>
    <h2>Input/Output</h2>
    <div class="panelBody">
      <form name="fileForm" class="inline">
        <p class="inline">
          <label for="uploadInput">Load Files:</label>
          <input id="uploadInput" type="file" name="files" onchange="handleLoadFiles();" multiple
            accept=".json,.txt,.csv,.output">
        </p>
        <p class="inline">
          <label for="appendInput">Append Files:</label>
          <input id="appendInput" type="file" name="files" onchange="handleAppendFiles();" multiple
            accept=".json,.txt,.csv,.output">
        </p>
      </form>
      <p class="inline">
        <button onclick="handleCopyToClipboard()">Copy Table to Clipboard</button>
      </p>
    </div>
  </section>

  <section class="panel">
    <h2>Baseline Selector</h2>
    <div class="panel-body">
      Compare against baseline:&nbsp;<select id="baseline" onchange="handleSelectBaseline(this, event)"></select><br />
      <span style="color: #060">Green</span> a selected version performs
      better than the baseline.
    </div>
  </section>

  <section class="panel-group">
    <div id="versionSelector" class="panel">
      <input type="checkbox" checked id="versionSelectorCheckbox" class="panelCloserInput">
      <label class="panelCloserLabel" for="versionSelectorCheckbox">▼</label>
      <h2>Selected Versions</h2>
      <div class="panelBody">
        <ul></ul>
      </div>
    </div>

    <div id="pageSelector" class="panel">
      <input type="checkbox" checked id="pageSelectorCheckbox" class="panelCloserInput">
      <label class="panelCloserLabel" for="pageSelectorCheckbox">▼</label>
      <h2>Selected Pages</h2>
      <div class="panelBody">
        <ul></ul>
      </div>
    </div>

    <div id="groupSelector" class="panel">
      <input type="checkbox" checked id="groupSelectorCheckbox" class="panelCloserInput">
      <label class="panelCloserLabel" for="groupSelectorCheckbox">▼</label>
      <h2>Selected RCS Groups</h2>
      <div class="panelBody">
        <ul></ul>
      </div>
    </div>
  </section>

  <section id="view" class="panel">
    <input type="checkbox" id="tableViewCheckbox" class="panelCloserInput">
    <label class="panelCloserLabel" for="tableViewCheckbox">▼</label>
    <h2>RCS Table</h2>
    <div class="panelBody"></div>
  </section>

  <section class="panel-group">
    <div id="versionDetails" class="panel">
      <input type="checkbox" checked id="versionDetailCheckbox" class="panelCloserInput">
      <label class="panelCloserLabel" for="versionDetailCheckbox">▼</label>
      <h2><span>Compare Page Versions</span></h2>
      <div class="conten panelBody">
        <table class="versionDetailTable" onclick="handleSelectDetailRow(this, event);">
          <thead>
            <tr>
              <th class="version">Version&nbsp;</th>
              <th class="position">Pos.&nbsp;</th>
              <th class="value time">Time▴&nbsp;</th>
              <th class="value time">Percent&nbsp;</th>
              <th class="value count">Count&nbsp;</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>

    <div id="pageDetail" class="panel">
      <input type="checkbox" checked id="pageDetailCheckbox" class="panelCloserInput">
      <label class="panelCloserLabel" for="pageDetailCheckbox">▼</label>
      <h2>Page Comparison for <span></span></h2>
      <div class="panelBody">
        <table class="pageDetailTable" onclick="handleSelectDetailRow(this, event);">
          <thead>
            <tr>
              <th class="page">Page&nbsp;</th>
              <th class="value time">Time&nbsp;</th>
              <th class="value time">Percent▾&nbsp;</th>
              <th class="value time hideNoDiff">%/Entry&nbsp;</th>
              <th class="value count">Count&nbsp;</th>
            </tr>
          </thead>
          <tfoot>
            <tr>
              <td class="page">Total:</td>
              <td class="value time"></td>
              <td class="value time"></td>
              <td class="value time hideNoDiff"></td>
              <td class="value count"></td>
            </tr>
          </tfoot>
          <tbody></tbody>
        </table>
      </div>
    </div>

    <div id="impactView" class="panel">
      <input type="checkbox" checked id="impactViewCheckbox" class="panelCloserInput">
      <label class="panelCloserLabel" for="impactViewCheckbox">▼</label>
      <h2>Impact list for <span></span></h2>
      <div class="panelBody">
        <table class="pageDetailTable" onclick="handleSelectDetailRow(this, event);">
          <thead>
            <tr>
              <th class="page">Name&nbsp;</th>
              <th class="value time">Time&nbsp;</th>
              <th class="value time">Percent▾&nbsp;</th>
              <th class="">Top Pages</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </section>

  <section id="pageVersionGraph" class="panel">
    <input type="checkbox" id="pageVersionGraphCheckbox" class="panelCloserInput">
    <label class="panelCloserLabel" for="pageVersionGraphCheckbox">▼</label>
    <h2><span></span></h2>
    <div class="panelBody"></div>
  </section>

  <section id="pageGraph" class="panel">
    <input type="checkbox" id="pageGraphCheckbox" class="panelCloserInput">
    <label class="panelCloserLabel" for="pageGraphCheckbox">▼</label>
    <h2><span></span></h2>
    <div class="panelBody"></div>
  </section>

  <section id="versionGraph" class="panel">
    <input type="checkbox" id="versionGraphCheckbox" class="panelCloserInput">
    <label class="panelCloserLabel" for="versionGraphCheckbox">▼</label>
    <h2><span></span></h2>
    <div class="panelBody"></div>
  </section>

  <div id="column" class="column">
    <div class="header">
      <select class="version" onchange="handleSelectVersion(this, event);"></select>
      <select class="pageVersion" onchange="handleSelectPage(this, event);"></select>
    </div>
    <table class="list" onclick="handleSelectRow(this, event);">
      <thead>
        <tr>
          <th class="position">Pos.&nbsp;</th>
          <th class="name">Name&nbsp;</th>
          <th class="value time">Time&nbsp;</th>
          <th class="value time">Percent&nbsp;</th>
          <th class="value count">Count&nbsp;</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <section class="panel alwaysVisible">
    <h2>Instructions</h2>
    <div class="panelBody">
      <ol>
        <li>Build chrome.</li>
      </ol>
      <h3>Telemetry benchmark</h3>
      <ol>
        <li>Run <code>v8.browsing</code> benchmarks:
          <pre>$CHROMIUM_DIR/tools/perf/run_benchmark run v8.browsing_desktop \
            --browser=exact --browser-executable=$CHROMIUM_DIR/out/release/chrome \
            --story-filter='.*2020 ' \
            --also-run-disabled-tests
          </pre>
        </li>
        <li>Install <a href="https://stedolan.github.io/jq/">jq</a>.</li>
        <li>Convert the telemetry JSON files to callstats JSON file:
          <pre>
            $V8_DIR/tools/callstats-from-telemetry.sh $CHROMIUM_DIR/tools/perf/artifacts/run_XXXX
          </pre>
        </li>
        <li>Load the generated <code>out.json</code></li>
      </ol>
      <h3>Merged CSV from results.html</h3>
      <ol>
        <li>Open a results.html page for RCS-enabled benchmarks</li>
        <li>Select "Export merged CSV" in the toolbar</li>
        <li>Load the downloading .csv file normally in callstats.html</li>
      </ol>
      <h3>Aggregated raw txt output</h3>
      <ol>
        <li>Install scipy, e.g. <code>sudo aptitude install python-scipy</code>
        <li>Check out a known working version of webpagereply:
          <pre>git -C $CHROME_DIR/third_party/webpagereplay checkout 7dbd94752d1cde5536ffc623a9e10a51721eff1d</pre>
        </li>
        <li>Run <code>callstats.py</code> with a web-page-replay archive:
          <pre>$V8_DIR/tools/callstats.py run \
          --replay-bin=$CHROME_SRC/third_party/webpagereplay/replay.py \
          --replay-wpr=$INPUT_DIR/top25.wpr \
          --js-flags="" \
          --with-chrome=$CHROME_SRC/out/Release/chrome \
          --sites-file=$INPUT_DIR/top25.json</pre>
        </li>
        <li>Move results file to a subdirectory: <code>mkdir $VERSION_DIR; mv *.txt $VERSION_DIR</code></li>
        <li>Repeat from step 1 with a different configuration (e.g. <code>--js-flags="--nolazy"</code>).</li>
        <li>Create the final results file: <code>./callstats.py json $VERSION_DIR1 $VERSION_DIR2 > result.json</code>
        </li>
        <li>Use <code>results.json</code> on this site.</code>
      </ol>
    </div>
  </section>

  <div id="popover">
    <div class="popoverArrow"></div>
    <table>
      <tr>
        <td class="name" colspan="6"></td>
      </tr>
      <tr>
        <td>Page:</td>
        <td class="page name" colspan="6"></td>
      </tr>
      <tr>
        <td>Version:</td>
        <td class="version name" colspan="3"></td>
        <td class="compare version name" colspan="3"></td>
      </tr>
      <tr>
        <td>Time:</td>
        <td class="time"></td>
        <td>±</td>
        <td class="timeVariance"></td>
        <td class="compare time"></td>
        <td class="compare"> ± </td>
        <td class="compare timeVariance"></td>
      </tr>
      <tr>
        <td>Percent:</td>
        <td class="percent"></td>
        <td>±</td>
        <td class="percentVariance"></td>
        <td class="compare percent"></td>
        <td class="compare"> ± </td>
        <td class="compare percentVariance"></td>
      </tr>
      <tr>
        <td>Percent per Entry:</td>
        <td class="percentPerEntry"></td>
        <td colspan=2></td>
        <td class="compare percentPerEntry"></td>
        <td colspan=2></td>
      </tr>
      <tr>
        <td>Count:</td>
        <td class="count"></td>
        <td>±</td>
        <td class="countVariance"></td>
        <td class="compare count"></td>
        <td class="compare"> ± </td>
        <td class="compare countVariance"></td>
      </tr>
      <tr>
        <td>Overall Impact:</td>
        <td class="timeImpact"></td>
        <td>±</td>
        <td class="timePercentImpact"></td>
        <td class="compare timeImpact"></td>
        <td class="compare"> ± </td>
        <td class="compare timePercentImpact"></td>
      </tr>
    </table>
  </div>
</body>

</html>
                                                                                                                                                                                                                  node-23.7.0/deps/v8/tools/callstats.py                                                              0000775 0000000 0000000 00000070123 14746647661 0017557 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
'''
Usage: callstats.py [-h] <command> ...

Optional arguments:
  -h, --help  show this help message and exit

Commands:
  run         run chrome with --runtime-call-stats and generate logs
  stats       process logs and print statistics
  json        process logs from several versions and generate JSON
  help        help information

For each command, you can try ./runtime-call-stats.py help command.
'''

# for py2/py3 compatibility
from __future__ import print_function

import argparse
import json
import os
import re
import shutil
import subprocess
import sys
import tempfile
import numpy
from math import sqrt


MAX_NOF_RETRIES = 5


# Run benchmarks.

def print_command(cmd_args):
  def fix_for_printing(arg):
    m = re.match(r'^--([^=]+)=(.*)$', arg)
    if m and (' ' in m.group(2) or m.group(2).startswith('-')):
      arg = "--{}='{}'".format(m.group(1), m.group(2))
    elif ' ' in arg:
      arg = "'{}'".format(arg)
    return arg
  print(" ".join(map(fix_for_printing, cmd_args)))


def start_replay_server(args, sites, discard_output=True):
  with tempfile.NamedTemporaryFile(prefix='callstats-inject-', suffix='.js',
                                   mode='wt', delete=False) as f:
    injection = f.name
    generate_injection(f, sites, args.refresh)
  http_port = 4080 + args.port_offset
  https_port = 4443 + args.port_offset
  cmd_args = [
      args.replay_bin,
      "--port=%s" % http_port,
      "--ssl_port=%s" % https_port,
      "--no-dns_forwarding",
      "--use_closest_match",
      "--no-diff_unknown_requests",
      "--inject_scripts=deterministic.js,{}".format(injection),
      args.replay_wpr,
  ]
  print("=" * 80)
  print_command(cmd_args)
  if discard_output:
    with open(os.devnull, 'w') as null:
      server = subprocess.Popen(cmd_args, stdout=null, stderr=null)
  else:
    server = subprocess.Popen(cmd_args)
  print("RUNNING REPLAY SERVER: %s with PID=%s" % (args.replay_bin, server.pid))
  print("=" * 80)
  return {'process': server, 'injection': injection}


def stop_replay_server(server):
  print("SHUTTING DOWN REPLAY SERVER %s" % server['process'].pid)
  server['process'].terminate()
  os.remove(server['injection'])


def generate_injection(f, sites, refreshes=0):
  print("""\
(function() {
  var s = window.sessionStorage.getItem("refreshCounter");
  var refreshTotal = """, refreshes, """;
  var refreshCounter = s ? parseInt(s) : refreshTotal;
  var refreshId = refreshTotal - refreshCounter;
  if (refreshCounter > 0) {
    window.sessionStorage.setItem("refreshCounter", refreshCounter-1);
  }
  function match(url, item) {
    if ('regexp' in item) { return url.match(item.regexp) !== null };
    var url_wanted = item.url;
    /* Allow automatic redirections from http to https. */
    if (url_wanted.startsWith("http://") && url.startsWith("https://")) {
      url_wanted = "https://" + url_wanted.substr(7);
    }
    return url.startsWith(url_wanted);
  };
  function onLoad(url) {
    for (var item of sites) {
      if (!match(url, item)) continue;
      var timeout = 'timeline' in item ? 2000 * item.timeline
                  : 'timeout'  in item ? 1000 * (item.timeout - 3)
                  : 10000;
      console.log("Setting time out of " + timeout + " for: " + url);
      window.setTimeout(function() {
        console.log("Time is out for: " + url);
        var msg = "STATS: (" + refreshId + ") " + url;
        %GetAndResetRuntimeCallStats(1, msg);
        if (refreshCounter > 0) {
          console.log(
              "Refresh counter is " + refreshCounter + ", refreshing: " + url);
          window.location.reload();
        }
      }, timeout);
      return;
    }
    console.log("Ignoring: " + url);
  };
  var sites =
    """, json.dumps(sites), """;
  onLoad(window.location.href);
})();""", file=f)

def get_chrome_flags(js_flags, user_data_dir, arg_delimiter=""):
  return [
      "--no-default-browser-check",
      "--no-sandbox",
      "--disable-translate",
      "--enable-benchmarking",
      "--enable-stats-table",
      "--js-flags={}{}{}".format(arg_delimiter, js_flags, arg_delimiter),
      "--no-first-run",
      "--user-data-dir={}{}{}".format(arg_delimiter, user_data_dir,
                                      arg_delimiter),
      "--data-path={}{}{}".format(arg_delimiter,
          os.path.join(user_data_dir, 'content-shell-data'), arg_delimiter),
    ]

def get_chrome_replay_flags(args, arg_delimiter=""):
  http_port = 4080 + args.port_offset
  https_port = 4443 + args.port_offset
  return [
      "--host-resolver-rules=%sMAP *:80 localhost:%s, "  \
                              "MAP *:443 localhost:%s, " \
                              "EXCLUDE localhost%s" % (
                               arg_delimiter, http_port, https_port,
                               arg_delimiter),
      "--ignore-certificate-errors",
      "--disable-seccomp-sandbox",
      "--disable-web-security",
      "--reduce-security-for-testing",
      "--allow-insecure-localhost",
    ]

def run_site(site, domain, args, timeout=None):
  print("="*80)
  print("RUNNING DOMAIN %s" % domain)
  print("="*80)
  result_template = "{domain}#{count}.txt" if args.repeat else "{domain}.txt"
  count = 0
  if timeout is None: timeout = args.timeout
  if args.replay_wpr:
    timeout *= 1 + args.refresh
    timeout += 1
  retries_since_good_run = 0
  while count == 0 or args.repeat is not None and count < args.repeat:
    count += 1
    result = result_template.format(domain=domain, count=count)
    retries = 0
    while args.retries is None or retries < args.retries:
      retries += 1
      try:
        if args.user_data_dir:
          user_data_dir = args.user_data_dir
        else:
          user_data_dir = tempfile.mkdtemp(prefix="chr_")
        js_flags = "--runtime-call-stats"
        if args.replay_wpr: js_flags += " --allow-natives-syntax"
        if args.js_flags: js_flags += " " + args.js_flags
        chrome_flags = get_chrome_flags(js_flags, user_data_dir)
        if args.replay_wpr:
          chrome_flags += get_chrome_replay_flags(args)
        else:
          chrome_flags += [ "--single-process", ]
        if args.chrome_flags:
          chrome_flags += args.chrome_flags.split()
        cmd_args = [
            "timeout", str(timeout),
            args.with_chrome
        ] + chrome_flags + [ site ]
        print("- " * 40)
        print_command(cmd_args)
        print("- " * 40)
        with open(result, "wt") as f:
          with open(args.log_stderr or os.devnull, 'at') as err:
            status = subprocess.call(cmd_args, stdout=f, stderr=err)
        # 124 means timeout killed chrome, 0 means the user was bored first!
        # If none of these two happened, then chrome apparently crashed, so
        # it must be called again.
        if status != 124 and status != 0:
          print("CHROME CRASHED, REPEATING RUN");
          continue
        # If the stats file is empty, chrome must be called again.
        if os.path.isfile(result) and os.path.getsize(result) > 0:
          if args.print_url:
            with open(result, "at") as f:
              print(file=f)
              print("URL: {}".format(site), file=f)
          retries_since_good_run = 0
          break
        if retries_since_good_run > MAX_NOF_RETRIES:
          # Abort after too many retries, no point in ever increasing the
          # timeout.
          print("TOO MANY EMPTY RESULTS ABORTING RUN")
          return
        timeout += 2 ** retries_since_good_run
        retries_since_good_run += 1
        print("EMPTY RESULT, REPEATING RUN ({})".format(
            retries_since_good_run));
      finally:
        if not args.user_data_dir:
          shutil.rmtree(user_data_dir)


def read_sites_file(args):
  try:
    sites = []
    try:
      with open(args.sites_file, "rt") as f:
        for item in json.load(f):
          if 'timeout' not in item:
            # This is more-or-less arbitrary.
            item['timeout'] = int(1.5 * item['timeline'] + 7)
          if item['timeout'] > args.timeout: item['timeout'] = args.timeout
          sites.append(item)
    except ValueError:
      args.error("Warning: Could not read sites file as JSON, falling back to "
                 "primitive file")
      with open(args.sites_file, "rt") as f:
        for line in f:
          line = line.strip()
          if not line or line.startswith('#'): continue
          sites.append({'url': line, 'timeout': args.timeout})
    return sites
  except IOError as e:
    args.error("Cannot read from {}. {}.".format(args.sites_file, e.strerror))
    sys.exit(1)


def read_sites(args):
  # Determine the websites to benchmark.
  if args.sites_file:
    return read_sites_file(args)
  return [{'url': site, 'timeout': args.timeout} for site in args.sites]

def do_run(args):
  sites = read_sites(args)
  replay_server = start_replay_server(args, sites) if args.replay_wpr else None
  # Disambiguate domains, if needed.
  L = []
  domains = {}
  for item in sites:
    site = item['url']
    domain = None
    if args.domain:
      domain = args.domain
    elif 'domain' in item:
      domain = item['domain']
    else:
      m = re.match(r'^(https?://)?([^/]+)(/.*)?$', site)
      if not m:
        args.error("Invalid URL {}.".format(site))
        continue
      domain = m.group(2)
    entry = [site, domain, None, item['timeout']]
    if domain not in domains:
      domains[domain] = entry
    else:
      if not isinstance(domains[domain], int):
        domains[domain][2] = 1
        domains[domain] = 1
      domains[domain] += 1
      entry[2] = domains[domain]
    L.append(entry)
  try:
    # Run them.
    for site, domain, count, timeout in L:
      if count is not None: domain = "{}%{}".format(domain, count)
      print((site, domain, timeout))
      run_site(site, domain, args, timeout)
  finally:
    if replay_server:
      stop_replay_server(replay_server)


def do_run_replay_server(args):
  sites = read_sites(args)
  print("- " * 40)
  print("Available URLs:")
  for site in sites:
    print("    "+site['url'])
  print("- " * 40)
  print("Launch chromium with the following commands for debugging:")
  flags = get_chrome_flags("--runtime-call-stats --allow-natives-syntax",
                           "/var/tmp/`date +%s`", '"')
  flags += get_chrome_replay_flags(args, "'")
  print("    $CHROMIUM_DIR/out/Release/chrome " + (" ".join(flags)) + " <URL>")
  print("- " * 40)
  replay_server = start_replay_server(args, sites, discard_output=False)
  try:
    replay_server['process'].wait()
  finally:
    stop_replay_server(replay_server)


# Calculate statistics.

def statistics(data):
  # NOTE(V8:10269): imports moved here to mitigate the outage.
  import scipy
  import scipy.stats

  N = len(data)
  average = numpy.average(data)
  median = numpy.median(data)
  low = numpy.min(data)
  high= numpy.max(data)
  if N > 1:
    # evaluate sample variance by setting delta degrees of freedom (ddof) to
    # 1. The degree used in calculations is N - ddof
    stddev = numpy.std(data, ddof=1)
    # Get the endpoints of the range that contains 95% of the distribution
    t_bounds = scipy.stats.t.interval(0.95, N-1)
    #assert abs(t_bounds[0] + t_bounds[1]) < 1e-6
    # sum mean to the confidence interval
    ci = {
        'abs': t_bounds[1] * stddev / sqrt(N),
        'low': average + t_bounds[0] * stddev / sqrt(N),
        'high': average + t_bounds[1] * stddev / sqrt(N)
    }
  else:
    stddev = 0
    ci = { 'abs': 0, 'low': average, 'high': average }
  if abs(stddev) > 0.0001 and abs(average) > 0.0001:
    ci['perc'] = t_bounds[1] * stddev / sqrt(N) / average * 100
  else:
    ci['perc'] = 0
  return { 'samples': N, 'average': average, 'median': median,
           'stddev': stddev, 'min': low, 'max': high, 'ci': ci }


def add_category_total(entries, groups, category_prefix):
  group_data = { 'time': 0, 'count': 0 }
  for group_name, regexp in groups:
    if not group_name.startswith('Group-' + category_prefix): continue
    group_data['time'] += entries[group_name]['time']
    group_data['count'] += entries[group_name]['count']
  entries['Group-' + category_prefix + '-Total'] = group_data


def read_stats(path, domain, args):
  groups = [];
  if args.aggregate:
    groups = [
        ('Group-IC', re.compile(".*IC_.*")),
        ('Group-OptimizeBackground', re.compile(".*OptimizeBackground.*")),
        ('Group-Optimize',
         re.compile("StackGuard|.*Optimize.*|.*Deoptimize.*|Recompile.*")),
        ('Group-CompileBackground', re.compile("(.*CompileBackground.*)")),
        ('Group-Compile', re.compile("(^Compile.*)|(.*_Compile.*)")),
        ('Group-ParseBackground', re.compile(".*ParseBackground.*")),
        ('Group-Parse', re.compile(".*Parse.*")),
        ('Group-Callback', re.compile(".*Callback.*")),
        ('Group-API', re.compile(".*API.*")),
        ('Group-GC-Custom', re.compile("GC_Custom_.*")),
        ('Group-GC-Background', re.compile("GC_.*BACKGROUND.*")),
        ('Group-GC', re.compile("GC_.*|AllocateInTargetSpace")),
        ('Group-JavaScript', re.compile("JS_Execution")),
        ('Group-Runtime', re.compile(".*"))
    ]
  with open(path, "rt") as f:
    # Process the whole file and sum repeating entries.
    entries = { 'Sum': {'time': 0, 'count': 0} }
    for group_name, regexp in groups:
      entries[group_name] = { 'time': 0, 'count': 0 }
    for line in f:
      line = line.strip()
      # Discard headers and footers.
      if not line: continue
      if line.startswith("Runtime Function"): continue
      if line.startswith("===="): continue
      if line.startswith("----"): continue
      if line.startswith("URL:"): continue
      if line.startswith("STATS:"): continue
      # We have a regular line.
      fields = line.split()
      key = fields[0]
      time = float(fields[1].replace("ms", ""))
      count = int(fields[3])
      if key not in entries: entries[key] = { 'time': 0, 'count': 0 }
      entries[key]['time'] += time
      entries[key]['count'] += count
      # We calculate the sum, if it's not the "total" line.
      if key != "Total":
        entries['Sum']['time'] += time
        entries['Sum']['count'] += count
        for group_name, regexp in groups:
          if not regexp.match(key): continue
          entries[group_name]['time'] += time
          entries[group_name]['count'] += count
          break
    # Calculate the V8-Total (all groups except Callback)
    group_data = { 'time': 0, 'count': 0 }
    for group_name, regexp in groups:
      if group_name == 'Group-Callback': continue
      group_data['time'] += entries[group_name]['time']
      group_data['count'] += entries[group_name]['count']
    entries['Group-Total-V8'] = group_data
    # Calculate the Parse-Total, Compile-Total and Optimize-Total groups
    add_category_total(entries, groups, 'Parse')
    add_category_total(entries, groups, 'Compile')
    add_category_total(entries, groups, 'Optimize')
    # Append the sums as single entries to domain.
    for key in entries:
      if key not in domain: domain[key] = { 'time_list': [], 'count_list': [] }
      domain[key]['time_list'].append(entries[key]['time'])
      domain[key]['count_list'].append(entries[key]['count'])


def print_stats(S, args):
  # Sort by ascending/descending time average, then by ascending/descending
  # count average, then by ascending name.
  def sort_asc_func(item):
    return (item[1]['time_stat']['average'],
            item[1]['count_stat']['average'],
            item[0])
  def sort_desc_func(item):
    return (-item[1]['time_stat']['average'],
            -item[1]['count_stat']['average'],
            item[0])
  # Sorting order is in the commend-line arguments.
  sort_func = sort_asc_func if args.sort == "asc" else sort_desc_func
  # Possibly limit how many elements to print.
  L = [item for item in sorted(S.items(), key=sort_func)
       if item[0] not in ["Total", "Sum"]]
  N = len(L)
  if args.limit == 0:
    low, high = 0, N
  elif args.sort == "desc":
    low, high = 0, args.limit
  else:
    low, high = N-args.limit, N
  # How to print entries.
  def print_entry(key, value):
    def stats(s, units=""):
      conf = "{:0.1f}({:0.2f}%)".format(s['ci']['abs'], s['ci']['perc'])
      return "{:8.1f}{} +/- {:15s}".format(s['average'], units, conf)
    print("{:>50s}  {}  {}".format(
      key,
      stats(value['time_stat'], units="ms"),
      stats(value['count_stat'])
    ))
  # Print and calculate partial sums, if necessary.
  for i in range(low, high):
    print_entry(*L[i])
    if args.totals and args.limit != 0 and not args.aggregate:
      if i == low:
        partial = { 'time_list': [0] * len(L[i][1]['time_list']),
                    'count_list': [0] * len(L[i][1]['count_list']) }
      assert len(partial['time_list']) == len(L[i][1]['time_list'])
      assert len(partial['count_list']) == len(L[i][1]['count_list'])
      for j, v in enumerate(L[i][1]['time_list']):
        partial['time_list'][j] += v
      for j, v in enumerate(L[i][1]['count_list']):
        partial['count_list'][j] += v
  # Print totals, if necessary.
  if args.totals:
    print('-' * 80)
    if args.limit != 0 and not args.aggregate:
      partial['time_stat'] = statistics(partial['time_list'])
      partial['count_stat'] = statistics(partial['count_list'])
      print_entry("Partial", partial)
    print_entry("Sum", S["Sum"])
    print_entry("Total", S["Total"])


def extract_domain(filename):
  # Extract domain name: domain#123.txt or domain_123.txt
  match = re.match(r'^(.*?)[^a-zA-Z]?[0-9]+?.txt', filename)
  domain = match.group(1)
  return domain


def do_stats(args):
  domains = {}
  for path in args.logfiles:
    filename = os.path.basename(path)
    domain = extract_domain(filename)
    if domain not in domains: domains[domain] = {}
    read_stats(path, domains[domain], args)
  if args.aggregate:
    create_total_page_stats(domains, args)
  for i, domain in enumerate(sorted(domains)):
    if len(domains) > 1:
      if i > 0: print()
      print("{}:".format(domain))
      print('=' * 80)
    domain_stats = domains[domain]
    for key in domain_stats:
      domain_stats[key]['time_stat'] = \
          statistics(domain_stats[key]['time_list'])
      domain_stats[key]['count_stat'] = \
          statistics(domain_stats[key]['count_list'])
    print_stats(domain_stats, args)


# Create a Total page with all entries summed up.
def create_total_page_stats(domains, args):
  total = {}
  def sum_up(parent, key, other):
    sums = parent[key]
    for i, item in enumerate(other[key]):
      if i >= len(sums):
        sums.extend([0] * (i - len(sums) + 1))
      if item is not None:
        sums[i] += item
  # Exclude adwords and speedometer pages from aggrigate total, since adwords
  # dominates execution time and speedometer is measured elsewhere.
  excluded_domains = ['adwords.google.com', 'speedometer-angular',
                      'speedometer-jquery', 'speedometer-backbone',
                      'speedometer-ember', 'speedometer-vanilla'];
  # Sum up all the entries/metrics from all non-excluded domains
  for domain, entries in domains.items():
    if domain in excluded_domains:
      continue;
    for key, domain_stats in entries.items():
      if key not in total:
        total[key] = {}
        total[key]['time_list'] = list(domain_stats['time_list'])
        total[key]['count_list'] = list(domain_stats['count_list'])
      else:
        sum_up(total[key], 'time_list', domain_stats)
        sum_up(total[key], 'count_list', domain_stats)
  # Add a new "Total" page containing the summed up metrics.
  domains['Total'] = total

# Generate Raw JSON file.

def _read_logs(args):
  versions = {}
  for path in args.logdirs:
    if os.path.isdir(path):
      for root, dirs, files in os.walk(path):
        version = os.path.basename(root)
        if version not in versions: versions[version] = {}
        for filename in files:
          if filename.endswith(".txt"):
            domain = extract_domain(filename)
            if domain not in versions[version]: versions[version][domain] = {}
            read_stats(os.path.join(root, filename),
                       versions[version][domain], args)

  return versions

def do_raw_json(args):
  versions = _read_logs(args)

  for version, domains in versions.items():
    if args.aggregate:
      create_total_page_stats(domains, args)
    for domain, entries in domains.items():
      raw_entries = []
      for name, value in entries.items():
        # We don't want the calculated sum in the JSON file.
        if name == "Sum": continue
        raw_entries.append({
          'name': name,
          'duration': value['time_list'],
          'count': value['count_list'],
        })

      domains[domain] = raw_entries

  print(json.dumps(versions, separators=(',', ':')))


# Generate JSON file.

def do_json(args):
  versions = _read_logs(args)

  for version, domains in versions.items():
    if args.aggregate:
      create_total_page_stats(domains, args)
    for domain, entries in domains.items():
      stats = []
      for name, value in entries.items():
        # We don't want the calculated sum in the JSON file.
        if name == "Sum": continue
        entry = [name]
        for x in ['time_list', 'count_list']:
          s = statistics(entries[name][x])
          entry.append(round(s['average'], 1))
          entry.append(round(s['ci']['abs'], 1))
          entry.append(round(s['ci']['perc'], 2))
        stats.append(entry)
      domains[domain] = stats
  print(json.dumps(versions, separators=(',', ':')))


# Help.

def do_help(parser, subparsers, args):
  if args.help_cmd:
    if args.help_cmd in subparsers:
      subparsers[args.help_cmd].print_help()
    else:
      args.error("Unknown command '{}'".format(args.help_cmd))
  else:
    parser.print_help()


# Main program, parse command line and execute.

def coexist(*l):
  given = sum(1 for x in l if x)
  return given == 0 or given == len(l)

def main():
  parser = argparse.ArgumentParser()
  subparser_adder = parser.add_subparsers(title="commands", dest="command",
                                          metavar="<command>")
  subparsers = {}
  # Command: run.
  subparsers["run"] = subparser_adder.add_parser(
      "run", help="Replay websites and collect runtime stats data.")
  subparsers["run"].set_defaults(
      func=do_run, error=subparsers["run"].error)
  subparsers["run"].add_argument(
      "--chrome-flags", type=str, default="",
      help="specify additional chrome flags")
  subparsers["run"].add_argument(
      "--js-flags", type=str, default="",
      help="specify additional V8 flags")
  subparsers["run"].add_argument(
      "-u", "--user-data-dir", type=str, metavar="<path>",
      help="specify user data dir (default is temporary)")
  subparsers["run"].add_argument(
      "-c", "--with-chrome", type=str, metavar="<path>",
      default="/usr/bin/google-chrome",
      help="specify chrome executable to use")
  subparsers["run"].add_argument(
      "-r", "--retries", type=int, metavar="<num>",
      help="specify retries if website is down (default: forever)")
  subparsers["run"].add_argument(
      "--no-url", dest="print_url", action="store_false", default=True,
      help="do not include url in statistics file")
  subparsers["run"].add_argument(
      "--domain", type=str, default="",
      help="specify the output file domain name")
  subparsers["run"].add_argument(
      "-n", "--repeat", type=int, metavar="<num>",
      help="specify iterations for each website (default: once)")

  def add_replay_args(subparser):
    subparser.add_argument(
        "-k", "--refresh", type=int, metavar="<num>", default=0,
        help="specify refreshes for each iteration (default: 0)")
    subparser.add_argument(
        "--replay-wpr", type=str, metavar="<path>",
        help="use the specified web page replay (.wpr) archive")
    subparser.add_argument(
        "--replay-bin", type=str, metavar="<path>",
        help="specify the replay.py script typically located in " \
             "$CHROMIUM/src/third_party/webpagereplay/replay.py")
    subparser.add_argument(
        "-f", "--sites-file", type=str, metavar="<path>",
        help="specify file containing benchmark websites")
    subparser.add_argument(
        "-t", "--timeout", type=int, metavar="<seconds>", default=60,
        help="specify seconds before chrome is killed")
    subparser.add_argument(
        "-p", "--port-offset", type=int, metavar="<offset>", default=0,
        help="specify the offset for the replay server's default ports")
    subparser.add_argument(
        "-l", "--log-stderr", type=str, metavar="<path>",
        help="specify where chrome's stderr should go (default: /dev/null)")
    subparser.add_argument(
        "--sites", type=str, metavar="<URL>", nargs="*",
        help="specify benchmark website")
  add_replay_args(subparsers["run"])

  # Command: replay-server
  subparsers["replay"] = subparser_adder.add_parser(
      "replay", help="Run the replay server for debugging purposes")
  subparsers["replay"].set_defaults(
      func=do_run_replay_server, error=subparsers["replay"].error)
  add_replay_args(subparsers["replay"])

  # Command: stats.
  subparsers["stats"] = subparser_adder.add_parser(
      "stats", help="Analize the results file create by the 'run' command.")
  subparsers["stats"].set_defaults(
      func=do_stats, error=subparsers["stats"].error)
  subparsers["stats"].add_argument(
      "-l", "--limit", type=int, metavar="<num>", default=0,
      help="limit how many items to print (default: none)")
  subparsers["stats"].add_argument(
      "-s", "--sort", choices=["asc", "desc"], default="asc",
      help="specify sorting order (default: ascending)")
  subparsers["stats"].add_argument(
      "-n", "--no-total", dest="totals", action="store_false", default=True,
      help="do not print totals")
  subparsers["stats"].add_argument(
      "logfiles", type=str, metavar="<logfile>", nargs="*",
      help="specify log files to parse")
  subparsers["stats"].add_argument(
      "--aggregate", dest="aggregate", action="store_true", default=False,
      help="Create aggregated entries. Adds Group-* entries at the toplevel. " \
      "Additionally creates a Total page with all entries.")

  # Command: json.
  subparsers["json"] = subparser_adder.add_parser(
      "json", help="Collect results file created by the 'run' command into" \
          "a single json file.")
  subparsers["json"].set_defaults(
      func=do_json, error=subparsers["json"].error)
  subparsers["json"].add_argument(
      "logdirs", type=str, metavar="<logdir>", nargs="*",
      help="specify directories with log files to parse")
  subparsers["json"].add_argument(
      "--aggregate", dest="aggregate", action="store_true", default=False,
      help="Create aggregated entries. Adds Group-* entries at the toplevel. " \
      "Additionally creates a Total page with all entries.")

  # Command: raw-json.
  subparsers["raw-json"] = subparser_adder.add_parser(
      "raw-json", help="Collect raw results from 'run' command into" \
          "a single json file.")
  subparsers["raw-json"].set_defaults(
      func=do_raw_json, error=subparsers["json"].error)
  subparsers["raw-json"].add_argument(
      "logdirs", type=str, metavar="<logdir>", nargs="*",
      help="specify directories with log files to parse")
  subparsers["raw-json"].add_argument(
      "--aggregate", dest="aggregate", action="store_true", default=False,
      help="Create aggregated entries. Adds Group-* entries at the toplevel. " \
      "Additionally creates a Total page with all entries.")

  # Command: help.
  subparsers["help"] = subparser_adder.add_parser(
      "help", help="help information")
  subparsers["help"].set_defaults(
      func=lambda args: do_help(parser, subparsers, args),
      error=subparsers["help"].error)
  subparsers["help"].add_argument(
      "help_cmd", type=str, metavar="<command>", nargs="?",
      help="command for which to display help")

  # Execute the command.
  args = parser.parse_args()
  setattr(args, 'script_path', os.path.dirname(sys.argv[0]))
  if args.command == "run" and coexist(args.sites_file, args.sites):
    args.error("use either option --sites-file or site URLs")
    sys.exit(1)
  elif args.command == "run" and not coexist(args.replay_wpr, args.replay_bin):
    args.error("options --replay-wpr and --replay-bin must be used together")
    sys.exit(1)
  else:
    args.func(args)

if __name__ == "__main__":
  sys.exit(main())
                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/callstats_groups.py                                                       0000664 0000000 0000000 00000002130 14746647661 0021144 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2019 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import re

RUNTIME_CALL_STATS_GROUPS = [
    ('Group-IC', re.compile(".*IC_.*")),
    ('Group-OptimizeBackground', re.compile(".*OptimizeBackground.*")),
    ('Group-Optimize',
     re.compile("StackGuard|.*Optimize.*|.*Deoptimize.*|Recompile.*")),
    ('Group-CompileBackground', re.compile("(.*CompileBackground.*)")),
    ('Group-Compile', re.compile("(^Compile.*)|(.*_Compile.*)")),
    ('Group-ParseBackground', re.compile(".*ParseBackground.*")),
    ('Group-Parse', re.compile(".*Parse.*")),
    ('Group-Network-Data', re.compile(".*GetMoreDataCallback.*")),
    ('Group-Callback', re.compile(".*(Callback)|(Blink \+\+).*")),
    ('Group-API', re.compile(".*API.*")),
    ('Group-GC-Custom', re.compile("GC_Custom_.*")),
    ('Group-GC-Background', re.compile("GC_.*BACKGROUND.*")),
    ('Group-GC', re.compile("GC_.*|AllocateInTargetSpace")),
    ('Group-JavaScript', re.compile("JS_Execution")),
    ('Group-Runtime', re.compile(".*"))
]
                                                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/tools/cfi/                                                                      0000775 0000000 0000000 00000000000 14746647661 0015746 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/cfi/ignores.txt                                                           0000664 0000000 0000000 00000001524 14746647661 0020157 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # All std:: types
# This should be possible to remove, if/when we build against
# a statically linked libc++.
type:std::*

# Following entries Taken from chromium's tools/cfi/blacklist.txt
[cfi-icall]

######### Function pointers cast to incorrect type signatures

# libicu is currently compiled such that in libicu the 'UChar' type is a
# defined as a char16_t internally, but for the rest of chromium it's an
# unsigned short, causing mismatched type signatures for icalls to/from icu
# v8/src/intl.cc
fun:*LocaleConvertCase*

# PropertyCallbackArguments::Call methods cast function pointers
src:*src/api/api-arguments-inl.h

# v8 callback that casts argument template parameters
fun:*PendingPhantomCallback*Invoke*

# weak_callback_ is cast from original type.
fun:*GlobalHandles*PostGarbageCollectionProcessing*

fun:*InvokeAccessorGetterCallback*
                                                                                                                                                                            node-23.7.0/deps/v8/tools/check-inline-includes.sh                                                  0000775 0000000 0000000 00000001327 14746647661 0021704 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2015 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

v8_root=$(readlink -f $(dirname $BASH_SOURCE)/../)
directories="src test/cctest test/unittests"

for directory in $directories; do
  headers=$(find "$v8_root/$directory" -name '*.h' -not -name '*-inl.h')
  for header in $headers; do
    inline_header_include=$(grep '#include ".*-inl.h"' "$header")
    if [ -n "$inline_header_include" ]; then
      echo "The following non-inline header seems to include an inline header:"
      echo "  Header : $header"
      echo "  Include: $inline_header_include"
      echo
    fi
  done
done

echo "Kthxbye."
                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/check-static-initializers.sh                                              0000775 0000000 0000000 00000004672 14746647661 0022623 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2012 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of Google Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Checks that the number of compilation units having at least one static
# initializer in d8 matches the one defined below.

# Allow:
# _GLOBAL__I_000101
# _GLOBAL__sub_I_iostream.cpp
# _GLOBAL__sub_I_d8.cc
# The first two are needed to set up std::cin/cout/cerr before main() runs.
# See https://crbug.com/1177324 for more.
expected_static_init_count=3

v8_root=$(readlink -f $(dirname $BASH_SOURCE)/../)

if [ -n "$1" ] ; then
  d8="${v8_root}/$1"
else
  d8="${v8_root}/d8"
fi

if [ ! -f "$d8" ]; then
  echo "d8 binary not found: $d8"
  exit 1
fi

static_inits=$(nm "$d8" | grep _GLOBAL_ | grep _I_ | awk '{ print $NF; }')

static_init_count=$(echo "$static_inits" | wc -l)

if [ $static_init_count -gt $expected_static_init_count ]; then
  echo "Too many static initializers."
  echo "$static_inits"
  exit 1
else
  echo "Static initializer check passed ($static_init_count initializers)."
  exit 0
fi
                                                                      node-23.7.0/deps/v8/tools/check-unused-bailouts.sh                                                  0000775 0000000 0000000 00000001260 14746647661 0021741 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2015 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

v8_root=$(readlink -f $(dirname $BASH_SOURCE)/../)
bailouts=$(
    grep \
        --only-matching \
        --perl-regexp 'V\(\K(k[^,]*)' \
        -- "$v8_root/src/bailout-reason.h")

# Find bailouts which appear exactly once (in bailout-reason.h)
grep \
    --only-matching \
    --no-filename \
    --recursive \
    --word-regexp \
    --fixed-strings "$bailouts" \
    -- "$v8_root/src" "$v8_root/test/cctest" \
| sort \
| uniq -u \
| sed -e 's/.*/Bailout reason "&" seems to be unused./'

echo "Kthxbye."
                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/check-unused-symbols.sh                                                   0000775 0000000 0000000 00000001226 14746647661 0021611 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2018 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

v8_root=$(readlink -f $(dirname $BASH_SOURCE)/../)
symbols=$(
    grep \
        --only-matching \
        --perl-regexp 'V\(_, \K([^,\)]*)' \
        -- "$v8_root/src/heap-symbols.h")

# Find symbols which appear exactly once (in heap-symbols.h)
grep \
    --only-matching \
    --no-filename \
    --recursive \
    --fixed-strings "$symbols" \
    -- "$v8_root/src" "$v8_root/test/cctest" \
| sort \
| uniq -u \
| sed -e 's/.*/Heap symbol "&" seems to be unused./'

echo "Kthxbye."
                                                                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/                                                              0000775 0000000 0000000 00000000000 14746647661 0017605 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/OWNERS                                                        0000664 0000000 0000000 00000000030 14746647661 0020536 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        file:../../INFRA_OWNERS
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/                                                      0000775 0000000 0000000 00000000000 14746647661 0021272 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/BUILD.gn                                              0000664 0000000 0000000 00000001257 14746647661 0022464 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2017 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../../../gni/v8.gni")

if (v8_correctness_fuzzer) {
  copy("v8_correctness_fuzzer_resources") {
    sources = [
      "v8_commands.py",
      "v8_foozzie.py",
      "v8_foozzie_harness_adjust.js",
      "v8_fuzz_config.py",
      "v8_fuzz_experiments.json",
      "v8_fuzz_flags.json",
      "v8_mock.js",
      "v8_mock_archs.js",
      "v8_mock_webassembly.js",
      "v8_smoke_tests.js",
      "v8_suppressions.js",
      "v8_suppressions.py",
    ]
    outputs = [ "$root_out_dir/{{source_file_part}}" ]
  }
}
                                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/PRESUBMIT.py                                          0000664 0000000 0000000 00000001670 14746647661 0023222 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2018 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import json

# This line is 'magic' in that git-cl looks for it to decide whether to
# use Python3 instead of Python2 when running the code in this file.
USE_PYTHON3 = True


def _RunTests(input_api, output_api):
  return input_api.RunTests(
      input_api.canned_checks.GetUnitTestsInDirectory(
          input_api, output_api, '.', files_to_check=[r'.+_test\.py$'],
          run_on_python2=False))


def _CommonChecks(input_api, output_api):
  """Checks common to both upload and commit."""
  checks = [
    _RunTests,
  ]

  return sum([check(input_api, output_api) for check in checks], [])

def CheckChangeOnCommit(input_api, output_api):
  return _CommonChecks(input_api, output_api)

def CheckChangeOnUpload(input_api, output_api):
  return _CommonChecks(input_api, output_api)
                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/                                             0000775 0000000 0000000 00000000000 14746647661 0023103 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/baseline/                                    0000775 0000000 0000000 00000000000 14746647661 0024665 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/baseline/d8.py                               0000664 0000000 0000000 00000000647 14746647661 0025561 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# for py2/py3 compatibility
from __future__ import print_function

import sys

print("""
1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird error
        ^
3
unknown
""")

if '--bad-flag' in sys.argv:
  print('bad behavior')
                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/baseline/v8_build_config.json                0000664 0000000 0000000 00000000032 14746647661 0030614 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {"v8_current_cpu": "x64"}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build1/                                      0000775 0000000 0000000 00000000000 14746647661 0024263 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build1/d8.py                                 0000664 0000000 0000000 00000000543 14746647661 0025152 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# for py2/py3 compatibility
from __future__ import print_function

print("""
1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird other error
^
3
unknown
""")
                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build1/v8_build_config.json                  0000664 0000000 0000000 00000000032 14746647661 0030212 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {"v8_current_cpu": "x64"}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build2/                                      0000775 0000000 0000000 00000000000 14746647661 0024264 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build2/d8.py                                 0000664 0000000 0000000 00000000547 14746647661 0025157 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# for py2/py3 compatibility
from __future__ import print_function

print("""
1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird other error
^
3
not unknown
""")
                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build2/v8_build_config.json                  0000664 0000000 0000000 00000000032 14746647661 0030213 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {"v8_current_cpu": "x64"}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build3/                                      0000775 0000000 0000000 00000000000 14746647661 0024265 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build3/d8.py                                 0000664 0000000 0000000 00000000744 14746647661 0025157 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# for py2/py3 compatibility
from __future__ import print_function

import sys

print("""
1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird other error
^
3
unknown
""")

if '--bad-flag' in sys.argv:
  print('bad behavior')
if '--very-bad-flag' in sys.argv:
  print('very bad behavior')
                            node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/build3/v8_build_config.json                  0000664 0000000 0000000 00000000032 14746647661 0030214 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {"v8_current_cpu": "x86"}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/failure_output.txt                           0000664 0000000 0000000 00000002560 14746647661 0026716 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #
# V8 correctness failure
# V8 correctness configs: x64,ignition:x64,ignition_turbo
# V8 correctness sources: f60
# V8 correctness suppression: 
#
# CHECK
#
# Compared x64,ignition with x64,ignition_turbo
#
# Flags of x64,ignition:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345 --turbo-filter=~ --no-turbofan --no-sparkplug --liftoff --no-wasm-tier-up --no-maglev --flag1 --flag2=0
# Flags of x64,ignition_turbo:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345 --flag3
#
# Difference:
- unknown
+ not unknown
#
# Source file:
name/to/file.js
#
### Start of configuration x64,ignition:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird error
        ^
3
unknown


### End of configuration x64,ignition
#
### Start of configuration x64,ignition_turbo:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird other error
^
3
not unknown


### End of configuration x64,ignition_turbo

                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/failure_output_arch.txt                      0000664 0000000 0000000 00000002543 14746647661 0027714 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #
# V8 correctness failure
# V8 correctness configs: x64,ignition:x64,ignition_turbo
# V8 correctness sources: f60
# V8 correctness suppression: 
#
# CHECK
#
# Compared x64,ignition with x64,ignition_turbo
#
# Flags of x64,ignition:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345 --turbo-filter=~ --no-turbofan --no-sparkplug --liftoff --no-wasm-tier-up --no-maglev
# Flags of x64,ignition_turbo:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345 --bad-flag
#
# Difference:
+ bad behavior
#
# Source file:
name/to/file.js
#
### Start of configuration x64,ignition:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird error
        ^
3
unknown


### End of configuration x64,ignition
#
### Start of configuration x64,ignition_turbo:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird error
        ^
3
unknown

bad behavior

### End of configuration x64,ignition_turbo

                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/failure_output_second.txt                    0000664 0000000 0000000 00000002565 14746647661 0030256 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #
# V8 correctness failure
# V8 correctness configs: x64,ignition:ia32,ignition_turbo
# V8 correctness sources: f60
# V8 correctness suppression: 
#
# CHECK
#
# Compared x64,ignition with ia32,ignition_turbo
#
# Flags of x64,ignition:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345 --turbo-filter=~ --no-turbofan --no-sparkplug --liftoff --no-wasm-tier-up --no-maglev
# Flags of ia32,ignition_turbo:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345 --very-bad-flag
#
# Difference:
+ very bad behavior
#
# Source file:
name/to/file.js
#
### Start of configuration x64,ignition:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird error
        ^
3
unknown


### End of configuration x64,ignition
#
### Start of configuration ia32,ignition_turbo:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird other error
^
3
unknown

very bad behavior

### End of configuration ia32,ignition_turbo

                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/fuzz-123.js                                  0000664 0000000 0000000 00000000356 14746647661 0024746 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Empty test dummy.
print("js-mutation: start generated test case");
                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/testdata/smoke_test_output.txt                        0000664 0000000 0000000 00000002544 14746647661 0027446 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #
# V8 correctness failure
# V8 correctness configs: x64,ignition:x64,ignition_turbo
# V8 correctness sources: smoke test failed
# V8 correctness suppression: 
#
# CHECK
#
# Compared x64,ignition with x64,ignition_turbo
#
# Flags of x64,ignition:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345 --turbo-filter=~ --no-turbofan --no-sparkplug --liftoff --no-wasm-tier-up --no-maglev
# Flags of x64,ignition_turbo:
--correctness-fuzzer-suppressions --expose-gc --fuzzing --allow-natives-for-differential-fuzzing --invoke-weak-callbacks --omit-quit --harmony --js-staging --wasm-staging --no-wasm-async-compilation --wasm-max-mem-pages=32767 --suppress-asm-messages --random-seed 12345
#
# Difference:
- unknown
+ not unknown
#
# Source file:
name/to/file.js
#
### Start of configuration x64,ignition:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird error
        ^
3
unknown


### End of configuration x64,ignition
#
### Start of configuration x64,ignition_turbo:

1
v8-foozzie source: name/to/a/file.js
2
v8-foozzie source: name/to/file.js
  weird other error
^
3
not unknown


### End of configuration x64,ignition_turbo

                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/toolchain/                                            0000775 0000000 0000000 00000000000 14746647661 0023252 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/toolchain/BUILD.gn                                    0000664 0000000 0000000 00000001023 14746647661 0024433 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2019 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/toolchain/gcc_toolchain.gni")

# Fake toolchain to enable build output for a pointer-compression-comparison
# build in a nested build sub-directory. We toggle pointer compression when
# this toolchain is used in v8/BUILD.gn.
clang_toolchain("clang_x64_pointer_compression") {
  toolchain_args = {
    current_cpu = "x64"
    current_os = "linux"
  }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_commands.py                                        0000664 0000000 0000000 00000010475 14746647661 0024071 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Fork from commands.py and output.py in v8 test driver.

import os
import signal
import subprocess
import sys
from threading import Event, Timer

PYTHON3 = sys.version_info >= (3, 0)

# List of default flags passed to each d8 run.
DEFAULT_FLAGS = [
    '--correctness-fuzzer-suppressions',
    '--expose-gc',
    '--fuzzing',
    '--allow-natives-for-differential-fuzzing',
    '--invoke-weak-callbacks',
    '--omit-quit',
    '--harmony',
    '--js-staging',
    '--wasm-staging',
    '--no-wasm-async-compilation',
    # Limit wasm memory to just below 2GiB, to avoid differences between 32-bit
    # and 64-bit builds.
    '--wasm-max-mem-pages=32767',
    '--suppress-asm-messages',
]

BASE_PATH = os.path.dirname(os.path.abspath(__file__))

# List of files passed to each d8 run before the testcase.
DEFAULT_MOCK = os.path.join(BASE_PATH, 'v8_mock.js')

# Suppressions on JavaScript level for known issues.
JS_SUPPRESSIONS = os.path.join(BASE_PATH, 'v8_suppressions.js')

# Config-specific mock files.
ARCH_MOCKS = os.path.join(BASE_PATH, 'v8_mock_archs.js')
WEBASSEMBLY_MOCKS = os.path.join(BASE_PATH, 'v8_mock_webassembly.js')


def _startup_files(options):
  """Default files and optional config-specific mock files."""
  files = [DEFAULT_MOCK]
  if not options.skip_suppressions:
    files.append(JS_SUPPRESSIONS)
  if options.first.arch != options.second.arch:
    files.append(ARCH_MOCKS)
  # Mock out WebAssembly when comparing with jitless mode.
  if '--jitless' in options.first.flags + options.second.flags:
    files.append(WEBASSEMBLY_MOCKS)
  return files


class BaseException(Exception):
  """Used to abort the comparison workflow and print the given message."""
  def __init__(self, message):
    self.message = message


class PassException(BaseException):
  """Represents an early abort making the overall run pass."""
  pass


class FailException(BaseException):
  """Represents an early abort making the overall run fail."""
  pass


class Command(object):
  """Represents a configuration for running V8 multiple times with certain
  flags and files.
  """
  def __init__(self, options, label, executable, config_flags):
    self.label = label
    self.executable = executable
    self.config_flags = config_flags
    self.common_flags =  DEFAULT_FLAGS[:]
    self.common_flags.extend(['--random-seed', str(options.random_seed)])

    self.files = _startup_files(options)

  def run(self, testcase, timeout, verbose=False):
    """Run the executable with a specific testcase."""
    args = [self.executable] + self.flags + self.files + [testcase]
    if verbose:
      print('# Command line for %s comparison:' % self.label)
      print(' '.join(args))
    if self.executable.endswith('.py'):
      # Wrap with python in tests.
      args = [sys.executable] + args
    return Execute(
        args,
        cwd=os.path.dirname(os.path.abspath(testcase)),
        timeout=timeout,
    )

  @property
  def flags(self):
    return self.common_flags + self.config_flags


class Output(object):
  def __init__(self, exit_code, stdout_bytes, pid):
    self.exit_code = exit_code
    self.stdout_bytes = stdout_bytes
    self.pid = pid

  @property
  def stdout(self):
    if PYTHON3:
      try:
        return self.stdout_bytes.decode('utf-8')
      except UnicodeDecodeError:
        return self.stdout_bytes.decode('latin-1')
    return self.stdout_bytes

  def HasCrashed(self):
    return self.exit_code < 0


def Execute(args, cwd, timeout=None):
  popen_args = [c for c in args if c != ""]
  try:
    process = subprocess.Popen(
      args=popen_args,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE,
      cwd=cwd,
    )
  except Exception as e:
    sys.stderr.write("Error executing: %s\n" % popen_args)
    raise e

  timeout_event = Event()

  def kill_process():
    timeout_event.set()
    try:
      process.kill()
    except OSError:
      sys.stderr.write('Error: Process %s already ended.\n' % process.pid)

  timer = Timer(timeout, kill_process)
  timer.start()
  stdout_bytes, _ = process.communicate()
  timer.cancel()

  if timeout_event.is_set():
    raise PassException('# V8 correctness - T-I-M-E-O-U-T')

  return Output(
      process.returncode,
      stdout_bytes,
      process.pid,
  )
                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_foozzie.py                                         0000775 0000000 0000000 00000051133 14746647661 0023754 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""
V8 correctness fuzzer launcher script.
"""

# for py2/py3 compatibility
from __future__ import print_function

import argparse
import hashlib
import json
import os
import re
import sys
import traceback

from collections import namedtuple

from v8_commands import Command, FailException, PassException
import v8_suppressions

PYTHON3 = sys.version_info >= (3, 0)

CONFIGS = dict(
    default=[],
    ignition=[
        '--turbo-filter=~',
        '--no-turbofan',
        '--no-sparkplug',
        '--liftoff',
        '--no-wasm-tier-up',
        '--no-maglev',
    ],
    ignition_asm=[
        '--turbo-filter=~',
        '--no-turbofan',
        '--no-sparkplug',
        '--validate-asm',
        '--stress-validate-asm',
        '--no-maglev',
    ],
    ignition_eager=[
        '--turbo-filter=~',
        '--no-turbofan',
        '--no-sparkplug',
        '--no-lazy',
        '--no-lazy-inner-functions',
        '--no-maglev',
    ],
    ignition_no_ic=[
        '--turbo-filter=~',
        '--no-turbofan',
        '--no-sparkplug',
        '--liftoff',
        '--no-wasm-tier-up',
        '--no-use-ic',
        '--no-lazy-feedback-allocation',
        '--no-maglev',
    ],
    ignition_turbo=[],
    ignition_turbo_no_ic=[
        '--no-use-ic',
    ],
    ignition_turbo_opt=[
        '--always-turbofan',
        '--no-liftoff',
    ],
    ignition_turbo_opt_eager=[
        '--always-turbofan',
        '--no-lazy',
        '--no-lazy-inner-functions',
    ],
    ignition_maglev=[
        '--maglev',
        '--turbo-filter=~',
        '--no-turbofan',
    ],
    jitless=[
        '--jitless',
    ],
    slow_path=[
        '--force-slow-path',
    ],
    slow_path_opt=[
        '--always-turbofan',
        '--force-slow-path',
    ],
)

BASELINE_CONFIG = 'ignition'
DEFAULT_CONFIG = 'ignition_turbo'
DEFAULT_D8 = 'd8'

# Return codes.
RETURN_PASS = 0
RETURN_FAIL = 2

BASE_PATH = os.path.dirname(os.path.abspath(__file__))
SMOKE_TESTS = os.path.join(BASE_PATH, 'v8_smoke_tests.js')

# Timeout for one d8 run.
SMOKE_TEST_TIMEOUT_SEC = 1
TEST_TIMEOUT_SEC = 3

SUPPORTED_ARCHS = ['ia32', 'x64', 'arm', 'arm64']

FAILURE_HEADER_TEMPLATE = """#
# V8 correctness failure
# V8 correctness configs: %(configs)s
# V8 correctness sources: %(source_key)s
# V8 correctness suppression: %(suppression)s
"""

COMPACT_FAILURE_HEADER_TEMPLATE = """#
# V8 correctness failure
# V8 correctness sources: %(source_key)s
# V8 correctness suppression: %(suppression)s
"""

# Extended output for failure case. The 'CHECK' is for the minimizer.
DETAILS_TEMPLATE = """#
# CHECK
#
# Compared %(first_config_label)s with %(second_config_label)s
#
# Flags of %(first_config_label)s:
%(first_config_flags)s
# Flags of %(second_config_label)s:
%(second_config_flags)s
#
# Difference:
%(difference)s%(source_file_text)s
#
### Start of configuration %(first_config_label)s:
%(first_config_output)s
### End of configuration %(first_config_label)s
#
### Start of configuration %(second_config_label)s:
%(second_config_output)s
### End of configuration %(second_config_label)s
"""

FAILURE_TEMPLATE = FAILURE_HEADER_TEMPLATE + DETAILS_TEMPLATE
COMPACT_FAILURE_TEMPLATE = COMPACT_FAILURE_HEADER_TEMPLATE + DETAILS_TEMPLATE

SOURCE_FILE_TEMPLATE = """
#
# Source file:
%s"""


FUZZ_TEST_RE = re.compile(r'.*fuzz(-\d+\.js)')
SOURCE_RE = re.compile(r'print\("v8-foozzie source: (.*)"\);')

# The number of hex digits used from the hash of the original source file path.
# Keep the number small to avoid duplicate explosion.
SOURCE_HASH_LENGTH = 3
COMPACT_SOURCE_HASH_LENGTH = 2

# Placeholder string if no original source file could be determined.
ORIGINAL_SOURCE_DEFAULT = 'none'

# Placeholder string for failures from crash tests. If a failure is found with
# this signature, the matching sources should be moved to the mapping below.
ORIGINAL_SOURCE_CRASHTESTS = 'placeholder for CrashTests'

# Mapping from relative original source path (e.g. CrashTests/path/to/file.js)
# to a string key. Map to the same key for duplicate issues. The key should
# have more than 3 characters to not collide with other existing hashes.
# If a symptom from a particular original source file is known to map to a
# known failure, it can be added to this mapping. This should be done for all
# failures from CrashTests, as those by default map to the placeholder above.
KNOWN_FAILURES = {
  # Foo.caller with asm.js: https://crbug.com/1042556
  'CrashTests/4782147262545920/494.js': '.caller',
  'CrashTests/5637524389167104/01457.js': '.caller',
  'CrashTests/5703451898085376/02176.js': '.caller',
  'CrashTests/4846282433495040/04342.js': '.caller',
  'CrashTests/5712410200899584/04483.js': '.caller',
  'v8/test/mjsunit/regress/regress-105.js': '.caller',
  # Flaky issue that almost never repros.
  'CrashTests/5694376231632896/1033966.js': 'flaky',
}

# Flags that are already crashy during smoke tests should not be used.
DISALLOWED_FLAGS = [
  # Bails out when sorting, leading to differences in sorted output.
  '--multi-mapped-mock-allocator',

  # TODO(https://crbug.com/1393020): Changes the global object.
  '--harmony-struct',
]

# List pairs of flags that lead to contradictory cycles, i.e.:
# A -> no-C and B -> C makes (A, B) contradictory.
# No need to list other contradictions, they are omitted by the
# --fuzzing flag).
CONTRADICTORY_FLAGS = [
  ('--always-turbofan', '--jitless'),
  ('--assert-types', '--stress-concurrent-inlining'),
  ('--assert-types', '--stress-concurrent-inlining-attach-code'),
  ('--jitless', '--stress-concurrent-inlining'),
  ('--jitless', '--stress-concurrent-inlining-attach-code'),
]


def filter_flags(flags):
  """Drop disallowed and contradictory flags.

  The precedence for contradictions is right to left, similar to the V8 test
  framework.
  """
  result = []
  flags_to_drop = set(DISALLOWED_FLAGS)
  for flag in reversed(flags):
    if flag in flags_to_drop:
      continue
    result.append(flag)
    for contradicting_pair in CONTRADICTORY_FLAGS:
      if contradicting_pair[0] == flag:
        flags_to_drop.add(contradicting_pair[1])
      if contradicting_pair[1] == flag:
        flags_to_drop.add(contradicting_pair[0])
  return list(reversed(result))


def infer_arch(d8):
  """Infer the V8 architecture from the build configuration next to the
  executable.
  """
  with open(os.path.join(os.path.dirname(d8), 'v8_build_config.json')) as f:
    arch = json.load(f)['v8_current_cpu']
  arch = 'ia32' if arch == 'x86' else arch
  assert arch in SUPPORTED_ARCHS
  return arch


class ExecutionArgumentsConfig(object):
  def __init__(self, label):
    self.label = label

  def add_arguments(self, parser, default_config):
    def add_argument(flag_template, help_template, **kwargs):
      parser.add_argument(
          flag_template % self.label,
          help=help_template % self.label,
          **kwargs)

    add_argument(
        '--%s-config',
        '%s configuration',
        default=default_config)
    add_argument(
        '--%s-config-extra-flags',
        'additional flags passed to the %s run',
        action='append',
        default=[])
    add_argument(
        '--%s-d8',
        'optional path to %s d8 executable, '
        'default: bundled in the directory of this script',
        default=DEFAULT_D8)

  def make_options(self, options, default_config=None, default_d8=None):
    def get(name):
      return getattr(options, '%s_%s' % (self.label, name))

    config = default_config or get('config')
    assert config in CONFIGS

    d8 = default_d8 or get('d8')
    if not os.path.isabs(d8):
      d8 = os.path.join(BASE_PATH, d8)
    assert os.path.exists(d8)

    flags = filter_flags(CONFIGS[config] + get('config_extra_flags'))

    RunOptions = namedtuple('RunOptions', ['arch', 'config', 'd8', 'flags'])
    return RunOptions(infer_arch(d8), config, d8, flags)


class ExecutionConfig(object):
  def __init__(self, options, label):
    self.options = options
    self.label = label
    self.arch = getattr(options, label).arch
    self.config = getattr(options, label).config
    d8 = getattr(options, label).d8
    flags = getattr(options, label).flags
    self.command = Command(options, label, d8, flags)

    # Options for a fallback configuration only exist when comparing
    # different architectures.
    fallback_label = label + '_fallback'
    self.fallback = None
    if getattr(options, fallback_label, None):
      self.fallback = ExecutionConfig(options, fallback_label)

  @property
  def flags(self):
    return self.command.flags

  @property
  def is_error_simulation(self):
    return '--simulate-errors' in self.flags


def parse_args():
  first_config_arguments = ExecutionArgumentsConfig('first')
  second_config_arguments = ExecutionArgumentsConfig('second')

  parser = argparse.ArgumentParser()
  parser.add_argument(
    '--random-seed', type=int, required=True,
    help='random seed passed to both runs')
  parser.add_argument(
      '--skip-smoke-tests', default=False, action='store_true',
      help='skip smoke tests for testing purposes')
  parser.add_argument(
      '--skip-suppressions', default=False, action='store_true',
      help='skip suppressions to reproduce known issues')
  parser.add_argument(
      '--compact', default=False, action='store_true',
      help='use more compact error reporting with fewer duplicates')

  # Add arguments for each run configuration.
  first_config_arguments.add_arguments(parser, BASELINE_CONFIG)
  second_config_arguments.add_arguments(parser, DEFAULT_CONFIG)

  parser.add_argument('testcase', help='path to test case')
  options = parser.parse_args()

  # Ensure we have a test case.
  assert (os.path.exists(options.testcase) and
          os.path.isfile(options.testcase)), (
      'Test case %s doesn\'t exist' % options.testcase)

  options.first = first_config_arguments.make_options(options)
  options.second = second_config_arguments.make_options(options)
  options.default = second_config_arguments.make_options(
      options, default_config=DEFAULT_CONFIG)

  # Use fallback configurations only on diffrent architectures. In this
  # case we are going to re-test against the first architecture.
  if options.first.arch != options.second.arch:
    options.second_fallback = second_config_arguments.make_options(
        options, default_d8=options.first.d8)
    options.default_fallback = second_config_arguments.make_options(
        options, default_config=DEFAULT_CONFIG, default_d8=options.first.d8)

  # Ensure we make a valid comparison.
  if (options.first.d8 == options.second.d8 and
      options.first.config == options.second.config):
    parser.error('Need either executable or config difference.')

  return options


def get_meta_data(content):
  """Extracts original-source-file paths from test case content."""
  sources = []
  for line in content.splitlines():
    match = SOURCE_RE.match(line)
    if match:
      sources.append(match.group(1))
  return {'sources': sources}


def content_bailout(content, ignore_fun):
  """Print failure state and return if ignore_fun matches content."""
  bug = (ignore_fun(content) or '').strip()
  if bug:
    raise FailException(FAILURE_HEADER_TEMPLATE % dict(
        configs='', source_key='', suppression=bug))


def fail_bailout(output, ignore_by_output_fun):
  """Print failure state and return if ignore_by_output_fun matches output."""
  bug = (ignore_by_output_fun(output.stdout) or '').strip()
  if bug:
    raise FailException(FAILURE_HEADER_TEMPLATE % dict(
        configs='', source_key='', suppression=bug))


def format_difference(
    first_config, second_config,
    first_config_output, second_config_output,
    difference, source_key=None, source=None, compact=False):
  # The first three entries will be parsed by clusterfuzz. Format changes
  # will require changes on the clusterfuzz side.
  source_key = source_key or cluster_failures(source, compact)
  first_config_label = '%s,%s' % (first_config.arch, first_config.config)
  second_config_label = '%s,%s' % (second_config.arch, second_config.config)
  source_file_text = SOURCE_FILE_TEMPLATE % source if source else ''

  if PYTHON3:
    first_stdout = first_config_output.stdout
    second_stdout = second_config_output.stdout
  else:
    first_stdout = first_config_output.stdout.decode('utf-8', 'replace')
    second_stdout = second_config_output.stdout.decode('utf-8', 'replace')
    difference = difference.decode('utf-8', 'replace')

  template = COMPACT_FAILURE_TEMPLATE if compact else FAILURE_TEMPLATE
  text = (template % dict(
      configs='%s:%s' % (first_config_label, second_config_label),
      source_file_text=source_file_text,
      source_key=source_key,
      suppression='', # We can't tie bugs to differences.
      first_config_label=first_config_label,
      second_config_label=second_config_label,
      first_config_flags=' '.join(first_config.flags),
      second_config_flags=' '.join(second_config.flags),
      first_config_output=first_stdout,
      second_config_output=second_stdout,
      source=source,
      difference=difference,
  ))
  if PYTHON3:
    return text
  else:
    return text.encode('utf-8', 'replace')


def cluster_failures(source, compact, known_failures=None):
  """Returns a string key for clustering duplicate failures.

  Args:
    source: The original source path where the failure happened.
    compact: Whether to use compact source hashes.
    known_failures: Mapping from original source path to failure key.
  """
  known_failures = known_failures or KNOWN_FAILURES
  # No source known. Typical for manually uploaded issues. This
  # requires also manual issue creation.
  if not source:
    return ORIGINAL_SOURCE_DEFAULT
  # Source is known to produce a particular failure.
  if source in known_failures:
    return known_failures[source]
  # Subsume all other sources from CrashTests under one key. Otherwise
  # failures lead to new crash tests which in turn lead to new failures.
  if source.startswith('CrashTests'):
    return ORIGINAL_SOURCE_CRASHTESTS

  # We map all remaining failures to a short hash of the original source.
  long_key = hashlib.sha1(source.encode('utf-8')).hexdigest()
  hash_length = COMPACT_SOURCE_HASH_LENGTH if compact else SOURCE_HASH_LENGTH
  return long_key[:hash_length]


class RepeatedRuns(object):
  """Helper class for storing statistical data from repeated runs."""
  def __init__(self, test_case, timeout, verbose):
    self.test_case = test_case
    self.timeout = timeout
    self.verbose = verbose

    # Stores if any run has crashed or was simulated.
    self.has_crashed = False
    self.simulated = False

  def run(self, config):
    comparison_output = config.command.run(
        self.test_case, timeout=self.timeout, verbose=self.verbose)
    self.has_crashed = self.has_crashed or comparison_output.HasCrashed()
    self.simulated = self.simulated or config.is_error_simulation
    return comparison_output

  @property
  def crash_state(self):
    return '_simulated_crash_' if self.simulated else '_unexpected_crash_'


def run_comparisons(suppress, execution_configs, test_case, timeout,
                    verbose=True, ignore_crashes=True, source_key=None,
                    compact=False):
  """Runs different configurations and bails out on output difference.

  Args:
    suppress: The helper object for textual suppressions.
    execution_configs: Two or more configurations to run. The first one will be
        used as baseline to compare all others to.
    test_case: The test case to run.
    timeout: Timeout in seconds for one run.
    verbose: Prints the executed commands.
    ignore_crashes: Typically we ignore crashes during fuzzing as they are
        frequent. However, when running smoke tests we should not crash
        and immediately flag crashes as a failure.
    source_key: A fixed source key. If not given, it will be inferred from the
        output.
    compact: Whether to use compact failure output.
  """
  runner = RepeatedRuns(test_case, timeout, verbose)

  # Run the baseline configuration.
  baseline_config = execution_configs[0]
  baseline_output = runner.run(baseline_config)

  # Iterate over the remaining configurations, run and compare.
  for comparison_config in execution_configs[1:]:
    comparison_output = runner.run(comparison_config)
    difference, source = suppress.diff(baseline_output, comparison_output)

    if difference:
      # Only bail out due to suppressed output if there was a difference. If a
      # suppression doesn't show up anymore in the statistics, we might want to
      # remove it.
      fail_bailout(baseline_output, suppress.ignore_by_output)
      fail_bailout(comparison_output, suppress.ignore_by_output)

      # Check if a difference also occurs with the fallback configuration and
      # give it precedence. E.g. we always prefer x64 differences.
      if comparison_config.fallback:
        fallback_output = runner.run(comparison_config.fallback)
        fallback_difference, fallback_source = suppress.diff(
            baseline_output, fallback_output)
        if fallback_difference:
          fail_bailout(fallback_output, suppress.ignore_by_output)
          source = fallback_source
          comparison_config = comparison_config.fallback
          comparison_output = fallback_output
          difference = fallback_difference

      raise FailException(format_difference(
          baseline_config, comparison_config, baseline_output,
          comparison_output, difference, source_key, source, compact))

  if runner.has_crashed:
    if ignore_crashes:
      # Show if a crash has happened in one of the runs and no difference was
      # detected. This is only for the statistics during experiments.
      raise PassException('# V8 correctness - C-R-A-S-H')
    else:
      # Subsume simulated and unexpected crashes (e.g. during smoke tests)
      # with one failure state.
      raise FailException(FAILURE_HEADER_TEMPLATE % dict(
          configs='', source_key='', suppression=runner.crash_state))


def main():
  options = parse_args()
  suppress = v8_suppressions.get_suppression(options.skip_suppressions)

  # Static bailout based on test case content or metadata.
  kwargs = {}
  if PYTHON3:
    kwargs['encoding'] = 'utf-8'
  with open(options.testcase, 'r', **kwargs) as f:
    content = f.read()
  content_bailout(get_meta_data(content), suppress.ignore_by_metadata)
  content_bailout(content, suppress.ignore_by_content)

  # Prepare the baseline, default and a secondary configuration to compare to.
  # The default (turbofan) takes precedence as many of the secondary configs
  # are based on the turbofan config with additional parameters.
  execution_configs = [
    ExecutionConfig(options, 'first'),
    ExecutionConfig(options, 'default'),
    ExecutionConfig(options, 'second'),
  ]

  # First, run some fixed smoke tests in all configs to ensure nothing
  # is fundamentally wrong, in order to prevent bug flooding.
  if not options.skip_smoke_tests:
    run_comparisons(
        suppress, execution_configs,
        test_case=SMOKE_TESTS,
        timeout=SMOKE_TEST_TIMEOUT_SEC,
        verbose=False,
        # Don't accept crashes during smoke tests. A crash would hint at
        # a flag that might be incompatible or a broken test file.
        ignore_crashes=False,
        # Special source key for smoke tests so that clusterfuzz dedupes all
        # cases on this in case it's hit.
        source_key = 'smoke test failed',
        compact = options.compact,
    )

  # Second, run all configs against the fuzz test case.
  run_comparisons(
      suppress, execution_configs,
      test_case=options.testcase,
      timeout=TEST_TIMEOUT_SEC,
      compact = options.compact,
  )

  # TODO(machenbach): Figure out if we could also return a bug in case
  # there's no difference, but one of the line suppressions has matched -
  # and without the match there would be a difference.
  print('# V8 correctness - pass')
  return RETURN_PASS


if __name__ == "__main__":
  try:
    result = main()
  except FailException as e:
    print(e.message)
    result = RETURN_FAIL
  except PassException as e:
    print(e.message)
    result = RETURN_PASS
  except SystemExit:
    # Make sure clusterfuzz reports internal errors and wrong usage.
    # Use one label for all internal and usage errors.
    print(FAILURE_HEADER_TEMPLATE % dict(
        configs='', source_key='', suppression='wrong_usage'))
    result = RETURN_FAIL
  except MemoryError:
    # Running out of memory happens occasionally but is not actionable.
    print('# V8 correctness - pass')
    result = RETURN_PASS
  except Exception as e:
    print(FAILURE_HEADER_TEMPLATE % dict(
        configs='', source_key='', suppression='internal_error'))
    print('# Internal error: %s' % e)
    traceback.print_exc(file=sys.stdout)
    result = RETURN_FAIL

  sys.exit(result)
                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_foozzie_harness_adjust.js                          0000664 0000000 0000000 00000006135 14746647661 0027034 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2018 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Extensions to mjsunit and other test harnesses added between harness and
// fuzzing code.

try {
  // Scope for utility functions.
  (function() {
    // Same as in mjsunit.js.
    function classOf(object) {
      // Argument must not be null or undefined.
      var string = Object.prototype.toString.call(object);
      // String has format [object <ClassName>].
      return string.substring(8, string.length - 1);
    }

    // Override prettyPrinted with a version that also recusively prints object
    // properties (with a depth of 3).
    let origPrettyPrinted = prettyPrinted;
    prettyPrinted = function prettyPrinted(value, depth=3) {
      if (depth == 0) {
        return "...";
      }
      switch (typeof value) {
        case "object":
          if (value === null) return "null";
          var objectClass = classOf(value);
          switch (objectClass) {
            case "Object":
              var name = value.constructor.name;
              if (!name)
                name = "Object";
              return name + "{" + Object.keys(value).map(function(key, index) {
                return (
                    prettyPrinted(key, depth - 1) +
                    ": " +
                    prettyPrinted(value[key], depth - 1)
                );
              }).join(",")  + "}";
          }
      }
      // Fall through to original version for all other types.
      return origPrettyPrinted(value);
    }

    // We're not interested in stack traces.
    MjsUnitAssertionError = function MjsUnitAssertionError(message) {}
    MjsUnitAssertionError.prototype.toString = function () { return ""; };

    // Do more printing in assertions for more correctness coverage.
    failWithMessage = function failWithMessage(message) {
      print(prettyPrinted(message))
    }

    assertSame = function assertSame(expected, found, name_opt) {
      print(prettyPrinted(found));
    }

    assertNotSame = function assertNotSame(expected, found, name_opt) {
      print(prettyPrinted(found));
    }

    assertEquals = function assertEquals(expected, found, name_opt) {
      print(prettyPrinted(found));
    }

    assertNotEquals = function assertNotEquals(expected, found, name_opt) {
      print(prettyPrinted(found));
    }

    assertNull = function assertNull(value, name_opt) {
      print(prettyPrinted(value));
    }

    assertNotNull = function assertNotNull(value, name_opt) {
      print(prettyPrinted(value));
    }

    // Suppress optimization status as it leads to false positives.
    assertUnoptimized = function assertUnoptimized() {}

    assertOptimized = function assertOptimized() {}

    isNeverOptimize = function isNeverOptimize() {}

    isAlwaysOptimize = function isAlwaysOptimize() {}

    isInterpreted = function isInterpreted() {}

    isBaseline = function isBaseline() {}

    isUnoptimized = function isUnoptimized() {}

    isOptimized = function isOptimized() {}

    isTurboFanned = function isTurboFanned() {}
  })();
} catch(e) { }
                                                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_foozzie_test.py                                    0000775 0000000 0000000 00000034135 14746647661 0025016 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import random
import re
import subprocess
import sys
import unittest
import unittest.mock

import v8_commands
import v8_foozzie
import v8_fuzz_config
import v8_suppressions

try:
  basestring
except NameError:
  basestring = str

PYTHON3 = sys.version_info >= (3, 0)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
FOOZZIE = os.path.join(BASE_DIR, 'v8_foozzie.py')
TEST_DATA = os.path.join(BASE_DIR, 'testdata')

KNOWN_BUILDS = [
  'd8',
  'clang_x86/d8',
  'clang_x86_v8_arm/d8',
  'clang_x64_v8_arm64/d8',
  'clang_x64_pointer_compression/d8',
]


class ConfigTest(unittest.TestCase):
  def testExperiments(self):
    """Test integrity of probabilities and configs."""
    CONFIGS = v8_foozzie.CONFIGS
    EXPERIMENTS = v8_fuzz_config.FOOZZIE_EXPERIMENTS
    FLAGS = v8_fuzz_config.ADDITIONAL_FLAGS
    # Probabilities add up to 100%.
    first_is_int = lambda x: type(x[0]) == int
    assert all(map(first_is_int, EXPERIMENTS))
    assert sum(x[0] for x in EXPERIMENTS) == 100
    # Configs used in experiments are defined.
    assert all(map(lambda x: x[1] in CONFIGS, EXPERIMENTS))
    assert all(map(lambda x: x[2] in CONFIGS, EXPERIMENTS))
    # The last config item points to a known build configuration.
    assert all(map(lambda x: x[3] in KNOWN_BUILDS, EXPERIMENTS))
    # All flags have a probability.
    first_is_float = lambda x: type(x[0]) == float
    assert all(map(first_is_float, FLAGS))
    first_between_0_and_1 = lambda x: x[0] > 0 and x[0] < 1
    assert all(map(first_between_0_and_1, FLAGS))
    # Test consistent flags.
    second_is_string = lambda x: isinstance(x[1], basestring)
    assert all(map(second_is_string, FLAGS))
    # We allow spaces to separate more flags. We don't allow spaces in the flag
    # value.
    is_flag = lambda x: x.startswith('--')
    all_parts_are_flags = lambda x: all(map(is_flag, x[1].split()))
    assert all(map(all_parts_are_flags, FLAGS))

  def testConfig(self):
    """Smoke test how to choose experiments."""
    config = v8_fuzz_config.Config('foo', random.Random(42))
    experiments = [
      [25, 'ignition', 'jitless', 'd8'],
      [75, 'ignition', 'ignition', 'clang_x86/d8'],
    ]
    flags = [
      [0.1, '--flag'],
      [0.3, '--baz'],
      [0.3, '--foo --bar'],
    ]
    self.assertEqual(
        [
          '--first-config=ignition',
          '--second-config=jitless',
          '--second-d8=d8',
          '--second-config-extra-flags=--baz',
          '--second-config-extra-flags=--foo',
          '--second-config-extra-flags=--bar',
        ],
        config.choose_foozzie_flags(experiments, flags),
    )
    self.assertEqual(
        [
          '--first-config=ignition',
          '--second-config=jitless',
          '--second-d8=d8',
        ],
        config.choose_foozzie_flags(experiments, flags),
    )


class UnitTest(unittest.TestCase):
  def testCluster(self):
    crash_test_example_path = 'CrashTests/path/to/file.js'
    self.assertEqual(
        v8_foozzie.ORIGINAL_SOURCE_DEFAULT,
        v8_foozzie.cluster_failures('', compact=False))
    self.assertEqual(
        v8_foozzie.ORIGINAL_SOURCE_CRASHTESTS,
        v8_foozzie.cluster_failures(crash_test_example_path, compact=False))
    self.assertEqual(
        '_o_O_',
        v8_foozzie.cluster_failures(
            crash_test_example_path,
            compact=False,
            known_failures={crash_test_example_path: '_o_O_'}))
    self.assertEqual(
        '980',
        v8_foozzie.cluster_failures('v8/test/mjsunit/apply.js', compact=False))
    self.assertEqual(
        '98',
        v8_foozzie.cluster_failures('v8/test/mjsunit/apply.js', compact=True))

  def testDiff(self):
    def diff_fun(one, two, skip=False):
      suppress = v8_suppressions.get_suppression(skip)
      return suppress.diff_lines(one.splitlines(), two.splitlines())

    one = ''
    two = ''
    diff = None, None
    self.assertEqual(diff, diff_fun(one, two))

    one = 'a \n  b\nc();'
    two = 'a \n  b\nc();'
    diff = None, None
    self.assertEqual(diff, diff_fun(one, two))

    # Ignore line before caret and caret position.
    one = """
undefined
weird stuff
      ^
somefile.js: TypeError: suppressed message
  undefined
"""
    two = """
undefined
other weird stuff
            ^
somefile.js: TypeError: suppressed message
  undefined
"""
    diff = None, None
    self.assertEqual(diff, diff_fun(one, two))

    one = """
Still equal
Extra line
"""
    two = """
Still equal
"""
    diff = '- Extra line', None
    self.assertEqual(diff, diff_fun(one, two))

    one = """
Still equal
"""
    two = """
Still equal
Extra line
"""
    diff = '+ Extra line', None
    self.assertEqual(diff, diff_fun(one, two))

    one = """
undefined
somefile.js: TypeError: undefined is not a constructor
"""
    two = """
undefined
otherfile.js: TypeError: undefined is not a constructor
"""
    diff = """- somefile.js: TypeError: undefined is not a constructor
+ otherfile.js: TypeError: undefined is not a constructor""", None
    self.assertEqual(diff, diff_fun(one, two))

    # Test that skipping suppressions works.
    one = """
v8-foozzie source: foo
weird stuff
      ^
"""
    two = """
v8-foozzie source: foo
other weird stuff
            ^
"""
    self.assertEqual((None, 'foo'), diff_fun(one, two))
    diff = ('-       ^\n+             ^', 'foo')
    self.assertEqual(diff, diff_fun(one, two, skip=True))

  def testOutputCapping(self):
    def output(stdout, is_crash):
      exit_code = -1 if is_crash else 0
      return v8_commands.Output(
          exit_code=exit_code, stdout_bytes=stdout.encode('utf-8'), pid=0)

    def check(stdout1, stdout2, is_crash1, is_crash2, capped_lines1,
              capped_lines2):
      output1 = output(stdout1, is_crash1)
      output2 = output(stdout2, is_crash2)
      self.assertEqual(
          (capped_lines1.encode('utf-8'), capped_lines2.encode('utf-8')),
          v8_suppressions.get_output_capped(output1, output2))

    # No capping, already equal.
    check('1\n2', '1\n2', True, True, '1\n2', '1\n2')
    # No crash, no capping.
    check('1\n2', '1\n2\n3', False, False, '1\n2', '1\n2\n3')
    check('1\n2\n3', '1\n2', False, False, '1\n2\n3', '1\n2')
    # Cap smallest if all runs crash.
    check('1\n2', '1\n2\n3', True, True, '1\n2', '1\n2')
    check('1\n2\n3', '1\n2', True, True, '1\n2', '1\n2')
    check('1\n2', '1\n23', True, True, '1\n2', '1\n2')
    check('1\n23', '1\n2', True, True, '1\n2', '1\n2')
    # Cap the non-crashy run.
    check('1\n2\n3', '1\n2', False, True, '1\n2', '1\n2')
    check('1\n2', '1\n2\n3', True, False, '1\n2', '1\n2')
    check('1\n23', '1\n2', False, True, '1\n2', '1\n2')
    check('1\n2', '1\n23', True, False, '1\n2', '1\n2')
    # The crashy run has more output.
    check('1\n2\n3', '1\n2', True, False, '1\n2\n3', '1\n2')
    check('1\n2', '1\n2\n3', False, True, '1\n2', '1\n2\n3')
    check('1\n23', '1\n2', True, False, '1\n23', '1\n2')
    check('1\n2', '1\n23', False, True, '1\n2', '1\n23')
    # Keep output difference when capping.
    check('1\n2', '3\n4\n5', True, True, '1\n2', '3\n4')
    check('1\n2\n3', '4\n5', True, True, '1\n2', '4\n5')
    check('12', '345', True, True, '12', '34')
    check('123', '45', True, True, '12', '45')

  @unittest.mock.patch('v8_foozzie.DISALLOWED_FLAGS', ['A'])
  @unittest.mock.patch('v8_foozzie.CONTRADICTORY_FLAGS',
                       [('B', 'C'), ('B', 'D')])
  def testFilterFlags(self):
    def check(input_flags, expected):
      self.assertEqual(expected, v8_foozzie.filter_flags(input_flags))

    check([], [])
    check(['A'], [])
    check(['D', 'A'], ['D'])
    check(['A', 'D'], ['D'])
    check(['C', 'D'], ['C', 'D'])
    check(['E', 'C', 'D', 'F'], ['E', 'C', 'D', 'F'])
    check(['B', 'D'], ['D'])
    check(['D', 'B'], ['B'])
    check(['C', 'B', 'D'], ['C', 'D'])
    check(['E', 'C', 'A', 'F', 'B', 'G', 'D'], ['E', 'C', 'F', 'G', 'D'])


def cut_verbose_output(stdout, n_comp):
  # This removes the first lines containing d8 commands of `n_comp` comparison
  # runs.
  return '\n'.join(stdout.split('\n')[n_comp * 2:])


def run_foozzie(second_d8_dir, *extra_flags, **kwargs):
  second_config = 'ignition_turbo'
  if 'second_config' in kwargs:
    second_config = 'jitless'
  kwargs = {}
  if PYTHON3:
    kwargs['text'] = True
  return subprocess.check_output([
    sys.executable, FOOZZIE,
    '--random-seed', '12345',
    '--first-d8', os.path.join(TEST_DATA, 'baseline', 'd8.py'),
    '--second-d8', os.path.join(TEST_DATA, second_d8_dir, 'd8.py'),
    '--first-config', 'ignition',
    '--second-config', second_config,
    os.path.join(TEST_DATA, 'fuzz-123.js'),
  ] + list(extra_flags), **kwargs)


def expected_output(file_name):
  with open(os.path.join(TEST_DATA, file_name)) as f:
    return f.read()


class SystemTest(unittest.TestCase):
  """This tests the whole correctness-fuzzing harness with fake build
  artifacts.

  Overview of fakes:
    baseline: Example foozzie output including a syntax error.
    build1: Difference to baseline is a stack trace difference expected to
            be suppressed.
    build2: Difference to baseline is a non-suppressed output difference
            causing the script to fail.
    build3: As build1 but with an architecture difference as well.
  """
  def testSyntaxErrorDiffPass(self):
    stdout = run_foozzie('build1', '--skip-smoke-tests')
    self.assertEqual('# V8 correctness - pass\n',
                     cut_verbose_output(stdout, 3))
    # Default comparison includes suppressions.
    self.assertIn('v8_suppressions.js', stdout)
    # Default comparison doesn't include any specific mock files.
    self.assertNotIn('v8_mock_archs.js', stdout)
    self.assertNotIn('v8_mock_webassembly.js', stdout)

  def _testDifferentOutputFail(self, expected, *args):
    with self.assertRaises(subprocess.CalledProcessError) as ctx:
      run_foozzie('build2', '--skip-smoke-tests',
                  '--first-config-extra-flags=--flag1',
                  '--first-config-extra-flags=--flag2=0',
                  '--second-config-extra-flags=--flag3', *args)
    e = ctx.exception
    self.assertEqual(v8_foozzie.RETURN_FAIL, e.returncode)
    self.assertEqual(expected, cut_verbose_output(e.output, 2))

  def testDifferentOutputFail(self):
    self._testDifferentOutputFail(expected_output('failure_output.txt'))

  def testFailCompact(self):
    # Compact output drops the config line and uses a shorter hash.
    compact_output = expected_output('failure_output.txt')
    compact_output = re.sub(
        r'# V8 correctness configs: .*\n', '', compact_output)
    compact_output = re.sub(
        r'sources: f60', 'sources: f6', compact_output)
    self._testDifferentOutputFail(compact_output, '--compact')

  def testSmokeTest(self):
    with self.assertRaises(subprocess.CalledProcessError) as ctx:
      run_foozzie('build2')
    e = ctx.exception
    self.assertEqual(v8_foozzie.RETURN_FAIL, e.returncode)
    self.assertEqual(expected_output('smoke_test_output.txt'), e.output)

  def testDifferentArch(self):
    """Test that the architecture-specific mocks are passed to both runs when
    we use executables with different architectures.
    """
    # Build 3 simulates x86, while the baseline is x64.
    stdout = run_foozzie('build3', '--skip-smoke-tests')
    lines = stdout.split('\n')
    # TODO(machenbach): Don't depend on the command-lines being printed in
    # particular lines.
    self.assertIn('v8_mock_archs.js', lines[1])
    self.assertIn('v8_mock_archs.js', lines[3])

  def testDifferentArchFailFirst(self):
    """Test that we re-test against x64. This tests the path that also fails
    on x64 and then reports the error as x64.
    """
    with open(os.path.join(TEST_DATA, 'failure_output_arch.txt')) as f:
      expected_output = f.read()
    # Build 3 simulates x86 and produces a difference on --bad-flag, but
    # the baseline build shows the same difference when --bad-flag is passed.
    with self.assertRaises(subprocess.CalledProcessError) as ctx:
      run_foozzie('build3', '--skip-smoke-tests',
                  '--second-config-extra-flags=--bad-flag')
    e = ctx.exception
    self.assertEqual(v8_foozzie.RETURN_FAIL, e.returncode)
    self.assertEqual(expected_output, cut_verbose_output(e.output, 3))

  def testDifferentArchFailSecond(self):
    """As above, but we test the path that only fails in the second (ia32)
    run and not with x64 and then reports the error as ia32.
    """
    with open(os.path.join(TEST_DATA, 'failure_output_second.txt')) as f:
      expected_output = f.read()
    # Build 3 simulates x86 and produces a difference on --very-bad-flag,
    # which the baseline build doesn't.
    with self.assertRaises(subprocess.CalledProcessError) as ctx:
      run_foozzie('build3', '--skip-smoke-tests',
                  '--second-config-extra-flags=--very-bad-flag')
    e = ctx.exception
    self.assertEqual(v8_foozzie.RETURN_FAIL, e.returncode)
    self.assertEqual(expected_output, cut_verbose_output(e.output, 3))

  def testJitless(self):
    """Test that webassembly is mocked out when comparing with jitless."""
    stdout = run_foozzie(
        'build1', '--skip-smoke-tests', second_config='jitless')
    lines = stdout.split('\n')
    # TODO(machenbach): Don't depend on the command-lines being printed in
    # particular lines.
    self.assertIn('v8_mock_webassembly.js', lines[1])
    self.assertIn('v8_mock_webassembly.js', lines[3])

  def testSkipSuppressions(self):
    """Test that the suppressions file is not passed when skipping
    suppressions.
    """
    # Compare baseline with baseline. This passes as there is no difference.
    stdout = run_foozzie(
        'baseline', '--skip-smoke-tests', '--skip-suppressions')
    self.assertNotIn('v8_suppressions.js', stdout)

    # Compare with a build that usually suppresses a difference. Now we fail
    # since we skip suppressions.
    with self.assertRaises(subprocess.CalledProcessError) as ctx:
      run_foozzie(
          'build1', '--skip-smoke-tests', '--skip-suppressions')
    e = ctx.exception
    self.assertEqual(v8_foozzie.RETURN_FAIL, e.returncode)
    self.assertNotIn('v8_suppressions.js', e.output)


if __name__ == '__main__':
  unittest.main()
                                                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_fuzz_config.py                                     0000664 0000000 0000000 00000004262 14746647661 0024610 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2018 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import json
import os
import random

THIS_DIR = os.path.dirname(os.path.abspath(__file__))

# List of configuration experiments for correctness fuzzing.
# List of <probability>, <1st config name>, <2nd config name>, <2nd d8>.
# Probabilities must add up to 100.
with open(os.path.join(THIS_DIR, 'v8_fuzz_experiments.json')) as f:
  FOOZZIE_EXPERIMENTS = json.load(f)

# Additional flag experiments. List of tuples like
# (<likelihood to use flags in [0,1)>, <flag>).
with open(os.path.join(THIS_DIR, 'v8_fuzz_flags.json')) as f:
  ADDITIONAL_FLAGS = json.load(f)


class Config(object):
  def __init__(self, name, rng=None):
    """
    Args:
      name: Name of the used fuzzer.
      rng: Random number generator for generating experiments.
      random_seed: Random-seed used for d8 throughout one fuzz session.
    """
    self.name = name
    self.rng = rng or random.Random()

  def choose_foozzie_flags(self, foozzie_experiments=None, additional_flags=None):
    """Randomly chooses a configuration from FOOZZIE_EXPERIMENTS.

    Args:
      foozzie_experiments: Override experiment config for testing.
      additional_flags: Override additional flags for testing.

    Returns: List of flags to pass to v8_foozzie.py fuzz harness.
    """
    foozzie_experiments = foozzie_experiments or FOOZZIE_EXPERIMENTS
    additional_flags = additional_flags or ADDITIONAL_FLAGS

    # Add additional flags to second config based on experiment percentages.
    extra_flags = []
    for p, flags in additional_flags:
      if self.rng.random() < p:
        for flag in flags.split():
          extra_flags.append('--second-config-extra-flags=%s' % flag)

    # Calculate flags determining the experiment.
    acc = 0
    threshold = self.rng.random() * 100
    for prob, first_config, second_config, second_d8 in foozzie_experiments:
      acc += prob
      if acc > threshold:
        return [
          '--first-config=' + first_config,
          '--second-config=' + second_config,
          '--second-d8=' + second_d8,
        ] + extra_flags
    assert False
                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_fuzz_experiments.json                              0000664 0000000 0000000 00000001325 14746647661 0026224 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        [
  [10, "ignition", "jitless", "d8"],
  [10, "ignition", "slow_path", "d8"],
  [5, "ignition_no_ic", "slow_path", "d8"],
  [5, "ignition", "slow_path_opt", "d8"],
  [5, "ignition", "ignition_turbo_no_ic", "d8"],
  [15, "ignition", "ignition_turbo_opt", "d8"],
  [5, "ignition_no_ic", "ignition_turbo_opt", "d8"],
  [15, "ignition", "ignition_maglev", "d8"],
  [5, "ignition_turbo", "ignition_turbo_opt", "clang_x64_pointer_compression/d8"],
  [5, "ignition", "ignition", "clang_x86/d8"],
  [5, "ignition", "ignition_turbo_opt", "clang_x86/d8"],
  [5, "ignition", "slow_path", "clang_x86/d8"],
  [5, "ignition", "ignition_turbo_opt", "clang_x64_v8_arm64/d8"],
  [5, "ignition", "ignition_turbo_opt", "clang_x86_v8_arm/d8"]
]
                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_fuzz_flags.json                                    0000664 0000000 0000000 00000002220 14746647661 0024750 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        [
  [0.05, "--stress-compaction-random"],
  [0.05, "--stress-delay-tasks"],
  [0.05, "--stress-marking=100"],
  [0.05, "--stress-scavenge=100"],
  [0.05, "--random-gc-interval=2000"],
  [0.2, "--noanalyze-environment-liveness"],
  [0.01, "--thread-pool-size=1"],
  [0.01, "--thread-pool-size=2"],
  [0.01, "--thread-pool-size=4"],
  [0.01, "--thread-pool-size=8"],
  [0.25, "--jit-fuzzing"],
  [0.25, "--future"],
  [0.1, "--regexp-interpret-all"],
  [0.1, "--regexp-tier-up-ticks=0"],
  [0.1, "--regexp-tier-up-ticks=10"],
  [0.1, "--regexp-tier-up-ticks=100"],
  [0.1, "--turbo-instruction-scheduling"],
  [0.1, "--turbo-stress-instruction-scheduling"],
  [0.1, "--no-enable-sse4_2"],
  [0.1, "--no-enable-sahf"],
  [0.1, "--no-enable-avx"],
  [0.1, "--no-enable-fma3"],
  [0.1, "--no-enable-bmi1"],
  [0.1, "--no-enable-bmi2"],
  [0.1, "--no-enable-lzcnt"],
  [0.1, "--no-enable-popcnt"],
  [0.25, "--no-lazy-feedback-allocation"],
  [0.1, "--no-wasm-generic-wrapper"],
  [0.2, "--turboshaft"],
  [0.05, "--turboshaft-from-maglev"],
  [0.0001, "--simulate-errors"],
  [0.25, "--minor-ms"],
  [0.1, "--shared-string-table"],
  [0.1, "--stress-wasm-memory-moving"]
]
                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_mock.js                                            0000664 0000000 0000000 00000022334 14746647661 0023202 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This is intended for permanent JS behavior changes for mocking out
// non-deterministic behavior. For temporary suppressions, please refer to
// v8_suppressions.js.
// This file is loaded before each correctness test cases and won't get
// minimized.


// This will be overridden in the test cases. The override can be minimized.
var prettyPrinted = function prettyPrinted(msg) { return msg; };

// Mock Math.random.
(function() {
  let index = 1;
  Math.random = function() {
      const x = Math.sin(index++) * 10000;
      return x - Math.floor(x);
  }
})();

// Mock Math.pow. Work around an optimization for -0.5.
(function() {
  const origMathPow = Math.pow;
  Math.pow = function(a, b) {
    if (b === -0.5) {
      return 0;
    } else {
      return origMathPow(a, b);
    }
  }
})();


// Mock Date.
(function() {
  let index = 0;
  let mockDate = 1477662728696;
  const mockDateNow = function() {
    index = (index + 1) % 10;
    mockDate = mockDate + index + 1;
    return mockDate;
  }

  const origDate = Date;
  const construct = Reflect.construct;
  const constructDate = function(args) {
    let result;
    if (args.length) {
      result = construct(origDate, args);
    } else {
      result = new origDate(mockDateNow());
    }
    result.constructor = function(...args) { return constructDate(args); }
    Object.defineProperty(
        result, "constructor", { configurable: false, writable: false });
    return result;
  }

  origDate.prototype.constructor = function(...args) {
    return constructDate(args);
  };

  var handler = {
    apply: function(target, thisArg, args) {
      return constructDate(args);
    },
    construct: function(target, args, newTarget) {
      return constructDate(args);
    },
    get: function(target, property, receiver) {
      if (property == "now") {
        return mockDateNow;
      }
      if (property == "prototype") {
        return origDate.prototype;
      }
    },
  }

  Date = new Proxy(Date, handler);
})();

// Mock performance methods.
performance.now = function() { return 1.2; };
performance.mark = function() { return undefined; };
performance.measure = function() { return undefined; };
performance.measureMemory = function() { return []; };

// Mock readline so that test cases don't hang.
readline = function() { return "foo"; };

// Mock stack traces.
Error.prepareStackTrace = function(error, structuredStackTrace) {
  return "";
};
Object.defineProperty(
    Error, 'prepareStackTrace', { configurable: false, writable: false });

// Mock buffer access in float typed arrays because of varying NaN patterns.
(function() {
  const origArrayFrom = Array.from;
  const origArrayIsArray = Array.isArray;
  const origFunctionPrototype = Function.prototype;
  const origArrayMap = Array.prototype.map;
  const applyOrigArrayMap = origFunctionPrototype.apply.bind(origArrayMap);
  const origIsNaN = isNaN;
  const origIterator = Symbol.iterator;
  const deNaNify = function(value) { return origIsNaN(value) ? 1 : value; };
  const mock = function(type) {

    // Remove NaN values from parameters to "set" function.
    const set = type.prototype.set;
    type.prototype.set = function(array, offset) {
      if (origArrayIsArray(array)) {
        array = applyOrigArrayMap(array, [deNaNify]);
      }
      set.apply(this, [array, offset]);
    };

    const handler = {
      // Remove NaN values from parameters to constructor.
      construct: function(target, args) {
        for (let i = 0; i < args.length; i++) {
          if (args[i] != null &&
              typeof args[i][origIterator] === 'function') {
            // Consume iterators.
            args[i] = origArrayFrom(args[i]);
          }
          if (origArrayIsArray(args[i])) {
            args[i] = applyOrigArrayMap(args[i], [deNaNify]);
          }
        }

        const obj = new (
            origFunctionPrototype.bind.call(type, null, ...args));
        return new Proxy(obj, {
          get: function(x, prop) {
            if (typeof x[prop] == "function")
              return x[prop].bind(obj);
            return x[prop];
          },
          // Remove NaN values that get assigned.
          set: function(target, prop, value, receiver) {
            target[prop] = deNaNify(value);
            return value;
          }
        });
      },
    };
    return new Proxy(type, handler);
  }

  Float32Array = mock(Float32Array);
  Float64Array = mock(Float64Array);
})();

// Mock buffer access via DataViews because of varying NaN patterns.
(function() {
  const origIsNaN = isNaN;
  const deNaNify = function(value) { return origIsNaN(value) ? 1 : value; };
  const origSetFloat32 = DataView.prototype.setFloat32;
  DataView.prototype.setFloat32 = function(offset, value, ...rest) {
    origSetFloat32.call(this, offset, deNaNify(value), ...rest);
  };
  const origSetFloat64 = DataView.prototype.setFloat64;
  DataView.prototype.setFloat64 = function(offset, value, ...rest) {
    origSetFloat64.call(this, offset, deNaNify(value), ...rest);
  };
})();

// Mock maximum typed-array buffer and limit to 1MiB. Otherwise we might
// get range errors. We ignore those by crashing, but that reduces coverage,
// hence, let's reduce the range-error rate.
(function() {
  // Math.min might be manipulated in test cases.
  const min = Math.min;
  const maxBytes = 1048576;
  const mock = function(type) {
    const maxLength = maxBytes / (type.BYTES_PER_ELEMENT || 1);
    const handler = {
      construct: function(target, args) {
        if (args[0] && typeof args[0] != "object") {
          // Length used as first argument.
          args[0] = min(maxLength, Number(args[0]));
        } else if (args[0] instanceof ArrayBuffer && args.length > 1) {
          // Buffer used as first argument.
          const buffer = args[0];
          args[1] = Number(args[1]);
          // Ensure offset is multiple of bytes per element.
          args[1] = args[1] - (args[1] % type.BYTES_PER_ELEMENT);
          // Limit offset to length of buffer.
          args[1] = min(args[1], buffer.byteLength || 0);
          if (args.length > 2) {
            // If also length is given, limit it to the maximum that's possible
            // given buffer and offset. Avoid NaN offset turning the length
            // NaN, too.
            const maxBytesLeft = buffer.byteLength - (args[1] || 0);
            const maxLengthLeft = maxBytesLeft / type.BYTES_PER_ELEMENT;
            args[2] = min(Number(args[2]), maxLengthLeft);
          }
        }
        return new (Function.prototype.bind.apply(type, [null].concat(args)));
      },
    };
    return new Proxy(type, handler);
  }

  ArrayBuffer = mock(ArrayBuffer);
  SharedArrayBuffer = mock(SharedArrayBuffer);
  Int8Array = mock(Int8Array);
  Uint8Array = mock(Uint8Array);
  Uint8ClampedArray = mock(Uint8ClampedArray);
  Int16Array = mock(Int16Array);
  Uint16Array = mock(Uint16Array);
  Int32Array = mock(Int32Array);
  Uint32Array = mock(Uint32Array);
  BigInt64Array = mock(BigInt64Array);
  BigUint64Array = mock(BigUint64Array);
  Float32Array = mock(Float32Array);
  Float64Array = mock(Float64Array);
})();

// Mock typed array set function and cap offset to not throw a range error.
(function() {
  // Math.min might be manipulated in test cases.
  const min = Math.min;
  const types = [
    Int8Array,
    Uint8Array,
    Uint8ClampedArray,
    Int16Array,
    Uint16Array,
    Int32Array,
    Uint32Array,
    BigInt64Array,
    BigUint64Array,
    Float32Array,
    Float64Array,
  ];
  for (const type of types) {
    const set = type.prototype.set;
    type.prototype.set = function(array, offset) {
      if (Array.isArray(array)) {
        offset = Number(offset);
        offset = min(offset, this.length - array.length);
      }
      set.call(this, array, offset);
    };
  }
})();

// Mock Worker.
(function() {
  let index = 0;
  // TODO(machenbach): Randomize this for each test case, but keep stable
  // during comparison. Also data and random above.
  const workerMessages = [
    undefined, 0, -1, "", "foo", 42, [], {}, [0], {"x": 0}
  ];
  Worker = function(code){
    try {
      print(prettyPrinted(eval(code)));
    } catch(e) {
      print(prettyPrinted(e));
    }
    this.getMessage = function(){
      index = (index + 1) % 10;
      return workerMessages[index];
    }
    this.postMessage = function(msg){
      print(prettyPrinted(msg));
    }
  };
})();

// Mock Realm.
Realm.eval = function(realm, code) { return eval(code) };

// Mock the nondeterministic parts of WeakRef and FinalizationRegistry.
WeakRef.prototype.deref = function() { };
FinalizationRegistry = function(callback) { };
FinalizationRegistry.prototype.register = function(target, holdings) { };
FinalizationRegistry.prototype.unregister = function(unregisterToken) { };
FinalizationRegistry.prototype.cleanupSome = function() { };
FinalizationRegistry.prototype[Symbol.toStringTag] = "FinalizationRegistry";

// Mock the nondeterministic Atomics.waitAsync.
Atomics.waitAsync = function() {
  // Return a mock "Promise" whose "then" function will call the callback
  // immediately.
  return {'value': {'then': function (f) { f(); }}};
}

// Mock serializer API with no-ops.
d8.serializer = {'serialize': (x) => x, 'deserialize': (x) => x}
                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_mock_archs.js                                      0000664 0000000 0000000 00000001012 14746647661 0024350 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2017 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This is intended for permanent JS behavior changes for mocking out
// non-deterministic behavior. For temporary suppressions, please refer to
// v8_suppressions.js.
// This mocks only architecture specific differences. Refer to v8_mocks.js
// for the general case.
// This file is loaded before each correctness test cases and won't get
// minimized.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_mock_webassembly.js                                0000664 0000000 0000000 00000001012 14746647661 0025565 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This mocks out the WebAssembly object with a permissive dummy.

(function() {
  const handler = {
    get: function(x, prop) {
      if (prop == Symbol.toPrimitive) {
        return function() { return undefined; };
      }
      return dummy;
    },
  };
  const dummy = new Proxy(function() { return dummy; }, handler);
  WebAssembly = dummy;
})();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_smoke_tests.js                                     0000664 0000000 0000000 00000002364 14746647661 0024612 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is executed separately before the correctness test case. Add here
// checking of global properties that should never differ in any configuration.
// A difference found in the prints below will prevent any further correctness
// comparison for the selected configurations to avoid flooding bugs.

print("https://crbug.com/932656");
print(Object.getOwnPropertyNames(this));

print("https://crbug.com/935800");
(function () {
  function foo() {
    "use asm";
    function baz() {}
    return {bar: baz};
  }
  print(Object.getOwnPropertyNames(foo().bar));
})();

print("https://crbug.com/985154");
(function () {
  "use strict";
  function foo() {
    "use asm";
    function baz() {}
    return {bar: baz};
  }
  print(Object.getOwnPropertyNames(foo().bar));
})();

print("Sensitive runtime functions are neutered");
(function () {
  function foo() {}
  %PrepareFunctionForOptimization(foo);
  foo();
  foo();
  %OptimizeFunctionOnNextCall(foo);
  foo();
  print(%GetOptimizationStatus(foo));
  const fun = new Function("f", "return %GetOptimizationStatus(f);");
  print(fun(foo));
})();
                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_suppressions.js                                    0000664 0000000 0000000 00000000640 14746647661 0025022 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is loaded before each correctness test case and after v8_mock.js.
// You can temporarily change JS behavior here to silence known problems.
// Please refer to a bug in a comment and remove the suppression once the
// problem is fixed.
                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/foozzie/v8_suppressions.py                                    0000664 0000000 0000000 00000020750 14746647661 0025042 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""
Suppressions for V8 correctness fuzzer failures.

We support three types of suppressions:
1. Ignore test case by pattern.
Map a regular expression to a bug entry. A new failure will be reported
when the pattern matches a JS test case.
Subsequent matches will be recoreded under the first failure.

2. Ignore test run by output pattern:
Map a regular expression to a bug entry. A new failure will be reported
when the pattern matches the output of a particular run.
Subsequent matches will be recoreded under the first failure.

3. Relax line-to-line comparisons with expressions of lines to ignore and
lines to be normalized (i.e. ignore only portions of lines).
These are not tied to bugs, be careful to not silently switch off this tool!

Alternatively, think about adding a behavior change to v8_suppressions.js
to silence a particular class of problems.
"""

import itertools
import re

try:
  # Python 3
  from itertools import zip_longest
  PYTHON3 = True
except ImportError:
  # Python 2
  from itertools import izip_longest as zip_longest
  PYTHON3 = False

# Max line length for regular experessions checking for lines to ignore.
MAX_LINE_LENGTH = 512

# For ignoring lines before carets and to ignore caret positions.
CARET_RE = re.compile(r'^\s*\^\s*$')

# Ignore by original source files. Map from bug->list of relative file paths,
# e.g. 'v8/test/mjsunit/d8-performance-now.js'. A test will be suppressed if
# one of the files below was used to mutate the test.
IGNORE_SOURCES = {
}

# Ignore by test case pattern. Map from bug->regexp.
# Bug is preferred to be a crbug.com/XYZ, but can be any short distinguishable
# label.
# Regular expressions are assumed to be compiled. We use regexp.search.
IGNORE_TEST_CASES = {
}

# Ignore by output pattern. Map from bug->regexp like above.
IGNORE_OUTPUT = {
  'crbug.com/689877':
      re.compile(r'^.*SyntaxError: .*Stack overflow$', re.M),
  '_fake_difference_':
      re.compile(r'^.*___fake_difference___$', re.M),
}

# Lines matching any of the following regular expressions will be ignored
# if appearing on both sides. The capturing groups need to match exactly.
# Use uncompiled regular expressions - they'll be compiled later.
ALLOWED_LINE_DIFFS = [
  # Ignore caret position in stack traces.
  r'^\s*\^\s*$',
]

# Lines matching any of the following regular expressions will be ignored.
# Use uncompiled regular expressions - they'll be compiled later.
IGNORE_LINES = [
  r'^Warning: .+ is deprecated.*$',
  r'^Try --help for options$',

  # crbug.com/705962
  r'^\s\[0x[0-9a-f]+\]$',
]


###############################################################################
# Implementation - you should not need to change anything below this point.

# Compile regular expressions.
ALLOWED_LINE_DIFFS = [re.compile(exp) for exp in ALLOWED_LINE_DIFFS]
IGNORE_LINES = [re.compile(exp) for exp in IGNORE_LINES]

ORIGINAL_SOURCE_PREFIX = 'v8-foozzie source: '


def get_output_capped(output1, output2):
  """Returns a pair of stdout byte arrays.

  The arrays are safely capped if at least one run has crashed.
  """

  # No length difference or no crash -> no capping.
  if (len(output1.stdout_bytes) == len(output2.stdout_bytes) or
      (not output1.HasCrashed() and not output2.HasCrashed())):
    return output1.stdout_bytes, output2.stdout_bytes

  # Both runs have crashed, cap by the shorter output.
  if output1.HasCrashed() and output2.HasCrashed():
    cap = min(len(output1.stdout_bytes), len(output2.stdout_bytes))
  # Only the first run has crashed, cap by its output length.
  elif output1.HasCrashed():
    cap = len(output1.stdout_bytes)
  # Similar if only the second run has crashed.
  else:
    cap = len(output2.stdout_bytes)

  return output1.stdout_bytes[0:cap], output2.stdout_bytes[0:cap]


def line_pairs(lines):
  return zip_longest(
      lines, itertools.islice(lines, 1, None), fillvalue=None)


def caret_match(line1, line2):
  if (not line1 or
      not line2 or
      len(line1) > MAX_LINE_LENGTH or
      len(line2) > MAX_LINE_LENGTH):
    return False
  return bool(CARET_RE.match(line1) and CARET_RE.match(line2))


def short_line_output(line):
  if len(line) <= MAX_LINE_LENGTH:
    # Avoid copying.
    return line
  return line[0:MAX_LINE_LENGTH] + '...'


def ignore_by_regexp(line1, line2, allowed):
  if len(line1) > MAX_LINE_LENGTH or len(line2) > MAX_LINE_LENGTH:
    return False
  for exp in allowed:
    match1 = exp.match(line1)
    match2 = exp.match(line2)
    if match1 and match2:
      # If there are groups in the regexp, ensure the groups matched the same
      # things.
      if match1.groups() == match2.groups():  # tuple comparison
        return True
  return False


def diff_output(output1, output2, allowed, ignore1, ignore2):
  """Returns a tuple (difference, source).

  The difference is None if there's no difference, otherwise a string
  with a readable diff.

  The source is the last source output within the test case, or None if no
  such output existed.
  """
  def useful_line(ignore):
    def fun(line):
      return all(not e.match(line) for e in ignore)
    return fun

  lines1 = list(filter(useful_line(ignore1), output1))
  lines2 = list(filter(useful_line(ignore2), output2))

  # This keeps track where we are in the original source file of the fuzz
  # test case.
  source = None

  for ((line1, lookahead1), (line2, lookahead2)) in zip_longest(
      line_pairs(lines1), line_pairs(lines2), fillvalue=(None, None)):

    # Only one of the two iterators should run out.
    assert not (line1 is None and line2 is None)

    # One iterator ends earlier.
    if line1 is None:
      return '+ %s' % short_line_output(line2), source
    if line2 is None:
      return '- %s' % short_line_output(line1), source

    # If lines are equal, no further checks are necessary.
    if line1 == line2:
      # Instrumented original-source-file output must be equal in both
      # versions. It only makes sense to update it here when both lines
      # are equal.
      if line1.startswith(ORIGINAL_SOURCE_PREFIX):
        source = line1[len(ORIGINAL_SOURCE_PREFIX):]
      continue

    # Look ahead. If next line is a caret, ignore this line.
    if caret_match(lookahead1, lookahead2):
      continue

    # Check if a regexp allows these lines to be different.
    if ignore_by_regexp(line1, line2, allowed):
      continue

    # Lines are different.
    return (
        '- %s\n+ %s' % (short_line_output(line1), short_line_output(line2)),
        source,
    )

  # No difference found.
  return None, source


def get_suppression(skip=False):
  return V8Suppression(skip)

def decode(output):
  if PYTHON3:
    try:
      return output.decode('utf-8')
    except UnicodeDecodeError:
      return output.decode('latin-1')
  return output

class V8Suppression(object):
  def __init__(self, skip):
    if skip:
      self.allowed_line_diffs = []
      self.ignore_output = {}
      self.ignore_sources = {}
    else:
      self.allowed_line_diffs = ALLOWED_LINE_DIFFS
      self.ignore_output = IGNORE_OUTPUT
      self.ignore_sources = IGNORE_SOURCES

  def diff(self, output1, output2):
    # Diff capped lines in the presence of crashes.
    return self.diff_lines(
        *map(str.splitlines, map(decode, get_output_capped(output1, output2))))

  def diff_lines(self, output1_lines, output2_lines):
    return diff_output(
        output1_lines,
        output2_lines,
        self.allowed_line_diffs,
        IGNORE_LINES,
        IGNORE_LINES,
    )

  def ignore_by_content(self, testcase):
    # Strip off test case preamble.
    try:
      lines = testcase.splitlines()
      lines = lines[lines.index(
          'print("js-mutation: start generated test case");'):]
      content = '\n'.join(lines)
    except ValueError:
      # Search the whole test case if preamble can't be found. E.g. older
      # already minimized test cases might have dropped the delimiter line.
      content = testcase
    for bug, exp in IGNORE_TEST_CASES.items():
      if exp.search(content):
        return bug
    return None

  def ignore_by_metadata(self, metadata):
    for bug, sources in self.ignore_sources.items():
      for source in sources:
        if source in metadata['sources']:
          return bug
    return None

  def ignore_by_output(self, output):
    def check(mapping):
      for bug, exp in mapping.items():
        if exp.search(output):
          return bug
      return None
    bug = check(self.ignore_output)
    if bug:
      return bug
    return None
                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/                                                    0000775 0000000 0000000 00000000000 14746647661 0021626 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/.eslintrc.js                                        0000664 0000000 0000000 00000001000 14746647661 0024054 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module.exports = {
    "env": {
        "node": true,
        "commonjs": true,
        "es6": true,
        "mocha": true
    },
    "extends": "eslint:recommended",
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "parserOptions": {
        "ecmaVersion": 2018
    },
    "rules": {
    }
};
node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/.gitignore                                          0000664 0000000 0000000 00000000105 14746647661 0023612 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        /node_modules
/ochang_js_fuzzer*
/db/
/output.zip
/output/
/workdir/
                                                                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/DIR_METADATA                                        0000664 0000000 0000000 00000000624 14746647661 0023431 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Metadata information for this directory.
#
# For more information on DIR_METADATA files, see:
#   https://source.chromium.org/chromium/infra/infra/+/master:go/src/infra/tools/dirmd/README.md
#
# For the schema of this file, see Metadata message:
#   https://source.chromium.org/chromium/infra/infra/+/master:go/src/infra/tools/dirmd/proto/dir_metadata.proto

monorail {
  component: "Infra>Client>V8"
}                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/OWNERS                                              0000664 0000000 0000000 00000000060 14746647661 0022562 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        file:../../../INFRA_OWNERS

ochang@chromium.org
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/README.md                                           0000664 0000000 0000000 00000006276 14746647661 0023120 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # JS-Fuzzer

Javascript fuzzer for stand-alone shells like D8, Chakra, JSC or Spidermonkey.

Original author: Oliver Chang

# Building

This fuzzer may require versions of node that are newer than available on
ClusterFuzz, so we use [pkg](https://github.com/zeit/pkg) to create a self
contained binary) out of this.

## Prereqs
You need to intall nodejs and npm. Run `npm install` in this directory.

## Fuzzing DB
This fuzzer requires a fuzzing DB. To build one, get the latest `web_tests.zip`
from [gs://clusterfuzz-data/web_tests.zip](
https://storage.cloud.google.com/clusterfuzz-data/web_tests.zip) and unzip it
(note https://crbug.com/v8/10891 for making this data publicly available).
Then run:

```bash
$ mkdir db
$ node build_db.js -i /path/to/web_tests -o db chakra v8 spidermonkey WebKit/JSTests
```

This may take a while. Optionally test the fuzzing DB with:

```bash
$ node test_db.js -i db
```

## Building fuzzer
Then, to build the fuzzer,
```bash
$ ./node_modules/.bin/pkg -t node10-linux-x64 .
```

Replace "linux" with either "win" or "macos" for those platforms.

This builds a binary named `ochang_js_fuzzer` for Linux / macOS OR
`ochang_js_fuzzer.exe` for Windows.

## Packaging
Use `./package.sh`, `./package.sh win` or `./package.sh macos` to build and
create the `output.zip` archive or use these raw commands:
```bash
$ mkdir output
$ cd output
$ ln -s ../db db
$ ln -s ../ochang_js_fuzzer run
$ zip -r /path/output.zip *
```

**NOTE**: Add `.exe` to `ochang_js_fuzzer` and `run` filename above if archiving
for Windows platform.

# Development

Run the tests with:

```bash
$ npm test
```

When test expectations change, generate them with:

```bash
$ GENERATE=1 npm test
```

# Generating exceptional configurations

Tests that fail to parse or show very bad performance can be automatically
skipped or soft-skipped with the following script (takes >1h):

```bash
$ WEB_TESTS=/path/to/web_tests OUTPUT=/path/to/output/folder ./gen_exceptions.sh
```

# Experimenting (limited to differential fuzzing)

To locally evaluate the fuzzer, setup a work directory as follows:

```bash
$ workdir/
$ workdir/app_dir
$ workdir/fuzzer
$ workdir/input
$ workdir/output
```

The `app_dir` folder can be a symlink or should contain the bundled
version of `d8` with all files required for execution.
Copy the packaged `ochang_js_fuzzer` executable and the `db` folder
to the `fuzzer` directory or use a symlink.
The `input` directory is the root folder of the corpus, i.e. pointing
to the unzipped data of `gs://clusterfuzz-data/web_tests.zip`.
The `output` directory is expected to be empty. It'll contain all
output of the fuzzing session. Start the experiments with:

```bash
$ # Around ~40000 corresponds to 24h of fuzzing on a workstation.
$ NUM_RUNS = 40000
$ python tools/workbench.py $NUM_RUNS
```

You can check current stats with:

```bash
$ cat workdir/output/stats.json | python -m json.tool
```

When failures are found, you can forge minimization command lines with:

```bash
$ MINIMIZER_PATH = path/to/minimizer
$ python tools/minimize.py $MINIMIZER_PATH
```

The path should point to a local checkout of the [minimizer](https://chrome-internal.googlesource.com/chrome/tools/clusterfuzz/+/refs/heads/master/src/python/bot/minimizer/).
                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/build_db.js                                         0000664 0000000 0000000 00000002653 14746647661 0023736 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Collect JS nodes.
 */

const program = require('commander');

const corpus = require('./corpus.js');
const db = require('./db.js');
const path = require('path');

const sourceHelpers = require('./source_helpers.js');

function main() {
  Error.stackTraceLimit = Infinity;

  program
    .version('0.0.1')
    .option('-i, --input_dir <path>', 'Input directory.')
    .option('-o, --output_dir <path>', 'Output directory.')
    .parse(process.argv);

  if (!program.args.length) {
    console.log('Need to specify corpora.');
    return;
  }

  if (!program.output_dir) {
    console.log('Need to specify output dir.');
    return;
  }

  const mutateDb = new db.MutateDbWriter(program.output_dir);

  const inputDir = path.resolve(program.input_dir);
  for (const corpusName of program.args) {
    const curCorpus = new corpus.Corpus(inputDir, corpusName);
    for (const relPath of curCorpus.relFiles()) {
      let source;
      try {
        source = sourceHelpers.loadSource(inputDir, relPath);
      } catch (e) {
        console.log(e);
        continue;
      }

      if (!source) {
        continue;
      }

      try{
        mutateDb.process(source);
      } catch (e) {
        console.log(e);
      }
    }
  }

  mutateDb.writeIndex();
}

main();
                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/corpus.js                                           0000664 0000000 0000000 00000007626 14746647661 0023512 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Corpus
 */

const program = require('commander');
const fs = require('fs');
const path = require('path');

const exceptions = require('./exceptions.js');
const random = require('./random.js');
const sourceHelpers = require('./source_helpers.js');

function* walkDirectory(directory, filter) {
  // Generator for recursively walk a directory.
  for (const filePath of fs.readdirSync(directory)) {
    const currentPath = path.join(directory, filePath);
    const stat = fs.lstatSync(currentPath);
    if (stat.isFile()) {
      if (!filter || filter(currentPath)) {
        yield currentPath;
      }
      continue;
    }

    if (stat.isDirectory()) {
      for (let childFilePath of walkDirectory(currentPath, filter)) {
        yield childFilePath;
      }
    }
  }
}

class Corpus {
  // Input corpus.
  constructor(inputDir, corpusName, extraStrict=false) {
    this.inputDir = inputDir;
    this.extraStrict = extraStrict;

    // Filter for permitted JS files.
    function isPermittedJSFile(absPath) {
      return (absPath.endsWith('.js') &&
              !exceptions.isTestSkippedAbs(absPath));
    }

    // Cache relative paths of all files in corpus.
    this.skippedFiles = [];
    this.softSkippedFiles = [];
    this.permittedFiles = [];
    const directory = path.join(inputDir, corpusName);
    for (const absPath of walkDirectory(directory, isPermittedJSFile)) {
      const relPath = path.relative(this.inputDir, absPath);
      if (exceptions.isTestSkippedRel(relPath)) {
        this.skippedFiles.push(relPath);
      } else if (exceptions.isTestSoftSkippedAbs(absPath) ||
          exceptions.isTestSoftSkippedRel(relPath)) {
        this.softSkippedFiles.push(relPath);
      } else {
        this.permittedFiles.push(relPath);
      }
    }
    random.shuffle(this.softSkippedFiles);
    random.shuffle(this.permittedFiles);
  }

  // Relative paths of all files in corpus.
  *relFiles() {
    for (const relPath of this.permittedFiles) {
      yield relPath;
    }
    for (const relPath of this.softSkippedFiles) {
      yield relPath;
    }
  }

  // Relative paths of all files in corpus including generated skipped.
  *relFilesForGenSkipped() {
    for (const relPath of this.relFiles()) {
      yield relPath;
    }
    for (const relPath of this.skippedFiles) {
      yield relPath;
    }
  }

  /**
   * Returns "count" relative test paths, randomly selected from soft-skipped
   * and permitted files. Permitted files have a 4 times higher chance to
   * be chosen.
   */
  getRandomTestcasePaths(count) {
    return random.twoBucketSample(
        this.softSkippedFiles, this.permittedFiles, 4, count);
  }

  loadTestcase(relPath, strict, label) {
    const start = Date.now();
    try {
      const source = sourceHelpers.loadSource(this.inputDir, relPath, strict);
      if (program.verbose) {
        const duration = Date.now() - start;
        console.log(`Parsing ${relPath} ${label} took ${duration} ms.`);
      }
      return source;
    } catch (e) {
      console.log(`WARNING: failed to ${label} parse ${relPath}`);
      console.log(e);
    }
    return undefined;
  }

  *loadTestcases(relPaths) {
    for (const relPath of relPaths) {
      if (this.extraStrict) {
        // When re-generating the files marked sloppy, we additionally test if
        // the file parses in strict mode.
        this.loadTestcase(relPath, true, 'strict');
      }
      const source = this.loadTestcase(relPath, false, 'sloppy');
      if (source) {
        yield source;
      }
    }
  }

  getRandomTestcases(count) {
    return Array.from(this.loadTestcases(this.getRandomTestcasePaths(count)));
  }

  getAllTestcases() {
    return this.loadTestcases(this.relFilesForGenSkipped());
  }
}

module.exports = {
  Corpus: Corpus,
  walkDirectory: walkDirectory,
}
                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/db.js                                               0000664 0000000 0000000 00000026547 14746647661 0022567 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Mutation Db.
 */

const crypto = require('crypto');
const fs = require('fs');
const fsPath = require('path');

const babelGenerator = require('@babel/generator').default;
const babelTemplate = require('@babel/template').default;
const babelTraverse = require('@babel/traverse').default;
const babelTypes = require('@babel/types');
const globals = require('globals');

const random = require('./random.js');
const sourceHelpers = require('./source_helpers.js');

const globalIdentifiers = new Set(Object.keys(globals.builtin));
const propertyNames = new Set([
    // Parsed from https://github.com/tc39/ecma262/blob/master/spec.html
    'add',
    'anchor',
    'apply',
    'big',
    'bind',
    'blink',
    'bold',
    'buffer',
    'byteLength',
    'byteOffset',
    'BYTES_PER_ELEMENT',
    'call',
    'catch',
    'charAt',
    'charCodeAt',
    'clear',
    'codePointAt',
    'compile',
    'concat',
    'constructor',
    'copyWithin',
    '__defineGetter__',
    '__defineSetter__',
    'delete',
    'endsWith',
    'entries',
    'every',
    'exec',
    'fill',
    'filter',
    'find',
    'findIndex',
    'fixed',
    'flags',
    'fontcolor',
    'fontsize',
    'forEach',
    'get',
    'getDate',
    'getDay',
    'getFloat32',
    'getFloat64',
    'getFullYear',
    'getHours',
    'getInt16',
    'getInt32',
    'getInt8',
    'getMilliseconds',
    'getMinutes',
    'getMonth',
    'getSeconds',
    'getTime',
    'getTimezoneOffset',
    'getUint16',
    'getUint32',
    'getUint8',
    'getUTCDate',
    'getUTCDay',
    'getUTCFullYear',
    'getUTCHours',
    'getUTCMilliseconds',
    'getUTCMinutes',
    'getUTCMonth',
    'getUTCSeconds',
    'getYear',
    'global',
    'has',
    'hasInstance',
    'hasOwnProperty',
    'ignoreCase',
    'includes',
    'indexOf',
    'isConcatSpreadable',
    'isPrototypeOf',
    'italics',
    'iterator',
    'join',
    'keys',
    'lastIndexOf',
    'length',
    'link',
    'localeCompare',
    '__lookupGetter__',
    '__lookupSetter__',
    'map',
    'match',
    'match',
    'message',
    'multiline',
    'name',
    'next',
    'normalize',
    'padEnd',
    'padStart',
    'pop',
    'propertyIsEnumerable',
    '__proto__',
    'prototype',
    'push',
    'reduce',
    'reduceRight',
    'repeat',
    'replace',
    'replace',
    'return',
    'reverse',
    'search',
    'search',
    'set',
    'set',
    'setDate',
    'setFloat32',
    'setFloat64',
    'setFullYear',
    'setHours',
    'setInt16',
    'setInt32',
    'setInt8',
    'setMilliseconds',
    'setMinutes',
    'setMonth',
    'setSeconds',
    'setTime',
    'setUint16',
    'setUint32',
    'setUint8',
    'setUTCDate',
    'setUTCFullYear',
    'setUTCHours',
    'setUTCMilliseconds',
    'setUTCMinutes',
    'setUTCMonth',
    'setUTCSeconds',
    'setYear',
    'shift',
    'size',
    'slice',
    'slice',
    'small',
    'some',
    'sort',
    'source',
    'species',
    'splice',
    'split',
    'split',
    'startsWith',
    'sticky',
    'strike',
    'sub',
    'subarray',
    'substr',
    'substring',
    'sup',
    'test',
    'then',
    'throw',
    'toDateString',
    'toExponential',
    'toFixed',
    'toGMTString',
    'toISOString',
    'toJSON',
    'toLocaleDateString',
    'toLocaleLowerCase',
    'toLocaleString',
    'toLocaleTimeString',
    'toLocaleUpperCase',
    'toLowerCase',
    'toPrecision',
    'toPrimitive',
    'toString',
    'toStringTag',
    'toTimeString',
    'toUpperCase',
    'toUTCString',
    'trim',
    'unicode',
    'unscopables',
    'unshift',
    'valueOf',
    'values',
]);

const MAX_DEPENDENCIES = 2;

class Expression {
  constructor(type, source, isStatement, originalPath,
              dependencies, needsSuper) {
    this.type = type;
    this.source = source;
    this.isStatement = isStatement;
    this.originalPath = originalPath;
    this.dependencies = dependencies;
    this.needsSuper = needsSuper;
  }
}

function dedupKey(expression) {
  if (!expression.dependencies) {
    return expression.source;
  }

  let result = expression.source;
  for (let dependency of expression.dependencies) {
    result = result.replace(new RegExp(dependency, 'g'), 'ID');
  }

  return result;
}

function _markSkipped(path) {
  while (path) {
    path.node.__skipped = true;
    path = path.parentPath;
  }
}

/**
 * Returns true if an expression can be applied or false otherwise.
 */
function isValid(expression) {
  const expressionTemplate = babelTemplate(
      expression.source,
      sourceHelpers.BABYLON_REPLACE_VAR_OPTIONS);

  const dependencies = {};
  if (expression.dependencies) {
    for (const dependency of expression.dependencies) {
      dependencies[dependency] = babelTypes.identifier('__v_0');
    }
  }

  try {
    expressionTemplate(dependencies);
  } catch (e) {
    return false;
  }
  return true;
}

class MutateDbWriter {
  constructor(outputDir) {
    this.seen = new Set();
    this.outputDir = fsPath.resolve(outputDir);
    this.index = {
      statements: [],
      superStatements: [],
      all: [],
    };
  }

  process(source) {
    let self = this;

    let varIndex = 0;

    // First pass to collect dependency information.
    babelTraverse(source.ast, {
      Super(path) {
        while (path) {
          path.node.__needsSuper = true;
          path = path.parentPath;
        }
      },

      YieldExpression(path) {
        // Don't include yield expressions in DB.
        _markSkipped(path);
      },

      Identifier(path) {
        if (globalIdentifiers.has(path.node.name) &&
            path.node.name != 'eval') {
          // Global name.
          return;
        }

        if (propertyNames.has(path.node.name) &&
            path.parentPath.isMemberExpression() &&
            path.parentKey !== 'object') {
          // Builtin property name.
          return;
        }

        let binding = path.scope.getBinding(path.node.name);
        if (!binding) {
          // Unknown dependency. Don't handle this.
          _markSkipped(path);
          return;
        }

        let newName;
        if (path.node.name.startsWith('VAR_')) {
          newName = path.node.name;
        } else if (babelTypes.isFunctionDeclaration(binding.path.node) ||
                   babelTypes.isFunctionExpression(binding.path.node) ||
                   babelTypes.isDeclaration(binding.path.node) ||
                   babelTypes.isFunctionExpression(binding.path.node)) {
          // Unknown dependency. Don't handle this.
          _markSkipped(path);
          return;
        } else {
          newName = 'VAR_' + varIndex++;
          path.scope.rename(path.node.name, newName);
        }

        // Mark all parents as having a dependency.
        while (path) {
          path.node.__idDependencies = path.node.__idDependencies || [];
          if (path.node.__idDependencies.length <= MAX_DEPENDENCIES) {
            path.node.__idDependencies.push(newName);
          }
          path = path.parentPath;
        }
      }
    });

    babelTraverse(source.ast, {
      Expression(path) {
        if (!path.parentPath.isExpressionStatement()) {
          return;
        }

        if (path.node.__skipped ||
            (path.node.__idDependencies &&
             path.node.__idDependencies.length > MAX_DEPENDENCIES)) {
          return;
        }

        if (path.isIdentifier() || path.isMemberExpression() ||
            path.isConditionalExpression() ||
            path.isBinaryExpression() || path.isDoExpression() ||
            path.isLiteral() ||
            path.isObjectExpression() || path.isArrayExpression()) {
          // Skip:
          //   - Identifiers.
          //   - Member expressions (too many and too context dependent).
          //   - Conditional expressions (too many and too context dependent).
          //   - Binary expressions (too many).
          //   - Literals (too many).
          //   - Object/array expressions (too many).
          return;
        }

        if (path.isAssignmentExpression()) {
          if (!babelTypes.isMemberExpression(path.node.left)) {
            // Skip assignments that aren't to properties.
            return;
          }

          if (babelTypes.isIdentifier(path.node.left.object)) {
            if (babelTypes.isNumericLiteral(path.node.left.property)) {
              // Skip VAR[\d+] = ...;
              // There are too many and they generally aren't very useful.
              return;
            }

            if (babelTypes.isStringLiteral(path.node.left.property) &&
                !propertyNames.has(path.node.left.property.value)) {
              // Skip custom properties. e.g.
              // VAR["abc"] = ...;
              // There are too many and they generally aren't very useful.
              return;
            }
          }
        }

        if (path.isCallExpression() &&
            babelTypes.isIdentifier(path.node.callee) &&
            !globalIdentifiers.has(path.node.callee.name)) {
          // Skip VAR(...) calls since there's too much context we're missing.
          return;
        }

        if (path.isUnaryExpression() && path.node.operator == '-') {
          // Skip -... since there are too many.
          return;
        }

        // Make the template.
        let generated = babelGenerator(path.node, { concise: true }).code;
        let expression = new Expression(
            path.node.type,
            generated,
            path.parentPath.isExpressionStatement(),
            source.relPath,
            path.node.__idDependencies,
            Boolean(path.node.__needsSuper));

        // Try to de-dupe similar expressions.
        let key = dedupKey(expression);
        if (self.seen.has(key)) {
          return;
        }

        // Test results.
        if (!isValid(expression)) {
          return;
        }

        // Write results.
        let dirPath = fsPath.join(self.outputDir, expression.type);
        if (!fs.existsSync(dirPath)) {
          fs.mkdirSync(dirPath);
        }

        let sha1sum = crypto.createHash('sha1');
        sha1sum.update(key);

        let filePath = fsPath.join(dirPath, sha1sum.digest('hex') + '.json');
        fs.writeFileSync(filePath, JSON.stringify(expression));

        let relPath = fsPath.relative(self.outputDir, filePath);

        // Update index.
        self.seen.add(key);
        self.index.all.push(relPath);

        if (expression.needsSuper) {
          self.index.superStatements.push(relPath);
        } else {
          self.index.statements.push(relPath);
        }
      }
    });
  }

  writeIndex() {
    fs.writeFileSync(
        fsPath.join(this.outputDir, 'index.json'),
        JSON.stringify(this.index));
  }
}

class MutateDb {
  constructor(outputDir) {
    this.outputDir = fsPath.resolve(outputDir);
    this.index = JSON.parse(
        fs.readFileSync(fsPath.join(outputDir, 'index.json'), 'utf-8'));
  }

  getRandomStatement({canHaveSuper=false} = {}) {
    let choices;
    if (canHaveSuper) {
      choices = random.randInt(0, 1) ?
          this.index.all : this.index.superStatements;
    } else {
      choices = this.index.statements;
    }

    let path = fsPath.join(
        this.outputDir, choices[random.randInt(0, choices.length - 1)]);
    return JSON.parse(fs.readFileSync(path), 'utf-8');
  }
}

module.exports = {
  MutateDb: MutateDb,
  MutateDbWriter: MutateDbWriter,
}
                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/differential_script_mutator.js                      0000664 0000000 0000000 00000013005 14746647661 0027756 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Script mutator for differential fuzzing.
 */

'use strict';

const assert = require('assert');
const fs = require('fs');
const path = require('path');

const common = require('./mutators/common.js');
const random = require('./random.js');
const sourceHelpers = require('./source_helpers.js');

const { filterDifferentialFuzzFlags } = require('./exceptions.js');
const { DifferentialFuzzMutator, DifferentialFuzzSuppressions } = require(
    './mutators/differential_fuzz_mutator.js');
const { ScriptMutator } = require('./script_mutator.js');


const USE_ORIGINAL_FLAGS_PROB = 0.2;

/**
 * Randomly chooses a configuration from experiments. The configuration
 * parameters are expected to be passed from a bundled V8 build. Constraints
 * mentioned below are enforced by PRESUBMIT checks on the V8 side.
 *
 * @param {Object[]} experiments List of tuples (probability, first config name,
 *     second config name, second d8 name). The probabilities are integers in
 *     [0,100]. We assume the sum of all probabilities is 100.
 * @param {Object[]} additionalFlags List of tuples (probability, flag strings).
 *     Probability is in [0,1).
 * @return {string[]} List of flags for v8_foozzie.py.
 */
function chooseRandomFlags(experiments, additionalFlags) {
  // Add additional flags to second config based on experiment percentages.
  const extra_flags = [];
  for (const [p, flags] of additionalFlags) {
    if (random.choose(p)) {
      for (const flag of flags.split(' ')) {
        extra_flags.push('--second-config-extra-flags=' + flag);
      }
    }
  }

  // Calculate flags determining the experiment.
  let acc = 0;
  const threshold = random.random() * 100;
  for (let [prob, first_config, second_config, second_d8] of experiments) {
    acc += prob;
    if (acc > threshold) {
      return [
        '--first-config=' + first_config,
        '--second-config=' + second_config,
        '--second-d8=' + second_d8,
      ].concat(extra_flags);
    }
  }
  // Unreachable.
  assert(false);
}

function loadJSONFromBuild(name) {
  assert(process.env.APP_DIR);
  const fullPath = path.join(path.resolve(process.env.APP_DIR), name);
  return JSON.parse(fs.readFileSync(fullPath, 'utf-8'));
}

function hasMjsunit(dependencies) {
  return dependencies.some(dep => dep.relPath.endsWith('mjsunit.js'));
}

function hasJSTests(dependencies) {
  return dependencies.some(dep => dep.relPath.endsWith('jstest_stubs.js'));
}

class DifferentialScriptMutator extends ScriptMutator {
  constructor(settings, db_path) {
    super(settings, db_path);

    // Mutators for differential fuzzing.
    this.differential = [
      new DifferentialFuzzSuppressions(settings),
      new DifferentialFuzzMutator(settings),
    ];

    // Flag configurations from the V8 build directory.
    this.experiments = loadJSONFromBuild('v8_fuzz_experiments.json');
    this.additionalFlags = loadJSONFromBuild('v8_fuzz_flags.json');
  }

  /**
   * Performes the high-level mutation and afterwards adds flags for the
   * v8_foozzie.py harness.
   */
  mutateMultiple(inputs) {
    const result = super.mutateMultiple(inputs);
    const originalFlags = [];

    // Keep original JS flags in some cases. Let the harness pass them to
    // baseline _and_ comparison run.
    if (random.choose(USE_ORIGINAL_FLAGS_PROB)) {
      for (const flag of filterDifferentialFuzzFlags(result.flags)) {
        originalFlags.push('--first-config-extra-flags=' + flag);
        originalFlags.push('--second-config-extra-flags=' + flag);
      }
    }

    // Add flags for the differnetial-fuzzing settings.
    const fuzzFlags = chooseRandomFlags(this.experiments, this.additionalFlags);
    result.flags = fuzzFlags.concat(originalFlags);
    return result;
  }

  /**
   * Mutatates a set of inputs.
   *
   * Additionally we prepare inputs by tagging each with the original source
   * path for later printing. The mutated sources are post-processed by the
   * differential-fuzz mutators, adding extra printing and other substitutions.
   */
  mutateInputs(inputs) {
    inputs.forEach(input => common.setOriginalPath(input, input.relPath));

    const result = super.mutateInputs(inputs);
    this.differential.forEach(mutator => mutator.mutate(result));
    return result;
  }

  /**
   * Adds extra dependencies for differential fuzzing.
   */
  resolveDependencies(inputs) {
    const dependencies = super.resolveDependencies(inputs);
    // The suppression file neuters functions not working with differential
    // fuzzing. It can also be used to temporarily silence some functionality
    // leading to dupes of an active bug.
    dependencies.push(
        sourceHelpers.loadResource('differential_fuzz_suppressions.js'));
    // Extra printing and tracking functionality.
    dependencies.push(
        sourceHelpers.loadResource('differential_fuzz_library.js'));
    // Make Chakra tests print more.
    dependencies.push(
        sourceHelpers.loadResource('differential_fuzz_chakra.js'));

    if (hasMjsunit(dependencies)) {
      // Make V8 tests print more. We guard this as the functionality
      // relies on mjsunit.js.
      dependencies.push(sourceHelpers.loadResource('differential_fuzz_v8.js'));
    }

    if (hasJSTests(dependencies)) {
      dependencies.push(
          sourceHelpers.loadResource('differential_fuzz_jstest.js'));
    }

    return dependencies;
  }
}

module.exports = {
  DifferentialScriptMutator: DifferentialScriptMutator,
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/exceptions.js                                       0000664 0000000 0000000 00000016262 14746647661 0024354 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Blacklists for fuzzer.
 */

'use strict';

const fs = require('fs');
const path = require('path');

const random = require('./random.js');

const {generatedSloppy, generatedSoftSkipped, generatedSkipped} = require(
    './generated/exceptions.js');

const SKIPPED_FILES = [
    // Disabled for unexpected test behavior, specific to d8 shell.
    'd8-os.js',
    'd8-readbuffer.js',

    // Passes JS flags.
    'd8-arguments.js',

    // Slow tests or tests that are too large to be used as input.
    /numops-fuzz-part.*.js/,
    'regexp-pcre.js',
    'unicode-test.js',
    'unicodelctest.js',
    'unicodelctest-no-optimization.js',

    // Unsupported modules.
    /^modules.*\.js/,

    // Unsupported property escapes.
    /^regexp-property-.*\.js/,

    // Bad testcases that just loads a script that always throws errors.
    'regress-444805.js',
    'regress-crbug-489597.js',
    'regress-crbug-620253.js',

    // Just recursively loads itself.
    'regress-8510.js',
];

const SKIPPED_DIRECTORIES = [
    // Slow tests or tests that are too large to be used as input.
    'embenchen',
    'poppler',
    'sqlite',

    // Causes lots of failures.
    'test262',

    // Unavailable debug.Debug.
    'v8/test/debugger',
    'v8/test/inspector',

    // Unsupported modules.
    'v8/test/js-perf-test/Modules',

    // Contains tests expected to error out on parsing.
    'v8/test/message',

    // Needs specific dependencies for load of various tests.
    'v8/test/mjsunit/tools',

    // Unsupported e4x standard.
    'mozilla/data/e4x',

    // Bails out fast without ReadableStream support.
    'spidermonkey/non262/ReadableStream',
];

// Files used with a lower probability.
const SOFT_SKIPPED_FILES = [
    // Tests with large binary content.
    /^binaryen.*\.js/,

    // Tests slow to parse.
    // CrashTests:
    /^jquery.*\.js/,
    // Spidermonkey:
    'regress-308085.js',
    'regress-74474-002.js',
    'regress-74474-003.js',
    // V8:
    'object-literal.js',
];

// Flags that lead to false positives or that are already passed by default.
const DISALLOWED_FLAGS = [
    // Disallowed because features prefixed with "experimental" are not
    // stabilized yet and would cause too much noise when enabled.
    /^--experimental-.*/,

    // Disallowed due to noise. We explicitly add --harmony to job
    // definitions, and all of these features are staged before launch.
    /^--harmony-.*/,

    // Disallowed because they are passed explicitly on the command line.
    '--allow-natives-syntax',
    '--debug-code',
    '--harmony',
    '--js-staging',
    '--wasm-staging',
    '--expose-gc',
    '--expose_gc',
    '--icu-data-file',
    '--random-seed',

    // Disallowed due to false positives.
    '--check-handle-count',
    '--correctness-fuzzer-suppressions',
    '--expose-debug-as',
    '--expose-natives-as',
    '--expose-trigger-failure',
    '--mock-arraybuffer-allocator',
    'natives',  // Used in conjuction with --expose-natives-as.
    /^--trace-path.*/,
];

// Flags only used with 25% probability.
const LOW_PROB_FLAGS_PROB = 0.25;
const LOW_PROB_FLAGS = [
    // Flags that lead to slow test performance.
    /^--gc-interval.*/,
    /^--deopt-every-n-times.*/,
];


// Flags printing data, leading to false positives in differential fuzzing.
const DISALLOWED_DIFFERENTIAL_FUZZ_FLAGS = [
    /^--gc-interval.*/,
    /^--perf.*/,
    /^--print.*/,
    /^--stress-runs.*/,
    /^--trace.*/,
    '--expose-externalize-string',
    '--interpreted-frames-native-stack',
    '--validate-asm',
];

// Pairs of flags that shouldn't be used together.
const CONTRADICTORY_FLAGS = [
    ['--assert-types', '--stress-concurrent-inlining'],
    ['--assert-types', '--stress-concurrent-inlining-attach-code'],
    ['--jitless', '--maglev'],
    ['--jitless', '--maglev-future'],
    ['--jitless', '--stress-maglev'],
    ['--jitless', '--stress-concurrent-inlining'],
    ['--jitless', '--stress-concurrent-inlining-attach-code'],
]

const MAX_FILE_SIZE_BYTES = 128 * 1024;  // 128KB
const MEDIUM_FILE_SIZE_BYTES = 32 * 1024;  // 32KB

function _findMatch(iterable, candidate) {
  for (const entry of iterable) {
    if (typeof entry === 'string') {
      if (entry === candidate) {
        return true;
      }
    } else {
      if (entry.test(candidate)) {
        return true;
      }
    }
  }

  return false;
}

function _doesntMatch(iterable, candidate) {
  return !_findMatch(iterable, candidate);
}

// Convert Windows path separators.
function normalize(testPath) {
  return path.normalize(testPath).replace(/\\/g, '/');
}

function isTestSkippedAbs(absPath) {
  const basename = path.basename(absPath);
  if (_findMatch(SKIPPED_FILES, basename)) {
    return true;
  }

  const normalizedTestPath = normalize(absPath);
  for (const entry of SKIPPED_DIRECTORIES) {
    if (normalizedTestPath.includes(entry))  {
      return true;
    }
  }

  // Avoid OOM/hangs through huge inputs.
  const stat = fs.statSync(absPath);
  return (stat && stat.size >= MAX_FILE_SIZE_BYTES);
}

function isTestSkippedRel(relPath) {
  return generatedSkipped.has(normalize(relPath));
}

// For testing.
function getSoftSkipped() {
  return SOFT_SKIPPED_FILES;
}

// For testing.
function getGeneratedSoftSkipped() {
  return generatedSoftSkipped;
}

// For testing.
function getGeneratedSloppy() {
  return generatedSloppy;
}

function isTestSoftSkippedAbs(absPath) {
  const basename = path.basename(absPath);
  if (_findMatch(this.getSoftSkipped(), basename)) {
    return true;
  }

  // Graylist medium size files.
  const stat = fs.statSync(absPath);
  return (stat && stat.size >= MEDIUM_FILE_SIZE_BYTES);
}

function isTestSoftSkippedRel(relPath) {
  return this.getGeneratedSoftSkipped().has(normalize(relPath));
}

function isTestSloppyRel(relPath) {
  return this.getGeneratedSloppy().has(normalize(relPath));
}

function filterFlags(flags) {
  return flags.filter(flag => {
    return (
        _doesntMatch(DISALLOWED_FLAGS, flag) &&
        (_doesntMatch(LOW_PROB_FLAGS, flag) ||
         random.choose(LOW_PROB_FLAGS_PROB)));
  });
}

/**
 * Randomly drops flags to resolve contradicions defined by
 * `CONTRADICTORY_FLAGS`.
 */
function resolveContradictoryFlags(flags) {
  const flagSet = new Set(flags);
  for (const [flag1, flag2] of this.CONTRADICTORY_FLAGS) {
    if (flagSet.has(flag1) && flagSet.has(flag2)) {
      flagSet.delete(random.single([flag1, flag2]));
    }
  }
  return Array.from(flagSet.values());
}

function filterDifferentialFuzzFlags(flags) {
  return flags.filter(
      flag => _doesntMatch(DISALLOWED_DIFFERENTIAL_FUZZ_FLAGS, flag));
}


module.exports = {
  CONTRADICTORY_FLAGS: CONTRADICTORY_FLAGS,
  filterDifferentialFuzzFlags: filterDifferentialFuzzFlags,
  filterFlags: filterFlags,
  getGeneratedSoftSkipped: getGeneratedSoftSkipped,
  getGeneratedSloppy: getGeneratedSloppy,
  getSoftSkipped: getSoftSkipped,
  isTestSkippedAbs: isTestSkippedAbs,
  isTestSkippedRel: isTestSkippedRel,
  isTestSoftSkippedAbs: isTestSoftSkippedAbs,
  isTestSoftSkippedRel: isTestSoftSkippedRel,
  isTestSloppyRel: isTestSloppyRel,
  resolveContradictoryFlags: resolveContradictoryFlags,
}
                                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/foozzie_launcher.py                                 0000664 0000000 0000000 00000002626 14746647661 0025554 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


"""
Launcher for the foozzie differential-fuzzing harness. Wraps foozzie
with Python2 for backwards-compatibility when bisecting.

Obsolete now after switching to Python3 entirely. We keep the launcher
for a transition period.
"""

import re
import shutil
import subprocess
import sys

def find_harness_code(args):
  for arg in args:
    if arg.endswith('v8_foozzie.py'):
      with open(arg) as f:
        return f.read()
  assert False, 'Foozzie harness not found'

if __name__ == '__main__':
  # In some cases or older versions, the python executable is passed as
  # first argument. Let's be robust either way, with or without full
  # path or version.
  if re.match(r'.*python.*', sys.argv[1]):
    args = sys.argv[2:]
  else:
    args = sys.argv[1:]

  python_exe = 'python3'

  # To ease bisection of really old bugs, attempt to use Python2 as long
  # as it is supported. This enables bisection before the point where the
  # harness switched to Python3.
  script = find_harness_code(args)
  use_python3 = script.startswith('#!/usr/bin/env python3')
  if not use_python3 and shutil.which('python2'):
    python_exe = 'python2'

  process = subprocess.Popen([python_exe] + args)
  process.communicate()
  sys.exit(process.returncode)
                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/gen_exceptions.js                                   0000664 0000000 0000000 00000014147 14746647661 0025205 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Generate exceptions from full corpus test report.
 */

const program = require('commander');

const assert = require('assert');
const babelGenerator = require('@babel/generator').default;
const babelTemplate = require('@babel/template').default;
const babelTypes = require('@babel/types');
const fs = require('fs');
const p = require('path');
const prettier = require("prettier");

const SPLIT_LINES_RE = /^.*([\n\r]+|$)/gm;
const PARSE_RE = /^Parsing (.*) sloppy took (\d+) ms\.\n$/;
const MUTATE_RE = /^Mutating (.*) took (\d+) ms\.\n$/;
const PARSE_FAILED_RE = /^WARNING: failed to sloppy parse (.*)\n$/;
const PARSE_STRICT_FAILED_RE = /^WARNING: failed to strict parse (.*)\n$/;
const MUTATE_FAILED_RE = /^ERROR: Exception during mutate: (.*)\n$/;

// Add tests matching error regexp to result array.
function matchError(regexp, line, resultArray){
  const match = line.match(regexp);
  if (!match) return false;
  const relPath = match[1];
  assert(relPath);
  resultArray.push(relPath);
  return true;
}

// Sum up total duration of tests matching the duration regexp and
// map test -> duration in result map.
function matchDuration(regexp, line, resultMap){
  const match = line.match(regexp);
  if (!match) return false;
  const relPath = match[1];
  assert(relPath);
  resultMap[relPath] = (resultMap[relPath] || 0) + parseInt(match[2]);
  return true;
}

// Create lists of failed and slow tests from stdout of a fuzzer run.
function processFuzzOutput(outputFile){
  const text = fs.readFileSync(outputFile, 'utf-8');
  const lines = text.match(SPLIT_LINES_RE);

  const failedParse = [];
  const failedParseStrict = [];
  const failedMutate = [];
  const durationsMap = {};

  for (const line of lines) {
    if (matchError(PARSE_FAILED_RE, line, failedParse))
      continue;
    if (matchError(PARSE_STRICT_FAILED_RE, line, failedParseStrict))
      continue;
    if (matchError(MUTATE_FAILED_RE, line, failedMutate))
      continue;
    if (matchDuration(PARSE_RE, line, durationsMap))
      continue;
    if (matchDuration(MUTATE_RE, line, durationsMap))
      continue;
  }

  // Tuples (absPath, duration).
  const total = Object.entries(durationsMap);
  // Tuples (absPath, duration) with 2s < duration <= 10s.
  const slow = total.filter(t => t[1] > 2000 && t[1] <= 10000);
  // Tuples (absPath, duration) with 10s < duration.
  const verySlow = total.filter(t => t[1] > 10000);

  // Assert there's nothing horribly wrong with the results.
  // We have at least 2500 tests in the output.
  assert(total.length > 2500);
  // No more than 5% parse/mutation errors.
  assert(failedParse.length + failedMutate.length < total.length / 20);
  // No more than 10% slow tests
  assert(slow.length < total.length / 10);
  // No more than 2% very slow tests.
  assert(verySlow.length < total.length / 50);

  // Sort everything.
  failedParse.sort();
  failedParseStrict.sort();
  failedMutate.sort();

  function slowestFirst(a, b) {
    return b[1] - a[1];
  }

  slow.sort(slowestFirst);
  verySlow.sort(slowestFirst);

  return [failedParse, failedParseStrict, failedMutate, slow, verySlow];
}

// List of string literals of failed tests.
function getLiteralsForFailed(leadingComment, failedList) {
  const result = failedList.map(path => babelTypes.stringLiteral(path));
  if (result.length) {
    babelTypes.addComment(result[0], 'leading', leadingComment);
  }
  return result;
}

// List of string literals of slow tests with duration comments.
function getLiteralsForSlow(leadingComment, slowList) {
  const result = slowList.map(([path, duration]) => {
    const literal = babelTypes.stringLiteral(path);
    babelTypes.addComment(
        literal, 'trailing', ` ${duration / 1000}s`, true);
    return literal;
  });
  if (result.length) {
    babelTypes.addComment(result[0], 'leading', leadingComment);
  }
  return result;
}

function main() {
  program
    .version('0.0.1')
    .parse(process.argv);

  if (!program.args.length) {
    console.log('Need to specify stdout reports of fuzz runs.');
    return;
  }

  let skipped = [];
  let softSkipped = [];
  let sloppy = [];
  for (const outputFile of program.args) {
    const [failedParse, failedParseStrict, failedMutate, slow, verySlow] = (
        processFuzzOutput(outputFile));
    const name = p.basename(outputFile, p.extname(outputFile));

    // Skip tests that fail to parse/mutate or are very slow.
    skipped = skipped.concat(getLiteralsForFailed(
        ` Tests with parse errors from ${name} `, failedParse));
    skipped = skipped.concat(getLiteralsForFailed(
        ` Tests with mutation errors from ${name} `, failedMutate));
    skipped = skipped.concat(getLiteralsForSlow(
        ` Very slow tests from ${name} `, verySlow));

    // Soft-skip slow but not very slow tests.
    softSkipped = softSkipped.concat(getLiteralsForSlow(
        ` Slow tests from ${name} `, slow));

    // Mark sloppy tests.
    sloppy = sloppy.concat(getLiteralsForFailed(
        ` Tests requiring sloppy mode from ${name} `, failedParseStrict));
  }

  const fileTemplate = babelTemplate(`
    /**
     * @fileoverview Autogenerated exceptions. Created with gen_exceptions.js.
     */

    'use strict';

    const skipped = SKIPPED;

    const softSkipped = SOFTSKIPPED;

    const sloppy = SLOPPY;

    module.exports = {
      generatedSkipped: new Set(skipped),
      generatedSoftSkipped: new Set(softSkipped),
      generatedSloppy: new Set(sloppy),
    }
  `, {preserveComments: true});

  const skippedArray = babelTypes.arrayExpression(skipped);
  const softSkippedArray = babelTypes.arrayExpression(softSkipped);
  const sloppyArray = babelTypes.arrayExpression(sloppy);

  const statements = fileTemplate({
    SKIPPED: skippedArray,
    SOFTSKIPPED: softSkippedArray,
    SLOPPY: sloppyArray,
  });

  const resultProgram = babelTypes.program(statements);
  const code = babelGenerator(resultProgram, { comments: true }).code;
  const prettyCode = prettier.format(code, { parser: "babel" });
  fs.writeFileSync('generated/exceptions.js', prettyCode);
}

main();
                                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/gen_exceptions.sh                                   0000775 0000000 0000000 00000001261 14746647661 0025177 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

APP_NAME=d8 node run.js -i $WEB_TESTS -o $OUTPUT -z -v -e -c chakra > chakra.log
APP_NAME=d8 node run.js -i $WEB_TESTS -o $OUTPUT -z -v -e -c v8 > v8.log
APP_NAME=d8 node run.js -i $WEB_TESTS -o $OUTPUT -z -v -e -c spidermonkey > spidermonkey.log
APP_NAME=d8 node run.js -i $WEB_TESTS -o $OUTPUT -z -v -e -c WebKit/JSTests > jstests.log
APP_NAME=d8 node run.js -i $WEB_TESTS -o $OUTPUT -z -v -e -c CrashTests > crashtests.log

node gen_exceptions.js v8.log spidermonkey.log chakra.log jstests.log crashtests.log
                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/generated/                                          0000775 0000000 0000000 00000000000 14746647661 0023564 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/generated/exceptions.js                             0000664 0000000 0000000 00000322025 14746647661 0026307 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Autogenerated exceptions. Created with gen_exceptions.js.
 */
"use strict";

const skipped = [
  /* Tests with parse errors from v8 */
  "v8/test/mjsunit/es6/block-let-contextual-sloppy.js",
  "v8/test/mjsunit/es6/generators-parsing.js",
  "v8/test/mjsunit/es6/object-literals-property-shorthand.js",
  "v8/test/mjsunit/es6/sloppy-restrictive-block-function.js",
  "v8/test/mjsunit/es7/exponentiation-operator.js",
  "v8/test/mjsunit/harmony/bigint/property-names.js",
  "v8/test/mjsunit/harmony/class-static-blocks.js",
  "v8/test/mjsunit/harmony/import-from-compilation-errored.js",
  "v8/test/mjsunit/harmony/import-from-evaluation-errored.js",
  "v8/test/mjsunit/harmony/import-from-fetch-errored.js",
  "v8/test/mjsunit/harmony/import-from-instantiation-errored.js",
  "v8/test/mjsunit/harmony/logical-assignment-function-name.js",
  "v8/test/mjsunit/harmony/logical-assignment.js",
  "v8/test/mjsunit/harmony/numeric-separator.js",
  "v8/test/mjsunit/harmony/optional-chaining-this-private.js",
  "v8/test/mjsunit/harmony/private-brand-checks.js",
  "v8/test/mjsunit/harmony/private-fields-special-object.js",
  "v8/test/mjsunit/harmony/regexp-match-indices.js",
  "v8/test/mjsunit/html-comments.js",
  "v8/test/mjsunit/ignition/dead-code-source-position.js",
  "v8/test/mjsunit/regexp-linear-flag.js",
  "v8/test/mjsunit/regress/regress-436893.js",
  "v8/test/mjsunit/regress/regress-5692.js",
  "v8/test/mjsunit/regress/regress-740694.js",
  "v8/test/mjsunit/regress/regress-744292.js",
  "v8/test/mjsunit/regress/regress-797581.js",
  "v8/test/mjsunit/regress/regress-800651.js",
  "v8/test/mjsunit/regress/regress-crbug-1238467.js",
  "v8/test/mjsunit/regress/regress-crbug-1239907.js",
  "v8/test/mjsunit/regress/regress-crbug-412208.js",
  "v8/test/mjsunit/regress/regress-crbug-934166.js",
  "v8/test/mjsunit/regress/regress-v8-10604.js",
  "v8/test/mjsunit/serialize-embedded-error.js",
  "v8/test/mjsunit/switch.js",
  "v8/test/mjsunit/temporal/calendar-merge-fields.js",
  "v8/test/mjsunit/temporal/calendar-year-month-from-fields.js",
  "v8/test/mjsunit/temporal/plain-date-time-from.js",
  /* Tests with mutation errors from v8 */
  "v8/test/mjsunit/harmony/private-accessors.js",
  "v8/test/mjsunit/harmony/private-methods-empty-inner.js",
  "v8/test/mjsunit/harmony/private-methods.js",
  "v8/test/mjsunit/harmony/static-private-methods.js",
  "v8/test/mjsunit/regress/regress-crbug-1245870.js",
  "v8/test/mjsunit/regress/regress-v8-11360.js",
  /* Very slow tests from v8 */
  "v8/test/mjsunit/regress/wasm/regress-810973b.js", // 12.121s
  /* Tests with parse errors from spidermonkey */
  "spidermonkey/non262/BigInt/property-name-guessed-name.js",
  "spidermonkey/non262/BigInt/property-name.js",
  "spidermonkey/non262/Exceptions/catchguard-002-n.js",
  "spidermonkey/non262/Exceptions/catchguard-003-n.js",
  "spidermonkey/non262/Function/rest-parameter-names.js",
  "spidermonkey/non262/Unicode/regress-352044-02-n.js",
  "spidermonkey/non262/arrow-functions/arrow-not-as-end-of-statement.js",
  "spidermonkey/non262/arrow-functions/arrow-returning-arrow-with-block-body-followed-by-regexp.js",
  "spidermonkey/non262/async-functions/duplicate-__proto__.js",
  "spidermonkey/non262/destructuring/bug1396261.js",
  "spidermonkey/non262/destructuring/duplicate-__proto__.js",
  "spidermonkey/non262/destructuring/yield-in-object-destr-function.js",
  "spidermonkey/non262/destructuring/yield-in-object-destr-script.js",
  "spidermonkey/non262/destructuring/yield-with-escape-in-object-destr-function.js",
  "spidermonkey/non262/destructuring/yield-with-escape-in-object-destr-script.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-anon-fns.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-const.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-deleted-decl-binding.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-property-key-evaluation.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-scope-lookup.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-tdz.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment.js",
  "spidermonkey/non262/extensions/inc-dec-functioncall.js",
  "spidermonkey/non262/extensions/regress-406572.js",
  "spidermonkey/non262/fields/await-identifier-module-1.js",
  "spidermonkey/non262/fields/await-identifier-module-2.js",
  "spidermonkey/non262/fields/await-identifier-script.js",
  "spidermonkey/non262/fields/numeric-fields.js",
  "spidermonkey/non262/generators/syntax.js",
  "spidermonkey/non262/generators/yield-non-regexp.js",
  "spidermonkey/non262/jit/regress-451673.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-annex-b-if.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-annex-b-parameter.js",
  "spidermonkey/non262/module/bug1488117-import-namespace.js",
  "spidermonkey/non262/module/bug1488117.js",
  "spidermonkey/non262/module/bug1689499-a.js",
  "spidermonkey/non262/module/bug1689499-b.js",
  "spidermonkey/non262/module/bug1689499-c.js",
  "spidermonkey/non262/module/bug1689499-x.js",
  "spidermonkey/non262/module/bug1689499.js",
  "spidermonkey/non262/module/bug1693261.js",
  "spidermonkey/non262/module/module-export-name-star.js",
  "spidermonkey/non262/regress/regress-243389-n.js",
  "spidermonkey/non262/regress/regress-319391.js",
  "spidermonkey/non262/regress/regress-350253.js",
  "spidermonkey/non262/regress/regress-351515.js",
  "spidermonkey/non262/regress/regress-452498-168-2.js",
  "spidermonkey/non262/regress/regress-462292.js",
  "spidermonkey/non262/regress/regress-467495-03.js",
  "spidermonkey/non262/regress/regress-467495-04.js",
  "spidermonkey/non262/regress/regress-467495-05.js",
  "spidermonkey/non262/regress/regress-467495-06.js",
  "spidermonkey/non262/regress/regress-609617.js",
  "spidermonkey/non262/regress/regress-98901.js",
  "spidermonkey/non262/statements/for-of-iterator-close.js",
  "spidermonkey/test/expected/export/multi-header.js",
  "spidermonkey/test/expected/export/reftest-error-syntaxerror.js",
  "spidermonkey/test/expected/export/regular.js",
  "spidermonkey/test/expected/import/files/local/smTempBranch/language/export/escaped-foobarbaz.js",
  "spidermonkey/test/fixtures/export/.ignore.js",
  "spidermonkey/test/fixtures/export/multi-header.js",
  "spidermonkey/test/fixtures/export/reftest-error-syntaxerror.js",
  "spidermonkey/test/fixtures/export/regular.js",
  /* Tests with mutation errors from spidermonkey */
  "spidermonkey/non262/PrivateName/home-object-when-preceded-by-computed-key.js",
  /* Very slow tests from spidermonkey */
  "spidermonkey/non262/regress/regress-308085.js", // 17.41s
  /* Tests with parse errors from chakra */
  "chakra/Basics/keyword.js",
  "chakra/Bugs/OS_4341640.js",
  "chakra/Bugs/SuperAccessInGlobalLambda.js",
  "chakra/Closures/bug_OS_2525694.js",
  "chakra/Function/callsideeffects.js",
  "chakra/Function/crosssite_bind_main.js",
  "chakra/Function/deferredBadContinue.js",
  "chakra/LetConst/defer1.js",
  "chakra/LetConst/letlet.js",
  "chakra/LetConst/tdz2.js",
  "chakra/Optimizer/test115.js",
  "chakra/Optimizer/test135.js",
  "chakra/Optimizer/test146.js",
  "chakra/Scanner/InvalidCharacter.js",
  "chakra/Strings/long_concatstr.js",
  "chakra/benchmarks/ARES-6/Babylon/babylon-blob.js",
  "chakra/es6/DeferParseMethods.js",
  "chakra/es6/ES6Iterators-forof.js",
  "chakra/es6/blockscope-functionbinding.js",
  "chakra/es6/bug_OS17895855.js",
  "chakra/es6/bug_issue_3247_dep.js",
  "chakra/es6/bug_issue_5994.js",
  "chakra/es6/forInEdgeCases.js",
  "chakra/es6/generators-syntax.js",
  "chakra/es6/globalCatchNewTargetSyntaxError.js",
  "chakra/es6/globalNewTargetSyntaxError.js",
  "chakra/es6/globalParamCatchNewTargetSyntaxError.js",
  "chakra/es6/lambda-expr.js",
  "chakra/es6/objlit.js",
  "chakra/es6/supersyntax02.js",
  "chakra/es6/supersyntax05.js",
  "chakra/es6/supersyntax06.js",
  "chakra/es6/unicode_6_identifier_Blue511452.js",
  "chakra/es6/unicode_6_identifier_Blue524737.js",
  "chakra/es6module/GetModuleNamespace.js",
  "chakra/es6module/ModuleCircularBar.js",
  "chakra/es6module/ModuleCircularFoo.js",
  "chakra/es6module/ModuleComplexExports.js",
  "chakra/es6module/ModuleComplexReexports.js",
  "chakra/es6module/ModuleDefaultExport1.js",
  "chakra/es6module/ModuleDefaultExport2.js",
  "chakra/es6module/ModuleDefaultExport3.js",
  "chakra/es6module/ModuleDefaultExport4.js",
  "chakra/es6module/ModuleDefaultReexport.js",
  "chakra/es6module/ModuleReexportDefault.js",
  "chakra/es6module/ModuleSimpleExport.js",
  "chakra/es6module/ModuleSimpleReexport.js",
  "chakra/es6module/ValidExportDefaultStatement1.js",
  "chakra/es6module/ValidExportDefaultStatement2.js",
  "chakra/es6module/ValidExportStatements.js",
  "chakra/es6module/ValidExportStatements2.js",
  "chakra/es6module/ValidImportStatements.js",
  "chakra/es6module/ValidReExportStatements.js",
  "chakra/es6module/bug_OS12095746.js",
  "chakra/es6module/bug_OS12095746_mod0.js",
  "chakra/es6module/bug_OS12095746_mod1.js",
  "chakra/es6module/bug_OS12095746_mod2.js",
  "chakra/es6module/bug_OS12095746_moddep.js",
  "chakra/es6module/bug_OS12113549_module1.js",
  "chakra/es6module/bug_OS14562349.js",
  "chakra/es6module/bug_issue_3076.js",
  "chakra/es6module/bug_issue_3257/mod/mod0.js",
  "chakra/es6module/bug_issue_3257/mod1.js",
  "chakra/es6module/bug_issue_3257/mod2/mod2.js",
  "chakra/es6module/bug_issue_3257/script/script0.js",
  "chakra/es6module/bug_issue_5777.js",
  "chakra/es6module/dynamic_import_promises_5796.js",
  "chakra/es6module/exportBinding.js",
  "chakra/es6module/exportmodule.js",
  "chakra/es6module/module-3250-bug-dep.js",
  "chakra/es6module/module-3250-bug-dep2.js",
  "chakra/es6module/module-3250-ext-a.js",
  "chakra/es6module/module-3250-ext-b.js",
  "chakra/es6module/moduleExport1.js",
  "chakra/es6module/moduleImportTheError.js",
  "chakra/es6module/moduleThrowAnError.js",
  "chakra/es6module/module_1_2645.js",
  "chakra/es6module/module_2_2645.js",
  "chakra/es6module/module_4482_dep1.js",
  "chakra/es6module/module_4482_dep2.js",
  "chakra/es6module/module_4482_dep3.js",
  "chakra/es6module/module_4570_dep1.js",
  "chakra/es6module/module_4570_dep2.js",
  "chakra/es6module/moduletest2_mod0.js",
  "chakra/es6module/moduletest2_mod1a.js",
  "chakra/es6module/moduletest2_mod1b.js",
  "chakra/es6module/moduletest2_mod2a.js",
  "chakra/es6module/otherModule.js",
  "chakra/es6module/passmodule.js",
  "chakra/es6module/testDynamicImportfromModule.js",
  "chakra/es6module/top-level-await.js",
  "chakra/es7/json_superset.js",
  "chakra/inlining/bug_gh6303.js",
  "chakra/inlining/profilingbug.js",
  "chakra/stackfunc/602481.js",
  "chakra/strict/bug212755.js",
  "chakra/strict/delete.js",
  "chakra/strict/formal_samename1.js",
  "chakra/strict/formal_samename2.js",
  "chakra/strict/multiunit.js",
  "chakra/strict/nonSimpleParameterList.js",
  "chakra/strict/strictargs-deferred.js",
  "chakra/strict/strictargs2-deferred.js",
  "chakra/strict/strictargs3-deferred.js",
  "chakra/strict/stricteval-deferred.js",
  "chakra/strict/stricteval2-deferred.js",
  "chakra/strict/strictkwd-deferred.js",
  /* Tests with mutation errors from chakra */
  "chakra/es6module/bug_issue_3257.js",
  "chakra/es6module/moduleUrlInError.js",
  "chakra/es6module/moduletest1.js",
  "chakra/es6module/moduletest2.js",
  /* Very slow tests from chakra */
  "chakra/benchmarks/ARES-6/Air/payload-imaging-gaussian-blur-gaussianBlur.js", // 22.525s
  "chakra/benchmarks/ARES-6/Air/payload-gbemu-executeIteration.js", // 19.993s
  /* Tests with parse errors from jstests */
  "WebKit/JSTests/es6/non-strict_function_semantics_function_statements_in_if-statement_clauses.js",
  "WebKit/JSTests/stress/allocation-sinking-changing-structures.js",
  "WebKit/JSTests/stress/arrowfunction-lexical-bind-this-8.js",
  "WebKit/JSTests/stress/big-int-as-property-name.js",
  "WebKit/JSTests/stress/bytecode-for-rmw-with-invalid-right-side.js",
  "WebKit/JSTests/stress/escaped-keyword-identifiers.js",
  "WebKit/JSTests/stress/for-let-comma.js",
  "WebKit/JSTests/stress/global-lexical-environment-access-from-module.js",
  "WebKit/JSTests/stress/import-basic.js",
  "WebKit/JSTests/stress/import-exception.js",
  "WebKit/JSTests/stress/import-from-eval.js",
  "WebKit/JSTests/stress/import-reject-with-exception.js",
  "WebKit/JSTests/stress/import-tests/cocoa.js",
  "WebKit/JSTests/stress/import-tests/multiple.js",
  "WebKit/JSTests/stress/import-tests/multiple2.js",
  "WebKit/JSTests/stress/import-tests/should.js",
  "WebKit/JSTests/stress/import-with-empty-string.js",
  "WebKit/JSTests/stress/logical-assignment-operator-and.js",
  "WebKit/JSTests/stress/logical-assignment-operator-coalesce.js",
  "WebKit/JSTests/stress/logical-assignment-operator-or.js",
  "WebKit/JSTests/stress/module-namespace-access-change.js",
  "WebKit/JSTests/stress/module-namespace-access-non-constant.js",
  "WebKit/JSTests/stress/module-namespace-access-poly.js",
  "WebKit/JSTests/stress/module-namespace-access-set-fails.js",
  "WebKit/JSTests/stress/module-namespace-access-transitive-exports.js",
  "WebKit/JSTests/stress/module-namespace-access.js",
  "WebKit/JSTests/stress/module-namespace-object-caching.js",
  "WebKit/JSTests/stress/optional-chaining-and-private-fields.js",
  "WebKit/JSTests/stress/printableModuleKey-should-never-throw.js",
  "WebKit/JSTests/stress/private-in-error.js",
  "WebKit/JSTests/stress/private-in.js",
  "WebKit/JSTests/stress/re-execute-error-module.js",
  "WebKit/JSTests/stress/regress-170732.js",
  "WebKit/JSTests/stress/regress-191856.js",
  "WebKit/JSTests/stress/resources/error-module.js",
  "WebKit/JSTests/stress/resources/global-lexical-environment-access-from-module-child.js",
  "WebKit/JSTests/stress/resources/module-namespace-access-transitive-exports-2.js",
  "WebKit/JSTests/stress/resources/module-namespace-access-transitive-exports.js",
  "WebKit/JSTests/stress/resources/module-namespace-access.js",
  "WebKit/JSTests/stress/resources/shadow-realm-example-module.js",
  "WebKit/JSTests/stress/resources/to-string-module.js",
  "WebKit/JSTests/stress/resources/value-of-module.js",
  "WebKit/JSTests/stress/shadow-realm-import-value.js",
  "WebKit/JSTests/stress/sloppy-mode-function-hoisting.js",
  "WebKit/JSTests/stress/terminated-execution-error-in-promise.js",
  "WebKit/JSTests/stress/yield-label.js",
  /* Tests with mutation errors from jstests */
  "WebKit/JSTests/stress/BrandedStructure-should-keep-its-members-alive.js",
  "WebKit/JSTests/stress/class-private-method-access.js",
  "WebKit/JSTests/stress/declared-private-field-in-eval.js",
  "WebKit/JSTests/stress/private-access-nested-eval.js",
  "WebKit/JSTests/stress/private-access-nested.js",
  "WebKit/JSTests/stress/private-brand-installed-after-super-call-from-arrow-function.js",
  "WebKit/JSTests/stress/private-brand-installed-after-super-call-from-eval.js",
  "WebKit/JSTests/stress/private-getter-brand-check.js",
  "WebKit/JSTests/stress/private-getter-inner-class.js",
  "WebKit/JSTests/stress/private-members-get-and-set.js",
  "WebKit/JSTests/stress/private-method-brand-check.js",
  "WebKit/JSTests/stress/private-method-change-attribute-from-branded-structure.js",
  "WebKit/JSTests/stress/private-method-change-prototype-from-branded-structure.js",
  "WebKit/JSTests/stress/private-method-check-private-brand-ic.js",
  "WebKit/JSTests/stress/private-method-check-structure-miss.js",
  "WebKit/JSTests/stress/private-method-comparison.js",
  "WebKit/JSTests/stress/private-method-delete-property-from-branded-structure.js",
  "WebKit/JSTests/stress/private-method-extends-brand-check.js",
  "WebKit/JSTests/stress/private-method-get-and-call.js",
  "WebKit/JSTests/stress/private-method-invalid-multiple-brand-installation.js",
  "WebKit/JSTests/stress/private-method-invalidate-compiled-with-constant-symbol.js",
  "WebKit/JSTests/stress/private-method-nested-class.js",
  "WebKit/JSTests/stress/private-method-on-sealed-objects.js",
  "WebKit/JSTests/stress/private-method-on-uncacheable-dictionary.js",
  "WebKit/JSTests/stress/private-method-polymorphic-with-constant-symbol.js",
  "WebKit/JSTests/stress/private-method-set-brand-should-have-write-barrier.js",
  "WebKit/JSTests/stress/private-method-untyped-use.js",
  "WebKit/JSTests/stress/private-method-with-uncacheable-dictionary-transition.js",
  "WebKit/JSTests/stress/private-methods-and-accessors-postfix-node.js",
  "WebKit/JSTests/stress/private-methods-and-accessors-prefix-node.js",
  "WebKit/JSTests/stress/private-methods-inheritance.js",
  "WebKit/JSTests/stress/private-methods-inline-cache.js",
  "WebKit/JSTests/stress/private-methods-megamorphic-ic.js",
  "WebKit/JSTests/stress/private-methods-on-proxy.js",
  "WebKit/JSTests/stress/private-methods-poly-ic-multiple-classes.js",
  "WebKit/JSTests/stress/private-methods-poly-ic-single-class.js",
  "WebKit/JSTests/stress/private-names-available-on-direct-eval.js",
  "WebKit/JSTests/stress/private-names-available-on-eval-during-field-initialization.js",
  "WebKit/JSTests/stress/private-setter-brand-check.js",
  "WebKit/JSTests/stress/private-setter-inner-class.js",
  "WebKit/JSTests/stress/private-static-method-declaration-error.js",
  "WebKit/JSTests/stress/static-private-methods-and-accessor-inner-class.js",
  "WebKit/JSTests/stress/static-private-methods-and-accessor-multiple-evaluation.js",
  "WebKit/JSTests/stress/static-private-methods-and-accessors-postfix-node.js",
  "WebKit/JSTests/stress/static-private-methods-and-accessors-prefix-node.js",
  "WebKit/JSTests/stress/undeclared-private-field-in-eval.js",
  /* Very slow tests from jstests */
  "WebKit/JSTests/stress/string-locale-compare-uca-ducet.js", // 15.698s
  /* Tests with parse errors from crashtests */
  "CrashTests/115674352/util.js",
  "CrashTests/132918471/fast/js/resources/js-test-post.js",
  "CrashTests/135733397/resources/cookies-test-post.js",
  "CrashTests/158344541/support/refTestWait.js",
  "CrashTests/178811021/media-file.js",
  "CrashTests/178811021/video-test.js",
  "CrashTests/31681819/fast/js/resources/js-test-post.js",
  "CrashTests/4506116685037568/00422.js",
  "CrashTests/4523272292270080/02509.js",
  "CrashTests/4531783459405824/01124.js",
  "CrashTests/4563969814560768/1.0.2/conformance/resources/webgl-test-utils.js",
  "CrashTests/4563969814560768/1.0.2/conformance/resources/webgl-test.js",
  "CrashTests/4563969814560768/1.0.2/resources/js-test-pre.js",
  "CrashTests/4570511337324544/01067.js",
  "CrashTests/4592095397150720/619.js",
  "CrashTests/4620742728613888/02272.js",
  "CrashTests/4624768836632576/00383.js",
  "CrashTests/4675875294674944/04443.js",
  "CrashTests/4676310267068416/00041.js",
  "CrashTests/4676310267068416/meta-00041.js",
  "CrashTests/4689880216240128/meta-00116.js",
  "CrashTests/4710304564903936/resources/js-test-post.js",
  "CrashTests/4715062213476352/meta-00915.js",
  "CrashTests/4730791635451904/00498.js",
  "CrashTests/4731918950203392/04316.js",
  "CrashTests/4747813124571136/00737.js",
  "CrashTests/4777280799506432/01745.js",
  "CrashTests/4784915024707584/meta-00090.js",
  "CrashTests/4786126975139840/00686.js",
  "CrashTests/4804606392795136/00345.js",
  "CrashTests/4823335117783040/meta-00192.js",
  "CrashTests/4827148775849984/02704.js",
  "CrashTests/4835573090222080/00096.js",
  "CrashTests/4835573090222080/meta-00096.js",
  "CrashTests/4837730048278528/03052.js",
  "CrashTests/4843490131312640/03475.js",
  "CrashTests/4848225223245824/resources/js-test-post.js",
  "CrashTests/4850895428517888/2670.js",
  "CrashTests/4854644212105216/392.js",
  "CrashTests/4855156194934784/meta-00080.js",
  "CrashTests/4899093893742592/02412.js",
  "CrashTests/4914294111076352/resources/worker-common.js",
  "CrashTests/4920133693472768/09913.js",
  "CrashTests/4924640359088128/resources/methods.js",
  "CrashTests/4966722004058112/01202.js",
  "CrashTests/4996582417891328/00314.js",
  "CrashTests/5010966233481216/05443.js",
  "CrashTests/5016449390477312/02595.js",
  "CrashTests/5019028805124096/01923.js",
  "CrashTests/5024919414112256/02190.js",
  "CrashTests/5026147325968384/01281.js",
  "CrashTests/5034236802498560/00038.js",
  "CrashTests/5034236802498560/meta-00038.js",
  "CrashTests/5036266378756096/resources/js-test.js",
  "CrashTests/5040821977219072/07176.js",
  "CrashTests/5047964758441984/02170.js",
  "CrashTests/5064701201350656/mjsunit_modified.js",
  "CrashTests/5071018176282624/05782.js",
  "CrashTests/5073353348087808/03720.js",
  "CrashTests/5083537469079552/03453.js",
  "CrashTests/5091969183776768/js/angular.js",
  "CrashTests/5104674803023872/meta-00066.js",
  "CrashTests/5110246766673920/117.js",
  "CrashTests/5120973776420864/00299.js",
  "CrashTests/5126730184654848/00846.js",
  "CrashTests/5140656268640256/resources/interpolation-test.js",
  "CrashTests/5151090662178816/01492.js",
  "CrashTests/5153368765628416/00787.js",
  "CrashTests/5157575680327680/06055.js",
  "CrashTests/5159014924288000/01496.js",
  "CrashTests/5164793027624960/01357.js",
  "CrashTests/5165045173846016/Common/MV.js",
  "CrashTests/5168023154720768/meta-00125.js",
  "CrashTests/5171658670473216/02099.js",
  "CrashTests/5190716938387456/05795.js",
  "CrashTests/5192473061359616/meta-00780.js",
  "CrashTests/5197954434596864/01324.js",
  "CrashTests/5200019587334144/meta-00398.js",
  "CrashTests/5222394685292544/resources/stress-js-execution.js",
  "CrashTests/5226258591121408/04850.js",
  "CrashTests/5226692407984128/meta-00030.js",
  "CrashTests/5238861996490752/01351.js",
  "CrashTests/5242104612651008/mjsunit_modified.js",
  "CrashTests/5254331529166848/meta-00409.js",
  "CrashTests/5254663852261376/meta-00497.js",
  "CrashTests/5280655383724032/meta-00355.js",
  "CrashTests/5283736101322752/00921.js",
  "CrashTests/5289653387919360/635.js",
  "CrashTests/5301431549820928/meta-00738.js",
  "CrashTests/5335637787934720/mersenne.js",
  "CrashTests/5337864091729920/00078.js",
  "CrashTests/5346139261108224/meta-00086.js",
  "CrashTests/5354535555825664/01561.js",
  "CrashTests/5402562393276416/meta-00565.js",
  "CrashTests/5418169017303040/156.js",
  "CrashTests/5435516837429248/02591.js",
  "CrashTests/5443796254064640/08661.js",
  "CrashTests/5474124668600320/meta-00992.js",
  "CrashTests/5486126228570112/02840.js",
  "CrashTests/5487631620112384/animations/resources/animation-test-helpers.js",
  "CrashTests/5521703332741120/00376.js",
  "CrashTests/5530153792045056/meta-00910.js",
  "CrashTests/5540548491608064/01146.js",
  "CrashTests/5541203771916288/currentscript.js",
  "CrashTests/5559694775025664/imported/w3c/html-templates/testcommon.js",
  "CrashTests/5559694775025664/resources/testharness.js",
  "CrashTests/5559694775025664/resources/testharnessreport.js",
  "CrashTests/5568247077011456/04042.js",
  "CrashTests/5593713261412352/319.js",
  "CrashTests/5606041047007232/02795.js",
  "CrashTests/5606702255964160/meta-00168.js",
  "CrashTests/5615411944226816/02684.js",
  "CrashTests/5630063870214144/02130.js",
  "CrashTests/5630225822121984/03637.js",
  "CrashTests/5635645835182080/worker-serviceworker-7636bedbbb1f120d.js",
  "CrashTests/5639628713492480/04139.js",
  "CrashTests/5642849944993792/resources/js-test.js",
  "CrashTests/5644307466878976/__MACOSX/._audio.js",
  "CrashTests/5644307466878976/__MACOSX/._processor.js",
  "CrashTests/5649862583648256/meta-00236.js",
  "CrashTests/5650039238033408/00812.js",
  "CrashTests/5651703040835584/resources/testharnessreport.js",
  "CrashTests/5652465613406208/4584.js",
  "CrashTests/5661345388167168/resources/stress-js-execution.js",
  "CrashTests/5668694740172800/meta-00294.js",
  "CrashTests/5672678890405888/resources/js-test.js",
  "CrashTests/5685487336161280/03642.js",
  "CrashTests/5686447370665984/sdk/tests/conformance/ogles/ogles-utils.js",
  "CrashTests/5686447370665984/sdk/tests/conformance/resources/glsl-conformance-test.js",
  "CrashTests/5686447370665984/sdk/tests/conformance/resources/webgl-test-utils.js",
  "CrashTests/5686447370665984/sdk/tests/resources/js-test-pre.js",
  "CrashTests/5688866685321216/09854.js",
  "CrashTests/5689884189392896/02723.js",
  "CrashTests/5694701996867584/conformance/resources/webgl-test.js",
  "CrashTests/5703976838234112/test.js",
  "CrashTests/5707472246472704/1443.js",
  "CrashTests/5712001662517248/report.js",
  "CrashTests/5721502735532032/03042.js",
  "CrashTests/5734750167105536/01271.js",
  "CrashTests/5735023732064256/meta-00070.js",
  "CrashTests/5736353084342272/resources/testharness.js",
  "CrashTests/5737388710821888/resources/js-test.js",
  "CrashTests/5738737345822720/svg/dynamic-updates/resources/SVGTestCase.js",
  "CrashTests/5744365229441024/resources/testharness.js",
  "CrashTests/5745342726537216/meta-00053.js",
  "CrashTests/5747146314285056/support/alertAssert.sub.js",
  "CrashTests/5747146314285056/support/logTest.sub.js",
  "CrashTests/5755508264534016/00224.js",
  "CrashTests/5763511307337728/04651.js",
  "CrashTests/5774432061095936/00972.js",
  "CrashTests/5798263663099904/01459.js",
  "CrashTests/5802116248764416/06966.js",
  "CrashTests/5806021251432448/background.js",
  "CrashTests/58219635/fast/js/resources/js-test-post.js",
  "CrashTests/5826758986170368/resources/js-test-post.js",
  "CrashTests/5841445051170816/resources/js-test-pre.js",
  "CrashTests/5842510916091904/resources/webgl_test_files/resources/js-test-post.js",
  "CrashTests/58693299/selfhtml.js",
  "CrashTests/5910324886634496/02597.js",
  "CrashTests/5925149103357952/webaudio/resources/audit.js",
  "CrashTests/5931087833333760/03890.js",
  "CrashTests/5933875666616320/01048.js",
  "CrashTests/5949184339083264/poc.js",
  "CrashTests/5950573451804672/494.js",
  "CrashTests/5950617700007936/01848.js",
  "CrashTests/5970316012290048/414.js",
  "CrashTests/5996165326962688/meta-00146.js",
  "CrashTests/6010230465626112/resources/webgl_test_files/js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js",
  "CrashTests/6018592823836672/support/refTestWait.js",
  "CrashTests/6026840030314496/00848.js",
  "CrashTests/6037361396809728/02741.js",
  "CrashTests/6049932086083584/03169.js",
  "CrashTests/6051257375784960/03082.js",
  "CrashTests/6071110049988608/00548.js",
  "CrashTests/6073192676327424/resources/js-test-pre.js",
  "CrashTests/6085702952681472/00521.js",
  "CrashTests/6113149884563456/02823.js",
  "CrashTests/6131247808839680/00012.js",
  "CrashTests/6132283327971328/resources/autosizingTest.js",
  "CrashTests/6150179231105024/conformance/resources/webgl-test.js",
  "CrashTests/6158905865666560/meta-00624.js",
  "CrashTests/6179220893204480/02159.js",
  "CrashTests/6183415490019328/02656.js",
  "CrashTests/6198951751188480/1248.js",
  "CrashTests/6204924829630464/meta-00272.js",
  "CrashTests/6216405020835840/03985.js",
  "CrashTests/6218202061209600/mersenne.js",
  "CrashTests/6220111297118208/meta-00050.js",
  "CrashTests/6223202209234944/02648.js",
  "CrashTests/6239384157552640/meta-00271.js",
  "CrashTests/6250055858126848/04619.js",
  "CrashTests/6255231244697600/meta-00216.js",
  "CrashTests/6255916311379968/1372.js",
  "CrashTests/6259138054324224/meta-00172.js",
  "CrashTests/6263485068017664/MediaSessionTestUtils.js",
  "CrashTests/6278159702425600/01463.js",
  "CrashTests/6280577705705472/1146.js",
  "CrashTests/6285336190124032/01621.js",
  "CrashTests/6295241556492288/01763.js",
  "CrashTests/6304143111356416/00782.js",
  "CrashTests/6328755580567552/resources/js-test.js",
  "CrashTests/6328755580567552/svg/dynamic-updates/resources/SVGTestCase.js",
  "CrashTests/6330764245073920/poc1.js",
  "CrashTests/6332832186761216/00681.js",
  "CrashTests/6339944789049344/04142.js",
  "CrashTests/6345007341764608/00699.js",
  "CrashTests/6351789088833536/meta-00122.js",
  "CrashTests/6352599495475200/meta-00093.js",
  "CrashTests/6358320674242560/resources/js-test.js",
  "CrashTests/6359996105359360/934166-poc.js",
  "CrashTests/6362821967740928/00524.js",
  "CrashTests/6374053756272640/824.js",
  "CrashTests/6387037962240000/02996.js",
  "CrashTests/6394941698998272/meta-00167.js",
  "CrashTests/6403694305476608/meta-00079.js",
  "CrashTests/6405187880353792/meta-00826.js",
  "CrashTests/6406267560263680/02111.js",
  "CrashTests/6406622734974976/meta-00188.js",
  "CrashTests/6427802493779968/meta-00335.js",
  "CrashTests/6440904627060736/meta-00149.js",
  "CrashTests/6443097497010176/1.0.2/resources/webgl_test_files/conformance/resources/webgl-test-utils.js",
  "CrashTests/6443097497010176/1.0.2/resources/webgl_test_files/conformance/resources/webgl-test.js",
  "CrashTests/6443097497010176/1.0.2/resources/webgl_test_files/resources/js-test-pre.js",
  "CrashTests/6443097497010176/1.0.2/resources/webkit-webgl-test-harness.js",
  "CrashTests/6449605693931520/meta-00261.js",
  "CrashTests/6452658006392832/meta-00824.js",
  "CrashTests/6463535346614272/meta-00886.js",
  "CrashTests/6509855193169920/03031.js",
  "CrashTests/6530413356122112/meta-00391.js",
  "CrashTests/6541223017054208/01484.js",
  "CrashTests/6550225930944512/mnt/scratch0/clusterfuzz/slave-bot/inputs/fuzzers/inferno_twister_custom_bundle/inferno_twister_custom_bundle_data/moz_tests/dom/workers/test/threadErrors_worker1.js",
  "CrashTests/6551265423982592/00708.js",
  "CrashTests/6552552797503488/bug_41414141.js",
  "CrashTests/6572559555166208/report.js",
  "CrashTests/6576437049950208/conformance/resources/glsl-generator.js",
  "CrashTests/6576437049950208/resources/js-test-pre.js",
  "CrashTests/6586504922267648/00672.js",
  "CrashTests/6597230699216896/meta-00299.js",
  "CrashTests/6613865297084416/builds/chromium-browser-syzyasan_win32-release/revisions/asan-win32-release-276100/resources/inspector/main/Main.js",
  "CrashTests/6617130045341696/02588.js",
  "CrashTests/6622275291840512/resources/js-test.js",
  "CrashTests/6644133880397824/00752.js",
  "CrashTests/6646069054013440/poc.js",
  "CrashTests/6658388688371712/00042.js",
  "CrashTests/6659440421109760/00027.js",
  "CrashTests/6695292278931456/04706.js",
  "CrashTests/6727300586405888/builds/chromium-browser-syzyasan_win32-release/revisions/asan-win32-release-259551/resources/inspector/Main.js",
  "CrashTests/6731147175526400/meta-00107.js",
  "CrashTests/6744125769252864/494.js",
  /* Tests with mutation errors from crashtests */
  "CrashTests/4540193473101824/00967.js",
  "CrashTests/4542853924782080/01450.js",
  "CrashTests/4575654914293760/01532.js",
  "CrashTests/4652594229411840/00000.js",
  "CrashTests/4656490341466112/00126.js",
  "CrashTests/4672370177736704/00528.js",
  "CrashTests/4797755955937280/857.js",
  "CrashTests/4798856567717888/04694.js",
  "CrashTests/4804923870150656/03027.js",
  "CrashTests/4895570342707200/02467.js",
  "CrashTests/4983976359100416/02090.js",
  "CrashTests/5087167542853632/02505.js",
  "CrashTests/5095010520858624/2806.js",
  "CrashTests/5105917793468416/00610.js",
  "CrashTests/5136618234314752/00136.js",
  "CrashTests/5138652353593344/410.js",
  "CrashTests/5200855060774912/00023.js",
  "CrashTests/5357835741888512/568.js",
  "CrashTests/5518580170096640/00960.js",
  "CrashTests/5604116503199744/00316.js",
  "CrashTests/5631123291111424/00708.js",
  "CrashTests/5666447379988480/1339.js",
  "CrashTests/5692170731847680/195.js",
  "CrashTests/5701970444288000/00241.js",
  "CrashTests/5741122957148160/2584.js",
  "CrashTests/5748217537429504/repro.js",
  "CrashTests/5834909260709888/01407.js",
  "CrashTests/5927058168610816/01389.js",
  "CrashTests/6005687605002240/00969.js",
  "CrashTests/6245901978370048/1543.js",
  "CrashTests/6263564054888448/1184.js",
  "CrashTests/6316400054960128/165.js",
  "CrashTests/6396053053243392/00161.js",
  "CrashTests/6491889133158400/01408.js",
  "CrashTests/6551672999968768/259.js",
  "CrashTests/6666268416671744/09877.js",
  /* Very slow tests from crashtests */
  "CrashTests/5680390288441344/scripts/extension.js", // 45.763s
  "CrashTests/5666182802309120/binaryen-1564.js", // 24.367s
  "CrashTests/5680390288441344/scripts/feedback.js", // 22.301s
  "CrashTests/5306741051621376/binaryen-2962.js", // 18.079s
  "CrashTests/6270084030201856/binaryen-634.js", // 14.106s
  "CrashTests/6071297320747008/324.js", // 12.704s
  "CrashTests/6316400054960128/165.js", // 11.802s
  "CrashTests/5691805950083072/binaryen-2729.js", // 11.693s
];
const softSkipped = [
  /* Slow tests from v8 */
  "v8/test/mjsunit/wasm/wasm-module-builder.js", // 7.537s
  "v8/test/mjsunit/object-literal.js", // 3.837s
  /* Slow tests from spidermonkey */
  "spidermonkey/non262/statements/regress-74474-002.js", // 8.047s
  "spidermonkey/non262/statements/regress-74474-003.js", // 6.488s
  "spidermonkey/non262/extensions/dataview.js", // 3.727s
  /* Slow tests from chakra */
  "chakra/TaggedIntegers/loops.js", // 8.255s
  "chakra/benchmarks/ARES-6/Air/payload-typescript-scanIdentifier.js", // 5.26s
  "chakra/benchmarks/ARES-6/Air/payload-airjs-ACLj8C.js", // 3.713s
  "chakra/benchmarks/Octane/crypto.js", // 3.463s
  "chakra/benchmarks/Octane_Closure/crypto.js", // 3.354s
  /* Slow tests from jstests */
  "WebKit/JSTests/stress/v8-crypto-strict.js", // 2.56s
  "WebKit/JSTests/stress/v8-regexp-strict.js", // 2.555s
  /* Slow tests from crashtests */
  "CrashTests/5138652353593344/410.js", // 9.937s
  "CrashTests/6250982932086784/binaryen-538.js", // 9.721s
  "CrashTests/4741082707132416/binaryen-1700.js", // 9.631s
  "CrashTests/5082337238712320/binaryen-3268.js", // 9.475s
  "CrashTests/5187171718529024/844.js", // 9.422s
  "CrashTests/6472801805664256/common/js/frameworks/jquery-1.8.2.min.js", // 8.621s
  "CrashTests/4602127226241024/js/jquery.js", // 8.489s
  "CrashTests/5657174977806336/binaryen-1398.js", // 8.434s
  "CrashTests/4614296351277056/js/jquery-1.8.0.min.js", // 8.29s
  "CrashTests/5657116044951552/scripts/libs/jquery.js", // 8.25s
  "CrashTests/5091969183776768/js/jquery.js", // 8.217s
  "CrashTests/5550653104455680/js/jquery-1.8.0.min.js", // 8.214s
  "CrashTests/6649057641037824/binaryen-3706.js", // 7.484s
  "CrashTests/4612142496743424/binaryen-1882.js", // 7.364s
  "CrashTests/5365583999664128/extensionData/plugins/4_jquery_1_7_1.js", // 7.253s
  "CrashTests/6183950024441856/common/widget-api/widgets/common/jquery-1.7.1.min.js", // 7.168s
  "CrashTests/5049543056424960/inc/jquery-2.1.0.min.js", // 7.118s
  "CrashTests/6183950024441856/common/js/jquery-1.7.1.min.js", // 7.043s
  "CrashTests/6183950024441856/common/components/menu/js/jquery-1.7.1.min.js", // 6.928s
  "CrashTests/4615141375344640/lib/jquery.js", // 6.769s
  "CrashTests/6327982568898560/binaryen-862.js", // 6.678s
  "CrashTests/6240393225306112/48.js", // 5.382s
  "CrashTests/5689977077891072/01770.js", // 4.938s
  "CrashTests/5365583999664128/extensionData/plugins/17_jQuery.js", // 4.922s
  "CrashTests/6636948839202816/121.js", // 4.907s
  "CrashTests/4787946390093824/jquery-ui-1.8.2.custom/js/jquery-1.4.2.min.js", // 4.607s
  "CrashTests/4633495124312064/634.js", // 4.597s
  "CrashTests/5157721919979520/00935.js", // 4.518s
  "CrashTests/5533984447266816/626.js", // 4.445s
  "CrashTests/4528969625894912/encaiiljifbdbjlphpgpiimidegddhic/lib/3rdparty/jquery.js", // 4.33s
  "CrashTests/4528969625894912/lib/3rdparty/jquery.js", // 4.283s
  "CrashTests/5706022850527232/jquery-ui-1.8.2.custom/js/jquery-1.4.2.min.js", // 4.247s
  "CrashTests/5274731158568960/test2.js", // 4.218s
  "CrashTests/6215250211504128/05886.js", // 4.169s
  "CrashTests/6103088053354496/965.js", // 3.924s
  "CrashTests/5293298093391872/65.js", // 3.242s
  "CrashTests/5540518327746560/js/webgl-test-utils.js", // 3.075s
  "CrashTests/6505173049999360/binaryen-1108.js", // 2.989s
  "CrashTests/5020463045804032/js/webgl-test-utils.js", // 2.979s
  "CrashTests/5765813295185920/js/webgl-test-utils.js", // 2.937s
  "CrashTests/6411936120766464/js/webgl-test-utils.js", // 2.928s
  "CrashTests/4756083598753792/js/webgl-test-utils.js", // 2.893s
  "CrashTests/6564750484373504/js/webgl-test-utils.js", // 2.881s
  "CrashTests/5748523325521920/resources/webgl_test_files/js/webgl-test-utils.js", // 2.877s
  "CrashTests/5724904516812800/js/webgl-test-utils.js", // 2.863s
  "CrashTests/5654708333903872/js/webgl-test-utils.js", // 2.852s
  "CrashTests/5658246410207232/js/webgl-test-utils.js", // 2.835s
  "CrashTests/6090022799867904/js/webgl-test-utils.js", // 2.816s
  "CrashTests/5804707603021824/workers/wasm-hashset/worker.js", // 2.81s
  "CrashTests/5767297823473664/js/webgl-test-utils.js", // 2.797s
  "CrashTests/5748791416979456/js/webgl-test-utils.js", // 2.788s
  "CrashTests/4727886732066816/03031.js", // 2.783s
  "CrashTests/5147619843702784/js/webgl-test-utils.js", // 2.757s
  "CrashTests/4561088605323264/js/webgl-test-utils.js", // 2.748s
  "CrashTests/5970862301904896/wasm-hashset/many-test.js", // 2.739s
  "CrashTests/5804707603021824/workers/wasm-hashset/many-test.js", // 2.738s
  "CrashTests/5195343992586240/binaryen-2577.js", // 2.737s
  "CrashTests/6107728614522880/wasm-hashset/many-test.js", // 2.732s
  "CrashTests/4808534067838976/113.js", // 2.702s
  "CrashTests/4521096081309696/workers/wasm-hashset/many-test-2.js", // 2.693s
  "CrashTests/5512230554370048/binaryen-229.js", // 2.688s
  "CrashTests/4764215218012160/workers/wasm-hashset/test.js", // 2.683s
  "CrashTests/6107728614522880/wasm-hashset/worker.js", // 2.664s
  "CrashTests/5934400840466432/resources/testharness.js", // 2.65s
  "CrashTests/6171607952523264/workers/wasm-hashset/many-test-2.js", // 2.65s
  "CrashTests/5649522772541440/js/webgl-test-utils.js", // 2.63s
  "CrashTests/4521096081309696/workers/wasm-hashset/many-worker-2.js", // 2.616s
  "CrashTests/5877660912451584/js/webgl-test-utils.js", // 2.611s
  "CrashTests/5144726426222592/957.js", // 2.609s
  "CrashTests/4750804070957056/js/webgl-test-utils.js", // 2.605s
  "CrashTests/4764215218012160/workers/wasm-hashset/worker.js", // 2.592s
  "CrashTests/5436877461782528/binaryen-4415.js", // 2.579s
  "CrashTests/4544669955129344/binaryen-1549.js", // 2.548s
  "CrashTests/5684927436423168/js/webgl-test-utils.js", // 2.533s
  "CrashTests/5216366704721920/js/webgl-test-utils.js", // 2.52s
  "CrashTests/4780408753094656/js/webgl-test-utils.js", // 2.515s
  "CrashTests/6113858805301248/js/webgl-test-utils.js", // 2.488s
  "CrashTests/4614296351277056/js/esprima.js", // 2.487s
  "CrashTests/6643859697434624/00989.js", // 2.482s
  "CrashTests/5148692865417216/binaryen-587.js", // 2.476s
  "CrashTests/5152046202093568/binaryen-397.js", // 2.457s
  "CrashTests/6396634260570112/builds/chromium-browser-asan_linux-release_4392242b7f59878a2775b4607420a2b37e17ff13/revisions/asan-linux-release-616366/gen/third_party/blink/public/mojom/payments/payment_request.mojom.js", // 2.454s
  "CrashTests/6264668110323712/js/webgl-test-utils.js", // 2.448s
  "CrashTests/5709689405571072/js/webgl-test-utils.js", // 2.443s
  "CrashTests/5720170289692672/js/webgl-test-utils.js", // 2.441s
  "CrashTests/5720530023612416/binaryen-1954.js", // 2.427s
  "CrashTests/5130481752735744/817.js", // 2.419s
  "CrashTests/5692170731847680/195.js", // 2.418s
  "CrashTests/5903614327128064/js/webgl-test-utils.js", // 2.412s
  "CrashTests/5150788929454080/js/webgl-test-utils.js", // 2.401s
  "CrashTests/4763495091142656/js/webgl-test-utils.js", // 2.39s
  "CrashTests/5636770818686976/00408.js", // 2.374s
  "CrashTests/6159546553466880/js/webgl-test-utils.js", // 2.363s
  "CrashTests/4895116383485952/js/webgl-test-utils.js", // 2.35s
  "CrashTests/4986854798262272/js/webgl-test-utils.js", // 2.342s
  "CrashTests/6207235662020608/js/webgl-test-utils.js", // 2.34s
  "CrashTests/5205072808771584/js/webgl-test-utils.js", // 2.336s
  "CrashTests/6103004909666304/js/webgl-test-utils.js", // 2.331s
  "CrashTests/6021155845308416/js/webgl-test-utils.js", // 2.328s
  "CrashTests/4712093587865600/js/webgl-test-utils.js", // 2.314s
  "CrashTests/5550653104455680/js/esprima.js", // 2.313s
  "CrashTests/5803513008095232/js/webgl-test-utils.js", // 2.311s
  "CrashTests/6585627176992768/binaryen-655.js", // 2.309s
  "CrashTests/6231966593318912/js/webgl-test-utils.js", // 2.289s
  "CrashTests/6522661136760832/js/webgl-test-utils.js", // 2.289s
  "CrashTests/4849910154854400/2.0.0/resources/webgl_test_files/js/webgl-test-utils.js", // 2.289s
  "CrashTests/5316130750332928/js/webgl-test-utils.js", // 2.286s
  "CrashTests/4786020456595456/resources/testharness.js", // 2.284s
  "CrashTests/5246233363611648/js/webgl-test-utils.js", // 2.283s
  "CrashTests/4610688298057728/js/webgl-test-utils.js", // 2.271s
  "CrashTests/5732319423168512/js/webgl-test-utils.js", // 2.27s
  "CrashTests/6117827240263680/js/webgl-test-utils.js", // 2.266s
  "CrashTests/6446057308028928/js/webgl-test-utils.js", // 2.265s
  "CrashTests/5474186315956224/js/webgl-test-utils.js", // 2.265s
  "CrashTests/5081168717545472/js/webgl-test-utils.js", // 2.263s
  "CrashTests/5289255386742784/js/webgl-test-utils.js", // 2.258s
  "CrashTests/5153121645625344/binaryen-602.js", // 2.257s
  "CrashTests/6307834848608256/js/webgl-test-utils.js", // 2.234s
  "CrashTests/5069958615400448/js/webgl-test-utils.js", // 2.228s
  "CrashTests/5673981645684736/js/webgl-test-utils.js", // 2.216s
  "CrashTests/6371786506371072/js/webgl-test-utils.js", // 2.208s
  "CrashTests/5766886287081472/js/webgl-test-utils.js", // 2.207s
  "CrashTests/5112085437743104/js/webgl-test-utils.js", // 2.195s
  "CrashTests/5875816496627712/js/webgl-test-utils.js", // 2.187s
  "CrashTests/4902839495032832/2.0.0/resources/webgl_test_files/js/webgl-test-utils.js", // 2.185s
  "CrashTests/5940011987107840/js/webgl-test-utils.js", // 2.181s
  "CrashTests/5934321914609664/js/webgl-test-utils.js", // 2.18s
  "CrashTests/5447031043915776/js/webgl-test-utils.js", // 2.173s
  "CrashTests/5667434598760448/js/webgl-test-utils.js", // 2.172s
  "CrashTests/4722289303355392/js/webgl-test-utils.js", // 2.158s
  "CrashTests/4928460350029824/js/webgl-test-utils.js", // 2.152s
  "CrashTests/6612369747476480/04469.js", // 2.137s
  "CrashTests/5304417640513536/js/webgl-test-utils.js", // 2.134s
  "CrashTests/5154715558084608/572.js", // 2.132s
  "CrashTests/5710180189995008/js/webgl-test-utils.js", // 2.122s
  "CrashTests/5921882795933696/js/webgl-test-utils.js", // 2.119s
  "CrashTests/6578304131006464/js/webgl-test-utils.js", // 2.109s
  "CrashTests/5753604559470592/03311.js", // 2.102s
  "CrashTests/5630410519478272/916.js", // 2.092s
  "CrashTests/4571384448811008/fast/canvas/webgl/resources/webgl-test-utils-full.js", // 2.069s
  "CrashTests/6343749881036800/01604.js", // 2.055s
  "CrashTests/5657181087727616/binaryen-125.js", // 2.031s
  "CrashTests/4979734430351360/builds/chromium-browser-asan_linux-release_4392242b7f59878a2775b4607420a2b37e17ff13/revisions/asan-linux-release-587925/gen/third_party/blink/public/mojom/payments/payment_request.mojom.js", // 2.019s
  "CrashTests/6030846597005312/binaryen-97.js", // 2.015s
  "CrashTests/4661285908905984/builds/chromium-browser-asan_linux-release_4392242b7f59878a2775b4607420a2b37e17ff13/revisions/asan-linux-release-578254/gen/third_party/blink/public/platform/modules/payments/payment_request.mojom.js", // 2.014s
  "CrashTests/4864843149213696/builds/chromium-browser-asan_linux-release_4392242b7f59878a2775b4607420a2b37e17ff13/revisions/asan-linux-release-588015/gen/third_party/blink/public/mojom/payments/payment_request.mojom.js", // 2.014s
];
const sloppy = [
  /* Tests requiring sloppy mode from v8 */
  "v8/test/mjsunit/accessors-on-global-object.js",
  "v8/test/mjsunit/argument-assigned.js",
  "v8/test/mjsunit/argument-named-arguments.js",
  "v8/test/mjsunit/arguments-apply.js",
  "v8/test/mjsunit/arguments-lazy.js",
  "v8/test/mjsunit/arguments-read-and-assignment.js",
  "v8/test/mjsunit/arguments.js",
  "v8/test/mjsunit/array-indexing-receiver.js",
  "v8/test/mjsunit/arrow-with.js",
  "v8/test/mjsunit/asm-directive.js",
  "v8/test/mjsunit/baseline/test-baseline.js",
  "v8/test/mjsunit/compiler/delete.js",
  "v8/test/mjsunit/compiler/global-delete.js",
  "v8/test/mjsunit/compiler/global-var-delete.js",
  "v8/test/mjsunit/compiler/opt-next-call-turbo.js",
  "v8/test/mjsunit/compiler/optimized-for-in.js",
  "v8/test/mjsunit/compiler/optimized-with.js",
  "v8/test/mjsunit/compiler/regress-1037771.js",
  "v8/test/mjsunit/compiler/regress-665680.js",
  "v8/test/mjsunit/compiler/regress-669517.js",
  "v8/test/mjsunit/compiler/rotate.js",
  "v8/test/mjsunit/compiler/try-catch-deopt.js",
  "v8/test/mjsunit/compiler/try-context.js",
  "v8/test/mjsunit/compiler/uint32.js",
  "v8/test/mjsunit/compiler/variables.js",
  "v8/test/mjsunit/context-calls-maintained.js",
  "v8/test/mjsunit/delete-global-properties.js",
  "v8/test/mjsunit/delete-in-with.js",
  "v8/test/mjsunit/delete-vars-from-eval.js",
  "v8/test/mjsunit/delete.js",
  "v8/test/mjsunit/deopt-with-fp-regs.js",
  "v8/test/mjsunit/elements-kind.js",
  "v8/test/mjsunit/es6/array-concat-sloppy-arguments-with-dupes.js",
  "v8/test/mjsunit/es6/arrow-functions-lexical-arguments.js",
  "v8/test/mjsunit/es6/arrow-functions-this.js",
  "v8/test/mjsunit/es6/block-eval-var-over-let.js",
  "v8/test/mjsunit/es6/block-let-contextual-sloppy.js",
  "v8/test/mjsunit/es6/block-sloppy-function.js",
  "v8/test/mjsunit/es6/classes.js",
  "v8/test/mjsunit/es6/default-parameters.js",
  "v8/test/mjsunit/es6/destructuring-assignment.js",
  "v8/test/mjsunit/es6/generator-destructuring.js",
  "v8/test/mjsunit/es6/generators-iteration.js",
  "v8/test/mjsunit/es6/generators-parsing.js",
  "v8/test/mjsunit/es6/global-proto-proxy.js",
  "v8/test/mjsunit/es6/new-target.js",
  "v8/test/mjsunit/es6/object-literals-property-shorthand.js",
  "v8/test/mjsunit/es6/proxies-function.js",
  "v8/test/mjsunit/es6/proxies-with-unscopables.js",
  "v8/test/mjsunit/es6/proxies-with.js",
  "v8/test/mjsunit/es6/regress/regress-crbug-461520.js",
  "v8/test/mjsunit/es6/sloppy-restrictive-block-function.js",
  "v8/test/mjsunit/es6/super.js",
  "v8/test/mjsunit/es6/templates.js",
  "v8/test/mjsunit/es6/unscopables.js",
  "v8/test/mjsunit/es7/array-includes-receiver.js",
  "v8/test/mjsunit/es7/exponentiation-operator.js",
  "v8/test/mjsunit/es8/async-await-basic.js",
  "v8/test/mjsunit/es8/async-destructuring.js",
  "v8/test/mjsunit/eval.js",
  "v8/test/mjsunit/for-in.js",
  "v8/test/mjsunit/function-arguments-duplicate.js",
  "v8/test/mjsunit/getter-in-prototype.js",
  "v8/test/mjsunit/global-arrow-delete-this.js",
  "v8/test/mjsunit/global-infinity.js",
  "v8/test/mjsunit/global-load-from-eval-in-with.js",
  "v8/test/mjsunit/global-load-from-nested-eval.js",
  "v8/test/mjsunit/global-nan.js",
  "v8/test/mjsunit/global-undefined.js",
  "v8/test/mjsunit/global-vars-with.js",
  "v8/test/mjsunit/harmony/array-findlast-unscopables.js",
  "v8/test/mjsunit/harmony/bigint/property-names.js",
  "v8/test/mjsunit/harmony/class-static-blocks.js",
  "v8/test/mjsunit/harmony/global-configurable.js",
  "v8/test/mjsunit/harmony/import-from-compilation-errored.js",
  "v8/test/mjsunit/harmony/import-from-evaluation-errored.js",
  "v8/test/mjsunit/harmony/import-from-fetch-errored.js",
  "v8/test/mjsunit/harmony/import-from-instantiation-errored.js",
  "v8/test/mjsunit/harmony/logical-assignment-function-name.js",
  "v8/test/mjsunit/harmony/logical-assignment.js",
  "v8/test/mjsunit/harmony/numeric-separator.js",
  "v8/test/mjsunit/harmony/optional-chaining-this-private.js",
  "v8/test/mjsunit/harmony/private-brand-checks.js",
  "v8/test/mjsunit/harmony/private-fields-special-object.js",
  "v8/test/mjsunit/harmony/regexp-match-indices.js",
  "v8/test/mjsunit/ignition/dead-code-source-position.js",
  "v8/test/mjsunit/ignition/regress-616064.js",
  "v8/test/mjsunit/no-octal-constants-above-256.js",
  "v8/test/mjsunit/override-read-only-property.js",
  "v8/test/mjsunit/receiver-in-with-calls.js",
  "v8/test/mjsunit/regexp-linear-flag.js",
  "v8/test/mjsunit/regexp-no-linear-flag.js",
  "v8/test/mjsunit/regress/asm/regress-608630.js",
  "v8/test/mjsunit/regress/regress-1030466.js",
  "v8/test/mjsunit/regress/regress-1079.js",
  "v8/test/mjsunit/regress/regress-1125.js",
  "v8/test/mjsunit/regress/regress-1132.js",
  "v8/test/mjsunit/regress/regress-124.js",
  "v8/test/mjsunit/regress/regress-1528.js",
  "v8/test/mjsunit/regress/regress-2071.js",
  "v8/test/mjsunit/regress/regress-2594.js",
  "v8/test/mjsunit/regress/regress-263.js",
  "v8/test/mjsunit/regress/regress-2690.js",
  "v8/test/mjsunit/regress/regress-3138.js",
  "v8/test/mjsunit/regress/regress-318420.js",
  "v8/test/mjsunit/regress/regress-3185905.js",
  "v8/test/mjsunit/regress/regress-353058.js",
  "v8/test/mjsunit/regress/regress-392.js",
  "v8/test/mjsunit/regress/regress-410030.js",
  "v8/test/mjsunit/regress/regress-410912.js",
  "v8/test/mjsunit/regress/regress-4169.js",
  "v8/test/mjsunit/regress/regress-4214.js",
  "v8/test/mjsunit/regress/regress-436893.js",
  "v8/test/mjsunit/regress/regress-4577.js",
  "v8/test/mjsunit/regress/regress-492.js",
  "v8/test/mjsunit/regress/regress-5205.js",
  "v8/test/mjsunit/regress/regress-5405.js",
  "v8/test/mjsunit/regress/regress-5692.js",
  "v8/test/mjsunit/regress/regress-583260.js",
  "v8/test/mjsunit/regress/regress-587004.js",
  "v8/test/mjsunit/regress/regress-592353.js",
  "v8/test/mjsunit/regress/regress-649067.js",
  "v8/test/mjsunit/regress/regress-6677.js",
  "v8/test/mjsunit/regress/regress-670147.js",
  "v8/test/mjsunit/regress/regress-6733.js",
  "v8/test/mjsunit/regress/regress-678525.js",
  "v8/test/mjsunit/regress/regress-70066.js",
  "v8/test/mjsunit/regress/regress-74.js",
  "v8/test/mjsunit/regress/regress-740694.js",
  "v8/test/mjsunit/regress/regress-744292.js",
  "v8/test/mjsunit/regress/regress-784080.js",
  "v8/test/mjsunit/regress/regress-797581.js",
  "v8/test/mjsunit/regress/regress-800651.js",
  "v8/test/mjsunit/regress/regress-801772.js",
  "v8/test/mjsunit/regress/regress-95485.js",
  "v8/test/mjsunit/regress/regress-96523.js",
  "v8/test/mjsunit/regress/regress-969.js",
  "v8/test/mjsunit/regress/regress-abort-context-allocate-params.js",
  "v8/test/mjsunit/regress/regress-abort-preparsing-params.js",
  "v8/test/mjsunit/regress/regress-crbug-1041210.js",
  "v8/test/mjsunit/regress/regress-crbug-1041616.js",
  "v8/test/mjsunit/regress/regress-crbug-1074737.js",
  "v8/test/mjsunit/regress/regress-crbug-1238467.js",
  "v8/test/mjsunit/regress/regress-crbug-1239907.js",
  "v8/test/mjsunit/regress/regress-crbug-1254704.js",
  "v8/test/mjsunit/regress/regress-crbug-135008.js",
  "v8/test/mjsunit/regress/regress-crbug-412208.js",
  "v8/test/mjsunit/regress/regress-crbug-450642.js",
  "v8/test/mjsunit/regress/regress-crbug-455644.js",
  "v8/test/mjsunit/regress/regress-crbug-505907.js",
  "v8/test/mjsunit/regress/regress-crbug-506956.js",
  "v8/test/mjsunit/regress/regress-crbug-552304.js",
  "v8/test/mjsunit/regress/regress-crbug-628573.js",
  "v8/test/mjsunit/regress/regress-crbug-631027.js",
  "v8/test/mjsunit/regress/regress-crbug-648740.js",
  "v8/test/mjsunit/regress/regress-crbug-663750.js",
  "v8/test/mjsunit/regress/regress-crbug-691687.js",
  "v8/test/mjsunit/regress/regress-crbug-851393.js",
  "v8/test/mjsunit/regress/regress-crbug-934166.js",
  "v8/test/mjsunit/regress/regress-sloppy-block-function-hoisting-dynamic.js",
  "v8/test/mjsunit/regress/regress-v8-10604.js",
  "v8/test/mjsunit/regress/regress-v8-9394-2.js",
  "v8/test/mjsunit/regress/regress-v8-9394.js",
  "v8/test/mjsunit/regress/wasm/loop-stack-check.js",
  "v8/test/mjsunit/regress/wasm/regress-648079.js",
  "v8/test/mjsunit/regress/wasm/regress-654377.js",
  "v8/test/mjsunit/regress/wasm/regress-753496.js",
  "v8/test/mjsunit/scope-calls-eval.js",
  "v8/test/mjsunit/serialize-embedded-error.js",
  "v8/test/mjsunit/stackoverflow-underapplication.js",
  "v8/test/mjsunit/strict-mode-implicit-receiver.js",
  "v8/test/mjsunit/strict-mode.js",
  "v8/test/mjsunit/switch.js",
  "v8/test/mjsunit/temporal/calendar-merge-fields.js",
  "v8/test/mjsunit/temporal/calendar-week-of-year.js",
  "v8/test/mjsunit/temporal/calendar-year-month-from-fields.js",
  "v8/test/mjsunit/temporal/duration-from.js",
  "v8/test/mjsunit/temporal/plain-date-time-from.js",
  "v8/test/mjsunit/temporal/plain-date-time-to-json.js",
  "v8/test/mjsunit/throw-and-catch-function.js",
  "v8/test/mjsunit/unused-context-in-with.js",
  "v8/test/mjsunit/value-wrapper.js",
  "v8/test/mjsunit/wasm/import-mutable-global.js",
  "v8/test/mjsunit/with-leave.js",
  "v8/test/mjsunit/with-parameter-access.js",
  "v8/test/mjsunit/with-prototype.js",
  "v8/test/mjsunit/with-readonly.js",
  "v8/test/mjsunit/with-value.js",
  "v8/test/mjsunit/worker-ping-test.js",
  /* Tests requiring sloppy mode from spidermonkey */
  "spidermonkey/non262/Array/unscopables.js",
  "spidermonkey/non262/Array/values.js",
  "spidermonkey/non262/BigInt/property-name-guessed-name.js",
  "spidermonkey/non262/BigInt/property-name.js",
  "spidermonkey/non262/Date/parse-time-zone.js",
  "spidermonkey/non262/Date/time-zones-posix.js",
  "spidermonkey/non262/Date/time-zones.js",
  "spidermonkey/non262/Exceptions/catchguard-002-n.js",
  "spidermonkey/non262/Exceptions/catchguard-003-n.js",
  "spidermonkey/non262/Exceptions/regress-273931.js",
  "spidermonkey/non262/Function/10.2.1.1.6.js",
  "spidermonkey/non262/Function/arguments-parameter-shadowing.js",
  "spidermonkey/non262/Function/arrow-has-duplicated.js",
  "spidermonkey/non262/Function/regress-131964.js",
  "spidermonkey/non262/Function/regress-94506.js",
  "spidermonkey/non262/Function/regress-97921.js",
  "spidermonkey/non262/Function/rest-has-duplicated.js",
  "spidermonkey/non262/Function/rest-parameter-names.js",
  "spidermonkey/non262/GC/regress-383269-02.js",
  "spidermonkey/non262/PrivateName/lexical-presence.js",
  "spidermonkey/non262/RegExp/regress-6359.js",
  "spidermonkey/non262/RegExp/regress-85721.js",
  "spidermonkey/non262/Scope/regress-184107.js",
  "spidermonkey/non262/Scope/regress-185485.js",
  "spidermonkey/non262/Scope/regress-192226.js",
  "spidermonkey/non262/Scope/regress-208496-001.js",
  "spidermonkey/non262/Scope/regress-208496-002.js",
  "spidermonkey/non262/Scope/scope-004.js",
  "spidermonkey/non262/Script/delete-001.js",
  "spidermonkey/non262/Script/new-001.js",
  "spidermonkey/non262/String/regress-392378.js",
  "spidermonkey/non262/Unicode/regress-352044-02-n.js",
  "spidermonkey/non262/arrow-functions/arrow-not-as-end-of-statement.js",
  "spidermonkey/non262/arrow-functions/arrow-returning-arrow-with-block-body-followed-by-regexp.js",
  "spidermonkey/non262/async-functions/async-contains-unicode-escape.js",
  "spidermonkey/non262/async-functions/duplicate-__proto__.js",
  "spidermonkey/non262/class/outerBinding.js",
  "spidermonkey/non262/destructuring/bug1396261.js",
  "spidermonkey/non262/destructuring/duplicate-__proto__.js",
  "spidermonkey/non262/destructuring/yield-in-object-destr-function.js",
  "spidermonkey/non262/destructuring/yield-in-object-destr-script.js",
  "spidermonkey/non262/destructuring/yield-with-escape-in-object-destr-function.js",
  "spidermonkey/non262/destructuring/yield-with-escape-in-object-destr-script.js",
  "spidermonkey/non262/eval/redeclared-arguments-in-param-expression-eval.js",
  "spidermonkey/non262/execution-contexts/regress-448595-01.js",
  "spidermonkey/non262/expressions/delete-constant-folded-and-or.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-anon-fns.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-const.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-deleted-decl-binding.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-property-key-evaluation.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-scope-lookup.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment-tdz.js",
  "spidermonkey/non262/expressions/short-circuit-compound-assignment.js",
  "spidermonkey/non262/extensions/clone-leaf-object.js",
  "spidermonkey/non262/extensions/clone-simple.js",
  "spidermonkey/non262/extensions/cross-global-eval-is-indirect.js",
  "spidermonkey/non262/extensions/eval-native-callback-is-indirect.js",
  "spidermonkey/non262/extensions/function-definition-with.js",
  "spidermonkey/non262/extensions/inc-dec-functioncall.js",
  "spidermonkey/non262/extensions/recursion.js",
  "spidermonkey/non262/extensions/regress-104077.js",
  "spidermonkey/non262/extensions/regress-226078.js",
  "spidermonkey/non262/extensions/regress-352604.js",
  "spidermonkey/non262/extensions/regress-365527.js",
  "spidermonkey/non262/extensions/regress-406572.js",
  "spidermonkey/non262/extensions/regress-416834.js",
  "spidermonkey/non262/extensions/regress-476414-01.js",
  "spidermonkey/non262/extensions/regress-476414-02.js",
  "spidermonkey/non262/extensions/uneval/bug496985.js",
  "spidermonkey/non262/extensions/uneval/regress-385393-03.js",
  "spidermonkey/non262/extensions/uneval/regress-452498-101.js",
  "spidermonkey/non262/extensions/uneval/regress-452498-117.js",
  "spidermonkey/non262/extensions/uneval/regress-624199.js",
  "spidermonkey/non262/fields/await-identifier-module-1.js",
  "spidermonkey/non262/fields/await-identifier-module-2.js",
  "spidermonkey/non262/fields/await-identifier-script.js",
  "spidermonkey/non262/fields/numeric-fields.js",
  "spidermonkey/non262/generators/iteration.js",
  "spidermonkey/non262/generators/syntax.js",
  "spidermonkey/non262/generators/yield-non-regexp.js",
  "spidermonkey/non262/global/direct-eval-but-not.js",
  "spidermonkey/non262/global/eval-02.js",
  "spidermonkey/non262/global/eval-inside-with-is-direct.js",
  "spidermonkey/non262/global/eval-native-callback-is-indirect.js",
  "spidermonkey/non262/jit/regress-451673.js",
  "spidermonkey/non262/lexical-conventions/lexical-001.js",
  "spidermonkey/non262/lexical-conventions/regress-177314.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-annex-b-arguments.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-annex-b-eval.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-annex-b-if.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-annex-b-parameter.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-annex-b-with.js",
  "spidermonkey/non262/lexical-environment/block-scoped-functions-deprecated-redecl.js",
  "spidermonkey/non262/lexical-environment/implicit-this-in-with.js",
  "spidermonkey/non262/lexical-environment/redeclaring-global-properties.js",
  "spidermonkey/non262/lexical-environment/unscopables-basics.js",
  "spidermonkey/non262/lexical-environment/unscopables-closures.js",
  "spidermonkey/non262/lexical-environment/unscopables-const.js",
  "spidermonkey/non262/lexical-environment/unscopables-delete.js",
  "spidermonkey/non262/lexical-environment/unscopables-getters.js",
  "spidermonkey/non262/lexical-environment/unscopables-global.js",
  "spidermonkey/non262/lexical-environment/unscopables-ignored.js",
  "spidermonkey/non262/lexical-environment/unscopables-miss.js",
  "spidermonkey/non262/lexical-environment/unscopables-mutation-frozen.js",
  "spidermonkey/non262/lexical-environment/unscopables-mutation.js",
  "spidermonkey/non262/lexical-environment/unscopables-proto.js",
  "spidermonkey/non262/lexical-environment/unscopables-proxy.js",
  "spidermonkey/non262/lexical-environment/unscopables-strict.js",
  "spidermonkey/non262/lexical-environment/unscopables-tdz.js",
  "spidermonkey/non262/lexical-environment/with-global-ignores-global-let-variables.js",
  "spidermonkey/non262/module/bug1488117-import-namespace.js",
  "spidermonkey/non262/module/bug1488117.js",
  "spidermonkey/non262/module/bug1689499-a.js",
  "spidermonkey/non262/module/bug1689499-b.js",
  "spidermonkey/non262/module/bug1689499-c.js",
  "spidermonkey/non262/module/bug1689499-x.js",
  "spidermonkey/non262/module/bug1689499.js",
  "spidermonkey/non262/module/bug1693261.js",
  "spidermonkey/non262/module/module-export-name-star.js",
  "spidermonkey/non262/reflect-parse/PatternBuilders.js",
  "spidermonkey/non262/reflect-parse/classes.js",
  "spidermonkey/non262/regress/regress-104077.js",
  "spidermonkey/non262/regress/regress-131510-001.js",
  "spidermonkey/non262/regress/regress-146596.js",
  "spidermonkey/non262/regress/regress-170193.js",
  "spidermonkey/non262/regress/regress-230216-1.js",
  "spidermonkey/non262/regress/regress-230216-3.js",
  "spidermonkey/non262/regress/regress-243389-n.js",
  "spidermonkey/non262/regress/regress-252892.js",
  "spidermonkey/non262/regress/regress-290656.js",
  "spidermonkey/non262/regress/regress-319391.js",
  "spidermonkey/non262/regress/regress-336100.js",
  "spidermonkey/non262/regress/regress-343713.js",
  "spidermonkey/non262/regress/regress-344959.js",
  "spidermonkey/non262/regress/regress-349482-02.js",
  "spidermonkey/non262/regress/regress-350253.js",
  "spidermonkey/non262/regress/regress-351515.js",
  "spidermonkey/non262/regress/regress-352604.js",
  "spidermonkey/non262/regress/regress-428366.js",
  "spidermonkey/non262/regress/regress-441477-01.js",
  "spidermonkey/non262/regress/regress-452498-072.js",
  "spidermonkey/non262/regress/regress-452498-102.js",
  "spidermonkey/non262/regress/regress-452498-117.js",
  "spidermonkey/non262/regress/regress-452498-135.js",
  "spidermonkey/non262/regress/regress-452498-168-2.js",
  "spidermonkey/non262/regress/regress-452498-181.js",
  "spidermonkey/non262/regress/regress-452498-192.js",
  "spidermonkey/non262/regress/regress-452742-01.js",
  "spidermonkey/non262/regress/regress-452742-02.js",
  "spidermonkey/non262/regress/regress-462292.js",
  "spidermonkey/non262/regress/regress-467495-03.js",
  "spidermonkey/non262/regress/regress-467495-04.js",
  "spidermonkey/non262/regress/regress-467495-05.js",
  "spidermonkey/non262/regress/regress-467495-06.js",
  "spidermonkey/non262/regress/regress-477234.js",
  "spidermonkey/non262/regress/regress-483749.js",
  "spidermonkey/non262/regress/regress-509354.js",
  "spidermonkey/non262/regress/regress-551763-0.js",
  "spidermonkey/non262/regress/regress-551763-1.js",
  "spidermonkey/non262/regress/regress-551763-2.js",
  "spidermonkey/non262/regress/regress-554955-1.js",
  "spidermonkey/non262/regress/regress-554955-2.js",
  "spidermonkey/non262/regress/regress-554955-3.js",
  "spidermonkey/non262/regress/regress-569306.js",
  "spidermonkey/non262/regress/regress-591897.js",
  "spidermonkey/non262/regress/regress-593256.js",
  "spidermonkey/non262/regress/regress-597945-1.js",
  "spidermonkey/non262/regress/regress-602621.js",
  "spidermonkey/non262/regress/regress-609617.js",
  "spidermonkey/non262/regress/regress-633741.js",
  "spidermonkey/non262/regress/regress-672892.js",
  "spidermonkey/non262/regress/regress-68498-001.js",
  "spidermonkey/non262/regress/regress-68498-002.js",
  "spidermonkey/non262/regress/regress-68498-003.js",
  "spidermonkey/non262/regress/regress-68498-004.js",
  "spidermonkey/non262/regress/regress-98901.js",
  "spidermonkey/non262/statements/for-in-with-assignment-semantics.js",
  "spidermonkey/non262/statements/for-in-with-assignments.js",
  "spidermonkey/non262/statements/for-of-iterator-close.js",
  "spidermonkey/non262/strict/directive-prologue-01.js",
  "spidermonkey/non262/syntax/escaped-strict-reserved-words-and-yield.js",
  "spidermonkey/non262/template-strings/noSubst.js",
  "spidermonkey/test/expected/export/multi-header.js",
  "spidermonkey/test/expected/export/reftest-error-syntaxerror.js",
  "spidermonkey/test/expected/export/regular.js",
  "spidermonkey/test/expected/import/files/local/smTempBranch/language/export/escaped-foobarbaz.js",
  "spidermonkey/test/fixtures/export/.ignore.js",
  "spidermonkey/test/fixtures/export/multi-header.js",
  "spidermonkey/test/fixtures/export/reftest-error-syntaxerror.js",
  "spidermonkey/test/fixtures/export/regular.js",
  /* Tests requiring sloppy mode from chakra */
  "chakra/AsmJs/evalbug.js",
  "chakra/AsmJs/switchBinaryTraverse.js",
  "chakra/Basics/SpecialSymbolCapture.js",
  "chakra/Basics/With-defer-block-scope.js",
  "chakra/Basics/With.js",
  "chakra/Basics/With2.js",
  "chakra/Basics/keyword.js",
  "chakra/Basics/scopedaccessors.js",
  "chakra/Basics/with3.js",
  "chakra/Basics/withBug940841.js",
  "chakra/Basics/withBug940841_2.js",
  "chakra/Basics/witheval.js",
  "chakra/Bugs/OS_4341640.js",
  "chakra/Bugs/SuperAccessInGlobalLambda.js",
  "chakra/Bugs/blue_1096569.js",
  "chakra/Bugs/bug10191241.js",
  "chakra/Bugs/bug56026.js",
  "chakra/Bugs/bug56026_minimal.js",
  "chakra/Bugs/bug56026_minimalWithProperties.js",
  "chakra/Bugs/bug56026_nested.js",
  "chakra/Bugs/bug56026_trycatch.js",
  "chakra/Bugs/bug_OS18260560.js",
  "chakra/Bugs/misc_bugs.js",
  "chakra/Bugs/withSplitScope.js",
  "chakra/Bugs/withnonativeApplyOptimizationBug3433559.js",
  "chakra/Closures/bug_OS_10735999.js",
  "chakra/Closures/bug_OS_13412380.js",
  "chakra/Closures/bug_OS_2525694.js",
  "chakra/Closures/cachedscope_1.js",
  "chakra/Closures/initcachedscope.js",
  "chakra/ControlFlow/DoWhile.js",
  "chakra/DebuggerCommon/ES6_letconst_shadow_eval_with.js",
  "chakra/DebuggerCommon/blockScopeGlobalSlotArrayTest.bug222631.js",
  "chakra/DebuggerCommon/blockScopeSibling.bug263635.js",
  "chakra/DebuggerCommon/blockScopeWithTest.js",
  "chakra/DebuggerCommon/bug_204064.js",
  "chakra/DebuggerCommon/default.js",
  "chakra/DebuggerCommon/frames_inspection_arrayES5.js",
  "chakra/DebuggerCommon/funcSource.js",
  "chakra/DebuggerCommon/globalFuncVars.js",
  "chakra/DebuggerCommon/level_1.js",
  "chakra/DebuggerCommon/protoTest2.js",
  "chakra/DebuggerCommon/shadow_with.js",
  "chakra/DebuggerCommon/step_in_only_debugJIT_attach.js",
  "chakra/DebuggerCommon/with_shadow.js",
  "chakra/EH/optional-catch-binding.js",
  "chakra/EH/try2.js",
  "chakra/EH/try5-ES3.js",
  "chakra/EH/tryfinallyinlineswbug.js",
  "chakra/Function/LabelFuncAsWithStmt.js",
  "chakra/Function/arguments1.js",
  "chakra/Function/arguments2.js",
  "chakra/Function/arguments4.js",
  "chakra/Function/argumentsMisc.js",
  "chakra/Function/bug542360.js",
  "chakra/Function/caller_replaced_proto.js",
  "chakra/Function/callsideeffects.js",
  "chakra/Function/crosssite_bind_main.js",
  "chakra/Function/defernested.js",
  "chakra/Function/deferredBadContinue.js",
  "chakra/Function/deferredParsing.js",
  "chakra/Function/deferredWith.js",
  "chakra/Function/deferredWith2.js",
  "chakra/Function/funcExpr.js",
  "chakra/Function/sameNamePara.js",
  "chakra/Function/someMoreArguments.js",
  "chakra/Function/stackargs.js",
  "chakra/Generated/add.js",
  "chakra/Generated/add0.js",
  "chakra/Generated/add1.js",
  "chakra/Generated/add2.js",
  "chakra/Generated/add3.js",
  "chakra/Generated/and.js",
  "chakra/Generated/and0.js",
  "chakra/Generated/and1.js",
  "chakra/Generated/and2.js",
  "chakra/Generated/and3.js",
  "chakra/Generated/div.js",
  "chakra/Generated/div0.js",
  "chakra/Generated/div1.js",
  "chakra/Generated/div2.js",
  "chakra/Generated/div3.js",
  "chakra/Generated/eq.js",
  "chakra/Generated/eq0.js",
  "chakra/Generated/eq1.js",
  "chakra/Generated/eq2.js",
  "chakra/Generated/eq3.js",
  "chakra/Generated/ge.js",
  "chakra/Generated/ge0.js",
  "chakra/Generated/ge1.js",
  "chakra/Generated/ge2.js",
  "chakra/Generated/ge3.js",
  "chakra/Generated/gt.js",
  "chakra/Generated/gt0.js",
  "chakra/Generated/gt1.js",
  "chakra/Generated/gt2.js",
  "chakra/Generated/gt3.js",
  "chakra/Generated/land.js",
  "chakra/Generated/land0.js",
  "chakra/Generated/land1.js",
  "chakra/Generated/land2.js",
  "chakra/Generated/land3.js",
  "chakra/Generated/le.js",
  "chakra/Generated/le0.js",
  "chakra/Generated/le1.js",
  "chakra/Generated/le2.js",
  "chakra/Generated/le3.js",
  "chakra/Generated/lor.js",
  "chakra/Generated/lor0.js",
  "chakra/Generated/lor1.js",
  "chakra/Generated/lor2.js",
  "chakra/Generated/lor3.js",
  "chakra/Generated/lsh.js",
  "chakra/Generated/lsh0.js",
  "chakra/Generated/lsh1.js",
  "chakra/Generated/lsh2.js",
  "chakra/Generated/lsh3.js",
  "chakra/Generated/lt.js",
  "chakra/Generated/lt0.js",
  "chakra/Generated/lt1.js",
  "chakra/Generated/lt2.js",
  "chakra/Generated/lt3.js",
  "chakra/Generated/mod.js",
  "chakra/Generated/mod0.js",
  "chakra/Generated/mod1.js",
  "chakra/Generated/mod2.js",
  "chakra/Generated/mod3.js",
  "chakra/Generated/mul.js",
  "chakra/Generated/mul0.js",
  "chakra/Generated/mul1.js",
  "chakra/Generated/mul2.js",
  "chakra/Generated/mul3.js",
  "chakra/Generated/ne.js",
  "chakra/Generated/ne0.js",
  "chakra/Generated/ne1.js",
  "chakra/Generated/ne2.js",
  "chakra/Generated/ne3.js",
  "chakra/Generated/or.js",
  "chakra/Generated/or0.js",
  "chakra/Generated/or1.js",
  "chakra/Generated/or2.js",
  "chakra/Generated/or3.js",
  "chakra/Generated/rsh.js",
  "chakra/Generated/rsh0.js",
  "chakra/Generated/rsh1.js",
  "chakra/Generated/rsh2.js",
  "chakra/Generated/rsh3.js",
  "chakra/Generated/rshu.js",
  "chakra/Generated/rshu0.js",
  "chakra/Generated/rshu1.js",
  "chakra/Generated/rshu2.js",
  "chakra/Generated/rshu3.js",
  "chakra/Generated/seq.js",
  "chakra/Generated/seq0.js",
  "chakra/Generated/seq1.js",
  "chakra/Generated/seq2.js",
  "chakra/Generated/seq3.js",
  "chakra/Generated/sne.js",
  "chakra/Generated/sne0.js",
  "chakra/Generated/sne1.js",
  "chakra/Generated/sne2.js",
  "chakra/Generated/sne3.js",
  "chakra/Generated/sub.js",
  "chakra/Generated/sub0.js",
  "chakra/Generated/sub1.js",
  "chakra/Generated/sub2.js",
  "chakra/Generated/sub3.js",
  "chakra/Generated/xor.js",
  "chakra/Generated/xor0.js",
  "chakra/Generated/xor1.js",
  "chakra/Generated/xor2.js",
  "chakra/Generated/xor3.js",
  "chakra/GlobalFunctions/ParseInt1.js",
  "chakra/GlobalFunctions/eval1.js",
  "chakra/GlobalFunctions/parseInt.js",
  "chakra/GlobalFunctions/toString.js",
  "chakra/InlineCaches/test6.js",
  "chakra/LetConst/arguments.js",
  "chakra/LetConst/constreassign1.js",
  "chakra/LetConst/defer1.js",
  "chakra/LetConst/eval1.js",
  "chakra/LetConst/letlet.js",
  "chakra/LetConst/scopegen1.js",
  "chakra/LetConst/tdz1.js",
  "chakra/LetConst/tdz2.js",
  "chakra/LetConst/with.js",
  "chakra/Operators/delete2.js",
  "chakra/Operators/delete3.js",
  "chakra/Optimizer/Miscellaneous_MaxInterpret.js",
  "chakra/Optimizer/bugsimplepathbrfoldgetter.js",
  "chakra/Optimizer/test115.js",
  "chakra/Optimizer/test135.js",
  "chakra/Optimizer/test146.js",
  "chakra/PerfHint/try_with_eval_perfhint.js",
  "chakra/Regex/regex1.js",
  "chakra/Scanner/InvalidCharacter.js",
  "chakra/Strings/concat4.js",
  "chakra/Strings/long_concatstr.js",
  "chakra/UnifiedRegex/bugFixRegression.js",
  "chakra/WasmSpec/testsuite/js-api/constructor/instantiate-bad-imports.any.js",
  "chakra/WasmSpec/testsuite/js-api/instance/constructor-bad-imports.any.js",
  "chakra/benchmarks/ARES-6/Babylon/babylon-blob.js",
  "chakra/es6/DeferParseLambda.js",
  "chakra/es6/DeferParseMethods.js",
  "chakra/es6/ES6Iterators-forof.js",
  "chakra/es6/ES6NewTarget.js",
  "chakra/es6/blockscope-deferred.js",
  "chakra/es6/blockscope-functionbinding.js",
  "chakra/es6/boundConstruction.js",
  "chakra/es6/bug_OS17895855.js",
  "chakra/es6/bug_OS_4498031.js",
  "chakra/es6/bug_issue_3247_dep.js",
  "chakra/es6/bug_issue_5994.js",
  "chakra/es6/default-splitscope-undodeferparse.js",
  "chakra/es6/default-splitscope.js",
  "chakra/es6/default.js",
  "chakra/es6/destructuring_params.js",
  "chakra/es6/destructuring_params_arguments_override.js",
  "chakra/es6/forInEdgeCases.js",
  "chakra/es6/generators-functionality.js",
  "chakra/es6/generators-syntax.js",
  "chakra/es6/globalCatchNewTargetSyntaxError.js",
  "chakra/es6/globalNewTargetSyntaxError.js",
  "chakra/es6/globalParamCatchNewTargetSyntaxError.js",
  "chakra/es6/lambda-expr.js",
  "chakra/es6/lambda1.js",
  "chakra/es6/letconst_global_shadow_deleted.js",
  "chakra/es6/objlit.js",
  "chakra/es6/rest.js",
  "chakra/es6/spreadIterator.js",
  "chakra/es6/supersyntax02.js",
  "chakra/es6/supersyntax05.js",
  "chakra/es6/supersyntax06.js",
  "chakra/es6/unicode_6_identifier_Blue511452.js",
  "chakra/es6/unicode_6_identifier_Blue524737.js",
  "chakra/es6/unscopablesWithEsArrayFindFromLastTest.js",
  "chakra/es6/unscopablesWithScopeTest.js",
  "chakra/es6module/GetModuleNamespace.js",
  "chakra/es6module/ModuleCircularBar.js",
  "chakra/es6module/ModuleCircularFoo.js",
  "chakra/es6module/ModuleComplexExports.js",
  "chakra/es6module/ModuleComplexReexports.js",
  "chakra/es6module/ModuleDefaultExport1.js",
  "chakra/es6module/ModuleDefaultExport2.js",
  "chakra/es6module/ModuleDefaultExport3.js",
  "chakra/es6module/ModuleDefaultExport4.js",
  "chakra/es6module/ModuleDefaultReexport.js",
  "chakra/es6module/ModuleReexportDefault.js",
  "chakra/es6module/ModuleSimpleExport.js",
  "chakra/es6module/ModuleSimpleReexport.js",
  "chakra/es6module/ValidExportDefaultStatement1.js",
  "chakra/es6module/ValidExportDefaultStatement2.js",
  "chakra/es6module/ValidExportStatements.js",
  "chakra/es6module/ValidExportStatements2.js",
  "chakra/es6module/ValidImportStatements.js",
  "chakra/es6module/ValidReExportStatements.js",
  "chakra/es6module/bug_OS12095746.js",
  "chakra/es6module/bug_OS12095746_mod0.js",
  "chakra/es6module/bug_OS12095746_mod1.js",
  "chakra/es6module/bug_OS12095746_mod2.js",
  "chakra/es6module/bug_OS12095746_moddep.js",
  "chakra/es6module/bug_OS12113549_module1.js",
  "chakra/es6module/bug_OS14562349.js",
  "chakra/es6module/bug_issue_3076.js",
  "chakra/es6module/bug_issue_3257/mod/mod0.js",
  "chakra/es6module/bug_issue_3257/mod1.js",
  "chakra/es6module/bug_issue_3257/mod2/mod2.js",
  "chakra/es6module/bug_issue_3257/script/script0.js",
  "chakra/es6module/bug_issue_5777.js",
  "chakra/es6module/dynamic_import_promises_5796.js",
  "chakra/es6module/exportBinding.js",
  "chakra/es6module/exportmodule.js",
  "chakra/es6module/module-3250-bug-dep.js",
  "chakra/es6module/module-3250-bug-dep2.js",
  "chakra/es6module/module-3250-ext-a.js",
  "chakra/es6module/module-3250-ext-b.js",
  "chakra/es6module/moduleExport1.js",
  "chakra/es6module/moduleImportTheError.js",
  "chakra/es6module/moduleThrowAnError.js",
  "chakra/es6module/module_1_2645.js",
  "chakra/es6module/module_2_2645.js",
  "chakra/es6module/module_4482_dep1.js",
  "chakra/es6module/module_4482_dep2.js",
  "chakra/es6module/module_4482_dep3.js",
  "chakra/es6module/module_4570_dep1.js",
  "chakra/es6module/module_4570_dep2.js",
  "chakra/es6module/moduletest2_mod0.js",
  "chakra/es6module/moduletest2_mod1a.js",
  "chakra/es6module/moduletest2_mod1b.js",
  "chakra/es6module/moduletest2_mod2a.js",
  "chakra/es6module/otherModule.js",
  "chakra/es6module/passmodule.js",
  "chakra/es6module/testDynamicImportfromModule.js",
  "chakra/es6module/top-level-await.js",
  "chakra/es7/asyncawait-functionality.js",
  "chakra/es7/json_superset.js",
  "chakra/fieldopts/equiv-mismatch2.js",
  "chakra/fieldopts/markTemp.js",
  "chakra/inlining/bug_gh6303.js",
  "chakra/inlining/profilingbug.js",
  "chakra/loop/loop.js",
  "chakra/stackfunc/602481.js",
  "chakra/stackfunc/arguments_assignment.js",
  "chakra/stackfunc/with_crossscope.js",
  "chakra/stackfunc/with_existing.js",
  "chakra/stackfunc/with_namedfunc.js",
  "chakra/stackfunc/withref_delayobjscope.js",
  "chakra/strict/basics_function_in_SM.js",
  "chakra/strict/bug212755.js",
  "chakra/strict/comma_bug219390.js",
  "chakra/strict/delete.js",
  "chakra/strict/formal_samename1.js",
  "chakra/strict/formal_samename2.js",
  "chakra/strict/multiunit.js",
  "chakra/strict/nonSimpleParameterList.js",
  "chakra/strict/strictargs-deferred.js",
  "chakra/strict/strictargs2-deferred.js",
  "chakra/strict/strictargs3-deferred.js",
  "chakra/strict/stricteval-deferred.js",
  "chakra/strict/stricteval2-deferred.js",
  "chakra/strict/strictkwd-deferred.js",
  "chakra/wasm.simd/int64x2Tests.js",
  /* Tests requiring sloppy mode from jstests */
  "WebKit/JSTests/es6/Proxy_internal_get_calls_HasBinding.js",
  "WebKit/JSTests/es6/non-strict_function_semantics_function_statements_in_if-statement_clauses.js",
  "WebKit/JSTests/es6/non-strict_function_semantics_labeled_function_statements.js",
  "WebKit/JSTests/es6/well-known_symbols_Symbol.unscopables.js",
  "WebKit/JSTests/stress/adhoc-setter-frame-should-not-be-killed.js",
  "WebKit/JSTests/stress/allocation-sinking-changing-structures.js",
  "WebKit/JSTests/stress/allocation-sinking-hints-are-valid-ssa-2.js",
  "WebKit/JSTests/stress/allocation-sinking-hints-are-valid-ssa.js",
  "WebKit/JSTests/stress/array-copywithin.js",
  "WebKit/JSTests/stress/arrow-function-and-use-strict-directive.js",
  "WebKit/JSTests/stress/arrow-functions-as-default-parameter-values.js",
  "WebKit/JSTests/stress/arrowfunction-lexical-bind-arguments-non-strict-1.js",
  "WebKit/JSTests/stress/arrowfunction-lexical-bind-arguments-non-strict-2.js",
  "WebKit/JSTests/stress/arrowfunction-lexical-bind-this-8.js",
  "WebKit/JSTests/stress/big-int-as-property-name.js",
  "WebKit/JSTests/stress/bytecode-for-rmw-with-invalid-right-side.js",
  "WebKit/JSTests/stress/const-and-with-statement.js",
  "WebKit/JSTests/stress/const-not-strict-mode.js",
  "WebKit/JSTests/stress/constant-closure-var-with-dynamic-invalidation.js",
  "WebKit/JSTests/stress/do-eval-virtual-call-correctly.js",
  "WebKit/JSTests/stress/es6-default-parameters.js",
  "WebKit/JSTests/stress/escaped-keyword-identifiers.js",
  "WebKit/JSTests/stress/eval-cached.js",
  "WebKit/JSTests/stress/eval-func-decl-block-with-var-and-remove.js",
  "WebKit/JSTests/stress/eval-func-decl-in-eval-within-with-scope.js",
  "WebKit/JSTests/stress/eval-that-is-not-eval.js",
  "WebKit/JSTests/stress/for-in-tests.js",
  "WebKit/JSTests/stress/for-let-comma.js",
  "WebKit/JSTests/stress/generator-syntax.js",
  "WebKit/JSTests/stress/get-argument-by-val-safe-in-inlined-varargs-call-out-of-bounds.js",
  "WebKit/JSTests/stress/get-by-offset-should-use-correct-child.js",
  "WebKit/JSTests/stress/get-from-scope-dynamic-onto-proxy.js",
  "WebKit/JSTests/stress/get-my-argument-by-val-safe-out-of-bounds.js",
  "WebKit/JSTests/stress/get-my-argument-by-val-safe-wrap-around.js",
  "WebKit/JSTests/stress/getter-setter-should-be-cell.js",
  "WebKit/JSTests/stress/global-environment-does-not-trap-unscopables.js",
  "WebKit/JSTests/stress/global-lexical-environment-access-from-module.js",
  "WebKit/JSTests/stress/global-lexical-variable-with-statement.js",
  "WebKit/JSTests/stress/global-object-proto-getter.js",
  "WebKit/JSTests/stress/hashbang.js",
  "WebKit/JSTests/stress/import-basic.js",
  "WebKit/JSTests/stress/import-exception.js",
  "WebKit/JSTests/stress/import-from-eval.js",
  "WebKit/JSTests/stress/import-reject-with-exception.js",
  "WebKit/JSTests/stress/import-tests/cocoa.js",
  "WebKit/JSTests/stress/import-tests/multiple.js",
  "WebKit/JSTests/stress/import-tests/multiple2.js",
  "WebKit/JSTests/stress/import-tests/should.js",
  "WebKit/JSTests/stress/import-with-empty-string.js",
  "WebKit/JSTests/stress/intl-object.js",
  "WebKit/JSTests/stress/lazy-global-object-property-materialization-should-not-putDirectWithoutTransition.js",
  "WebKit/JSTests/stress/lexical-let-and-with-statement.js",
  "WebKit/JSTests/stress/lexical-let-not-strict-mode.js",
  "WebKit/JSTests/stress/licm-should-handle-if-a-hoist-causes-a-provable-osr-exit.js",
  "WebKit/JSTests/stress/logical-assignment-operator-and.js",
  "WebKit/JSTests/stress/logical-assignment-operator-coalesce.js",
  "WebKit/JSTests/stress/logical-assignment-operator-or.js",
  "WebKit/JSTests/stress/module-namespace-access-change.js",
  "WebKit/JSTests/stress/module-namespace-access-non-constant.js",
  "WebKit/JSTests/stress/module-namespace-access-poly.js",
  "WebKit/JSTests/stress/module-namespace-access-set-fails.js",
  "WebKit/JSTests/stress/module-namespace-access-transitive-exports.js",
  "WebKit/JSTests/stress/module-namespace-access.js",
  "WebKit/JSTests/stress/module-namespace-object-caching.js",
  "WebKit/JSTests/stress/object-allocation-sinking-interpretation-can-interpret-edges-that-can-be-proven-unreachable-in-ai.js",
  "WebKit/JSTests/stress/object-allocation-sinking-phase-needs-to-write-to-each-scope-offset.js",
  "WebKit/JSTests/stress/optional-chaining-and-private-fields.js",
  "WebKit/JSTests/stress/printableModuleKey-should-never-throw.js",
  "WebKit/JSTests/stress/private-in-error.js",
  "WebKit/JSTests/stress/private-in.js",
  "WebKit/JSTests/stress/proxy-call-apply-handler-to-this.js",
  "WebKit/JSTests/stress/proxy-getter-stack-overflow.js",
  "WebKit/JSTests/stress/proxy-stack-overflow-exceptions.js",
  "WebKit/JSTests/stress/proxy-trap-this.js",
  "WebKit/JSTests/stress/proxy-with-statement.js",
  "WebKit/JSTests/stress/put-dynamic-var-strict-and-sloppy.js",
  "WebKit/JSTests/stress/re-execute-error-module.js",
  "WebKit/JSTests/stress/regress-159954.js",
  "WebKit/JSTests/stress/regress-170732.js",
  "WebKit/JSTests/stress/regress-178890.js",
  "WebKit/JSTests/stress/regress-191856.js",
  "WebKit/JSTests/stress/regress-192626.js",
  "WebKit/JSTests/stress/resources/error-module.js",
  "WebKit/JSTests/stress/resources/global-lexical-environment-access-from-module-child.js",
  "WebKit/JSTests/stress/resources/module-namespace-access-transitive-exports-2.js",
  "WebKit/JSTests/stress/resources/module-namespace-access-transitive-exports.js",
  "WebKit/JSTests/stress/resources/module-namespace-access.js",
  "WebKit/JSTests/stress/resources/shadow-realm-example-module.js",
  "WebKit/JSTests/stress/resources/to-string-module.js",
  "WebKit/JSTests/stress/resources/value-of-module.js",
  "WebKit/JSTests/stress/scoped-arguments-table-should-be-tolerant-for-oom.js",
  "WebKit/JSTests/stress/shadow-realm-import-value.js",
  "WebKit/JSTests/stress/sloppy-mode-function-hoisting.js",
  "WebKit/JSTests/stress/sloppy-mode-hoist-arguments-function-non-simple-parameter-list.js",
  "WebKit/JSTests/stress/string-prototype-scopes.js",
  "WebKit/JSTests/stress/tagged-templates-this.js",
  "WebKit/JSTests/stress/terminated-execution-error-in-promise.js",
  "WebKit/JSTests/stress/to-this-before-arrow-function-closes-over-this-that-starts-as-lexical-environment.js",
  "WebKit/JSTests/stress/unscopables.js",
  "WebKit/JSTests/stress/use-arguments-as-object-pointer.js",
  "WebKit/JSTests/stress/values-unscopables.js",
  "WebKit/JSTests/stress/variable-named-eval-under-tdz.js",
  "WebKit/JSTests/stress/with.js",
  "WebKit/JSTests/stress/with_and_arith.js",
  "WebKit/JSTests/stress/yield-label.js",
  /* Tests requiring sloppy mode from crashtests */
  "CrashTests/115674352/util.js",
  "CrashTests/132918471/fast/js/resources/js-test-post.js",
  "CrashTests/135733397/resources/cookies-test-post.js",
  "CrashTests/158344541/support/refTestWait.js",
  "CrashTests/178811021/media-file.js",
  "CrashTests/178811021/video-test.js",
  "CrashTests/31681819/fast/js/resources/js-test-post.js",
  "CrashTests/4506116685037568/00422.js",
  "CrashTests/4506610717425664/00502.js",
  "CrashTests/4523272292270080/02509.js",
  "CrashTests/4527439453618176/00122.js",
  "CrashTests/4528969625894912/encaiiljifbdbjlphpgpiimidegddhic/lib/tweet_manager.js",
  "CrashTests/4528969625894912/lib/tweet_manager.js",
  "CrashTests/4531783459405824/01124.js",
  "CrashTests/4542853924782080/01450.js",
  "CrashTests/4553411667165184/00361.js",
  "CrashTests/4558140288794624/00118.js",
  "CrashTests/4559554636677120/00921.js",
  "CrashTests/4563969814560768/1.0.2/conformance/resources/webgl-test-utils.js",
  "CrashTests/4563969814560768/1.0.2/conformance/resources/webgl-test.js",
  "CrashTests/4563969814560768/1.0.2/resources/js-test-pre.js",
  "CrashTests/4570511337324544/01067.js",
  "CrashTests/4592095397150720/619.js",
  "CrashTests/4599018605772800/00095.js",
  "CrashTests/4609052021096448/02286.js",
  "CrashTests/4620742728613888/02272.js",
  "CrashTests/4624768836632576/00383.js",
  "CrashTests/4625478540066816/02759.js",
  "CrashTests/4632675287826432/01188.js",
  "CrashTests/4636862568726528/02064.js",
  "CrashTests/4637950708285440/02664.js",
  "CrashTests/4646057439133696/01096.js",
  "CrashTests/4665806235369472/02400.js",
  "CrashTests/4666942225383424/00033.js",
  "CrashTests/4675875294674944/04443.js",
  "CrashTests/4676310267068416/00041.js",
  "CrashTests/4676310267068416/meta-00041.js",
  "CrashTests/4678125190643712/01568.js",
  "CrashTests/4689880216240128/meta-00116.js",
  "CrashTests/4692754406047744/00819.js",
  "CrashTests/4704815858057216/02665.js",
  "CrashTests/4709921473167360/00418.js",
  "CrashTests/4710304564903936/resources/js-test-post.js",
  "CrashTests/4714207862587392/03389.js",
  "CrashTests/4714965806153728/00222.js",
  "CrashTests/4715062213476352/meta-00915.js",
  "CrashTests/4730791635451904/00498.js",
  "CrashTests/4731918950203392/04316.js",
  "CrashTests/4736176662773760/01784.js",
  "CrashTests/4747467118084096/02508.js",
  "CrashTests/4747813124571136/00737.js",
  "CrashTests/4762878654545920/00656.js",
  "CrashTests/4763433329491968/01684.js",
  "CrashTests/4769018565623808/00203.js",
  "CrashTests/4769117811507200/01576.js",
  "CrashTests/4776648177352704/02684.js",
  "CrashTests/4777280799506432/01745.js",
  "CrashTests/4778588336291840/03439.js",
  "CrashTests/4784915024707584/meta-00090.js",
  "CrashTests/4786126975139840/00686.js",
  "CrashTests/4804556499451904/07362.js",
  "CrashTests/4804606392795136/00345.js",
  "CrashTests/4808505226690560/00570.js",
  "CrashTests/4816373903785984/01394.js",
  "CrashTests/4817362373836800/01654.js",
  "CrashTests/4823335117783040/meta-00192.js",
  "CrashTests/4827148775849984/02704.js",
  "CrashTests/4828749863583744/00863.js",
  "CrashTests/4830304484196352/01110.js",
  "CrashTests/4835573090222080/00096.js",
  "CrashTests/4835573090222080/meta-00096.js",
  "CrashTests/4837730048278528/03052.js",
  "CrashTests/4843490131312640/03475.js",
  "CrashTests/4848225223245824/resources/js-test-post.js",
  "CrashTests/4850895428517888/2670.js",
  "CrashTests/4854644212105216/392.js",
  "CrashTests/4855156194934784/meta-00080.js",
  "CrashTests/4863599620390912/01845.js",
  "CrashTests/4865459476234240/02997.js",
  "CrashTests/4867582249664512/01063.js",
  "CrashTests/4876270013382656/test.js",
  "CrashTests/4877247254626304/00194.js",
  "CrashTests/4888824389304320/00897.js",
  "CrashTests/4895370524491776/00981.js",
  "CrashTests/4897972860223488/00795.js",
  "CrashTests/4899093893742592/02412.js",
  "CrashTests/4904085663776768/01119.js",
  "CrashTests/4907797561212928/01094.js",
  "CrashTests/4907899447410688/lib/prototype.js",
  "CrashTests/4908800751173632/02190.js",
  "CrashTests/4914294111076352/resources/worker-common.js",
  "CrashTests/4917356818071552/00992.js",
  "CrashTests/4920133693472768/09913.js",
  "CrashTests/4924640359088128/resources/methods.js",
  "CrashTests/4930344755658752/00813.js",
  "CrashTests/4932372025311232/01177.js",
  "CrashTests/4940906897866752/01190.js",
  "CrashTests/4966722004058112/01202.js",
  "CrashTests/4972148754743296/01007.js",
  "CrashTests/4976392256618496/01500.js",
  "CrashTests/4982480049274880/00401.js",
  "CrashTests/4991878320095232/01486.js",
  "CrashTests/4996582417891328/00314.js",
  "CrashTests/5000906812162048/02217.js",
  "CrashTests/5006028967247872/01936.js",
  "CrashTests/5010596302946304/03143.js",
  "CrashTests/5010966233481216/05443.js",
  "CrashTests/5015563071913984/00891.js",
  "CrashTests/5016449390477312/02595.js",
  "CrashTests/5017709745274880/00480.js",
  "CrashTests/5019028805124096/01923.js",
  "CrashTests/5020202404937728/04355.js",
  "CrashTests/5024919414112256/02190.js",
  "CrashTests/5026147325968384/01281.js",
  "CrashTests/5026251190829056/01496.js",
  "CrashTests/5034236802498560/00038.js",
  "CrashTests/5034236802498560/meta-00038.js",
  "CrashTests/5036266378756096/resources/js-test.js",
  "CrashTests/5040821977219072/07176.js",
  "CrashTests/5047964758441984/02170.js",
  "CrashTests/5048503350853632/00378.js",
  "CrashTests/5055795031965696/00903.js",
  "CrashTests/5064701201350656/mjsunit_modified.js",
  "CrashTests/5068740508516352/00968.js",
  "CrashTests/5068815053619200/02921.js",
  "CrashTests/5070483825885184/01709.js",
  "CrashTests/5071018176282624/05782.js",
  "CrashTests/5072932293050368/01965.js",
  "CrashTests/5073353348087808/03720.js",
  "CrashTests/5076362928848896/00103.js",
  "CrashTests/5080979047317504/04300.js",
  "CrashTests/5083229709664256/00286.js",
  "CrashTests/5083537469079552/03453.js",
  "CrashTests/5086848684654592/00140.js",
  "CrashTests/5087262806704128/00566.js",
  "CrashTests/5089350304661504/04000.js",
  "CrashTests/5090843606515712/4564.js",
  "CrashTests/5091969183776768/js/angular.js",
  "CrashTests/5092426574987264/02412.js",
  "CrashTests/5092539386822656/00729.js",
  "CrashTests/5096882252677120/05262.js",
  "CrashTests/5097225136504832/00340.js",
  "CrashTests/5104674803023872/meta-00066.js",
  "CrashTests/5107484490989568/00655.js",
  "CrashTests/5110246766673920/117.js",
  "CrashTests/5113028242702336/03897.js",
  "CrashTests/5114377424601088/00224.js",
  "CrashTests/5120973776420864/00299.js",
  "CrashTests/5126302418337792/00216.js",
  "CrashTests/5126730184654848/00846.js",
  "CrashTests/5127274311843840/769.js",
  "CrashTests/5128141337133056/898.js",
  "CrashTests/5129004072042496/02689.js",
  "CrashTests/5130481752735744/817.js",
  "CrashTests/5140656268640256/resources/interpolation-test.js",
  "CrashTests/5150697335816192/04726.js",
  "CrashTests/5151090662178816/01492.js",
  "CrashTests/5152408142086144/01220.js",
  "CrashTests/5153368765628416/00787.js",
  "CrashTests/5157575680327680/06055.js",
  "CrashTests/5159014924288000/01496.js",
  "CrashTests/5164793027624960/01357.js",
  "CrashTests/5165045173846016/Common/MV.js",
  "CrashTests/5165672034205696/05364.js",
  "CrashTests/5168023154720768/meta-00125.js",
  "CrashTests/5171157051899904/00383.js",
  "CrashTests/5171658670473216/02099.js",
  "CrashTests/5174188858146816/00365.js",
  "CrashTests/5190716938387456/05795.js",
  "CrashTests/5192473061359616/meta-00780.js",
  "CrashTests/5197954434596864/01324.js",
  "CrashTests/5200019587334144/meta-00398.js",
  "CrashTests/5214085959909376/00916.js",
  "CrashTests/5219122255757312/00999.js",
  "CrashTests/5222394685292544/resources/stress-js-execution.js",
  "CrashTests/5225766790889472/03395.js",
  "CrashTests/5226258591121408/04850.js",
  "CrashTests/5226692407984128/meta-00030.js",
  "CrashTests/5226950361612288/01783.js",
  "CrashTests/5228917292597248/01383.js",
  "CrashTests/5231597301334016/00307.js",
  "CrashTests/5238861996490752/01351.js",
  "CrashTests/5242104612651008/mjsunit_modified.js",
  "CrashTests/5254331529166848/meta-00409.js",
  "CrashTests/5254663852261376/meta-00497.js",
  "CrashTests/5257477901778944/06912.js",
  "CrashTests/5265513080946688/00263.js",
  "CrashTests/5271669179678720/01206.js",
  "CrashTests/5280655383724032/meta-00355.js",
  "CrashTests/5283736101322752/00921.js",
  "CrashTests/5289653387919360/635.js",
  "CrashTests/5292566928162816/05416.js",
  "CrashTests/5301431549820928/meta-00738.js",
  "CrashTests/5313740812320768/00284.js",
  "CrashTests/5326135539793920/01618.js",
  "CrashTests/5327466171465728/benchmarks/propertyTreeSplitting.js",
  "CrashTests/5335637787934720/mersenne.js",
  "CrashTests/5337864091729920/00078.js",
  "CrashTests/5346139261108224/meta-00086.js",
  "CrashTests/5351139388424192/00966.js",
  "CrashTests/5351969500168192/02350.js",
  "CrashTests/5352173552795648/00798.js",
  "CrashTests/5352347554545664/00293.js",
  "CrashTests/5354535555825664/01561.js",
  "CrashTests/5361893420302336/03633.js",
  "CrashTests/5363987624493056/00401.js",
  "CrashTests/5367250713575424/00858.js",
  "CrashTests/5384147026837504/00846.js",
  "CrashTests/5385945858179072/01283.js",
  "CrashTests/5385947877998592/00345.js",
  "CrashTests/5390684309946368/00499.js",
  "CrashTests/5397761290403840/00742.js",
  "CrashTests/5397969593958400/02399.js",
  "CrashTests/5400975855321088/04550.js",
  "CrashTests/5402562393276416/meta-00565.js",
  "CrashTests/5417888764657664/01529.js",
  "CrashTests/5418169017303040/156.js",
  "CrashTests/5420098825748480/01174.js",
  "CrashTests/5435516837429248/02591.js",
  "CrashTests/5439052443025408/01562.js",
  "CrashTests/5443705157976064/04908.js",
  "CrashTests/5443796254064640/08661.js",
  "CrashTests/5474124668600320/meta-00992.js",
  "CrashTests/5480706662727680/02537.js",
  "CrashTests/5486126228570112/02840.js",
  "CrashTests/5487631620112384/animations/resources/animation-test-helpers.js",
  "CrashTests/5494987147444224/01679.js",
  "CrashTests/5513876092223488/00005.js",
  "CrashTests/5521703332741120/00376.js",
  "CrashTests/5528671464456192/01324.js",
  "CrashTests/5530121586081792/03646.js",
  "CrashTests/5530153792045056/meta-00910.js",
  "CrashTests/5536392074493952/01051.js",
  "CrashTests/5540548491608064/01146.js",
  "CrashTests/5541203771916288/currentscript.js",
  "CrashTests/5544125599580160/00526.js",
  "CrashTests/5559694775025664/imported/w3c/html-templates/testcommon.js",
  "CrashTests/5559694775025664/resources/testharness.js",
  "CrashTests/5559694775025664/resources/testharnessreport.js",
  "CrashTests/5568247077011456/04042.js",
  "CrashTests/5577681470488576/00437.js",
  "CrashTests/5593713261412352/319.js",
  "CrashTests/5603057343660032/01771.js",
  "CrashTests/5605754113884160/01777.js",
  "CrashTests/5606041047007232/02795.js",
  "CrashTests/5606702255964160/meta-00168.js",
  "CrashTests/5612290518810624/dist/jquery.js",
  "CrashTests/5615411944226816/02684.js",
  "CrashTests/5620205313589248/01035.js",
  "CrashTests/5625391309127680/02293.js",
  "CrashTests/5630063870214144/02130.js",
  "CrashTests/5630225822121984/03637.js",
  "CrashTests/5630410519478272/916.js",
  "CrashTests/5635092719599616/00041.js",
  "CrashTests/5635645835182080/worker-serviceworker-7636bedbbb1f120d.js",
  "CrashTests/5639584467910656/00441.js",
  "CrashTests/5639628713492480/04139.js",
  "CrashTests/5642849944993792/resources/js-test.js",
  "CrashTests/5642994023202816/950.js",
  "CrashTests/5644307466878976/__MACOSX/._audio.js",
  "CrashTests/5644307466878976/__MACOSX/._processor.js",
  "CrashTests/5645896422522880/00670.js",
  "CrashTests/5648004624678912/01755.js",
  "CrashTests/5649862583648256/meta-00236.js",
  "CrashTests/5650039238033408/00812.js",
  "CrashTests/5651439780495360/250.js",
  "CrashTests/5651703040835584/resources/testharnessreport.js",
  "CrashTests/5652465613406208/4584.js",
  "CrashTests/5657116044951552/scripts/options.js",
  "CrashTests/5657183745998848/01385.js",
  "CrashTests/5657306247462912/00434.js",
  "CrashTests/5661345388167168/resources/stress-js-execution.js",
  "CrashTests/5662199714480128/00467.js",
  "CrashTests/5662596912513024/265.js",
  "CrashTests/5664971082694656/02223.js",
  "CrashTests/5665078627663872/262.js",
  "CrashTests/5668694740172800/meta-00294.js",
  "CrashTests/5672678890405888/resources/js-test.js",
  "CrashTests/5672678890405888/webaudio/resources/distance-model-testing.js",
  "CrashTests/5675659103830016/04982.js",
  "CrashTests/5676981169487872/01110.js",
  "CrashTests/5677821452091392/02168.js",
  "CrashTests/5679632916676608/04152.js",
  "CrashTests/5684463616917504/01498.js",
  "CrashTests/5685487336161280/03642.js",
  "CrashTests/5686447370665984/sdk/tests/conformance/ogles/ogles-utils.js",
  "CrashTests/5686447370665984/sdk/tests/conformance/resources/glsl-conformance-test.js",
  "CrashTests/5686447370665984/sdk/tests/conformance/resources/webgl-test-utils.js",
  "CrashTests/5686447370665984/sdk/tests/resources/js-test-pre.js",
  "CrashTests/5688866685321216/09854.js",
  "CrashTests/5689884189392896/02723.js",
  "CrashTests/5690371071803392/01662.js",
  "CrashTests/5690744270487552/oob_write.js",
  "CrashTests/5694376231632896/1033966.js",
  "CrashTests/5694701996867584/conformance/resources/webgl-test.js",
  "CrashTests/5696049601314816/7.js",
  "CrashTests/5697903049441280/03188.js",
  "CrashTests/5703976838234112/test.js",
  "CrashTests/5706349639434240/804.js",
  "CrashTests/5707472246472704/1443.js",
  "CrashTests/5712001662517248/report.js",
  "CrashTests/5713776938582016/00793.js",
  "CrashTests/5721502735532032/03042.js",
  "CrashTests/5729254488211456/151.js",
  "CrashTests/5733293570392064/00764.js",
  "CrashTests/5734750167105536/01271.js",
  "CrashTests/5735023732064256/meta-00070.js",
  "CrashTests/5736353084342272/resources/testharness.js",
  "CrashTests/5737388710821888/resources/js-test.js",
  "CrashTests/5738737345822720/svg/dynamic-updates/resources/SVGTestCase.js",
  "CrashTests/5744365229441024/resources/testharness.js",
  "CrashTests/5745342726537216/meta-00053.js",
  "CrashTests/5747146314285056/support/alertAssert.sub.js",
  "CrashTests/5747146314285056/support/logTest.sub.js",
  "CrashTests/5750922200875008/747.js",
  "CrashTests/5753604559470592/03311.js",
  "CrashTests/5754855756136448/00202.js",
  "CrashTests/5755508264534016/00224.js",
  "CrashTests/5763511307337728/04651.js",
  "CrashTests/5763879718617088/lib/prototype.js",
  "CrashTests/5764427184865280/00843.js",
  "CrashTests/5765576144060416/815.js",
  "CrashTests/5767941953945600/02556.js",
  "CrashTests/5774432061095936/00972.js",
  "CrashTests/5780358435962880/02297.js",
  "CrashTests/5781432505466880/02329.js",
  "CrashTests/5784274577129472/146.js",
  "CrashTests/5784274665996288/02175.js",
  "CrashTests/5794086030147584/04345.js",
  "CrashTests/5798263663099904/01459.js",
  "CrashTests/5802116248764416/06966.js",
  "CrashTests/5806021251432448/background.js",
  "CrashTests/58219635/fast/js/resources/js-test-post.js",
  "CrashTests/5826758986170368/resources/js-test-post.js",
  "CrashTests/5830309687853056/00112.js",
  "CrashTests/5830406377832448/01330.js",
  "CrashTests/5832728473239552/02422.js",
  "CrashTests/5841445051170816/resources/js-test-pre.js",
  "CrashTests/5842510916091904/resources/webgl_test_files/resources/js-test-post.js",
  "CrashTests/58693299/selfhtml.js",
  "CrashTests/5878747354365952/02158.js",
  "CrashTests/5910324886634496/02597.js",
  "CrashTests/5913894233833472/05410.js",
  "CrashTests/5914309578784768/repro.js",
  "CrashTests/5919491238920192/00154.js",
  "CrashTests/5925149103357952/webaudio/resources/audit.js",
  "CrashTests/5931087833333760/03890.js",
  "CrashTests/5931608799707136/04633.js",
  "CrashTests/5933875666616320/01048.js",
  "CrashTests/5936525417644032/00317.js",
  "CrashTests/5941859303555072/01996.js",
  "CrashTests/5949184339083264/poc.js",
  "CrashTests/5950573451804672/494.js",
  "CrashTests/5950617700007936/01848.js",
  "CrashTests/5957695718031360/01051.js",
  "CrashTests/5969639398440960/00249.js",
  "CrashTests/5970316012290048/414.js",
  "CrashTests/5978056946876416/00920.js",
  "CrashTests/5989158878183424/02865.js",
  "CrashTests/5990019710320640/00076.js",
  "CrashTests/5996165326962688/meta-00146.js",
  "CrashTests/6002230377840640/01046.js",
  "CrashTests/6007370099195904/HTML5/Bugbash/Demo.js",
  "CrashTests/6010230465626112/resources/webgl_test_files/js/tests/tex-image-and-sub-image-with-image-bitmap-utils.js",
  "CrashTests/6018592823836672/support/refTestWait.js",
  "CrashTests/6022256973840384/04395.js",
  "CrashTests/6022630427590656/03625.js",
  "CrashTests/6023488715620352/04168.js",
  "CrashTests/6026840030314496/00848.js",
  "CrashTests/6034116338909184/513.js",
  "CrashTests/6037361396809728/02741.js",
  "CrashTests/6043736092966912/00712.js",
  "CrashTests/6049932086083584/03169.js",
  "CrashTests/6051257375784960/03082.js",
  "CrashTests/6054819434070016/02737.js",
  "CrashTests/6059329424457728/01928.js",
  "CrashTests/6068082133696512/01044.js",
  "CrashTests/6071110049988608/00548.js",
  "CrashTests/6073192676327424/resources/js-test-pre.js",
  "CrashTests/6081148422979584/00926.js",
  "CrashTests/6081568072531968/02867.js",
  "CrashTests/6085702952681472/00521.js",
  "CrashTests/6096783899361280/01310.js",
  "CrashTests/6099421385981952/04526.js",
  "CrashTests/6103999282413568/fast/dom/script-tests/event-handlers.js",
  "CrashTests/6107917668319232/00571.js",
  "CrashTests/6113149884563456/02823.js",
  "CrashTests/6124318079582208/00744.js",
  "CrashTests/6131247808839680/00012.js",
  "CrashTests/6132283327971328/resources/autosizingTest.js",
  "CrashTests/6134706385977344/00149.js",
  "CrashTests/6136495474737152/00377.js",
  "CrashTests/6150179231105024/conformance/resources/webgl-test.js",
  "CrashTests/6156744933769216/02993.js",
  "CrashTests/6158905865666560/meta-00624.js",
  "CrashTests/6162601424453632/00565.js",
  "CrashTests/6166378025320448/dist/jquery.js",
  "CrashTests/6169525843394560/00344.js",
  "CrashTests/6171947516297216/00845.js",
  "CrashTests/6179220893204480/02159.js",
  "CrashTests/6179752663842816/01196.js",
  "CrashTests/6183005912825856/00515.js",
  "CrashTests/6183415490019328/02656.js",
  "CrashTests/6198951751188480/1248.js",
  "CrashTests/6199083597824000/00227.js",
  "CrashTests/6202558821957632/02015.js",
  "CrashTests/6204924829630464/meta-00272.js",
  "CrashTests/6211017381249024/01253.js",
  "CrashTests/6213317429559296/02944.js",
  "CrashTests/6216405020835840/03985.js",
  "CrashTests/6218202061209600/mersenne.js",
  "CrashTests/6220111297118208/meta-00050.js",
  "CrashTests/6223202209234944/02648.js",
  "CrashTests/6234705257168896/01780.js",
  "CrashTests/6239384157552640/meta-00271.js",
  "CrashTests/6248723961348096/01050.js",
  "CrashTests/6249957991645184/00503.js",
  "CrashTests/6250003584909312/1114.js",
  "CrashTests/6250055858126848/04619.js",
  "CrashTests/6255231244697600/meta-00216.js",
  "CrashTests/6255916311379968/1372.js",
  "CrashTests/6259138054324224/meta-00172.js",
  "CrashTests/6263485068017664/MediaSessionTestUtils.js",
  "CrashTests/6269363175555072/00815.js",
  "CrashTests/6273728140017664/03583.js",
  "CrashTests/6277052166832128/00830.js",
  "CrashTests/6278159702425600/01463.js",
  "CrashTests/6280577705705472/1146.js",
  "CrashTests/6285336190124032/01621.js",
  "CrashTests/6290863075688448/192.js",
  "CrashTests/6292792642371584/00047.js",
  "CrashTests/6294597573541888/00725.js",
  "CrashTests/6294835115065344/00805.js",
  "CrashTests/6295241556492288/01763.js",
  "CrashTests/6300171514675200/00115.js",
  "CrashTests/6304143111356416/00782.js",
  "CrashTests/6313127026688000/02126.js",
  "CrashTests/6316400054960128/165.js",
  "CrashTests/6319065615040512/04012.js",
  "CrashTests/6328755580567552/resources/js-test.js",
  "CrashTests/6328755580567552/svg/dynamic-updates/resources/SVGTestCase.js",
  "CrashTests/6330764245073920/poc1.js",
  "CrashTests/6332832186761216/00681.js",
  "CrashTests/6332904701427712/00888.js",
  "CrashTests/6332930432958464/02637.js",
  "CrashTests/6333032621998080/04777.js",
  "CrashTests/6339944789049344/04142.js",
  "CrashTests/6345007341764608/00699.js",
  "CrashTests/6346448656400384/dist/jquery.js",
  "CrashTests/6351789088833536/meta-00122.js",
  "CrashTests/6352599495475200/meta-00093.js",
  "CrashTests/6353579392630784/04156.js",
  "CrashTests/6358320674242560/resources/js-test.js",
  "CrashTests/6359996105359360/934166-poc.js",
  "CrashTests/6362821967740928/00524.js",
  "CrashTests/6364115106004992/03982.js",
  "CrashTests/6374053756272640/824.js",
  "CrashTests/6384055239835648/00899.js",
  "CrashTests/6387037962240000/02996.js",
  "CrashTests/6391863691706368/01129.js",
  "CrashTests/6394941698998272/meta-00167.js",
  "CrashTests/6403694305476608/meta-00079.js",
  "CrashTests/6405187880353792/meta-00826.js",
  "CrashTests/6406267560263680/02111.js",
  "CrashTests/6406622734974976/meta-00188.js",
  "CrashTests/6408374819487744/02912.js",
  "CrashTests/6413480679964672/01826.js",
  "CrashTests/6417030613041152/02923.js",
  "CrashTests/6417972328660992/09282.js",
  "CrashTests/6419282024726528/00370.js",
  "CrashTests/6423571127599104/04989.js",
  "CrashTests/6427802493779968/meta-00335.js",
  "CrashTests/6440904627060736/meta-00149.js",
  "CrashTests/6441460252803072/04234.js",
  "CrashTests/6443097497010176/1.0.2/resources/webgl_test_files/conformance/resources/webgl-test-utils.js",
  "CrashTests/6443097497010176/1.0.2/resources/webgl_test_files/conformance/resources/webgl-test.js",
  "CrashTests/6443097497010176/1.0.2/resources/webgl_test_files/resources/js-test-pre.js",
  "CrashTests/6443097497010176/1.0.2/resources/webkit-webgl-test-harness.js",
  "CrashTests/6449605693931520/meta-00261.js",
  "CrashTests/6452658006392832/meta-00824.js",
  "CrashTests/6454378660626432/00345.js",
  "CrashTests/6463535346614272/meta-00886.js",
  "CrashTests/6486287733489664/01857.js",
  "CrashTests/6491889133158400/01408.js",
  "CrashTests/6499287285366784/01193.js",
  "CrashTests/6506410742120448/04615.js",
  "CrashTests/6507668386873344/02815.js",
  "CrashTests/6509855193169920/03031.js",
  "CrashTests/6530413356122112/meta-00391.js",
  "CrashTests/6534217117990912/01172.js",
  "CrashTests/6541223017054208/01484.js",
  "CrashTests/6550225930944512/mnt/scratch0/clusterfuzz/slave-bot/inputs/fuzzers/inferno_twister_custom_bundle/inferno_twister_custom_bundle_data/moz_tests/dom/workers/test/threadErrors_worker1.js",
  "CrashTests/6551265423982592/00708.js",
  "CrashTests/6552552797503488/bug_41414141.js",
  "CrashTests/6566622022860800/05257.js",
  "CrashTests/6566953431597056/02044.js",
  "CrashTests/6572559555166208/report.js",
  "CrashTests/6574969751601152/01903.js",
  "CrashTests/6576437049950208/conformance/resources/glsl-generator.js",
  "CrashTests/6576437049950208/resources/js-test-pre.js",
  "CrashTests/6576519795965952/04466.js",
  "CrashTests/6586504922267648/00672.js",
  "CrashTests/6588129316438016/04328.js",
  "CrashTests/6590585390235648/00180.js",
  "CrashTests/6597230699216896/meta-00299.js",
  "CrashTests/6598446651015168/02933.js",
  "CrashTests/6603081141977088/00482.js",
  "CrashTests/6603770342408192/00211.js",
  "CrashTests/6613865297084416/builds/chromium-browser-syzyasan_win32-release/revisions/asan-win32-release-276100/resources/inspector/main/Main.js",
  "CrashTests/6616252740009984/01288.js",
  "CrashTests/6617130045341696/02588.js",
  "CrashTests/6622275291840512/resources/js-test.js",
  "CrashTests/6637202159960064/01577.js",
  "CrashTests/6637774979465216/01973.js",
  "CrashTests/6644133880397824/00752.js",
  "CrashTests/6645639153188864/00207.js",
  "CrashTests/6646069054013440/poc.js",
  "CrashTests/6652514189508608/poc.js",
  "CrashTests/6658388688371712/00042.js",
  "CrashTests/6659440421109760/00027.js",
  "CrashTests/6669656538742784/00851.js",
  "CrashTests/6669776086630400/01043.js",
  "CrashTests/6681695539429376/01791.js",
  "CrashTests/6694038640001024/01601.js",
  "CrashTests/6695292278931456/04706.js",
  "CrashTests/6701111818059776/00487.js",
  "CrashTests/6710149884674048/00808.js",
  "CrashTests/6710629039079424/01300.js",
  "CrashTests/6720085192343552/00257.js",
  "CrashTests/6727300586405888/builds/chromium-browser-syzyasan_win32-release/revisions/asan-win32-release-259551/resources/inspector/Main.js",
  "CrashTests/6731147175526400/meta-00107.js",
  "CrashTests/6744125769252864/494.js",
];
module.exports = {
  generatedSkipped: new Set(skipped),
  generatedSoftSkipped: new Set(softSkipped),
  generatedSloppy: new Set(sloppy),
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/                                           0000775 0000000 0000000 00000000000 14746647661 0023504 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/array_mutator.js                           0000664 0000000 0000000 00000006434 14746647661 0026742 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Mutator for array expressions.
 */

'use strict';

const babelTypes = require('@babel/types');

const common = require('./common.js');
const mutator = require('./mutator.js');
const random = require('../random.js');

// Blueprint for choosing the maximum number of mutations. Bias towards
// performing only one mutation.
const MUTATION_CHOICES = [1, 1, 1, 1, 1, 2, 2, 2, 3];

const MAX_ARRAY_LENGTH = 50;

class ArrayMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  get visitor() {
    const thisMutator = this;

    return {
      ArrayExpression(path) {
        const elements = path.node.elements;
        if (!random.choose(thisMutator.settings.MUTATE_ARRAYS) ||
            elements.length > MAX_ARRAY_LENGTH) {
          return;
        }

        // Annotate array expression with the action taken, indicating
        // if we also replaced elements.
        function annotate(message, replace) {
          if (replace) message += ' (replaced)';
          thisMutator.annotate(path.node, message);
        }

        // Add or replace elements at a random index.
        function randomSplice(replace, ...args) {
          // Choose an index that's small enough to replace all desired items.
          const index = random.randInt(0, elements.length - replace);
          elements.splice(index, replace, ...args);
        }

        function duplicateElement(replace) {
          const element = random.single(elements);
          if (!element || common.isLargeNode(element)) {
            return;
          }
          annotate('Duplicate an element', replace);
          randomSplice(replace, babelTypes.cloneDeep(element));
        }

        function insertRandomValue(replace) {
          annotate('Insert a random value', replace);
          randomSplice(replace, common.randomValue(path));
        }

        function insertHole(replace) {
          annotate('Insert a hole', replace);
          randomSplice(replace, null);
        }

        function removeElements(count) {
          annotate('Remove elements');
          randomSplice(random.randInt(1, count));
        }

        function shuffle() {
          annotate('Shuffle array');
          random.shuffle(elements);
        }

        // Mutation options. Repeated mutations have a higher probability.
        const mutations = [
          () => duplicateElement(1),
          () => duplicateElement(1),
          () => duplicateElement(1),
          () => duplicateElement(0),
          () => duplicateElement(0),
          () => insertRandomValue(1),
          () => insertRandomValue(1),
          () => insertRandomValue(0),
          () => insertHole(1),
          () => insertHole(0),
          () => removeElements(1),
          () => removeElements(elements.length),
          shuffle,
        ];

        // Perform several mutations.
        const count = random.single(MUTATION_CHOICES);
        for (let i = 0; i < count; i++) {
          random.single(mutations)();
        }

        // Don't recurse on nested arrays.
        path.skip();
      },
    }
  }
}

module.exports = {
  ArrayMutator: ArrayMutator,
};
                                                                                                                                                                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/common.js                                  0000664 0000000 0000000 00000022361 14746647661 0025336 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Common mutator utilities.
 */

const babelTemplate = require('@babel/template').default;
const babelTypes = require('@babel/types');
const babylon = require('@babel/parser');

const sourceHelpers = require('../source_helpers.js');
const random = require('../random.js');

const INTERESTING_NUMBER_VALUES = [
    -1, -0.0, 0, 1,

    // Float values.
    -0.000000000000001, 0.000000000000001,

    // Special values.
    NaN, +Infinity, -Infinity,

    // Boundaries of int, signed, unsigned, SMI (near +/- 2^(30, 31, 32).
     0x03fffffff,  0x040000000,  0x040000001,
    -0x03fffffff, -0x040000000, -0x040000001,
     0x07fffffff,  0x080000000,  0x080000001,
    -0x07fffffff, -0x080000000, -0x080000001,
     0x0ffffffff,  0x100000000,  0x100000001,
    -0x0ffffffff, -0x100000000, -0x100000001,

    // Boundaries of maximum safe integer (near +/- 2^53).
     9007199254740990,  9007199254740991,  9007199254740992,
    -9007199254740990, -9007199254740991, -9007199254740992,

    // Boundaries of double.
     5e-324, 1.7976931348623157e+308,
    -5e-324,-1.7976931348623157e+308,
]

const INTERESTING_NON_NUMBER_VALUES = [
    // Simple arrays.
    '[]',
    'Array(0x8000).fill("a")',

    // Simple object.
    '{}',
    '{a: "foo", b: 10, c: {}}',

    // Simple strings.
    '"foo"',
    '""',

    // Simple regex.
    '/0/',
    '"/0/"',

    // Simple symbol.
    'Symbol("foo")',

    // Long string.
    'Array(0x8000).join("a")',

    // Math.PI
    'Math.PI',

    // Others.
    'false',
    'true',
    'undefined',
    'null',
    'this',
    'this[0]',
    'this[1]',

    // Empty function.
    '(function() {return 0;})',

    // Objects with functions.
    '({toString:function(){return "0";}})',
    '({valueOf:function(){return 0;}})',
    '({valueOf:function(){return "0";}})',

    // Objects for primitive types created using new.
    '(new Boolean(false))',
    '(new Boolean(true))',
    '(new String(""))',
    '(new Number(0))',
    '(new Number(-0))',
]

const LARGE_NODE_SIZE = 100;
const MAX_ARGUMENT_COUNT = 10;

function _identifier(identifier) {
  return babelTypes.identifier(identifier);
}

function _numericLiteral(number) {
  return babelTypes.numericLiteral(number);
}

function _unwrapExpressionStatement(value) {
  if (babelTypes.isExpressionStatement(value)) {
    return value.expression;
  }

  return value;
}

function isVariableIdentifier(name) {
  return /__v_[0-9]+/.test(name);
}

function isFunctionIdentifier(name) {
  return /__f_[0-9]+/.test(name);
}

function isInForLoopCondition(path) {
  // Return whether if we're in the init/test/update parts of a for loop (but
  // not the body). Mutating variables in the init/test/update will likely
  // modify loop variables and cause infinite loops.
  const forStatementChild = path.find(
      p => p.parent && babelTypes.isForStatement(p.parent));

  return (forStatementChild && forStatementChild.parentKey !== 'body');
}

function isInWhileLoop(path) {
  // Return whether if we're in a while loop.
  const whileStatement = path.find(p => babelTypes.isWhileStatement(p));
  return Boolean(whileStatement);
}

function _availableIdentifiers(path, filter) {
  // TODO(ochang): Consider globals that aren't declared with let/var etc.
  const available = new Array();
  const allBindings = path.scope.getAllBindings();
  for (const key of Object.keys(allBindings)) {
    if (!filter(key)) {
      continue;
    }

    if (filter === isVariableIdentifier &&
        path.willIMaybeExecuteBefore(allBindings[key].path)) {
      continue;
    }

    available.push(_identifier(key));
  }

  return available;
}

function availableVariables(path) {
  return _availableIdentifiers(path, isVariableIdentifier);
}

function availableFunctions(path) {
  return _availableIdentifiers(path, isFunctionIdentifier);
}

function randomVariable(path) {
  return random.single(availableVariables(path));
}

function randomFunction(path) {
  return random.single(availableFunctions(path));
}

function randomSeed() {
  return random.randInt(0, 2**20);
}

function randomObject(seed) {
  if (seed === undefined) {
    seed = randomSeed();
  }

  const template = babelTemplate('__getRandomObject(SEED)');
  return template({
    SEED: _numericLiteral(seed),
  }).expression;
}

function randomProperty(identifier, seed) {
  if (seed === undefined) {
    seed = randomSeed();
  }

  const template = babelTemplate('__getRandomProperty(IDENTIFIER, SEED)');
  return template({
    IDENTIFIER: identifier,
    SEED: _numericLiteral(seed),
  }).expression;
}

function randomArguments(path) {
  const numArgs = random.randInt(0, MAX_ARGUMENT_COUNT);
  const args = [];

  for (let i = 0; i < numArgs; i++) {
    args.push(randomValue(path));
  }

  return args.map(_unwrapExpressionStatement);
}

function randomValue(path) {
  const probability = random.random();

  if (probability < 0.01) {
    const randomFunc = randomFunction(path);
    if (randomFunc) {
      return randomFunc;
    }
  }

  if (probability < 0.25) {
    const randomVar = randomVariable(path);
    if (randomVar) {
      return randomVar;
    }
  }

  if (probability < 0.5) {
    return randomInterestingNumber();
  }

  if (probability < 0.75) {
    return randomInterestingNonNumber();
  }

  return randomObject();
}

function callRandomFunction(path, identifier, seed) {
  if (seed === undefined) {
    seed = randomSeed();
  }

  let args = [
      identifier,
      _numericLiteral(seed)
  ];

  args = args.map(_unwrapExpressionStatement);
  args = args.concat(randomArguments(path));

  return babelTypes.callExpression(
      babelTypes.identifier('__callRandomFunction'),
      args);
}

function nearbyRandomNumber(value) {
  const probability = random.random();

  if (probability < 0.9) {
    return _numericLiteral(value + random.randInt(-0x10, 0x10));
  } else if (probability < 0.95) {
    return _numericLiteral(value + random.randInt(-0x100, 0x100));
  } else if (probability < 0.99) {
    return _numericLiteral(value + random.randInt(-0x1000, 0x1000));
  }

  return _numericLiteral(value + random.randInt(-0x10000, 0x10000));
}

function randomInterestingNumber() {
  const value = random.single(INTERESTING_NUMBER_VALUES);
  if (random.choose(0.05)) {
    return nearbyRandomNumber(value);
  }
  return _numericLiteral(value);
}

function randomInterestingNonNumber() {
  return babylon.parseExpression(random.single(INTERESTING_NON_NUMBER_VALUES));
}

function concatFlags(inputs) {
  const flags = new Set();
  for (const input of inputs) {
    for (const flag of input.flags || []) {
      flags.add(flag);
    }
  }
  return Array.from(flags.values());
}

function concatPrograms(inputs) {
  // Concatentate programs.
  const resultProgram = babelTypes.program([]);
  const result = babelTypes.file(resultProgram, [], null);

  for (const input of inputs) {
    const ast = input.ast.program;
    resultProgram.body = resultProgram.body.concat(ast.body);
    resultProgram.directives = resultProgram.directives.concat(ast.directives);
  }

  // TODO(machenbach): Concat dependencies here as soon as they are cached.
  const combined = new sourceHelpers.ParsedSource(
      result, '', '', concatFlags(inputs));
  // If any input file is sloppy, the combined result is sloppy.
  combined.sloppy = inputs.some(input => input.isSloppy());
  return combined;
}

function setSourceLoc(source, index, total) {
  const noop = babelTypes.noop();
  noop.__loc = index / total;
  noop.__self = noop;
  source.ast.program.body.unshift(noop);
}

function getSourceLoc(node) {
  // Source location is invalid in cloned nodes.
  if (node !== node.__self) {
    return undefined;
  }
  return node.__loc;
}

function setOriginalPath(source, originalPath) {
  const noop = babelTypes.noop();
  noop.__path = originalPath;
  noop.__self = noop;
  source.ast.program.body.unshift(noop);
}

function getOriginalPath(node) {
  // Original path is invalid in cloned nodes.
  if (node !== node.__self) {
    return undefined;
  }
  return node.__path;
}

// Estimate the size of a node in raw source characters.
function isLargeNode(node) {
  // Ignore array holes inserted by us (null) or previously cloned nodes
  // (they have no start/end).
  if (!node || node.start === undefined || node.end === undefined ) {
    return false;
  }
  return node.end - node.start > LARGE_NODE_SIZE;
}

module.exports = {
  callRandomFunction: callRandomFunction,
  concatFlags: concatFlags,
  concatPrograms: concatPrograms,
  availableVariables: availableVariables,
  availableFunctions: availableFunctions,
  randomFunction: randomFunction,
  randomVariable: randomVariable,
  isInForLoopCondition: isInForLoopCondition,
  isInWhileLoop: isInWhileLoop,
  isLargeNode: isLargeNode,
  isVariableIdentifier: isVariableIdentifier,
  isFunctionIdentifier: isFunctionIdentifier,
  nearbyRandomNumber: nearbyRandomNumber,
  randomArguments: randomArguments,
  randomInterestingNonNumber: randomInterestingNonNumber,
  randomInterestingNumber: randomInterestingNumber,
  randomObject: randomObject,
  randomProperty: randomProperty,
  randomSeed: randomSeed,
  randomValue: randomValue,
  getOriginalPath: getOriginalPath,
  setOriginalPath: setOriginalPath,
  getSourceLoc: getSourceLoc,
  setSourceLoc: setSourceLoc,
}
                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/crossover_mutator.js                       0000664 0000000 0000000 00000004323 14746647661 0027644 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Expression mutator.
 */

'use strict';

const babelTemplate = require('@babel/template').default;

const common = require('./common.js');
const random = require('../random.js');
const mutator = require('./mutator.js');
const sourceHelpers = require('../source_helpers.js');

class CrossOverMutator extends mutator.Mutator {
  constructor(settings, db) {
    super();
    this.settings = settings;
    this.db = db;
  }

  get visitor() {
    const thisMutator = this;

    return [{
      ExpressionStatement(path) {
        if (!random.choose(thisMutator.settings.MUTATE_CROSSOVER_INSERT)) {
          return;
        }

        const canHaveSuper = Boolean(path.findParent(x => x.isClassMethod()));
        const randomExpression = thisMutator.db.getRandomStatement(
            {canHaveSuper: canHaveSuper});

        // Insert the statement.
        let toInsert = babelTemplate(
            randomExpression.source,
            sourceHelpers.BABYLON_REPLACE_VAR_OPTIONS);
        const dependencies = {};

        if (randomExpression.dependencies) {
          const variables = common.availableVariables(path);
          if (!variables.length) {
            return;
          }
          for (const dependency of randomExpression.dependencies) {
            dependencies[dependency] = random.single(variables);
          }
        }

        try {
          toInsert = toInsert(dependencies);
        } catch (e) {
          if (thisMutator.settings.testing) {
            // Fail early in tests.
            throw e;
          }
          console.log('ERROR: Failed to parse:', randomExpression.source);
          console.log(e);
          return;
        }

        thisMutator.annotate(
            toInsert,
            'Crossover from ' + randomExpression.originalPath);

        if (random.choose(0.5)) {
          thisMutator.insertBeforeSkip(path, toInsert);
        } else {
          thisMutator.insertAfterSkip(path, toInsert);
        }

        path.skip();
      },
    }, {
    }];
  }
}

module.exports = {
  CrossOverMutator: CrossOverMutator,
};
                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/differential_fuzz_mutator.js               0000664 0000000 0000000 00000017007 14746647661 0031334 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Mutator for differential fuzzing.
 */

'use strict';

const babelTemplate = require('@babel/template').default;
const babelTypes = require('@babel/types');

const common = require('./common.js');
const mutator = require('./mutator.js');
const random = require('../random.js');

// Templates for various statements.
const incCaught = babelTemplate('__caught++;');
const printValue = babelTemplate('print(VALUE);');
const printCaught = babelTemplate('print("Caught: " + __caught);');
const printHash = babelTemplate('print("Hash: " + __hash);');
const prettyPrint = babelTemplate('__prettyPrint(ID);');
const prettyPrintExtra = babelTemplate('__prettyPrintExtra(ID);');

// This section prefix is expected by v8_foozzie.py. Existing prefixes
// (e.g. from CrashTests) are cleaned up with CLEANED_PREFIX.
const SECTION_PREFIX = 'v8-foozzie source: ';
const CLEANED_PREFIX = 'v***************e: ';

/**
 * Babel statement for calling deep printing from the fuzz library.
 */
function prettyPrintStatement(variable) {
  return prettyPrint({ ID: babelTypes.cloneDeep(variable) });
}

/**
 * As above, but using the "extra" variant, which will reduce printing
 * after too many calls to prevent I/O flooding.
 */
function prettyPrintExtraStatement(variable) {
  return prettyPrintExtra({ ID: babelTypes.cloneDeep(variable) });
}

/**
 * Mutator for suppressing known and/or unfixable issues.
 */
class DifferentialFuzzSuppressions extends mutator.Mutator {
  get visitor() {
    let thisMutator = this;

    return {
      // Clean up strings containing the magic section prefix. Those can come
      // e.g. from CrashTests and would confuse the deduplication in
      // v8_foozzie.py.
      StringLiteral(path) {
        if (path.node.value.startsWith(SECTION_PREFIX)) {
          const postfix = path.node.value.substring(SECTION_PREFIX.length);
          path.node.value = CLEANED_PREFIX + postfix;
          thisMutator.annotate(path.node, 'Replaced magic string');
        }
      },
      // Known precision differences: https://crbug.com/1063568
      BinaryExpression(path) {
        if (path.node.operator == '**') {
          path.node.operator = '+';
          thisMutator.annotate(path.node, 'Replaced **');
        }
      },
      // Unsupported language feature: https://crbug.com/1020573
      MemberExpression(path) {
        if (path.node.property.name == "arguments") {
          let replacement = common.randomVariable(path);
          if (!replacement) {
            replacement = babelTypes.thisExpression();
          }
          thisMutator.annotate(replacement, 'Replaced .arguments');
          thisMutator.replaceWithSkip(path, replacement);
        }
      },
    };
  }
}

/**
 * Mutator for tracking original input files and for extra printing.
 */
class DifferentialFuzzMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  /**
   * Looks for the dummy node that marks the beginning of an input file
   * from the corpus.
   */
  isSectionStart(path) {
    return !!common.getOriginalPath(path.node);
  }

  /**
   * Create print statements for printing the magic section prefix that's
   * expected by v8_foozzie.py to differentiate different source files.
   */
  getSectionHeader(path) {
    const orig = common.getOriginalPath(path.node);
    return printValue({
      VALUE: babelTypes.stringLiteral(SECTION_PREFIX + orig),
    });
  }

  /**
   * Create statements for extra printing at the end of a section. We print
   * the number of caught exceptions, a generic hash of all observed values
   * and the contents of all variables in scope.
   */
  getSectionFooter(path) {
    const variables = common.availableVariables(path);
    const statements = variables.map(prettyPrintStatement);
    statements.unshift(printCaught());
    statements.unshift(printHash());
    const statement = babelTypes.tryStatement(
        babelTypes.blockStatement(statements),
        babelTypes.catchClause(
            babelTypes.identifier('e'),
            babelTypes.blockStatement([])));
    this.annotate(statement, 'Print variables and exceptions from section');
    return statement;
  }

  /**
   * Helper for printing the contents of several variables.
   */
  printVariables(path, nodes) {
    const statements = [];
    for (const node of nodes) {
      if (!babelTypes.isIdentifier(node) ||
          !common.isVariableIdentifier(node.name))
        continue;
      statements.push(prettyPrintExtraStatement(node));
    }
    if (statements.length) {
      this.annotate(statements[0], 'Extra variable printing');
      this.insertAfterSkip(path, statements);
    }
  }

  get visitor() {
    const thisMutator = this;
    const settings = this.settings;

    return {
      // Replace existing normal print statements with deep printing.
      CallExpression(path) {
        if (babelTypes.isIdentifier(path.node.callee) &&
            path.node.callee.name == 'print') {
          path.node.callee = babelTypes.identifier('__prettyPrintExtra');
          thisMutator.annotate(path.node, 'Pretty printing');
        }
      },
      // Either print or track caught exceptions, guarded by a probability.
      CatchClause(path) {
        const probability = random.random();
        if (probability < settings.DIFF_FUZZ_EXTRA_PRINT &&
            path.node.param &&
            babelTypes.isIdentifier(path.node.param)) {
          const statement = prettyPrintExtraStatement(path.node.param);
          path.node.body.body.unshift(statement);
        } else if (probability < settings.DIFF_FUZZ_TRACK_CAUGHT) {
          path.node.body.body.unshift(incCaught());
        }
      },
      // Insert section headers and footers between the contents of two
      // original source files. We detect the dummy no-op nodes that were
      // previously tagged with the original path of the file.
      Noop(path) {
        if (!thisMutator.isSectionStart(path)) {
          return;
        }
        const header = thisMutator.getSectionHeader(path);
        const footer = thisMutator.getSectionFooter(path);
        thisMutator.insertBeforeSkip(path, footer);
        thisMutator.insertBeforeSkip(path, header);
      },
      // Additionally we print one footer in the end.
      Program: {
        exit(path) {
          const footer = thisMutator.getSectionFooter(path);
          path.node.body.push(footer);
        },
      },
      // Print contents of variables after assignments, guarded by a
      // probability.
      ExpressionStatement(path) {
        if (!babelTypes.isAssignmentExpression(path.node.expression) ||
            !random.choose(settings.DIFF_FUZZ_EXTRA_PRINT)) {
          return;
        }
        const left = path.node.expression.left;
        if (babelTypes.isMemberExpression(left)) {
          thisMutator.printVariables(path, [left.object]);
        } else {
          thisMutator.printVariables(path, [left]);
        }
      },
      // Print contents of variables after declaration, guarded by a
      // probability.
      VariableDeclaration(path) {
        if (babelTypes.isLoop(path.parent) ||
            !random.choose(settings.DIFF_FUZZ_EXTRA_PRINT)) {
          return;
        }
        const identifiers = path.node.declarations.map(decl => decl.id);
        thisMutator.printVariables(path, identifiers);
      },
    };
  }
}

module.exports = {
  DifferentialFuzzMutator: DifferentialFuzzMutator,
  DifferentialFuzzSuppressions: DifferentialFuzzSuppressions,
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/expression_mutator.js                      0000664 0000000 0000000 00000003347 14746647661 0030023 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Expression mutator.
 */

'use strict';

const babelTypes = require('@babel/types');

const random = require('../random.js');
const mutator = require('./mutator.js');

class ExpressionMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  get visitor() {
    const thisMutator = this;

    return {
      ExpressionStatement(path) {
        if (!random.choose(thisMutator.settings.MUTATE_EXPRESSIONS)) {
          return;
        }

        const probability = random.random();

        if (probability < 0.7) {
          const repeated = babelTypes.cloneDeep(path.node);
          thisMutator.annotate(repeated, 'Repeated');
          thisMutator.insertBeforeSkip(path, repeated);
        } else if (path.key > 0) {
          // Get a random previous sibling.
          const prev = path.getSibling(random.randInt(0, path.key - 1));
          if (!prev || !prev.node) {
            return;
          }
          // Either select a previous or the current node to clone.
          const [selected, destination] = random.shuffle([prev, path]);
          if (selected.isDeclaration()) {
            return;
          }
          const cloned = babelTypes.cloneDeep(selected.node);
          thisMutator.annotate(cloned, 'Cloned sibling');
          if (random.choose(0.5)) {
            thisMutator.insertBeforeSkip(destination, cloned);
          } else {
            thisMutator.insertAfterSkip(destination, cloned);
          }
        }
      },
    };
  }
}

module.exports = {
  ExpressionMutator: ExpressionMutator,
};
                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/function_call_mutator.js                   0000664 0000000 0000000 00000011132 14746647661 0030433 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Function calls mutator.
 */

'use strict';

const babelTemplate = require('@babel/template').default;
const babelTypes = require('@babel/types');

const common = require('./common.js');
const random = require('../random.js');
const mutator = require('./mutator.js');

function _liftExpressionsToStatements(path, nodes) {
  // If the node we're replacing is an expression in an expression statement,
  // lift the replacement nodes into statements too.
  if (!babelTypes.isExpressionStatement(path.parent)) {
    return nodes;
  }

  return nodes.map(n => babelTypes.expressionStatement(n));
}

class FunctionCallMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  get visitor() {
    const thisMutator = this;

    return {
      CallExpression(path) {
        if (!babelTypes.isIdentifier(path.node.callee)) {
          return;
        }

        if (!common.isFunctionIdentifier(path.node.callee.name)) {
          return;
        }

        if (!random.choose(thisMutator.settings.MUTATE_FUNCTION_CALLS)) {
          return;
        }

        const probability = random.random();
        if (probability < 0.3) {
          const randFunc = common.randomFunction(path);
          if (randFunc) {
            thisMutator.annotate(
                path.node,
                `Replaced ${path.node.callee.name} with ${randFunc.name}`);

            path.node.callee = randFunc;
          }
        } else if (probability < 0.7 && thisMutator.settings.engine == 'V8') {
          const prepareTemplate = babelTemplate(
              '__V8BuiltinPrepareFunctionForOptimization(ID)');
          const optimizationMode = random.choose(0.7) ? 'Function' : 'Maglev';
          const optimizeTemplate = babelTemplate(
              `__V8BuiltinOptimize${optimizationMode}OnNextCall(ID)`);

          const nodes = [
              prepareTemplate({
                ID: babelTypes.cloneDeep(path.node.callee),
              }).expression,
              babelTypes.cloneDeep(path.node),
              babelTypes.cloneDeep(path.node),
              optimizeTemplate({
                ID: babelTypes.cloneDeep(path.node.callee),
              }).expression,
          ];

          thisMutator.annotate(
              path.node,
              `Optimizing ${path.node.callee.name}`);
          if (!babelTypes.isExpressionStatement(path.parent)) {
            nodes.push(path.node);
            thisMutator.replaceWithSkip(
                path, babelTypes.sequenceExpression(nodes));
          } else {
            thisMutator.insertBeforeSkip(
                path, _liftExpressionsToStatements(path, nodes));
          }
        } else if (probability < 0.8 && thisMutator.settings.engine == 'V8') {
          const template = babelTemplate(
              '__V8BuiltinCompileBaseline(ID)');

          const nodes = [
              template({
                ID: babelTypes.cloneDeep(path.node.callee),
              }).expression,
          ];

          thisMutator.annotate(
              nodes[0],
              `Compiling baseline ${path.node.callee.name}`);

          if (!babelTypes.isExpressionStatement(path.parent)) {
            nodes.push(path.node);
            thisMutator.replaceWithSkip(
                path, babelTypes.sequenceExpression(nodes));
          } else {
            thisMutator.insertBeforeSkip(
                path, _liftExpressionsToStatements(path, nodes));
          }
        } else if (probability < 0.9 &&
                   thisMutator.settings.engine == 'V8') {
          const template = babelTemplate(
              '__V8BuiltinDeoptimizeFunction(ID)');
          const insert = _liftExpressionsToStatements(path, [
              template({
                ID: babelTypes.cloneDeep(path.node.callee),
              }).expression,
          ]);

          thisMutator.annotate(
              path.node,
              `Deoptimizing ${path.node.callee.name}`);

          thisMutator.insertAfterSkip(path, insert);
        } else {
          const template = babelTemplate(
              'runNearStackLimit(() => { return CALL });');
          thisMutator.annotate(
              path.node,
              `Run to stack limit ${path.node.callee.name}`);

          thisMutator.replaceWithSkip(
              path,
              template({
                CALL: path.node,
              }).expression);
        }

        path.skip();
      },
    }
  }
}

module.exports = {
  FunctionCallMutator: FunctionCallMutator,
};
                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/mutator.js                                 0000664 0000000 0000000 00000003774 14746647661 0025550 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Mutator
 */
'use strict';

const babelTraverse = require('@babel/traverse').default;
const babelTypes = require('@babel/types');

class Mutator {
  get visitor() {
    return null;
  }

  _traverse(ast, visitor) {
    let oldEnter = null;
    if (Object.prototype.hasOwnProperty.call(visitor, 'enter')) {
      oldEnter = visitor['enter'];
    }

    // Transparently skip nodes that are marked.
    visitor['enter'] = (path) => {
      if (this.shouldSkip(path.node)) {
        path.skip();
        return;
      }

      if (oldEnter) {
        oldEnter(path);
      }
    }

    babelTraverse(ast, visitor);
  }

  mutate(source) {
    if (Array.isArray(this.visitor)) {
      for (const visitor of this.visitor) {
        this._traverse(source.ast, visitor);
      }
    } else {
      this._traverse(source.ast, this.visitor);
    }
  }

  get _skipPropertyName() {
    return '__skip' + this.constructor.name;
  }

  shouldSkip(node) {
    return Boolean(node[this._skipPropertyName]);
  }

  skipMutations(node) {
    // Mark a node to skip further mutations of the same kind.
    if (Array.isArray(node)) {
      for (const item of node) {
        item[this._skipPropertyName] = true;
      }
    } else {
      node[this._skipPropertyName] = true;
    }

    return node;
  }

  insertBeforeSkip(path, node) {
    this.skipMutations(node);
    path.insertBefore(node);
  }

  insertAfterSkip(path, node) {
    this.skipMutations(node);
    path.insertAfter(node);
  }

  replaceWithSkip(path, node) {
    this.skipMutations(node);
    path.replaceWith(node);
  }

  replaceWithMultipleSkip(path, node) {
    this.skipMutations(node);
    path.replaceWithMultiple(node);
  }

  annotate(node, message) {
    babelTypes.addComment(
        node, 'leading', ` ${this.constructor.name}: ${message} `);
  }
}

module.exports = {
  Mutator: Mutator,
}
    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/normalizer.js                              0000664 0000000 0000000 00000005073 14746647661 0026231 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Normalizer.
 * This renames variables so that we don't have collisions when combining
 * different files. It also simplifies other logic when e.g. determining the
 * type of an identifier.
 */
'use strict';

const babelTypes = require('@babel/types');

const mutator = require('./mutator.js');

class NormalizerContext {
  constructor() {
    this.funcIndex = 0;
    this.varIndex = 0;
    this.classIndex = 0;
  }
}

class IdentifierNormalizer extends mutator.Mutator {
  constructor() {
    super();
    this.context = new NormalizerContext();
  }

  get visitor() {
    const context = this.context;
    const renamed = new WeakSet();
    const globalMappings = new Map();

    return [{
      Scope(path) {
        for (const [name, binding] of Object.entries(path.scope.bindings)) {
          if (renamed.has(binding.identifier)) {
            continue;
          }

          renamed.add(binding.identifier);

          if (babelTypes.isClassDeclaration(binding.path.node) ||
              babelTypes.isClassExpression(binding.path.node)) {
            path.scope.rename(name, '__c_' + context.classIndex++);
          } else if (babelTypes.isFunctionDeclaration(binding.path.node) ||
                     babelTypes.isFunctionExpression(binding.path.node)) {
            path.scope.rename(name, '__f_' + context.funcIndex++);
          } else {
            path.scope.rename(name, '__v_' + context.varIndex++);
          }
        }
      },

      AssignmentExpression(path) {
        // Find assignments for which we have no binding in the scope. We assume
        // that these are globals which are local to our script (which weren't
        // declared with var/let/const etc).
        const ids = path.getBindingIdentifiers();
        for (const name in ids) {
          if (!path.scope.getBinding(name)) {
            globalMappings.set(name, '__v_' + context.varIndex++);
          }
        }
      }
    }, {
      // Second pass to rename globals that weren't declared with
      // var/let/const etc.
      Identifier(path) {
        if (!globalMappings.has(path.node.name)) {
          return;
        }

        if (path.scope.getBinding(path.node.name)) {
          // Don't rename if there is a binding that hides the global.
          return;
        }

        path.node.name = globalMappings.get(path.node.name);
      }
    }];
  }
}

module.exports = {
  IdentifierNormalizer: IdentifierNormalizer,
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/number_mutator.js                          0000664 0000000 0000000 00000005353 14746647661 0027113 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Numbers mutator.
 */

'use strict';

const babelTypes = require('@babel/types');

const common = require('./common.js');
const random = require('../random.js');
const mutator = require('./mutator.js');

const MIN_SAFE_INTEGER = -9007199254740991;
const MAX_SAFE_INTEGER = 9007199254740991;


function isObjectKey(path) {
  return (path.parent &&
          babelTypes.isObjectMember(path.parent) &&
          path.parent.key === path.node);
}

function createRandomNumber(value) {
  // TODO(ochang): Maybe replace with variable.
  const probability = random.random();
  if (probability < 0.01) {
    return babelTypes.numericLiteral(
        random.randInt(MIN_SAFE_INTEGER, MAX_SAFE_INTEGER));
  } else if (probability < 0.06) {
    return common.randomInterestingNumber();
  } else {
    return common.nearbyRandomNumber(value);
  }
}

class NumberMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  ignore(path) {
    return !random.choose(this.settings.MUTATE_NUMBERS) ||
           common.isInForLoopCondition(path) ||
           common.isInWhileLoop(path);
  }

  randomReplace(path, value, forcePositive=false) {
    const randomNumber = createRandomNumber(value);

    if (forcePositive) {
      randomNumber.value = Math.abs(randomNumber.value);
    }

    this.annotate(
        path.node,
        `Replaced ${value} with ${randomNumber.value}`);

    this.replaceWithSkip(path, randomNumber);
  }

  get visitor() {
    const thisMutator = this;

    return {
      NumericLiteral(path) {
        if (thisMutator.ignore(path)) {
          return;
        }

        // We handle negative unary expressions separately to replace the whole
        // expression below. E.g. -5 is UnaryExpression(-, NumericLiteral(5)).
        if (path.parent && babelTypes.isUnaryExpression(path.parent) &&
            path.parent.operator === '-') {
          return;
        }

        // Enfore positive numbers if the literal is the key of an object
        // property or method. Negative keys cause syntax errors.
        const forcePositive = isObjectKey(path);

        thisMutator.randomReplace(path, path.node.value, forcePositive);
      },
      UnaryExpression(path) {
        if (thisMutator.ignore(path)) {
          return;
        }

        // Handle the case we ignore above.
        if (path.node.operator === '-' &&
            babelTypes.isNumericLiteral(path.node.argument)) {
          thisMutator.randomReplace(path, -path.node.argument.value);
        }
      }
    };
  }
}

module.exports = {
  NumberMutator: NumberMutator,
};
                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/object_mutator.js                          0000664 0000000 0000000 00000007240 14746647661 0027066 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Mutator for object expressions.
 */

'use strict';

const babelTypes = require('@babel/types');

const common = require('./common.js');
const mutator = require('./mutator.js');
const random = require('../random.js');

const MAX_PROPERTIES = 50;

/**
 * Turn the key of an object property into a string literal.
 */
function keyToString(key) {
  if (babelTypes.isNumericLiteral(key)) {
    return babelTypes.stringLiteral(key.value.toString());
  }
  if (babelTypes.isIdentifier(key)) {
    return babelTypes.stringLiteral(key.name);
  }
  // Already a string literal.
  return key;
}

class ObjectMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  get visitor() {
    const thisMutator = this;

    return {
      ObjectExpression(path) {
        const properties = path.node.properties;
        if (!random.choose(thisMutator.settings.MUTATE_OBJECTS) ||
            properties.length > MAX_PROPERTIES) {
          return;
        }

        // Use the indices of object properties for mutations. We ignore
        // getters and setters.
        const propertyIndicies = [];
        for (const [index, property] of properties.entries()) {
          if (babelTypes.isObjectProperty(property)) {
            propertyIndicies.push(index);
          }
        }

        // The mutations below require at least one property.
        if (!propertyIndicies.length) {
          return;
        }

        // Annotate object expression with the action taken.
        function annotate(message) {
          thisMutator.annotate(path.node, message);
        }

        function getOneRandomProperty() {
          return properties[random.single(propertyIndicies)];
        }

        function getTwoRandomProperties() {
          const [a, b] = random.sample(propertyIndicies, 2);
          return [properties[a], properties[b]];
        }

        function swapPropertyValues() {
          if (propertyIndicies.length > 1) {
            annotate('Swap properties');
            const [a, b] = getTwoRandomProperties();
            [a.value, b.value] = [b.value, a.value];
          }
        }

        function duplicatePropertyValue() {
          if (propertyIndicies.length > 1) {
            const [a, b] = random.shuffle(getTwoRandomProperties());
            if (common.isLargeNode(b.value)) {
              return;
            }
            annotate('Duplicate a property value');
            a.value = babelTypes.cloneDeep(b.value);
          }
        }

        function insertRandomValue() {
          annotate('Insert a random value');
          const property = getOneRandomProperty();
          property.value = common.randomValue(path);
        }

        function stringifyKey() {
          annotate('Stringify a property key');
          const property = getOneRandomProperty();
          property.key = keyToString(property.key);
        }

        function removeProperty() {
          annotate('Remove a property');
          properties.splice(random.single(propertyIndicies), 1);
        }

        // Mutation options. Repeated mutations have a higher probability.
        const mutations = [
          swapPropertyValues,
          swapPropertyValues,
          duplicatePropertyValue,
          duplicatePropertyValue,
          insertRandomValue,
          insertRandomValue,
          removeProperty,
          stringifyKey,
        ];

        // Perform mutation.
        random.single(mutations)();
      },
    }
  }
}

module.exports = {
  ObjectMutator: ObjectMutator,
};
                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/try_catch.js                               0000664 0000000 0000000 00000012770 14746647661 0026031 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Try catch wrapper.
 */

const babelTypes = require('@babel/types');

const common = require('./common.js');
const mutator = require('./mutator.js');
const random = require('../random.js');

// Default target probability for skipping try-catch completely.
const DEFAULT_SKIP_PROB = 0.2;

// Default target probability to wrap only on toplevel, i.e. to not nest
// try-catch.
const DEFAULT_TOPLEVEL_PROB = 0.3;

// Probability to deviate from defaults and use extreme cases.
const IGNORE_DEFAULT_PROB = 0.05;

// Member expressions to be wrapped. List of (object, property) identifier
// tuples.
const WRAPPED_MEMBER_EXPRESSIONS = [
  ['WebAssembly', 'Module'],
  ['WebAssembly', 'Instantiate'],
];

function wrapTryCatch(node) {
  return babelTypes.tryStatement(
      babelTypes.blockStatement([node]),
      babelTypes.catchClause(
          babelTypes.identifier('e'),
          babelTypes.blockStatement([])));
}

function wrapTryCatchInFunction(node) {
  const ret = wrapTryCatch(babelTypes.returnStatement(node));
  const anonymousFun = babelTypes.functionExpression(
      null, [], babelTypes.blockStatement([ret]));
  return babelTypes.callExpression(anonymousFun, []);
}

// Wrap particular member expressions after `new` that are known to appear
// in initializer lists of `let` and `const`.
function replaceNewExpression(path) {
  const callee = path.node.callee;
  if (!babelTypes.isMemberExpression(callee) ||
      !babelTypes.isIdentifier(callee.object) ||
      !babelTypes.isIdentifier(callee.property)) {
    return;
  }
  if (WRAPPED_MEMBER_EXPRESSIONS.some(
      ([object, property]) => callee.object.name === object &&
                              callee.property.name === property)) {
    path.replaceWith(wrapTryCatchInFunction(path.node));
    path.skip();
  }
}

function replaceAndSkip(path) {
  if (!babelTypes.isLabeledStatement(path.parent) ||
      !babelTypes.isLoop(path.node)) {
    // Don't wrap loops with labels as it makes continue
    // statements syntactically invalid. We wrap the label
    // instead below.
    path.replaceWith(wrapTryCatch(path.node));
  }
  // Prevent infinite looping.
  path.skip();
}

class AddTryCatchMutator extends mutator.Mutator {
  callWithProb(path, fun) {
    const probability = random.random();
    if (probability < this.skipProb * this.loc) {
      // Entirely skip try-catch wrapper.
      path.skip();
    } else if (probability < (this.skipProb + this.toplevelProb) * this.loc) {
      // Only wrap on top-level.
      fun(path);
    }
  }

  get visitor() {
    const thisMutator = this;
    const accessStatement = {
      enter(path) {
        thisMutator.callWithProb(path, replaceAndSkip);
      },
      exit(path) {
        // Apply nested wrapping (is only executed if not skipped above).
        replaceAndSkip(path);
      }
    };
    return {
      Program: {
        enter(path) {
          // Track original source location fraction in [0, 1).
          thisMutator.loc = 0;
          // Target probability for skipping try-catch.
          thisMutator.skipProb = DEFAULT_SKIP_PROB;
          // Target probability for not nesting try-catch.
          thisMutator.toplevelProb = DEFAULT_TOPLEVEL_PROB;
          // Maybe deviate from target probability for the entire test.
          if (random.choose(IGNORE_DEFAULT_PROB)) {
            thisMutator.skipProb = random.uniform(0, 1);
            thisMutator.toplevelProb = random.uniform(0, 1);
            thisMutator.annotate(
                path.node,
                'Target skip probability ' + thisMutator.skipProb +
                ' and toplevel probability ' + thisMutator.toplevelProb);
          }
        }
      },
      Noop: {
        enter(path) {
          if (common.getSourceLoc(path.node)) {
            thisMutator.loc = common.getSourceLoc(path.node);
          }
        },
      },
      ExpressionStatement: accessStatement,
      IfStatement: accessStatement,
      LabeledStatement: {
        enter(path) {
          // Apply an extra try-catch around the label of a loop, since we
          // ignore the loop itself if it has a label.
          if (babelTypes.isLoop(path.node.body)) {
            thisMutator.callWithProb(path, replaceAndSkip);
          }
        },
        exit(path) {
          // Apply nested wrapping (is only executed if not skipped above).
          if (babelTypes.isLoop(path.node.body)) {
            replaceAndSkip(path);
          }
        },
      },
      // This covers {While|DoWhile|ForIn|ForOf|For}Statement.
      Loop: accessStatement,
      NewExpression: {
        enter(path) {
          thisMutator.callWithProb(path, replaceNewExpression);
        },
        exit(path) {
          // Apply nested wrapping (is only executed if not skipped above).
          replaceNewExpression(path);
        }
      },
      SwitchStatement: accessStatement,
      VariableDeclaration: {
        enter(path) {
          if (path.node.kind !== 'var' || babelTypes.isLoop(path.parent))
            return;
          thisMutator.callWithProb(path, replaceAndSkip);
        },
        exit(path) {
          if (path.node.kind !== 'var' || babelTypes.isLoop(path.parent))
            return;
          // Apply nested wrapping (is only executed if not skipped above).
          replaceAndSkip(path);
        }
      },
      WithStatement: accessStatement,
    };
  }
}

module.exports = {
  AddTryCatchMutator: AddTryCatchMutator,
}
        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/variable_mutator.js                        0000664 0000000 0000000 00000003246 14746647661 0027407 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Variables mutator.
 */

'use strict';

const babelTypes = require('@babel/types');

const common = require('./common.js');
const random = require('../random.js');
const mutator = require('./mutator.js');

function _isInFunctionParam(path) {
  const child = path.find(p => p.parent && babelTypes.isFunction(p.parent));
  return child && child.parentKey === 'params';
}

class VariableMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  get visitor() {
    const thisMutator = this;

    return {
      Identifier(path) {
        if (!random.choose(thisMutator.settings.MUTATE_VARIABLES)) {
          return;
        }

        if (!common.isVariableIdentifier(path.node.name)) {
          return;
        }

        // Don't mutate variables that are being declared.
        if (babelTypes.isVariableDeclarator(path.parent)) {
          return;
        }

        // Don't mutate function params.
        if (_isInFunctionParam(path)) {
          return;
        }

        if (common.isInForLoopCondition(path) ||
            common.isInWhileLoop(path)) {
          return;
        }

        const randVar = common.randomVariable(path);
        if (!randVar) {
          return;
        }

        const newName = randVar.name;
        thisMutator.annotate(
            path.node,
            `Replaced ${path.node.name} with ${newName}`);
        path.node.name = newName;
      }
    };
  }
}

module.exports = {
  VariableMutator: VariableMutator,
};
                                                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/mutators/variable_or_object_mutation.js             0000664 0000000 0000000 00000010753 14746647661 0031603 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Variables mutator.
 */

'use strict';

const babelTemplate = require('@babel/template').default;
const babelTypes = require('@babel/types');

const common = require('./common.js');
const random = require('../random.js');
const mutator = require('./mutator.js');

const MAX_MUTATION_RECURSION_DEPTH = 5;

class VariableOrObjectMutator extends mutator.Mutator {
  constructor(settings) {
    super();
    this.settings = settings;
  }

  _randomVariableOrObject(path) {
    const randomVar = common.randomVariable(path);
    if (random.choose(0.05) || !randomVar) {
      return common.randomObject();
    }

    return randomVar;
  }

  _randomVariableOrObjectMutations(path, recurseDepth=0) {
    if (recurseDepth >= MAX_MUTATION_RECURSION_DEPTH) {
      return new Array();
    }

    const probability = random.random();

    if (probability < 0.3) {
      const first = this._randomVariableOrObjectMutations(path, recurseDepth + 1);
      const second = this._randomVariableOrObjectMutations(
          path, recurseDepth + 1);
      return first.concat(second);
    }

    const randVarOrObject = this._randomVariableOrObject(path);
    const randProperty = common.randomProperty(randVarOrObject);
    let newRandVarOrObject = randVarOrObject;
    if (random.choose(0.2)) {
      newRandVarOrObject = this._randomVariableOrObject(path);
    }

    const mutations = new Array();

    if (probability < 0.4) {
      const template = babelTemplate(
          'delete IDENTIFIER[PROPERTY], __callGC()')
      mutations.push(template({
        IDENTIFIER: randVarOrObject,
        PROPERTY: randProperty
      }));
    } else if (probability < 0.5) {
      const template = babelTemplate(
          'IDENTIFIER[PROPERTY], __callGC()')
      mutations.push(template({
        IDENTIFIER: randVarOrObject,
        PROPERTY: randProperty
      }));
    } else if (probability < 0.6) {
      const template = babelTemplate(
          'IDENTIFIER[PROPERTY] = RANDOM, __callGC()')
      mutations.push(template({
        IDENTIFIER: randVarOrObject,
        PROPERTY: randProperty,
        RANDOM: common.randomValue(path),
      }));
    } else if (probability < 0.7) {
      mutations.push(
          babelTypes.expressionStatement(
              common.callRandomFunction(path, randVarOrObject)));
    } else if (probability < 0.8) {
      const template = babelTemplate(
          'VAR = IDENTIFIER, __callGC()')
      var randomVar = common.randomVariable(path);
      if (!randomVar) {
        return mutations;
      }

      mutations.push(template({
        VAR: randomVar,
        IDENTIFIER: randVarOrObject,
      }));
    } else if (probability < 0.9) {
      const template = babelTemplate(
          'if (IDENTIFIER != null && typeof(IDENTIFIER) == "object") ' +
          'Object.defineProperty(IDENTIFIER, PROPERTY, {value: VALUE})')
      mutations.push(template({
          IDENTIFIER: newRandVarOrObject,
          PROPERTY: randProperty,
          VALUE: common.randomValue(path),
      }));
    } else {
      const template = babelTemplate(
          'if (IDENTIFIER != null && typeof(IDENTIFIER) == "object") ' +
          'Object.defineProperty(IDENTIFIER, PROPERTY, {' +
          'get: function() { GETTER_MUTATION ; return VALUE; },' +
          'set: function(value) { SETTER_MUTATION; }' +
          '})');
      mutations.push(template({
          IDENTIFIER: newRandVarOrObject,
          PROPERTY: randProperty,
          GETTER_MUTATION: this._randomVariableOrObjectMutations(
              path, recurseDepth + 1),
          SETTER_MUTATION: this._randomVariableOrObjectMutations(
              path, recurseDepth + 1),
          VALUE: common.randomValue(path),
      }));
    }

    return mutations;
  }


  get visitor() {
    const settings = this.settings;
    const thisMutator = this;

    return {
      ExpressionStatement(path) {
        if (!random.choose(settings.ADD_VAR_OR_OBJ_MUTATIONS)) {
          return;
        }

        const mutations = thisMutator._randomVariableOrObjectMutations(path);
        thisMutator.annotate(mutations[0], 'Random mutation');

        if (random.choose(0.5)) {
          thisMutator.insertBeforeSkip(path, mutations);
        } else {
          thisMutator.insertAfterSkip(path, mutations);
        }

        path.skip();
      }
    };
  }
}

module.exports = {
  VariableOrObjectMutator: VariableOrObjectMutator,
};
                     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/package-lock.json                                   0000664 0000000 0000000 00000403170 14746647661 0025047 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {
  "name": "ochang_js_fuzzer",
  "version": "1.0.0",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "@babel/code-frame": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.0.0.tgz",
      "integrity": "sha512-OfC2uemaknXr87bdLUkWog7nYuliM9Ij5HUcajsVcMCpQrcLmtxRbVFTIqmcSkSeYRBFBRxs2FiUqFJDLdiebA==",
      "requires": {
        "@babel/highlight": "^7.0.0"
      }
    },
    "@babel/generator": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.1.3.tgz",
      "integrity": "sha512-ZoCZGcfIJFJuZBqxcY9OjC1KW2lWK64qrX1o4UYL3yshVhwKFYgzpWZ0vvtGMNJdTlvkw0W+HR1VnYN8q3QPFQ==",
      "requires": {
        "@babel/types": "^7.1.3",
        "jsesc": "^2.5.1",
        "lodash": "^4.17.10",
        "source-map": "^0.5.0",
        "trim-right": "^1.0.1"
      }
    },
    "@babel/helper-function-name": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.1.0.tgz",
      "integrity": "sha512-A95XEoCpb3TO+KZzJ4S/5uW5fNe26DjBGqf1o9ucyLyCmi1dXq/B3c8iaWTfBk3VvetUxl16e8tIrd5teOCfGw==",
      "requires": {
        "@babel/helper-get-function-arity": "^7.0.0",
        "@babel/template": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "@babel/helper-get-function-arity": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-get-function-arity/-/helper-get-function-arity-7.0.0.tgz",
      "integrity": "sha512-r2DbJeg4svYvt3HOS74U4eWKsUAMRH01Z1ds1zx8KNTPtpTL5JAsdFv8BNyOpVqdFhHkkRDIg5B4AsxmkjAlmQ==",
      "requires": {
        "@babel/types": "^7.0.0"
      }
    },
    "@babel/helper-split-export-declaration": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.0.0.tgz",
      "integrity": "sha512-MXkOJqva62dfC0w85mEf/LucPPS/1+04nmmRMPEBUB++hiiThQ2zPtX/mEWQ3mtzCEjIJvPY8nuwxXtQeQwUag==",
      "requires": {
        "@babel/types": "^7.0.0"
      }
    },
    "@babel/highlight": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.0.0.tgz",
      "integrity": "sha512-UFMC4ZeFC48Tpvj7C8UgLvtkaUuovQX+5xNWrsIoMG8o2z+XFKjKaN9iVmS84dPwVN00W4wPmqvYoZF3EGAsfw==",
      "requires": {
        "chalk": "^2.0.0",
        "esutils": "^2.0.2",
        "js-tokens": "^4.0.0"
      }
    },
    "@babel/parser": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.1.3.tgz",
      "integrity": "sha512-gqmspPZOMW3MIRb9HlrnbZHXI1/KHTOroBwN1NcLL6pWxzqzEKGvRTq0W/PxS45OtQGbaFikSQpkS5zbnsQm2w=="
    },
    "@babel/template": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.1.2.tgz",
      "integrity": "sha512-SY1MmplssORfFiLDcOETrW7fCLl+PavlwMh92rrGcikQaRq4iWPVH0MpwPpY3etVMx6RnDjXtr6VZYr/IbP/Ag==",
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "@babel/parser": "^7.1.2",
        "@babel/types": "^7.1.2"
      }
    },
    "@babel/traverse": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.1.4.tgz",
      "integrity": "sha512-my9mdrAIGdDiSVBuMjpn/oXYpva0/EZwWL3sm3Wcy/AVWO2eXnsoZruOT9jOGNRXU8KbCIu5zsKnXcAJ6PcV6Q==",
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "@babel/generator": "^7.1.3",
        "@babel/helper-function-name": "^7.1.0",
        "@babel/helper-split-export-declaration": "^7.0.0",
        "@babel/parser": "^7.1.3",
        "@babel/types": "^7.1.3",
        "debug": "^3.1.0",
        "globals": "^11.1.0",
        "lodash": "^4.17.10"
      },
      "dependencies": {
        "debug": {
          "version": "3.2.6",
          "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.6.tgz",
          "integrity": "sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "globals": {
          "version": "11.8.0",
          "resolved": "https://registry.npmjs.org/globals/-/globals-11.8.0.tgz",
          "integrity": "sha512-io6LkyPVuzCHBSQV9fmOwxZkUk6nIaGmxheLDgmuFv89j0fm2aqDbIXKAGfzCMHqz3HLF2Zf8WSG6VqMh2qFmA=="
        },
        "ms": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.1.tgz",
          "integrity": "sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg=="
        }
      }
    },
    "@babel/types": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.1.3.tgz",
      "integrity": "sha512-RpPOVfK+yatXyn8n4PB1NW6k9qjinrXrRR8ugBN8fD6hCy5RXI6PSbVqpOJBO9oSaY7Nom4ohj35feb0UR9hSA==",
      "requires": {
        "esutils": "^2.0.2",
        "lodash": "^4.17.10",
        "to-fast-properties": "^2.0.0"
      }
    },
    "@mrmlnc/readdir-enhanced": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/@mrmlnc/readdir-enhanced/-/readdir-enhanced-2.2.1.tgz",
      "integrity": "sha512-bPHp6Ji8b41szTOcaP63VlnbbO5Ny6dwAATtY6JTjh5N2OLrb5Qk/Th5cRkRQhkWCt+EJsYrNB0MiL+Gpn6e3g==",
      "dev": true,
      "requires": {
        "call-me-maybe": "^1.0.1",
        "glob-to-regexp": "^0.3.0"
      }
    },
    "@nodelib/fs.stat": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-1.1.2.tgz",
      "integrity": "sha512-yprFYuno9FtNsSHVlSWd+nRlmGoAbqbeCwOryP6sC/zoCjhpArcRMYp19EvpSUSizJAlsXEwJv+wcWS9XaXdMw==",
      "dev": true
    },
    "@sinonjs/commons": {
      "version": "1.8.6",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-1.8.6.tgz",
      "integrity": "sha512-Ky+XkAkqPZSm3NLBeUng77EBQl3cmeJhITaGHdYH8kjVB+aun3S4XBRti2zt17mtt0mIUDiNxYeoJm6drVvBJQ==",
      "dev": true,
      "requires": {
        "type-detect": "4.0.8"
      },
      "dependencies": {
        "type-detect": {
          "version": "4.0.8",
          "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
          "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
          "dev": true
        }
      }
    },
    "@sinonjs/formatio": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/@sinonjs/formatio/-/formatio-3.2.2.tgz",
      "integrity": "sha512-B8SEsgd8gArBLMD6zpRw3juQ2FVSsmdd7qlevyDqzS9WTCtvF55/gAL+h6gue8ZvPYcdiPdvueM/qm//9XzyTQ==",
      "dev": true,
      "requires": {
        "@sinonjs/commons": "^1",
        "@sinonjs/samsam": "^3.1.0"
      }
    },
    "@sinonjs/samsam": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/@sinonjs/samsam/-/samsam-3.3.3.tgz",
      "integrity": "sha512-bKCMKZvWIjYD0BLGnNrxVuw4dkWCYsLqFOUWw8VgKF/+5Y+mE7LfHWPIYoDXowH+3a9LsWDMo0uAP8YDosPvHQ==",
      "dev": true,
      "requires": {
        "@sinonjs/commons": "^1.3.0",
        "array-from": "^2.1.1",
        "lodash": "^4.17.15"
      }
    },
    "@sinonjs/text-encoding": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/@sinonjs/text-encoding/-/text-encoding-0.7.2.tgz",
      "integrity": "sha512-sXXKG+uL9IrKqViTtao2Ws6dy0znu9sOaP1di/jKGW1M6VssO8vlpXCQcpZ+jisQ1tTFAC5Jo/EOzFbggBagFQ==",
      "dev": true
    },
    "@types/color-name": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@types/color-name/-/color-name-1.1.1.tgz",
      "integrity": "sha512-rr+OQyAjxze7GgWrSaJwydHStIhHq2lvY3BOC2Mj7KnzI7XK0Uw1TOOdI9lDoajEbSWLiYgoo4f1R51erQfhPQ==",
      "dev": true
    },
    "acorn": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.1.1.tgz",
      "integrity": "sha512-add7dgA5ppRPxCFJoAGfMDi7PIBXq1RtGo7BhbLaxwrXPOmw8gq48Y9ozT01hUKy9byMjlR20EJhu5zlkErEkg==",
      "dev": true
    },
    "acorn-jsx": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.2.0.tgz",
      "integrity": "sha512-HiUX/+K2YpkpJ+SzBffkM/AQ2YE03S0U1kjTLVpoJdhZMOWy8qvXVN9JdLqv2QsaQ6MPYQIuNmwD8zOiYUofLQ==",
      "dev": true
    },
    "ajv": {
      "version": "5.5.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-5.5.2.tgz",
      "integrity": "sha1-c7Xuyj+rZT49P5Qis0GtQiBdyWU=",
      "dev": true,
      "requires": {
        "co": "^4.6.0",
        "fast-deep-equal": "^1.0.0",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.3.0"
      }
    },
    "ansi-escapes": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.1.tgz",
      "integrity": "sha512-JWF7ocqNrp8u9oqpgV+wH5ftbt+cfvv+PTjOvKLT3AdYly/LmORARfEVT1iyjwN+4MqE5UmVKoAdIBqeoCHgLA==",
      "dev": true,
      "requires": {
        "type-fest": "^0.11.0"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.11.0",
          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.11.0.tgz",
          "integrity": "sha512-OdjXJxnCN1AvyLSzeKIgXTXxV+99ZuXl3Hpo9XpJAv9MBcHrrJOQ5kV7ypXOuQie+AmWG25hLbiKdwYTifzcfQ==",
          "dev": true
        }
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true
    },
    "ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "requires": {
        "color-convert": "^1.9.0"
      }
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "arr-diff": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/arr-diff/-/arr-diff-4.0.0.tgz",
      "integrity": "sha1-1kYQdP6/7HHn4VI1dhoyml3HxSA=",
      "dev": true
    },
    "arr-flatten": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/arr-flatten/-/arr-flatten-1.1.0.tgz",
      "integrity": "sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==",
      "dev": true
    },
    "arr-union": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/arr-union/-/arr-union-3.1.0.tgz",
      "integrity": "sha1-45sJrqne+Gao8gbiiK9jkZuuOcQ=",
      "dev": true
    },
    "array-from": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/array-from/-/array-from-2.1.1.tgz",
      "integrity": "sha512-GQTc6Uupx1FCavi5mPzBvVT7nEOeWMmUA9P95wpfpW1XwMSKs+KaymD5C2Up7KAUKg/mYwbsUYzdZWcoajlNZg==",
      "dev": true
    },
    "array-union": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-1.0.2.tgz",
      "integrity": "sha1-mjRBDk9OPaI96jdb5b5w8kd47Dk=",
      "dev": true,
      "requires": {
        "array-uniq": "^1.0.1"
      }
    },
    "array-uniq": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/array-uniq/-/array-uniq-1.0.3.tgz",
      "integrity": "sha1-r2rId6Jcx/dOBYiUdThY39sk/bY=",
      "dev": true
    },
    "array-unique": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/array-unique/-/array-unique-0.3.2.tgz",
      "integrity": "sha1-qJS3XUvE9s1nnvMkSp/Y9Gri1Cg=",
      "dev": true
    },
    "arrify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz",
      "integrity": "sha1-iYUI2iIm84DfkEcoRWhJwVAaSw0=",
      "dev": true
    },
    "asn1": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.4.tgz",
      "integrity": "sha512-jxwzQpLQjSmWXgwaCZE9Nz+glAG01yF1QnWgbhGwHI5A6FRIEY6IVqtHhIepHqI7/kyEyQEagBC5mBEFlIYvdg==",
      "dev": true,
      "requires": {
        "safer-buffer": "~2.1.0"
      }
    },
    "assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha1-8S4PPF13sLHN2RRpQuTpbB5N1SU=",
      "dev": true
    },
    "assign-symbols": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assign-symbols/-/assign-symbols-1.0.0.tgz",
      "integrity": "sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c=",
      "dev": true
    },
    "astral-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/astral-regex/-/astral-regex-1.0.0.tgz",
      "integrity": "sha512-+Ryf6g3BKoRc7jfp7ad8tM4TtMiaWvbF/1/sQcZPkkS7ag3D5nMBCe2UfOTONtAkaG0tO0ij3C5Lwmf1EiyjHg==",
      "dev": true
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k=",
      "dev": true
    },
    "atob": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/atob/-/atob-2.1.2.tgz",
      "integrity": "sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==",
      "dev": true
    },
    "aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha1-tG6JCTSpWR8tL2+G1+ap8bP+dqg=",
      "dev": true
    },
    "aws4": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.8.0.tgz",
      "integrity": "sha512-ReZxvNHIOv88FlT7rxcXIIC0fPt4KZqZbOlivyWtXLt8ESx84zd3kMC6iK5jVeS2qt+g7ftS7ye4fi06X5rtRQ==",
      "dev": true
    },
    "babel-runtime": {
      "version": "6.26.0",
      "resolved": "https://registry.npmjs.org/babel-runtime/-/babel-runtime-6.26.0.tgz",
      "integrity": "sha1-llxwWGaOgrVde/4E/yM3vItWR/4=",
      "dev": true,
      "requires": {
        "core-js": "^2.4.0",
        "regenerator-runtime": "^0.11.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true
    },
    "base": {
      "version": "0.11.2",
      "resolved": "https://registry.npmjs.org/base/-/base-0.11.2.tgz",
      "integrity": "sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==",
      "dev": true,
      "requires": {
        "cache-base": "^1.0.1",
        "class-utils": "^0.3.5",
        "component-emitter": "^1.2.1",
        "define-property": "^1.0.0",
        "isobject": "^3.0.1",
        "mixin-deep": "^1.2.0",
        "pascalcase": "^0.1.1"
      },
      "dependencies": {
        "define-property": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
          "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^1.0.0"
          }
        },
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "dev": true,
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        }
      }
    },
    "bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha1-pDAdOJtqQ/m2f/PKEaP2Y342Dp4=",
      "dev": true,
      "requires": {
        "tweetnacl": "^0.14.3"
      }
    },
    "boom": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/boom/-/boom-4.3.1.tgz",
      "integrity": "sha1-T4owBctKfjiJ90kDD9JbluAdLjE=",
      "dev": true,
      "requires": {
        "hoek": "4.x.x"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-2.3.2.tgz",
      "integrity": "sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==",
      "dev": true,
      "requires": {
        "arr-flatten": "^1.1.0",
        "array-unique": "^0.3.2",
        "extend-shallow": "^2.0.1",
        "fill-range": "^4.0.0",
        "isobject": "^3.0.1",
        "repeat-element": "^1.1.2",
        "snapdragon": "^0.8.1",
        "snapdragon-node": "^2.0.1",
        "split-string": "^3.0.2",
        "to-regex": "^3.0.1"
      },
      "dependencies": {
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "dev": true,
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "browser-stdout": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/browser-stdout/-/browser-stdout-1.3.0.tgz",
      "integrity": "sha1-81HTKWnTL6XXpVZxVCY9korjvR8=",
      "dev": true
    },
    "byline": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/byline/-/byline-5.0.0.tgz",
      "integrity": "sha1-dBxSFkaOrcRXsDQQEYrXfejB3bE=",
      "dev": true
    },
    "cache-base": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/cache-base/-/cache-base-1.0.1.tgz",
      "integrity": "sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==",
      "dev": true,
      "requires": {
        "collection-visit": "^1.0.0",
        "component-emitter": "^1.2.1",
        "get-value": "^2.0.6",
        "has-value": "^1.0.0",
        "isobject": "^3.0.1",
        "set-value": "^2.0.0",
        "to-object-path": "^0.3.0",
        "union-value": "^1.0.0",
        "unset-value": "^1.0.0"
      }
    },
    "call-me-maybe": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/call-me-maybe/-/call-me-maybe-1.0.1.tgz",
      "integrity": "sha1-JtII6onje1y95gJQoV8DHBak1ms=",
      "dev": true
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true
    },
    "caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha1-G2gcIf+EAzyCZUMJBolCDRhxUdw=",
      "dev": true
    },
    "chalk": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.1.tgz",
      "integrity": "sha512-ObN6h1v2fTJSmUXoS3nMQ92LbDK9be4TV+6G+omQlGJFdcUX5heKi1LZ1YnRMIgwTLEj3E24bT6tYni50rlCfQ==",
      "requires": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "dependencies": {
        "has-flag": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
          "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
        },
        "supports-color": {
          "version": "5.5.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
          "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
          "requires": {
            "has-flag": "^3.0.0"
          }
        }
      }
    },
    "chardet": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
      "dev": true
    },
    "class-utils": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/class-utils/-/class-utils-0.3.6.tgz",
      "integrity": "sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==",
      "dev": true,
      "requires": {
        "arr-union": "^3.1.0",
        "define-property": "^0.2.5",
        "isobject": "^3.0.0",
        "static-extend": "^0.1.1"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        }
      }
    },
    "cli-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
      "dev": true,
      "requires": {
        "restore-cursor": "^3.1.0"
      }
    },
    "cli-width": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-2.2.0.tgz",
      "integrity": "sha1-/xnt6Kml5XkyQUewwR8PvLq+1jk=",
      "dev": true
    },
    "co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha1-bqa989hTrlTMuOR7+gvz+QMfsYQ=",
      "dev": true
    },
    "collection-visit": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/collection-visit/-/collection-visit-1.0.0.tgz",
      "integrity": "sha1-S8A3PBZLwykbTTaMgpzxqApZ3KA=",
      "dev": true,
      "requires": {
        "map-visit": "^1.0.0",
        "object-visit": "^1.0.0"
      }
    },
    "color-convert": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.0.tgz",
      "integrity": "sha1-Gsz5fdc5uYO/mU1W/sj5WFNkG3o=",
      "requires": {
        "color-name": "^1.1.1"
      }
    },
    "color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
    },
    "combined-stream": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.7.tgz",
      "integrity": "sha512-brWl9y6vOB1xYPZcpZde3N9zDByXTosAeMDo4p1wzo6UMOX4vumB+TP1RZ76sfE6Md68Q0NJSrE/gbezd4Ul+w==",
      "dev": true,
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "commander": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.11.0.tgz",
      "integrity": "sha512-b0553uYA5YAEGgyYIGYROzKQ7X5RAqedkfjiZxwi0kL1g3bOaBNNZfYkzt/CL0umgD5wc9Jec2FbB98CjkMRvQ=="
    },
    "component-emitter": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.2.1.tgz",
      "integrity": "sha1-E3kY1teCg/ffemt8WmPhQOaUJeY=",
      "dev": true
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true
    },
    "copy-descriptor": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/copy-descriptor/-/copy-descriptor-0.1.1.tgz",
      "integrity": "sha1-Z29us8OZl8LuGsOpJP1hJHSPV40=",
      "dev": true
    },
    "core-js": {
      "version": "2.5.7",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-2.5.7.tgz",
      "integrity": "sha512-RszJCAxg/PP6uzXVXL6BsxSXx/B05oJAQ2vkJRjyjrEcNVycaqOmNb5OTxZPE3xa5gwZduqza6L9JOCenh/Ecw==",
      "dev": true
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac=",
      "dev": true
    },
    "cross-spawn": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
      "dev": true,
      "requires": {
        "nice-try": "^1.0.4",
        "path-key": "^2.0.1",
        "semver": "^5.5.0",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      }
    },
    "cryptiles": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/cryptiles/-/cryptiles-3.1.2.tgz",
      "integrity": "sha1-qJ+7Ig9c4l7FboxKqKT9e1sNKf4=",
      "dev": true,
      "requires": {
        "boom": "5.x.x"
      },
      "dependencies": {
        "boom": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/boom/-/boom-5.2.0.tgz",
          "integrity": "sha512-Z5BTk6ZRe4tXXQlkqftmsAUANpXmuwlsF5Oov8ThoMbQRzdGTA1ngYRW160GexgOgjsFOKJz0LYhoNi+2AMBUw==",
          "dev": true,
          "requires": {
            "hoek": "4.x.x"
          }
        }
      }
    },
    "crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA=="
    },
    "dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha1-hTz6D3y+L+1d4gMmuN1YEDX24vA=",
      "dev": true,
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dev": true,
      "requires": {
        "ms": "2.0.0"
      }
    },
    "decode-uri-component": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.0.tgz",
      "integrity": "sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU=",
      "dev": true
    },
    "deep-is": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.3.tgz",
      "integrity": "sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=",
      "dev": true
    },
    "define-property": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/define-property/-/define-property-2.0.2.tgz",
      "integrity": "sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==",
      "dev": true,
      "requires": {
        "is-descriptor": "^1.0.2",
        "isobject": "^3.0.1"
      },
      "dependencies": {
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "dev": true,
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        }
      }
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
      "dev": true
    },
    "diff": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/diff/-/diff-3.2.0.tgz",
      "integrity": "sha1-yc45Okt8vQsFinJck98pkCeGj/k=",
      "dev": true
    },
    "dir-glob": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-2.0.0.tgz",
      "integrity": "sha512-37qirFDz8cA5fimp9feo43fSuRo2gHwaIn6dXL8Ber1dGwUosDrGZeCCXq57WnIqE4aQ+u3eQZzsk1yOzhdwag==",
      "dev": true,
      "requires": {
        "arrify": "^1.0.1",
        "path-type": "^3.0.0"
      }
    },
    "doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "requires": {
        "esutils": "^2.0.2"
      }
    },
    "ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha1-OoOpBOVDUyh4dMVkt1SThoSamMk=",
      "dev": true,
      "requires": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
    },
    "escodegen": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.10.0.tgz",
      "integrity": "sha512-fjUOf8johsv23WuIKdNQU4P9t9jhQ4Qzx6pC2uW890OloK3Zs1ZAoCNpg/2larNF501jLl3UNy0kIRcF6VI22g==",
      "dev": true,
      "requires": {
        "esprima": "^3.1.3",
        "estraverse": "^4.2.0",
        "esutils": "^2.0.2",
        "optionator": "^0.8.1",
        "source-map": "~0.6.1"
      },
      "dependencies": {
        "source-map": {
          "version": "0.6.1",
          "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
          "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
          "dev": true,
          "optional": true
        }
      }
    },
    "eslint": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-6.8.0.tgz",
      "integrity": "sha512-K+Iayyo2LtyYhDSYwz5D5QdWw0hCacNzyq1Y821Xna2xSJj7cijoLLYmLxTQgcgZ9mC61nryMy9S7GRbYpI5Ig==",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "ajv": "^6.10.0",
        "chalk": "^2.1.0",
        "cross-spawn": "^6.0.5",
        "debug": "^4.0.1",
        "doctrine": "^3.0.0",
        "eslint-scope": "^5.0.0",
        "eslint-utils": "^1.4.3",
        "eslint-visitor-keys": "^1.1.0",
        "espree": "^6.1.2",
        "esquery": "^1.0.1",
        "esutils": "^2.0.2",
        "file-entry-cache": "^5.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^5.0.0",
        "globals": "^12.1.0",
        "ignore": "^4.0.6",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "inquirer": "^7.0.0",
        "is-glob": "^4.0.0",
        "js-yaml": "^3.13.1",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.3.0",
        "lodash": "^4.17.14",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.1",
        "natural-compare": "^1.4.0",
        "optionator": "^0.8.3",
        "progress": "^2.0.0",
        "regexpp": "^2.0.1",
        "semver": "^6.1.2",
        "strip-ansi": "^5.2.0",
        "strip-json-comments": "^3.0.1",
        "table": "^5.2.3",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "dependencies": {
        "ajv": {
          "version": "6.12.6",
          "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
          "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
          "dev": true,
          "requires": {
            "fast-deep-equal": "^3.1.1",
            "fast-json-stable-stringify": "^2.0.0",
            "json-schema-traverse": "^0.4.1",
            "uri-js": "^4.2.2"
          }
        },
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "fast-deep-equal": {
          "version": "3.1.3",
          "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
          "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
          "dev": true
        },
        "glob-parent": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
          "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
          "dev": true,
          "requires": {
            "is-glob": "^4.0.1"
          },
          "dependencies": {
            "is-glob": {
              "version": "4.0.3",
              "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
              "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
              "dev": true,
              "requires": {
                "is-extglob": "^2.1.1"
              }
            }
          }
        },
        "globals": {
          "version": "12.4.0",
          "resolved": "https://registry.npmjs.org/globals/-/globals-12.4.0.tgz",
          "integrity": "sha512-BWICuzzDvDoH54NHKCseDanAhE3CeDorgDL5MT6LMXXj2WCnd9UC2szdk4AWLfjdgNBCXLUanXYcpBBKOSWGwg==",
          "dev": true,
          "requires": {
            "type-fest": "^0.8.1"
          }
        },
        "ignore": {
          "version": "4.0.6",
          "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
          "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
          "dev": true
        },
        "json-schema-traverse": {
          "version": "0.4.1",
          "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
          "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
          "dev": true
        },
        "lodash": {
          "version": "4.17.21",
          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
          "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
          "dev": true
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        },
        "optionator": {
          "version": "0.8.3",
          "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
          "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
          "dev": true,
          "requires": {
            "deep-is": "~0.1.3",
            "fast-levenshtein": "~2.0.6",
            "levn": "~0.3.0",
            "prelude-ls": "~1.1.2",
            "type-check": "~0.3.2",
            "word-wrap": "~1.2.3"
          },
          "dependencies": {
            "word-wrap": {
              "version": "1.2.5",
              "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
              "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
              "dev": true
            }
          }
        },
        "semver": {
          "version": "6.3.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
          "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
          "dev": true
        }
      }
    },
    "eslint-scope": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.0.0.tgz",
      "integrity": "sha512-oYrhJW7S0bxAFDvWqzvMPRm6pcgcnWc4QnofCAqRTRfQC0JcwenzGglTtsLyIuuWFfkqDG9vz67cnttSd53djw==",
      "dev": true,
      "requires": {
        "esrecurse": "^4.1.0",
        "estraverse": "^4.1.1"
      }
    },
    "eslint-utils": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-1.4.3.tgz",
      "integrity": "sha512-fbBN5W2xdY45KulGXmLHZ3c3FHfVYmKg0IrAKGOkT/464PQsx2UeIzfz1RmEci+KLm1bBaAzZAh8+/E+XAeZ8Q==",
      "dev": true,
      "requires": {
        "eslint-visitor-keys": "^1.1.0"
      }
    },
    "eslint-visitor-keys": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.1.0.tgz",
      "integrity": "sha512-8y9YjtM1JBJU/A9Kc+SbaOV4y29sSWckBwMHa+FGtVj5gN/sbnKDf6xJUl+8g7FAij9LVaP8C24DUiH/f/2Z9A==",
      "dev": true
    },
    "espree": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-6.2.1.tgz",
      "integrity": "sha512-ysCxRQY3WaXJz9tdbWOwuWr5Y/XrPTGX9Kiz3yoUXwW0VZ4w30HTkQLaGx/+ttFjF8i+ACbArnB4ce68a9m5hw==",
      "dev": true,
      "requires": {
        "acorn": "^7.1.1",
        "acorn-jsx": "^5.2.0",
        "eslint-visitor-keys": "^1.1.0"
      }
    },
    "esprima": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-3.1.3.tgz",
      "integrity": "sha1-/cpRzuYTOJXjyI1TXOSdv/YqRjM=",
      "dev": true
    },
    "esquery": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.2.0.tgz",
      "integrity": "sha512-weltsSqdeWIX9G2qQZz7KlTRJdkkOCTPgLYJUz1Hacf48R4YOwGPHO3+ORfWedqJKbq5WQmsgK90n+pFLIKt/Q==",
      "dev": true,
      "requires": {
        "estraverse": "^5.0.0"
      },
      "dependencies": {
        "estraverse": {
          "version": "5.0.0",
          "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.0.0.tgz",
          "integrity": "sha512-j3acdrMzqrxmJTNj5dbr1YbjacrYgAxVMeF0gK16E3j494mOe7xygM/ZLIguEQ0ETwAg2hlJCtHRGav+y0Ny5A==",
          "dev": true
        }
      }
    },
    "esrecurse": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.1.tgz",
      "integrity": "sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ==",
      "dev": true,
      "requires": {
        "estraverse": "^4.1.0"
      }
    },
    "estraverse": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.2.0.tgz",
      "integrity": "sha1-De4/7TH81GlhjOc0IJn8GvoL2xM=",
      "dev": true
    },
    "esutils": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.2.tgz",
      "integrity": "sha1-Cr9PHKpbyx96nYrMbepPqqBLrJs="
    },
    "expand-brackets": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/expand-brackets/-/expand-brackets-2.1.4.tgz",
      "integrity": "sha1-t3c14xXOMPa27/D4OwQVGiJEliI=",
      "dev": true,
      "requires": {
        "debug": "^2.3.3",
        "define-property": "^0.2.5",
        "extend-shallow": "^2.0.1",
        "posix-character-classes": "^0.1.0",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.1"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        },
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "dev": true,
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "expand-template": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/expand-template/-/expand-template-1.1.1.tgz",
      "integrity": "sha512-cebqLtV8KOZfw0UI8TEFWxtczxxC1jvyUvx6H4fyp1K1FN7A4Q+uggVUlOsI1K8AGU0rwOGqP8nCapdrw8CYQg==",
      "dev": true
    },
    "extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "dev": true
    },
    "extend-shallow": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-3.0.2.tgz",
      "integrity": "sha1-Jqcarwc7OfshJxcnRhMcJwQCjbg=",
      "dev": true,
      "requires": {
        "assign-symbols": "^1.0.0",
        "is-extendable": "^1.0.1"
      },
      "dependencies": {
        "is-extendable": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz",
          "integrity": "sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==",
          "dev": true,
          "requires": {
            "is-plain-object": "^2.0.4"
          }
        }
      }
    },
    "external-editor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
      "dev": true,
      "requires": {
        "chardet": "^0.7.0",
        "iconv-lite": "^0.4.24",
        "tmp": "^0.0.33"
      }
    },
    "extglob": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/extglob/-/extglob-2.0.4.tgz",
      "integrity": "sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==",
      "dev": true,
      "requires": {
        "array-unique": "^0.3.2",
        "define-property": "^1.0.0",
        "expand-brackets": "^2.1.4",
        "extend-shallow": "^2.0.1",
        "fragment-cache": "^0.2.1",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.1"
      },
      "dependencies": {
        "define-property": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
          "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^1.0.0"
          }
        },
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "dev": true,
          "requires": {
            "is-extendable": "^0.1.0"
          }
        },
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "dev": true,
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        }
      }
    },
    "extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
      "dev": true
    },
    "fast-deep-equal": {
      "version": "1.1.0",
      "resolved": "http://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-1.1.0.tgz",
      "integrity": "sha1-wFNHeBfIa1HaqFPIHgWbcz0CNhQ=",
      "dev": true
    },
    "fast-glob": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-2.2.3.tgz",
      "integrity": "sha512-NiX+JXjnx43RzvVFwRWfPKo4U+1BrK5pJPsHQdKMlLoFHrrGktXglQhHliSihWAq+m1z6fHk3uwGHrtRbS9vLA==",
      "dev": true,
      "requires": {
        "@mrmlnc/readdir-enhanced": "^2.2.1",
        "@nodelib/fs.stat": "^1.0.1",
        "glob-parent": "^3.1.0",
        "is-glob": "^4.0.0",
        "merge2": "^1.2.1",
        "micromatch": "^3.1.10"
      }
    },
    "fast-json-stable-stringify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.0.0.tgz",
      "integrity": "sha1-1RQsDK7msRifh9OnYREGT4bIu/I=",
      "dev": true
    },
    "fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
      "dev": true
    },
    "figures": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/figures/-/figures-3.2.0.tgz",
      "integrity": "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^1.0.5"
      }
    },
    "file-entry-cache": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
      "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
      "dev": true,
      "requires": {
        "flat-cache": "^2.0.1"
      }
    },
    "fill-range": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-4.0.0.tgz",
      "integrity": "sha1-1USBHUKPmOsGpj3EAtJAPDKMOPc=",
      "dev": true,
      "requires": {
        "extend-shallow": "^2.0.1",
        "is-number": "^3.0.0",
        "repeat-string": "^1.6.1",
        "to-regex-range": "^2.1.0"
      },
      "dependencies": {
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "dev": true,
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "flat-cache": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-2.0.1.tgz",
      "integrity": "sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==",
      "dev": true,
      "requires": {
        "flatted": "^2.0.0",
        "rimraf": "2.6.3",
        "write": "1.0.3"
      }
    },
    "flatted": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-2.0.2.tgz",
      "integrity": "sha512-r5wGx7YeOwNWNlCA0wQ86zKyDLMQr+/RB8xy74M4hTphfmjlijTSSXGuH8rnvKZnfT9i+75zmd8jcKdMR4O6jA==",
      "dev": true
    },
    "for-in": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/for-in/-/for-in-1.0.2.tgz",
      "integrity": "sha512-7EwmXrOjyL+ChxMhmG5lnW9MPt1aIeZEwKhQzoBUdTV0N3zuwWDZYVJatDvZ2OyzPUvdIAZDsCetk3coyMfcnQ==",
      "dev": true
    },
    "forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha1-+8cfDEGt6zf5bFd60e1C2P2sypE=",
      "dev": true
    },
    "form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "dev": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      }
    },
    "formatio": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/formatio/-/formatio-1.2.0.tgz",
      "integrity": "sha1-87IWfZBoxGmKjVH092CjmlTYGOs=",
      "dev": true,
      "requires": {
        "samsam": "1.x"
      }
    },
    "fragment-cache": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/fragment-cache/-/fragment-cache-0.2.1.tgz",
      "integrity": "sha1-QpD60n8T6Jvn8zeZxrxaCr//DRk=",
      "dev": true,
      "requires": {
        "map-cache": "^0.2.2"
      }
    },
    "from2": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/from2/-/from2-2.3.0.tgz",
      "integrity": "sha1-i/tVAr3kpNNs/e6gB/zKIdfjgq8=",
      "dev": true,
      "requires": {
        "inherits": "^2.0.1",
        "readable-stream": "^2.0.0"
      }
    },
    "fs-extra": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-6.0.1.tgz",
      "integrity": "sha512-GnyIkKhhzXZUWFCaJzvyDLEEgDkPfb4/TPvJCJVuS8MWZgoSsErf++QpiAlDnKFcqhRlm+tIOcencCjyJE6ZCA==",
      "dev": true,
      "requires": {
        "graceful-fs": "^4.1.2",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
      "dev": true
    },
    "functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
      "dev": true
    },
    "get-value": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/get-value/-/get-value-2.0.6.tgz",
      "integrity": "sha1-3BXKHGcjh8p2vTesCjlbogQqLCg=",
      "dev": true
    },
    "getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha1-Xv+OPmhNVprkyysSgmBOi6YhSfo=",
      "dev": true,
      "requires": {
        "assert-plus": "^1.0.0"
      }
    },
    "glob": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.1.tgz",
      "integrity": "sha1-gFIR3wT6rxxjo2ADBs31reULLsg=",
      "dev": true,
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.2",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-3.1.0.tgz",
      "integrity": "sha1-nmr2KZ2NO9K9QEMIMr0RPfkGxa4=",
      "dev": true,
      "requires": {
        "is-glob": "^3.1.0",
        "path-dirname": "^1.0.0"
      },
      "dependencies": {
        "is-glob": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-3.1.0.tgz",
          "integrity": "sha1-e6WuJCF4BKxwcHuWkiVnSGzD6Eo=",
          "dev": true,
          "requires": {
            "is-extglob": "^2.1.0"
          }
        }
      }
    },
    "glob-to-regexp": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.3.0.tgz",
      "integrity": "sha1-jFoUlNIGbFcMw7/kSWF1rMTVAqs=",
      "dev": true
    },
    "globals": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-10.1.0.tgz",
      "integrity": "sha1-RCWhiBvg0za0qCOoKnvnJdXdmHw="
    },
    "globby": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/globby/-/globby-8.0.1.tgz",
      "integrity": "sha512-oMrYrJERnKBLXNLVTqhm3vPEdJ/b2ZE28xN4YARiix1NOIOBPEpOUnm844K1iu/BkphCaf2WNFwMszv8Soi1pw==",
      "dev": true,
      "requires": {
        "array-union": "^1.0.1",
        "dir-glob": "^2.0.0",
        "fast-glob": "^2.0.2",
        "glob": "^7.1.2",
        "ignore": "^3.3.5",
        "pify": "^3.0.0",
        "slash": "^1.0.0"
      },
      "dependencies": {
        "glob": {
          "version": "7.1.3",
          "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.3.tgz",
          "integrity": "sha512-vcfuiIxogLV4DlGBHIUOwI0IbrJ8HWPc4MU7HzviGeNho/UJDfi6B5p3sHeWIQ0KGIU0Jpxi5ZHxemQfLkkAwQ==",
          "dev": true,
          "requires": {
            "fs.realpath": "^1.0.0",
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "^3.0.4",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        }
      }
    },
    "graceful-fs": {
      "version": "4.1.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.1.11.tgz",
      "integrity": "sha1-Dovf5NHduIVNZOBOp8AOKgJuVlg=",
      "dev": true
    },
    "graceful-readlink": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/graceful-readlink/-/graceful-readlink-1.0.1.tgz",
      "integrity": "sha1-TK+tdrxi8C+gObL5Tpo906ORpyU=",
      "dev": true
    },
    "growl": {
      "version": "1.9.2",
      "resolved": "https://registry.npmjs.org/growl/-/growl-1.9.2.tgz",
      "integrity": "sha1-Dqd0NxXbjY3ixe3hd14bRayFwC8=",
      "dev": true
    },
    "har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha1-qUwiJOvKwEeCoNkDVSHyRzW37JI=",
      "dev": true
    },
    "har-validator": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.0.3.tgz",
      "integrity": "sha1-ukAsJmGU8VlW7xXg/PJCmT9qff0=",
      "dev": true,
      "requires": {
        "ajv": "^5.1.0",
        "har-schema": "^2.0.0"
      }
    },
    "has-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-1.0.0.tgz",
      "integrity": "sha1-nZ55MWXOAXoA8AQYxD+UKnsdEfo=",
      "dev": true
    },
    "has-value": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-value/-/has-value-1.0.0.tgz",
      "integrity": "sha1-GLKB2lhbHFxR3vJMkw7SmgvmsXc=",
      "dev": true,
      "requires": {
        "get-value": "^2.0.6",
        "has-values": "^1.0.0",
        "isobject": "^3.0.0"
      }
    },
    "has-values": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-values/-/has-values-1.0.0.tgz",
      "integrity": "sha1-lbC2P+whRmGab+V/51Yo1aOe/k8=",
      "dev": true,
      "requires": {
        "is-number": "^3.0.0",
        "kind-of": "^4.0.0"
      },
      "dependencies": {
        "kind-of": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-4.0.0.tgz",
          "integrity": "sha1-IIE989cSkosgc3hpGkUGb65y3Vc=",
          "dev": true,
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "hawk": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/hawk/-/hawk-6.0.2.tgz",
      "integrity": "sha512-miowhl2+U7Qle4vdLqDdPt9m09K6yZhkLDTWGoUiUzrQCn+mHHSmfJgAyGaLRZbPmTqfFFjRV1QWCW0VWUJBbQ==",
      "dev": true,
      "requires": {
        "boom": "4.x.x",
        "cryptiles": "3.x.x",
        "hoek": "4.x.x",
        "sntp": "2.x.x"
      }
    },
    "he": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/he/-/he-1.1.1.tgz",
      "integrity": "sha1-k0EP0hsAlzUVH4howvJx80J+I/0=",
      "dev": true
    },
    "hoek": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/hoek/-/hoek-4.2.1.tgz",
      "integrity": "sha512-QLg82fGkfnJ/4iy1xZ81/9SIJiq1NGFUMGs6ParyjBZr6jW2Ufj/snDqTHixNlHdPNwN2RLVD0Pi3igeK9+JfA==",
      "dev": true
    },
    "http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha1-muzZJRFHcvPZW2WmCruPfBj7rOE=",
      "dev": true,
      "requires": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      }
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dev": true,
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ignore": {
      "version": "3.3.10",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-3.3.10.tgz",
      "integrity": "sha512-Pgs951kaMm5GXP7MOvxERINe3gsaVjUWFm+UZPSq9xYriQAksyhg0csnS0KXSNRD5NmNdapXEpjxG49+AKh/ug==",
      "dev": true
    },
    "import-fresh": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.2.1.tgz",
      "integrity": "sha512-6e1q1cnWP2RXD9/keSkxHScg508CdXqXWgWBaETNhyuBFz+kUZlKboh+ISK+bU++DmbHimVBrOz/zzPe0sZ3sQ==",
      "dev": true,
      "requires": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "dev": true
    },
    "in-publish": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/in-publish/-/in-publish-2.0.0.tgz",
      "integrity": "sha1-4g/146KvwmkDILbcVSaCqcf631E=",
      "dev": true
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dev": true,
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=",
      "dev": true
    },
    "inquirer": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-7.1.0.tgz",
      "integrity": "sha512-5fJMWEmikSYu0nv/flMc475MhGbB7TSPd/2IpFV4I4rMklboCH2rQjYY5kKiYGHqUF9gvaambupcJFFG9dvReg==",
      "dev": true,
      "requires": {
        "ansi-escapes": "^4.2.1",
        "chalk": "^3.0.0",
        "cli-cursor": "^3.1.0",
        "cli-width": "^2.0.0",
        "external-editor": "^3.0.3",
        "figures": "^3.0.0",
        "lodash": "^4.17.15",
        "mute-stream": "0.0.8",
        "run-async": "^2.4.0",
        "rxjs": "^6.5.3",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0",
        "through": "^2.3.6"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.2.1.tgz",
          "integrity": "sha512-9VGjrMsG1vePxcSweQsN20KY/c4zN0h9fLjqAbwbPfahM3t+NL+M9HC8xeXG2I8pX5NoamTGNuomEUFI7fcUjA==",
          "dev": true,
          "requires": {
            "@types/color-name": "^1.1.1",
            "color-convert": "^2.0.1"
          }
        },
        "chalk": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
          "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
          "dev": true,
          "requires": {
            "ansi-styles": "^4.1.0",
            "supports-color": "^7.1.0"
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "dev": true,
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
          "dev": true
        },
        "has-flag": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
          "dev": true
        },
        "lodash": {
          "version": "4.17.21",
          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
          "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
          "dev": true
        },
        "strip-ansi": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
          "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
          "dev": true,
          "requires": {
            "ansi-regex": "^5.0.0"
          },
          "dependencies": {
            "ansi-regex": {
              "version": "5.0.1",
              "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
              "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
              "dev": true
            }
          }
        },
        "supports-color": {
          "version": "7.1.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.1.0.tgz",
          "integrity": "sha512-oRSIpR8pxT1Wr2FquTNnGet79b3BWljqOuoW/h4oBhxJ/HUbX5nX6JSruTkvXDCFMwDPvsaTTbvMLKZWSy0R5g==",
          "dev": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "into-stream": {
      "version": "3.1.0",
      "resolved": "http://registry.npmjs.org/into-stream/-/into-stream-3.1.0.tgz",
      "integrity": "sha1-lvsKk2wSur1v8XUqF9BWFqvQlMY=",
      "dev": true,
      "requires": {
        "from2": "^2.1.1",
        "p-is-promise": "^1.1.0"
      }
    },
    "is-accessor-descriptor": {
      "version": "0.1.6",
      "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz",
      "integrity": "sha1-qeEss66Nh2cn7u84Q/igiXtcmNY=",
      "dev": true,
      "requires": {
        "kind-of": "^3.0.2"
      },
      "dependencies": {
        "kind-of": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
          "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
          "dev": true,
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "is-buffer": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-1.1.6.tgz",
      "integrity": "sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==",
      "dev": true
    },
    "is-data-descriptor": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz",
      "integrity": "sha1-C17mSDiOLIYCgueT8YVv7D8wG1Y=",
      "dev": true,
      "requires": {
        "kind-of": "^3.0.2"
      },
      "dependencies": {
        "kind-of": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
          "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
          "dev": true,
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "is-descriptor": {
      "version": "0.1.6",
      "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-0.1.6.tgz",
      "integrity": "sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==",
      "dev": true,
      "requires": {
        "is-accessor-descriptor": "^0.1.6",
        "is-data-descriptor": "^0.1.4",
        "kind-of": "^5.0.0"
      },
      "dependencies": {
        "kind-of": {
          "version": "5.1.0",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-5.1.0.tgz",
          "integrity": "sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==",
          "dev": true
        }
      }
    },
    "is-extendable": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-0.1.1.tgz",
      "integrity": "sha1-YrEQ4omkcUGOPsNqYX1HLjAd/Ik=",
      "dev": true
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true
    },
    "is-glob": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.0.tgz",
      "integrity": "sha1-lSHHaEXMJhCoUgPd8ICpWML/q8A=",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-number": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-3.0.0.tgz",
      "integrity": "sha1-JP1iAaR4LPUFYcgQJ2r8fRLXEZU=",
      "dev": true,
      "requires": {
        "kind-of": "^3.0.2"
      },
      "dependencies": {
        "kind-of": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
          "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
          "dev": true,
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "is-plain-object": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz",
      "integrity": "sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==",
      "dev": true,
      "requires": {
        "isobject": "^3.0.1"
      }
    },
    "is-promise": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-2.1.0.tgz",
      "integrity": "sha1-eaKp7OfwlugPNtKy87wWwf9L8/o=",
      "dev": true
    },
    "is-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.0.tgz",
      "integrity": "sha512-XCoy+WlUr7d1+Z8GgSuXmpuUFC9fOhRXglJMx+dwLKTkL44Cjd4W1Z5P+BQZpr+cR93aGP4S/s7Ftw6Nd/kiEw=="
    },
    "is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha1-5HnICFjfDBsR3dppQPlgEfzaSpo=",
      "dev": true
    },
    "is-windows": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-windows/-/is-windows-1.0.2.tgz",
      "integrity": "sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==",
      "dev": true
    },
    "isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8=",
      "dev": true
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "dev": true
    },
    "isobject": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz",
      "integrity": "sha1-TkMekrEalzFjaqH5yNHMvP2reN8=",
      "dev": true
    },
    "isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha1-R+Y/evVa+m+S4VAOaQ64uFKcCZo=",
      "dev": true
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "js-yaml": {
      "version": "3.13.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.13.1.tgz",
      "integrity": "sha512-YfbcO7jXDdyj0DGxYVSlSeQNHbD7XPWvrVWeVUujrQEoZzWJIRrCPoyk6kL6IAjAG2IolMK4T0hNUe0HOUs5Jw==",
      "dev": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "dependencies": {
        "esprima": {
          "version": "4.0.1",
          "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
          "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
          "dev": true
        }
      }
    },
    "jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha1-peZUwuWi3rXyAdls77yoDA7y9RM=",
      "dev": true
    },
    "jsesc": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.1.tgz",
      "integrity": "sha1-5CGiqOINawgZ3yiQj3glJrlt0f4="
    },
    "json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "dev": true
    },
    "json-schema-traverse": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.3.1.tgz",
      "integrity": "sha1-NJptRMU6Ud6JtAgFxdXlm0F9M0A=",
      "dev": true
    },
    "json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
      "dev": true
    },
    "json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha1-Epai1Y/UXxmg9s4B1lcB4sc1tus=",
      "dev": true
    },
    "json3": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/json3/-/json3-3.3.2.tgz",
      "integrity": "sha1-PAQ0dD35Pi9cQq7nsZvLSDV19OE=",
      "dev": true
    },
    "jsonfile": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
      "integrity": "sha1-h3Gq4HmbZAdrdmQPygWPnBDjPss=",
      "dev": true,
      "requires": {
        "graceful-fs": "^4.1.6"
      }
    },
    "jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "dev": true,
      "requires": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      }
    },
    "just-extend": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/just-extend/-/just-extend-4.2.1.tgz",
      "integrity": "sha512-g3UB796vUFIY90VIv/WX3L2c8CS2MdWUww3CNrYmqza1Fg0DURc2K/O4YrnklBdQarSJ/y8JnJYDGc+1iumQjg==",
      "dev": true
    },
    "kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "dev": true
    },
    "levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=",
      "dev": true,
      "requires": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash._baseassign": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/lodash._baseassign/-/lodash._baseassign-3.2.0.tgz",
      "integrity": "sha1-jDigmVAPIVrQnlnxci/QxSv+Ck4=",
      "dev": true,
      "requires": {
        "lodash._basecopy": "^3.0.0",
        "lodash.keys": "^3.0.0"
      }
    },
    "lodash._basecopy": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/lodash._basecopy/-/lodash._basecopy-3.0.1.tgz",
      "integrity": "sha1-jaDmqHbPNEwK2KVIghEd08XHyjY=",
      "dev": true
    },
    "lodash._basecreate": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash._basecreate/-/lodash._basecreate-3.0.3.tgz",
      "integrity": "sha1-G8ZhYU2qf8MRt9A78WgGoCE8+CE=",
      "dev": true
    },
    "lodash._getnative": {
      "version": "3.9.1",
      "resolved": "https://registry.npmjs.org/lodash._getnative/-/lodash._getnative-3.9.1.tgz",
      "integrity": "sha1-VwvH3t5G1hzc3mh9ZdPuy6o6r/U=",
      "dev": true
    },
    "lodash._isiterateecall": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/lodash._isiterateecall/-/lodash._isiterateecall-3.0.9.tgz",
      "integrity": "sha1-UgOte6Ql+uhCRg5pbbnPPmqsBXw=",
      "dev": true
    },
    "lodash.create": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/lodash.create/-/lodash.create-3.1.1.tgz",
      "integrity": "sha1-1/KEnw29p+BGgruM1yqwIkYd6+c=",
      "dev": true,
      "requires": {
        "lodash._baseassign": "^3.0.0",
        "lodash._basecreate": "^3.0.0",
        "lodash._isiterateecall": "^3.0.0"
      }
    },
    "lodash.get": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
      "integrity": "sha1-LRd/ZS+jHpObRDjVNBSZ36OCXpk=",
      "dev": true
    },
    "lodash.isarguments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/lodash.isarguments/-/lodash.isarguments-3.1.0.tgz",
      "integrity": "sha1-L1c9hcaiQon/AGY7SRwdM4/zRYo=",
      "dev": true
    },
    "lodash.isarray": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isarray/-/lodash.isarray-3.0.4.tgz",
      "integrity": "sha1-eeTriMNqgSKvhvhEqpvNhRtfu1U=",
      "dev": true
    },
    "lodash.keys": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/lodash.keys/-/lodash.keys-3.1.2.tgz",
      "integrity": "sha1-TbwEcrFWvlCgsoaFXRvQsMZWCYo=",
      "dev": true,
      "requires": {
        "lodash._getnative": "^3.0.0",
        "lodash.isarguments": "^3.0.0",
        "lodash.isarray": "^3.0.0"
      }
    },
    "lolex": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/lolex/-/lolex-2.1.2.tgz",
      "integrity": "sha1-JpS5U8nqTQE+W4v7qJHJkQJbJik=",
      "dev": true
    },
    "map-cache": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/map-cache/-/map-cache-0.2.2.tgz",
      "integrity": "sha1-wyq9C9ZSXZsFFkW7TyasXcmKDb8=",
      "dev": true
    },
    "map-visit": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/map-visit/-/map-visit-1.0.0.tgz",
      "integrity": "sha1-7Nyo8TFE5mDxtb1B8S80edmN+48=",
      "dev": true,
      "requires": {
        "object-visit": "^1.0.0"
      }
    },
    "merge2": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.2.3.tgz",
      "integrity": "sha512-gdUU1Fwj5ep4kplwcmftruWofEFt6lfpkkr3h860CXbAB9c3hGb55EOL2ali0Td5oebvW0E1+3Sr+Ur7XfKpRA==",
      "dev": true
    },
    "micromatch": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-3.1.10.tgz",
      "integrity": "sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==",
      "dev": true,
      "requires": {
        "arr-diff": "^4.0.0",
        "array-unique": "^0.3.2",
        "braces": "^2.3.1",
        "define-property": "^2.0.2",
        "extend-shallow": "^3.0.2",
        "extglob": "^2.0.4",
        "fragment-cache": "^0.2.1",
        "kind-of": "^6.0.2",
        "nanomatch": "^1.2.9",
        "object.pick": "^1.3.0",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.2"
      }
    },
    "mime-db": {
      "version": "1.37.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.37.0.tgz",
      "integrity": "sha512-R3C4db6bgQhlIhPU48fUtdVmKnflq+hRdad7IyKhtFj06VPNVdk2RhiYL3UjQIlso8L+YxAtFkobT0VK+S/ybg==",
      "dev": true
    },
    "mime-types": {
      "version": "2.1.21",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.21.tgz",
      "integrity": "sha512-3iL6DbwpyLzjR3xHSFNFeb9Nz/M8WDkX33t1GFQnFOllWk8pOrh/LSrB5OXlnlW5P9LH73X6loW/eogc+F5lJg==",
      "dev": true,
      "requires": {
        "mime-db": "~1.37.0"
      }
    },
    "mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "dev": true
    },
    "mixin-deep": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/mixin-deep/-/mixin-deep-1.3.2.tgz",
      "integrity": "sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==",
      "dev": true,
      "requires": {
        "for-in": "^1.0.2",
        "is-extendable": "^1.0.1"
      },
      "dependencies": {
        "is-extendable": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/is-extendable/-/is-extendable-1.0.1.tgz",
          "integrity": "sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==",
          "dev": true,
          "requires": {
            "is-plain-object": "^2.0.4"
          }
        }
      }
    },
    "mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "dev": true,
      "requires": {
        "minimist": "^1.2.6"
      }
    },
    "mocha": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/mocha/-/mocha-3.5.3.tgz",
      "integrity": "sha512-/6na001MJWEtYxHOV1WLfsmR4YIynkUEhBwzsb+fk2qmQ3iqsi258l/Q2MWHJMImAcNpZ8DEdYAK72NHoIQ9Eg==",
      "dev": true,
      "requires": {
        "browser-stdout": "1.3.0",
        "commander": "2.9.0",
        "debug": "2.6.8",
        "diff": "3.2.0",
        "escape-string-regexp": "1.0.5",
        "glob": "7.1.1",
        "growl": "1.9.2",
        "he": "1.1.1",
        "json3": "3.3.2",
        "lodash.create": "3.1.1",
        "mkdirp": "0.5.1",
        "supports-color": "3.1.2"
      },
      "dependencies": {
        "commander": {
          "version": "2.9.0",
          "resolved": "https://registry.npmjs.org/commander/-/commander-2.9.0.tgz",
          "integrity": "sha1-nJkJQXbhIkDLItbFFGCYQA/g99Q=",
          "dev": true,
          "requires": {
            "graceful-readlink": ">= 1.0.0"
          }
        },
        "debug": {
          "version": "2.6.8",
          "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.8.tgz",
          "integrity": "sha512-E22fsyWPt/lr4/UgQLt/pXqerGMDsanhbnmqIS3VAXuDi1v3IpiwXe2oncEIondHSBuPDWRoK/pMjlvi8FuOXQ==",
          "dev": true,
          "requires": {
            "ms": "2.0.0"
          }
        },
        "minimist": {
          "version": "0.0.8",
          "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz",
          "integrity": "sha512-miQKw5Hv4NS1Psg2517mV4e4dYNaO3++hjAvLOAzKqZ61rH8NS1SK+vbfBWZ5PY/Me/bEWhUwqMghEW5Fb9T7Q==",
          "dev": true
        },
        "mkdirp": {
          "version": "0.5.1",
          "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz",
          "integrity": "sha512-SknJC52obPfGQPnjIkXbmA6+5H15E+fR+E4iR2oQ3zzCLbd7/ONua69R/Gw7AgkTLsRG+r5fzksYwWe1AgTyWA==",
          "dev": true,
          "requires": {
            "minimist": "0.0.8"
          }
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=",
      "dev": true
    },
    "multistream": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/multistream/-/multistream-2.1.1.tgz",
      "integrity": "sha512-xasv76hl6nr1dEy3lPvy7Ej7K/Lx3O/FCvwge8PeVJpciPPoNCbaANcNiBug3IpdvTveZUcAV0DJzdnUDMesNQ==",
      "dev": true,
      "requires": {
        "inherits": "^2.0.1",
        "readable-stream": "^2.0.5"
      }
    },
    "mute-stream": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz",
      "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==",
      "dev": true
    },
    "nanomatch": {
      "version": "1.2.13",
      "resolved": "https://registry.npmjs.org/nanomatch/-/nanomatch-1.2.13.tgz",
      "integrity": "sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==",
      "dev": true,
      "requires": {
        "arr-diff": "^4.0.0",
        "array-unique": "^0.3.2",
        "define-property": "^2.0.2",
        "extend-shallow": "^3.0.2",
        "fragment-cache": "^0.2.1",
        "is-windows": "^1.0.2",
        "kind-of": "^6.0.2",
        "object.pick": "^1.3.0",
        "regex-not": "^1.0.0",
        "snapdragon": "^0.8.1",
        "to-regex": "^3.0.1"
      }
    },
    "native-promise-only": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/native-promise-only/-/native-promise-only-0.8.1.tgz",
      "integrity": "sha1-IKMYwwy0X3H+et+/eyHJnBRy7xE=",
      "dev": true
    },
    "natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
      "dev": true
    },
    "nice-try": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
      "dev": true
    },
    "nise": {
      "version": "1.5.3",
      "resolved": "https://registry.npmjs.org/nise/-/nise-1.5.3.tgz",
      "integrity": "sha512-Ymbac/94xeIrMf59REBPOv0thr+CJVFMhrlAkW/gjCIE58BGQdCj0x7KRCb3yz+Ga2Rz3E9XXSvUyyxqqhjQAQ==",
      "dev": true,
      "requires": {
        "@sinonjs/formatio": "^3.2.1",
        "@sinonjs/text-encoding": "^0.7.1",
        "just-extend": "^4.0.2",
        "lolex": "^5.0.1",
        "path-to-regexp": "^1.7.0"
      },
      "dependencies": {
        "lolex": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/lolex/-/lolex-5.1.2.tgz",
          "integrity": "sha512-h4hmjAvHTmd+25JSwrtTIuwbKdwg5NzZVRMLn9saij4SZaepCrTCxPr35H/3bjwfMJtN+t3CX8672UIkglz28A==",
          "dev": true,
          "requires": {
            "@sinonjs/commons": "^1.7.0"
          }
        }
      }
    },
    "oauth-sign": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.8.2.tgz",
      "integrity": "sha1-Rqarfwrq2N6unsBWV4C31O/rnUM=",
      "dev": true
    },
    "object-copy": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/object-copy/-/object-copy-0.1.0.tgz",
      "integrity": "sha1-fn2Fi3gb18mRpBupde04EnVOmYw=",
      "dev": true,
      "requires": {
        "copy-descriptor": "^0.1.0",
        "define-property": "^0.2.5",
        "kind-of": "^3.0.3"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        },
        "kind-of": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
          "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
          "dev": true,
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "object-visit": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/object-visit/-/object-visit-1.0.1.tgz",
      "integrity": "sha1-95xEk68MU3e1n+OdOV5BBC3QRbs=",
      "dev": true,
      "requires": {
        "isobject": "^3.0.0"
      }
    },
    "object.pick": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/object.pick/-/object.pick-1.3.0.tgz",
      "integrity": "sha1-h6EKxMFpS9Lhy/U1kaZhQftd10c=",
      "dev": true,
      "requires": {
        "isobject": "^3.0.1"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dev": true,
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.0.tgz",
      "integrity": "sha512-5NcSkPHhwTVFIQN+TUqXoS5+dlElHXdpAWu9I0HP20YOtIi+aZ0Ct82jdlILDxjLEAWwvm+qj1m6aEtsDVmm6Q==",
      "dev": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      }
    },
    "optionator": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.2.tgz",
      "integrity": "sha1-NkxeQJ0/TWMB1sC0wFu6UBgK62Q=",
      "dev": true,
      "requires": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.4",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "wordwrap": "~1.0.0"
      }
    },
    "os-tmpdir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
      "dev": true
    },
    "p-is-promise": {
      "version": "1.1.0",
      "resolved": "http://registry.npmjs.org/p-is-promise/-/p-is-promise-1.1.0.tgz",
      "integrity": "sha1-nJRWmJ6fZYgBewQ01WCXZ1w9oF4=",
      "dev": true
    },
    "parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "requires": {
        "callsites": "^3.0.0"
      }
    },
    "pascalcase": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/pascalcase/-/pascalcase-0.1.1.tgz",
      "integrity": "sha1-s2PlXoAGym/iF4TS2yK9FdeRfxQ=",
      "dev": true
    },
    "path-dirname": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/path-dirname/-/path-dirname-1.0.2.tgz",
      "integrity": "sha1-zDPSTVJeCZpTiMAzbG4yuRYGCeA=",
      "dev": true
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "dev": true
    },
    "path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=",
      "dev": true
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true
    },
    "path-to-regexp": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-1.7.0.tgz",
      "integrity": "sha1-Wf3g9DW62suhA6hOnTvGTpa5k30=",
      "dev": true,
      "requires": {
        "isarray": "0.0.1"
      }
    },
    "path-type": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-3.0.0.tgz",
      "integrity": "sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==",
      "dev": true,
      "requires": {
        "pify": "^3.0.0"
      }
    },
    "performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha1-Ywn04OX6kT7BxpMHrjZLSzd8nns=",
      "dev": true
    },
    "pify": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
      "integrity": "sha1-5aSs0sEB/fPZpNB/DbxNtJ3SgXY=",
      "dev": true
    },
    "pkg": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/pkg/-/pkg-4.3.4.tgz",
      "integrity": "sha512-/vHksmZRu68BCZi+gX4ghCMKVPMXkoo6E16HbI0jAR1/wDMrRFGCXFIho2BQLTiFwtx80KH9FpZixEs/gYxfwA==",
      "dev": true,
      "requires": {
        "@babel/parser": "7.0.0-beta.51",
        "babel-runtime": "6.26.0",
        "chalk": "2.4.1",
        "escodegen": "1.10.0",
        "fs-extra": "6.0.1",
        "globby": "8.0.1",
        "into-stream": "3.1.0",
        "minimist": "1.2.0",
        "multistream": "2.1.1",
        "pkg-fetch": "2.5.6",
        "progress": "2.0.0",
        "resolve": "1.6.0",
        "stream-meter": "1.0.4"
      },
      "dependencies": {
        "@babel/parser": {
          "version": "7.0.0-beta.51",
          "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.0.0-beta.51.tgz",
          "integrity": "sha1-J87C30Cd9gr1gnDtj2qlVAnqhvY=",
          "dev": true
        },
        "minimist": {
          "version": "1.2.0",
          "resolved": "http://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
          "dev": true
        }
      }
    },
    "pkg-fetch": {
      "version": "2.5.6",
      "resolved": "https://registry.npmjs.org/pkg-fetch/-/pkg-fetch-2.5.6.tgz",
      "integrity": "sha512-Bmae7NUnImRzFL7OtWfC0fnzhTqQi3vXpZjlruww882hQEVt/Z9Jcq8o7KdL6VGJPGo72JTZHDa+PRD++HkAXQ==",
      "dev": true,
      "requires": {
        "babel-runtime": "6.26.0",
        "byline": "5.0.0",
        "chalk": "2.4.1",
        "expand-template": "1.1.1",
        "fs-extra": "6.0.1",
        "in-publish": "2.0.0",
        "minimist": "1.2.0",
        "progress": "2.0.0",
        "request": "2.85.0",
        "request-progress": "3.0.0",
        "semver": "5.5.0",
        "unique-temp-dir": "1.0.0"
      },
      "dependencies": {
        "minimist": {
          "version": "1.2.0",
          "resolved": "http://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
          "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=",
          "dev": true
        }
      }
    },
    "posix-character-classes": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/posix-character-classes/-/posix-character-classes-0.1.1.tgz",
      "integrity": "sha1-AerA/jta9xoqbAL+q7jB/vfgDqs=",
      "dev": true
    },
    "prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=",
      "dev": true
    },
    "prettier": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.0.5.tgz",
      "integrity": "sha512-7PtVymN48hGcO4fGjybyBSIWDsLU4H4XlvOHfq91pz9kkGlonzwTfYkaIEwiRg/dAJF9YlbsduBAgtYLi+8cFg==",
      "dev": true
    },
    "process-nextick-args": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.0.tgz",
      "integrity": "sha512-MtEC1TqN0EU5nephaJ4rAtThHtC86dNN9qCuEhtshvpVBkAW5ZO7BASN9REnF9eoXGcRub+pFuKEpOHE+HbEMw==",
      "dev": true
    },
    "progress": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.0.tgz",
      "integrity": "sha1-ihvjZr+Pwj2yvSPxDG/pILQ4nR8=",
      "dev": true
    },
    "punycode": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-1.4.1.tgz",
      "integrity": "sha1-wNWmOycYgArY4esPpSachN1BhF4=",
      "dev": true
    },
    "qs": {
      "version": "6.5.2",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.2.tgz",
      "integrity": "sha512-N5ZAX4/LxJmF+7wN74pUD6qAh9/wnvdQcjq9TZjevvXzSUo7bfmw91saqMjzGS2xq91/odN2dW/WOl7qQHNDGA==",
      "dev": true
    },
    "readable-stream": {
      "version": "2.3.6",
      "resolved": "http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz",
      "integrity": "sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==",
      "dev": true,
      "requires": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      },
      "dependencies": {
        "isarray": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
          "dev": true
        }
      }
    },
    "regenerator-runtime": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.11.1.tgz",
      "integrity": "sha512-MguG95oij0fC3QV3URf4V2SDYGJhJnJGqvIIgdECeODCT98wSWDAJ94SSuVpYQUoTcGUIL6L4yNB7j1DFFHSBg==",
      "dev": true
    },
    "regex-not": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/regex-not/-/regex-not-1.0.2.tgz",
      "integrity": "sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==",
      "dev": true,
      "requires": {
        "extend-shallow": "^3.0.2",
        "safe-regex": "^1.1.0"
      }
    },
    "regexpp": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-2.0.1.tgz",
      "integrity": "sha512-lv0M6+TkDVniA3aD1Eg0DVpfU/booSu7Eev3TDO/mZKHBfVjgCGTV4t4buppESEYDtkArYFOxTJWv6S5C+iaNw==",
      "dev": true
    },
    "repeat-element": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/repeat-element/-/repeat-element-1.1.3.tgz",
      "integrity": "sha512-ahGq0ZnV5m5XtZLMb+vP76kcAM5nkLqk0lpqAuojSKGgQtn4eRi4ZZGm2olo2zKFH+sMsWaqOCW1dqAnOru72g==",
      "dev": true
    },
    "repeat-string": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz",
      "integrity": "sha1-jcrkcOHIirwtYA//Sndihtp15jc=",
      "dev": true
    },
    "request": {
      "version": "2.85.0",
      "resolved": "http://registry.npmjs.org/request/-/request-2.85.0.tgz",
      "integrity": "sha512-8H7Ehijd4js+s6wuVPLjwORxD4zeuyjYugprdOXlPSqaApmL/QOy+EB/beICHVCHkGMKNh5rvihb5ov+IDw4mg==",
      "dev": true,
      "requires": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.6.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.5",
        "extend": "~3.0.1",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.1",
        "har-validator": "~5.0.3",
        "hawk": "~6.0.2",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.17",
        "oauth-sign": "~0.8.2",
        "performance-now": "^2.1.0",
        "qs": "~6.5.1",
        "safe-buffer": "^5.1.1",
        "stringstream": "~0.0.5",
        "tough-cookie": "~2.3.3",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.1.0"
      }
    },
    "request-progress": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/request-progress/-/request-progress-3.0.0.tgz",
      "integrity": "sha1-TKdUCBx/7GP1BeT6qCWqBs1mnb4=",
      "dev": true,
      "requires": {
        "throttleit": "^1.0.0"
      }
    },
    "resolve": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.6.0.tgz",
      "integrity": "sha512-mw7JQNu5ExIkcw4LPih0owX/TZXjD/ZUF/ZQ/pDnkw3ZKhDcZZw5klmBlj6gVMwjQ3Pz5Jgu7F3d0jcDVuEWdw==",
      "dev": true,
      "requires": {
        "path-parse": "^1.0.5"
      }
    },
    "resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true
    },
    "resolve-url": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/resolve-url/-/resolve-url-0.2.1.tgz",
      "integrity": "sha1-LGN/53yJOv0qZj/iGqkIAGjiBSo=",
      "dev": true
    },
    "restore-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
      "dev": true,
      "requires": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      }
    },
    "ret": {
      "version": "0.1.15",
      "resolved": "https://registry.npmjs.org/ret/-/ret-0.1.15.tgz",
      "integrity": "sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==",
      "dev": true
    },
    "rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "dev": true,
      "requires": {
        "glob": "^7.1.3"
      },
      "dependencies": {
        "glob": {
          "version": "7.1.6",
          "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
          "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
          "dev": true,
          "requires": {
            "fs.realpath": "^1.0.0",
            "inflight": "^1.0.4",
            "inherits": "2",
            "minimatch": "^3.0.4",
            "once": "^1.3.0",
            "path-is-absolute": "^1.0.0"
          }
        }
      }
    },
    "run-async": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.0.tgz",
      "integrity": "sha512-xJTbh/d7Lm7SBhc1tNvTpeCHaEzoyxPrqNlvSdMfBTYwaY++UJFyXUOxAtsRUXjlqOfj8luNaR9vjCh4KeV+pg==",
      "dev": true,
      "requires": {
        "is-promise": "^2.1.0"
      }
    },
    "rxjs": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.5.4.tgz",
      "integrity": "sha512-naMQXcgEo3csAEGvw/NydRA0fuS2nDZJiw1YUWFKU7aPPAPGZEsD4Iimit96qwCieH6y614MCLYwdkrWx7z/7Q==",
      "dev": true,
      "requires": {
        "tslib": "^1.9.0"
      }
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "dev": true
    },
    "safe-regex": {
      "version": "1.1.0",
      "resolved": "http://registry.npmjs.org/safe-regex/-/safe-regex-1.1.0.tgz",
      "integrity": "sha1-QKNmnzsHfR6UPURinhV91IAjvy4=",
      "dev": true,
      "requires": {
        "ret": "~0.1.10"
      }
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "dev": true
    },
    "samsam": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/samsam/-/samsam-1.2.1.tgz",
      "integrity": "sha1-7dOQk6MYQ3DLhZJDsr3yVefY6mc=",
      "dev": true
    },
    "semver": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.5.0.tgz",
      "integrity": "sha512-4SJ3dm0WAwWy/NVeioZh5AntkdJoWKxHxcmyP622fOkgHa4z3R0TdBJICINyaSDE6uNwVc8gZr+ZinwZAH4xIA==",
      "dev": true
    },
    "set-value": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/set-value/-/set-value-2.0.1.tgz",
      "integrity": "sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==",
      "dev": true,
      "requires": {
        "extend-shallow": "^2.0.1",
        "is-extendable": "^0.1.1",
        "is-plain-object": "^2.0.3",
        "split-string": "^3.0.1"
      },
      "dependencies": {
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==",
          "dev": true,
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=",
      "dev": true,
      "requires": {
        "shebang-regex": "^1.0.0"
      }
    },
    "shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=",
      "dev": true
    },
    "signal-exit": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.3.tgz",
      "integrity": "sha512-VUJ49FC8U1OxwZLxIbTTrDvLnf/6TDgxZcK8wxR8zs13xpx7xbG60ndBlhNrFi2EMuFRoeDoJO7wthSLq42EjA==",
      "dev": true
    },
    "sinon": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/sinon/-/sinon-4.0.0.tgz",
      "integrity": "sha1-pUpfAjeqHdIhXl6ByJtCtQxP22s=",
      "dev": true,
      "requires": {
        "diff": "^3.1.0",
        "formatio": "1.2.0",
        "lodash.get": "^4.4.2",
        "lolex": "^2.1.2",
        "native-promise-only": "^0.8.1",
        "nise": "^1.1.0",
        "path-to-regexp": "^1.7.0",
        "samsam": "^1.1.3",
        "text-encoding": "0.6.4",
        "type-detect": "^4.0.0"
      }
    },
    "slash": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-1.0.0.tgz",
      "integrity": "sha1-xB8vbDn8FtHNF61LXYlhFK5HDVU=",
      "dev": true
    },
    "slice-ansi": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-2.1.0.tgz",
      "integrity": "sha512-Qu+VC3EwYLldKa1fCxuuvULvSJOKEgk9pi8dZeCVK7TqBfUNTH4sFkk4joj8afVSfAYgJoSOetjx9QWOJ5mYoQ==",
      "dev": true,
      "requires": {
        "ansi-styles": "^3.2.0",
        "astral-regex": "^1.0.0",
        "is-fullwidth-code-point": "^2.0.0"
      },
      "dependencies": {
        "is-fullwidth-code-point": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
          "dev": true
        }
      }
    },
    "snapdragon": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/snapdragon/-/snapdragon-0.8.2.tgz",
      "integrity": "sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==",
      "dev": true,
      "requires": {
        "base": "^0.11.1",
        "debug": "^2.2.0",
        "define-property": "^0.2.5",
        "extend-shallow": "^2.0.1",
        "map-cache": "^0.2.2",
        "source-map": "^0.5.6",
        "source-map-resolve": "^0.5.0",
        "use": "^3.1.0"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        },
        "extend-shallow": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/extend-shallow/-/extend-shallow-2.0.1.tgz",
          "integrity": "sha1-Ua99YUrZqfYQ6huvu5idaxxWiQ8=",
          "dev": true,
          "requires": {
            "is-extendable": "^0.1.0"
          }
        }
      }
    },
    "snapdragon-node": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/snapdragon-node/-/snapdragon-node-2.1.1.tgz",
      "integrity": "sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==",
      "dev": true,
      "requires": {
        "define-property": "^1.0.0",
        "isobject": "^3.0.0",
        "snapdragon-util": "^3.0.1"
      },
      "dependencies": {
        "define-property": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-1.0.0.tgz",
          "integrity": "sha1-dp66rz9KY6rTr56NMEybvnm/sOY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^1.0.0"
          }
        },
        "is-accessor-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz",
          "integrity": "sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-data-descriptor": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz",
          "integrity": "sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==",
          "dev": true,
          "requires": {
            "kind-of": "^6.0.0"
          }
        },
        "is-descriptor": {
          "version": "1.0.2",
          "resolved": "https://registry.npmjs.org/is-descriptor/-/is-descriptor-1.0.2.tgz",
          "integrity": "sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==",
          "dev": true,
          "requires": {
            "is-accessor-descriptor": "^1.0.0",
            "is-data-descriptor": "^1.0.0",
            "kind-of": "^6.0.2"
          }
        }
      }
    },
    "snapdragon-util": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/snapdragon-util/-/snapdragon-util-3.0.1.tgz",
      "integrity": "sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==",
      "dev": true,
      "requires": {
        "kind-of": "^3.2.0"
      },
      "dependencies": {
        "kind-of": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
          "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
          "dev": true,
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "sntp": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/sntp/-/sntp-2.1.0.tgz",
      "integrity": "sha512-FL1b58BDrqS3A11lJ0zEdnJ3UOKqVxawAkF3k7F0CVN7VQ34aZrV+G8BZ1WC9ZL7NyrwsW0oviwsWDgRuVYtJg==",
      "dev": true,
      "requires": {
        "hoek": "4.x.x"
      }
    },
    "source-map": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
      "integrity": "sha1-igOdLRAh0i0eoUyA2OpGi6LvP8w="
    },
    "source-map-resolve": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/source-map-resolve/-/source-map-resolve-0.5.2.tgz",
      "integrity": "sha512-MjqsvNwyz1s0k81Goz/9vRBe9SZdB09Bdw+/zYyO+3CuPk6fouTaxscHkgtE8jKvf01kVfl8riHzERQ/kefaSA==",
      "dev": true,
      "requires": {
        "atob": "^2.1.1",
        "decode-uri-component": "^0.2.0",
        "resolve-url": "^0.2.1",
        "source-map-url": "^0.4.0",
        "urix": "^0.1.0"
      }
    },
    "source-map-url": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/source-map-url/-/source-map-url-0.4.0.tgz",
      "integrity": "sha1-PpNdfd1zYxuXZZlW1VEo6HtQhKM=",
      "dev": true
    },
    "split-string": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/split-string/-/split-string-3.1.0.tgz",
      "integrity": "sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==",
      "dev": true,
      "requires": {
        "extend-shallow": "^3.0.0"
      }
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
      "dev": true
    },
    "sshpk": {
      "version": "1.15.1",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.15.1.tgz",
      "integrity": "sha512-mSdgNUaidk+dRU5MhYtN9zebdzF2iG0cNPWy8HG+W8y+fT1JnSkh0fzzpjOa0L7P8i1Rscz38t0h4gPcKz43xA==",
      "dev": true,
      "requires": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      }
    },
    "static-extend": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/static-extend/-/static-extend-0.1.2.tgz",
      "integrity": "sha1-YICcOcv/VTNyJv1eC1IPNB8ftcY=",
      "dev": true,
      "requires": {
        "define-property": "^0.2.5",
        "object-copy": "^0.1.0"
      },
      "dependencies": {
        "define-property": {
          "version": "0.2.5",
          "resolved": "https://registry.npmjs.org/define-property/-/define-property-0.2.5.tgz",
          "integrity": "sha1-w1se+RjsPJkPmlvFe+BKrOxcgRY=",
          "dev": true,
          "requires": {
            "is-descriptor": "^0.1.0"
          }
        }
      }
    },
    "stream-meter": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/stream-meter/-/stream-meter-1.0.4.tgz",
      "integrity": "sha1-Uq+Vql6nYKJJFxZwTb/5D3Ov3R0=",
      "dev": true,
      "requires": {
        "readable-stream": "^2.1.4"
      }
    },
    "string-width": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz",
      "integrity": "sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==",
      "dev": true,
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "dependencies": {
        "strip-ansi": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
          "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
          "dev": true,
          "requires": {
            "ansi-regex": "^5.0.0"
          }
        }
      }
    },
    "string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dev": true,
      "requires": {
        "safe-buffer": "~5.1.0"
      }
    },
    "stringstream": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/stringstream/-/stringstream-0.0.6.tgz",
      "integrity": "sha512-87GEBAkegbBcweToUrdzf3eLhWNg06FJTebl4BVJz/JgWy8CvEr9dRtX5qWphiynMSQlxxi+QqN0z5T32SLlhA==",
      "dev": true
    },
    "strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dev": true,
      "requires": {
        "ansi-regex": "^4.1.0"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.0.tgz",
          "integrity": "sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg==",
          "dev": true
        }
      }
    },
    "strip-json-comments": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.0.1.tgz",
      "integrity": "sha512-VTyMAUfdm047mwKl+u79WIdrZxtFtn+nBxHeb844XBQ9uMNTuTHdx2hc5RiAJYqwTj3wc/xe5HLSdJSkJ+WfZw==",
      "dev": true
    },
    "supports-color": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-3.1.2.tgz",
      "integrity": "sha1-cqJiiU2dQIuVbKBf83su2KbiotU=",
      "dev": true,
      "requires": {
        "has-flag": "^1.0.0"
      }
    },
    "table": {
      "version": "5.4.6",
      "resolved": "https://registry.npmjs.org/table/-/table-5.4.6.tgz",
      "integrity": "sha512-wmEc8m4fjnob4gt5riFRtTu/6+4rSe12TpAELNSqHMfF3IqnA+CH37USM6/YR3qRZv7e56kAEAtd6nKZaxe0Ug==",
      "dev": true,
      "requires": {
        "ajv": "^6.10.2",
        "lodash": "^4.17.14",
        "slice-ansi": "^2.1.0",
        "string-width": "^3.0.0"
      },
      "dependencies": {
        "ajv": {
          "version": "6.12.6",
          "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
          "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
          "dev": true,
          "requires": {
            "fast-deep-equal": "^3.1.1",
            "fast-json-stable-stringify": "^2.0.0",
            "json-schema-traverse": "^0.4.1",
            "uri-js": "^4.2.2"
          }
        },
        "emoji-regex": {
          "version": "7.0.3",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-7.0.3.tgz",
          "integrity": "sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA==",
          "dev": true
        },
        "fast-deep-equal": {
          "version": "3.1.3",
          "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
          "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
          "dev": true
        },
        "is-fullwidth-code-point": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
          "dev": true
        },
        "json-schema-traverse": {
          "version": "0.4.1",
          "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
          "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
          "dev": true
        },
        "lodash": {
          "version": "4.17.21",
          "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
          "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
          "dev": true
        },
        "string-width": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
          "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
          "dev": true,
          "requires": {
            "emoji-regex": "^7.0.1",
            "is-fullwidth-code-point": "^2.0.0",
            "strip-ansi": "^5.1.0"
          }
        }
      }
    },
    "temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg=="
    },
    "tempfile": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/tempfile/-/tempfile-3.0.0.tgz",
      "integrity": "sha512-uNFCg478XovRi85iD42egu+eSFUmmka750Jy7L5tfHI5hQKKtbPnxaSaXAbBqCDYrw3wx4tXjKwci4/QmsZJxw==",
      "requires": {
        "temp-dir": "^2.0.0",
        "uuid": "^3.3.2"
      }
    },
    "tempy": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/tempy/-/tempy-0.5.0.tgz",
      "integrity": "sha512-VEY96x7gbIRfsxqsafy2l5yVxxp3PhwAGoWMyC2D2Zt5DmEv+2tGiPOrquNRpf21hhGnKLVEsuqleqiZmKG/qw==",
      "requires": {
        "is-stream": "^2.0.0",
        "temp-dir": "^2.0.0",
        "type-fest": "^0.12.0",
        "unique-string": "^2.0.0"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.12.0",
          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.12.0.tgz",
          "integrity": "sha512-53RyidyjvkGpnWPMF9bQgFtWp+Sl8O2Rp13VavmJgfAP9WWG6q6TkrKU8iyJdnwnfgHI6k2hTlgqH4aSdjoTbg=="
        }
      }
    },
    "text-encoding": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/text-encoding/-/text-encoding-0.6.4.tgz",
      "integrity": "sha1-45mpgiV6J22uQou5KEXLcb3CbRk=",
      "dev": true
    },
    "text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
      "dev": true
    },
    "throttleit": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/throttleit/-/throttleit-1.0.0.tgz",
      "integrity": "sha1-nnhYNtr0Z0MUWlmEtiaNgoUorGw=",
      "dev": true
    },
    "through": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
      "integrity": "sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=",
      "dev": true
    },
    "tmp": {
      "version": "0.0.33",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
      "dev": true,
      "requires": {
        "os-tmpdir": "~1.0.2"
      }
    },
    "to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4="
    },
    "to-object-path": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/to-object-path/-/to-object-path-0.3.0.tgz",
      "integrity": "sha1-KXWIt7Dn4KwI4E5nL4XB9JmeF68=",
      "dev": true,
      "requires": {
        "kind-of": "^3.0.2"
      },
      "dependencies": {
        "kind-of": {
          "version": "3.2.2",
          "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-3.2.2.tgz",
          "integrity": "sha1-MeohpzS6ubuw8yRm2JOupR5KPGQ=",
          "dev": true,
          "requires": {
            "is-buffer": "^1.1.5"
          }
        }
      }
    },
    "to-regex": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/to-regex/-/to-regex-3.0.2.tgz",
      "integrity": "sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==",
      "dev": true,
      "requires": {
        "define-property": "^2.0.2",
        "extend-shallow": "^3.0.2",
        "regex-not": "^1.0.2",
        "safe-regex": "^1.1.0"
      }
    },
    "to-regex-range": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-2.1.1.tgz",
      "integrity": "sha1-fIDBe53+vlmeJzZ+DU3VWQFB2zg=",
      "dev": true,
      "requires": {
        "is-number": "^3.0.0",
        "repeat-string": "^1.6.1"
      }
    },
    "tough-cookie": {
      "version": "2.3.4",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.3.4.tgz",
      "integrity": "sha512-TZ6TTfI5NtZnuyy/Kecv+CnoROnyXn2DN97LontgQpCwsX2XyLYCC0ENhYkehSOwAp8rTQKc/NUIF7BkQ5rKLA==",
      "dev": true,
      "requires": {
        "punycode": "^1.4.1"
      }
    },
    "trim-right": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/trim-right/-/trim-right-1.0.1.tgz",
      "integrity": "sha1-yy4SAwZ+DI3h9hQJS5/kVwTqYAM="
    },
    "tslib": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.11.1.tgz",
      "integrity": "sha512-aZW88SY8kQbU7gpV19lN24LtXh/yD4ZZg6qieAJDDg+YBsJcSmLGK9QpnUjAKVG/xefmvJGd1WUmfpT/g6AJGA==",
      "dev": true
    },
    "tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "dev": true,
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha1-WuaBd/GS1EViadEIr6k/+HQ/T2Q=",
      "dev": true
    },
    "type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=",
      "dev": true,
      "requires": {
        "prelude-ls": "~1.1.2"
      }
    },
    "type-detect": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.3.tgz",
      "integrity": "sha1-Dj8mcLRAmbC0bChNE2p+9Jx0wuo=",
      "dev": true
    },
    "type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
      "dev": true
    },
    "uid2": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/uid2/-/uid2-0.0.3.tgz",
      "integrity": "sha1-SDEm4Rd03y9xuLY53NeZw3YWK4I=",
      "dev": true
    },
    "union-value": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/union-value/-/union-value-1.0.1.tgz",
      "integrity": "sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==",
      "dev": true,
      "requires": {
        "arr-union": "^3.1.0",
        "get-value": "^2.0.6",
        "is-extendable": "^0.1.1",
        "set-value": "^2.0.1"
      }
    },
    "unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "requires": {
        "crypto-random-string": "^2.0.0"
      }
    },
    "unique-temp-dir": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unique-temp-dir/-/unique-temp-dir-1.0.0.tgz",
      "integrity": "sha1-bc6VsmgcoAPuv7MEpBX5y6vMU4U=",
      "dev": true,
      "requires": {
        "mkdirp": "^0.5.1",
        "os-tmpdir": "^1.0.1",
        "uid2": "0.0.3"
      }
    },
    "universalify": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
      "dev": true
    },
    "unset-value": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unset-value/-/unset-value-1.0.0.tgz",
      "integrity": "sha1-g3aHP30jNRef+x5vw6jtDfyKtVk=",
      "dev": true,
      "requires": {
        "has-value": "^0.3.1",
        "isobject": "^3.0.0"
      },
      "dependencies": {
        "has-value": {
          "version": "0.3.1",
          "resolved": "https://registry.npmjs.org/has-value/-/has-value-0.3.1.tgz",
          "integrity": "sha1-ex9YutpiyoJ+wKIHgCVlSEWZXh8=",
          "dev": true,
          "requires": {
            "get-value": "^2.0.3",
            "has-values": "^0.1.4",
            "isobject": "^2.0.0"
          },
          "dependencies": {
            "isobject": {
              "version": "2.1.0",
              "resolved": "https://registry.npmjs.org/isobject/-/isobject-2.1.0.tgz",
              "integrity": "sha1-8GVWEJaj8dou9GJy+BXIQNh+DIk=",
              "dev": true,
              "requires": {
                "isarray": "1.0.0"
              }
            }
          }
        },
        "has-values": {
          "version": "0.1.4",
          "resolved": "https://registry.npmjs.org/has-values/-/has-values-0.1.4.tgz",
          "integrity": "sha1-bWHeldkd/Km5oCCJrThL/49it3E=",
          "dev": true
        },
        "isarray": {
          "version": "1.0.0",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
          "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE=",
          "dev": true
        }
      }
    },
    "uri-js": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.2.2.tgz",
      "integrity": "sha512-KY9Frmirql91X2Qgjry0Wd4Y+YTdrdZheS8TFwvkbLWf/G5KNJDCh6pKL5OZctEW4+0Baa5idK2ZQuELRwPznQ==",
      "dev": true,
      "requires": {
        "punycode": "^2.1.0"
      },
      "dependencies": {
        "punycode": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
          "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
          "dev": true
        }
      }
    },
    "urix": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/urix/-/urix-0.1.0.tgz",
      "integrity": "sha1-2pN/emLiH+wf0Y1Js1wpNQZ6bHI=",
      "dev": true
    },
    "use": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/use/-/use-3.1.1.tgz",
      "integrity": "sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==",
      "dev": true
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8=",
      "dev": true
    },
    "uuid": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.3.2.tgz",
      "integrity": "sha512-yXJmeNaw3DnnKAOKJE51sL/ZaYfWJRl1pK9dr19YFCu0ObS231AB1/LbqTKRAQ5kw8A90rA6fr4riOUpTZvQZA=="
    },
    "v8-compile-cache": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.1.0.tgz",
      "integrity": "sha512-usZBT3PW+LOjM25wbqIlZwPeJV+3OSz3M1k1Ws8snlW39dZyYL9lOGC5FgPVHfk0jKmjiDV8Z0mIbVQPiwFs7g==",
      "dev": true
    },
    "verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
      "dev": true,
      "requires": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dev": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wordwrap": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/wordwrap/-/wordwrap-1.0.0.tgz",
      "integrity": "sha1-J1hIEIkUVqQXHI0CJkQa3pDLyus=",
      "dev": true
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
      "dev": true
    },
    "write": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/write/-/write-1.0.3.tgz",
      "integrity": "sha512-/lg70HAjtkUgWPVZhZcm+T4hkL8Zbtp1nFNOn3lRrxnlv50SRBv7cR7RqR+GMsd3hUXy9hWBo4CHTbFTcOYwig==",
      "dev": true,
      "requires": {
        "mkdirp": "^0.5.1"
      }
    }
  }
}
                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/package.json                                        0000664 0000000 0000000 00000001272 14746647661 0024116 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {
  "name": "ochang_js_fuzzer",
  "version": "1.0.0",
  "description": "",
  "main": "run.js",
  "scripts": {
    "test": "APP_NAME=d8 mocha"
  },
  "bin": "run.js",
  "author": "ochang@google.com",
  "license": "ISC",
  "dependencies": {
    "@babel/generator": "^7.1.3",
    "@babel/template": "^7.1.2",
    "@babel/traverse": "^7.1.4",
    "@babel/types": "^7.1.3",
    "@babel/parser": "^7.1.3",
    "commander": "^2.11.0",
    "globals": "^10.1.0",
    "tempfile": "^3.0.0",
    "tempy": "^0.5.0"
  },
  "devDependencies": {
    "eslint": "^6.8.0",
    "mocha": "^3.5.3",
    "pkg": "^4.3.4",
    "prettier": "2.0.5",
    "sinon": "^4.0.0"
  },
  "pkg": {
    "assets": "resources/**/*"
  }
}
                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/package.sh                                          0000775 0000000 0000000 00000001545 14746647661 0023565 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

OS="linux"
OS_LABEL="Linux"
SUFFIX=""
if [[ -n "$1" && $1 == "win" ]]; then
  OS="win"
  OS_LABEL="Windows"
  SUFFIX=".exe"
elif [[ -n "$1" && $1 == "macos" ]]; then
  OS="macos"
  OS_LABEL="MacOS"
fi

echo "Building and packaging for $OS_LABEL..."
(set -x; $DIR/node_modules/.bin/pkg -t node10-$OS-x64 $DIR)

rm -rf $DIR/output > /dev/null 2>&1 || true
rm $DIR/output.zip > /dev/null 2>&1 || true

mkdir $DIR/output
cd $DIR/output
ln -s ../db db
ln -s ../ochang_js_fuzzer$SUFFIX run$SUFFIX
ln -s ../foozzie_launcher.py foozzie_launcher.py
echo "Creating $DIR/output.zip"
(set -x; zip -r $DIR/output.zip * > /dev/null)
                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/random.js                                           0000664 0000000 0000000 00000005342 14746647661 0023450 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Random helpers.
 */

'use strict';

const assert = require('assert');

function randInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function choose(probability) {
  return Math.random() < probability;
}

function random() {
  return Math.random();
}

function uniform(min, max) {
  return Math.random() * (max - min) + min;
}

function sample(iterable, count) {
  const result = new Array(count);
  let index = 0;

  for (const item of iterable) {
    if (index < count) {
      result[index] = item;
    } else {
      const randIndex = randInt(0, index);
      if (randIndex < count) {
        result[randIndex] = item;
      }
    }

    index++;
  }

  if (index < count) {
    // Not enough items.
    result.length = index;
  }

  return result;
}

function swap(array, p1, p2) {
  [array[p1], array[p2]] = [array[p2], array[p1]];
}

/**
 * Returns "count" elements, randomly selected from "highProbArray" and
 * "lowProbArray". Elements from highProbArray have a "factor" times
 * higher chance to be chosen. As a side effect, this swaps the chosen
 * elements to the end of the respective input arrays. The complexity is
 * O(count).
 */
function twoBucketSample(lowProbArray, highProbArray, factor, count) {
  // Track number of available elements for choosing.
  let low = lowProbArray.length;
  let high = highProbArray.length;
  assert(low + high >= count);
  const result = [];
  for (let i = 0; i < count; i++) {
    // Map a random number to the summarized indices of both arrays. Give
    // highProbArray elements a "factor" times higher probability.
    const p = random();
    const index = Math.floor(p * (high * factor + low));
    if (index < low) {
      // If the index is in the low part, draw the element and discard it.
      result.push(lowProbArray[index]);
      swap(lowProbArray, index, --low);
    } else {
      // Same as above but for a highProbArray element. The index is first
      // mapped back to the array's range.
      const highIndex = Math.floor((index - low) / factor);
      result.push(highProbArray[highIndex]);
      swap(highProbArray, highIndex, --high);
    }
  }
  return result;
}

function single(array) {
  return array[randInt(0, array.length - 1)];
}

function shuffle(array) {
  for (let i = 0; i < array.length - 1; i++) {
    const j = randInt(i, array.length - 1);
    swap(array, i, j);
  }

  return array;
}

module.exports = {
  choose: choose,
  randInt: randInt,
  random: random,
  sample: sample,
  shuffle: shuffle,
  single: single,
  twoBucketSample: twoBucketSample,
  uniform: uniform,
}
                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/                                          0000775 0000000 0000000 00000000000 14746647661 0023640 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/differential_fuzz_chakra.js               0000664 0000000 0000000 00000000615 14746647661 0031223 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// Adjust chakra behavior for differential fuzzing.

this.WScript = new Proxy({}, {
  get(target, name) {
    switch (name) {
      case 'Echo':
        return __prettyPrintExtra;
      default:
        return {};
    }
  }
});
                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/differential_fuzz_jstest.js               0000664 0000000 0000000 00000000471 14746647661 0031306 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

function debug(msg) {
  __prettyPrintExtra(msg);
}

function shouldBe(_a) {
  __prettyPrintExtra((typeof _a == "function" ? _a() : eval(_a)));
}
                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/differential_fuzz_library.js              0000664 0000000 0000000 00000007240 14746647661 0031437 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// Helpers for printing in correctness fuzzing.

// Global helper functions for printing.
var __prettyPrint;
var __prettyPrintExtra;

// Track caught exceptions.
var __caught = 0;

// Track a hash of all printed values - printing is cut off after a
// certain size.
var __hash = 0;

(function() {
  const charCodeAt = String.prototype.charCodeAt;
  const join = Array.prototype.join;
  const map = Array.prototype.map;
  const substring = String.prototype.substring;
  const toString = Object.prototype.toString;

  // Same as in mjsunit.js.
  const classOf = function(object) {
    // Argument must not be null or undefined.
    const string = toString.call(object);
    // String has format [object <ClassName>].
    return substring.call(string, 8, string.length - 1);
  };

  // For standard cases use original prettyPrinted from mjsunit.
  const origPrettyPrinted = prettyPrinted;

  // Override prettyPrinted with a version that also recusively prints objects
  // and arrays with a depth of 4. We don't track circles, but we'd cut off
  // after a depth of 4 if there are any.
  prettyPrinted = function prettyPrinted(value, depth=4) {
    if (depth <= 0) {
      return "...";
    }
    switch (typeof value) {
      case "object":
        if (value === null) return "null";
        switch (classOf(value)) {
          case "Array":
            return prettyPrintedArray(value, depth);
          case "Object":
            return prettyPrintedObject(value, depth);
        }
    }
    // Fall through to original version for all other types.
    return origPrettyPrinted(value);
  }

  // Helper for pretty array with depth.
  function prettyPrintedArray(array, depth) {
    const result = map.call(array, (value, index, array) => {
      if (value === undefined && !(index in array)) return "";
      return prettyPrinted(value, depth - 1);
    });
    return `[${join.call(result, ", ")}]`;
  }

  // Helper for pretty objects with depth.
  function prettyPrintedObject(object, depth) {
    const keys = Object.keys(object);
    const prettyValues = map.call(keys, (key) => {
      return `${key}: ${prettyPrinted(object[key], depth - 1)}`;
    });
    const content = join.call(prettyValues, ", ");
    return `${object.constructor.name || "Object"}{${content}}`;
  }

  // Helper for calculating a hash code of a string.
  function hashCode(str) {
      let hash = 0;
      if (str.length == 0) {
          return hash;
      }
      for (let i = 0; i < str.length; i++) {
          const char = charCodeAt.call(str, i);
          hash = ((hash << 5) - hash) + char;
          hash = hash & hash;
      }
      return hash;
  }

  // Upper limit for calling extra printing. When reached, hashes of
  // strings are tracked and printed instead.
  let maxExtraPrinting = 100;

  // Helper for pretty printing.
  __prettyPrint = function(value, extra=false) {
    let str = prettyPrinted(value);

    // Change __hash with the contents of the full string to
    // keep track of differences also when we don't print.
    const hash = hashCode(str);
    __hash = hashCode(hash + __hash.toString());

    if (extra && maxExtraPrinting-- <= 0) {
      return;
    }

    // Cut off long strings to prevent overloading I/O. We still track
    // the hash of the full string.
    if (str.length > 64) {
      const head = substring.call(str, 0, 54);
      const tail = substring.call(str, str.length - 10, str.length - 1);
      str = `${head}[...]${tail}`;
    }

    print(str);
  };

  __prettyPrintExtra = function (value) {
    __prettyPrint(value, true);
  }
})();
                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/differential_fuzz_mjsunit.js              0000664 0000000 0000000 00000000522 14746647661 0031460 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// Substitute for mjsunit. We reuse prettyPrinted from mjsunit, but only if
// it is loaded. If not, we use this substitute instead.
let prettyPrinted = value => value;
                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/differential_fuzz_suppressions.js         0000664 0000000 0000000 00000000505 14746647661 0032545 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// Don't breach stack limit in differential fuzzing as it leads to
// early bailout.
runNearStackLimit = function(f) {
  try {
    f();
  } catch (e) {}
};
                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/differential_fuzz_v8.js                   0000664 0000000 0000000 00000002172 14746647661 0030327 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// Adjust mjsunit behavior for differential fuzzing.

// We're not interested in stack traces.
MjsUnitAssertionError = () => {};

// Do more printing in assertions for more correctness coverage.
failWithMessage = message => { __prettyPrint(message); };
assertSame = (expected, found, name_opt) => { __prettyPrint(found); };
assertNotSame = (expected, found, name_opt) => { __prettyPrint(found); };
assertEquals = (expected, found, name_opt) => { __prettyPrint(found); };
assertNotEquals = (expected, found, name_opt) => { __prettyPrint(found); };
assertNull = (value, name_opt) => { __prettyPrint(value); };
assertNotNull = (value, name_opt) => { __prettyPrint(value); };

// Suppress optimization status as it leads to false positives.
assertUnoptimized = () => {};
assertOptimized = () => {};
isNeverOptimize = () => {};
isAlwaysOptimize = () => {};
isInterpreted = () => {};
isBaseline = () => {};
isUnoptimized = () => {};
isOptimized = () => {};
isTurboFanned = () => {};
                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/fuzz_library.js                           0000664 0000000 0000000 00000005151 14746647661 0026722 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Slightly modified variants from http://code.fitness/post/2016/01/javascript-enumerate-methods.html.
function __isPropertyOfType(obj, name, type) {
  let desc;
  try {
    desc = Object.getOwnPropertyDescriptor(obj, name);
  } catch(e) {
    return false;
  }

  if (!desc)
    return false;

  return typeof type === 'undefined' || typeof desc.value === type;
}

function __getProperties(obj, type) {
  if (typeof obj === "undefined" || obj === null)
    return [];

  let properties = [];
  for (let name of Object.getOwnPropertyNames(obj)) {
    if (__isPropertyOfType(obj, name, type))
      properties.push(name);
  }

  let proto = Object.getPrototypeOf(obj);
  while (proto && proto != Object.prototype) {
    Object.getOwnPropertyNames(proto)
      .forEach (name => {
        if (name !== 'constructor') {
          if (__isPropertyOfType(proto, name, type))
            properties.push(name);
        }
      });
    proto = Object.getPrototypeOf(proto);
  }
  return properties;
}

function* __getObjects(root = this, level = 0) {
    if (level > 4)
      return;

    let obj_names = __getProperties(root, 'object');
    for (let obj_name of obj_names) {
      let obj = root[obj_name];
      if (obj === root)
        continue;

      yield obj;
      yield* __getObjects(obj, level + 1);
    }
}

function __getRandomObject(seed) {
  let objects = [];
  for (let obj of __getObjects()) {
    objects.push(obj);
  }

  return objects[seed % objects.length];
}

function __getRandomProperty(obj, seed) {
  let properties = __getProperties(obj);
  if (!properties.length)
    return undefined;

  return properties[seed % properties.length];
}

function __callRandomFunction(obj, seed, ...args)
{
  let functions = __getProperties(obj, 'function');
  if (!functions.length)
    return;

  let random_function = functions[seed % functions.length];
  try {
    obj[random_function](...args);
  } catch(e) { }
}

function runNearStackLimit(f) {
  function t() {
    try {
      return t();
    } catch (e) {
      return f();
    }
  };
  try {
    return t();
  } catch (e) {}
}

// Limit number of times we cause major GCs in tests to reduce hangs
// when called within larger loops.
let __callGC;
(function() {
  let countGC = 0;
  __callGC = function() {
    if (countGC++ < 50) {
      gc();
    }
  };
})();

// Neuter common test functions.
try { this.failWithMessage = nop; } catch(e) { }
try { this.triggerAssertFalse = nop; } catch(e) { }
try { this.quit = nop; } catch(e) { }
                                                                                                                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/jstest_stubs.js                           0000664 0000000 0000000 00000002067 14746647661 0026737 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Minimally stub out methods from JSTest's standalone-pre.js.
function description(msg) {}
function debug(msg) {}

function shouldBe(_a) {
  print((typeof _a == "function" ? _a() : eval(_a)));
}

function shouldBeTrue(_a) { shouldBe(_a); }
function shouldBeFalse(_a) { shouldBe(_a); }
function shouldBeNaN(_a) { shouldBe(_a); }
function shouldBeNull(_a) { shouldBe(_a); }
function shouldNotThrow(_a) { shouldBe(_a); }
function shouldThrow(_a) { shouldBe(_a); }

function noInline() {}
function finishJSTest() {}

// Stub out $vm.
try {
  $vm;
} catch(e) {
  const handler = {
    get: function(x, prop) {
      if (prop == Symbol.toPrimitive) {
        return function() { return undefined; };
      }
      return dummy;
    },
  };
  const dummy = new Proxy(function() { return dummy; }, handler);
  this.$vm = dummy;
}

// Other functions.
function ensureArrayStorage() {}
function transferArrayBuffer() {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/resources/stubs.js                                  0000664 0000000 0000000 00000001442 14746647661 0025337 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Helper neuter function.
function nop() { return false; }

// Stubs for non-standard functions.
try { gc; } catch(e) {
  this.gc = function () {
    for (let i = 0; i < 10000; i++) {
      let s = new String("AAAA" + Math.random());
    }
  }
}
try { uneval; } catch(e) { this.uneval = this.nop; }

try {
  // For Chakra tests.
  WScript;
} catch(e) {
  this.WScript = new Proxy({}, {
    get(target, name) {
      switch (name) {
        case 'Echo':
          return print;
        default:
          return {};
      }

    }
  });
}

try { this.alert = console.log; } catch(e) { }
try { this.print = console.log; } catch(e) { }
                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/run.js                                              0000664 0000000 0000000 00000016244 14746647661 0022777 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Description of this file.
 */

'use strict';

const assert = require('assert');
const fs = require('fs');
const path = require('path');

const program = require('commander');

const corpus = require('./corpus.js');
const differentialScriptMutator = require('./differential_script_mutator.js');
const random = require('./random.js');
const scriptMutator = require('./script_mutator.js');
const sourceHelpers = require('./source_helpers.js');

// Maximum number of test inputs to use for one fuzz test.
const MAX_TEST_INPUTS_PER_TEST = 10;

// Base implementations for default or differential fuzzing.
const SCRIPT_MUTATORS = {
  default: scriptMutator.ScriptMutator,
  foozzie: differentialScriptMutator.DifferentialScriptMutator,
};

function getRandomInputs(primaryCorpus, secondaryCorpora, count) {
  count = random.randInt(2, count);

  // Choose 40%-80% of inputs from primary corpus.
  const primaryCount = Math.floor(random.uniform(0.4, 0.8) * count);
  count -= primaryCount;

  let inputs = primaryCorpus.getRandomTestcases(primaryCount);

  // Split remainder equally between the secondary corpora.
  const secondaryCount = Math.floor(count / secondaryCorpora.length);

  for (let i = 0; i < secondaryCorpora.length; i++) {
    let currentCount = secondaryCount;
    if (i == secondaryCorpora.length - 1) {
      // Last one takes the remainder.
      currentCount = count;
    }

    count -= currentCount;
    if (currentCount) {
      inputs = inputs.concat(
          secondaryCorpora[i].getRandomTestcases(currentCount));
    }
  }

  return random.shuffle(inputs);
}

function collect(value, total) {
  total.push(value);
  return total;
}

function overrideSettings(settings, settingOverrides) {
  for (const setting of settingOverrides) {
    const parts = setting.split('=');
    settings[parts[0]] = parseFloat(parts[1]);
  }
}

function* randomInputGen(engine) {
  const inputDir = path.resolve(program.input_dir);

  const v8Corpus = new corpus.Corpus(inputDir, 'v8');
  const chakraCorpus = new corpus.Corpus(inputDir, 'chakra');
  const spiderMonkeyCorpus = new corpus.Corpus(inputDir, 'spidermonkey');
  const jscCorpus = new corpus.Corpus(inputDir, 'WebKit/JSTests');
  const crashTestsCorpus = new corpus.Corpus(inputDir, 'CrashTests');

  for (let i = 0; i < program.no_of_files; i++) {
    let inputs;
    if (engine === 'V8') {
      inputs = getRandomInputs(
          v8Corpus,
          random.shuffle([chakraCorpus, spiderMonkeyCorpus, jscCorpus,
                          crashTestsCorpus, v8Corpus]),
          MAX_TEST_INPUTS_PER_TEST);
    } else if (engine == 'chakra') {
      inputs = getRandomInputs(
          chakraCorpus,
          random.shuffle([v8Corpus, spiderMonkeyCorpus, jscCorpus,
                          crashTestsCorpus]),
          MAX_TEST_INPUTS_PER_TEST);
    } else if (engine == 'spidermonkey') {
      inputs = getRandomInputs(
          spiderMonkeyCorpus,
          random.shuffle([v8Corpus, chakraCorpus, jscCorpus,
                          crashTestsCorpus]),
          MAX_TEST_INPUTS_PER_TEST);
    } else {
      inputs = getRandomInputs(
          jscCorpus,
          random.shuffle([chakraCorpus, spiderMonkeyCorpus, v8Corpus,
                          crashTestsCorpus]),
          MAX_TEST_INPUTS_PER_TEST);
    }

    if (inputs.length > 0) {
      yield inputs;
    }
  }
}

function* corpusInputGen() {
  const inputCorpus = new corpus.Corpus(
      path.resolve(program.input_dir),
      program.mutate_corpus,
      program.extra_strict);
  for (const input of inputCorpus.getAllTestcases()) {
    yield [input];
  }
}

function* enumerate(iterable) {
  let i = 0;
  for (const value of iterable) {
    yield [i, value];
    i++;
  }
}

function main() {
  Error.stackTraceLimit = Infinity;

  program
    .version('0.0.1')
    .option('-i, --input_dir <path>', 'Input directory.')
    .option('-o, --output_dir <path>', 'Output directory.')
    .option('-n, --no_of_files <n>', 'Output directory.', parseInt)
    .option('-c, --mutate_corpus <name>', 'Mutate single files in a corpus.')
    .option('-e, --extra_strict', 'Additionally parse files in strict mode.')
    .option('-m, --mutate <path>', 'Mutate a file and output results.')
    .option('-s, --setting [setting]', 'Settings overrides.', collect, [])
    .option('-v, --verbose', 'More verbose printing.')
    .option('-z, --zero_settings', 'Zero all settings.')
    .parse(process.argv);

  const settings = scriptMutator.defaultSettings();
  if (program.zero_settings) {
    for (const key of Object.keys(settings)) {
      settings[key] = 0.0;
    }
  }

  if (program.setting.length > 0) {
    overrideSettings(settings, program.setting);
  }

  let app_name = process.env.APP_NAME;
  if (app_name && app_name.endsWith('.exe')) {
    app_name = app_name.substr(0, app_name.length - 4);
  }

  if (app_name === 'd8' ||
      app_name === 'v8_simple_inspector_fuzzer' ||
      app_name === 'v8_foozzie.py') {
    // V8 supports running the raw d8 executable, the inspector fuzzer or
    // the differential fuzzing harness 'foozzie'.
    settings.engine = 'V8';
  } else if (app_name === 'ch') {
    settings.engine = 'chakra';
  } else if (app_name === 'js') {
    settings.engine = 'spidermonkey';
  } else if (app_name === 'jsc') {
    settings.engine = 'jsc';
  } else {
    console.log('ERROR: Invalid APP_NAME');
    process.exit(1);
  }

  const mode = process.env.FUZZ_MODE || 'default';
  assert(mode in SCRIPT_MUTATORS, `Unknown mode ${mode}`);
  const mutator = new SCRIPT_MUTATORS[mode](settings);

  if (program.mutate) {
    const absPath = path.resolve(program.mutate);
    const baseDir = path.dirname(absPath);
    const fileName = path.basename(absPath);
    const input = sourceHelpers.loadSource(
        baseDir, fileName, program.extra_strict);
    const mutated = mutator.mutateMultiple([input]);
    console.log(mutated.code);
    return;
  }

  let inputGen;

  if (program.mutate_corpus) {
    inputGen = corpusInputGen();
  } else {
    inputGen = randomInputGen(settings.engine);
  }

  for (const [i, inputs] of enumerate(inputGen)) {
    const outputPath = path.join(program.output_dir, 'fuzz-' + i + '.js');

    const start = Date.now();
    const paths = inputs.map(input => input.relPath);

    try {
      const mutated = mutator.mutateMultiple(inputs);
      fs.writeFileSync(outputPath, mutated.code);

      if (settings.engine === 'V8' && mutated.flags && mutated.flags.length > 0) {
        const flagsPath = path.join(program.output_dir, 'flags-' + i + '.js');
        fs.writeFileSync(flagsPath, mutated.flags.join(' '));
      }
    } catch (e) {
      if (e.message.startsWith('ENOSPC')) {
        console.log('ERROR: No space left. Bailing out...');
        console.log(e);
        return;
      }
      console.log(`ERROR: Exception during mutate: ${paths}`);
      console.log(e);
      continue;
    } finally {
      if (program.verbose) {
        const duration = Date.now() - start;
        console.log(`Mutating ${paths} took ${duration} ms.`);
      }
    }
    if ((i + 1)  % 10 == 0) {
      console.log('Up to ', i + 1);
    }
  }
}

main();
                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/script_mutator.js                                   0000664 0000000 0000000 00000017704 14746647661 0025254 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Script mutator.
 */

'use strict';

const fs = require('fs');
const path = require('path');

const common = require('./mutators/common.js');
const db = require('./db.js');
const exceptions = require('./exceptions.js');
const random = require('./random.js');
const sourceHelpers = require('./source_helpers.js');

const { AddTryCatchMutator } = require('./mutators/try_catch.js');
const { ArrayMutator } = require('./mutators/array_mutator.js');
const { CrossOverMutator } = require('./mutators/crossover_mutator.js');
const { ExpressionMutator } = require('./mutators/expression_mutator.js');
const { FunctionCallMutator } = require('./mutators/function_call_mutator.js');
const { IdentifierNormalizer } = require('./mutators/normalizer.js');
const { NumberMutator } = require('./mutators/number_mutator.js');
const { ObjectMutator } = require('./mutators/object_mutator.js');
const { VariableMutator } = require('./mutators/variable_mutator.js');
const { VariableOrObjectMutator } = require('./mutators/variable_or_object_mutation.js');

const MAX_EXTRA_MUTATIONS = 5;

function defaultSettings() {
  return {
    ADD_VAR_OR_OBJ_MUTATIONS: 0.1,
    DIFF_FUZZ_EXTRA_PRINT: 0.1,
    DIFF_FUZZ_TRACK_CAUGHT: 0.4,
    MUTATE_ARRAYS: 0.1,
    MUTATE_CROSSOVER_INSERT: 0.05,
    MUTATE_EXPRESSIONS: 0.1,
    MUTATE_FUNCTION_CALLS: 0.1,
    MUTATE_NUMBERS: 0.05,
    MUTATE_OBJECTS: 0.1,
    MUTATE_VARIABLES: 0.075,
    SCRIPT_MUTATOR_EXTRA_MUTATIONS: 0.2,
    SCRIPT_MUTATOR_SHUFFLE: 0.2,
  };
}

class Result {
  constructor(code, flags) {
    this.code = code;
    this.flags = flags;
  }
}

class ScriptMutator {
  constructor(settings, db_path=undefined) {
    // Use process.cwd() to bypass pkg's snapshot filesystem.
    this.mutateDb = new db.MutateDb(db_path || path.join(process.cwd(), 'db'));
    this.mutators = [
      new ArrayMutator(settings),
      new ObjectMutator(settings),
      new VariableMutator(settings),
      new NumberMutator(settings),
      new CrossOverMutator(settings, this.mutateDb),
      new ExpressionMutator(settings),
      new FunctionCallMutator(settings),
      new VariableOrObjectMutator(settings),
    ];
    this.trycatch = new AddTryCatchMutator(settings);
    this.settings = settings;
  }

  _addMjsunitIfNeeded(dependencies, input) {
    if (dependencies.has('mjsunit')) {
      return;
    }

    if (!input.absPath.includes('mjsunit')) {
      return;
    }

    // Find mjsunit.js
    let mjsunitPath = input.absPath;
    while (path.dirname(mjsunitPath) != mjsunitPath &&
           path.basename(mjsunitPath) != 'mjsunit') {
      mjsunitPath = path.dirname(mjsunitPath);
    }

    if (path.basename(mjsunitPath) == 'mjsunit') {
      mjsunitPath = path.join(mjsunitPath, 'mjsunit.js');
      dependencies.set('mjsunit', sourceHelpers.loadDependencyAbs(
          input.baseDir, mjsunitPath));
      return;
    }

    console.log('ERROR: Failed to find mjsunit.js');
  }

  _addSpiderMonkeyShellIfNeeded(dependencies, input) {
    // Find shell.js files
    const shellJsPaths = new Array();
    let currentDir = path.dirname(input.absPath);

    while (path.dirname(currentDir) != currentDir) {
      const shellJsPath = path.join(currentDir, 'shell.js');
      if (fs.existsSync(shellJsPath)) {
         shellJsPaths.push(shellJsPath);
      }

      if (currentDir == 'spidermonkey') {
        break;
      }
      currentDir = path.dirname(currentDir);
    }

    // Add shell.js dependencies in reverse to add ones that are higher up in
    // the directory tree first.
    for (let i = shellJsPaths.length - 1; i >= 0; i--) {
      if (!dependencies.has(shellJsPaths[i])) {
        const dependency = sourceHelpers.loadDependencyAbs(
            input.baseDir, shellJsPaths[i]);
        dependencies.set(shellJsPaths[i], dependency);
      }
    }
  }

  _addJSTestStubsIfNeeded(dependencies, input) {
    if (dependencies.has('jstest_stubs') ||
        !input.absPath.includes('JSTests')) {
      return;
    }
    dependencies.set(
        'jstest_stubs', sourceHelpers.loadResource('jstest_stubs.js'));
  }

  mutate(source) {
    let mutators = this.mutators.slice();
    let annotations = [];
    if (random.choose(this.settings.SCRIPT_MUTATOR_SHUFFLE)){
      annotations.push(' Script mutator: using shuffled mutators');
      random.shuffle(mutators);
    }

    if (random.choose(this.settings.SCRIPT_MUTATOR_EXTRA_MUTATIONS)){
      for (let i = random.randInt(1, MAX_EXTRA_MUTATIONS); i > 0; i--) {
        let mutator = random.single(this.mutators);
        mutators.push(mutator);
        annotations.push(` Script mutator: extra ${mutator.constructor.name}`);
      }
    }

    // Try-catch wrapping should always be the last mutation.
    mutators.push(this.trycatch);

    for (const mutator of mutators) {
      mutator.mutate(source);
    }

    for (const annotation of annotations.reverse()) {
      sourceHelpers.annotateWithComment(source.ast, annotation);
    }
  }

  // Returns parsed dependencies for inputs.
  resolveInputDependencies(inputs) {
    const dependencies = new Map();

    // Resolve test harness files.
    inputs.forEach(input => {
      try {
        // TODO(machenbach): Some harness files contain load expressions
        // that are not recursively resolved. We already remove them, but we
        // also need to load the dependencies they point to.
        this._addJSTestStubsIfNeeded(dependencies, input);
        this._addMjsunitIfNeeded(dependencies, input)
        this._addSpiderMonkeyShellIfNeeded(dependencies, input);
      } catch (e) {
        console.log(
            'ERROR: Failed to resolve test harness for', input.relPath);
        throw e;
      }
    });

    // Resolve dependencies loaded within the input files.
    inputs.forEach(input => {
      try {
        input.loadDependencies(dependencies);
      } catch (e) {
        console.log(
            'ERROR: Failed to resolve dependencies for', input.relPath);
        throw e;
      }
    });

    // Map.values() returns values in insertion order.
    return Array.from(dependencies.values());
  }

  // Combines input dependencies with fuzzer resources.
  resolveDependencies(inputs) {
    const dependencies = this.resolveInputDependencies(inputs);

    // Add stubs for non-standard functions in the beginning.
    dependencies.unshift(sourceHelpers.loadResource('stubs.js'));

    // Add our fuzzing support helpers. This also overrides some common test
    // functions from earlier dependencies that cause early bailouts.
    dependencies.push(sourceHelpers.loadResource('fuzz_library.js'));

    return dependencies;
  }

  // Normalizes, combines and mutates multiple inputs.
  mutateInputs(inputs) {
    const normalizerMutator = new IdentifierNormalizer();

    for (const [index, input] of inputs.entries()) {
      try {
        normalizerMutator.mutate(input);
      } catch (e) {
        console.log('ERROR: Failed to normalize ', input.relPath);
        throw e;
      }

      common.setSourceLoc(input, index, inputs.length);
    }

    // Combine ASTs into one. This is so that mutations have more context to
    // cross over content between ASTs (e.g. variables).
    const combinedSource = common.concatPrograms(inputs);
    this.mutate(combinedSource);

    return combinedSource;
  }

  mutateMultiple(inputs) {
    // High level operation:
    // 1) Compute dependencies from inputs.
    // 2) Normalize, combine and mutate inputs.
    // 3) Generate code with dependency code prepended.
    const dependencies = this.resolveDependencies(inputs);
    const combinedSource = this.mutateInputs(inputs);
    const code = sourceHelpers.generateCode(combinedSource, dependencies);
    const flags = exceptions.resolveContradictoryFlags(
        common.concatFlags(dependencies.concat([combinedSource])));
    return new Result(code, flags);
  }
}

module.exports = {
  defaultSettings: defaultSettings,
  ScriptMutator: ScriptMutator,
};
                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/source_helpers.js                                   0000664 0000000 0000000 00000031170 14746647661 0025210 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Source loader.
 */

const fs = require('fs');
const fsPath = require('path');

const { EOL } = require('os');

const babelGenerator = require('@babel/generator').default;
const babelTraverse = require('@babel/traverse').default;
const babelTypes = require('@babel/types');
const babylon = require('@babel/parser');

const exceptions = require('./exceptions.js');

const SCRIPT = Symbol('SCRIPT');
const MODULE = Symbol('MODULE');

const V8_BUILTIN_PREFIX = '__V8Builtin';
const V8_REPLACE_BUILTIN_REGEXP = new RegExp(
    V8_BUILTIN_PREFIX + '(\\w+)\\(', 'g');

const BABYLON_OPTIONS = {
    sourceType: 'script',
    allowReturnOutsideFunction: true,
    tokens: false,
    ranges: false,
    plugins: [
        'asyncGenerators',
        'bigInt',
        'classPrivateMethods',
        'classPrivateProperties',
        'classProperties',
        'doExpressions',
        'exportDefaultFrom',
        'nullishCoalescingOperator',
        'numericSeparator',
        'objectRestSpread',
        'optionalCatchBinding',
        'optionalChaining',
    ],
}

const BABYLON_REPLACE_VAR_OPTIONS = Object.assign({}, BABYLON_OPTIONS);
BABYLON_REPLACE_VAR_OPTIONS['placeholderPattern'] = /^VAR_[0-9]+$/;

function _isV8OrSpiderMonkeyLoad(path) {
  // 'load' and 'loadRelativeToScript' used by V8 and SpiderMonkey.
  return (babelTypes.isIdentifier(path.node.callee) &&
          (path.node.callee.name == 'load' ||
           path.node.callee.name == 'loadRelativeToScript') &&
          path.node.arguments.length == 1 &&
          babelTypes.isStringLiteral(path.node.arguments[0]));
}

function _isChakraLoad(path) {
  // 'WScript.LoadScriptFile' used by Chakra.
  // TODO(ochang): The optional second argument can change semantics ("self",
  // "samethread", "crossthread" etc).
  // Investigate whether if it still makes sense to include them.
  return (babelTypes.isMemberExpression(path.node.callee) &&
          babelTypes.isIdentifier(path.node.callee.property) &&
          path.node.callee.property.name == 'LoadScriptFile' &&
          path.node.arguments.length >= 1 &&
          babelTypes.isStringLiteral(path.node.arguments[0]));
}

function _findPath(path, caseSensitive=true) {
  // If the path exists, return the path. Otherwise return null. Used to handle
  // case insensitive matches for Chakra tests.
  if (caseSensitive) {
    return fs.existsSync(path) ? path : null;
  }

  path = fsPath.normalize(fsPath.resolve(path));
  const pathComponents = path.split(fsPath.sep);
  let realPath = fsPath.resolve(fsPath.sep);

  for (let i = 1; i < pathComponents.length; i++) {
    // For each path component, do a directory listing to see if there is a case
    // insensitive match.
    const curListing = fs.readdirSync(realPath);
    let realComponent = null;
    for (const component of curListing) {
      if (i < pathComponents.length - 1 &&
          !fs.statSync(fsPath.join(realPath, component)).isDirectory()) {
        continue;
      }

      if (component.toLowerCase() == pathComponents[i].toLowerCase()) {
        realComponent = component;
        break;
      }
    }

    if (!realComponent) {
      return null;
    }

    realPath = fsPath.join(realPath, realComponent);
  }

  return realPath;
}

function _findDependentCodePath(filePath, baseDirectory, caseSensitive=true) {
  const fullPath = fsPath.join(baseDirectory, filePath);

  const realPath = _findPath(fullPath, caseSensitive)
  if (realPath) {
    // Check base directory of current file.
    return realPath;
  }

  while (fsPath.dirname(baseDirectory) != baseDirectory) {
    // Walk up the directory tree.
    const testPath = fsPath.join(baseDirectory, filePath);
    const realPath = _findPath(testPath, caseSensitive)
    if (realPath) {
      return realPath;
    }

    baseDirectory = fsPath.dirname(baseDirectory);
  }

  return null;
}

/**
 * Removes V8/Spidermonkey/Chakra load expressions in a source AST and returns
 * their string values in an array.
 *
 * @param {string} originalFilePath Absolute path to file.
 * @param {AST} ast Babel AST of the sources.
 */
function resolveLoads(originalFilePath, ast) {
  const dependencies = [];

  babelTraverse(ast, {
    CallExpression(path) {
      const isV8OrSpiderMonkeyLoad = _isV8OrSpiderMonkeyLoad(path);
      const isChakraLoad = _isChakraLoad(path);
      if (!isV8OrSpiderMonkeyLoad && !isChakraLoad) {
        return;
      }

      let loadValue = path.node.arguments[0].extra.rawValue;
      // Normalize Windows path separators.
      loadValue = loadValue.replace(/\\/g, fsPath.sep);

      // Remove load call.
      path.remove();

      const resolvedPath = _findDependentCodePath(
          loadValue, fsPath.dirname(originalFilePath), !isChakraLoad);
      if (!resolvedPath) {
        console.log('ERROR: Could not find dependent path for', loadValue);
        return;
      }

      if (exceptions.isTestSkippedAbs(resolvedPath)) {
        // Dependency is skipped.
        return;
      }

      // Add the dependency path.
      dependencies.push(resolvedPath);
    }
  });
  return dependencies;
}

function isStrictDirective(directive) {
  return (directive.value &&
          babelTypes.isDirectiveLiteral(directive.value) &&
          directive.value.value === 'use strict');
}

function replaceV8Builtins(code) {
  return code.replace(/%(\w+)\(/g, V8_BUILTIN_PREFIX + '$1(');
}

function restoreV8Builtins(code) {
  return code.replace(V8_REPLACE_BUILTIN_REGEXP, '%$1(');
}

function maybeUseStict(code, useStrict) {
  if (useStrict) {
    return `'use strict';${EOL}${EOL}${code}`;
  }
  return code;
}

class Source {
  constructor(baseDir, relPath, flags, dependentPaths) {
    this.baseDir = baseDir;
    this.relPath = relPath;
    this.flags = flags;
    this.dependentPaths = dependentPaths;
    this.sloppy = exceptions.isTestSloppyRel(relPath);
  }

  get absPath() {
    return fsPath.join(this.baseDir, this.relPath);
  }

  /**
   * Specifies if the source isn't compatible with strict mode.
   */
  isSloppy() {
    return this.sloppy;
  }

  /**
   * Specifies if the source has a top-level 'use strict' directive.
   */
  isStrict() {
    throw Error('Not implemented');
  }

  /**
   * Generates the code as a string without any top-level 'use strict'
   * directives. V8 natives that were replaced before parsing are restored.
   */
  generateNoStrict() {
    throw Error('Not implemented');
  }

  /**
   * Recursively adds dependencies of a this source file.
   *
   * @param {Map} dependencies Dependency map to which to add new, parsed
   *     dependencies unless they are already in the map.
   * @param {Map} visitedDependencies A set for avoiding loops.
   */
  loadDependencies(dependencies, visitedDependencies) {
    visitedDependencies = visitedDependencies || new Set();

    for (const absPath of this.dependentPaths) {
      if (dependencies.has(absPath) ||
          visitedDependencies.has(absPath)) {
        // Already added.
        continue;
      }

      // Prevent infinite loops.
      visitedDependencies.add(absPath);

      // Recursively load dependencies.
      const dependency = loadDependencyAbs(this.baseDir, absPath);
      dependency.loadDependencies(dependencies, visitedDependencies);

      // Add the dependency.
      dependencies.set(absPath, dependency);
    }
  }
}

/**
 * Represents sources whose AST can be manipulated.
 */
class ParsedSource extends Source {
  constructor(ast, baseDir, relPath, flags, dependentPaths) {
    super(baseDir, relPath, flags, dependentPaths);
    this.ast = ast;
  }

  isStrict() {
    return !!this.ast.program.directives.filter(isStrictDirective).length;
  }

  generateNoStrict() {
    const allDirectives = this.ast.program.directives;
    this.ast.program.directives = this.ast.program.directives.filter(
        directive => !isStrictDirective(directive));
    try {
      const code = babelGenerator(this.ast.program, {comments: true}).code;
      return restoreV8Builtins(code);
    } finally {
      this.ast.program.directives = allDirectives;
    }
  }
}

/**
 * Represents sources with cached code.
 */
class CachedSource extends Source {
  constructor(source) {
    super(source.baseDir, source.relPath, source.flags, source.dependentPaths);
    this.use_strict = source.isStrict();
    this.code = source.generateNoStrict();
  }

  isStrict() {
    return this.use_strict;
  }

  generateNoStrict() {
    return this.code;
  }
}

/**
 * Read file path into an AST.
 *
 * Post-processes the AST by replacing V8 natives and removing disallowed
 * natives, as well as removing load expressions and adding the paths-to-load
 * as meta data.
 */
function loadSource(baseDir, relPath, parseStrict=false) {
  const absPath = fsPath.resolve(fsPath.join(baseDir, relPath));
  const data = fs.readFileSync(absPath, 'utf-8');

  if (guessType(data) !== SCRIPT) {
    return null;
  }

  const preprocessed = maybeUseStict(replaceV8Builtins(data), parseStrict);
  const ast = babylon.parse(preprocessed, BABYLON_OPTIONS);

  removeComments(ast);
  cleanAsserts(ast);
  annotateWithOriginalPath(ast, relPath);

  const flags = loadFlags(data);
  const dependentPaths = resolveLoads(absPath, ast);

  return new ParsedSource(ast, baseDir, relPath, flags, dependentPaths);
}

function guessType(data) {
  if (data.includes('// MODULE')) {
    return MODULE;
  }

  return SCRIPT;
}

/**
 * Remove existing comments.
 */
function removeComments(ast) {
  babelTraverse(ast, {
    enter(path) {
      babelTypes.removeComments(path.node);
    }
  });
}

/**
 * Removes "Assert" from strings in spidermonkey shells or from older
 * crash tests: https://crbug.com/1068268
 */
function cleanAsserts(ast) {
  function replace(string) {
    return string == null ? null : string.replace(/[Aa]ssert/g, '*****t');
  }
  babelTraverse(ast, {
    StringLiteral(path) {
      path.node.value = replace(path.node.value);
      path.node.extra.raw = replace(path.node.extra.raw);
      path.node.extra.rawValue = replace(path.node.extra.rawValue);
    },
    TemplateElement(path) {
      path.node.value.cooked = replace(path.node.value.cooked);
      path.node.value.raw = replace(path.node.value.raw);
    },
  });
}

/**
 * Annotate code with top-level comment.
 */
function annotateWithComment(ast, comment) {
  if (ast.program && ast.program.body && ast.program.body.length > 0) {
    babelTypes.addComment(
        ast.program.body[0], 'leading', comment, true);
  }
}

/**
 * Annotate code with original file path.
 */
function annotateWithOriginalPath(ast, relPath) {
  annotateWithComment(ast, ' Original: ' + relPath);
}

// TODO(machenbach): Move this into the V8 corpus. Other test suites don't
// use this flag logic.
function loadFlags(data) {
  const result = [];
  let count = 0;
  for (const line of data.split('\n')) {
    if (count++ > 40) {
      // No need to process the whole file. Flags are always added after the
      // copyright header.
      break;
    }
    const match = line.match(/\/\/ Flags:\s*(.*)\s*/);
    if (!match) {
      continue;
    }
    for (const flag of exceptions.filterFlags(match[1].split(/\s+/))) {
      result.push(flag);
    }
  }
  return result;
}

// Convenience helper to load sources with absolute paths.
function loadSourceAbs(baseDir, absPath) {
  return loadSource(baseDir, fsPath.relative(baseDir, absPath));
}

const dependencyCache = new Map();

function loadDependency(baseDir, relPath) {
  const absPath = fsPath.join(baseDir, relPath);
  let dependency = dependencyCache.get(absPath);
  if (!dependency) {
    const source = loadSource(baseDir, relPath);
    dependency = new CachedSource(source);
    dependencyCache.set(absPath, dependency);
  }
  return dependency;
}

function loadDependencyAbs(baseDir, absPath) {
  return loadDependency(baseDir, fsPath.relative(baseDir, absPath));
}

// Convenience helper to load a file from the resources directory.
function loadResource(fileName) {
  return loadDependency(__dirname, fsPath.join('resources', fileName));
}

function generateCode(source, dependencies=[]) {
  const allSources = dependencies.concat([source]);
  const codePieces = allSources.map(
      source => source.generateNoStrict());

  if (allSources.some(source => source.isStrict()) &&
      !allSources.some(source => source.isSloppy())) {
    codePieces.unshift('\'use strict\';');
  }

  return codePieces.join(EOL + EOL);
}

module.exports = {
  BABYLON_OPTIONS: BABYLON_OPTIONS,
  BABYLON_REPLACE_VAR_OPTIONS: BABYLON_REPLACE_VAR_OPTIONS,
  annotateWithComment: annotateWithComment,
  generateCode: generateCode,
  loadDependencyAbs: loadDependencyAbs,
  loadResource: loadResource,
  loadSource: loadSource,
  loadSourceAbs: loadSourceAbs,
  ParsedSource: ParsedSource,
}
                                                                                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/                                               0000775 0000000 0000000 00000000000 14746647661 0022605 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/helpers.js                                     0000664 0000000 0000000 00000004055 14746647661 0024611 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test helpers.
 */

'use strict';

const assert = require('assert');
const path = require('path');
const fs = require('fs');

const sourceHelpers = require('../source_helpers.js');

const BASE_DIR = path.join(path.dirname(__dirname), 'test_data');
const DB_DIR = path.join(BASE_DIR, 'fake_db');

const HEADER = `// Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

`;

/**
 * Create a function that returns one of `probs` when called. It rotates
 * through the values. Useful to replace `random.random()` in tests using
 * the probabilities that trigger different interesting cases.
 */
function cycleProbabilitiesFun(probs) {
  let index = 0;
  return () => {
    index = index % probs.length;
    return probs[index++];
  };
}

/**
 * Replace Math.random with a deterministic pseudo-random function.
 */
function deterministicRandom(sandbox) {
    let seed = 1;
    function random() {
        const x = Math.sin(seed++) * 10000;
        return x - Math.floor(x);
    }
    sandbox.stub(Math, 'random').callsFake(() => { return random(); });
}

function loadTestData(relPath) {
  return sourceHelpers.loadSource(BASE_DIR, relPath);
}

function assertExpectedResult(expectedPath, result) {
  const absPath = path.join(BASE_DIR, expectedPath);
  if (process.env.GENERATE) {
    fs.writeFileSync(absPath, HEADER + result.trim() + '\n');
    return;
  }

  // Omit copyright header when comparing files.
  const expected = fs.readFileSync(absPath, 'utf-8').trim().split('\n');
  expected.splice(0, 4);
  assert.strictEqual(expected.join('\n'), result.trim());
}

module.exports = {
  BASE_DIR: BASE_DIR,
  DB_DIR: DB_DIR,
  assertExpectedResult: assertExpectedResult,
  cycleProbabilitiesFun: cycleProbabilitiesFun,
  deterministicRandom: deterministicRandom,
  loadTestData: loadTestData,
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_available_variables.js                    0000664 0000000 0000000 00000001620 14746647661 0030151 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for mutating variables
 */

'use strict';

const babelTraverse = require('@babel/traverse').default;

const common = require('../mutators/common.js');
const helpers = require('./helpers.js');

describe('Available variables and functions', () => {
  it('test', () => {
    const source = helpers.loadTestData('available_variables.js');
    const result = new Array();

    babelTraverse(source.ast, {
      CallExpression(path) {
        result.push({
          variables: common.availableVariables(path),
          functions: common.availableFunctions(path),
        });
      }
    });

    helpers.assertExpectedResult(
        'available_variables_expected.js',
        JSON.stringify(result, null, 2));
  });
});
                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_corpus.js                                 0000664 0000000 0000000 00000007134 14746647661 0025522 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Corpus loading.
 */

'use strict';

const assert = require('assert');
const sinon = require('sinon');

const exceptions = require('../exceptions.js');
const corpus = require('../corpus.js');

const sandbox = sinon.createSandbox();

function testSoftSkipped(count, softSkipped, paths) {
  sandbox.stub(exceptions, 'getSoftSkipped').callsFake(() => {
    return softSkipped;
  });
  const mjsunit = new corpus.Corpus('test_data', 'mjsunit_softskipped');
  const cases = mjsunit.getRandomTestcasePaths(count);
  assert.deepEqual(paths, cases);
}

describe('Loading corpus', () => {
  afterEach(() => {
    sandbox.restore();
  });

  it('keeps all tests with no soft-skipped tests', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.9);
    testSoftSkipped(
        3,
        [],
        ['mjsunit_softskipped/permitted.js',
         'mjsunit_softskipped/object-literal.js',
         'mjsunit_softskipped/regress/binaryen-123.js']);
  });

  it('choose one test with no soft-skipped tests', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.9);
    testSoftSkipped(
        1,
        [],
        ['mjsunit_softskipped/permitted.js']);
  });

  it('keeps soft-skipped tests', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.9);
    testSoftSkipped(
        1,
        [/^binaryen.*\.js/, 'object-literal.js'],
        ['mjsunit_softskipped/permitted.js']);
  });

  it('keeps no generated soft-skipped tests', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.9);
    const softSkipped = [
      // Correctly listed full relative path of test case.
      'mjsunit_softskipped/regress/binaryen-123.js',
      // Only basename doesn't match.
      'object-literal.js',
      // Only pieces of the path don't match.
      'mjsunit_softskipped',
    ];
    sandbox.stub(exceptions, 'getGeneratedSoftSkipped').callsFake(
        () => { return new Set(softSkipped); });
    testSoftSkipped(
        2,
        // None soft-skipped for basenames and regexps.
        [],
        // Only binaryen-123.js gets filtered out.
        ['mjsunit_softskipped/object-literal.js',
         'mjsunit_softskipped/permitted.js']);
  });

  it('keeps soft-skipped tests by chance', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0);
    testSoftSkipped(
        3,
        [/^binaryen.*\.js/, 'object-literal.js'],
        ['mjsunit_softskipped/object-literal.js',
         'mjsunit_softskipped/regress/binaryen-123.js',
         'mjsunit_softskipped/permitted.js']);
  });

  it('caches relative paths', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0);
    sandbox.stub(exceptions, 'getSoftSkipped').callsFake(
        () => { return ['object-literal.js']; });
    const generatedSoftSkipped = [
      'mjsunit_softskipped/regress/binaryen-123.js',
    ];
    sandbox.stub(exceptions, 'getGeneratedSoftSkipped').callsFake(
        () => { return new Set(generatedSoftSkipped); });
    const mjsunit = new corpus.Corpus('test_data' , 'mjsunit_softskipped');
    assert.deepEqual(
        ['mjsunit_softskipped/object-literal.js',
         'mjsunit_softskipped/regress/binaryen-123.js'],
        mjsunit.softSkippedFiles);
    assert.deepEqual(
        ['mjsunit_softskipped/permitted.js'],
        mjsunit.permittedFiles);
    assert.deepEqual(
        ['mjsunit_softskipped/permitted.js',
         'mjsunit_softskipped/object-literal.js',
         'mjsunit_softskipped/regress/binaryen-123.js'],
        Array.from(mjsunit.relFiles()));
  });
});
                                                                                                                                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_db.js                                     0000664 0000000 0000000 00000001776 14746647661 0024602 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2021 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test the script building the DB.
 */

'use strict';

const assert = require('assert');
const { execSync } = require("child_process");
const fs = require('fs');
const path = require('path');
const tempy = require('tempy');

function buildDb(inputDir, corpusName, outputDir) {
  execSync(
      `node build_db.js -i ${inputDir} -o ${outputDir} ${corpusName}`,
      {stdio: ['pipe']});
}

describe('DB tests', () => {
    // Test feeds an expression that does not apply.
    it('omits erroneous expressions', () => {
    const outPath = tempy.directory();
    buildDb('test_data/db', 'this', outPath);
    const indexFile = path.join(outPath, 'index.json');
    const indexJSON = JSON.parse(fs.readFileSync(indexFile), 'utf-8');
    assert.deepEqual(
        indexJSON, {"statements": [], "superStatements": [], "all": []});
  });
});
  node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_differential_fuzz.js                      0000664 0000000 0000000 00000011105 14746647661 0027712 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for differential fuzzing.
 */

'use strict';

const assert = require('assert');
const program = require('commander');
const sinon = require('sinon');

const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');
const random = require('../random.js');

const { DifferentialFuzzMutator, DifferentialFuzzSuppressions } = require(
    '../mutators/differential_fuzz_mutator.js');
const { DifferentialScriptMutator } = require(
    '../differential_script_mutator.js');

const sandbox = sinon.createSandbox();

function testMutators(settings, mutatorClass, inputFile, expectedFile) {
  const source = helpers.loadTestData('differential_fuzz/' + inputFile);

  const mutator = new mutatorClass(settings);
  mutator.mutate(source);

  const mutated = sourceHelpers.generateCode(source);
  helpers.assertExpectedResult(
      'differential_fuzz/' + expectedFile, mutated);
}

describe('Differential fuzzing', () => {
  beforeEach(() => {
    // Zero settings for all mutators.
    this.settings = scriptMutator.defaultSettings();
    for (const key of Object.keys(this.settings)) {
      this.settings[key] = 0.0;
    }
    // By default, deterministically use all mutations of differential
    // fuzzing.
    this.settings['DIFF_FUZZ_EXTRA_PRINT'] = 1.0;
    this.settings['DIFF_FUZZ_TRACK_CAUGHT'] = 1.0;

    // Fake fuzzer being called with --input_dir flag.
    this.oldInputDir = program.input_dir;
    program.input_dir = helpers.BASE_DIR;
  });

  afterEach(() => {
    sandbox.restore();
    program.input_dir = this.oldInputDir;
  });

  it('applies suppressions', () => {
    // This selects the first random variable when replacing .arguments.
    sandbox.stub(random, 'single').callsFake(a => a[0]);
    testMutators(
        this.settings,
        DifferentialFuzzSuppressions,
        'suppressions.js',
        'suppressions_expected.js');
  });

  it('adds extra printing', () => {
    testMutators(
        this.settings,
        DifferentialFuzzMutator,
        'mutations.js',
        'mutations_expected.js');
  });

  it('does no extra printing', () => {
    this.settings['DIFF_FUZZ_EXTRA_PRINT'] = 0.0;
    testMutators(
        this.settings,
        DifferentialFuzzMutator,
        'exceptions.js',
        'exceptions_expected.js');
  });

  it('runs end to end', () => {
    // Don't choose any zeroed settings or IGNORE_DEFAULT_PROB in try-catch
    // mutator. Choose using original flags with >= 2%.
    const chooseOrigFlagsProb = 0.2;
    sandbox.stub(random, 'choose').callsFake((p) => p >= chooseOrigFlagsProb);

    // Fake build directory from which two json configurations for flags are
    // loaded.
    const env = {
      APP_DIR: 'test_data/differential_fuzz',
      GENERATE: process.env.GENERATE,
    };
    sandbox.stub(process, 'env').value(env);

    // Fake loading resources and instead load one fixed fake file for each.
    sandbox.stub(sourceHelpers, 'loadResource').callsFake(() => {
      return helpers.loadTestData('differential_fuzz/fake_resource.js');
    });

    // Load input files.
    const files = [
      'differential_fuzz/input1.js',
      'differential_fuzz/input2.js',
    ];
    const sources = files.map(helpers.loadTestData);

    // Apply top-level fuzzing, with all probabilistic configs switched off.
    this.settings['DIFF_FUZZ_EXTRA_PRINT'] = 0.0;
    this.settings['DIFF_FUZZ_TRACK_CAUGHT'] = 0.0;
    const mutator = new DifferentialScriptMutator(
        this.settings, helpers.DB_DIR);
    const mutated = mutator.mutateMultiple(sources);
    helpers.assertExpectedResult(
        'differential_fuzz/combined_expected.js', mutated.code);

    // Flags for v8_foozzie.py are calculated from v8_fuzz_experiments.json and
    // v8_fuzz_flags.json in test_data/differential_fuzz.
    const expectedFlags = [
      '--first-config=ignition',
      '--second-config=ignition_turbo',
      '--second-d8=d8',
      '--second-config-extra-flags=--foo1',
      '--second-config-extra-flags=--foo2',
      '--first-config-extra-flags=--flag1',
      '--second-config-extra-flags=--flag1',
      '--first-config-extra-flags=--flag2',
      '--second-config-extra-flags=--flag2',
      '--first-config-extra-flags=--flag3',
      '--second-config-extra-flags=--flag3',
      '--first-config-extra-flags=--flag4',
      '--second-config-extra-flags=--flag4'
    ];
    assert.deepEqual(expectedFlags, mutated.flags);
  });
});
                                                                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_differential_fuzz_library.js              0000664 0000000 0000000 00000007365 14746647661 0031453 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for the differential-fuzzing library files.
 */

'use strict';

const assert = require('assert');
const fs = require('fs');
const path = require('path');

const libPath = path.resolve(
    path.join(__dirname, '..', 'resources', 'differential_fuzz_library.js'));
const code = fs.readFileSync(libPath, 'utf-8');

// We wire the print function to write to this result variable.
const resultDummy = 'let result; const print = text => { result = text; };';

// The prettyPrinted function from mjsunit is reused in the library.
const prettyPrint = 'let prettyPrinted = value => value;';

const hookedUpCode = resultDummy + prettyPrint + code;

// Runs the library, adds test code and verifies the result.
function testLibrary(testCode, expected) {
  // The code isn't structured as a module. The test code is expected to
  // evaluate to a result which we store in actual.
  const actual = eval(hookedUpCode + testCode);
  assert.deepEqual(expected, actual);
}

describe('Differential fuzzing library', () => {
  it('prints objects', () => {
    testLibrary(
        '__prettyPrint([0, 1, 2, 3]); result;',
        '[0, 1, 2, 3]');
    testLibrary(
        '__prettyPrint({0: 1, 2: 3}); result;',
        'Object{0: 1, 2: 3}');
    testLibrary(
        'const o = {}; o.k = 42;__prettyPrint(o); result;',
        'Object{k: 42}');
  });

  it('cuts off deep nesting', () => {
    // We print only until a nesting depth of 4.
    testLibrary(
        '__prettyPrint({0: [1, 2, [3, {4: []}]]}); result;',
        'Object{0: [1, 2, [3, Object{4: ...}]]}');
  });

  it('cuts off long strings', () => {
    const long = new Array(66).join('a');
    const head = new Array(55).join('a');
    const tail = new Array(10).join('a');
    testLibrary(
        `__prettyPrint("${long}"); result;`,
        `${head}[...]${tail}`);
    // If the string gets longer, the cut-off version is still the same.
    const veryLong = new Array(100).join('a');
    testLibrary(
        `__prettyPrint("${veryLong}"); result;`,
        `${head}[...]${tail}`);
  });

  it('tracks hash difference', () => {
    // Test that we track a hash value for each string we print.
    const long = new Array(66).join('a');
    testLibrary(
        `__prettyPrint("${long}"); __hash;`,
        2097980794);
    // Test that the hash value differs, also when the cut-off result doesn't.
    const veryLong = new Array(100).join('a');
    testLibrary(
        `__prettyPrint("${veryLong}"); __hash;`,
        -428472866);
    // Test that repeated calls update the hash.
    testLibrary(
        `__prettyPrint("${long}");__prettyPrint("${long}"); __hash;`,
        -909224493);
  });

  it('limits extra printing', () => {
    // Test that after exceeding the limit for calling extra printing, there
    // is no new string printed (in the test case no new result added).
    testLibrary(
        'for (let i = 0; i < 20; i++) __prettyPrintExtra(i); result;',
        '19');
    testLibrary(
        'for (let i = 0; i < 101; i++) __prettyPrintExtra(i); result;',
        '99');
    testLibrary(
        'for (let i = 0; i < 102; i++) __prettyPrintExtra(i); result;',
        '99');
  });

  it('tracks hash after limit', () => {
    // Test that after exceeding the limit for calling extra printing, the
    // hash is still updated.
    testLibrary(
        'for (let i = 0; i < 20; i++) __prettyPrintExtra(i); __hash;',
        -945753644);
    testLibrary(
        'for (let i = 0; i < 101; i++) __prettyPrintExtra(i); __hash;',
        1907055979);
    testLibrary(
        'for (let i = 0; i < 102; i++) __prettyPrintExtra(i); __hash;',
        -590842070);
  });
});
                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_load.js                                   0000664 0000000 0000000 00000003365 14746647661 0025130 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test normalization.
 */

'use strict';

const sinon = require('sinon');

const helpers = require('./helpers.js');
const sourceHelpers = require('../source_helpers.js');

const { ScriptMutator } = require('../script_mutator.js');

const sandbox = sinon.createSandbox();

function testLoad(testPath, expectedPath) {
  const mutator = new ScriptMutator({}, helpers.DB_DIR);
  const source = helpers.loadTestData(testPath);
  const dependencies = mutator.resolveInputDependencies([source]);
  const code = sourceHelpers.generateCode(source, dependencies);
  helpers.assertExpectedResult(expectedPath, code);
}

describe('V8 dependencies', () => {
  it('test', () => {
    testLoad(
        'mjsunit/test_load.js',
        'mjsunit/test_load_expected.js');

  });
  it('does not loop indefinitely', () => {
    testLoad(
        'mjsunit/test_load_self.js',
        'mjsunit/test_load_self_expected.js');
  });
});

describe('Chakra dependencies', () => {
  it('test', () => {
    testLoad(
        'chakra/load.js',
        'chakra/load_expected.js');
  });
});

describe('JSTest dependencies', () => {
  afterEach(() => {
    sandbox.restore();
  });

  it('test', () => {
    const fakeStubs = sourceHelpers.loadSource(
        helpers.BASE_DIR, 'JSTests/fake_stub.js');
    sandbox.stub(sourceHelpers, 'loadResource').callsFake(() => fakeStubs);
    testLoad('JSTests/load.js', 'JSTests/load_expected.js');
  });
});

describe('SpiderMonkey dependencies', () => {
  it('test', () => {
    testLoad(
        'spidermonkey/test/load.js',
        'spidermonkey/test/load_expected.js');
  });
});
                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutate_arrays.js                          0000664 0000000 0000000 00000002427 14746647661 0027067 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for mutating arrays
 */

'use strict';

const sinon = require('sinon');

const babylon = require('@babel/parser');

const common = require('../mutators/common.js');
const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');

const {ArrayMutator} = require('../mutators/array_mutator.js');

const sandbox = sinon.createSandbox();

describe('Mutate arrays', () => {
  afterEach(() => {
    sandbox.restore();
  });

  it('performs all mutations', () => {
    // Make random operations deterministic.
    sandbox.stub(common, 'randomValue').callsFake(
        () => babylon.parseExpression('""'));
    helpers.deterministicRandom(sandbox);

    const source = helpers.loadTestData('mutate_arrays.js');

    const settings = scriptMutator.defaultSettings();
    settings['MUTATE_ARRAYS'] = 1.0;

    const mutator = new ArrayMutator(settings);
    mutator.mutate(source);

    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_arrays_expected.js', mutated);
  });
});
                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutate_expressions.js                     0000664 0000000 0000000 00000005027 14746647661 0030147 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for mutating expressions
 */

'use strict';

const assert = require('assert');

const babelTypes = require('@babel/types');
const sinon = require('sinon');

const common = require('../mutators/common.js');
const expressionMutator = require('../mutators/expression_mutator.js');
const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');
const random = require('../random.js');

const sandbox = sinon.createSandbox();

function testCloneSiblings(expected_file) {
  const source = helpers.loadTestData('mutate_expressions.js');

  const settings = scriptMutator.defaultSettings();
  settings['MUTATE_EXPRESSIONS'] = 1.0;

  const mutator = new expressionMutator.ExpressionMutator(settings);
  mutator.mutate(source);

  const mutated = sourceHelpers.generateCode(source);
  helpers.assertExpectedResult(expected_file, mutated);
}

describe('Mutate expressions', () => {
  beforeEach(() => {
    // Select the previous sibling.
    sandbox.stub(random, 'randInt').callsFake((a, b) => b);
    // This chooses cloning siblings.
    sandbox.stub(random, 'random').callsFake(() => 0.8);
  });

  afterEach(() => {
    sandbox.restore();
  });

  it('clones previous to current', () => {
    // Keep the order of [previous, current], select previous.
    sandbox.stub(random, 'shuffle').callsFake(a => a);
    // Insert after. Keep returning true for the MUTATE_EXPRESSIONS check.
    sandbox.stub(random, 'choose').callsFake(a => a === 1);

    testCloneSiblings('mutate_expressions_previous_expected.js');
  });

  it('clones current to previous', () => {
    // Switch the order of [previous, current], select current.
    sandbox.stub(random, 'shuffle').callsFake(a => [a[1], a[0]]);
    // Insert before.
    sandbox.stub(random, 'choose').callsFake(() => true);

    testCloneSiblings('mutate_expressions_current_expected.js');
  });
});

describe('Cloning', () => {
  // Ensure that the source location we add are not cloned.
  it('is not copying added state', () => {
    const source = helpers.loadTestData('mutate_expressions.js');
    common.setSourceLoc(source, 5, 10);
    const noopNode = source.ast.program.body[0];
    assert.equal(0.5, common.getSourceLoc(noopNode));
    const cloned = babelTypes.cloneDeep(noopNode);
    assert.equal(undefined, common.getSourceLoc(cloned));
  });
});
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutate_function_calls.js                  0000664 0000000 0000000 00000005504 14746647661 0030570 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for mutating funciton calls.
 */

'use strict';

const sinon = require('sinon');

const helpers = require('./helpers.js');
const random = require('../random.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');
const functionCallMutator = require('../mutators/function_call_mutator.js');

const sandbox = sinon.createSandbox();

function loadAndMutate(input_file) {
  const source = helpers.loadTestData(input_file);

  const settings = scriptMutator.defaultSettings();
  settings['engine'] = 'V8';
  settings['MUTATE_FUNCTION_CALLS'] = 1.0;

  const mutator = new functionCallMutator.FunctionCallMutator(settings);
  mutator.mutate(source);
  return source;
}

describe('Mutate functions', () => {
  afterEach(() => {
    sandbox.restore();
  });

  it('is robust without available functions', () => {
    sandbox.stub(random, 'random').callsFake(() => { return 0.2; });

    // We just ensure here that mutating this file doesn't throw.
    loadAndMutate('mutate_function_call.js');
  });

  it('optimizes functions with turbofan in V8', () => {
    sandbox.stub(random, 'random').callsFake(() => { return 0.5; });
    sandbox.stub(random, 'choose').callsFake(p => true);

    const source = loadAndMutate('mutate_function_call.js');
    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_function_call_expected.js', mutated);
  });

  it('optimizes functions with maglev in V8', () => {
    sandbox.stub(random, 'random').callsFake(() => { return 0.5; });
    // False-path takes 'Maglev'. Other calls to choose should return
    // true. It's also used to determine if a mutator should be chosen.
    sandbox.stub(random, 'choose').callsFake(p => p == 0.7 ? false : true);

    const source = loadAndMutate('mutate_function_call.js');
    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_function_call_maglev_expected.js', mutated);
  });

  it('compiles functions in V8 to baseline', () => {
    sandbox.stub(random, 'random').callsFake(() => { return 0.7; });

    const source = loadAndMutate('mutate_function_call.js');
    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_function_call_baseline_expected.js', mutated);
  });

  it('deoptimizes functions in V8', () => {
    sandbox.stub(random, 'random').callsFake(() => { return 0.8; });

    const source = loadAndMutate('mutate_function_call.js');
    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_function_call_deopt_expected.js', mutated);
  });
});
                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutate_numbers.js                         0000664 0000000 0000000 00000003235 14746647661 0027237 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for mutating variables
 */

'use strict';

const babelTypes = require('@babel/types');
const sinon = require('sinon');

const common = require('../mutators/common.js');
const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');
const numberMutator = require('../mutators/number_mutator.js');
const random = require('../random.js');

const sandbox = sinon.createSandbox();

describe('Mutate numbers', () => {
  beforeEach(() => {
    sandbox.stub(common, 'nearbyRandomNumber').callsFake(
        () => { return babelTypes.numericLiteral(-3) });
    sandbox.stub(common, 'randomInterestingNumber').callsFake(
        () => { return babelTypes.numericLiteral(-4) });
    sandbox.stub(random, 'randInt').callsFake(() => { return -5 });

    // Interesting cases from number mutator.
    const interestingProbs = [0.009, 0.05, 0.5];
    sandbox.stub(random, 'random').callsFake(
        helpers.cycleProbabilitiesFun(interestingProbs));
  });

  afterEach(() => {
    sandbox.restore();
  });

  it('test', () => {
    const source = helpers.loadTestData('mutate_numbers.js');

    const settings = scriptMutator.defaultSettings();
    settings['MUTATE_NUMBERS'] = 1.0;

    const mutator = new numberMutator.NumberMutator(settings);
    mutator.mutate(source);

    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_numbers_expected.js', mutated);
  });
});
                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutate_objects.js                         0000664 0000000 0000000 00000002452 14746647661 0027215 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for mutating object expressions
 */

'use strict';

const sinon = require('sinon');

const babylon = require('@babel/parser');

const common = require('../mutators/common.js');
const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');

const {ObjectMutator} = require('../mutators/object_mutator.js');

const sandbox = sinon.createSandbox();

describe('Mutate objects', () => {
  afterEach(() => {
    sandbox.restore();
  });

  it('performs all mutations', () => {
    // Make random operations deterministic.
    sandbox.stub(common, 'randomValue').callsFake(
        () => babylon.parseExpression('""'));
    helpers.deterministicRandom(sandbox);

    const source = helpers.loadTestData('mutate_objects.js');

    const settings = scriptMutator.defaultSettings();
    settings['MUTATE_OBJECTS'] = 1.0;

    const mutator = new ObjectMutator(settings);
    mutator.mutate(source);

    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_objects_expected.js', mutated);
  });
});
                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutate_variable_or_object.js              0000664 0000000 0000000 00000004436 14746647661 0031403 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test variable-or-object mutator.
 */

'use strict';

const babylon = require('@babel/parser');
const sinon = require('sinon');

const common = require('../mutators/common.js');
const helpers = require('./helpers.js');
const variableOrObject = require('../mutators/variable_or_object_mutation.js');
const random = require('../random.js');
const sourceHelpers = require('../source_helpers.js');

const sandbox = sinon.createSandbox();

function testMutations(testPath, expectedPath) {
  const source = helpers.loadTestData(testPath);

  const mutator = new variableOrObject.VariableOrObjectMutator(
      { ADD_VAR_OR_OBJ_MUTATIONS: 1.0 });

  mutator.mutate(source);

  const mutated = sourceHelpers.generateCode(source);
  helpers.assertExpectedResult(expectedPath, mutated);
}

describe('Variable or object mutator', () => {
  beforeEach(() => {
    // Make before/after insertion deterministic. This also chooses
    // random objects.
    sandbox.stub(random, 'choose').callsFake(() => { return true; });
    // This stubs out the random seed.
    sandbox.stub(random, 'randInt').callsFake(() => { return 123; });
    // Random value is itself dependent on too much randomization.
    sandbox.stub(common, 'randomValue').callsFake(
        () => { return babylon.parseExpression('0'); });
  });

  afterEach(() => {
    sandbox.restore();
  });

  it('test', () => {
    let index = 0;
    // Test different cases of _randomVariableOrObjectMutations in
    // variable_or_object_mutation.js.
    const choices = [
      0.2, // Trigger recursive case.
      0.3, // Recursion 1: Delete.
      0.4, // Recursion 2: Property access.
      0.5, // Random assignment.
      // 0.6 case for randomFunction omitted as it has too much randomization.
      0.7, // Variable assignment.
      0.8, // Object.defineProperty.
      0.9, // Object.defineProperty recursive.
      0.3, // Recursion 1: Delete.
      0.4, // Recursion 2: Property access.
    ];
    sandbox.stub(random, 'random').callsFake(
        () => { return choices[index++]; });
    testMutations(
        'mutate_var_or_obj.js',
        'mutate_var_or_obj_expected.js');
  });
});
                                                                                                                                                                                                                                  node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutate_variables.js                       0000664 0000000 0000000 00000002417 14746647661 0027535 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Tests for mutating variables
 */

'use strict';

const babelTypes = require('@babel/types');
const sinon = require('sinon');

const common = require('../mutators/common.js');
const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');
const variableMutator = require('../mutators/variable_mutator.js');

const sandbox = sinon.createSandbox();

describe('Mutate variables', () => {
  beforeEach(() => {
    sandbox.stub(
        common, 'randomVariable').callsFake(
            () => { return babelTypes.identifier('REPLACED') });
  });

  afterEach(() => {
    sandbox.restore();
  });

  it('test', () => {

    const source = helpers.loadTestData('mutate_variables.js');

    const settings = scriptMutator.defaultSettings();
    settings['MUTATE_VARIABLES'] = 1.0;

    const mutator = new variableMutator.VariableMutator(settings);
    mutator.mutate(source);

    const mutated = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'mutate_variables_expected.js', mutated);
  });
});
                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_mutation_order.js                         0000664 0000000 0000000 00000003350 14746647661 0027236 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test shuffling mutators and extra mutations.
 *
 * Use minimal probability settings to demonstrate order changes of top-level
 * mutators. Which mutations are used exactly is not relevant to the test and
 * handled pseudo-randomly.
 */

'use strict';

const sinon = require('sinon');

const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');
const sourceHelpers = require('../source_helpers.js');
const random = require('../random.js');

const sandbox = sinon.createSandbox();

describe('Toplevel mutations', () => {
  afterEach(() => {
    sandbox.restore();
  });

  it('shuffle their order', () => {
    // Make random operations deterministic.
    helpers.deterministicRandom(sandbox);

    this.settings = {
      ADD_VAR_OR_OBJ_MUTATIONS: 0.0,
      MUTATE_CROSSOVER_INSERT: 0.0,
      MUTATE_EXPRESSIONS: 0.0,
      MUTATE_FUNCTION_CALLS: 1.0,
      MUTATE_NUMBERS: 1.0,
      MUTATE_VARIABLES: 0.0,
      SCRIPT_MUTATOR_SHUFFLE: 1.0,
      SCRIPT_MUTATOR_EXTRA_MUTATIONS: 1.0,
      engine: 'V8',
      testing: true,
    };

    const source = helpers.loadTestData('mutation_order/input.js');
    const mutator = new scriptMutator.ScriptMutator(this.settings, helpers.DB_DIR);
    const mutated = mutator.mutateInputs([source]);
    const code = sourceHelpers.generateCode(mutated);

    // The test data should be rich enough to produce a pattern from the
    // FunctionCallMutator that afterwards gets mutated by the NumberMutator.
    helpers.assertExpectedResult(
        'mutation_order/output_expected.js', code);
  });
});
                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_normalize.js                              0000664 0000000 0000000 00000002337 14746647661 0026207 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test normalization.
 */

'use strict';

const helpers = require('./helpers.js');
const normalizer = require('../mutators/normalizer.js');
const sourceHelpers = require('../source_helpers.js');

describe('Normalize', () => {
  it('test basic', () => {
    const source = helpers.loadTestData('normalize.js');

    const mutator = new normalizer.IdentifierNormalizer();
    mutator.mutate(source);

    const normalized_0 = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'normalize_expected_0.js', normalized_0);

    mutator.mutate(source);
    const normalized_1 = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'normalize_expected_1.js', normalized_1);
  });

  it('test simple_test.js', () => {
    const source = helpers.loadTestData('simple_test.js');

    const mutator = new normalizer.IdentifierNormalizer();
    mutator.mutate(source);

    const normalized = sourceHelpers.generateCode(source);
    helpers.assertExpectedResult(
        'simple_test_expected.js', normalized);
  });
});
                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_random.js                                 0000664 0000000 0000000 00000003104 14746647661 0025460 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test random utilities.
 */

'use strict';

const assert = require('assert');
const sinon = require('sinon');

const { twoBucketSample } = require('../random.js');

const sandbox = sinon.createSandbox();


describe('Two-bucket choosing', () => {
  afterEach(() => {
    sandbox.restore();
  });

  it('with one empty', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.5);
    assert.deepEqual([1, 2], twoBucketSample([0, 1, 2], [], 1, 2));
    assert.deepEqual([1, 2], twoBucketSample([], [0, 1, 2], 1, 2));
    assert.deepEqual([0], twoBucketSample([0], [], 1, 1));
    assert.deepEqual([0], twoBucketSample([], [0], 1, 1));
  });

  it('chooses with 0.3', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.3);
    assert.deepEqual([1, 2], twoBucketSample([0, 1, 2], [3, 4, 5], 1, 2));
    // Higher factor.
    assert.deepEqual([3, 5], twoBucketSample([0, 1, 2], [3, 4, 5], 4, 2));
  });

  it('chooses with 0.7', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.7);
    assert.deepEqual([4, 3], twoBucketSample([0, 1, 2], [3, 4, 5], 1, 2));
  });

  it('chooses with 0.5', () => {
    sandbox.stub(Math, 'random').callsFake(() => 0.5);
    assert.deepEqual([3], twoBucketSample([0, 1], [2, 3, 4, 5], 1, 1));
    assert.deepEqual([3], twoBucketSample([0, 1, 2, 3], [4, 5], 1, 1));
    // Higher factor.
    assert.deepEqual([4], twoBucketSample([0, 1, 2, 3], [4, 5], 2, 1));
  });
});
                                                                                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_regressions.js                            0000664 0000000 0000000 00000007776 14746647661 0026566 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Regression tests.
 */

'use strict';

const assert = require('assert');
const { execSync } = require("child_process");
const fs = require('fs');
const sinon = require('sinon');
const tempfile = require('tempfile');
const tempy = require('tempy');

const exceptions = require('../exceptions.js');
const helpers = require('./helpers.js');
const scriptMutator = require('../script_mutator.js');

const sandbox = sinon.createSandbox();

const SYNTAX_ERROR_RE = /.*SyntaxError.*/

function createFuzzTest(fake_db, settings, inputFiles) {
  const sources = inputFiles.map(input => helpers.loadTestData(input));

  const mutator = new scriptMutator.ScriptMutator(settings, fake_db);
  const result = mutator.mutateMultiple(sources);

  const output_file = tempfile('.js');
  fs.writeFileSync(output_file, result.code);
  return { file:output_file, flags:result.flags };
}

function execFile(jsFile) {
  execSync("node " + jsFile, {stdio: ['pipe']});
}

describe('Regression tests', () => {
  beforeEach(() => {
    helpers.deterministicRandom(sandbox);

    this.settings = {
      ADD_VAR_OR_OBJ_MUTATIONS: 0.0,
      MUTATE_CROSSOVER_INSERT: 0.0,
      MUTATE_EXPRESSIONS: 0.0,
      MUTATE_FUNCTION_CALLS: 0.0,
      MUTATE_NUMBERS: 0.0,
      MUTATE_VARIABLES: 0.0,
      engine: 'V8',
      testing: true,
    }
  });

  afterEach(() => {
    sandbox.restore();
  });

  it('combine strict and with', () => {
    // Test that when a file with "use strict" is used in the inputs,
    // the result is only strict if no other file contains anything
    // prohibited in strict mode (here a with statement).
    // It is assumed that such input files are marked as sloppy in the
    // auto generated exceptions.
    sandbox.stub(exceptions, 'getGeneratedSloppy').callsFake(
        () => { return new Set(['regress/strict/input_with.js']); });
    const {file, flags} = createFuzzTest(
        'test_data/regress/empty_db',
        this.settings,
        ['regress/strict/input_strict.js', 'regress/strict/input_with.js']);
    execFile(file);
  });

  it('combine strict and delete', () => {
    // As above with unqualified delete.
    sandbox.stub(exceptions, 'getGeneratedSloppy').callsFake(
        () => { return new Set(['regress/strict/input_delete.js']); });
    const {file, flags} = createFuzzTest(
        'test_data/regress/empty_db',
        this.settings,
        ['regress/strict/input_strict.js', 'regress/strict/input_delete.js']);
    execFile(file);
  });

  it('mutates negative value', () => {
    // This tests that the combination of number, function call and expression
    // mutator does't produce an update expression.
    // Previously the 1 in -1 was replaced with another negative number leading
    // to e.g. -/*comment/*-2. Then cloning the expression removed the
    // comment and produced --2 in the end.
    this.settings['MUTATE_NUMBERS'] = 1.0;
    this.settings['MUTATE_FUNCTION_CALLS'] = 1.0;
    this.settings['MUTATE_EXPRESSIONS'] = 1.0;
    const {file, flags} = createFuzzTest(
        'test_data/regress/empty_db',
        this.settings,
        ['regress/numbers/input_negative.js']);
    execFile(file);
  });

  it('mutates indices', () => {
    // Test that indices are not replaced with a negative number causing a
    // syntax error (e.g. {-1: ""}).
    this.settings['MUTATE_NUMBERS'] = 1.0;
    const {file, flags} = createFuzzTest(
        'test_data/regress/empty_db',
        this.settings,
        ['regress/numbers/input_indices.js']);
    execFile(file);
  });

  it('resolves flag contradictions', () => {
    sandbox.stub(exceptions, 'CONTRADICTORY_FLAGS').value(
        [['--flag1', '--flag2']])
    const {file, flags} = createFuzzTest(
        'test_data/regress/empty_db',
        this.settings,
        ['regress/contradictions/input1.js',
         'regress/contradictions/input2.js']);
    assert.deepEqual(['--flag1'], flags);
  });
});
  node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test/test_try_catch.js                              0000664 0000000 0000000 00000005274 14746647661 0026172 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test normalization.
 */

'use strict';

const sinon = require('sinon');

const common = require('../mutators/common.js');
const helpers = require('./helpers.js');
const random = require('../random.js');
const sourceHelpers = require('../source_helpers.js');
const tryCatch = require('../mutators/try_catch.js');

const sandbox = sinon.createSandbox();

function loadSource() {
  return helpers.loadTestData('try_catch.js');
}

function testTryCatch(source, expected) {
  const mutator = new tryCatch.AddTryCatchMutator();
  mutator.mutate(source);

  const mutated = sourceHelpers.generateCode(source);
  helpers.assertExpectedResult(expected, mutated);
}

describe('Try catch', () => {
  afterEach(() => {
    sandbox.restore();
  });

  // Wrap on exit, hence wrap everything nested.
  it('wraps all', () => {
    sandbox.stub(random, 'choose').callsFake(() => { return false; });
    sandbox.stub(random, 'random').callsFake(() => { return 0.7; });
    testTryCatch(loadSource(), 'try_catch_expected.js');
  });

  // Wrap on enter and skip.
  it('wraps toplevel', () => {
    sandbox.stub(random, 'choose').callsFake(() => { return false; });
    sandbox.stub(random, 'random').callsFake(() => { return 0.04; });
    const source = loadSource();

    // Fake source fraction 0.1 (i.e. the second of 10 files).
    // Probability for toplevel try-catch is 0.05.
    common.setSourceLoc(source, 1, 10);

    testTryCatch(source, 'try_catch_toplevel_expected.js');
  });

  // Choose the rare case of skipping try-catch.
  it('wraps nothing', () => {
    sandbox.stub(random, 'choose').callsFake(() => { return false; });
    sandbox.stub(random, 'random').callsFake(() => { return 0.01; });
    const source = loadSource();

    // Fake source fraction 0.1 (i.e. the second of 10 files).
    // Probability for skipping is 0.02.
    common.setSourceLoc(source, 1, 10);

    testTryCatch(source, 'try_catch_nothing_expected.js');
  });

  // Choose to alter the target probability to 0.9 resulting in skipping
  // all try-catch.
  it('wraps nothing with high target probability', () => {
    sandbox.stub(random, 'choose').callsFake(() => { return true; });
    sandbox.stub(random, 'uniform').callsFake(() => { return 0.9; });
    sandbox.stub(random, 'random').callsFake(() => { return 0.8; });
    const source = loadSource();

    // Fake source fraction 0.9 (i.e. the last of 10 files).
    // Probability for skipping is 0.81 (0.9 * 0.9).
    common.setSourceLoc(source, 9, 10);

    testTryCatch(source, 'try_catch_alternate_expected.js');
  });
});
                                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/                                          0000775 0000000 0000000 00000000000 14746647661 0023576 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/JSTests/                                  0000775 0000000 0000000 00000000000 14746647661 0025135 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/JSTests/fake_stub.js                      0000664 0000000 0000000 00000000274 14746647661 0027441 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

print("Fake stub");
                                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/JSTests/load.js                           0000664 0000000 0000000 00000000271 14746647661 0026412 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

print("JSTest");
                                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/JSTests/load_expected.js                  0000664 0000000 0000000 00000000415 14746647661 0030273 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: JSTests/fake_stub.js
print("Fake stub");

// Original: JSTests/load.js
print("JSTest");
                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/available_variables.js                    0000664 0000000 0000000 00000001654 14746647661 0030112 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

let __v_0 = 0;
let __v_1 = 0;

console.log(__v_0, __v_1, __f_0, __f_1);

function __f_0() {
  let __v_2 = 0;
  console.log(__v_0, __v_1, __v_2, __f_0, __f_1);
}

let __v_3 = 0;

console.log(__v_0, __v_1, __v_3, __f_0, __f_1);

function __f_1(__v_7) {
  let __v_4 = 0;

  console.log(__v_0, __v_1, __v_3, __v_4, __v_7, __f_0, __f_1);
  {
    let __v_5 = 0;
    var __v_6 = 0;
    console.log(__v_0, __v_1, __v_3, __v_4, __v_5, __v_6, __v_7, __f_0, __f_1, __f_2);
    function __f_2 () {};
    console.log(__v_0, __v_1, __v_3, __v_4, __v_5, __v_6, __v_7, __f_0, __f_1, __f_2);
  }
  // TODO(machenbach): __f_2 is missing as available identifier.
  console.log(__v_0, __v_1, __v_3, __v_4, __v_6, __v_7, __f_0, __f_1, __f_2);
}
console.log(__v_0, __v_1, __v_3, __f_0, __f_1);
                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/available_variables_expected.js           0000664 0000000 0000000 00000010565 14746647661 0031774 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  },
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_2"
      },
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  },
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      },
      {
        "type": "Identifier",
        "name": "__v_3"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  },
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_7"
      },
      {
        "type": "Identifier",
        "name": "__v_4"
      },
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      },
      {
        "type": "Identifier",
        "name": "__v_3"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  },
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_5"
      },
      {
        "type": "Identifier",
        "name": "__v_7"
      },
      {
        "type": "Identifier",
        "name": "__v_4"
      },
      {
        "type": "Identifier",
        "name": "__v_6"
      },
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      },
      {
        "type": "Identifier",
        "name": "__v_3"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_2"
      },
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  },
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_5"
      },
      {
        "type": "Identifier",
        "name": "__v_7"
      },
      {
        "type": "Identifier",
        "name": "__v_4"
      },
      {
        "type": "Identifier",
        "name": "__v_6"
      },
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      },
      {
        "type": "Identifier",
        "name": "__v_3"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_2"
      },
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  },
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_7"
      },
      {
        "type": "Identifier",
        "name": "__v_4"
      },
      {
        "type": "Identifier",
        "name": "__v_6"
      },
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      },
      {
        "type": "Identifier",
        "name": "__v_3"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  },
  {
    "variables": [
      {
        "type": "Identifier",
        "name": "__v_0"
      },
      {
        "type": "Identifier",
        "name": "__v_1"
      },
      {
        "type": "Identifier",
        "name": "__v_3"
      }
    ],
    "functions": [
      {
        "type": "Identifier",
        "name": "__f_0"
      },
      {
        "type": "Identifier",
        "name": "__f_1"
      }
    ]
  }
]
                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/chakra/                                   0000775 0000000 0000000 00000000000 14746647661 0025027 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/chakra/dir/                               0000775 0000000 0000000 00000000000 14746647661 0025605 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/chakra/dir/load3.js                       0000664 0000000 0000000 00000000356 14746647661 0027151 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

WScript.LoadScriptFile("..\\load2.js", "self");
console.log('load3');
                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/chakra/load.js                            0000664 0000000 0000000 00000000434 14746647661 0026305 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

if (this.WScript && this.WScript.LoadScriptFile) {
  WScript.LoadScriptFile("load1.js");
}

console.log('load.js');
                                                                                                                                                                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/chakra/load1.js                           0000664 0000000 0000000 00000000407 14746647661 0026366 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Test case insensitivity.
WScript.LoadScriptFile("DIR\\LoAd3.js");

console.log('load1.js');
                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/chakra/load2.js                           0000664 0000000 0000000 00000000301 14746647661 0026360 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

console.log('load2.js');
                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/chakra/load_expected.js                   0000664 0000000 0000000 00000000667 14746647661 0030176 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: chakra/load2.js
console.log('load2.js');

// Original: chakra/dir/load3.js
console.log('load3');

// Original: chakra/load1.js
console.log('load1.js');

// Original: chakra/load.js
if (this.WScript && this.WScript.LoadScriptFile) {}

console.log('load.js');
                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/cross_over_mutator_class_input.js         0000664 0000000 0000000 00000000406 14746647661 0032477 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

class __C {
  foo() {
    let __v_0 = 2;
    let __v_1 = 2;
    Math.pow(__v_0, __v_1);
  }
}
                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/db/                                       0000775 0000000 0000000 00000000000 14746647661 0024163 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/db/this/                                  0000775 0000000 0000000 00000000000 14746647661 0025132 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/db/this/file.js                           0000664 0000000 0000000 00000000333 14746647661 0026406 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

function C() {
  this.c = "c";
}

var c = new C();
                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/                        0000775 0000000 0000000 00000000000 14746647661 0027310 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/combined_expected.js    0000664 0000000 0000000 00000002641 14746647661 0033312 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: differential_fuzz/fake_resource.js
print("I'm a resource.");

// Original: differential_fuzz/fake_resource.js
print("I'm a resource.");

// Original: differential_fuzz/fake_resource.js
print("I'm a resource.");

// Original: differential_fuzz/fake_resource.js
print("I'm a resource.");

// Original: differential_fuzz/fake_resource.js
print("I'm a resource.");

/* DifferentialFuzzMutator: Print variables and exceptions from section */
try {
  print("Hash: " + __hash);
  print("Caught: " + __caught);
} catch (e) {}

print("v8-foozzie source: differential_fuzz/input1.js");

// Original: differential_fuzz/input1.js
try {
  var __v_0 = 0;
} catch (e) {}

try {
  /* DifferentialFuzzMutator: Pretty printing */
  __prettyPrintExtra(__v_0);
} catch (e) {}

/* DifferentialFuzzMutator: Print variables and exceptions from section */
try {
  print("Hash: " + __hash);
  print("Caught: " + __caught);

  __prettyPrint(__v_0);
} catch (e) {}

print("v8-foozzie source: differential_fuzz/input2.js");

// Original: differential_fuzz/input2.js
let __v_1 = 1;

/* DifferentialFuzzMutator: Print variables and exceptions from section */
try {
  print("Hash: " + __hash);
  print("Caught: " + __caught);

  __prettyPrint(__v_0);

  __prettyPrint(__v_1);
} catch (e) {}
                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/exceptions.js           0000664 0000000 0000000 00000000322 14746647661 0032024 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


try {
  let __v_0 = boom;
} catch (e) {}
                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/exceptions_expected.js  0000664 0000000 0000000 00000000652 14746647661 0033713 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: differential_fuzz/exceptions.js
try {
  let __v_0 = boom;
} catch (e) {
  __caught++;
}

/* DifferentialFuzzMutator: Print variables and exceptions from section */
try {
  print("Hash: " + __hash);
  print("Caught: " + __caught);
} catch (e) {}
                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/fake_resource.js        0000664 0000000 0000000 00000000411 14746647661 0032457 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file represents anything loaded from the resources directory.
print("I'm a resource.");
                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/input1.js               0000664 0000000 0000000 00000000352 14746647661 0031066 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --flag1 --flag2
// Flags: --flag3

var a = 0;
print(a);
                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/input2.js               0000664 0000000 0000000 00000000306 14746647661 0031066 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --flag4

let b = 1;
                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/mutations.js            0000664 0000000 0000000 00000001123 14746647661 0031666 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// Print after declaration.
var __v_0 = [1, 2, 3];

// Don't print after declarations or assigments in loops.
for (let __v_1 = 0; __v_1 < 3; __v_1 += 1) {

  // Print after multiple declarations.
  let __v_2, __v_3 = 0;

  // Print after assigning to member.
  __v_0.foo = undefined;

  // Replace with deep printing.
  print(0);

  // Print exception.
  try {
    // Print after assignment.
    __v_1 += 1;
  } catch(e) {}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/mutations_expected.js   0000664 0000000 0000000 00000002026 14746647661 0033552 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: differential_fuzz/mutations.js
var __v_0 = [1, 2, 3];

/* DifferentialFuzzMutator: Extra variable printing */
__prettyPrintExtra(__v_0);

for (let __v_1 = 0; __v_1 < 3; __v_1 += 1) {
  let __v_2,
      __v_3 = 0;

  /* DifferentialFuzzMutator: Extra variable printing */
  __prettyPrintExtra(__v_2);

  __prettyPrintExtra(__v_3);

  __v_0.foo = undefined;

  /* DifferentialFuzzMutator: Extra variable printing */
  __prettyPrintExtra(__v_0);

  /* DifferentialFuzzMutator: Pretty printing */
  __prettyPrintExtra(0);

  try {
    __v_1 += 1;

    /* DifferentialFuzzMutator: Extra variable printing */
    __prettyPrintExtra(__v_1);
  } catch (e) {
    __prettyPrintExtra(e);
  }
}

/* DifferentialFuzzMutator: Print variables and exceptions from section */
try {
  print("Hash: " + __hash);
  print("Caught: " + __caught);

  __prettyPrint(__v_0);
} catch (e) {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/suppressions.js         0000664 0000000 0000000 00000000744 14746647661 0032430 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// These statements might come from a CrashTest.
print("v8-foozzie source: some/file/name");
print('v8-foozzie source: some/file/name');

function foo(__v_0) {
  // This is an unsupported language feature.
  return 1 in foo.arguments;
}

// This leads to precision differences in optimized code.
print(192 ** -0.5);
                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/suppressions_expected.js0000664 0000000 0000000 00000001124 14746647661 0034302 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: differential_fuzz/suppressions.js
print(
/* DifferentialFuzzSuppressions: Replaced magic string */
"v***************e: some/file/name");
print(
/* DifferentialFuzzSuppressions: Replaced magic string */
"v***************e: some/file/name");

function foo(__v_0) {
  return 1 in
  /* DifferentialFuzzSuppressions: Replaced .arguments */
  __v_0;
}

print(
/* DifferentialFuzzSuppressions: Replaced ** */
192 + -0.5);
                                                                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/v8_fuzz_experiments.json0000664 0000000 0000000 00000000060 14746647661 0034235 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        [
  [100, "ignition", "ignition_turbo", "d8"]
]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/differential_fuzz/v8_fuzz_flags.json      0000664 0000000 0000000 00000000035 14746647661 0032770 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        [
  [1.0, "--foo1 --foo2"]
]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/fake_db/                                  0000775 0000000 0000000 00000000000 14746647661 0025151 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/fake_db/index.json                        0000664 0000000 0000000 00000000003 14746647661 0027144 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/                                  0000775 0000000 0000000 00000000000 14746647661 0025267 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/mjsunit.js                        0000664 0000000 0000000 00000000302 14746647661 0027311 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var fakeMjsunit = 'fake';
                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load.js                      0000664 0000000 0000000 00000000406 14746647661 0027603 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var testLoad = 'test_load';
load('test_data/mjsunit/test_load_1.js');
load('test_load_0.js');
                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load_0.js                    0000664 0000000 0000000 00000000441 14746647661 0030021 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

load('test_data/mjsunit/test_load_1.js');
load('test_load_2.js');
load('test_load_3.js');
var testLoad0 = 'test_load_0';
                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load_1.js                    0000664 0000000 0000000 00000000337 14746647661 0030026 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

load('test_load_2.js');
var testLoad1 = 'test_load_1';
                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load_2.js                    0000664 0000000 0000000 00000000307 14746647661 0030024 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var testLoad2 = 'test_load_2';
                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load_3.js                    0000664 0000000 0000000 00000000307 14746647661 0030025 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var testLoad3 = 'test_load_3';
                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load_expected.js             0000664 0000000 0000000 00000001061 14746647661 0031462 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mjsunit/mjsunit.js
var fakeMjsunit = 'fake';

// Original: mjsunit/test_load_2.js
var testLoad2 = 'test_load_2';

// Original: mjsunit/test_load_1.js
var testLoad1 = 'test_load_1';

// Original: mjsunit/test_load_3.js
var testLoad3 = 'test_load_3';

// Original: mjsunit/test_load_0.js
var testLoad0 = 'test_load_0';

// Original: mjsunit/test_load.js
var testLoad = 'test_load';
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load_self.js                 0000664 0000000 0000000 00000000303 14746647661 0030610 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

load("test_load_self.js");
                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit/test_load_self_expected.js        0000664 0000000 0000000 00000000342 14746647661 0032474 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mjsunit/mjsunit.js
var fakeMjsunit = 'fake';
                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit_softskipped/                      0000775 0000000 0000000 00000000000 14746647661 0027702 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit_softskipped/object-literal.js     0000664 0000000 0000000 00000000265 14746647661 0033143 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Fake file
                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit_softskipped/permitted.js          0000664 0000000 0000000 00000000265 14746647661 0032240 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Fake file
                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit_softskipped/regress/              0000775 0000000 0000000 00000000000 14746647661 0031354 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        binaryen-123.js                                                                                     0000664 0000000 0000000 00000000265 14746647661 0033750 0                                                                                                    ustar 00root                            root                            0000000 0000000 node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mjsunit_softskipped/regress                                                                                  // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Fake file
                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_arrays.js                          0000664 0000000 0000000 00000000654 14746647661 0027021 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[];
[];
[];
[];
[];
[];
[];
[];
[];
[];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
[1, 2, 3];
                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_arrays_expected.js                 0000664 0000000 0000000 00000004033 14746647661 0030675 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mutate_arrays.js

/* ArrayMutator: Remove elements */

/* ArrayMutator: Insert a hole */
[];
[];

/* ArrayMutator: Shuffle array */
[];

/* ArrayMutator: Insert a random value */
[""];

/* ArrayMutator: Insert a random value (replaced) */
[""];

/* ArrayMutator: Insert a hole (replaced) */
[,];
[];

/* ArrayMutator: Insert a hole (replaced) */
[,];

/* ArrayMutator: Remove elements */
[];

/* ArrayMutator: Remove elements */
[];

/* ArrayMutator: Duplicate an element */
[1, 1, 2, 3];

/* ArrayMutator: Insert a random value (replaced) */
[1, "", 3];

/* ArrayMutator: Remove elements */
[];

/* ArrayMutator: Duplicate an element */
[1, 2, 3, 2];

/* ArrayMutator: Remove elements */
[3];

/* ArrayMutator: Duplicate an element (replaced) */
[1, 2, 3];

/* ArrayMutator: Insert a hole (replaced) */

/* ArrayMutator: Duplicate an element (replaced) */
[1, 2,,];

/* ArrayMutator: Remove elements */
[1, 2];

/* ArrayMutator: Insert a hole (replaced) */

/* ArrayMutator: Duplicate an element */
[1, 1, 2,,];

/* ArrayMutator: Shuffle array */
[2, 1, 3];

/* ArrayMutator: Remove elements */

/* ArrayMutator: Remove elements */
[3];

/* ArrayMutator: Duplicate an element (replaced) */
[1, 2, 1];

/* ArrayMutator: Duplicate an element (replaced) */

/* ArrayMutator: Duplicate an element (replaced) */
[1, 2, 2];

/* ArrayMutator: Insert a random value */
[1, 2, 3, ""];

/* ArrayMutator: Duplicate an element */
[1, 2, 3, 3];

/* ArrayMutator: Remove elements */

/* ArrayMutator: Duplicate an element */
[1, 2];

/* ArrayMutator: Insert a random value (replaced) */

/* ArrayMutator: Duplicate an element (replaced) */
[1, 2, ""];

/* ArrayMutator: Insert a random value (replaced) */

/* ArrayMutator: Insert a random value (replaced) */
["", 2, 3];

/* ArrayMutator: Duplicate an element */

/* ArrayMutator: Remove elements */
[1, 1, 3];

/* ArrayMutator: Remove elements */
[1, 2];
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_expressions.js                     0000664 0000000 0000000 00000000306 14746647661 0030074 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

1;
let foo = undefined;
2;
3;
                                                                                                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_expressions_current_expected.js    0000664 0000000 0000000 00000000501 14746647661 0033514 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mutate_expressions.js
1;

/* ExpressionMutator: Cloned sibling */
2;
let foo = undefined;

/* ExpressionMutator: Cloned sibling */
3;
2;
3;
                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_expressions_previous_expected.js   0000664 0000000 0000000 00000000425 14746647661 0033713 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mutate_expressions.js
1;
let foo = undefined;
2;
3;

/* ExpressionMutator: Cloned sibling */
2;
                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_function_call.js                   0000664 0000000 0000000 00000000321 14746647661 0030327 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

__f_0(1);
a = __f_0(1);
foo(1, __f_0());
                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_function_call_baseline_expected.js 0000664 0000000 0000000 00000000745 14746647661 0034064 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/* FunctionCallMutator: Compiling baseline __f_0 */
%CompileBaseline(__f_0);

// Original: mutate_function_call.js
__f_0(1);

a = (
/* FunctionCallMutator: Compiling baseline __f_0 */
%CompileBaseline(__f_0), __f_0(1));
foo(1, (
/* FunctionCallMutator: Compiling baseline __f_0 */
%CompileBaseline(__f_0), __f_0()));
                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_function_call_deopt_expected.js    0000664 0000000 0000000 00000001021 14746647661 0033401 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var _temp, _temp2;

// Original: mutate_function_call.js

/* FunctionCallMutator: Deoptimizing __f_0 */
__f_0(1);

%DeoptimizeFunction(__f_0);

a = (
/* FunctionCallMutator: Deoptimizing __f_0 */
_temp = __f_0(1), %DeoptimizeFunction(__f_0), _temp);
foo(1, (
/* FunctionCallMutator: Deoptimizing __f_0 */
_temp2 = __f_0(), %DeoptimizeFunction(__f_0), _temp2));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_function_call_expected.js          0000664 0000000 0000000 00000001244 14746647661 0032215 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

%PrepareFunctionForOptimization(__f_0);

__f_0(1);

__f_0(1);

%OptimizeFunctionOnNextCall(__f_0);

// Original: mutate_function_call.js

/* FunctionCallMutator: Optimizing __f_0 */
__f_0(1);

a = (
/* FunctionCallMutator: Optimizing __f_0 */
%PrepareFunctionForOptimization(__f_0), __f_0(1), __f_0(1), %OptimizeFunctionOnNextCall(__f_0), __f_0(1));
foo(1, (
/* FunctionCallMutator: Optimizing __f_0 */
%PrepareFunctionForOptimization(__f_0), __f_0(), __f_0(), %OptimizeFunctionOnNextCall(__f_0), __f_0()));
                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_function_call_maglev_expected.js   0000664 0000000 0000000 00000001236 14746647661 0033551 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

%PrepareFunctionForOptimization(__f_0);

__f_0(1);

__f_0(1);

%OptimizeMaglevOnNextCall(__f_0);

// Original: mutate_function_call.js

/* FunctionCallMutator: Optimizing __f_0 */
__f_0(1);

a = (
/* FunctionCallMutator: Optimizing __f_0 */
%PrepareFunctionForOptimization(__f_0), __f_0(1), __f_0(1), %OptimizeMaglevOnNextCall(__f_0), __f_0(1));
foo(1, (
/* FunctionCallMutator: Optimizing __f_0 */
%PrepareFunctionForOptimization(__f_0), __f_0(), __f_0(), %OptimizeMaglevOnNextCall(__f_0), __f_0()));
                                                                                                                                                                                                                                                                                                                                                                  node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_numbers.js                         0000664 0000000 0000000 00000000570 14746647661 0027170 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

function foo() {
  let a = 123;
  for (let i = 0; i < 456; i++) {
    a += 1;
  }

  let b = 0;
  while (b < 10) {
    b += 2;
  }

  a += 1;
}

var a = {0: "", 1: "", get 1(){}};
var b = -10;
                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_numbers_expected.js                0000664 0000000 0000000 00000001403 14746647661 0031045 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

// Original: mutate_numbers.js
function foo() {
  let a =
  /* NumberMutator: Replaced 123 with -5 */
  -5;

  for (let i = 0; i < 456; i++) {
    a +=
    /* NumberMutator: Replaced 1 with -4 */
    -4;
  }

  let b =
  /* NumberMutator: Replaced 0 with -3 */
  -3;

  while (b < 10) {
    b += 2;
  }

  a +=
  /* NumberMutator: Replaced 1 with -5 */
  -5;
}

var a = {
  /* NumberMutator: Replaced 0 with 4 */
  4: "",

  /* NumberMutator: Replaced 1 with 3 */
  3: "",

  get
  /* NumberMutator: Replaced 1 with 5 */
  5() {}

};
var b =
/* NumberMutator: Replaced -10 with -4 */
-4;
                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_objects.js                         0000664 0000000 0000000 00000002044 14746647661 0027144 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Empty objects are not manipulated.
a = {};
a = {};
a = {};
a = {};
a = {};
a = {};

// Small objects only get some mutations.
a = {1: 0};
a = {a: 0};
a = {"s": 0};
a = {1: 0};
a = {a: 0};
a = {"s": 0};

// Larger objects get all mutations.
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};
a = {1: "a", 2: "b", 3: "c"};

// Getters and setters are ignored.
a = {get bar() { return 0 }, 1: 0, set bar(t) {}};
a = {get bar() { return 0 }, 1: 0, set bar(t) {}};
a = {get bar() { return 0 }, 1: 0, set bar(t) {}};

// Recursive.
a = {1: {4: "4", 5: "5", 6: "6"}, 2: {3: "3"}};
a = {1: {4: "4", 5: "5", 6: "6"}, 2: {3: "3"}};
a = {1: {4: "4", 5: "5", 6: "6"}, 2: {3: "3"}};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_objects_expected.js                0000664 0000000 0000000 00000004247 14746647661 0031034 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mutate_objects.js
a = {};
a = {};
a = {};
a = {};
a = {};
a = {};
a =
/* ObjectMutator: Insert a random value */
{
  1: ""
};
a = {
  a: 0
};
a =
/* ObjectMutator: Insert a random value */
{
  "s": ""
};
a =
/* ObjectMutator: Stringify a property key */
{
  "1": 0
};
a =
/* ObjectMutator: Remove a property */
{};
a = {
  "s": 0
};
a =
/* ObjectMutator: Swap properties */
{
  1: "c",
  2: "b",
  3: "a"
};
a =
/* ObjectMutator: Remove a property */
{
  2: "b",
  3: "c"
};
a =
/* ObjectMutator: Insert a random value */
{
  1: "a",
  2: "",
  3: "c"
};
a =
/* ObjectMutator: Swap properties */
{
  1: "b",
  2: "a",
  3: "c"
};
a =
/* ObjectMutator: Swap properties */
{
  1: "c",
  2: "b",
  3: "a"
};
a =
/* ObjectMutator: Stringify a property key */
{
  "1": "a",
  2: "b",
  3: "c"
};
a =
/* ObjectMutator: Remove a property */
{
  2: "b",
  3: "c"
};
a =
/* ObjectMutator: Swap properties */
{
  1: "b",
  2: "a",
  3: "c"
};
a =
/* ObjectMutator: Duplicate a property value */
{
  1: "c",
  2: "b",
  3: "c"
};
a =
/* ObjectMutator: Duplicate a property value */
{
  1: "a",
  2: "b",
  3: "b"
};
a = {
  get bar() {
    return 0;
  },

  1: 0,

  set bar(t) {}

};
a =
/* ObjectMutator: Insert a random value */
{
  get bar() {
    return 0;
  },

  1: "",

  set bar(t) {}

};
a =
/* ObjectMutator: Remove a property */
{
  get bar() {
    return 0;
  },

  set bar(t) {}

};
a =
/* ObjectMutator: Duplicate a property value */
{
  1:
  /* ObjectMutator: Remove a property */
  {},
  2:
  /* ObjectMutator: Stringify a property key */
  {
    "3": "3"
  }
};
a =
/* ObjectMutator: Duplicate a property value */
{
  1:
  /* ObjectMutator: Swap properties */
  {
    4: "4",
    5: "6",
    6: "5"
  },
  2:
  /* ObjectMutator: Remove a property */
  {
    5: "5",
    6: "6"
  }
};
a =
/* ObjectMutator: Duplicate a property value */
{
  1:
  /* ObjectMutator: Swap properties */
  {
    4: "6",
    5: "5",
    6: "4"
  },
  2:
  /* ObjectMutator: Stringify a property key */
  {
    4: "4",
    5: "5",
    "6": "6"
  }
};
                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_var_or_obj.js                      0000664 0000000 0000000 00000000410 14746647661 0027630 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

let __v_0 = {};
Math.pow(1, 2);
Math.pow(1, 2);
Math.pow(1, 2);
Math.pow(1, 2);
Math.pow(1, 2);
                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_var_or_obj_expected.js             0000664 0000000 0000000 00000002715 14746647661 0031523 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mutate_var_or_obj.js
let __v_0 = {};

/* VariableOrObjectMutator: Random mutation */
delete __getRandomObject(123)[__getRandomProperty(__getRandomObject(123), 123)], __callGC();
__getRandomObject(123)[__getRandomProperty(__getRandomObject(123), 123)], __callGC();
Math.pow(1, 2);

/* VariableOrObjectMutator: Random mutation */
__getRandomObject(123)[__getRandomProperty(__getRandomObject(123), 123)] = 0, __callGC();
Math.pow(1, 2);

/* VariableOrObjectMutator: Random mutation */
__v_0 = __getRandomObject(123), __callGC();
Math.pow(1, 2);

/* VariableOrObjectMutator: Random mutation */
if (__getRandomObject(123) != null && typeof __getRandomObject(123) == "object") Object.defineProperty(__getRandomObject(123), __getRandomProperty(__getRandomObject(123), 123), {
  value: 0
});
Math.pow(1, 2);

/* VariableOrObjectMutator: Random mutation */
if (__getRandomObject(123) != null && typeof __getRandomObject(123) == "object") Object.defineProperty(__getRandomObject(123), __getRandomProperty(__getRandomObject(123), 123), {
  get: function () {
    delete __getRandomObject(123)[__getRandomProperty(__getRandomObject(123), 123)], __callGC();
    return 0;
  },
  set: function (value) {
    __getRandomObject(123)[__getRandomProperty(__getRandomObject(123), 123)], __callGC();
  }
});
Math.pow(1, 2);
                                                   node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_variables.js                       0000664 0000000 0000000 00000001240 14746647661 0027460 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

function __f_0(__v_10, __v_11) {
    let __v_4 = 4;
    let __v_5 = 5;
    let __v_6 = 6;
    let __v_7 = 7;
    console.log(__v_4);
    console.log(__v_5);
    console.log(__v_6);
    console.log(__v_7);
    for (let __v_9 = 0; __v_9 < 10; __v_9++) {
        console.log(__v_4);
    }
    let __v_8 = 0;
    while (__v_8 < 10) {
        __v_8++;
    }
}
let __v_0 = 1;
let __v_1 = 2;
let __v_2 = 3;
let __v_3 = 4;
console.log(__v_0);
console.log(__v_1);
console.log(__v_2);
console.log(__v_3);
__f_0();
                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutate_variables_expected.js              0000664 0000000 0000000 00000002264 14746647661 0031350 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: mutate_variables.js
function __f_0(__v_10, __v_11) {
  let __v_4 = 4;
  let __v_5 = 5;
  let __v_6 = 6;
  let __v_7 = 7;
  console.log(
  /* VariableMutator: Replaced __v_4 with REPLACED */
  REPLACED);
  console.log(
  /* VariableMutator: Replaced __v_5 with REPLACED */
  REPLACED);
  console.log(
  /* VariableMutator: Replaced __v_6 with REPLACED */
  REPLACED);
  console.log(
  /* VariableMutator: Replaced __v_7 with REPLACED */
  REPLACED);

  for (let __v_9 = 0; __v_9 < 10; __v_9++) {
    console.log(
    /* VariableMutator: Replaced __v_4 with REPLACED */
    REPLACED);
  }

  let __v_8 = 0;

  while (__v_8 < 10) {
    __v_8++;
  }
}

let __v_0 = 1;
let __v_1 = 2;
let __v_2 = 3;
let __v_3 = 4;
console.log(
/* VariableMutator: Replaced __v_0 with REPLACED */
REPLACED);
console.log(
/* VariableMutator: Replaced __v_1 with REPLACED */
REPLACED);
console.log(
/* VariableMutator: Replaced __v_2 with REPLACED */
REPLACED);
console.log(
/* VariableMutator: Replaced __v_3 with REPLACED */
REPLACED);

__f_0();
                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutation_order/                           0000775 0000000 0000000 00000000000 14746647661 0026631 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutation_order/input.js                   0000664 0000000 0000000 00000000573 14746647661 0030333 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2022 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var i = 1;
var j = 'str';
var k = undefined;
var l = {0: 1};

function foo(a, b) {
  return a + b;
}

foo(i, 3);

function bar(a) {
  return foo(a, a);
}

foo('foo', j);
bar(2, foo(i, j));
foo(i, j);
bar(j, 3);
                                                                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/mutation_order/output_expected.js         0000664 0000000 0000000 00000004123 14746647661 0032410 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Script mutator: using shuffled mutators
// Script mutator: extra ArrayMutator
// Script mutator: extra VariableMutator
// Script mutator: extra ExpressionMutator
// Script mutator: extra ArrayMutator

// Original: mutation_order/input.js
try {
  var __v_0 =
  /* NumberMutator: Replaced 1 with -10 */
  -10;
} catch (e) {}

try {
  var __v_1 = 'str';
} catch (e) {}

try {
  var __v_2 = undefined;
} catch (e) {}

try {
  var __v_3 = {
    /* NumberMutator: Replaced 0 with 8 */
    8:
    /* NumberMutator: Replaced 1 with 3 */
    3
  };
} catch (e) {}

function __f_0(__v_4, __v_5) {
  return __v_4 + __v_5;
}

try {
  %PrepareFunctionForOptimization(__f_0);
} catch (e) {}

try {
  __f_0(__v_0,
  /* NumberMutator: Replaced 3 with 5 */
  5);
} catch (e) {}

try {
  __f_0(__v_0,
  /* NumberMutator: Replaced 3 with NaN */
  NaN);
} catch (e) {}

try {
  %OptimizeFunctionOnNextCall(__f_0);
} catch (e) {}

try {
  /* FunctionCallMutator: Optimizing __f_0 */
  __f_0(__v_0,
  /* NumberMutator: Replaced 3 with 2 */
  2);
} catch (e) {}

function __f_1(__v_6) {
  return (
    /* FunctionCallMutator: Replaced __f_0 with __f_0 */
    __f_0(__v_6, __v_6)
  );
}

try {
  %PrepareFunctionForOptimization(__f_0);
} catch (e) {}

try {
  __f_0('foo', __v_1);
} catch (e) {}

try {
  __f_0('foo', __v_1);
} catch (e) {}

try {
  %OptimizeFunctionOnNextCall(__f_0);
} catch (e) {}

try {
  /* FunctionCallMutator: Optimizing __f_0 */
  __f_0('foo', __v_1);
} catch (e) {}

try {
  /* FunctionCallMutator: Compiling baseline __f_1 */
  %CompileBaseline(__f_1);
} catch (e) {}

try {
  __f_1(
  /* NumberMutator: Replaced 2 with -10 */
  -10, __f_0(__v_0, __v_1));
} catch (e) {}

try {
  /* FunctionCallMutator: Deoptimizing __f_0 */
  __f_0(__v_0, __v_1);
} catch (e) {}

try {
  %DeoptimizeFunction(__f_0);
} catch (e) {}

try {
  /* FunctionCallMutator: Replaced __f_1 with __f_1 */
  __f_1(__v_1,
  /* NumberMutator: Replaced 3 with 16 */
  16);
} catch (e) {}
                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/normalize.js                              0000664 0000000 0000000 00000000616 14746647661 0026137 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

class Class {
  constructor() {
    this.abc = 789;
    this.selfRef = Class;
  }
}

function foo() {
  let a = 123;
  console.log(a);
}

foo();
let a = 456;
console.log(a);
let b = new Class();
console.log(b.abc);
                                                                                                                  node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/normalize_expected_0.js                   0000664 0000000 0000000 00000000710 14746647661 0030232 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

// Original: normalize.js
class __c_0 {
  constructor() {
    this.abc = 789;
    this.selfRef = __c_0;
  }

}

function __f_0() {
  let __v_2 = 123;
  console.log(__v_2);
}

__f_0();

let __v_0 = 456;
console.log(__v_0);

let __v_1 = new __c_0();

console.log(__v_1.abc);
                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/normalize_expected_1.js                   0000664 0000000 0000000 00000000710 14746647661 0030233 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

// Original: normalize.js
class __c_1 {
  constructor() {
    this.abc = 789;
    this.selfRef = __c_1;
  }

}

function __f_1() {
  let __v_5 = 123;
  console.log(__v_5);
}

__f_1();

let __v_3 = 456;
console.log(__v_3);

let __v_4 = new __c_1();

console.log(__v_4.abc);
                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/                                  0000775 0000000 0000000 00000000000 14746647661 0025250 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/contradictions/                   0000775 0000000 0000000 00000000000 14746647661 0030273 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/contradictions/input1.js          0000664 0000000 0000000 00000000272 14746647661 0032052 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2024 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --flag1
                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/contradictions/input2.js          0000664 0000000 0000000 00000000272 14746647661 0032053 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2024 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Flags: --flag2
                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/empty_db/                         0000775 0000000 0000000 00000000000 14746647661 0027053 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/empty_db/index.json               0000664 0000000 0000000 00000000003 14746647661 0031046 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/numbers/                          0000775 0000000 0000000 00000000000 14746647661 0026723 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/numbers/input_indices.js          0000664 0000000 0000000 00000000342 14746647661 0032115 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

let a = {
  0: "",
  1: "",
  2: "",
  3: "",
  4: "",
};
                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/numbers/input_negative.js         0000664 0000000 0000000 00000000314 14746647661 0032300 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

foo(-1);
foo(-1);
foo(-1);
foo(-1);
                                                                                                                                                                                                                                                                                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/spidermonkey/                     0000775 0000000 0000000 00000000000 14746647661 0027761 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/spidermonkey/db/                  0000775 0000000 0000000 00000000000 14746647661 0030346 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/spidermonkey/db/index.json        0000664 0000000 0000000 00000000003 14746647661 0032341 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        {}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/spidermonkey/input.js             0000664 0000000 0000000 00000000302 14746647661 0031451 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

print("Won't see this.");
                                                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/spidermonkey/shell.js             0000664 0000000 0000000 00000000323 14746647661 0031424 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

loadRelativeToScript('PatternAsserts.js');
                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/strict/                           0000775 0000000 0000000 00000000000 14746647661 0026560 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/strict/input_delete.js            0000664 0000000 0000000 00000000271 14746647661 0031577 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

var x;
delete x;
                                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/strict/input_strict.js            0000664 0000000 0000000 00000000307 14746647661 0031645 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

"use strict";

print("Hello");
                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/regress/strict/input_with.js              0000664 0000000 0000000 00000000305 14746647661 0031306 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

with (Math) {
  print(PI);
}
                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/simple_test.js                            0000664 0000000 0000000 00000004047 14746647661 0026471 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Test comment.
// Flags: --gc-interval = 1
var abs = Math.abs;
var v1 = 5, v2; var v3;
if (v1) {
  var v4 = 3;
  for (var v5 = 0; v5 < 4; v5++) {
    console.log('Value of v5: ' +
                v5);
  }
}
let v6 = 3;
const v7 = 5 + \u{0076}6;
v1 = {['p' + v6]: ''};
v1 = `test\`
value is ${ v6 + v7 }` + '\0\400\377'
v1 = (v8=2, {v9 = eval('v8')},) => { return v8 + v9 + 4; };
v1 = () => 4 + 5;
v1 = v10 => { return v10 + 4; }
v1 = async v11 => v11 + 4;
v12 = [0, 1, 2,];
v13 = [3, 4, 5];
v14 = [...v12, ...v13];
v15 = ([v16, v17] = [1, 2], {v31: v18} = {v31: v16 + v17}) => v16 + v17 + v18;
v16 = 170%16/16 + 2**32;
v17 = 0o1 + 0O1 + 01 + 0b011 + 0B011;
for (var v18 of [1, 2, 3]) console.log(v18);
function f1(v19,) {}
f1();
%OptimizeFunctionOnNextCall(f1);
function f2() {
  var v20 = 5;
  return v20 + 6;
}
(async function f3() {
  var v21 = await 1;
  console.log(v21);
})();
function* f4(v22=2, ...v23) {
  yield* [1, 2, 3];
}
function* f5() { (yield 3) + (yield); }
{ function f6() { } }
v23 = { v6, [v6]: 3, f7() { }, get f8 () { }, *f9 () { }, async f10 () { } }
var [v24, v25, ...v26] = [10, 20], {v27, v28} = {v27: 10, v28: 20};
class c1 {
  f11(v29) {
    return v29 + 1;
  }
  static* f12() {
    yield 'a' + super.f12();
  }
  constructor(v30) {
    console.log(new.target.name);
  }
  [0]() { }
}
class c2 extends c1 { }
do ; while(0);
v16 **= 4;
for (const v32 = 1; v32 < 1;);
for (let v33 = 1; v33 < 5; v33++);
for (var v34 = 1; v34 < 5; v34++);
for (const {v35 = 0, v36 = 3} = {}; v36 < 1;);
for (let {v37 = 0, v38 = 3} = {}; v38 != 0; v38--);
for (var {v39 = 0, v40 = 3} = {}; v40 != 0; v40--);
for (const v41 of [1, 2, 3]);
for (let v42 of [1, 2, 3]);
for (var v43 of [1, 2, 3]);
for (const v44 in [1, 2, 3]);
for (let v45 in [1, 2, 3]);
for (var v46 in [1, 2, 3]);
label: function f13() { }

var a = function b() {
  b();
};

var c = class C {
  constructor() {
    console.log(C.name);
  }
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/simple_test_expected.js                   0000664 0000000 0000000 00000004773 14746647661 0030360 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: simple_test.js
var __v_0 = Math.abs;

var __v_1 = 5,
    __v_2;

var __v_3;

if (__v_1) {
  var __v_4 = 3;

  for (var __v_5 = 0; __v_5 < 4; __v_5++) {
    console.log('Value of v5: ' + __v_5);
  }
}

let __v_6 = 3;

const __v_7 = 5 + __v_6;

__v_1 = {
  ['p' + __v_6]: ''
};
__v_1 = `test\`
value is ${__v_6 + __v_7}` + '\0\400\377';

__v_1 = (__v_21 = 2, {
  v9: __v_22 = eval('v8')
}) => {
  return __v_21 + __v_22 + 4;
};

__v_1 = () => 4 + 5;

__v_1 = __v_23 => {
  return __v_23 + 4;
};

__v_1 = async __v_24 => __v_24 + 4;

__v_25 = [0, 1, 2];
__v_26 = [3, 4, 5];
__v_27 = [...__v_25, ...__v_26];

__v_28 = ([__v_29, __v_30] = [1, 2], {
  v31: __v_31
} = {
  v31: __v_29 + __v_30
}) => __v_29 + __v_30 + __v_31;

__v_42 = 170 % 16 / 16 + 2 ** 32;
__v_33 = 0o1 + 0O1 + 01 + 0b011 + 0B011;

for (var __v_8 of [1, 2, 3]) console.log(__v_8);

function __f_0(__v_34) {}

__f_0();

%OptimizeFunctionOnNextCall(__f_0);

function __f_1() {
  var __v_35 = 5;
  return __v_35 + 6;
}

(async function __f_5() {
  var __v_36 = await 1;

  console.log(__v_36);
})();

function* __f_2(__v_37 = 2, ...__v_38) {
  yield* [1, 2, 3];
}

function* __f_3() {
  (yield 3) + (yield);
}

{
  function __f_6() {}
}
__v_39 = {
  v6: __v_6,
  [__v_6]: 3,

  f7() {},

  get f8() {},

  *f9() {},

  async f10() {}

};
var [__v_9, __v_10, ...__v_11] = [10, 20],
    {
  v27: __v_12,
  v28: __v_13
} = {
  v27: 10,
  v28: 20
};

class __c_0 {
  f11(__v_40) {
    return __v_40 + 1;
  }

  static *f12() {
    yield 'a' + super.f12();
  }

  constructor(__v_41) {
    console.log(new.target.name);
  }

  [0]() {}

}

class __c_1 extends __c_0 {}

do ; while (0);

__v_42 **= 4;

for (const __v_43 = 1; __v_43 < 1;);

for (let __v_44 = 1; __v_44 < 5; __v_44++);

for (var __v_14 = 1; __v_14 < 5; __v_14++);

for (const {
  v35: __v_45 = 0,
  v36: __v_46 = 3
} = {}; __v_46 < 1;);

for (let {
  v37: __v_47 = 0,
  v38: __v_48 = 3
} = {}; __v_48 != 0; __v_48--);

for (var {
  v39: __v_15 = 0,
  v40: __v_16 = 3
} = {}; __v_16 != 0; __v_16--);

for (const __v_49 of [1, 2, 3]);

for (let __v_50 of [1, 2, 3]);

for (var __v_17 of [1, 2, 3]);

for (const __v_51 in [1, 2, 3]);

for (let __v_52 in [1, 2, 3]);

for (var __v_18 in [1, 2, 3]);

label: function __f_4() {}

var __v_19 = function __f_7() {
  __f_7();
};

var __v_20 = class __c_2 {
  constructor() {
    console.log(__c_2.name);
  }

};
     node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/                             0000775 0000000 0000000 00000000000 14746647661 0026307 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/load1.js                     0000664 0000000 0000000 00000000301 14746647661 0027637 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

console.log('load1.js');
                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/shell.js                     0000664 0000000 0000000 00000000422 14746647661 0027752 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

console.log('/shell.js');
if (!ok)
  throw new Error(`assertion failed: ${f} did not throw as expected`);
                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/test/                        0000775 0000000 0000000 00000000000 14746647661 0027266 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/test/load.js                 0000664 0000000 0000000 00000000652 14746647661 0030546 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

load('load1.js');
loadRelativeToScript('load2.js');
console.log('load.js');

if (!ok)
  throw new Error(`Assertion failed: Some text`);

print("Assertion failed: Some text");

// Check that we can load template literals with null cooked value.
check()`\01`;
                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/test/load2.js                0000664 0000000 0000000 00000000301 14746647661 0030617 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

console.log('load2.js');
                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/test/load_expected.js        0000664 0000000 0000000 00000001247 14746647661 0032430 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: spidermonkey/shell.js
console.log('/shell.js');
if (!ok) throw new Error(`*****tion failed: ${f} did not throw as expected`);

// Original: spidermonkey/test/shell.js
console.log('/test/shell.js');

// Original: spidermonkey/load1.js
console.log('load1.js');

// Original: spidermonkey/test/load2.js
console.log('load2.js');

// Original: spidermonkey/test/load.js
console.log('load.js');
if (!ok) throw new Error(`*****tion failed: Some text`);
print("*****tion failed: Some text");
check()`\01`;
                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/spidermonkey/test/shell.js                0000664 0000000 0000000 00000000307 14746647661 0030733 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

console.log('/test/shell.js');
                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/try_catch.js                              0000664 0000000 0000000 00000001131 14746647661 0026110 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

function blah() {
  try {
    var a = 10;
    console.log(a);
  } catch (e) {}

  label: for (var i = 0; i < 100; i++) {
    var b = 0;
    while (b < 10) {
      console.log(b);
      b += 2;
      continue label;
    }
  }
}

blah();
blah();

(function () {1;1;})();

if (true) {
  2;2;
} else {
  3;3;
}

let a = 0;
switch (a) {
  case 1: 1;
}

with (Math) {
  cos(PI);
}

let module = new WebAssembly.Module(builder.toBuffer());
                                                                                                                                                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/try_catch_alternate_expected.js           0000664 0000000 0000000 00000001331 14746647661 0032032 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/* AddTryCatchMutator: Target skip probability 0.9 and toplevel probability 0.9 */

// Original: try_catch.js
function blah() {
  try {
    var a = 10;
    console.log(a);
  } catch (e) {}

  label: for (var i = 0; i < 100; i++) {
    var b = 0;

    while (b < 10) {
      console.log(b);
      b += 2;
      continue label;
    }
  }
}

blah();
blah();

(function () {
  1;
  1;
})();

if (true) {
  2;
  2;
} else {
  3;
  3;
}

let a = 0;

switch (a) {
  case 1:
    1;
}

with (Math) {
  cos(PI);
}
let module = new WebAssembly.Module(builder.toBuffer());
                                                                                                                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/try_catch_expected.js                     0000664 0000000 0000000 00000002562 14746647661 0030002 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: try_catch.js
function blah() {
  try {
    try {
      var a = 10;
    } catch (e) {}

    try {
      console.log(a);
    } catch (e) {}
  } catch (e) {}

  try {
    label: for (var i = 0; i < 100; i++) {
      try {
        var b = 0;
      } catch (e) {}

      try {
        while (b < 10) {
          try {
            console.log(b);
          } catch (e) {}

          try {
            b += 2;
          } catch (e) {}

          continue label;
        }
      } catch (e) {}
    }
  } catch (e) {}
}

try {
  blah();
} catch (e) {}

try {
  blah();
} catch (e) {}

try {
  (function () {
    try {
      1;
    } catch (e) {}

    try {
      1;
    } catch (e) {}
  })();
} catch (e) {}

try {
  if (true) {
    try {
      2;
    } catch (e) {}

    try {
      2;
    } catch (e) {}
  } else {
    try {
      3;
    } catch (e) {}

    try {
      3;
    } catch (e) {}
  }
} catch (e) {}

let a = 0;

try {
  switch (a) {
    case 1:
      try {
        1;
      } catch (e) {}

  }
} catch (e) {}

try {
  with (Math) {
    try {
      cos(PI);
    } catch (e) {}
  }
} catch (e) {}

let module = function () {
  try {
    return new WebAssembly.Module(builder.toBuffer());
  } catch (e) {}
}();
                                                                                                                                              node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/try_catch_nothing_expected.js             0000664 0000000 0000000 00000001205 14746647661 0031521 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: try_catch.js
function blah() {
  try {
    var a = 10;
    console.log(a);
  } catch (e) {}

  label: for (var i = 0; i < 100; i++) {
    var b = 0;

    while (b < 10) {
      console.log(b);
      b += 2;
      continue label;
    }
  }
}

blah();
blah();

(function () {
  1;
  1;
})();

if (true) {
  2;
  2;
} else {
  3;
  3;
}

let a = 0;

switch (a) {
  case 1:
    1;
}

with (Math) {
  cos(PI);
}
let module = new WebAssembly.Module(builder.toBuffer());
                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_data/try_catch_toplevel_expected.js            0000664 0000000 0000000 00000001714 14746647661 0031712 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Original: try_catch.js
function blah() {
  try {
    try {
      var a = 10;
    } catch (e) {}

    try {
      console.log(a);
    } catch (e) {}
  } catch (e) {}

  try {
    label: for (var i = 0; i < 100; i++) {
      var b = 0;

      while (b < 10) {
        console.log(b);
        b += 2;
        continue label;
      }
    }
  } catch (e) {}
}

try {
  blah();
} catch (e) {}

try {
  blah();
} catch (e) {}

try {
  (function () {
    1;
    1;
  })();
} catch (e) {}

try {
  if (true) {
    2;
    2;
  } else {
    3;
    3;
  }
} catch (e) {}

let a = 0;

try {
  switch (a) {
    case 1:
      1;
  }
} catch (e) {}

try {
  with (Math) {
    cos(PI);
  }
} catch (e) {}

let module = function () {
  try {
    return new WebAssembly.Module(builder.toBuffer());
  } catch (e) {}
}();
                                                    node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/test_db.js                                          0000664 0000000 0000000 00000004032 14746647661 0023607 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * @fileoverview Test all expressions in DB.
 */

const fs = require('fs');
const fsPath = require('path');
const program = require('commander');
const sinon = require('sinon');

const crossOverMutator = require('./mutators/crossover_mutator.js');
const db = require('./db.js');
const random = require('./random.js');
const sourceHelpers = require('./source_helpers.js');

const sandbox = sinon.createSandbox();

function main() {
  program
    .version('0.0.1')
    .option('-i, --input_dir <path>', 'DB directory.')
    .parse(process.argv);

  if (!program.input_dir) {
    console.log('Need to specify DB dir.');
    return;
  }

  const mutateDb = new db.MutateDb(program.input_dir);
  const mutator = new crossOverMutator.CrossOverMutator(
      { MUTATE_CROSSOVER_INSERT: 1.0, testing: true }, mutateDb);

  let nPass = 0;
  let nFail = 0;
  // Iterate over all statements saved in the DB.
  for (const statementPath of mutateDb.index.all) {
    const expression = JSON.parse(fs.readFileSync(
        fsPath.join(program.input_dir, statementPath)), 'utf-8');
    // Stub out choosing random variables in cross-over mutator.
    sandbox.stub(random, 'single').callsFake((a) => { return a[0]; });
    // Ensure we are selecting the statement of the current iteration.
    sandbox.stub(mutateDb, 'getRandomStatement').callsFake(
        () => { return expression; });
    // Use a source that will try to insert one statement, allowing
    // super.
    const source = sourceHelpers.loadSource(
        __dirname,
        'test_data/cross_over_mutator_class_input.js');
    try {
      mutator.mutate(source);
      nPass++;
    } catch (e) {
      console.log('******************************************************')
      console.log(expression);
      console.log(e.message);
      nFail++;
    }
    sandbox.restore();
  }
  console.log(`Result: ${nPass} passed, ${nFail} failed.`)
}

main();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/tools/                                              0000775 0000000 0000000 00000000000 14746647661 0022766 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/tools/fuzz_one.py                                   0000664 0000000 0000000 00000002461 14746647661 0025202 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


"""
Helper script to execute a single-processed fuzzing session.

Creates fuzz tests in workdir/output/dir-<dir number>/fuzz-XXX.js.
Expects the <dir number> as single parameter.
"""

import os
import subprocess
import sys
import time

BASE_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
APP_DIR = os.path.join(BASE_PATH, 'workdir', 'app_dir')
FUZZ_EXE = os.path.join(BASE_PATH, 'workdir', 'fuzzer', 'ochang_js_fuzzer')
INPUT_DIR = os.path.join(BASE_PATH, 'workdir', 'input')
TEST_CASES = os.path.join(BASE_PATH, 'workdir', 'output')

COUNT = 64
FUZZ = ('FUZZ_MODE=foozzie APP_NAME=d8 APP_DIR=%s %s -o %%s -n %s -i %s > %%s'
        % (APP_DIR, FUZZ_EXE, COUNT, INPUT_DIR))

assert(len(sys.argv) > 1)
dir_number = int(sys.argv[1])
assert(dir_number >= 0)

path = os.path.join(TEST_CASES, 'dir-%d' % dir_number)
assert not os.path.exists(path), 'Need fresh workdir for fuzzing'
os.makedirs(path)

start = time.time()
subprocess.check_call(
    FUZZ % (path, os.path.join(path, 'out.log')), shell=True)
duration = int(time.time() - start)

with open(os.path.join(path, 'duration.log'), 'w') as f:
  f.write(str(duration))
                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/tools/minimize.py                                   0000664 0000000 0000000 00000002471 14746647661 0025165 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


"""
Helper script to forge a command line for clusterfuzz' minimizer for
each failure found during a fuzzing session with workbench.py.

Expects the path to the minimizer tools, e.g. something like:
path/to/src/python/bot/minimizer
"""

import json
from multiprocessing import cpu_count
import os
import sys

PROCESSES = cpu_count()
BASE_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
OUT_PATH = os.path.join(BASE_PATH, 'out.js')
FAILURES_JSON_PATH = os.path.join(
    BASE_PATH, 'workdir', 'output', 'failures.json')

assert len(sys.argv) > 1, 'Need to specify minimizer path.'
minimizer_path = sys.argv[1]

def getcmd(command):
  parts = command.split(' ')
  prefix = command[:-(len(parts[-1]) + 1)]
  return ('python %s/run.py -t%d -mjs -o %s "%s" %s' %
          (minimizer_path, PROCESSES, OUT_PATH, prefix, parts[-1]))

with open(FAILURES_JSON_PATH) as f:
  failures = json.load(f)

for failure in failures:
  print('*********************************************************')
  print('Source: ' + failure['source'])
  print('Command:')
  print(failure['command'])
  print('Minimize:')
  print(getcmd(failure['command']))
                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/tools/run_one.py                                    0000664 0000000 0000000 00000005755 14746647661 0025021 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


"""
Helper script to execute fuzz tests in a single process.

Expects fuzz tests in workdir/output/dir-<dir number>/fuzz-XXX.js.
Expects the <dir number> as single parameter.
"""

import json
import os
import random
import re
import subprocess
import sys

BASE_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
FOOZZIE = os.path.join(BASE_PATH, 'workdir', 'app_dir', 'v8_foozzie.py')
TEST_CASES = os.path.join(BASE_PATH, 'workdir', 'output')

assert os.path.exists(FOOZZIE)

# Output pattern from foozzie.py when it finds a failure.
FAILURE_RE = re.compile(
    r'# V8 correctness failure.'
    r'# V8 correctness configs: (?P<configs>.*).'
    r'# V8 correctness sources: (?P<source>.*).'
    r'# V8 correctness suppression:.*', re.S)

assert(len(sys.argv) > 1)
dir_number = int(sys.argv[1])
assert(dir_number >= 0)

test_dir = os.path.join(TEST_CASES, 'dir-%d' % dir_number)
assert os.path.exists(test_dir)

def failure_state(command, stdout):
  return dict(FAILURE_RE.search(stdout).groupdict(), command=command)

def random_seed():
  """Returns random, non-zero seed."""
  seed = 0
  while not seed:
    seed = random.SystemRandom().randint(-2147483648, 2147483647)
  return seed

def run(fuzz_file, flag_file):
  """Executes the differential-fuzzing harness foozzie with one fuzz test."""
  with open(flag_file) as f:
    flags = f.read().split(' ')
  args = [FOOZZIE, '--random-seed=%d' % random_seed()] + flags + [fuzz_file]
  cmd = ' '.join(args)
  try:
    output = subprocess.check_output(cmd, stderr=subprocess.PIPE, shell=True)
    return (cmd, output.decode('utf-8'))
  except Exception as e:
    return (cmd, e.output.decode('utf-8'))


def list_tests():
  """Iterates all fuzz tests and corresponding flags in the given base dir."""
  for f in os.listdir(test_dir):
    if f.startswith('fuzz'):
      n = int(re.match(r'fuzz-(\d+)\.js', f).group(1))
      ff = 'flags-%d.js' % n
      yield (os.path.join(test_dir, f), os.path.join(test_dir, ff))

# Some counters for the statistics.
count = 0
count_timeout = 0
count_crash = 0
count_failure = 0
failures = []

# Execute all tests in the given directory. Interpret foozzie's output and add
# it to the statistics.
for fuzz_file, flag_file in list_tests():
  cmd, output = run(fuzz_file, flag_file)
  count += 1
  if '# V8 correctness - pass' in output:
    continue
  if '# V8 correctness - T-I-M-E-O-U-T' in output:
    count_timeout += 1
    continue
  if '# V8 correctness - C-R-A-S-H' in output:
    count_crash += 1
    continue
  count_failure += 1
  failures.append(failure_state(cmd, output))

with open(os.path.join(test_dir, 'failures.json'), 'w') as f:
  json.dump(failures, f)

stats = {
  'total': count,
  'timeout': count_timeout,
  'crash': count_crash,
  'failure': count_failure,
}

with open(os.path.join(test_dir, 'stats.json'), 'w') as f:
  json.dump(stats, f)
                   node-23.7.0/deps/v8/tools/clusterfuzz/js_fuzzer/tools/workbench.py                                  0000664 0000000 0000000 00000007033 14746647661 0025325 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.


"""
Tool to execute multiprocessed fuzzing and testing sessions.

Expects a single parameter with the number of sessions.

Regularly updates a stats.json and failures.json during executions. E.g.
stay up-to-date with:
cat workdir/output/stats.json | python -m json.tool
"""

# TODO(machenbach): This is currently tailored for differential fuzzing
# with foozzie. It could be generalized, but that'd require duplicating
# clusterfuzz' stack analysis to some degree. E.g. understanding asan
# or DCHECK failures.

from __future__ import print_function

import json
from multiprocessing import Pool, cpu_count
import os
import subprocess
import sys

PROCESSES = cpu_count()
BASE_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEST_CASES = os.path.join(BASE_PATH, 'workdir', 'output')
FUZZ_ONE = os.path.join(BASE_PATH, 'tools', 'fuzz_one.py')
RUN_ONE = os.path.join(BASE_PATH, 'tools', 'run_one.py')

os.chdir(BASE_PATH)

if os.path.exists(TEST_CASES):
  if not os.path.isdir(TEST_CASES) or os.listdir(TEST_CASES):
    sys.exit("'output' must be an empty directory")
else:
  os.mkdir(TEST_CASES)

# Use ~40000 for 24 hours of fuzzing on a modern work station.
RUNS = 8
if len(sys.argv) > 1:
  RUNS = int(sys.argv[1])

def run(n):
  """Multiprocessed function that executes a single fuzz session and
  afterwards executes all fuzz tests and collects the statistics.

  Args:
    n: Subdirectory index of this run.
  """
  subprocess.check_call([sys.executable, FUZZ_ONE, str(n)])
  subprocess.check_call([sys.executable, RUN_ONE, str(n)])
  test_dir = os.path.join(TEST_CASES, 'dir-%d' % n)
  with open(os.path.join(test_dir, 'stats.json')) as f:
    stats = json.load(f)
  with open(os.path.join(test_dir, 'failures.json')) as f:
    failures = json.load(f)
  return (stats, failures)


class Stats(object):
  def __init__(self):
    self.total = 0
    self.crash = 0
    self.timeout = 0
    self.failure = 0
    self.dupe = 0
    self.failures = []
    self.known_states = set()

  def add(self, stats, failures):
    # Aggregate common stats.
    self.total += stats['total']
    self.crash += stats['crash']
    self.timeout += stats['timeout']

    # Dedupe failures.
    for failure in failures:
      if failure['source'] in self.known_states:
        self.dupe += 1
        continue

      self.known_states.add(failure['source'])
      self.failure += 1
      self.failures.append(failure)

  @property
  def stats(self):
    return {
      'total': self.total,
      'crash': self.crash,
      'failure': self.failure,
      'dupe': self.dupe,
      'timeout': self.timeout,
    }

all_stats = Stats()
count = 0
pool = Pool(processes=PROCESSES)

# Iterate over all runs multiprocessed and merge the statistics and
# failure data of the single runs.
for stats, failures in pool.imap_unordered(run, range(RUNS)):
  all_stats.add(stats, failures)
  count += 1
  if count % max(1, int(RUNS / 20)) == 0:
    print('Progress: %d runs (%d%%)' % (count, count * 100 / RUNS))

  # Update overall stats.
  with open(os.path.join(TEST_CASES, 'stats.json'), 'w') as f:
    json.dump(all_stats.stats, f)
  with open(os.path.join(TEST_CASES, 'failures.json'), 'w') as f:
    json.dump(all_stats.failures, f)

print('Ran %(total)d test cases (%(timeout)d timeouts, '
      '%(crash)d crashes, %(failure)d failures, %(dupe)d dupes)'
      % all_stats.stats)

for failure in all_stats.failures:
  print(failure)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/clusterfuzz/trials/                                                       0000775 0000000 0000000 00000000000 14746647661 0021103 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/clusterfuzz/trials/BUILD.gn                                               0000664 0000000 0000000 00000000460 14746647661 0022270 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2022 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

copy("v8_clusterfuzz_resources") {
  sources = [ "clusterfuzz_trials_config.json" ]
  outputs = [ "$root_out_dir/{{source_file_part}}" ]
}
                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/clusterfuzz/trials/PRESUBMIT.py                                           0000664 0000000 0000000 00000005424 14746647661 0023034 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2022 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import json

# This line is 'magic' in that git-cl looks for it to decide whether to
# use Python3 instead of Python2 when running the code in this file.
USE_PYTHON3 = True


def _CheckTrialsConfig(input_api, output_api):
  def FilterFile(affected_file):
    return input_api.FilterSourceFile(
        affected_file,
        files_to_check=(r'.+clusterfuzz_trials_config\.json',))

  results = []
  for f in input_api.AffectedFiles(
      file_filter=FilterFile, include_deletes=False):
    with open(f.AbsoluteLocalPath()) as j:
      try:
        trials = json.load(j)
        mandatory_properties = {'app_args', 'app_name', 'probability'}
        optional_properties = {'contradicts'}
        all_properties = mandatory_properties.union(optional_properties)
        for trial in trials:
          trial_keys = set(trial.keys())
          if not mandatory_properties.issubset(trial_keys):
            results.append('trial {} does not have mandatory propertie(s) {}'.format(trial, mandatory_properties - trial_keys))
          if not trial_keys.issubset(all_properties):
            results.append('trial {} has incorrect propertie(s) {}'.format(trial, trial_keys - all_properties))
          if trial['app_name'] != 'd8':
            results.append('trial {} has an incorrect app_name'.format(trial))
          if not isinstance(trial['probability'], float):
            results.append('trial {} probability is not a float'.format(trial))
          if not (0 <= trial['probability'] <= 1):
            results.append(
                'trial {} has invalid probability value'.format(trial))
          if not isinstance(trial['app_args'], str) or not trial['app_args']:
            results.append(
                'trial {} should have a non-empty string for app_args'.format(
                    trial))
          contradicts = trial.get('contradicts', [])
          if not isinstance(contradicts, list) or not all(
              isinstance(cont, str) for cont in contradicts):
              results.append(
                'trial {} contradicts is not a list of strings'.format(trial))
      except Exception as e:
        results.append(
            'JSON validation failed for %s. Error:\n%s' % (f.LocalPath(), e))

  return [output_api.PresubmitError(r) for r in results]

def _CommonChecks(input_api, output_api):
  """Checks common to both upload and commit."""
  checks = [
    _CheckTrialsConfig,
  ]

  return sum([check(input_api, output_api) for check in checks], [])

def CheckChangeOnCommit(input_api, output_api):
  return _CommonChecks(input_api, output_api)

def CheckChangeOnUpload(input_api, output_api):
  return _CommonChecks(input_api, output_api)
                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/clusterfuzz/trials/README.md                                              0000664 0000000 0000000 00000001167 14746647661 0022367 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        It is possible to add trials from the source code side by adding the below line
to `clusterfuzz_trials_config.json`:

```
{
  "app_args": "FLAG_NAME",
  "app_name": "APP_NAME",
  "probability": PROBABILITY,
  "contradicts": ["FLAG1", "FLAG2", ...]
}
```

- `app_args`: the name of the flag we want to add.
- `app_name`: the name of the app we are adding the flag for, this must be `d8` on `V8`.
- `probability`: the probability of this flag to be selected.
- `contradicts` (optional): the flags that contradict the flag referred to in `app_args`.
This will stop flags that contradict each other from being added in the same
trial.
                                                                                                                                                                                                                                                                                                                                                                                                         node-23.7.0/deps/v8/tools/clusterfuzz/trials/clusterfuzz_trials_config.json                         0000664 0000000 0000000 00000010656 14746647661 0027311 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        [
    {"app_args": "--assert-types", "app_name": "d8", "probability": 0.25, "contradicts": ["--stress-concurrent-inlining", "--stress-concurrent-inlining-attach-code"]},
    {"app_args": "--force-slow-path", "app_name": "d8", "probability": 0.05},
    {"app_args": "--future", "app_name": "d8", "probability": 0.25},
    {"app_args": "--harmony-struct", "app_name": "d8", "probability": 0.1},
    {"app_args": "--jit-fuzzing", "app_name": "d8", "probability": 0.25},
    {"app_args": "--jitless", "app_name": "d8", "probability": 0.1, "contradicts": ["--maglev-future", "--stress-concurrent-inlining", "--stress-concurrent-inlining-attach-code", "--stress-maglev"]},
    {"app_args": "--maglev", "app_name": "d8", "probability": 0.1, "contradicts": ["--jitless"]},
    {"app_args": "--maglev-future", "app_name": "d8", "probability": 0.05, "contradicts": ["--jitless"]},
    {"app_args": "--minor-ms", "app_name": "d8", "probability": 0.25},
    {"app_args": "--random-gc-interval=2000", "app_name": "d8", "probability": 0.05},
    {"app_args": "--optimize-on-next-call-optimizes-to-maglev", "app_name": "d8", "probability": 0.1},
    {"app_args": "--noanalyze-environment-liveness", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-avx", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-bmi1", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-bmi2", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-fma3", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-lzcnt", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-popcnt", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-sahf", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-sse3", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-sse4_1", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-sse4_2", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-enable-ssse3", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-lazy-feedback-allocation", "app_name": "d8", "probability": 0.35},
    {"app_args": "--no-use-ic", "app_name": "d8", "probability": 0.25},
    {"app_args": "--no-wasm-generic-wrapper", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-liftoff", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-turbofan", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-wasm-tier-up --no-wasm-dynamic-tiering", "app_name": "d8", "probability": 0.1},
    {"app_args": "--regexp-interpret-all", "app_name": "d8", "probability": 0.1},
    {"app_args": "--regexp-tier-up-ticks=0", "app_name": "d8", "probability": 0.1},
    {"app_args": "--regexp-tier-up-ticks=10", "app_name": "d8", "probability": 0.1},
    {"app_args": "--regexp-tier-up-ticks=100", "app_name": "d8", "probability": 0.1},
    {"app_args": "--shared-string-table", "app_name": "d8", "probability": 0.1},
    {"app_args": "--simulate-errors", "app_name": "d8", "probability": 0.001},
    {"app_args": "--stress-compaction-random", "app_name": "d8", "probability": 0.05},
    {"app_args": "--stress-concurrent-inlining", "app_name": "d8", "probability": 0.25, "contradicts": ["--assert-types", "--jitless"]},
    {"app_args": "--stress-concurrent-inlining-attach-code", "app_name": "d8", "probability": 0.05, "contradicts": ["--assert-types", "--jitless"]},
    {"app_args": "--stress-flush-code", "app_name": "d8", "probability": 0.25},
    {"app_args": "--stress-maglev", "app_name": "d8", "probability": 0.05, "contradicts": ["--jitless"]},
    {"app_args": "--stress-marking=100", "app_name": "d8", "probability": 0.05},
    {"app_args": "--stress-scavenge=100", "app_name": "d8", "probability": 0.05},
    {"app_args": "--turboshaft", "app_name": "d8", "probability": 0.2},
    {"app_args": "--turboshaft-from-maglev", "app_name": "d8", "probability": 0.1},
    {"app_args": "--turbo-instruction-scheduling", "app_name": "d8", "probability": 0.1},
    {"app_args": "--turbo-stress-instruction-scheduling", "app_name": "d8", "probability": 0.1},
    {"app_args": "--stress-wasm-code-gc", "app_name": "d8", "probability": 0.1},
    {"app_args": "--lazy", "app_name": "d8", "probability": 0.1},
    {"app_args": "--no-stress-lazy-source-positions", "app_name": "d8", "probability": 0.1},
    {"app_args": "--wasm-staging", "app_name": "d8", "probability": 0.25},
    {"app_args": "--stress-wasm-memory-moving", "app_name": "d8", "probability": 0.1}
]
                                                                                  node-23.7.0/deps/v8/tools/codemap.mjs                                                               0000664 0000000 0000000 00000023163 14746647661 0017335 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import { SplayTree } from "./splaytree.mjs";

/**
* The number of alignment bits in a page address.
*/
const kPageAlignment = 12;
/**
* Page size in bytes.
*/
const kPageSize =  1 << kPageAlignment;

/**
 * Constructs a mapper that maps addresses into code entries.
 */
export class CodeMap {
  /**
   * Dynamic code entries. Used for JIT compiled code.
   */
  dynamics_ = new SplayTree();

  /**
   * Name generator for entries having duplicate names.
   */
  dynamicsNameGen_ = new NameGenerator();

  /**
   * Static code entries. Used for statically compiled code.
   */
  statics_ = new SplayTree();

  /**
   * Libraries entries. Used for the whole static code libraries.
   */
  libraries_ = new SplayTree();

  /**
   * Map of memory pages occupied with static code.
   */
  pages_ = new Set();

  constructor(useBigIntAddresses=false) {
    this.useBigIntAddresses = useBigIntAddresses;
    this.kPageSize = useBigIntAddresses ? BigInt(kPageSize) : kPageSize;
    this.kOne = useBigIntAddresses ? 1n : 1;
    this.kZero = useBigIntAddresses ? 0n : 0;
  }

  /**
   * Adds a code entry that might overlap with static code (e.g. for builtins).
   *
   * @param {number} start The starting address.
   * @param {CodeEntry} codeEntry Code entry object.
   */
  addAnyCode(start, codeEntry) {
    const pageAddr = (start / this.kPageSize) | this.kZero;
    if (!this.pages_.has(pageAddr)) return this.addCode(start, codeEntry);
    // We might have loaded static code (builtins, bytecode handlers)
    // and we get more information later in v8.log with code-creation events.
    // Overwrite the existing entries in this case.
    let result = this.findInTree_(this.statics_, start);
    if (result === null) return this.addCode(start, codeEntry);

    const removedNode = this.statics_.remove(start);
    this.deleteAllCoveredNodes_(
        this.statics_, start, start + removedNode.value.size);
    this.statics_.insert(start, codeEntry);
  }


  /**
   * Adds a dynamic (i.e. moveable and discardable) code entry.
   *
   * @param {number} start The starting address.
   * @param {CodeEntry} codeEntry Code entry object.
   */
  addCode(start, codeEntry) {
    this.deleteAllCoveredNodes_(this.dynamics_, start, start + codeEntry.size);
    this.dynamics_.insert(start, codeEntry);
  }

  /**
   * Moves a dynamic code entry. Throws an exception if there is no dynamic
   * code entry with the specified starting address.
   *
   * @param {number} from The starting address of the entry being moved.
   * @param {number} to The destination address.
   */
  moveCode(from, to) {
    const removedNode = this.dynamics_.remove(from);
    this.deleteAllCoveredNodes_(this.dynamics_, to, to + removedNode.value.size);
    this.dynamics_.insert(to, removedNode.value);
  }

  /**
   * Discards a dynamic code entry. Throws an exception if there is no dynamic
   * code entry with the specified starting address.
   *
   * @param {number} start The starting address of the entry being deleted.
   */
  deleteCode(start) {
    const removedNode = this.dynamics_.remove(start);
  }

  /**
   * Adds a library entry.
   *
   * @param {number} start The starting address.
   * @param {CodeEntry} codeEntry Code entry object.
   */
  addLibrary(start, codeEntry) {
    this.markPages_(start, start + codeEntry.size);
    this.libraries_.insert(start, codeEntry);
  }

  /**
   * Adds a static code entry.
   *
   * @param {number} start The starting address.
   * @param {CodeEntry} codeEntry Code entry object.
   */
  addStaticCode(start, codeEntry) {
    this.statics_.insert(start, codeEntry);
  }

  /**
   * @private
   */
  markPages_(start, end) {
    for (let addr = start; addr <= end; addr += this.kPageSize) {
      this.pages_.add((addr / this.kPageSize) | this.kZero);
    }
  }

  /**
   * @private
   */
  deleteAllCoveredNodes_(tree, start, end) {
    const to_delete = [];
    let addr = end - this.kOne;
    while (addr >= start) {
      const node = tree.findGreatestLessThan(addr);
      if (node === null) break;
      const start2 = node.key, end2 = start2 + node.value.size;
      if (start2 < end && start < end2) to_delete.push(start2);
      addr = start2 - this.kOne;
    }
    for (let i = 0, l = to_delete.length; i < l; ++i) tree.remove(to_delete[i]);
  }

  /**
   * @private
   */
  isAddressBelongsTo_(addr, node) {
    return addr >= node.key && addr < (node.key + node.value.size);
  }

  /**
   * @private
   */
  findInTree_(tree, addr) {
    const node = tree.findGreatestLessThan(addr);
    return node !== null && this.isAddressBelongsTo_(addr, node) ? node : null;
  }

  /**
   * Finds a code entry that contains the specified address. Both static and
   * dynamic code entries are considered. Returns the code entry and the offset
   * within the entry.
   *
   * @param {number} addr Address.
   */
  findAddress(addr) {
    const pageAddr = (addr / this.kPageSize) | this.kZero;
    if (this.pages_.has(pageAddr)) {
      // Static code entries can contain "holes" of unnamed code.
      // In this case, the whole library is assigned to this address.
      let result = this.findInTree_(this.statics_, addr);
      if (result === null) {
        result = this.findInTree_(this.libraries_, addr);
        if (result === null) return null;
      }
      return {entry: result.value, offset: addr - result.key};
    }
    const max = this.dynamics_.findMax();
    if (max === null) return null;
    const min = this.dynamics_.findMin();
    if (addr >= min.key && addr < (max.key + max.value.size)) {
      const dynaEntry = this.findInTree_(this.dynamics_, addr);
      if (dynaEntry === null) return null;
      // Dedupe entry name.
      const entry = dynaEntry.value;
      if (!entry.nameUpdated_) {
        entry.name = this.dynamicsNameGen_.getName(entry.name);
        entry.nameUpdated_ = true;
      }
      return {entry, offset: addr - dynaEntry.key};
    }
    return null;
  }

  /**
   * Finds a code entry that contains the specified address. Both static and
   * dynamic code entries are considered.
   *
   * @param {number} addr Address.
   */
  findEntry(addr) {
    const result = this.findAddress(addr);
    return result !== null ? result.entry : null;
  }

  /**
   * Returns a dynamic code entry using its starting address.
   *
   * @param {number} addr Address.
   */
  findDynamicEntryByStartAddress(addr) {
    const node = this.dynamics_.find(addr);
    return node !== null ? node.value : null;
  }

  /**
   * Returns an array of all dynamic code entries.
   */
  getAllDynamicEntries() {
    return this.dynamics_.exportValues();
  }

  /**
   * Returns an array of pairs of all dynamic code entries and their addresses.
   */
  getAllDynamicEntriesWithAddresses() {
    return this.dynamics_.exportKeysAndValues();
  }

  /**
   * Returns an array of all static code entries.
   */
  getAllStaticEntries() {
    return this.statics_.exportValues();
  }

  /**
   * Returns an array of pairs of all static code entries and their addresses.
   */
  getAllStaticEntriesWithAddresses() {
    return this.statics_.exportKeysAndValues();
  }

  /**
   * Returns an array of all library entries.
   */
  getAllLibraryEntries() {
    return this.libraries_.exportValues();
  }

  /**
   * Returns an array of pairs of all library entries and their addresses.
   */
  getAllLibraryEntriesWithAddresses() {
    return this.libraries_.exportKeysAndValues();
  }
}


export class CodeEntry {
  constructor(size, opt_name, opt_type) {
    /** @type {number} */
    this.size = size;
    /** @type {string} */
    this.name = opt_name || '';
    /** @type {string} */
    this.type = opt_type || '';
    this.nameUpdated_ = false;
    /** @type {?string} */
    this.source = undefined;
  }

  getName() {
    return this.name;
  }

  toString() {
    return this.name + ': ' + this.size.toString(16);
  }

  getSourceCode() {
    return '';
  }

  get sourcePosition() {
    return this.logEntry.sourcePosition;
  }
}

class NameGenerator {
  knownNames_ = { __proto__:null }
  getName(name) {
    if (!(name in this.knownNames_)) {
      this.knownNames_[name] = 0;
      return name;
    }
    const count = ++this.knownNames_[name];
    return name + ' {' + count + '}';
  };
}
                                                                                                                                                                                                                                                                                                                                                                                                             node-23.7.0/deps/v8/tools/collect_deprecation_stats.sh                                              0000775 0000000 0000000 00000001540 14746647661 0022764 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash

# Collect the number of [[deprecated]] calls detected when compiling V8.
# Requires "v8_deprecate_get_isolate = true" to be useful.

set -e

if [ -z "$1" ]; then
  (>&2 echo "Usage: collect_deprecation_stats.sh [<outdir>|<log>]")
  exit 1
fi

if [ -d "$1" ]; then
  OUTDIR=$1
  FULL_LOG=/tmp/get_isolate_deprecation.log
  gn clean "$OUTDIR"
  autoninja -C "$OUTDIR" > $FULL_LOG
else
  FULL_LOG=$1
fi

FILTERED_LOG=/tmp/filtered_isolate_deprecation.log
UNIQUE_WARNINGS_LOG=/tmp/unique_warnings.log

grep "warning:" "$FULL_LOG" | sed $'
s|^\.\./\.\./||;
s/: warning: \'/: /;

# strip everything after deprecated function name (including template param).
s/\(<.*>\)\\?\'.*//' > $FILTERED_LOG

sort -u $FILTERED_LOG > $UNIQUE_WARNINGS_LOG

echo "Total deprecated calls: $(wc -l < $UNIQUE_WARNINGS_LOG)"
cut -f2 -d' ' $UNIQUE_WARNINGS_LOG | sort | uniq -c
                                                                                                                                                                node-23.7.0/deps/v8/tools/compare-table-gen.js                                                      0000664 0000000 0000000 00000007053 14746647661 0021032 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2015 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Generates a comparison table test case.
// Usage: d8 compare-table-gen.js -- lt|lteq|gt|gteq|eq|ne|eq|sne|min|max

var strings = ["true", "false", "null", "void 0", "0", "0.0", "-0", "\"\"", "-1", "-1.25", "1", "1.25", "-2147483648", "2147483648", "Infinity", "-Infinity", "NaN"];
var values = new Array(strings.length);
for (var i = 0; i < strings.length; i++) {
  values[i] = eval(strings[i]);
}

function test() {
  for (var i = 0; i < values.length; i++) {
    for (var j = 0; j < values.length; j++) {
      var a = values[i];
      var b = values[j];
      var x = expected[i][j];
      assertEquals(x, func(a,b));
      assertEquals(x, left_funcs[i](b));
      assertEquals(x, right_funcs[j](a));
    }
  }

  var result = matrix();
  for (var i = 0; i < values.length; i++) {
    for (var j = 0; j < values.length; j++) {
      assertEquals(expected[i][j], result[i][j]);
    }
  }
}

function expr(infix, a, cmp, b) {
  return infix ? a + " " + cmp + " " + b : cmp + "(" + a + ", " + b + ")";
}

function SpecialToString(x) {
  if ((1 / x) == -Infinity) return "-0";
  return "" + x;
}

function gen(name, cmp, infix) {

  print("// Copyright 2015 the V8 project authors. All rights reserved.");
  print("// Use of this source code is governed by a BSD-style license that can be");
  print("// found in the LICENSE file.");
  print();
  print("var values = [" + strings + "];");

  var body = "(function " + name + "(a,b) { return " + expr(infix, "a", cmp, "b") + "; })";
  var func = eval(body);

  print("var expected = [");

  for (var i = 0; i < values.length; i++) {
    var line = "  [";
    for (var j = 0; j < values.length; j++) {
      if (j > 0) line += ",";
      line += SpecialToString(func(values[i], values[j]));
    }
    line += "]";
    if (i < (values.length - 1)) line += ",";
    print(line);
  }
  print("];");

  print("var func = " + body + ";");
  print("var left_funcs = [");

  for (var i = 0; i < values.length; i++) {
    var value = strings[i];
    var body = "(function " + name + "_L" + i + "(b) { return " + expr(infix, value, cmp, "b") + "; })";
    var end = i < (values.length - 1) ? "," : "";
    print("  " + body + end);
  }
  print("];");

  print("var right_funcs = [");
  for (var i = 0; i < values.length; i++) {
    var value = strings[i];
    var body = "(function " + name + "_R" + i + "(a) { return " + expr(infix, "a", cmp, value) + "; })";
    var end = i < (values.length - 1) ? "," : "";
    print("  " + body + end);
  }
  print("];");

  print("function matrix() {");
  print("  return [");
  for (var i = 0; i < values.length; i++) {
    var line = "    [";
    for (var j = 0; j < values.length; j++) {
      if (j > 0) line += ",";
      line += expr(infix, strings[i], cmp, strings[j]);
    }
    line += "]";
    if (i < (values.length - 1)) line += ",";
    print(line);
  }
  print("  ];");
  print("}");


  print(test.toString());
  print("test();");
  print("test();");
}

switch (arguments[0]) {
  case "lt":   gen("lt",   "<", true); break;
  case "lteq": gen("lteq", "<=", true); break;
  case "gt":   gen("gt",   ">", true); break;
  case "gteq": gen("gteq", ">=", true); break;
  case "eq":   gen("eq",   "==", true); break;
  case "ne":   gen("ne",   "!=", true); break;
  case "seq":  gen("seq",  "===", true); break;
  case "sne":  gen("sne",  "!==", true); break;
  case "min":  gen("min",  "Math.min", false); break;
  case "max":  gen("max",  "Math.max", false); break;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/compare_torque_output.py                                                  0000664 0000000 0000000 00000003743 14746647661 0022233 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""
Compare two folders and print any differences between files to both a
results file and stderr.

Specifically we use this to compare the output of Torque generator for
both x86 and x64 (-m32) toolchains.
"""

import difflib
import filecmp
import itertools
import os
import sys

assert len(sys.argv) > 3

folder1 = sys.argv[1]
folder2 = sys.argv[2]
results_file_name = sys.argv[3]

with open(results_file_name, "w") as results_file:
  def write(line):
    # Print line to both results file and stderr
    sys.stderr.write(line)
    results_file.write(line)

  def has_one_sided_diff(dcmp, side, side_list):
    # Check that we do not have files only on one side of the comparison
    if side_list:
      write("Some files exist only in %s\n" % side)
      for fl in side_list:
        write(fl)
    return side_list

  def has_content_diff(dcmp):
    # Check that we do not have content differences in the common files
    _, diffs, _ = filecmp.cmpfiles(
          dcmp.left, dcmp.right,
          dcmp.common_files, shallow=False)
    if diffs:
      write("Found content differences between %s and %s\n" %
        (dcmp.left, dcmp.right))
      for name in diffs:
        write("File diff %s\n" % name)
        left_file = os.path.join(dcmp.left, name)
        right_file = os.path.join(dcmp.right, name)
        with open(left_file) as f1, open(right_file) as f2:
          diff = difflib.unified_diff(
              f1.readlines(), f2.readlines(),
              dcmp.left, dcmp.right)
          for l in itertools.islice(diff, 100):
            write(l)
        write("\n\n")
    return diffs

  dcmp = filecmp.dircmp(folder1, folder2)
  has_diffs = has_one_sided_diff(dcmp, dcmp.left, dcmp.left_only) \
    or has_one_sided_diff(dcmp, dcmp.right, dcmp.right_only) \
    or has_content_diff(dcmp)

if has_diffs:
  sys.exit(1)
                             node-23.7.0/deps/v8/tools/consarray.mjs                                                             0000664 0000000 0000000 00000006241 14746647661 0017724 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/**
 * Constructs a ConsArray object. It is used mainly for tree traversal.
 * In this use case we have lots of arrays that we need to iterate
 * sequentally. The internal Array implementation is horribly slow
 * when concatenating on large (10K items) arrays due to memory copying.
 * That's why we avoid copying memory and insead build a linked list
 * of arrays to iterate through.
 *
 * @constructor
 */
export class ConsArray {
  constructor() {
    this.tail_ = new ConsArrayCell(null, null);
    this.currCell_ = this.tail_;
    this.currCellPos_ = 0;
  }
  /**
   * Concatenates another array for iterating. Empty arrays are ignored.
   * This operation can be safely performed during ongoing ConsArray
   * iteration.
   *
   * @param {Array} arr Array to concatenate.
   */
  concat(arr) {
    if (arr.length > 0) {
      this.tail_.data = arr;
      this.tail_ = this.tail_.next = new ConsArrayCell(null, null);
    }
  }

  /**
   * Whether the end of iteration is reached.
   */
  atEnd() {
    return this.currCell_ === null ||
        this.currCell_.data === null ||
        this.currCellPos_ >= this.currCell_.data.length;
  }

  /**
   * Returns the current item, moves to the next one.
   */
  next() {
    const result = this.currCell_.data[this.currCellPos_++];
    if (this.currCellPos_ >= this.currCell_.data.length) {
      this.currCell_ = this.currCell_.next;
      this.currCellPos_ = 0;
    }
    return result;
  }
}


/**
 * A cell object used for constructing a list in ConsArray.
 *
 * @constructor
 */
class ConsArrayCell {
  constructor(data, next) {
    this.data = data;
    this.next = next;
  }
}
                                                                                                                                                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/cppgc/                                                                    0000775 0000000 0000000 00000000000 14746647661 0016301 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/cppgc/copy.bara.sky                                                       0000664 0000000 0000000 00000002435 14746647661 0020713 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

INTERESTING_PATHS = [
    'AUTHORS',
    'CODE_OF_CONDUCT.md',
    'LICENSE',
    'samples/cppgc/**',
    'src/base/**',
    'src/heap/base/**',
    'src/heap/cppgc/**',
    'include/cppgc/**',
    'include/v8config.h',
    'include/v8-platform.h',
    'testing/**',
    'test/unittests/heap/cppgc/**',
]

origin_url = 'https://chromium.googlesource.com/v8/v8.git'
# TODO(v8:10724): Add GitHub destination url.
destination_url = 'TODO'

# This workflow syncs cppgc source inside V8's googlesource repo with GitHub.
core.workflow(
    name='default',
    origin=git.origin(
        url=origin_url,
        ref='master',
    ),
    destination=git.destination(url=destination_url, ),
    origin_files=glob(INTERESTING_PATHS,
                      exclude=['samples/cppgc/cppgc-for-v8-embedders.cc']),
    destination_files=glob(['**'], exclude=['CMakeLists.txt', 'cmake/**']),
    mode='SQUASH',
    authoring=authoring.pass_thru('V8 Team <v8-dev@googlegroups.com>'),
    transformations=[
        metadata.squash_notes(prefix='Export of V8 changes from ' +
                              origin_url + '\n\nList of included changes:\n\n')
    ]
)
                                                                                                                                                                                                                                   node-23.7.0/deps/v8/tools/cppgc/export_to_github.sh                                                 0000775 0000000 0000000 00000005747 14746647661 0022242 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/sh
#
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

source_dir=$(cd "$(dirname "$0")"; pwd -P)

copybara_exe=copybara
copybara_file="$source_dir/copy.bara.sky"
init_history=''

for arg in "$@"; do
  case $arg in
    --copybara-exe=*)
      copybara_exe="${arg#*=}"
      shift
      ;;
    --copybara-file=*)
      copybara_file="${arg#*=}"
      shift
      ;;
    --init-history)
      init_history='--init-history --force'
      shift
      ;;
    *)
      echo -e "Usage:$arg"
      echo -e "    export_to_github.sh [--copybara-exe=<path-to-copybara>]\n" \
              "                       [--copybara-file=<path-to-copy.bara.sky>]"
      exit 1
  esac
done

v8_origin="https://chromium.googlesource.com/v8/v8.git"
v8_ref="master"

NOCOLOR="\033[0m"
RED="\033[0;31m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"

function fail {
  echo -e "${RED}${1}${NOCOLOR}" > /dev/stderr
  exit 1
}

function success {
  echo -e "${BLUE}${1}${NOCOLOR}" > /dev/stderr
  exit 0
}

function message {
  echo -e "${GREEN}${1}${NOCOLOR}" > /dev/stderr
}

function cleanup {
  if [ -d "$git_temp_dir" ]; then
    rm -rf $git_temp_dir
  fi
}

trap "exit 1" HUP INT PIPE QUIT TERM
trap cleanup EXIT

[ ! -x $copybara_exe ] && fail "$copybara_exe doesn't exist or was not found in PATH!"
[ ! -f $copybara_file ] && fail "Input $copybara_file doesn't exist!"

git_temp_dir=$(mktemp -d)
if [[ ! "$git_temp_dir" || ! -d "$git_temp_dir" ]]; then
  fail "Failed to create temporary dir"
fi

if [[ $init_history ]]; then
  read -p "--init-history is only supposed to be used on the first export of \
cppgc. Is this what is really intended? (y/N)" answer
  if [ "$answer" != "y" ]; then
    exit 0
  fi
fi

message "Running copybara..."
$copybara_exe $init_history $copybara_file --dry-run --git-destination-path $git_temp_dir
result=$?
if [ "$result" -eq 4 ]; then
  success "Nothing needs to be done, exiting..."
elif [ "$result" -ne 0 ]; then
  fail "Failed to run copybara"
fi

cd $git_temp_dir

main_gn="BUILD.gn"
test_gn="test/unittests/BUILD.gn"
gen_cmake="tools/cppgc/gen_cmake.py"

message "Checking out BUILD.gn files..."
git remote add v8_origin "$v8_origin"
git fetch --depth=1 v8_origin $v8_ref
git checkout v8_origin/master -- "$main_gn" "$test_gn" "$gen_cmake" \
  || fail "Failed to checkout BUILD.gn from V8 origin"

message "Generating CMakeLists.txt..."
cmakelists="$git_temp_dir/CMakeLists.txt"
$gen_cmake --out=$cmakelists --main-gn=$main_gn --test-gn=$test_gn \
  || fail "CMakeLists.txt generation has failed!"

git rm -f $main_gn $test_gn $gen_cmake > /dev/null

if git status -s | grep -q $(basename $cmakelists); then
  message "CMakeLists.txt needs to be changed"
  git add $cmakelists
  git commit --amend --no-edit > /dev/null
else
  message "No changes in CMakeLists.txt need to be done"
fi

message "Pushing changes to GitHub..."
git push copybara_remote master

success "CppGC GitHub mirror was successfully updated"
                         node-23.7.0/deps/v8/tools/cppgc/gen_cmake.py                                                        0000775 0000000 0000000 00000041220 14746647661 0020566 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
#
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import sys
import lark
import argparse
from contextlib import suppress
from collections import namedtuple
from datetime import datetime

# GN grammar from https://gn.googlesource.com/gn/+/master/src/gn/parser.cc.
GN_GRAMMAR = """
    ?file : statement_list

    ?statement     : assignment | call | condition
    ?lvalue        : IDENTIFIER | array_access | scope_access
    assignment     : lvalue assign_op expr
    call           : IDENTIFIER "(" [ expr_list ] ")" [ block ]
    condition      : "if" "(" expr ")" block [ "else" ( condition | block ) ]
    ?block         : "{" statement_list "}"
    statement_list : statement*

    array_access   : IDENTIFIER "[" expr "]"
    scope_access   : IDENTIFIER "." IDENTIFIER
    ?primary_expr  : IDENTIFIER | INTEGER | STRING | call
                   | array_access | scope_access | block
                   | "(" expr ")" -> par_expr
                   | array
    array          : "[" [ expr ( "," expr? )* ] "]"
    expr_list      : expr ( "," expr )*

    ?assign_op : "="  -> asgn_op
               | "+=" -> asgn_add_op
               | "-=" -> asgn_sub_op

    ?expr      : expr1
    ?expr1     : expr1 "||" expr2 -> or
               | expr2
    ?expr2     : expr2 "&&" expr3 -> and
               | expr3
    ?expr3     : expr3 "==" expr4 -> eq
               | expr3 "!=" expr4 -> ne
               | expr4
    ?expr4     : expr4 "<=" expr5 -> le
               | expr4 "<" expr5  -> lt
               | expr4 ">=" expr5 -> ge
               | expr4 ">" expr5  -> gt
               | expr5
    ?expr5     : expr5 "+" expr6  -> add
               | expr5 "-" expr6  -> sub
               | expr6
    ?expr6     : "!" primary_expr -> neg
               | primary_expr

    COMMENT : /#.*/

    %import common.ESCAPED_STRING -> STRING
    %import common.SIGNED_INT -> INTEGER
    %import common.CNAME -> IDENTIFIER
    %import common.WS
    %ignore WS
    %ignore COMMENT
"""

V8_TARGET_TYPES = (
    'v8_component',
    'v8_source_set',
    'v8_executable',
)

OPS = (
    'neg',
    'eq',
    'ne',
    'le',
    'lt',
    'ge',
    'gt',
    'and',
    'or',
)


class UnsupportedOperation(Exception):
    pass


class V8GNTransformer(object):
    """
    Traverse GN parse-tree and build resulting object.
    """
    def __init__(self, builder, filtered_targets):
        self.builder = builder
        self.filtered_targets = filtered_targets
        self.current_target = None

    def Traverse(self, tree):
        self.builder.BuildPrologue()
        self.TraverseTargets(tree)
        self.builder.BuildEpilogue()

    def TraverseTargets(self, tree):
        'Traverse top level GN targets and call the builder functions'
        for stmt in tree.children:
            if stmt.data != 'call':
                continue
            target_type = stmt.children[0]
            if target_type not in V8_TARGET_TYPES:
                continue
            target = stmt.children[1].children[0].strip('\"')
            if target not in self.filtered_targets:
                continue
            self.current_target = target
            self._Target(target_type, target, stmt.children[2].children)

    def _Target(self, target_type, target, stmts):
        stmts = self._StatementList(stmts)
        return self.builder.BuildTarget(target_type, target, stmts)

    def _StatementList(self, stmts):
        built_stmts = []
        for stmt in stmts:
            built_stmts.append(self._Statement(stmt))
        return [stmt for stmt in built_stmts if stmt]

    def _Statement(self, stmt):
        # Handle only interesting gn statements.
        with suppress(KeyError):
            return self.STATEMENTS[stmt.data](self, *stmt.children)

    def _Assignment(self, left, op, right):
        return self.ASSIGN_TYPES[op.data](self, left, right)

    def _AssignEq(self, left, right):
        if left == 'sources':
            return self.builder.BuildSourcesList(
                self.current_target, [str(token) for token in right.children])

    def _AssignAdd(self, left, right):
        if left == 'sources':
            return self.builder.BuildAppendSources(
                self.current_target, [str(token) for token in right.children])

    def _AssignSub(self, left, right):
        if left == 'sources':
            return self.builder.BuildRemoveSources(
                self.current_target, [str(token) for token in right.children])

    def _Condition(self, cond_expr, then_stmts, else_stmts=None):
        'Visit GN condition: if (cond) {then_stmts} else {else_stmts}'
        cond_expr = self._Expr(cond_expr)
        then_stmts = self._StatementList(then_stmts.children)
        if not then_stmts:
            # Ignore conditions with empty then stmts.
            return
        if else_stmts is None:
            return self.builder.BuildCondition(cond_expr, then_stmts)
        elif else_stmts.data == 'condition':
            else_cond = self._Condition(*else_stmts.children)
            return self.builder.BuildConditionWithElseCond(
                cond_expr, then_stmts, else_cond)
        else:
            assert 'statement_list' == else_stmts.data
            else_stmts = self._StatementList(else_stmts.children)
            return self.builder.BuildConditionWithElseStmts(
                cond_expr, then_stmts, else_stmts)

    def _Expr(self, expr):
        'Post-order traverse expression trees'
        if isinstance(expr, lark.Token):
            if expr.type == 'IDENTIFIER':
                return self.builder.BuildIdentifier(str(expr))
            elif expr.type == 'INTEGER':
                return self.builder.BuildInteger(str(expr))
            else:
                return self.builder.BuildString(str(expr))
        if expr.data == 'par_expr':
            return self.builder.BuildParenthesizedOperation(
                self._Expr(*expr.children))
        if expr.data not in OPS:
            raise UnsupportedOperation(
                f'The operator "{expr.data}" is not supported')
        if len(expr.children) == 1:
            return self._UnaryExpr(expr.data, *expr.children)
        if len(expr.children) == 2:
            return self._BinaryExpr(expr.data, *expr.children)
        raise UnsupportedOperation(f'Unsupported arity {len(expr.children)}')

    def _UnaryExpr(self, op, right):
        right = self._Expr(right)
        return self.builder.BuildUnaryOperation(op, right)

    def _BinaryExpr(self, op, left, right):
        left = self._Expr(left)
        right = self._Expr(right)
        return self.builder.BuildBinaryOperation(left, op, right)

    STATEMENTS = {
        'assignment': _Assignment,
        'condition': _Condition,
    }

    ASSIGN_TYPES = {
        'asgn_op': _AssignEq,
        'asgn_add_op': _AssignAdd,
        'asgn_sub_op': _AssignSub,
    }


TARGETS = {
    'v8_libbase': 'lib',
    'v8_cppgc_shared': 'lib',
    'cppgc_base': 'lib',
    'cppgc_standalone': 'sample',
    'cppgc_unittests_sources': 'tests',
    'cppgc_unittests': 'tests',
}


class CMakeBuilder(object):
    """
    Builder that produces the main CMakeLists.txt.
    """
    def __init__(self):
        self.result = []
        self.source_sets = {}

    def BuildPrologue(self):
        self.result.append(f"""
# Copyright {datetime.now().year} the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#
# This file is automatically generated by {__file__}. Do NOT edit it.

cmake_minimum_required(VERSION 3.11)
project(cppgc CXX)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

option(CPPGC_ENABLE_OBJECT_NAMES "Enable object names in cppgc for debug purposes" OFF)
option(CPPGC_ENABLE_CAGED_HEAP "Enable heap reservation of size 4GB, only possible for 64bit archs" OFF)
option(CPPGC_ENABLE_VERIFY_HEAP "Enables additional heap verification phases and checks" OFF)
option(CPPGC_ENABLE_YOUNG_GENERATION "Enable young generation in cppgc" OFF)
set(CPPGC_TARGET_ARCH "x64" CACHE STRING "Target architecture, possible options: x64, x86, arm, arm64, ppc64, s390x, mips64el")

set(IS_POSIX ${{UNIX}})
set(IS_MAC ${{APPLE}})
set(IS_WIN ${{WIN32}})
if("${{CMAKE_SYSTEM_NAME}}" STREQUAL "Linux")
  set(IS_LINUX 1)
elseif("${{CMAKE_SYSTEM_NAME}}" STREQUAL "Fuchsia")
  set(IS_FUCHSIA 1)
endif()

set(CURRENT_CPU ${{CPPGC_TARGET_ARCH}})

if("${{CPPGC_TARGET_ARCH}}" STREQUAL "x64" OR
   "${{CPPGC_TARGET_ARCH}}" STREQUAL "arm64" OR
   "${{CPPGC_TARGET_ARCH}}" STREQUAL "ppc64" OR
   "${{CPPGC_TARGET_ARCH}}" STREQUAL "mips64el")
  if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
    message(FATAL_ERROR "64-bit arch specified for 32-bit compiler")
  endif()
  set(CPPGC_64_BITS ON)
endif()

if(CPPGC_ENABLE_CAGED_HEAP AND NOT CPPGC_64_BITS)
  message(FATAL_ERROR "Caged heap is only supported for 64bit archs")
endif()

if(CPPGC_64_BITS)
  # Always enable caged heap for 64bits archs.
  set(CPPGC_ENABLE_CAGED_HEAP ON CACHE BOOL "Enable caged heap for 64bit" FORCE)
endif()

if(CPPGC_ENABLE_YOUNG_GENERATION AND NOT CPPGC_ENABLE_CAGED_HEAP)
  message(FATAL_ERROR "Young generation is only supported for caged heap configuration")
endif()

if(NOT CPPGC_64_BITS)
  if(NOT MSVC)
    set(CMAKE_CXX_FLAGS "${{CMAKE_CXX_FLAGS}} -m32")
    set(CMAKE_C_FLAGS "${{CMAKE_C_FLAGS}} -m32")
    set(CMAKE_EXE_LINKER_FLAGS "${{CMAKE_EXE_LINKER_FLAGS}} -m32")
    set(CMAKE_SHARED_LINKER_FLAGS "${{CMAKE_SHARED_LINKER_FLAGS}} -m32")
    set(CMAKE_MODULE_LINKER_FLAGS "${{CMAKE_MODULE_LINKER_FLAGS}} -m32")
  endif()
endif()

find_package(Threads REQUIRED)

include(FetchContent)
FetchContent_Declare(
  googletest
  GIT_REPOSITORY "https://chromium.googlesource.com/external/github.com/google/googletest.git"
  GIT_TAG        "4fe018038f87675c083d0cfb6a6b57c274fb1753"
  SOURCE_DIR     "${{CMAKE_BINARY_DIR}}/third_party/googletest/src"
)

FetchContent_GetProperties(googletest)
if(NOT googletest_POPULATED)
  FetchContent_Populate(googletest)
  message("Fetched googletest into ${{googletest_SOURCE_DIR}}")
  add_subdirectory(${{googletest_SOURCE_DIR}} ${{googletest_BINARY_DIR}} EXCLUDE_FROM_ALL)
  include_directories("${{CMAKE_BINARY_DIR}}")
endif()
""")

    def BuildEpilogue(self):
        self.result.extend(
            self._GenTargetString(target, sets)
            for target, sets in self.source_sets.items())
        self.result.append("\ninstall(TARGETS cppgc)")

    def BuildTarget(self, target_type, target, rules):
        # Don't generate CMake targets yet, defer it to build_epilogue.
        comment = f"""
#===============================================================================
# {self._CMakeTarget(target)} sources.
#==============================================================================="""
        self.result.append(comment)
        self.result.extend(rules)
        self.source_sets.setdefault(
            TARGETS[target], []).append('${' + self._SourceVar(target) + '}')

    def BuildSourcesList(self, target, sources):
        sources = self._ExpandSources(target, sources)
        return f'set({self._SourceVar(target)} {sources})'

    def BuildAppendSources(self, target, sources):
        sources = self._ExpandSources(target, sources)
        return f'list(APPEND {self._SourceVar(target)} {sources})'

    def BuildRemoveSources(self, target, sources):
        sources = self._ExpandSources(target, sources)
        return f'list(REMOVE_ITEM {self._SourceVar(target)} {sources})'

    def BuildCondition(self, cond, then_stmts):
        return f"""
if({cond})
  {' '.join(then_stmts)}
endif()
        """.strip()

    def BuildConditionWithElseStmts(self, cond, then_stmts, else_stmts):
        return f"""
if({cond})
  {' '.join(then_stmts)}
{'else() ' + ' '.join(else_stmts)}
endif()
        """.strip()

    def BuildConditionWithElseCond(self, cond, then_stmts, else_cond):
        return f"""
if({cond})
  {' '.join(then_stmts)}
else{else_cond}
        """.strip()

    def BuildParenthesizedOperation(self, operation):
        return ''.join(['(', operation, ')'])

    def BuildUnaryOperation(self, op, right):
        OPS = {
            'neg': 'NOT',
        }
        return ' '.join([OPS[op], right])

    def BuildBinaryOperation(self, left, op, right):
        if op == 'ne':
            neg_result = self.BuildBinaryOperation(left, 'eq', right)
            return self.BuildUnaryOperation('neg', neg_result)
        OPS = {
            'eq': 'STREQUAL',
            'le': 'LESS_EQUAL',
            'lt': 'LESS',
            'ge': 'GREATER_EQUAL',
            'gt': 'GREATER',
            'and': 'AND',
            'or': 'OR',
        }
        return ' '.join([left, OPS[op], right])

    def BuildIdentifier(self, token):
        return self._CMakeVarRef(token)

    def BuildInteger(self, integer):
        return integer

    def BuildString(self, string):
        return string

    def GetResult(self):
        return '\n'.join(self.result)

    @staticmethod
    def _GenTargetString(target_type, source_sets):
        Target = namedtuple('Target', 'name cmake deps desc')
        CMAKE_TARGETS = {
            'lib':
            Target(name='cppgc',
                   cmake='add_library',
                   deps=['Threads::Threads'],
                   desc='Main library'),
            'sample':
            Target(name='cppgc_hello_world',
                   cmake='add_executable',
                   deps=['cppgc'],
                   desc='Example'),
            'tests':
            Target(name='cppgc_unittests',
                   cmake='add_executable',
                   deps=['cppgc', 'gtest', 'gmock'],
                   desc='Unittests')
        }
        target = CMAKE_TARGETS[target_type]
        return f"""
# {target.desc} target.
{target.cmake}({target.name} {' '.join(source_sets)})

{'target_link_libraries(' + target.name + ' ' + ' '.join(target.deps) + ')' if target.deps else ''}

target_include_directories({target.name} PRIVATE "${{CMAKE_SOURCE_DIR}}"
                                         PRIVATE "${{CMAKE_SOURCE_DIR}}/include")

if(CPPGC_ENABLE_OBJECT_NAMES)
  target_compile_definitions({target.name} PRIVATE "-DCPPGC_SUPPORTS_OBJECT_NAMES")
endif()
if(CPPGC_ENABLE_CAGED_HEAP)
  target_compile_definitions({target.name} PRIVATE "-DCPPGC_CAGED_HEAP")
endif()
if(CPPGC_ENABLE_VERIFY_HEAP)
  target_compile_definitions({target.name} PRIVATE "-DCPPGC_ENABLE_VERIFY_HEAP")
endif()
if(CPPGC_ENABLE_YOUNG_GENERATION)
  target_compile_definitions({target.name} PRIVATE "-DCPPGC_YOUNG_GENERATION")
endif()"""

    @staticmethod
    def _ExpandSources(target, sources):
        if TARGETS[target] == 'tests':
            sources = ['\"test/unittests/' + s[1:] for s in sources]
        return ' '.join(sources)

    @staticmethod
    def _SourceVar(target):
        return CMakeBuilder._CMakeVar(target) + '_SOURCES'

    @staticmethod
    def _CMakeVar(var):
        return var.replace('v8_', '').upper()

    @staticmethod
    def _CMakeTarget(var):
        return var.replace('v8_', '')

    @staticmethod
    def _CMakeVarRef(var):
        return '\"${' + CMakeBuilder._CMakeVar(var) + '}"'


def FormatCMake(contents):
    from cmake_format import configuration, lexer, parse, formatter
    cfg = configuration.Configuration()
    tokens = lexer.tokenize(contents)
    parse_tree = parse.parse(tokens)
    box_tree = formatter.layout_tree(parse_tree, cfg)
    return formatter.write_tree(box_tree, cfg, contents)


def SaveContents(contents, outfile):
    if outfile == '-':
        return print(contents)
    with open(outfile, 'w+') as ofile:
        ofile.write(contents)


def ParseGN(contents):
    parser = lark.Lark(GN_GRAMMAR, parser='lalr', start='file')
    return parser.parse(contents)


def ParseGNFile(filename):
    with open(filename, 'r') as file:
        contents = file.read()
        return ParseGN(contents)


def GenCMake(main_gn, test_gn, outfile):
    tree = ParseGNFile(main_gn)
    tree.children.extend(ParseGNFile(test_gn).children)
    builder = CMakeBuilder()
    V8GNTransformer(builder, TARGETS.keys()).Traverse(tree)
    result = FormatCMake(builder.GetResult())
    SaveContents(result, outfile)


def Main():
    arg_parser = argparse.ArgumentParser(
        description=
        'Generate CMake from the main GN file for targets needed to build CppGC.'
    )
    arg_parser.add_argument('--out', help='output CMake filename', default='-')
    arg_parser.add_argument('--main-gn',
                            help='main BUILD.gn input file',
                            default='BUILD.gn')
    arg_parser.add_argument('--test-gn',
                            help='unittest BUILD.gn input file',
                            default='test/unittests/BUILD.gn')
    args = arg_parser.parse_args()

    GenCMake(args.main_gn, args.test_gn, args.out)
    return 0


if __name__ == '__main__':
    sys.exit(Main())
                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/cppgc/gen_cmake_test.py                                                   0000775 0000000 0000000 00000007615 14746647661 0021637 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
#
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

from gen_cmake import CMakeBuilder, V8GNTransformer, ParseGN, V8_TARGET_TYPES
import unittest


class CMakeMockBuilder(CMakeBuilder):
    """
    Similar to CMakeBuilder but doesn't produce prologues/epilogues.
    """
    def BuildPrologue(self):
        pass

    def BuildEpilogue(self):
        pass


class CMakeGenerationTest(unittest.TestCase):
    TARGET = 'cppgc_base'
    CMAKE_TARGET_SOURCES = TARGET.upper() + '_SOURCES'

    def test_source_assignment(self):
        self._CompileAndCheck(
            f'set({self.CMAKE_TARGET_SOURCES} "source1.h" "source1.cc")',
            'sources = [ "source1.h", "source1.cc", ]')

    def test_source_append(self):
        self._CompileAndCheck(
            f'list(APPEND {self.CMAKE_TARGET_SOURCES} "source1.h" "source1.cc")',
            'sources += [ "source1.h", "source1.cc", ]')

    def test_source_remove(self):
        self._CompileAndCheck(
            f'list(REMOVE_ITEM {self.CMAKE_TARGET_SOURCES} "source1.h" "source1.cc")',
            'sources -= [ "source1.h", "source1.cc", ]')

    def test_equal(self):
        self._CompileExpressionAndCheck('"${CURRENT_CPU}" STREQUAL "x64"',
                                        'current_cpu == "x64"')

    def test_not_equal(self):
        self._CompileExpressionAndCheck('NOT "${CURRENT_CPU}" STREQUAL "x86"',
                                        'current_cpu != "x86"')

    def test_comparison_ops(self):
        OPS = {
            '<': 'LESS',
            '<=': 'LESS_EQUAL',
            '>': 'GREATER',
            '>=': 'GREATER_EQUAL',
        }
        for gn_op, cmake_op in OPS.items():
            self._CompileExpressionAndCheck(
                f'"${{GCC_VERSION}}" {cmake_op} 40802',
                f'gcc_version {gn_op} 40802')

    def test_parenthesized_expressions(self):
        self._CompileExpressionAndCheck(
            '(("${IS_POSIX}" AND NOT "${IS_ANDROID}") OR "${IS_FUCHSIA}") AND NOT "${USING_SANITIZER}"',
            '((is_posix && !is_android) || is_fuchsia) && !using_sanitizer')

    def test_conditional_statements(self):
        self._CompileAndCheck(
            f"""
if("${{IS_POSIX}}")
  list(APPEND {self.CMAKE_TARGET_SOURCES} "unistd.h")
else()
  list(REMOVE_ITEM {self.CMAKE_TARGET_SOURCES} "unistd.h")
endif()
            """, """
if (is_posix) {
  sources += ["unistd.h"]
} else {
  sources -= ["unistd.h"]
}
            """)

    def test_conditional_statements_elseif(self):
        self._CompileAndCheck(
            f"""
if("${{IS_POSIX}}")
  list(APPEND {self.CMAKE_TARGET_SOURCES} "unistd.h")
elseif("${{IS_WIN}}")
  list(REMOVE_ITEM {self.CMAKE_TARGET_SOURCES} "unistd.h")
endif()
            """, """
if (is_posix) {
  sources += ["unistd.h"]
} else if (is_win) {
  sources -= ["unistd.h"]
}
            """)

    def _Compile(self, gn_string):
        gn_code = f'v8_component({self.TARGET}) {{ {gn_string} }}'
        tree = ParseGN(gn_code)
        builder = CMakeMockBuilder()
        V8GNTransformer(builder, [self.TARGET]).Traverse(tree)
        return builder.GetResult()

    def _CompileAndCheck(self, expected_cmake, gn_string):
        actual_cmake = self._Compile(gn_string)
        self.assertIn(self._Canonicalize(expected_cmake),
                      self._Canonicalize(actual_cmake))
        pass

    def _CompileExpressionAndCheck(self, expected_cmake, gn_string):
        gn_string = f'if ({gn_string}) {{ sources = [ "source.cc" ] }}'
        expected_cmake = f'if({expected_cmake})'
        actual_cmake = self._Compile(gn_string)
        self.assertIn(self._Canonicalize(expected_cmake),
                      self._Canonicalize(actual_cmake))
        pass

    @staticmethod
    def _Canonicalize(str):
        return ' '.join(str.split()).strip()


if __name__ == '__main__':
    unittest.main()
                                                                                                                   node-23.7.0/deps/v8/tools/cppgc/test_cmake.sh                                                       0000775 0000000 0000000 00000002657 14746647661 0020771 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/sh
#
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

sourcedir=$(cd "$(dirname "$0")"; pwd -P)
rootdir=$sourcedir/../../
testdir=$rootdir/test/unittests/

maingn=$rootdir/BUILD.gn
testgn=$testdir/BUILD.gn

function fail {
  echo -e "\033[0;31m$1\033[0m" > /dev/stderr
  exit 1
}

function cleanup {
  rm $cmakelists
  if [[ -d "$tempdir" ]]; then
    rm -rf $tempdir
  fi
}

trap "exit 1" HUP INT PIPE QUIT TERM
trap cleanup EXIT

if [[ ! -f "$maingn" || ! -f "$testgn" ]]; then
  fail "Expected GN files are not present"
fi

cmakelists=$rootdir/CMakeLists.txt

# Generate CMakeLists.txt in the root project directory.
$sourcedir/gen_cmake.py --out=$cmakelists --main-gn=$maingn --test-gn=$testgn
if [ $? -ne 0 ]; then
  fail "CMakeLists.txt generation has failed"
fi

# Create a temporary build directory.
tempdir=$(mktemp -d)
if [[ ! "$tempdir" || ! -d "$tempdir" ]]; then
  fail "Failed to create temporary dir"
fi

# Configure project with cmake.
cd $tempdir
cmake -GNinja $rootdir || fail "Failed to execute cmake"

# Build all targets.
ninja cppgc || fail "Failed to build cppgc"
ninja cppgc_hello_world || fail "Failed to build sample"
ninja cppgc_unittests || fail "Failed to build unittests"

# Run unittests.
./cppgc_unittests || fail "Failed to run unittests"

echo -e "\033[0;32mThe test has succesfully passed\033[0m"
                                                                                 node-23.7.0/deps/v8/tools/cpu.sh                                                                    0000775 0000000 0000000 00000002764 14746647661 0016344 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2014 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

CPUPATH=/sys/devices/system/cpu

MAXID=$(cat $CPUPATH/present | awk -F- '{print $NF}')

set_governor() {
  echo "Setting CPU frequency governor to \"$1\""
  for (( i=0; i<=$MAXID; i++ )); do
    echo "$1" > $CPUPATH/cpu$i/cpufreq/scaling_governor
  done
}

enable_cores() {
  # $1: How many cores to enable.
  for (( i=1; i<=$MAXID; i++ )); do
    if [ "$i" -lt "$1" ]; then
      echo 1 > $CPUPATH/cpu$i/online
    else
      echo 0 > $CPUPATH/cpu$i/online
    fi
  done
}

dual_core() {
  echo "Switching to dual-core mode"
  enable_cores 2
}

single_core() {
  echo "Switching to single-core mode"
  enable_cores 1
}


all_cores() {
  echo "Reactivating all CPU cores"
  enable_cores $((MAXID+1))
}


limit_cores() {
  # $1: How many cores to enable.
  echo "Limiting to $1 cores"
  enable_cores $1
}

case "$1" in
  fast | performance)
    set_governor "performance"
    ;;
  slow | powersave)
    set_governor "powersave"
    ;;
  default | ondemand)
    set_governor "ondemand"
    ;;
  dualcore | dual)
    dual_core
    ;;
  singlecore | single)
    single_core
    ;;
  allcores | all)
    all_cores
    ;;
  limit_cores)
    if [ $# -ne 2 ]; then
      echo "Usage $0 limit_cores <num>"
      exit 1
    fi
    limit_cores $2
    ;;
  *)
    echo "Usage: $0 fast|slow|default|singlecore|dualcore|all|limit_cores"
    exit 1
    ;;
esac 
            node-23.7.0/deps/v8/tools/cross_build_gcc.sh                                                        0000775 0000000 0000000 00000004576 14746647661 0020704 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/sh
#
# Copyright 2013 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of Google Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

if [ "$#" -lt 1 ]; then
  echo "Usage: tools/cross_build_gcc.sh <GCC prefix> [make arguments ...]"
  exit 1
fi

export CXX=$1g++
export AR=$1ar
export RANLIB=$1ranlib
export CC=$1gcc
export LD=$1g++
export LINK=$1g++

OK=1
if [ ! -x "$CXX" ]; then
  echo "Error: $CXX does not exist or is not executable."
  OK=0
fi
if [ ! -x "$AR" ]; then
  echo "Error: $AR does not exist or is not executable."
  OK=0
fi
if [ ! -x "$RANLIB" ]; then
  echo "Error: $RANLIB does not exist or is not executable."
  OK=0
fi
if [ ! -x "$CC" ]; then
  echo "Error: $CC does not exist or is not executable."
  OK=0
fi
if [ ! -x "$LD" ]; then
  echo "Error: $LD does not exist or is not executable."
  OK=0
fi
if [ ! -x "$LINK" ]; then
  echo "Error: $LINK does not exist or is not executable."
  OK=0
fi
if [ $OK -ne 1 ]; then
  exit 1
fi

shift
make snapshot=off $@
                                                                                                                                  node-23.7.0/deps/v8/tools/csvparser.mjs                                                             0000664 0000000 0000000 00000007426 14746647661 0017741 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2009 the V8 project authors. All rights reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
//       copyright notice, this list of conditions and the following
//       disclaimer in the documentation and/or other materials provided
//       with the distribution.
//     * Neither the name of Google Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/**
 * Creates a CSV lines parser.
 */
export class CsvParser {
  /**
   * Converts \x00 and \u0000 escape sequences in the given string.
   *
   * @param {string} input field.
   **/
  escapeField(string) {
    let nextPos = string.indexOf("\\");
    if (nextPos === -1) return string;
    let result = [string.substring(0, nextPos)];
    // Escape sequences of the form \x00 and \u0000;
    let pos = 0;
    while (nextPos !== -1) {
      const escapeIdentifier = string[nextPos + 1];
      pos = nextPos + 2;
      if (escapeIdentifier === 'n') {
        result.push('\n');
        nextPos = pos;
      } else if (escapeIdentifier === '\\') {
        result.push('\\');
        nextPos = pos;
      } else {
        if (escapeIdentifier === 'x') {
          // \x00 ascii range escapes consume 2 chars.
          nextPos = pos + 2;
        } else {
          // \u0000 unicode range escapes consume 4 chars.
          nextPos = pos + 4;
        }
        // Convert the selected escape sequence to a single character.
        const escapeChars = string.substring(pos, nextPos);
        if (escapeChars === '2C') {
            result.push(',');
        } else {
          result.push(String.fromCharCode(parseInt(escapeChars, 16)));
        }
      }

      // Continue looking for the next escape sequence.
      pos = nextPos;
      nextPos = string.indexOf("\\", pos);
      // If there are no more escape sequences consume the rest of the string.
      if (nextPos === -1) {
        result.push(string.substr(pos));
        break;
      } else if (pos !== nextPos) {
        result.push(string.substring(pos, nextPos));
      }
    }
    return result.join('');
  }

  /**
   * Parses a line of CSV-encoded values. Returns an array of fields.
   *
   * @param {string} line Input line.
   */
  parseLine(line) {
    let pos = 0;
    const endPos = line.length;
    const fields = [];
    if (endPos == 0) return fields;
    let nextPos = 0;
    while(nextPos !== -1) {
      nextPos = line.indexOf(',', pos);
      let field;
      if (nextPos === -1) {
        field = line.substr(pos);
      } else {
        field = line.substring(pos, nextPos);
      }
      fields.push(this.escapeField(field));
      pos = nextPos + 1;
    };
    return fields
  }
}
                                                                                                                                                                                                                                          node-23.7.0/deps/v8/tools/debug_helper/                                                             0000775 0000000 0000000 00000000000 14746647661 0017632 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/debug_helper/BUILD.gn                                                     0000664 0000000 0000000 00000005764 14746647661 0021033 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2019 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../../gni/snapshot_toolchain.gni")
import("../../gni/v8.gni")

config("internal_config") {
  visibility = [ ":*" ]  # Only targets in this file can depend on this.

  if (is_component_build) {
    defines = [ "BUILDING_V8_DEBUG_HELPER" ]
  }

  configs = [ "../..:v8_tracing_config" ]

  include_dirs = [
    ".",
    "../..",
    "$target_gen_dir",
    "$target_gen_dir/../..",
  ]
}

# This config should be applied to code using v8_debug_helper.
config("external_config") {
  if (is_component_build) {
    defines = [ "USING_V8_DEBUG_HELPER" ]
  }

  configs = [ "../..:external_config" ]

  include_dirs = [ "." ]
}

action("run_mkgrokdump") {
  testonly = true
  visibility = [ ":*" ]

  deps = [
    "../..:run_mksnapshot_default",
    "../../test/mkgrokdump:mkgrokdump($v8_generator_toolchain)",
  ]

  script = "../run.py"

  outputs = [ "$target_gen_dir/v8heapconst.py" ]

  args = [
    "./" + rebase_path(
            get_label_info(
                    "../../test/mkgrokdump:mkgrokdump($v8_generator_toolchain)",
                    "root_out_dir") + "/mkgrokdump",
            root_build_dir),
    "--outfile",
    rebase_path("$target_gen_dir/v8heapconst.py", root_build_dir),
  ]
}

action("gen_heap_constants") {
  testonly = true
  visibility = [ ":*" ]
  deps = [ ":run_mkgrokdump" ]
  script = "gen-heap-constants.py"
  outputs = [ "$target_gen_dir/heap-constants-gen.cc" ]
  args = [
    rebase_path(target_gen_dir, root_build_dir),
    rebase_path("$target_gen_dir/heap-constants-gen.cc", root_build_dir),
  ]
}

v8_component("v8_debug_helper_internal") {
  testonly = true

  public = [ "debug-helper.h" ]

  sources = [
    "$target_gen_dir/../../torque-generated/class-debug-readers.cc",
    "$target_gen_dir/../../torque-generated/class-debug-readers.h",
    "$target_gen_dir/../../torque-generated/debug-macros.cc",
    "$target_gen_dir/../../torque-generated/debug-macros.h",
    "$target_gen_dir/../../torque-generated/instance-types.h",
    "$target_gen_dir/heap-constants-gen.cc",
    "../../src/common/ptr-compr.cc",
    "compiler-types.cc",
    "debug-helper-internal.cc",
    "debug-helper-internal.h",
    "debug-helper.h",
    "get-object-properties.cc",
    "heap-constants.cc",
    "heap-constants.h",
  ]

  deps = [
    ":gen_heap_constants",
    "../..:generate_bytecode_builtins_list",
    "../..:run_torque",
    "../..:v8_abseil",
    "../..:v8_headers",
    "../..:v8_internal_headers",
    "../..:v8_libbase",
    "../..:v8_shared_internal_headers",
    "../..:v8_tracing",
  ]

  configs = [ ":internal_config" ]
  if (v8_enable_i18n_support) {
    configs += [ "$v8_icu_path:icu_config" ]
  }

  remove_configs = [ "//build/config/compiler:no_rtti" ]
  configs += [ "//build/config/compiler:rtti" ]
}

group("v8_debug_helper") {
  testonly = true
  public_deps = [ ":v8_debug_helper_internal" ]
  public_configs = [ ":external_config" ]
}
            node-23.7.0/deps/v8/tools/debug_helper/DEPS                                                         0000664 0000000 0000000 00000000052 14746647661 0020305 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        include_rules = [
  "+torque-generated"
]
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      node-23.7.0/deps/v8/tools/debug_helper/OWNERS                                                       0000664 0000000 0000000 00000000033 14746647661 0020566 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        seth.brenith@microsoft.com
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/debug_helper/README.md                                                    0000664 0000000 0000000 00000000502 14746647661 0021106 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # V8 debug helper

This library is for debugging V8 itself, not debugging JavaScript running within
V8. It is designed to be called from a debugger extension running within a
native debugger such as WinDbg or LLDB. It can be used on live processes or
crash dumps, and cannot assume that all memory is available in a dump.
                                                                                                                                                                                              node-23.7.0/deps/v8/tools/debug_helper/compiler-types.cc                                            0000664 0000000 0000000 00000001654 14746647661 0023123 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "debug-helper-internal.h"
#include "src/compiler/types.h"

namespace ic = v8::internal::compiler;

extern "C" {
V8_DEBUG_HELPER_EXPORT const char* _v8_debug_helper_BitsetName(
    uint64_t payload) {
  // Check if payload is a bitset and return the bitset type.
  // This line is duplicating the logic from Type::IsBitset.
  bool is_bit_set = payload & 1;
  if (!is_bit_set) return nullptr;
  ic::BitsetType::bitset bits =
      static_cast<ic::BitsetType::bitset>(payload ^ 1u);
  switch (bits) {
#define RETURN_NAMED_TYPE(type, value) \
  case ic::BitsetType::k##type:        \
    return #type;
    PROPER_BITSET_TYPE_LIST(RETURN_NAMED_TYPE)
    INTERNAL_BITSET_TYPE_LIST(RETURN_NAMED_TYPE)
#undef RETURN_NAMED_TYPE

    default:
      return nullptr;
  }
}
}
                                                                                    node-23.7.0/deps/v8/tools/debug_helper/debug-helper-internal.cc                                     0000664 0000000 0000000 00000004441 14746647661 0024321 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "debug-helper-internal.h"
#include "src/common/ptr-compr-inl.h"
#include "torque-generated/class-debug-readers.h"

namespace i = v8::internal;

namespace v8 {
namespace internal {
namespace debug_helper_internal {

bool IsPointerCompressed(uintptr_t address) {
#if COMPRESS_POINTERS_BOOL
  return address < i::kPtrComprCageReservationSize;
#else
  return false;
#endif
}

uintptr_t EnsureDecompressed(uintptr_t address,
                             uintptr_t any_uncompressed_ptr) {
  if (!COMPRESS_POINTERS_BOOL || !IsPointerCompressed(address)) return address;
#ifdef V8_COMPRESS_POINTERS
  Address base =
      V8HeapCompressionScheme::GetPtrComprCageBaseAddress(any_uncompressed_ptr);
  if (base != V8HeapCompressionScheme::base()) {
    V8HeapCompressionScheme::InitBase(base);
  }
#endif  // V8_COMPRESS_POINTERS
  // TODO(v8:11880): ExternalCodeCompressionScheme might be needed here for
  // decompressing Code pointers from external code space.
  return i::V8HeapCompressionScheme::DecompressTagged(
      any_uncompressed_ptr, static_cast<i::Tagged_t>(address));
}

d::PropertyKind GetArrayKind(d::MemoryAccessResult mem_result) {
  d::PropertyKind indexed_field_kind{};
  switch (mem_result) {
    case d::MemoryAccessResult::kOk:
      indexed_field_kind = d::PropertyKind::kArrayOfKnownSize;
      break;
    case d::MemoryAccessResult::kAddressNotValid:
      indexed_field_kind =
          d::PropertyKind::kArrayOfUnknownSizeDueToInvalidMemory;
      break;
    default:
      indexed_field_kind =
          d::PropertyKind::kArrayOfUnknownSizeDueToValidButInaccessibleMemory;
      break;
  }
  return indexed_field_kind;
}

std::vector<std::unique_ptr<ObjectProperty>> TqObject::GetProperties(
    d::MemoryAccessor accessor) const {
  return std::vector<std::unique_ptr<ObjectProperty>>();
}

const char* TqObject::GetName() const { return "v8::internal::Object"; }

void TqObject::Visit(TqObjectVisitor* visitor) const {
  visitor->VisitObject(this);
}

bool TqObject::IsSuperclassOf(const TqObject* other) const {
  return GetName() != other->GetName();
}

}  // namespace debug_helper_internal
}  // namespace internal
}  // namespace v8
                                                                                                                                                                                                                               node-23.7.0/deps/v8/tools/debug_helper/debug-helper-internal.h                                      0000664 0000000 0000000 00000017562 14746647661 0024173 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file defines internal versions of the public API structs. These should
// all be tidy and simple classes which maintain proper ownership (unique_ptr)
// of each other. Each contains an instance of its corresponding public type,
// which can be filled out with GetPublicView.

#ifndef V8_TOOLS_DEBUG_HELPER_DEBUG_HELPER_INTERNAL_H_
#define V8_TOOLS_DEBUG_HELPER_DEBUG_HELPER_INTERNAL_H_

#include <memory>
#include <string>
#include <vector>

#include "debug-helper.h"
#include "src/common/globals.h"
#include "src/objects/instance-type.h"

namespace d = v8::debug_helper;

namespace v8 {
namespace internal {
namespace debug_helper_internal {

// A value that was read from the debuggee's memory.
template <typename TValue>
struct Value {
  d::MemoryAccessResult validity;
  TValue value;
};

// Internal version of API class v8::debug_helper::PropertyBase.
class PropertyBase {
 public:
  PropertyBase(std::string name, std::string type) : name_(name), type_(type) {}
  void SetFieldsOnPublicView(d::PropertyBase* public_view) {
    public_view->name = name_.c_str();
    public_view->type = type_.c_str();
  }

 private:
  std::string name_;
  std::string type_;
};

// Internal version of API class v8::debug_helper::StructProperty.
class StructProperty : public PropertyBase {
 public:
  StructProperty(std::string name, std::string type, size_t offset,
                 uint8_t num_bits, uint8_t shift_bits)
      : PropertyBase(std::move(name), std::move(type)),
        offset_(offset),
        num_bits_(num_bits),
        shift_bits_(shift_bits) {}

  d::StructProperty* GetPublicView() {
    PropertyBase::SetFieldsOnPublicView(&public_view_);
    public_view_.offset = offset_;
    public_view_.num_bits = num_bits_;
    public_view_.shift_bits = shift_bits_;
    return &public_view_;
  }

 private:
  size_t offset_;
  uint8_t num_bits_;
  uint8_t shift_bits_;

  d::StructProperty public_view_;
};

// Internal version of API class v8::debug_helper::ObjectProperty.
class ObjectProperty : public PropertyBase {
 public:
  ObjectProperty(std::string name, std::string type, uintptr_t address,
                 size_t num_values, size_t size,
                 std::vector<std::unique_ptr<StructProperty>> struct_fields,
                 d::PropertyKind kind)
      : PropertyBase(std::move(name), std::move(type)),
        address_(address),
        num_values_(num_values),
        size_(size),
        struct_fields_(std::move(struct_fields)),
        kind_(kind) {}

  d::ObjectProperty* GetPublicView() {
    PropertyBase::SetFieldsOnPublicView(&public_view_);
    public_view_.address = address_;
    public_view_.num_values = num_values_;
    public_view_.size = size_;
    public_view_.num_struct_fields = struct_fields_.size();
    struct_fields_raw_.clear();
    for (const auto& property : struct_fields_) {
      struct_fields_raw_.push_back(property->GetPublicView());
    }
    public_view_.struct_fields = struct_fields_raw_.data();
    public_view_.kind = kind_;
    return &public_view_;
  }

 private:
  uintptr_t address_;
  size_t num_values_;
  size_t size_;
  std::vector<std::unique_ptr<StructProperty>> struct_fields_;
  d::PropertyKind kind_;

  d::ObjectProperty public_view_;
  std::vector<d::StructProperty*> struct_fields_raw_;
};

class ObjectPropertiesResult;
struct ObjectPropertiesResultExtended : public d::ObjectPropertiesResult {
  // Back reference for cleanup.
  debug_helper_internal::ObjectPropertiesResult* base;
};

// Internal version of API class v8::debug_helper::ObjectPropertiesResult.
class ObjectPropertiesResult {
 public:
  ObjectPropertiesResult(d::TypeCheckResult type_check_result,
                         std::string brief, std::string type)
      : type_check_result_(type_check_result), brief_(brief), type_(type) {}
  ObjectPropertiesResult(
      d::TypeCheckResult type_check_result, std::string brief, std::string type,
      std::vector<std::unique_ptr<ObjectProperty>> properties,
      std::vector<std::string> guessed_types)
      : ObjectPropertiesResult(type_check_result, brief, type) {
    properties_ = std::move(properties);
    guessed_types_ = std::move(guessed_types);
  }

  void Prepend(const char* prefix) { brief_ = prefix + brief_; }

  d::ObjectPropertiesResult* GetPublicView() {
    public_view_.type_check_result = type_check_result_;
    public_view_.brief = brief_.c_str();
    public_view_.type = type_.c_str();
    public_view_.num_properties = properties_.size();
    properties_raw_.clear();
    for (const auto& property : properties_) {
      properties_raw_.push_back(property->GetPublicView());
    }
    public_view_.properties = properties_raw_.data();
    public_view_.num_guessed_types = guessed_types_.size();
    guessed_types_raw_.clear();
    for (const auto& guess : guessed_types_) {
      guessed_types_raw_.push_back(guess.c_str());
    }
    public_view_.guessed_types = guessed_types_raw_.data();
    public_view_.base = this;
    return &public_view_;
  }

 private:
  d::TypeCheckResult type_check_result_;
  std::string brief_;
  std::string type_;
  std::vector<std::unique_ptr<ObjectProperty>> properties_;
  std::vector<std::string> guessed_types_;

  ObjectPropertiesResultExtended public_view_;
  std::vector<d::ObjectProperty*> properties_raw_;
  std::vector<const char*> guessed_types_raw_;
};

class StackFrameResult;
struct StackFrameResultExtended : public d::StackFrameResult {
  // Back reference for cleanup.
  debug_helper_internal::StackFrameResult* base;
};

// Internal version of API class v8::debug_helper::StackFrameResult.
class StackFrameResult {
 public:
  StackFrameResult(std::vector<std::unique_ptr<ObjectProperty>> properties) {
    properties_ = std::move(properties);
  }

  d::StackFrameResult* GetPublicView() {
    public_view_.num_properties = properties_.size();
    properties_raw_.clear();
    for (const auto& property : properties_) {
      properties_raw_.push_back(property->GetPublicView());
    }
    public_view_.properties = properties_raw_.data();
    public_view_.base = this;
    return &public_view_;
  }

 private:
  std::vector<std::unique_ptr<ObjectProperty>> properties_;

  StackFrameResultExtended public_view_;
  std::vector<d::ObjectProperty*> properties_raw_;
};

class TqObjectVisitor;

// Base class representing a V8 object in the debuggee's address space.
// Subclasses for specific object types are generated by the Torque compiler.
class TqObject {
 public:
  TqObject(uintptr_t address) : address_(address) {}
  virtual ~TqObject() = default;
  virtual std::vector<std::unique_ptr<ObjectProperty>> GetProperties(
      d::MemoryAccessor accessor) const;
  virtual const char* GetName() const;
  virtual void Visit(TqObjectVisitor* visitor) const;
  virtual bool IsSuperclassOf(const TqObject* other) const;

 protected:
  uintptr_t address_;
};

// A helpful template so that generated code can be sure that a string type name
// actually resolves to a type, by repeating the name as the template parameter
// and the value.
template <typename T>
const char* CheckTypeName(const char* name) {
  return name;
}

// In ptr-compr builds, returns whether the address looks like a compressed
// pointer (zero-extended from 32 bits). Otherwise returns false because no
// pointers can be compressed.
bool IsPointerCompressed(uintptr_t address);

// If the given address looks like a compressed pointer, returns a decompressed
// representation of it. Otherwise returns the address unmodified.
uintptr_t EnsureDecompressed(uintptr_t address,
                             uintptr_t any_uncompressed_address);

// Converts the MemoryAccessResult from attempting to read an array's length
// into the corresponding PropertyKind for the array.
d::PropertyKind GetArrayKind(d::MemoryAccessResult mem_result);

}  // namespace debug_helper_internal
}  // namespace internal
}  // namespace v8

#endif
                                                                                                                                              node-23.7.0/deps/v8/tools/debug_helper/debug-helper.h                                               0000664 0000000 0000000 00000021273 14746647661 0022353 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file defines the public interface to v8_debug_helper.

#ifndef V8_TOOLS_DEBUG_HELPER_DEBUG_HELPER_H_
#define V8_TOOLS_DEBUG_HELPER_DEBUG_HELPER_H_

#include <cstdint>
#include <memory>

#if defined(_WIN32)

#ifdef BUILDING_V8_DEBUG_HELPER
#define V8_DEBUG_HELPER_EXPORT __declspec(dllexport)
#elif USING_V8_DEBUG_HELPER
#define V8_DEBUG_HELPER_EXPORT __declspec(dllimport)
#else
#define V8_DEBUG_HELPER_EXPORT
#endif

#else  // defined(_WIN32)

#ifdef BUILDING_V8_DEBUG_HELPER
#define V8_DEBUG_HELPER_EXPORT __attribute__((visibility("default")))
#else
#define V8_DEBUG_HELPER_EXPORT
#endif

#endif  // defined(_WIN32)

namespace v8 {
namespace debug_helper {

// Possible results when attempting to fetch memory from the debuggee.
enum class MemoryAccessResult {
  kOk,
  kAddressNotValid,
  kAddressValidButInaccessible,  // Possible in incomplete dump.
};

// Information about how this tool discovered the type of the object.
enum class TypeCheckResult {
  // Success cases:
  kSmi,
  kWeakRef,
  kUsedMap,
  kKnownMapPointer,
  kUsedTypeHint,

  // Failure cases:
  kUnableToDecompress,  // Caller must provide the heap range somehow.
  kObjectPointerInvalid,
  kObjectPointerValidButInaccessible,  // Possible in incomplete dump.
  kMapPointerInvalid,
  kMapPointerValidButInaccessible,  // Possible in incomplete dump.
  kUnknownInstanceType,
  kUnknownTypeHint,
};

enum class PropertyKind {
  kSingle,
  kArrayOfKnownSize,
  kArrayOfUnknownSizeDueToInvalidMemory,
  kArrayOfUnknownSizeDueToValidButInaccessibleMemory,
};

struct PropertyBase {
  const char* name;

  // Statically-determined type, such as from .tq definition. Can be an empty
  // string if this property is itself a Torque-defined struct; in that case use
  // |struct_fields| instead. This type should be treated as if it were used in
  // the v8::internal namespace; that is, type "X::Y" can mean any of the
  // following, in order of decreasing preference:
  // - v8::internal::X::Y
  // - v8::X::Y
  // - X::Y
  const char* type;
};

struct StructProperty : public PropertyBase {
  // The offset from the beginning of the struct to this field.
  size_t offset;

  // The number of bits that are present, if this value is a bitfield. Zero
  // indicates that this value is not a bitfield (the full value is stored).
  uint8_t num_bits;

  // The number of bits by which this value has been left-shifted for storage as
  // a bitfield.
  uint8_t shift_bits;
};

struct ObjectProperty : public PropertyBase {
  // The address where the property value can be found in the debuggee's address
  // space, or the address of the first value for an array.
  uintptr_t address;

  // If kind indicates an array of unknown size, num_values will be 0 and debug
  // tools should display this property as a raw pointer. Note that there is a
  // semantic difference between num_values=1 and kind=kSingle (normal property)
  // versus num_values=1 and kind=kArrayOfKnownSize (one-element array).
  size_t num_values;

  // The number of bytes occupied by a single instance of the value type for
  // this property. This can also be used as the array stride because arrays are
  // tightly packed like in C.
  size_t size;

  // If the property is a struct made up of several pieces of data packed
  // together, then the |struct_fields| array contains descriptions of those
  // fields.
  size_t num_struct_fields;
  StructProperty** struct_fields;

  PropertyKind kind;
};

struct ObjectPropertiesResult {
  TypeCheckResult type_check_result;
  const char* brief;
  const char* type;  // Runtime type of the object.
  size_t num_properties;
  ObjectProperty** properties;

  // If not all relevant memory is available, GetObjectProperties may respond
  // with a technically correct but uninteresting type such as HeapObject, and
  // use other heuristics to make reasonable guesses about what specific type
  // the object actually is. You may request data about the same object again
  // using any of these guesses as the type hint, but the results should be
  // formatted to the user in a way that clearly indicates that they're only
  // guesses.
  size_t num_guessed_types;
  const char** guessed_types;
};

struct StackFrameResult {
  size_t num_properties;
  ObjectProperty** properties;
};

// Copies byte_count bytes of memory from the given address in the debuggee to
// the destination buffer.
typedef MemoryAccessResult (*MemoryAccessor)(uintptr_t address,
                                             void* destination,
                                             size_t byte_count);

// Additional data that can help GetObjectProperties to be more accurate. Any
// fields you don't know can be set to zero and this library will do the best it
// can with the information available.
struct HeapAddresses {
  // Beginning of allocated space for various kinds of data. These can help us
  // to detect certain common objects that are placed in memory during startup.
  // These values might be provided via name-value pairs in CrashPad dumps.
  // Otherwise, they can be obtained as follows:
  // 1. Get the Isolate pointer for the current thread. It might be somewhere on
  //    the stack, or it might be accessible from thread-local storage with the
  //    key stored in v8::internal::Isolate::isolate_key_.
  // 2. Get isolate->heap_.map_space_->memory_chunk_list_.front_ and similar for
  //    old_space_ and read_only_space_.
  uintptr_t map_space_first_page;
  uintptr_t old_space_first_page;
  uintptr_t read_only_space_first_page;

  // Any valid heap pointer address. On platforms where pointer compression is
  // enabled, this can allow us to get data from compressed pointers even if the
  // other data above is not provided.
  uintptr_t any_heap_pointer;

  // A pointer to the static array
  // v8::internal::MemoryChunk::metadata_pointer_table_.
  uintptr_t metadata_pointer_table;
};

}  // namespace debug_helper
}  // namespace v8

extern "C" {
// Raw library interface. If possible, use functions in v8::debug_helper
// namespace instead because they use smart pointers to prevent leaks.
V8_DEBUG_HELPER_EXPORT v8::debug_helper::ObjectPropertiesResult*
_v8_debug_helper_GetObjectProperties(
    uintptr_t object, v8::debug_helper::MemoryAccessor memory_accessor,
    const v8::debug_helper::HeapAddresses& heap_addresses,
    const char* type_hint);
V8_DEBUG_HELPER_EXPORT void _v8_debug_helper_Free_ObjectPropertiesResult(
    v8::debug_helper::ObjectPropertiesResult* result);
V8_DEBUG_HELPER_EXPORT v8::debug_helper::StackFrameResult*
_v8_debug_helper_GetStackFrame(
    uintptr_t frame_pointer, v8::debug_helper::MemoryAccessor memory_accessor);
V8_DEBUG_HELPER_EXPORT void _v8_debug_helper_Free_StackFrameResult(
    v8::debug_helper::StackFrameResult* result);
V8_DEBUG_HELPER_EXPORT const char* _v8_debug_helper_BitsetName(
    uint64_t payload);
}

namespace v8 {
namespace debug_helper {

struct DebugHelperObjectPropertiesResultDeleter {
  void operator()(v8::debug_helper::ObjectPropertiesResult* ptr) {
    _v8_debug_helper_Free_ObjectPropertiesResult(ptr);
  }
};
using ObjectPropertiesResultPtr =
    std::unique_ptr<ObjectPropertiesResult,
                    DebugHelperObjectPropertiesResultDeleter>;

// Get information about the given object pointer, which could be:
// - A tagged pointer, strong or weak
// - A cleared weak pointer
// - A compressed tagged pointer, zero-extended to 64 bits
// - A tagged small integer
// The type hint is only used if the object's Map is missing or corrupt. It
// should be the fully-qualified name of a class that inherits from
// v8::internal::Object.
inline ObjectPropertiesResultPtr GetObjectProperties(
    uintptr_t object, v8::debug_helper::MemoryAccessor memory_accessor,
    const HeapAddresses& heap_addresses, const char* type_hint = nullptr) {
  return ObjectPropertiesResultPtr(_v8_debug_helper_GetObjectProperties(
      object, memory_accessor, heap_addresses, type_hint));
}

// Return a bitset name for a v8::internal::compiler::Type with payload or null
// if the payload is not a bitset.
inline const char* BitsetName(uint64_t payload) {
  return _v8_debug_helper_BitsetName(payload);
}

struct DebugHelperStackFrameResultDeleter {
  void operator()(v8::debug_helper::StackFrameResult* ptr) {
    _v8_debug_helper_Free_StackFrameResult(ptr);
  }
};
using StackFrameResultPtr =
    std::unique_ptr<StackFrameResult, DebugHelperStackFrameResultDeleter>;

inline StackFrameResultPtr GetStackFrame(
    uintptr_t frame_pointer, v8::debug_helper::MemoryAccessor memory_accessor) {
  return StackFrameResultPtr(
      _v8_debug_helper_GetStackFrame(frame_pointer, memory_accessor));
}

}  // namespace debug_helper
}  // namespace v8

#endif
                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/debug_helper/debug-macro-shims.h                                          0000664 0000000 0000000 00000012522 14746647661 0023313 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2020 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file contains implementations of a few macros that are defined
// as external in Torque, so that generated debug code can work.

#ifndef V8_TORQUE_DEBUG_MACRO_SHIMS_H_
#define V8_TORQUE_DEBUG_MACRO_SHIMS_H_

#include "src/numbers/integer-literal.h"
#include "src/objects/smi.h"
#include "tools/debug_helper/debug-helper-internal.h"

// For Object::ReadField<T>.
#define READ_FIELD_OR_FAIL(Type, destination, accessor, object, offset) \
  do {                                                                  \
    Type value{};                                                       \
    d::MemoryAccessResult validity =                                    \
        accessor(object - kHeapObjectTag + offset,                      \
                 reinterpret_cast<Type*>(&value), sizeof(value));       \
    if (validity != d::MemoryAccessResult::kOk) return {validity, {}};  \
    destination = value;                                                \
  } while (false)

// For TaggedField<T>::load.
#define READ_TAGGED_FIELD_OR_FAIL(destination, accessor, object, offset) \
  do {                                                                   \
    Tagged_t value{};                                                    \
    d::MemoryAccessResult validity =                                     \
        accessor(object - kHeapObjectTag + offset,                       \
                 reinterpret_cast<uint8_t*>(&value), sizeof(value));     \
    if (validity != d::MemoryAccessResult::kOk) return {validity, {}};   \
    destination = EnsureDecompressed(value, object);                     \
  } while (false)

// Process Value struct.
#define ASSIGN_OR_RETURN(dest, val)                   \
  do {                                                \
    if ((val).validity != d::MemoryAccessResult::kOk) \
      return {(val).validity, {}};                    \
    dest = (val).value;                               \
  } while (false)

namespace v8 {
namespace internal {
namespace debug_helper_internal {
namespace TorqueDebugMacroShims {
namespace CodeStubAssembler {

inline Value<bool> BoolConstant(d::MemoryAccessor accessor, bool b) {
  return {d::MemoryAccessResult::kOk, b};
}
inline Value<intptr_t> ChangeInt32ToIntPtr(d::MemoryAccessor accessor,
                                           int32_t i) {
  return {d::MemoryAccessResult::kOk, i};
}
inline Value<uintptr_t> ChangeUint32ToWord(d::MemoryAccessor accessor,
                                           uint32_t u) {
  return {d::MemoryAccessResult::kOk, u};
}
inline Value<intptr_t> IntPtrAdd(d::MemoryAccessor accessor, intptr_t a,
                                 intptr_t b) {
  return {d::MemoryAccessResult::kOk, a + b};
}
inline Value<intptr_t> IntPtrMul(d::MemoryAccessor accessor, intptr_t a,
                                 intptr_t b) {
  return {d::MemoryAccessResult::kOk, a * b};
}
inline Value<bool> IntPtrLessThan(d::MemoryAccessor accessor, intptr_t a,
                                  intptr_t b) {
  return {d::MemoryAccessResult::kOk, a < b};
}
inline Value<bool> IntPtrLessThanOrEqual(d::MemoryAccessor accessor, intptr_t a,
                                         intptr_t b) {
  return {d::MemoryAccessResult::kOk, a <= b};
}
inline Value<intptr_t> Signed(d::MemoryAccessor accessor, uintptr_t u) {
  return {d::MemoryAccessResult::kOk, static_cast<intptr_t>(u)};
}
inline Value<int32_t> SmiUntag(d::MemoryAccessor accessor, uintptr_t s_t) {
  Tagged<Smi> s(s_t);
  return {d::MemoryAccessResult::kOk, s.value()};
}
inline Value<uintptr_t> SmiFromInt32(d::MemoryAccessor accessor, int32_t i) {
  return {d::MemoryAccessResult::kOk, Smi::FromInt(i).ptr()};
}
inline Value<bool> UintPtrLessThan(d::MemoryAccessor accessor, uintptr_t a,
                                   uintptr_t b) {
  return {d::MemoryAccessResult::kOk, a < b};
}
inline Value<uint32_t> Unsigned(d::MemoryAccessor accessor, int32_t s) {
  return {d::MemoryAccessResult::kOk, static_cast<uint32_t>(s)};
}
#if V8_HOST_ARCH_64_BIT
inline Value<uintptr_t> Unsigned(d::MemoryAccessor accessor, intptr_t s) {
  return {d::MemoryAccessResult::kOk, static_cast<uintptr_t>(s)};
}
#endif
inline Value<bool> Word32Equal(d::MemoryAccessor accessor, uint32_t a,
                               uint32_t b) {
  return {d::MemoryAccessResult::kOk, a == b};
}
inline Value<bool> Word32NotEqual(d::MemoryAccessor accessor, uint32_t a,
                                  uint32_t b) {
  return {d::MemoryAccessResult::kOk, a != b};
}
// This is used in a nested call where we cannot pass Value<int32_t>.
inline int31_t ConstexprIntegerLiteralToInt31(d::MemoryAccessor accessor,
                                              const IntegerLiteral& i) {
  return i.To<int32_t>();
}
inline int32_t ConstexprIntegerLiteralToInt32(d::MemoryAccessor accessor,
                                              const IntegerLiteral& i) {
  return i.To<int32_t>();
}
inline intptr_t ConstexprIntegerLiteralToIntptr(d::MemoryAccessor accessor,
                                                const IntegerLiteral& i) {
  return i.To<intptr_t>();
}

}  // namespace CodeStubAssembler
}  // namespace TorqueDebugMacroShims
}  // namespace debug_helper_internal
}  // namespace internal
}  // namespace v8

#endif  // V8_TORQUE_DEBUG_MACRO_SHIMS_H_
                                                                                                                                                                              node-23.7.0/deps/v8/tools/debug_helper/gen-heap-constants.py                                        0000664 0000000 0000000 00000006551 14746647661 0023711 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2019 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""This program writes a C++ file that can be used to look up whether a given
address matches known object locations. The first argument is the directory
containing the file v8heapconst.py; the second argument is the output .cc file.
"""

import sys
sys.path.insert(0, sys.argv[1])
import v8heapconst

out = """
#include <cstdint>
#include <string>

#include "src/common/ptr-compr-inl.h"
#include "tools/debug_helper/debug-helper-internal.h"

namespace v8 {
namespace internal {
namespace debug_helper_internal {
"""

def iterate_objects(target_space, camel_space_name):
  global out
  result = []
  for (space, offset), (instance_type, name) in v8heapconst.KNOWN_MAPS.items():
    if space == target_space:
      result.append((offset, name))
  for (space, offset), name in v8heapconst.KNOWN_OBJECTS.items():
    if space == target_space and (space, offset) not in v8heapconst.KNOWN_MAPS:
      result.append((offset, name))
  out = out + '\nstd::string FindKnownObjectIn' + camel_space_name \
      + '(uintptr_t offset) {\n  switch (offset) {\n'
  for offset, name in result:
    out = out + '    case ' + str(offset) + ': return "' + name + '";\n'
  out = out + '    default: return "";\n  }\n}\n'

iterate_objects('map_space', 'MapSpace')
iterate_objects('old_space', 'OldSpace')
iterate_objects('read_only_space', 'ReadOnlySpace')


def iterate_maps(target_space, camel_space_name):
  global out
  out = out + '\nint FindKnownMapInstanceTypeIn' + camel_space_name \
      + '(uintptr_t offset) {\n  switch (offset) {\n'
  for (space, offset), (instance_type, name) in v8heapconst.KNOWN_MAPS.items():
    if space == target_space:
      out = out + '    case ' + str(offset) + ': return ' + str(instance_type) \
          + ';\n'
  out = out + '    default: return -1;\n  }\n}\n'

iterate_maps('map_space', 'MapSpace')
iterate_maps('old_space', 'OldSpace')
iterate_maps('read_only_space', 'ReadOnlySpace')

out = out + '\nvoid FillInUnknownHeapAddresses(' + \
    'd::HeapAddresses* heap_addresses, uintptr_t any_uncompressed_ptr) {\n'
if (hasattr(v8heapconst, 'HEAP_FIRST_PAGES')):  # Only exists in ptr-compr builds.
  out = out + '  if (heap_addresses->any_heap_pointer == 0) {\n'
  out = out + '    heap_addresses->any_heap_pointer = any_uncompressed_ptr;\n'
  out = out + '  }\n'
  # If we ever try to apply this to CodeSpace we might need to use
  # ExternalCodeCompressionScheme instead of V8HeapCompressionScheme for
  # decompressing external code pointers below.
  expected_spaces = set(['map_space', 'read_only_space', 'old_space'])
  for offset, space_name in v8heapconst.HEAP_FIRST_PAGES.items():
    if (space_name in expected_spaces):
      out = out + '  if (heap_addresses->' + space_name + '_first_page == 0) {\n'
      out = out + '    heap_addresses->' + space_name + \
          '_first_page = i::V8HeapCompressionScheme::DecompressTagged(' + \
          'any_uncompressed_ptr, ' + str(offset) + ');\n'
      out = out + '  }\n'
out = out + '}\n'

out = out + '\n}\n}\n}\n'

try:
  with open(sys.argv[2], "r") as out_file:
    if out == out_file.read():
      sys.exit(0)  # No modification needed.
except:
  pass  # File probably doesn't exist; write it.
with open(sys.argv[2], "w") as out_file:
  out_file.write(out)
                                                                                                                                                       node-23.7.0/deps/v8/tools/debug_helper/get-object-properties.cc                                     0000664 0000000 0000000 00000105245 14746647661 0024365 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <optional>
#include <sstream>

#include "debug-helper-internal.h"
#include "heap-constants.h"
#include "include/v8-internal.h"
#include "src/execution/frame-constants.h"
#include "src/execution/frames.h"
#include "src/execution/isolate-utils.h"
#include "src/objects/string-inl.h"
#include "src/sandbox/external-pointer.h"
#include "src/strings/unicode-inl.h"
#include "torque-generated/class-debug-readers.h"
#include "torque-generated/debug-macros.h"

namespace i = v8::internal;

namespace v8::internal::debug_helper_internal {

constexpr char kTaggedValue[] = "v8::internal::TaggedValue";
constexpr char kSmi[] = "v8::internal::Smi";
constexpr char kHeapObject[] = "v8::internal::HeapObject";
constexpr char kObjectAsStoredInHeap[] =
    "v8::internal::TaggedMember<v8::internal::Object>";

std::string AppendAddressAndType(const std::string& brief, uintptr_t address,
                                 const char* type) {
  std::stringstream brief_stream;
  brief_stream << "0x" << std::hex << address << " <" << type << ">";
  return brief.empty() ? brief_stream.str()
                       : brief + " (" + brief_stream.str() + ")";
}

std::string JoinWithSpace(const std::string& a, const std::string& b) {
  return a.empty() || b.empty() ? a + b : a + " " + b;
}

struct TypedObject {
  TypedObject(d::TypeCheckResult type_check_result,
              std::unique_ptr<TqObject> object)
      : type_check_result(type_check_result), object(std::move(object)) {}

  // How we discovered the object's type, or why we failed to do so.
  d::TypeCheckResult type_check_result;

  // Pointer to some TqObject subclass, representing the most specific known
  // type for the object.
  std::unique_ptr<TqObject> object;

  // Collection of other guesses at more specific types than the one represented
  // by |object|.
  std::vector<TypedObject> possible_types;
};

TypedObject GetTypedObjectByHint(uintptr_t address,
                                 std::string type_hint_string) {
#define TYPE_NAME_CASE(ClassName, ...)                   \
  if (type_hint_string == "v8::internal::" #ClassName) { \
    return {d::TypeCheckResult::kUsedTypeHint,           \
            std::make_unique<Tq##ClassName>(address)};   \
  }

  TORQUE_INSTANCE_CHECKERS_SINGLE_FULLY_DEFINED(TYPE_NAME_CASE)
  TORQUE_INSTANCE_CHECKERS_RANGE_FULLY_DEFINED(TYPE_NAME_CASE)
  STRING_CLASS_TYPES(TYPE_NAME_CASE)

#undef TYPE_NAME_CASE

  return {d::TypeCheckResult::kUnknownTypeHint,
          std::make_unique<TqHeapObject>(address)};
}

TypedObject GetTypedObjectForString(uintptr_t address, i::InstanceType type,
                                    d::TypeCheckResult type_source) {
  class StringGetDispatcher : public i::AllStatic {
   public:
#define DEFINE_METHOD(ClassName)                                    \
  static inline TypedObject Handle##ClassName(                      \
      uintptr_t address, d::TypeCheckResult type_source) {          \
    return {type_source, std::make_unique<Tq##ClassName>(address)}; \
  }
    STRING_CLASS_TYPES(DEFINE_METHOD)
#undef DEFINE_METHOD
    static inline TypedObject HandleInvalidString(
        uintptr_t address, d::TypeCheckResult type_source) {
      return {d::TypeCheckResult::kUnknownInstanceType,
              std::make_unique<TqString>(address)};
    }
  };

  return i::StringShape(type)
      .DispatchToSpecificTypeWithoutCast<StringGetDispatcher, TypedObject>(
          address, type_source);
}

TypedObject GetTypedObjectByInstanceType(uintptr_t address,
                                         i::InstanceType type,
                                         d::TypeCheckResult type_source) {
  switch (type) {
#define INSTANCE_TYPE_CASE(ClassName, INSTANCE_TYPE) \
  case i::INSTANCE_TYPE:                             \
    return {type_source, std::make_unique<Tq##ClassName>(address)};
    TORQUE_INSTANCE_CHECKERS_SINGLE_FULLY_DEFINED(INSTANCE_TYPE_CASE)
    TORQUE_INSTANCE_CHECKERS_MULTIPLE_FULLY_DEFINED(INSTANCE_TYPE_CASE)
#undef INSTANCE_TYPE_CASE

    default:

      // Special case: concrete subtypes of String are not included in the
      // main instance type list because they use the low bits of the instance
      // type enum as flags.
      if (type <= i::LAST_STRING_TYPE) {
        return GetTypedObjectForString(address, type, type_source);
      }

#define INSTANCE_RANGE_CASE(ClassName, FIRST_TYPE, LAST_TYPE)       \
  if (type >= i::FIRST_TYPE && type <= i::LAST_TYPE) {              \
    return {type_source, std::make_unique<Tq##ClassName>(address)}; \
  }
      TORQUE_INSTANCE_CHECKERS_RANGE_FULLY_DEFINED(INSTANCE_RANGE_CASE)
#undef INSTANCE_RANGE_CASE

      return {d::TypeCheckResult::kUnknownInstanceType,
              std::make_unique<TqHeapObject>(address)};
  }
}

bool IsTypedHeapObjectInstanceTypeOf(uintptr_t address,
                                     d::MemoryAccessor accessor,
                                     i::InstanceType instance_type) {
  auto heap_object = std::make_unique<TqHeapObject>(address);
  Value<uintptr_t> map_ptr = heap_object->GetMapValue(accessor);

  if (map_ptr.validity == d::MemoryAccessResult::kOk) {
    Value<i::InstanceType> type =
        TqMap(map_ptr.value).GetInstanceTypeValue(accessor);
    if (type.validity == d::MemoryAccessResult::kOk) {
      return instance_type == type.value;
    }
  }

  return false;
}

TypedObject GetTypedHeapObject(uintptr_t address, d::MemoryAccessor accessor,
                               const char* type_hint,
                               const d::HeapAddresses& heap_addresses) {
  auto heap_object = std::make_unique<TqHeapObject>(address);
  Value<uintptr_t> map_ptr = heap_object->GetMapValue(accessor);

  if (map_ptr.validity != d::MemoryAccessResult::kOk) {
    // If we can't read the Map pointer from the object, then we likely can't
    // read anything else, so there's not any point in attempting to use the
    // type hint. Just return a failure.
    return {map_ptr.validity == d::MemoryAccessResult::kAddressNotValid
                ? d::TypeCheckResult::kObjectPointerInvalid
                : d::TypeCheckResult::kObjectPointerValidButInaccessible,
            std::move(heap_object)};
  }

  Value<i::InstanceType> type =
      TqMap(map_ptr.value).GetInstanceTypeValue(accessor);
  if (type.validity == d::MemoryAccessResult::kOk) {
    return GetTypedObjectByInstanceType(address, type.value,
                                        d::TypeCheckResult::kUsedMap);
  }

  // We can't read the Map, so check whether it is in the list of known Maps,
  // as another way to get its instance type.
  KnownInstanceType known_map_type =
      FindKnownMapInstanceTypes(map_ptr.value, heap_addresses);
  if (known_map_type.confidence == KnownInstanceType::Confidence::kHigh) {
    DCHECK_EQ(known_map_type.types.size(), 1);
    return GetTypedObjectByInstanceType(address, known_map_type.types[0],
                                        d::TypeCheckResult::kKnownMapPointer);
  }

  // Create a basic result that says that the object is a HeapObject and we
  // couldn't read its Map.
  TypedObject result = {
      type.validity == d::MemoryAccessResult::kAddressNotValid
          ? d::TypeCheckResult::kMapPointerInvalid
          : d::TypeCheckResult::kMapPointerValidButInaccessible,
      std::move(heap_object)};

  // If a type hint is available, it may give us something more specific than
  // HeapObject. However, a type hint of Object would be even less specific, so
  // we'll only use the type hint if it's a subclass of HeapObject.
  if (type_hint != nullptr) {
    TypedObject hint_result = GetTypedObjectByHint(address, type_hint);
    if (result.object->IsSuperclassOf(hint_result.object.get())) {
      result = std::move(hint_result);
    }
  }

  // If low-confidence results are available from known Maps, include them only
  // if they don't contradict the primary type and would provide some additional
  // specificity.
  for (const i::InstanceType type_guess : known_map_type.types) {
    TypedObject guess_result = GetTypedObjectByInstanceType(
        address, type_guess, d::TypeCheckResult::kKnownMapPointer);
    if (result.object->IsSuperclassOf(guess_result.object.get())) {
      result.possible_types.push_back(std::move(guess_result));
    }
  }

  return result;
}

// An object visitor that accumulates the first few characters of a string.
class ReadStringVisitor : public TqObjectVisitor {
 public:
  struct Result {
    std::optional<std::string> maybe_truncated_string;
    std::unique_ptr<ObjectProperty> maybe_raw_characters_property;
  };
  static Result Visit(d::MemoryAccessor accessor,
                      const d::HeapAddresses& heap_addresses,
                      const TqString* object) {
    ReadStringVisitor visitor(accessor, heap_addresses);
    object->Visit(&visitor);
    return {visitor.GetString(), visitor.GetRawCharactersProperty()};
  }

  // Returns the result as UTF-8 once visiting is complete.
  std::optional<std::string> GetString() {
    if (failed_) return {};
    std::vector<char> result(
        string_.size() * unibrow::Utf16::kMaxExtraUtf8BytesForOneUtf16CodeUnit);
    unsigned write_index = 0;
    int prev_char = unibrow::Utf16::kNoPreviousCharacter;
    for (size_t read_index = 0; read_index < string_.size(); ++read_index) {
      uint16_t character = string_[read_index];
      write_index +=
          unibrow::Utf8::Encode(result.data() + write_index, character,
                                prev_char, /*replace_invalid=*/true);
      prev_char = character;
    }
    return std::string(result.data(), write_index);
  }

  // Returns a property referring to the address of the flattened character
  // array, if possible, once visiting is complete.
  std::unique_ptr<ObjectProperty> GetRawCharactersProperty() {
    if (failed_ || raw_characters_address_ == 0) return {};
    DCHECK(size_per_character_ == 1 || size_per_character_ == 2);
    const char* type = size_per_character_ == 1 ? "char" : "char16_t";
    return std::make_unique<ObjectProperty>(
        "raw_characters", type, raw_characters_address_, num_characters_,
        size_per_character_, std::vector<std::unique_ptr<StructProperty>>(),
        d::PropertyKind::kArrayOfKnownSize);
  }

  template <typename T>
  Value<T> ReadValue(uintptr_t data_address, int32_t index = 0) {
    T value{};
    d::MemoryAccessResult validity =
        accessor_(data_address + index * sizeof(T),
                  reinterpret_cast<uint8_t*>(&value), sizeof(value));
    return {validity, value};
  }

  template <typename TChar>
  void ReadStringCharacters(const TqString* object, uintptr_t data_address) {
    int32_t length = GetOrFinish(object->GetLengthValue(accessor_));
    if (string_.size() == 0) {
      raw_characters_address_ = data_address + index_ * sizeof(TChar);
      size_per_character_ = sizeof(TChar);
      num_characters_ = std::min(length, limit_) - index_;
    }
    for (; index_ < length && index_ < limit_ && !done_; ++index_) {
      static_assert(sizeof(TChar) <= sizeof(char16_t));
      char16_t c = static_cast<char16_t>(
          GetOrFinish(ReadValue<TChar>(data_address, index_)));
      if (!done_) AddCharacter(c);
    }
  }

  template <typename TChar, typename TString>
  void ReadSeqString(const TString* object) {
    ReadStringCharacters<TChar>(object, object->GetCharsAddress());
  }

  void VisitSeqOneByteString(const TqSeqOneByteString* object) override {
    ReadSeqString<char>(object);
  }

  void VisitSeqTwoByteString(const TqSeqTwoByteString* object) override {
    ReadSeqString<char16_t>(object);
  }

  void VisitConsString(const TqConsString* object) override {
    uintptr_t first_address = GetOrFinish(object->GetFirstValue(accessor_));
    if (done_) return;
    auto first =
        GetTypedHeapObject(first_address, accessor_, nullptr, heap_addresses_)
            .object;
    first->Visit(this);
    // Cons strings don't have all of their characters in a contiguous memory
    // region, so it would be confusing to show the user a raw pointer to the
    // character storage for only part of the cons string.
    raw_characters_address_ = 0;
    if (done_) return;
    int32_t first_length = GetOrFinish(
        static_cast<TqString*>(first.get())->GetLengthValue(accessor_));
    uintptr_t second = GetOrFinish(object->GetSecondValue(accessor_));
    if (done_) return;
    IndexModifier modifier(this, -first_length, -first_length);
    GetTypedHeapObject(second, accessor_, nullptr, heap_addresses_)
        .object->Visit(this);
  }

  void VisitSlicedString(const TqSlicedString* object) override {
    uintptr_t parent = GetOrFinish(object->GetParentValue(accessor_));
    int32_t length = GetOrFinish(object->GetLengthValue(accessor_));
    int32_t offset = i::PlatformSmiTagging::SmiToInt(
        GetOrFinish(object->GetOffsetValue(accessor_)));
    if (done_) return;
    int32_t limit_adjust = offset + length - limit_;
    IndexModifier modifier(this, offset, limit_adjust < 0 ? limit_adjust : 0);
    GetTypedHeapObject(parent, accessor_, nullptr, heap_addresses_)
        .object->Visit(this);
  }

  void VisitThinString(const TqThinString* object) override {
    uintptr_t actual = GetOrFinish(object->GetActualValue(accessor_));
    if (done_) return;
    GetTypedHeapObject(actual, accessor_, nullptr, heap_addresses_)
        .object->Visit(this);
  }

  bool IsExternalStringCached(const TqExternalString* object) {
    // The safest way to get the instance type is to use known map pointers, in
    // case the map data is not available.
    Value<uintptr_t> map_ptr = object->GetMapValue(accessor_);
    DCHECK_IMPLIES(map_ptr.validity == d::MemoryAccessResult::kOk,
                   !v8::internal::MapWord::IsPacked(map_ptr.value));
    uintptr_t map = GetOrFinish(map_ptr);
    if (done_) return false;
    auto instance_types = FindKnownMapInstanceTypes(map, heap_addresses_);
    // Exactly one of the matched instance types should be a string type,
    // because all maps for string types are in the same space (read-only
    // space). The "uncached" flag on that instance type tells us whether it's
    // safe to read the cached data.
    for (const auto& type : instance_types.types) {
      if ((type & i::kIsNotStringMask) == i::kStringTag &&
          (type & i::kStringRepresentationMask) == i::kExternalStringTag) {
        return (type & i::kUncachedExternalStringMask) !=
               i::kUncachedExternalStringTag;
      }
    }

    // If for some reason we can't find an external string type here (maybe the
    // caller provided an external string type as the type hint, but it doesn't
    // actually match the in-memory map pointer), then we can't safely use the
    // cached data.
    return false;
  }

  template <typename TChar>
  void ReadExternalString(const TqExternalString* object) {
    // Uncached external strings require knowledge of the embedder. For now, we
    // only read cached external strings.
    if (IsExternalStringCached(object)) {
      ExternalPointer_t resource_data =
          GetOrFinish(object->GetResourceDataValue(accessor_));
#ifdef V8_ENABLE_SANDBOX
      Address memory_chunk =
          MemoryChunk::FromAddress(object->GetMapAddress())->address();
      uint32_t metadata_index = GetOrFinish(ReadValue<uint32_t>(
          memory_chunk + MemoryChunkLayout::kMetadataIndexOffset));
      Address metadata_address = GetOrFinish(ReadValue<Address>(
          heap_addresses_.metadata_pointer_table, metadata_index));
      Address heap = GetOrFinish(ReadValue<Address>(
          metadata_address + MemoryChunkLayout::kHeapOffset));
      Isolate* isolate = Isolate::FromHeap(reinterpret_cast<Heap*>(heap));
      Address external_pointer_table_address_address =
          isolate->shared_external_pointer_table_address_address();
      Address external_pointer_table_address = GetOrFinish(
          ReadValue<Address>(external_pointer_table_address_address));
      Address external_pointer_table =
          GetOrFinish(ReadValue<Address>(external_pointer_table_address));
      int32_t index =
          static_cast<int32_t>(resource_data >> kExternalPointerIndexShift);
      Address tagged_data =
          GetOrFinish(ReadValue<Address>(external_pointer_table, index));
      Address data_address = tagged_data & ~kExternalStringResourceDataTag;
#else
      uintptr_t data_address = static_cast<uintptr_t>(resource_data);
#endif  // V8_ENABLE_SANDBOX
      if (done_) return;
      ReadStringCharacters<TChar>(object, data_address);
    } else {
      // TODO(v8:9376): Come up with some way that a caller with full knowledge
      // of a particular embedder could provide a callback function for getting
      // uncached string data.
      AddEllipsisAndFinish();
    }
  }

  void VisitExternalOneByteString(
      const TqExternalOneByteString* object) override {
    ReadExternalString<char>(object);
  }

  void VisitExternalTwoByteString(
      const TqExternalTwoByteString* object) override {
    ReadExternalString<char16_t>(object);
  }

  void VisitObject(const TqObject* object) override {
    // If we fail to find a specific type for a sub-object within a cons string,
    // sliced string, or thin string, we will end up here.
    AddEllipsisAndFinish();
  }

 private:
  ReadStringVisitor(d::MemoryAccessor accessor,
                    const d::HeapAddresses& heap_addresses)
      : accessor_(accessor),
        heap_addresses_(heap_addresses),
        index_(0),
        limit_(INT32_MAX),
        done_(false),
        failed_(false) {}

  // Unpacks a value that was fetched from the debuggee. If the value indicates
  // that it couldn't successfully fetch memory, then prevents further work.
  template <typename T>
  T GetOrFinish(Value<T> value) {
    if (value.validity != d::MemoryAccessResult::kOk) {
      AddEllipsisAndFinish();
    }
    return value.value;
  }

  void AddEllipsisAndFinish() {
    if (!done_) {
      done_ = true;
      if (string_.empty()) {
        failed_ = true;
      } else {
        string_ += u"...";
      }
    }
  }

  void AddCharacter(char16_t c) {
    if (string_.size() >= kMaxCharacters) {
      AddEllipsisAndFinish();
    } else {
      string_.push_back(c);
    }
  }

  // Temporarily adds offsets to both index_ and limit_, to handle ConsString
  // and SlicedString.
  class IndexModifier {
   public:
    IndexModifier(ReadStringVisitor* that, int32_t index_adjust,
                  int32_t limit_adjust)
        : that_(that),
          index_adjust_(index_adjust),
          limit_adjust_(limit_adjust) {
      that_->index_ += index_adjust_;
      that_->limit_ += limit_adjust_;
    }
    IndexModifier(const IndexModifier&) = delete;
    IndexModifier& operator=(const IndexModifier&) = delete;
    ~IndexModifier() {
      that_->index_ -= index_adjust_;
      that_->limit_ -= limit_adjust_;
    }

   private:
    ReadStringVisitor* that_;
    int32_t index_adjust_;
    int32_t limit_adjust_;
  };

  static constexpr int kMaxCharacters = 80;  // How many characters to print.

  std::u16string string_;  // Result string.
  d::MemoryAccessor accessor_;
  const d::HeapAddresses& heap_addresses_;
  int32_t index_;  // Index of next char to read.
  int32_t limit_;  // Don't read past this index (set by SlicedString).
  bool done_;      // Whether to stop further work.
  bool failed_;    // Whether an error was encountered before any valid data.

  // If the string's characters are in a contiguous block of memory (including
  // sequential strings, external strings where we could determine the raw data
  // location, and thin or sliced strings pointing to either of those), then
  // after this visitor has run, the character data's address, size per
  // character, and number of characters will be present in the following
  // fields.
  Address raw_characters_address_ = 0;
  int32_t size_per_character_ = 0;
  int32_t num_characters_ = 0;
};

// An object visitor that supplies extra information for some types.
class AddInfoVisitor : public TqObjectVisitor {
 public:
  // Returns a descriptive string and a list of properties for the given object.
  // Both may be empty, and are meant as an addition or a replacement for,
  // the Torque-generated data about the object.
  static std::pair<std::string, std::vector<std::unique_ptr<ObjectProperty>>>
  Visit(const TqObject* object, d::MemoryAccessor accessor,
        const d::HeapAddresses& heap_addresses) {
    AddInfoVisitor visitor(accessor, heap_addresses);
    object->Visit(&visitor);
    return {std::move(visitor.brief_), std::move(visitor.properties_)};
  }

  void VisitStringImpl(const TqString* object, bool is_sequential) {
    auto visit_result =
        ReadStringVisitor::Visit(accessor_, heap_addresses_, object);
    auto str = visit_result.maybe_truncated_string;
    if (str.has_value()) {
      brief_ = "\"" + *str + "\"";
    }
    // Sequential strings already have a "chars" property based on the Torque
    // type definition, so there's no need to duplicate it. Otherwise, it is
    // useful to display a pointer to the flattened character data if possible.
    if (!is_sequential && visit_result.maybe_raw_characters_property) {
      properties_.push_back(
          std::move(visit_result.maybe_raw_characters_property));
    }
  }

  void VisitString(const TqString* object) override {
    VisitStringImpl(object, /*is_sequential=*/false);
  }

  void VisitSeqString(const TqSeqString* object) override {
    VisitStringImpl(object, /*is_sequential=*/true);
  }

  void VisitJSObject(const TqJSObject* object) override {
    // JSObject and its subclasses can be followed directly by an array of
    // property values. The start and end offsets of those values are described
    // by a pair of values in its Map.
    auto map_ptr = object->GetMapValue(accessor_);
    if (map_ptr.validity != d::MemoryAccessResult::kOk) {
      return;  // Can't read the JSObject. Nothing useful to do.
    }
    DCHECK(!v8::internal::MapWord::IsPacked(map_ptr.value));
    TqMap map(map_ptr.value);

    // On JSObject instances, this value is the start of in-object properties.
    // The constructor function index option is only for primitives.
    auto start_offset =
        map.GetInobjectPropertiesStartOrConstructorFunctionIndexValue(
            accessor_);

    // The total size of the object in memory. This may include over-allocated
    // expansion space that doesn't correspond to any user-accessible property.
    auto instance_size = map.GetInstanceSizeInWordsValue(accessor_);

    if (start_offset.validity != d::MemoryAccessResult::kOk ||
        instance_size.validity != d::MemoryAccessResult::kOk) {
      return;  // Can't read the Map. Nothing useful to do.
    }
    int num_properties = instance_size.value - start_offset.value;
    if (num_properties > 0) {
      properties_.push_back(std::make_unique<ObjectProperty>(
          "in-object properties", kObjectAsStoredInHeap,
          object->GetMapAddress() + start_offset.value * i::kTaggedSize,
          num_properties, i::kTaggedSize,
          std::vector<std::unique_ptr<StructProperty>>(),
          d::PropertyKind::kArrayOfKnownSize));
    }
  }

 private:
  AddInfoVisitor(d::MemoryAccessor accessor,
                 const d::HeapAddresses& heap_addresses)
      : accessor_(accessor), heap_addresses_(heap_addresses) {}

  // Inputs used by this visitor:

  d::MemoryAccessor accessor_;
  const d::HeapAddresses& heap_addresses_;

  // Outputs generated by this visitor:

  // A brief description of the object.
  std::string brief_;
  // A list of extra properties to append after the automatic ones that are
  // created for all Torque-defined class fields.
  std::vector<std::unique_ptr<ObjectProperty>> properties_;
};

std::unique_ptr<ObjectPropertiesResult> GetHeapObjectPropertiesNotCompressed(
    uintptr_t address, d::MemoryAccessor accessor, const char* type_hint,
    const d::HeapAddresses& heap_addresses) {
  // Regardless of whether we can read the object itself, maybe we can find its
  // pointer in the list of known objects.
  std::string brief = FindKnownObject(address, heap_addresses);

  TypedObject typed =
      GetTypedHeapObject(address, accessor, type_hint, heap_addresses);
  auto props = typed.object->GetProperties(accessor);

  // Use the AddInfoVisitor to get any extra properties or descriptive text that
  // can't be directly derived from Torque class definitions.
  auto extra_info =
      AddInfoVisitor::Visit(typed.object.get(), accessor, heap_addresses);
  brief = JoinWithSpace(brief, extra_info.first);

  // Overwrite existing properties if they have the same name.
  for (size_t i = 0; i < extra_info.second.size(); i++) {
    bool overwrite = false;
    for (size_t j = 0; j < props.size(); j++) {
      if (strcmp(props[j]->GetPublicView()->name,
                 extra_info.second[i]->GetPublicView()->name) == 0) {
        props[j] = std::move(extra_info.second[i]);
        overwrite = true;
        break;
      }
    }
    if (overwrite) continue;
    props.push_back(std::move(extra_info.second[i]));
  }

  brief = AppendAddressAndType(brief, address, typed.object->GetName());

  // Convert the low-confidence guessed types to a list of strings as expected
  // for the response.
  std::vector<std::string> guessed_types;
  for (const auto& guess : typed.possible_types) {
    guessed_types.push_back(guess.object->GetName());
  }

  return std::make_unique<ObjectPropertiesResult>(
      typed.type_check_result, brief, typed.object->GetName(), std::move(props),
      std::move(guessed_types));
}

std::unique_ptr<ObjectPropertiesResult> GetHeapObjectPropertiesMaybeCompressed(
    uintptr_t address, d::MemoryAccessor memory_accessor,
    d::HeapAddresses heap_addresses, const char* type_hint) {
  // Try to figure out the heap range, for pointer compression (this is unused
  // if pointer compression is disabled).
  uintptr_t any_uncompressed_ptr = 0;
  if (!IsPointerCompressed(address)) any_uncompressed_ptr = address;
  if (any_uncompressed_ptr == 0)
    any_uncompressed_ptr = heap_addresses.any_heap_pointer;
  if (any_uncompressed_ptr == 0)
    any_uncompressed_ptr = heap_addresses.map_space_first_page;
  if (any_uncompressed_ptr == 0)
    any_uncompressed_ptr = heap_addresses.old_space_first_page;
  if (any_uncompressed_ptr == 0)
    any_uncompressed_ptr = heap_addresses.read_only_space_first_page;
#ifdef V8_COMPRESS_POINTERS
  Address base =
      V8HeapCompressionScheme::GetPtrComprCageBaseAddress(any_uncompressed_ptr);
  if (base != V8HeapCompressionScheme::base()) {
    V8HeapCompressionScheme::InitBase(base);
  }
#endif  // V8_COMPRESS_POINTERS
  FillInUnknownHeapAddresses(&heap_addresses, any_uncompressed_ptr);
  if (any_uncompressed_ptr == 0) {
    // We can't figure out the heap range. Just check for known objects.
    std::string brief = FindKnownObject(address, heap_addresses);
    brief = AppendAddressAndType(brief, address, kTaggedValue);
    return std::make_unique<ObjectPropertiesResult>(
        d::TypeCheckResult::kUnableToDecompress, brief, kTaggedValue);
  }

  address = EnsureDecompressed(address, any_uncompressed_ptr);

  return GetHeapObjectPropertiesNotCompressed(address, memory_accessor,
                                              type_hint, heap_addresses);
}

std::unique_ptr<ObjectPropertiesResult> GetObjectProperties(
    uintptr_t address, d::MemoryAccessor memory_accessor,
    const d::HeapAddresses& heap_addresses, const char* type_hint) {
  if (static_cast<uint32_t>(address) == i::kClearedWeakHeapObjectLower32) {
    return std::make_unique<ObjectPropertiesResult>(
        d::TypeCheckResult::kWeakRef, "cleared weak ref", kHeapObject);
  }
  bool is_weak = (address & i::kHeapObjectTagMask) == i::kWeakHeapObjectTag;
  if (is_weak) {
    address &= ~i::kWeakHeapObjectMask;
  }
  if (i::Internals::HasHeapObjectTag(address)) {
    std::unique_ptr<ObjectPropertiesResult> result =
        GetHeapObjectPropertiesMaybeCompressed(address, memory_accessor,
                                               heap_addresses, type_hint);
    if (is_weak) {
      result->Prepend("weak ref to ");
    }
    return result;
  }

  // For smi values, construct a response with a description representing the
  // untagged value.
  int32_t value = i::PlatformSmiTagging::SmiToInt(address);
  std::stringstream stream;
  stream << value << " (0x" << std::hex << value << ")";
  return std::make_unique<ObjectPropertiesResult>(d::TypeCheckResult::kSmi,
                                                  stream.str(), kSmi);
}

std::unique_ptr<StackFrameResult> GetStackFrame(
    uintptr_t frame_pointer, d::MemoryAccessor memory_accessor) {
  // Read the data at frame_pointer + kContextOrFrameTypeOffset.
  intptr_t context_or_frame_type = 0;
  d::MemoryAccessResult validity = memory_accessor(
      frame_pointer + CommonFrameConstants::kContextOrFrameTypeOffset,
      reinterpret_cast<void*>(&context_or_frame_type), sizeof(intptr_t));
  auto props = std::vector<std::unique_ptr<ObjectProperty>>();
  if (validity == d::MemoryAccessResult::kOk) {
    // If it is context, not frame marker then add new property
    // "currently_executing_function".
    if (!StackFrame::IsTypeMarker(context_or_frame_type)) {
      props.push_back(std::make_unique<ObjectProperty>(
          "currently_executing_jsfunction",
          CheckTypeName<v8::internal::Tagged<v8::internal::JSFunction>>(
              "v8::internal::Tagged<v8::internal::JSFunction>"),
          frame_pointer + StandardFrameConstants::kFunctionOffset, 1,
          sizeof(v8::internal::JSFunction),
          std::vector<std::unique_ptr<StructProperty>>(),
          d::PropertyKind::kSingle));
      // Add more items in the Locals pane representing the JS function name,
      // source file name, and line & column numbers within the source file, so
      // that the user doesn’t need to dig through the shared_function_info to
      // find them.
      intptr_t js_function_ptr = 0;
      validity = memory_accessor(
          frame_pointer + StandardFrameConstants::kFunctionOffset,
          reinterpret_cast<void*>(&js_function_ptr), sizeof(intptr_t));
      if (validity == d::MemoryAccessResult::kOk) {
        TqJSFunction js_function(js_function_ptr);
        auto shared_function_info_ptr =
            js_function.GetSharedFunctionInfoValue(memory_accessor);
        if (shared_function_info_ptr.validity == d::MemoryAccessResult::kOk) {
          TqSharedFunctionInfo shared_function_info(
              shared_function_info_ptr.value);
          auto script_ptr =
              shared_function_info.GetScriptValue(memory_accessor);
          if (script_ptr.validity == d::MemoryAccessResult::kOk) {
            // Make sure script_ptr is script.
            auto address = script_ptr.value;
            if (IsTypedHeapObjectInstanceTypeOf(address, memory_accessor,
                                                i::InstanceType::SCRIPT_TYPE)) {
              TqScript script(script_ptr.value);
              props.push_back(std::make_unique<ObjectProperty>(
                  "script_name", kObjectAsStoredInHeap, script.GetNameAddress(),
                  1, i::kTaggedSize,
                  std::vector<std::unique_ptr<StructProperty>>(),
                  d::PropertyKind::kSingle));
              props.push_back(std::make_unique<ObjectProperty>(
                  "script_source", kObjectAsStoredInHeap,
                  script.GetSourceAddress(), 1, i::kTaggedSize,
                  std::vector<std::unique_ptr<StructProperty>>(),
                  d::PropertyKind::kSingle));
            }
          }
          auto name_or_scope_info_ptr =
              shared_function_info.GetNameOrScopeInfoValue(memory_accessor);
          if (name_or_scope_info_ptr.validity == d::MemoryAccessResult::kOk) {
            auto scope_info_address = name_or_scope_info_ptr.value;
            // Make sure name_or_scope_info_ptr is scope info.
            if (IsTypedHeapObjectInstanceTypeOf(
                    scope_info_address, memory_accessor,
                    i::InstanceType::SCOPE_INFO_TYPE)) {
              auto indexed_field_slice_function_variable_info =
                  TqDebugFieldSliceScopeInfoFunctionVariableInfo(
                      memory_accessor, scope_info_address);
              if (indexed_field_slice_function_variable_info.validity ==
                  d::MemoryAccessResult::kOk) {
                props.push_back(std::make_unique<ObjectProperty>(
                    "function_name", kObjectAsStoredInHeap,
                    scope_info_address - i::kHeapObjectTag +
                        std::get<1>(
                            indexed_field_slice_function_variable_info.value),
                    std::get<2>(
                        indexed_field_slice_function_variable_info.value),
                    i::kTaggedSize,
                    std::vector<std::unique_ptr<StructProperty>>(),
                    d::PropertyKind::kSingle));
              }
              std::vector<std::unique_ptr<StructProperty>>
                  position_info_struct_field_list;
              position_info_struct_field_list.push_back(
                  std::make_unique<StructProperty>(
                      "start", kObjectAsStoredInHeap, 0, 0, 0));
              position_info_struct_field_list.push_back(
                  std::make_unique<StructProperty>("end", kObjectAsStoredInHeap,
                                                   4, 0, 0));
              TqScopeInfo scope_info(scope_info_address);
              props.push_back(std::make_unique<ObjectProperty>(
                  "function_character_offset", "",
                  scope_info.GetPositionInfoAddress(), 1, 2 * i::kTaggedSize,
                  std::move(position_info_struct_field_list),
                  d::PropertyKind::kSingle));
            }
          }
        }
      }
    }
  }

  return std::make_unique<StackFrameResult>(std::move(props));
}

}  // namespace v8::internal::debug_helper_internal

namespace di = v8::internal::debug_helper_internal;

extern "C" {
V8_DEBUG_HELPER_EXPORT d::ObjectPropertiesResult*
_v8_debug_helper_GetObjectProperties(uintptr_t object,
                                     d::MemoryAccessor memory_accessor,
                                     const d::HeapAddresses& heap_addresses,
                                     const char* type_hint) {
  return di::GetObjectProperties(object, memory_accessor, heap_addresses,
                                 type_hint)
      .release()
      ->GetPublicView();
}
V8_DEBUG_HELPER_EXPORT void _v8_debug_helper_Free_ObjectPropertiesResult(
    d::ObjectPropertiesResult* result) {
  std::unique_ptr<di::ObjectPropertiesResult> ptr(
      static_cast<di::ObjectPropertiesResultExtended*>(result)->base);
}

V8_DEBUG_HELPER_EXPORT d::StackFrameResult* _v8_debug_helper_GetStackFrame(
    uintptr_t frame_pointer, d::MemoryAccessor memory_accessor) {
  return di::GetStackFrame(frame_pointer, memory_accessor)
      .release()
      ->GetPublicView();
}
V8_DEBUG_HELPER_EXPORT void _v8_debug_helper_Free_StackFrameResult(
    d::StackFrameResult* result) {
  std::unique_ptr<di::StackFrameResult> ptr(
      static_cast<di::StackFrameResultExtended*>(result)->base);
}
}
                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/debug_helper/heap-constants.cc                                            0000664 0000000 0000000 00000007045 14746647661 0023076 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "heap-constants.h"

#include "src/common/globals.h"
#include "src/heap/memory-chunk.h"

namespace d = v8::debug_helper;

namespace v8 {
namespace internal {
namespace debug_helper_internal {

std::string FindKnownObject(uintptr_t address,
                            const d::HeapAddresses& heap_addresses) {
  uintptr_t containing_page = MemoryChunk::FromAddress(address)->address();
  uintptr_t offset_in_page = MemoryChunk::AddressToOffset(address);

  // If there's a match with a known page, then search only that page.
  if (containing_page == heap_addresses.map_space_first_page) {
    return FindKnownObjectInMapSpace(offset_in_page);
  }
  if (containing_page == heap_addresses.old_space_first_page) {
    return FindKnownObjectInOldSpace(offset_in_page);
  }
  if (containing_page == heap_addresses.read_only_space_first_page) {
    return FindKnownObjectInReadOnlySpace(offset_in_page);
  }

  // For any unknown pages, compile a list of things this object might be.
  std::string result;
  if (heap_addresses.map_space_first_page == 0) {
    std::string sub_result = FindKnownObjectInMapSpace(offset_in_page);
    if (!sub_result.empty()) {
      result += "maybe " + sub_result;
    }
  }
  if (heap_addresses.old_space_first_page == 0) {
    std::string sub_result = FindKnownObjectInOldSpace(offset_in_page);
    if (!sub_result.empty()) {
      result = (result.empty() ? "" : result + ", ") + "maybe " + sub_result;
    }
  }
  if (heap_addresses.read_only_space_first_page == 0) {
    std::string sub_result = FindKnownObjectInReadOnlySpace(offset_in_page);
    if (!sub_result.empty()) {
      result = (result.empty() ? "" : result + ", ") + "maybe " + sub_result;
    }
  }

  return result;
}

KnownInstanceType FindKnownMapInstanceTypes(
    uintptr_t address, const d::HeapAddresses& heap_addresses) {
  uintptr_t containing_page = MemoryChunk::FromAddress(address)->address();
  uintptr_t offset_in_page = MemoryChunk::AddressToOffset(address);

  // If there's a match with a known page, then search only that page.
  if (containing_page == heap_addresses.map_space_first_page) {
    return KnownInstanceType(
        FindKnownMapInstanceTypeInMapSpace(offset_in_page));
  }
  if (containing_page == heap_addresses.old_space_first_page) {
    return KnownInstanceType(
        FindKnownMapInstanceTypeInOldSpace(offset_in_page));
  }
  if (containing_page == heap_addresses.read_only_space_first_page) {
    return KnownInstanceType(
        FindKnownMapInstanceTypeInReadOnlySpace(offset_in_page));
  }

  // For any unknown pages, compile a list of things this object might be.
  KnownInstanceType result;
  if (heap_addresses.map_space_first_page == 0) {
    int sub_result = FindKnownMapInstanceTypeInMapSpace(offset_in_page);
    if (sub_result >= 0) {
      result.types.push_back(static_cast<i::InstanceType>(sub_result));
    }
  }
  if (heap_addresses.old_space_first_page == 0) {
    int sub_result = FindKnownMapInstanceTypeInOldSpace(offset_in_page);
    if (sub_result >= 0) {
      result.types.push_back(static_cast<i::InstanceType>(sub_result));
    }
  }
  if (heap_addresses.read_only_space_first_page == 0) {
    int sub_result = FindKnownMapInstanceTypeInReadOnlySpace(offset_in_page);
    if (sub_result >= 0) {
      result.types.push_back(static_cast<i::InstanceType>(sub_result));
    }
  }

  return result;
}

}  // namespace debug_helper_internal
}  // namespace internal
}  // namespace v8
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           node-23.7.0/deps/v8/tools/debug_helper/heap-constants.h                                             0000664 0000000 0000000 00000004670 14746647661 0022741 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2019 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef V8_TOOLS_DEBUG_HELPER_HEAP_CONSTANTS_H_
#define V8_TOOLS_DEBUG_HELPER_HEAP_CONSTANTS_H_

#include <cstdint>
#include <string>
#include <vector>

#include "debug-helper.h"
#include "src/objects/instance-type.h"

namespace d = v8::debug_helper;

namespace v8 {
namespace internal {
namespace debug_helper_internal {

// ===== Functions generated by gen-heap-constants.py: =========================

// Returns the name of a known object, given its offset within the first page of
// the space, or empty string on failure.
std::string FindKnownObjectInOldSpace(uintptr_t offset);
std::string FindKnownObjectInReadOnlySpace(uintptr_t offset);
std::string FindKnownObjectInMapSpace(uintptr_t offset);

// In builds with pointer compression enabled, sets the *_first_page members in
// the HeapAddresses object. In other builds, does nothing.
void FillInUnknownHeapAddresses(d::HeapAddresses* heap_addresses,
                                uintptr_t any_uncompressed_ptr);

// Returns the instance type for the known Map, given its offset within the
// first page of the space, or empty string on failure.
int FindKnownMapInstanceTypeInMapSpace(uintptr_t offset);
int FindKnownMapInstanceTypeInOldSpace(uintptr_t offset);
int FindKnownMapInstanceTypeInReadOnlySpace(uintptr_t offset);

// ===== End of generated functions. ===========================================

// Returns a descriptive string if the given address matches a known object, or
// an empty string otherwise.
std::string FindKnownObject(uintptr_t address,
                            const d::HeapAddresses& heap_addresses);

struct KnownInstanceType {
  enum class Confidence {
    kLow,
    kHigh,
  };
  KnownInstanceType() : confidence(Confidence::kLow) {}
  KnownInstanceType(int type) : KnownInstanceType() {
    if (type >= 0) {
      confidence = Confidence::kHigh;
      types.push_back(static_cast<v8::internal::InstanceType>(type));
    }
  }
  Confidence confidence;
  std::vector<v8::internal::InstanceType> types;
};

// Returns information about the instance type of the Map at the given address,
// based on the list of known Maps.
KnownInstanceType FindKnownMapInstanceTypes(
    uintptr_t address, const d::HeapAddresses& heap_addresses);

}  // namespace debug_helper_internal
}  // namespace internal
}  // namespace v8

#endif
                                                                        node-23.7.0/deps/v8/tools/detect-builtins.js                                                        0000664 0000000 0000000 00000003777 14746647661 0020660 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2014 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

(function(global) {

  var GetProperties = function(this_name, object) {
    var result = {};
    try {
      var names = Object.getOwnPropertyNames(object);
    } catch(e) {
      return;
    }
    for (var i = 0; i < names.length; ++i) {
      var name = names[i];
      if (typeof object === "function") {
        if (name === "length" ||
            name === "name" ||
            name === "arguments" ||
            name === "caller" ||
            name === "prototype") {
          continue;
        }
      }
      // Avoid endless recursion.
      if (this_name === "prototype" && name === "constructor") continue;
      // Avoid needless duplication.
      if (this_name === "__PROTO__" && name === "constructor") continue;
      // Could get this from the parent, but having it locally is easier.
      var property = { "name": name };
      try {
        var value = object[name];
      } catch(e) {
        property.type = "getter";
        result[name] = property;
        continue;
      }
      var type = typeof value;
      property.type = type;
      if (type === "function") {
        property.length = value.length;
        property.prototype = GetProperties("prototype", value.prototype);
      }
      if (type === "string" || type === "number") {
        property.value = value;
      } else {
        property.properties = GetProperties(name, value);
      }
      result[name] = property;
    }
    // Print the __proto__ if it's not the default Object prototype.
    if (typeof object === "object" && object.__proto__ !== null &&
        !object.__proto__.hasOwnProperty("__proto__")) {
      result.__PROTO__ = GetProperties("__PROTO__", object.__proto__);
    }
    return result;
  };

  var g = GetProperties("", global, "");
  print(JSON.stringify(g, undefined, 2));

})(this);  // Must wrap in anonymous closure or it'll detect itself as builtin.
 node-23.7.0/deps/v8/tools/dev/                                                                      0000775 0000000 0000000 00000000000 14746647661 0015763 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/dev/gen-static-roots.py                                                   0000775 0000000 0000000 00000007137 14746647661 0021552 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3

# Copyright 2022 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

import subprocess
import argparse
import os
import filecmp
import tempfile
import shutil
import platform
import re
import sys
from pathlib import Path

# List of all supported build configurations for static roots

STATIC_ROOT_CONFIGURATIONS = {
    "ptr-cmpr-wasm-intl": {
        "target": "src/roots/static-roots.h",
        "gn_args": {
            "v8_enable_static_roots": "false",
            "v8_enable_static_roots_generation": "true",
            "v8_enable_pointer_compression": "true",
            "v8_enable_shared_ro_heap": "true",
            "v8_enable_pointer_compression_shared_cage": "true",
            "v8_enable_webassembly": "true",
            "v8_enable_i18n_support": "true",
            "dcheck_always_on": "false"
        }
    },
}

# Parse args

parser = argparse.ArgumentParser(description='Generates static-roots.h.')
parser.add_argument(
    '--configuration',
    choices=STATIC_ROOT_CONFIGURATIONS.keys(),
    action='extend',
    default='ptr-cmpr-wasm-intl',
    nargs='*',
    help="""Build configuration. Refers to a set of configurations with
identical static-roots.h. Currently there is only one supported configuration.
Future configurations will need to generate multiple target files.""")
parser.add_argument(
    '--out',
    default=Path('out/static-roots'),
    required=False,
    type=Path,
    help='target build directory')

args = parser.parse_args()

# Some helpers
def run(cmd, **kwargs):
  print(f"# CMD: {cmd}")
  return subprocess.run(cmd, **kwargs, check=True)


def machine_target():
  raw = platform.machine()
  raw_lower = raw.lower()
  if raw_lower == "x86_64" or raw_lower == "amd64":
    return "x64"
  if raw_lower == "aarch64":
    return "arm64"
  return raw


V8_PATH = Path(__file__).parents[2]
GM = V8_PATH / 'tools' / 'dev' / 'gm.py'

changed = False
for target in [args.configuration]:
  out_dir = args.out / f"{target}"
  if not out_dir.exists():
    out_dir.mkdir(parents=True, exist_ok=True)
  build_dir = out_dir / f"{machine_target()}.release"
  config = STATIC_ROOT_CONFIGURATIONS[target]

  # Let gm create the default config
  e = dict(os.environ)
  e['V8_GM_OUTDIR'] = f"{out_dir}"
  run([f"{sys.executable}", f"{GM}", f"{machine_target()}.release.gn_args"],
      env=e)

  # Patch the default config according to our needs
  print("# Updating gn args")
  gn_args_template = config["gn_args"].copy()
  gn_args = (build_dir / "args.gn").open("r").read().splitlines()
  with (build_dir / "args.gn").open("w") as f:
    for line in filter(bool, gn_args):
      result = re.search(r"^([^ ]+) = (.+)$", line)
      if not result or len(result.groups()) != 2:
        print(f"Error parsing {build_dir / 'args.gn'} at line '{line}'")
        exit(255)
      if result.group(1) in gn_args_template:
        line = f"{result.group(1)} = {gn_args_template[result.group(1)]}"
        gn_args_template.pop(result.group(1))
      f.write(f"{line}\n")
    for extra, val in gn_args_template.items():
      f.write(f"{extra} = {val}\n")

  # Build mksnapshot
  run([f"{sys.executable}", f"{GM}", f"{machine_target()}.release.mksnapshot"],
      env=e)

  # Generate static roots file and check if it changed
  out_file = Path(tempfile.gettempdir()) / f"static-roots-{target}.h"
  run([f"{build_dir / 'mksnapshot'}", "--static-roots-src", f"{out_file}"])
  target_file = V8_PATH / config["target"]
  if not filecmp.cmp(out_file, target_file):
    shutil.move(out_file, target_file)
    changed = True

if changed:
  exit(1)
                                                                                                                                                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/tools/dev/gen-tags.py                                                           0000775 0000000 0000000 00000004273 14746647661 0020053 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2017 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""\
Convenience script for generating arch-specific ctags file.
This script MUST be executed at the top directory.

Usage:
    $ tools/dev/gen-tags.py [<arch>...]

The example usage is as follows:
    $ tools/dev/gen-tags.py x64

If no <arch> is given, it generates tags file for all arches:
    $ tools/dev/gen-tags.py
"""

# for py2/py3 compatibility
from __future__ import print_function

import os
import subprocess
import sys

# All arches that this script understands.
ARCHES = ["ia32", "x64", "arm", "arm64", "mips64", "ppc", "s390"]


def PrintHelpAndExit():
  print(__doc__)
  sys.exit(0)


def _Call(cmd, silent=False):
  if not silent: print("# %s" % cmd)
  return subprocess.call(cmd, shell=True)


def ParseArguments(argv):
  if not "tools/dev" in argv[0]:
    PrintHelpAndExit()
  argv = argv[1:]

  # If no argument is given, then generate ctags for all arches.
  if len(argv) == 0:
    return ARCHES

  user_arches = []
  for argstring in argv:
    if argstring in ("-h", "--help", "help"):
      PrintHelpAndExit()
    if argstring not in ARCHES:
      print("Invalid argument: %s" % argstring)
      sys.exit(1)
    user_arches.append(argstring)

  return user_arches


def Exclude(fullpath, exclude_arches):
  for arch in exclude_arches:
    if ("/%s/" % arch) in fullpath: return True
  return False


def Main(argv):
  user_arches = []

  user_arches = ParseArguments(argv)

  exclude_arches = list(ARCHES)
  for user_arch in user_arches:
    exclude_arches.remove(user_arch)

  paths = ["include", "src", "test"]
  exts = [".h", ".cc", ".c"]

  gtags_filename = "gtags.files"

  with open(gtags_filename, "w") as gtags:
    for path in paths:
      for root, dirs, files in os.walk(path):
        for file in files:
          if not file.endswith(tuple(exts)): continue
          fullpath = os.path.join(root, file)
          if Exclude(fullpath, exclude_arches): continue
          gtags.write(fullpath + os.linesep)

  _Call("ctags --fields=+l -L " + gtags_filename)


if __name__ == "__main__":
  sys.exit(Main(sys.argv))
                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/dev/gm.py                                                                 0000775 0000000 0000000 00000060774 14746647661 0016761 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2017 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""\
Convenience wrapper for compiling V8 with gn/ninja and running tests.
Sets up build output directories if they don't exist.
Produces simulator builds for non-Intel target architectures.
Uses reclient by default if it is detected (at output directory setup time).
Expects to be run from the root of a V8 checkout.

Usage:
    gm.py [<arch>].[<mode>[-<suffix>]].[<target>] [testname...] [--flag]

All arguments are optional. Most combinations should work, e.g.:
    gm.py ia32.debug x64.release x64.release-my-custom-opts d8
    gm.py android_arm.release.check --progress=verbose
    gm.py x64 mjsunit/foo cctest/test-bar/*

For a less automated experience, pass an existing output directory (which
must contain an existing args.gn), e.g.:
    gm.py out/foo unittests

Flags are passed unchanged to the test runner. They must start with -- and must
not contain spaces.
"""
# See HELP below for additional documentation.

from __future__ import print_function
import errno
import os
import platform
import re
import subprocess
import sys
import shutil
import time

from enum import IntEnum
from pathlib import Path

USE_PTY = "linux" in sys.platform
if USE_PTY:
  import pty

BUILD_TARGETS_TEST = [
    "d8", "bigint_shell", "cctest", "inspector-test", "v8_unittests",
    "wasm_api_tests"
]
BUILD_TARGETS_ALL = ["all"]

# All arches that this script understands.
ARCHES = [
    "ia32", "x64", "arm", "arm64", "mips64el", "ppc", "ppc64", "riscv32",
    "riscv64", "s390", "s390x", "android_arm", "android_arm64", "loong64",
    "fuchsia_x64", "fuchsia_arm64", "android_riscv64"
]
# Arches that get built/run when you don't specify any.
DEFAULT_ARCHES = ["ia32", "x64", "arm", "arm64"]
SANDBOX_SUPPORTED_ARCHES = ["x64", "arm64"]
# Modes that this script understands.
MODES = {
    "release": "release",
    "rel": "release",
    "debug": "debug",
    "dbg": "debug",
    "optdebug": "optdebug",
    "opt": "optdebug"
}
# Modes that get built/run when you don't specify any.
DEFAULT_MODES = ["release", "debug"]
# Build targets that can be manually specified.
TARGETS = [
    "d8", "cctest", "v8_unittests", "v8_fuzzers", "wasm_api_tests", "wee8",
    "mkgrokdump", "mksnapshot", "generate-bytecode-expectations",
    "inspector-test", "bigint_shell", "wami", "gn_args"
]
# Build targets that get built when you don't specify any (and specified tests
# don't imply any other targets).
DEFAULT_TARGETS = ["d8"]
# Tests that run-tests.py would run by default that can be run with
# BUILD_TARGETS_TESTS.
DEFAULT_TESTS = ["cctest", "debugger", "intl", "message", "mjsunit",
                 "unittests"]
# These can be suffixed to any <arch>.<mode> combo, or used standalone,
# or used as global modifiers (affecting all <arch>.<mode> combos).
ACTIONS = {
    "all": {
        "targets": BUILD_TARGETS_ALL,
        "tests": [],
        "clean": False
    },
    "tests": {
        "targets": BUILD_TARGETS_TEST,
        "tests": [],
        "clean": False
    },
    "check": {
        "targets": BUILD_TARGETS_TEST,
        "tests": DEFAULT_TESTS,
        "clean": False
    },
    "checkall": {
        "targets": BUILD_TARGETS_ALL,
        "tests": ["ALL"],
        "clean": False
    },
    "clean": {
        "targets": [],
        "tests": [],
        "clean": True
    },
}

HELP = """<arch> can be any of: %(arches)s
<mode> can be any of: %(modes)s
<target> can be any of:
 - %(targets)s (build respective binary)
 - all (build all binaries)
 - tests (build test binaries)
 - check (build test binaries, run most tests)
 - checkall (build all binaries, run more tests)
""" % {
    "arches": " ".join(ARCHES),
    "modes": " ".join(MODES.keys()),
    "targets": ", ".join(TARGETS)
}

TESTSUITES_TARGETS = {
    "benchmarks": "d8",
    "bigint": "bigint_shell",
    "cctest": "cctest",
    "debugger": "d8",
    "fuzzer": "v8_fuzzers",
    "inspector": "inspector-test",
    "intl": "d8",
    "message": "d8",
    "mjsunit": "d8",
    "mozilla": "d8",
    "test262": "d8",
    "unittests": "v8_unittests",
    "wasm-api-tests": "wasm_api_tests",
    "wasm-js": "d8",
    "wasm-spec-tests": "d8",
    "webkit": "d8"
}

out_dir_override = os.getenv("V8_GM_OUTDIR")
if out_dir_override and Path(out_dir_override).is_file:
  OUTDIR = Path(out_dir_override)
else:
  OUTDIR = Path("out")

V8_DIR = Path(__file__).resolve().parent.parent.parent
GCLIENT_FILE_PATH = V8_DIR.parent / ".gclient"
RECLIENT_CERT_CACHE = V8_DIR / ".#gm_reclient_cert_cache"

BUILD_DISTRIBUTION_RE = re.compile(r"\nuse_(remoteexec|goma) = (false|true)")
GOMA_DIR_LINE = re.compile(r"\ngoma_dir = \"[^\"]+\"")
DEPRECATED_RBE_CFG_RE = re.compile(r"\nrbe_cfg_dir = \"[^\"]+\"")
RECLIENT_CFG_RE = re.compile(r"\nreclient_cfg_dir = \"[^\"]+\"")

class Reclient(IntEnum):
  NONE = 0
  GOOGLE = 1
  CUSTOM = 2


def get_v8_solution(solutions):
  for solution in solutions:
    if (solution["name"] == "v8" or
        solution["url"] == "https://chromium.googlesource.com/v8/v8.git"):
      return solution
  return None


# Note: this function is reused by update-compile-commands.py. When renaming
# this, please update that file too!
def detect_reclient():
  if not GCLIENT_FILE_PATH.exists():
    return Reclient.NONE
  with open(GCLIENT_FILE_PATH) as f:
    content = f.read()
  try:
    config_dict = {}
    exec(content, config_dict)
  except SyntaxError as e:
    print("# Can't detect reclient due to .gclient syntax errors.")
    return Reclient.NONE
  v8_solution = get_v8_solution(config_dict["solutions"])
  if not v8_solution:
    print("# Can't detect reclient due to missing v8 gclient solution.")
    return Reclient.NONE
  custom_vars = v8_solution.get("custom_vars", {})
  if custom_vars.get("rbe_instance"):
    return Reclient.CUSTOM
  if custom_vars.get("download_remoteexec_cfg"):
    return Reclient.GOOGLE
  return Reclient.NONE


# Note: this function is reused by update-compile-commands.py. When renaming
# this, please update that file too!
def detect_reclient_cert():
  now = int(time.time())
  # We cache the cert expiration time in a file, because that's much faster
  # to read than invoking `gcertstatus`.
  if RECLIENT_CERT_CACHE.exists():
    with open(RECLIENT_CERT_CACHE, 'r') as f:
      cached_time = int(f.read())
    if now < cached_time:
      return True
  cmd = ["gcertstatus", "-nocheck_ssh", "-format=simple"]
  ret = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
  if ret.returncode != 0:
    return False
  MARGIN = 300  # Request fresh cert if less than 5 mins remain.
  lifetime = int(ret.stdout.decode("utf-8").strip().split(':')[1]) - MARGIN
  if lifetime < 0:
    return False
  with open(RECLIENT_CERT_CACHE, 'w') as f:
    f.write(str(now + lifetime))
  return True


RECLIENT_MODE = detect_reclient()

if platform.system() == "Linux":
  RECLIENT_CFG_REL = "../../buildtools/reclient_cfgs/linux"
else:
  RECLIENT_CFG_REL = "../../buildtools/reclient_cfgs"

BUILD_DISTRIBUTION_LINE = ""
if RECLIENT_MODE:
  BUILD_DISTRIBUTION_LINE = "\nuse_remoteexec = true"
  if RECLIENT_MODE == Reclient.CUSTOM:
    BUILD_DISTRIBUTION_LINE += f"\nreclient_cfg_dir = \"{RECLIENT_CFG_REL}\""

RELEASE_ARGS_TEMPLATE = f"""\
is_component_build = false
is_debug = false
%s{BUILD_DISTRIBUTION_LINE}
v8_enable_backtrace = true
v8_enable_disassembler = true
v8_enable_object_print = true
v8_enable_verify_heap = true
dcheck_always_on = false
"""

DEBUG_ARGS_TEMPLATE = f"""\
is_component_build = true
is_debug = true
symbol_level = 2
%s{BUILD_DISTRIBUTION_LINE}
v8_enable_backtrace = true
v8_enable_fast_mksnapshot = true
v8_enable_slow_dchecks = true
v8_optimized_debug = false
"""

OPTDEBUG_ARGS_TEMPLATE = f"""\
is_component_build = true
is_debug = true
symbol_level = 1
%s{BUILD_DISTRIBUTION_LINE}
v8_enable_backtrace = true
v8_enable_fast_mksnapshot = true
v8_enable_verify_heap = true
v8_optimized_debug = true
"""

ARGS_TEMPLATES = {
  "release": RELEASE_ARGS_TEMPLATE,
  "debug": DEBUG_ARGS_TEMPLATE,
  "optdebug": OPTDEBUG_ARGS_TEMPLATE
}


def print_help_and_exit():
  print(__doc__)
  print(HELP)
  sys.exit(0)


# Used by `tools/bash-completion.sh`
def print_completions_and_exit():
  for a in ARCHES:
    print(str(a))
    for m in set(MODES.values()):
      print(f"{a}.{m}")
      for t in TARGETS:
        print(f"{a}.{m}.{t}")
      for k in ACTIONS.keys():
        print(f"{a}.{m}.{k}")
  for t in TARGETS:
    print(str(t))
  for m in set(MODES.values()):
    print(str(m))
  sys.exit(0)


def _call(cmd, silent=False):
  if not silent:
    print(f"# {cmd}")
  return subprocess.call(cmd, shell=True)


def _call_with_output_no_terminal(cmd):
  return subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True)


def _call_with_output(cmd):
  print(f"# {cmd}")
  # The following trickery is required so that the 'cmd' thinks it's running
  # in a real terminal, while this script gets to intercept its output.
  parent, child = pty.openpty()
  p = subprocess.Popen(cmd, shell=True, stdin=child, stdout=child, stderr=child)
  os.close(child)
  output = []
  try:
    while True:
      try:
        data = os.read(parent, 512).decode('utf-8')
      except OSError as e:
        if e.errno != errno.EIO: raise
        break # EIO means EOF on some systems
      else:
        if not data: # EOF
          break
        print(data, end="")
        sys.stdout.flush()
        output.append(data)
  finally:
    os.close(parent)
    p.wait()
  return p.returncode, "".join(output)


def _write(filename, content, log=True):
  if log:
    print(f"# echo > {filename} << EOF\n{content}EOF")
  with filename.open("w") as f:
    f.write(content)


def _notify(summary, body):
  if (shutil.which('notify-send') is not None and
      os.environ.get("DISPLAY") is not None):
    _call(f"notify-send '{summary}' '{body}'", silent=True)
  else:
    print(f"{summary} - {body}")


def _get_machine():
  return platform.machine()


def get_path(arch, mode):
  return OUTDIR / f"{arch}.{mode}"


def prepare_mksnapshot_cmdline(orig_cmdline, path):
  mksnapshot_bin = path / "mksnapshot"
  result = f"gdb --args {mksnapshot_bin} "
  for w in orig_cmdline.split(" "):
    if w.startswith("gen/") or w.startswith("snapshot_blob"):
      result += f"{str(path / w)} "
    elif w.startswith("../../"):
      result += f"{w[6:]} "
    else:
      result += f"{w} "
  return result


def prepare_torque_cmdline(orig_cmdline: str, path):
  torque_bin = path / "torque"
  args = orig_cmdline.replace("-v8-root ../..", "-v8-root .")
  args = args.replace("gen/torque-generated", f"{path}/gen/torque-generated")
  return f"gdb --args {torque_bin} {args}"

# Only has a path, assumes that the path (and args.gn in it) already exists.
class RawConfig:

  def __init__(self, path, targets, tests=[], clean=False, testrunner_args=[]):
    self.path = path
    self.targets = set(targets)
    self.tests = set(tests)
    self.testrunner_args = testrunner_args
    self.clean = clean

  def extend(self, targets, tests=[], clean=False):
    self.targets.update(targets)
    self.tests.update(tests)
    self.clean |= clean

  def update_build_distribution_args(self):
    args_gn = self.path / "args.gn"
    assert args_gn.exists()
    with open(args_gn) as f:
      gn_args = f.read()
    # Remove custom reclient config path (it will be added again as part of
    # the config line below if needed).
    new_gn_args = DEPRECATED_RBE_CFG_RE.sub("", gn_args)
    new_gn_args = RECLIENT_CFG_RE.sub("", new_gn_args)
    new_gn_args = BUILD_DISTRIBUTION_RE.sub(BUILD_DISTRIBUTION_LINE,
                                            new_gn_args)
    # Remove stale goma_dir to silence GN warnings about unused options.
    new_gn_args = GOMA_DIR_LINE.sub("", new_gn_args)
    if gn_args != new_gn_args:
      print(f"# Updated gn args:{BUILD_DISTRIBUTION_LINE}")
      _write(args_gn, new_gn_args, log=False)

  def build(self):
    self.update_build_distribution_args()
    # If the target is to just build args.gn then we are done here; otherwise
    # drop that target because it's not something ninja can build.
    if 'gn_args' in self.targets:
      self.targets.remove('gn_args')
    if len(self.targets) == 0:
      return 0
    build_ninja = self.path / "build.ninja"
    if not build_ninja.exists():
      code = _call(f"gn gen {self.path}")
      if code != 0:
        return code
    elif self.clean:
      code = _call(f"gn clean {self.path}")
      if code != 0:
        return code
    targets = " ".join(self.targets)
    # The implementation of mksnapshot failure detection relies on
    # the "pty" module and GDB presence, so skip it on non-Linux.
    if not USE_PTY:
      return _call(f"autoninja -C {self.path} {targets}")

    return_code, output = _call_with_output(
        f"autoninja -C {self.path} {targets}")
    if return_code != 0 and "FAILED:" in output:
      if "snapshot_blob" in output:
        if "gen-static-roots.py" in output:
          _notify("V8 build requires your attention",
                  "Please re-generate static roots...")
          return return_code
        csa_trap = re.compile("Specify option( --csa-trap-on-node=[^ ]*)")
        match = csa_trap.search(output)
        extra_opt = match.group(1) if match else ""
        cmdline = re.compile("python3 ../../tools/run.py ./mksnapshot (.*)")
        orig_cmdline = cmdline.search(output).group(1).strip()
        cmdline = (
            prepare_mksnapshot_cmdline(orig_cmdline, self.path) + extra_opt)
        _notify("V8 build requires your attention",
                "Detected mksnapshot failure, re-running in GDB...")
        _call(cmdline)
      elif "run.py ./torque" in output and not ": Torque Error: " in output:
        # Torque failed/crashed without printing an error message.
        cmdline = re.compile("python3 ../../tools/run.py ./torque (.*)")
        orig_cmdline = cmdline.search(output).group(1).strip()
        cmdline = f"gdb --args "
        cmdline = prepare_torque_cmdline(orig_cmdline, self.path)
        _notify("V8 build requires your attention",
                "Detecting torque failure, re-running in GDB...")
        _call(cmdline)
    return return_code

  def run_tests(self):
    if not self.tests:
      return 0
    if "ALL" in self.tests:
      tests = ""
    else:
      tests = " ".join(self.tests)
    run_tests = Path("tools") / "run-tests.py"
    test_runner_args = " ".join(self.testrunner_args)
    return _call(
        f'"{sys.executable }" {run_tests} --outdir={self.path} {tests} {test_runner_args}'
    )


# Contrary to RawConfig, takes arch and mode, and sets everything up
# automatically.
# Note: This class is imported by update-compile-commands.py. When renaming
# anything here, please update that script too!
class ManagedConfig(RawConfig):

  def __init__(self,
               arch,
               mode,
               targets,
               tests=[],
               clean=False,
               testrunner_args=[]):
    super().__init__(
        get_path(arch, mode), targets, tests, clean, testrunner_args)
    self.arch = arch
    self.mode = mode

  def get_target_cpu(self):
    cpu = "x86"
    if self.arch == "android_arm":
      cpu = "arm"
    elif self.arch == "android_arm64" or self.arch == "fuchsia_arm64":
      cpu = "arm64"
    elif self.arch == "android_riscv64":
      cpu = "riscv64"
    elif self.arch == "arm64" and _get_machine() in ("aarch64", "arm64"):
      # arm64 build host:
      cpu = "arm64"
    elif self.arch == "arm" and _get_machine() in ("aarch64", "arm64"):
      cpu = "arm"
    elif self.arch == "loong64" and _get_machine() == "loongarch64":
      cpu = "loong64"
    elif self.arch == "mips64el" and _get_machine() == "mips64":
      cpu = "mips64el"
    elif "64" in self.arch or self.arch == "s390x":
      # Native x64 or simulator build.
      cpu = "x64"
    return [f"target_cpu = \"{cpu}\""]

  def get_v8_target_cpu(self):
    if self.arch == "android_arm":
      v8_cpu = "arm"
    elif self.arch == "android_arm64" or self.arch == "fuchsia_arm64":
      v8_cpu = "arm64"
    elif self.arch == "android_riscv64":
      v8_cpu = "riscv64"
    elif self.arch in ("arm", "arm64", "mips64el", "ppc", "ppc64", "riscv64",
                       "riscv32", "s390", "s390x", "loong64"):
      v8_cpu = self.arch
    else:
      return []
    return [f"v8_target_cpu = \"{v8_cpu}\""]

  def get_target_os(self):
    if self.arch in ("android_arm", "android_arm64", "android_riscv64"):
      return ["target_os = \"android\""]
    elif self.arch in ("fuchsia_x64", "fuchsia_arm64"):
      return ["target_os = \"fuchsia\""]
    return []

  def get_specialized_compiler(self):
    if _get_machine() in ("aarch64", "mips64", "loongarch64"):
      # We have no prebuilt Clang for arm64, mips64 or loongarch64 on Linux,
      # so use the system Clang instead.
      return ["clang_base_path = \"/usr\"", "clang_use_chrome_plugins = false"]
    return []

  def get_sandbox_flag(self):
    if self.arch in SANDBOX_SUPPORTED_ARCHES:
      return ["v8_enable_sandbox = true"]
    return []

  def get_gn_args(self):
    # Use only substring before first '-' as the actual mode
    mode = re.match("([^-]+)", self.mode).group(1)
    template = ARGS_TEMPLATES[mode]
    arch_specific = (
        self.get_target_cpu() + self.get_v8_target_cpu() +
        self.get_target_os() + self.get_specialized_compiler() +
        self.get_sandbox_flag())
    return template % "\n".join(arch_specific)

  def build(self):
    path = self.path
    args_gn = path / "args.gn"
    if not path.exists():
      print(f"# mkdir -p {path}")
      path.mkdir(parents=True)
    if not args_gn.exists():
      _write(args_gn, self.get_gn_args())
    return super().build()

  def run_tests(self):
    host_arch = _get_machine()
    if host_arch == "arm64":
      if platform.system() == "Darwin" and self.arch != "arm64":
        # MacOS-arm64 doesn't provide a good experience when users
        # accidentally try to run x64 tests.
        print(f"Running {self.arch} tests on Mac-arm64 isn't going to work.")
        return 1
      if platform.system() == "Linux" and "arm" not in self.arch:
        # Assume that an arm64 Linux machine may have been set up to run
        # arm32 binaries and Android on-device tests; refuse everything else.
        print(f"Running {self.arch} tests on Linux-arm64 isn't going to work.")
        return 1
    # Special handling for "mkgrokdump": if it was built, run it.
    if ("mkgrokdump" in self.targets and self.mode == "release" and
        (host_arch == "x86_64" and self.arch == "x64") or
        (host_arch == "arm64" and self.arch == "arm64")):
      mkgrokdump_bin = self.path / "mkgrokdump"
      _call(f"{mkgrokdump_bin} > tools/v8heapconst.py")
    return super().run_tests()


def get_test_binary(argstring):
  for suite in TESTSUITES_TARGETS:
    if argstring.startswith(suite): return TESTSUITES_TARGETS[suite]
  return None

class ArgumentParser(object):
  def __init__(self):
    self.global_targets = set()
    self.global_tests = set()
    self.global_actions = set()
    self.configs = {}
    self.testrunner_args = []

  def populate_configs(self, arches, modes, targets, tests, clean):
    for a in arches:
      for m in modes:
        path = get_path(a, m)
        if path not in self.configs:
          self.configs[path] = ManagedConfig(a, m, targets, tests, clean,
                                             self.testrunner_args)
        else:
          self.configs[path].extend(targets, tests)

  def process_global_actions(self):
    have_configs = len(self.configs) > 0
    for action in self.global_actions:
      impact = ACTIONS[action]
      if (have_configs):
        for c in self.configs:
          self.configs[c].extend(**impact)
      else:
        self.populate_configs(DEFAULT_ARCHES, DEFAULT_MODES, **impact)

  def maybe_parse_builddir(self, argstring):
    outdir_prefix = str(OUTDIR) + os.path.sep
    # {argstring} must have the shape "out/x", and the 'x' part must be
    # at least one character.
    if not argstring.startswith(outdir_prefix):
      return False
    if len(argstring) <= len(outdir_prefix):
      return False
    # "out/foo.d8" -> path="out/foo", targets=["d8"]
    # "out/d8.cctest" -> path="out/d8", targets=["cctest"]
    # "out/x.y.d8.cctest" -> path="out/x.y", targets=["d8", "cctest"]
    words = argstring.split('.')
    path_end = len(words)
    targets = []
    tests = []
    clean = False
    while path_end > 1:
      w = words[path_end - 1]
      maybe_target = get_test_binary(w)
      if w in TARGETS:
        targets.append(w)
      elif maybe_target is not None:
        targets.append(maybe_target)
        tests.append(w)
      elif w == 'clean':
        clean = True
      else:
        break
      path_end -= 1
    targets = targets or DEFAULT_TARGETS
    path = Path('.'.join(words[:path_end]))
    args_gn = path / "args.gn"
    # Only accept existing build output directories, otherwise fall back
    # to regular parsing.
    if not args_gn.is_file():
      return False
    if path not in self.configs:
      self.configs[path] = RawConfig(path, targets, tests, clean,
                                     self.testrunner_args)
    else:
      self.configs[path].extend(targets, tests, clean)
    return True

  def parse_arg(self, argstring):
    if argstring in ("-h", "--help", "help"):
      print_help_and_exit()
    if argstring == "--print-completions":
      print_completions_and_exit()
    arches = []
    modes = []
    targets = []
    actions = []
    tests = []
    clean = False
    # Special handling for "mkgrokdump": build it for (arm64|x64).release.
    if argstring == "mkgrokdump":
      arch = "x64"
      if _get_machine() in ("aarch64", "arm64"):
        arch = "arm64"
      self.populate_configs([arch], ["release"], ["mkgrokdump"], [], False)
      return
    if argstring.startswith("--"):
      # Pass all other flags to test runner.
      self.testrunner_args.append(argstring)
      return
    # Specifying a directory like "out/foo" enters "manual mode".
    if self.maybe_parse_builddir(argstring):
      return
    # Specifying a single unit test looks like "unittests/Foo.Bar", test262
    # tests have names like "S15.4.4.7_A4_T1", don't split these.
    if (argstring.startswith("unittests/") or
        argstring.startswith("test262/") or
        argstring.startswith("wasm-api-tests/")):
      words = [argstring]
    else:
      # Assume it's a word like "x64.release" -> split at the dot.
      words = argstring.split('.')
    if len(words) == 1:
      word = words[0]
      if word in ACTIONS:
        self.global_actions.add(word)
        return
      if word in TARGETS:
        self.global_targets.add(word)
        return
      maybe_target = get_test_binary(word)
      if maybe_target is not None:
        self.global_tests.add(word)
        self.global_targets.add(maybe_target)
        return
    for word in words:
      if word in ARCHES:
        arches.append(word)
      elif word in MODES:
        modes.append(MODES[word])
      elif word in TARGETS:
        targets.append(word)
      elif word in ACTIONS:
        actions.append(word)
      else:
        for mode in MODES.keys():
          if word.startswith(mode + "-"):
            prefix = word[:len(mode)]
            suffix = word[len(mode) + 1:]
            modes.append(MODES[prefix] + "-" + suffix)
            break
        else:
          print(f"Didn't understand: {word}")
          sys.exit(1)
    # Process actions.
    for action in actions:
      impact = ACTIONS[action]
      targets += impact["targets"]
      tests += impact["tests"]
      clean |= impact["clean"]
    # Fill in defaults for things that weren't specified.
    arches = arches or DEFAULT_ARCHES
    modes = modes or DEFAULT_MODES
    targets = targets or DEFAULT_TARGETS
    # Produce configs.
    self.populate_configs(arches, modes, targets, tests, clean)

  def parse_arguments(self, argv):
    if len(argv) == 0:
      print_help_and_exit()
    for argstring in argv:
      self.parse_arg(argstring)
    self.process_global_actions()
    for c in self.configs:
      self.configs[c].extend(self.global_targets, self.global_tests)
    return self.configs


def main(argv):
  parser = ArgumentParser()
  configs = parser.parse_arguments(argv[1:])
  return_code = 0
  # If we have Reclient with the Google configuration, check for current
  # certificate.
  if (RECLIENT_MODE == Reclient.GOOGLE and not detect_reclient_cert()):
    print("# gcert")
    subprocess.check_call("gcert", shell=True)
  for c in configs:
    return_code += configs[c].build()
  if return_code == 0:
    for c in configs:
      return_code += configs[c].run_tests()
  if return_code == 0:
    _notify('Done!', 'V8 compilation finished successfully.')
  else:
    _notify('Error!', 'V8 compilation finished with errors.')
  return return_code

if __name__ == "__main__":
  sys.exit(main(sys.argv))
    node-23.7.0/deps/v8/tools/dev/setup-reclient.py                                                     0000775 0000000 0000000 00000017613 14746647661 0021313 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2024 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""\
Convenience script to set up reclient (aka "remoteexec").
"""

from enum import IntEnum
from pathlib import Path
import os
import platform
import re
import subprocess

V8_DIR = Path(__file__).resolve().parent.parent.parent
GCLIENT_FILE_PATH = V8_DIR.parent / ".gclient"

RBE_INSTANCE = "projects/rbe-chromium-untrusted/instances/default_instance"


class MachineType(IntEnum):
  EXTERNAL = 0
  GOOGLE_DESKTOP = 1
  GOOGLE_LAPTOP = 2


MACHINE_TYPE_NAME = {
    MachineType.EXTERNAL: "External",
    MachineType.GOOGLE_DESKTOP: "Google Desktop",
    MachineType.GOOGLE_LAPTOP: "Google Laptop",
}


def DetectShell():
  # We could just read the SHELL environment variable, but that can be
  # inaccurate when users use multiple shells. So instead, detect the
  # shell that this script was called from.
  pid = subprocess.check_output(f"ps -p {os.getpid()} -o ppid=", shell=True)
  pid = pid.decode("utf-8").strip()
  if platform.system() == "Linux":
    shell = subprocess.check_output(["readlink", "-f", f"/proc/{pid}/exe"])
    return shell.decode("utf-8").strip()
  elif platform.system() == "Darwin":
    shell = subprocess.check_output(
        f"lsof -p {pid} | grep txt | head -1", shell=True)
    return shell.decode("utf-8").strip().split(" ")[-1]
  else:
    raise Exception(f"Unimplemented platform: {platform.system()}")


SHELL = DetectShell()


def InstallGCloudPublic():
  existing = subprocess.call("which gcloud", shell=True)
  if existing == 0:
    print("GCloud is already installed, great.")
    return False
  print("Downloading and running GCloud installer. "
        "Please let it add the CLI tools to your PATH when prompted.")
  subprocess.check_call(
      "curl -o gcloud-install.sh https://sdk.cloud.google.com", shell=True)
  subprocess.check_call("bash gcloud-install.sh", shell=True)
  subprocess.check_call("rm gcloud-install.sh", shell=True)
  return True


def UpdateGCloud():
  try:
    # Use "SHELL -i" to consider any updated .bashrc or .zshrc.
    # Use "SHELL -l" to consider any updated .bash_profile or .zsh_profile.
    gcloud_version = subprocess.check_output(
        f"{SHELL} -il -c 'gcloud version 2>/dev/null; exit 0'", shell=True)
    gcloud_version = gcloud_version.decode("utf-8").strip()
    gcloud_version = int(
        re.search(r"Google Cloud SDK (\d+)\.\d+\.\d+", gcloud_version).group(1))
    print(f"Detected gcloud version: {gcloud_version}")
  except Exception as e:
    print(f"{e}")
    print("Error running 'gcloud version'. "
          "Please fix your gcloud installation manually.")
    return False
  if gcloud_version < 455:
    print("Found old gcloud, updating.")
    subprocess.check_call(
        f"{SHELL} -il -c 'gcloud components update; exit 0'", shell=True)
  return True


def UpdateGclientFile(mode):
  if not GCLIENT_FILE_PATH.exists():
    print(f".gclient not found, bug in this script?")
    return False
  with open(GCLIENT_FILE_PATH) as f:
    content = f.read()
  try:
    config_dict = {}
    # .gclient is a Python file, so execute it to understand it.
    exec(content, config_dict)
  except SyntaxError:
    print(f"Error parsing .gclient: {content}")
    return False
  v8_solution_found = False
  for solution in config_dict["solutions"]:
    if (solution["name"] == "v8" or
        solution["url"] == "https://chromium.googlesource.com/v8/v8.git"):
      v8_solution_found = True
      if "custom_vars" in solution:
        custom_vars = solution["custom_vars"]
        if custom_vars.get("download_remoteexec_cfg", False) == True:
          if (mode == MachineType.GOOGLE_DESKTOP or
              custom_vars.get("rbe_instance", "") == RBE_INSTANCE):
            # Nothing to do.
            return True
      else:
        custom_vars = solution["custom_vars"] = {}
      custom_vars["download_remoteexec_cfg"] = True
      if mode == MachineType.EXTERNAL:
        custom_vars["rbe_instance"] = RBE_INSTANCE
  if not v8_solution_found:
    print("Error: v8 solution not found in .gclient")
    return False

  # Imitate the format that depot_tools/fetch.py produces.
  # It's not quite JSON and it's not what Python's "pprint" would do.
  def _format_literal(lit):
    if isinstance(lit, str):
      return f'"{lit}"'
    if isinstance(lit, list):
      body = ", ".join(_format_literal(i) for i in lit)
      return f"[{body}]"
    if isinstance(lit, dict):
      if not lit.items():
        return "{}"
      body = "{\n"
      for key, value in lit.items():
        body += f'      "{key}": {_format_literal(value)},\n'
      body += "    }"
      return body
    return f"{lit!r}"

  new_content = "solutions = [\n"
  for s in config_dict["solutions"]:
    new_content += "  {\n"
    for key, value in s.items():
      new_content += f'    "{key}": {_format_literal(value)},\n'
    new_content += "  },\n"
  new_content += "]\n"
  for entry, value in config_dict.items():
    if entry == "solutions" or entry.startswith("__"):
      continue
    new_content += f"{entry} = {_format_literal(value)}\n"
  with open(GCLIENT_FILE_PATH, "w") as f:
    f.write(new_content)
  return True


def PromptLogin(mode):
  domain = "chromium.org"
  if mode in (MachineType.GOOGLE_DESKTOP, MachineType.GOOGLE_LAPTOP):
    domain = "google.com"
  print(f"Please log in with your {domain} account. "
        "Press <Return> to continue...")
  input()


def CipdLogin(mode):
  PromptLogin(mode)
  subprocess.check_call("cipd auth-login", shell=True)
  subprocess.check_call("gclient sync -D", shell=True)


def GCloudLogin(mode):
  PromptLogin(mode)
  # Use "SHELL -il" to consider any updated .bashrc and .bash_profile.
  subprocess.check_call(
      f"{SHELL} -il -c 'gcloud auth login --update-adc; exit 0'", shell=True)


def SetupLinux():
  mode = MachineType.EXTERNAL
  LSB_RELEASE = Path("/etc/lsb-release")
  if LSB_RELEASE.exists():
    with open(LSB_RELEASE) as f:
      lsb_release = f.read()
      if "GOOGLE_ROLE=desktop" in lsb_release:
        mode = MachineType.GOOGLE_DESKTOP
      elif "GOOGLE_ROLE=laptop" in lsb_release:
        mode = MachineType.GOOGLE_LAPTOP
  print(f"Detected machine type: {MACHINE_TYPE_NAME[mode]}")

  if not UpdateGclientFile(mode):
    return
  CipdLogin(mode)

  # Google desktops: gcert will be sufficient for authentication.
  # Google laptops: install gcloud via apt.
  if mode == MachineType.GOOGLE_LAPTOP:
    print("Installing gcloud, please authenticate for 'sudo':")
    subprocess.check_call("sudo apt install -y google-cloud-cli", shell=True)
    if not UpdateGCloud():
      return
    GCloudLogin(mode)
  # Non-Google machines: install gcloud the public way.
  elif mode == MachineType.EXTERNAL:
    gcloud_installed = InstallGCloudPublic()
    if not UpdateGCloud():
      return
    GCloudLogin(mode)
    if gcloud_installed:
      print("GCloud SDK was installed, remember to 'source ~/.bashrc' to "
            "make your updated PATH available to the current shell.")
  print("All done, enjoy fast builds!")


def SetupMac():
  mode = MachineType.EXTERNAL
  if Path("/usr/local/google").exists():
    print(
        "Looks like this could be a Google corp machine, is that correct? "
        "[Y/n] ",
        end="")
    while True:
      answer = input()
      if answer == "" or answer.lower() == "y":
        mode = MachineType.GOOGLE_LAPTOP
        break
      if answer.lower() == "n":
        break
      print(f"Answer '{answer}' not understood, please say 'y' or 'n'.")
  print(f"Machine type: {MACHINE_TYPE_NAME[mode]}")

  if not UpdateGclientFile(mode):
    return
  CipdLogin(mode)

  InstallGCloudPublic()
  if not UpdateGCloud():
    return
  GCloudLogin(mode)
  print("All done, enjoy fast builds!")


if __name__ == "__main__":
  if platform.system() == "Linux":
    SetupLinux()
  elif platform.system() == "Darwin":
    SetupMac()
  else:
    print("Platforms other than Linux and Mac are not yet implemented, sorry")
                                                                                                                     node-23.7.0/deps/v8/tools/dev/update-compile-commands.py                                            0000775 0000000 0000000 00000006733 14746647661 0023060 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""\
Creates a "compile_commands.json" file for V8, for the needs of clangd and
similar code indexers. Also updates generated C++ sources, and compiles the
Torque Language Server, for a complete code indexing experience.
"""

import json
import os
import subprocess
import sys
import platform

DEFAULT_ARCH = "x64"
if platform.machine() == "arm64":
  DEFAULT_ARCH = "arm64"

PYLIB_PATH = 'tools/clang/pylib'
GM_PATH = 'tools/dev'
PYLIB_CHECK = os.path.join(PYLIB_PATH, 'clang', 'compile_db.py')
GM_CHECK = os.path.join(GM_PATH, 'gm.py')
def CheckRelativeImport(path):
  if not os.path.exists(path):
    print(f"Error: Please run this script from the root of a V8 checkout. "
          "{path} must be a valid relative path.")
    sys.exit(1)
CheckRelativeImport(PYLIB_CHECK)
CheckRelativeImport(GM_CHECK)

sys.path.insert(0, PYLIB_PATH)
from clang import compile_db

sys.path.insert(0, GM_PATH)
import gm

def _Call(cmd, silent=False):
  if not silent:
    print(f"# {cmd}")
  return subprocess.call(cmd, shell=True)

def _Write(filename, content):
  with open(filename, "w") as f:
    f.write(content)

def PrepareBuildDir(arch, mode):
  build_dir = os.path.join("out", f"{arch}.{mode}")
  if not os.path.exists(build_dir):
    print(f"# mkdir -p {build_dir}")
    os.makedirs(build_dir)
  args_gn = os.path.join(build_dir, "args.gn")
  if not os.path.exists(args_gn):
    conf = gm.ManagedConfig(arch, mode, [])
    _Write(args_gn, conf.get_gn_args())
  build_ninja = os.path.join(build_dir, "build.ninja")
  if not os.path.exists(build_ninja):
    code = _Call(f"gn gen {build_dir}")
    if code != 0: raise Exception("gn gen failed")
  else:
    _Call(f"autoninja -C {build_dir} build.ninja")
  return build_dir

def AddTargetsForArch(arch, combined):
  build_dir = PrepareBuildDir(arch, "debug")
  commands = compile_db.ProcessCompileDatabase(
                compile_db.GenerateWithNinja(build_dir, ["all"]), [])
  added = 0
  for c in commands:
    key = c["file"]
    if key not in combined:
      combined[key] = c
      added += 1
  print(f"{arch}: added {added} compile commands")

def UpdateCompileCommands():
  print(">>> Updating compile_commands.json...")
  combined = {}
  AddTargetsForArch("x64", combined)
  AddTargetsForArch("arm64", combined)
  if DEFAULT_ARCH != "arm64":
    # Mac arm64 doesn't like 32bit platforms:
    AddTargetsForArch("ia32", combined)
    AddTargetsForArch("arm", combined)
  commands = []
  for key in combined:
    commands.append(combined[key])
  _Write("compile_commands.json", json.dumps(commands, indent=2))

def CompileLanguageServer():
  print(">>> Compiling Torque Language Server...")
  PrepareBuildDir(DEFAULT_ARCH, "release")
  _Call(f"autoninja -C out/{DEFAULT_ARCH}.release torque-language-server")


def GenerateCCFiles():
  print(">>> Generating generated C++ source files...")
  # This must be called after UpdateCompileCommands().
  assert os.path.exists(f"out/{DEFAULT_ARCH}.debug/build.ninja")
  _Call(f"autoninja -C out/{DEFAULT_ARCH}.debug v8_generated_cc_files")


def PrepareReclient():
  reclient_mode = gm.detect_reclient()
  if reclient_mode == gm.Reclient.GOOGLE and not gm.detect_reclient_cert():
    print("# gcert")
    subprocess.check_call("gcert", shell=True)


if __name__ == "__main__":
  PrepareReclient()
  CompileLanguageServer()
  UpdateCompileCommands()
  GenerateCCFiles()
                                     node-23.7.0/deps/v8/tools/dev/update-vscode.sh                                                      0000775 0000000 0000000 00000012436 14746647661 0021073 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2020 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# The purpose of this script is to make it easy to download/update
# Visual Studio Code on Linux distributions where for whatever reason there
# is no good way to do so via the package manager.

# Version of this script: 2022.11.12

# Basic checking of arguments: want at least one, and it's not --help.
VERSION="$1"
[ -z "$VERSION" -o \
    "$VERSION" == "-h" -o \
    "$VERSION" == "--help" -o \
    "$VERSION" == "help" ] && {
  echo "Usage: $0 <version>"
  echo "<version> may be --auto for auto-detecting the latest available."
  exit 1
}

die() {
  echo "Error: $1"
  exit 1
}

if [ "$VERSION" == "--auto" -o "$VERSION" == "auto" ]; then
  echo "Searching online for latest available version..."
  # Where to find the latest available version.
  AVAILABLE_PACKAGES_URL="https://packages.microsoft.com/repos/vscode/dists/stable/main/binary-amd64/Packages.gz"
  VERSION=$(curl "$AVAILABLE_PACKAGES_URL" --silent \
            | gunzip \
            | gawk '
              BEGIN { engaged = 0 }
              # Look at blocks starting with "Package: code".
              /^Package: code$/ { engaged = 1 }
              # Stop looking at the empty line indicating the end of a block.
              /^$/ { engaged = 0 }
              # In interesting blocks, print the relevant part of the
              # "Version: " line.
              match($0, /^Version: ([0-9.]*)/, groups) {
                if (engaged == 1) print groups[1]
              }
              ' - \
            | sort -rV \
            | head -1)
  if [ -z "$VERSION" ]; then
    die "Detecting latest version failed, please specify it manually."
  else
    echo "Latest version found: $VERSION"
  fi
fi

# Constant definitions for local paths. Edit these to your liking.
VSCODE_DIR="$HOME/vscode"
BACKUP_DIR="$HOME/vscode.prev"
DOWNLOADS_DIR="$HOME/Downloads"
DOWNLOAD_FILE="$DOWNLOADS_DIR/vscode-$VERSION.tar.gz"
DESKTOP_FILE_DIR="$HOME/.local/share/applications"
DESKTOP_FILE="$DESKTOP_FILE_DIR/code.desktop"

# Constant definitions for remote/upstream things. Might need to be updated
# when upstream changes things.
# Where to find the version inside VS Code's installation directory.
PACKAGE_JSON="$VSCODE_DIR/resources/app/package.json"
ICON="$VSCODE_DIR/resources/app/resources/linux/code.png"
# Where to download the archive.
DOWNLOAD_URL="https://update.code.visualstudio.com/$VERSION/linux-x64/stable"
CODE_BIN="$VSCODE_DIR/bin/code"

# Check for "code" in $PATH; create a symlink if we can find a good place.
SYMLINK=$(which code)
if [ -z "$SYMLINK" ]; then
  IFS=':' read -ra PATH_ARRAY <<< "$PATH"
  for P in "${PATH_ARRAY[@]}"; do
    if [ "$P" == "$HOME/bin" -o \
         "$P" == "$HOME/local/bin" -o \
         "$P" == "$HOME/.local/bin" ]; then
      LOCALBIN="$P"
      break
    fi
  done
  if [ -n "$LOCALBIN" ]; then
    echo "Adding symlink to $LOCALBIN..."
    if [ ! -d "$LOCALBIN" ]; then
      mkdir -p "$LOCALBIN" || die "Failed to create $LOCALBIN."
    fi
    ln -s "$CODE_BIN" "$LOCALBIN/code" || die "Failed to create symlink."
  else
    echo "Please put a symlink to $CODE_BIN somewhere on your \$PATH."
  fi
fi

if [ ! -r "$DESKTOP_FILE" ]; then
  echo "Creating .desktop file..."
  mkdir -p "$DESKTOP_FILE_DIR" || die "Failed to create .desktop directory."
  cat <<EOF > "$DESKTOP_FILE"
#!/usr/bin/env xdg-open
[Desktop Entry]
Name=Visual Studio Code
Comment=Code Editing. Redefined.
GenericName=Text Editor
Exec=$CODE_BIN --unity-launch %F
Icon=$ICON
Type=Application
StartupNotify=false
StartupWMClass=Code
Categories=Utility;TextEditor;Development;IDE;
MimeType=text/plain;inode/directory;
Actions=new-empty-window;
Keywords=vscode;

X-Desktop-File-Install-Version=0.24

[Desktop Action new-empty-window]
Name=New Empty Window
Exec=$CODE_BIN --new-window %F
Icon=$ICON
EOF
  chmod +x "$DESKTOP_FILE" || die "Failed to make .desktop file executable."
fi

# Find currently installed version.
if [ -d "$VSCODE_DIR" ]; then
  if [ ! -r "$PACKAGE_JSON" ]; then
    die "$PACKAGE_JSON file not found, this script must be updated."
  fi
  INSTALLED=$(grep '"version":' "$PACKAGE_JSON" \
              | sed 's/[^0-9]*\([0-9.]*\).*/\1/')
  echo "Detected installed version: $INSTALLED"
  if [ "$VERSION" == "$INSTALLED" ] ; then
    echo "You already have that version."
    exit 0
  else
    echo "Updating from $INSTALLED to $VERSION..."
  fi
fi

if [ ! -r "$DOWNLOAD_FILE" ]; then
  echo "Downloading..."
  if [ ! -d "$DOWNLOADS_DIR" ]; then
    mkdir -p "$DOWNLOADS_DIR" || die "Failed to create $DOWNLOADS_DIR."
  fi
  wget "$DOWNLOAD_URL" -O "$DOWNLOAD_FILE" || die "Downloading failed."
else
  echo "$DOWNLOAD_FILE already exists; delete it to force re-download."
fi

echo "Extracting..."
TAR_DIR=$(tar -tf "$DOWNLOAD_FILE" | head -1)
[ -z "$TAR_DIR" ] && die "Couldn't read archive."
TMP_DIR=$(mktemp -d)
tar -C "$TMP_DIR" -xf "$DOWNLOAD_FILE" || {
  rm -rf "$TMP_DIR"
  die "Extracting failed."
}

if [ -d "$BACKUP_DIR" ]; then
  echo "Deleting previous backup..."
  rm -rf "$BACKUP_DIR"
fi

if [ -d "$VSCODE_DIR" ]; then
  echo "Moving previous installation..."
  mv "$VSCODE_DIR" "$BACKUP_DIR"
fi

echo "Installing new version..."
mv "$TMP_DIR/$TAR_DIR" "$VSCODE_DIR"
rmdir "$TMP_DIR"

echo "All done, enjoy coding!"
                                                                                                                                                                                                                                  node-23.7.0/deps/v8/tools/dev/v8gen.py                                                              0000775 0000000 0000000 00000020661 14746647661 0017374 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""Script to generate V8's gn arguments based on common developer defaults
or builder configurations.

This script can be added to the PATH and be used on other checkouts. It always
runs for the checkout nesting the CWD.

Configurations of this script live in infra/mb/mb_config.pyl.

Available actions are: {gen,list}. Omitting the action defaults to "gen".

-------------------------------------------------------------------------------

Examples:

# Generate the ia32.release config in out.gn/ia32.release.
v8gen.py ia32.release

# Generate into out.gn/foo.
v8gen.py gen -b ia32.release foo

# Pass additional gn arguments after -- (don't use spaces within gn args).
v8gen.py ia32.optdebug -- v8_enable_slow_dchecks=true

# Generate gn arguments of 'V8 Linux64 - builder' from 'client.v8'.
v8gen.py -m client.v8 -b 'V8 Linux64 - builder'

# Show available configurations.
v8gen.py list

-------------------------------------------------------------------------------
"""

# for py2/py3 compatibility
from __future__ import print_function

import argparse
import os
import re
import subprocess
import sys

CONFIG = os.path.join('infra', 'mb', 'mb_config.pyl')
OUT_DIR = 'out.gn'

TOOLS_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(TOOLS_PATH, 'mb'))

import mb


def _sanitize_nonalpha(text):
  return re.sub(r'[^a-zA-Z0-9.]', '_', text)


class GenerateGnArgs(object):
  def __init__(self, args):
    # Split args into this script's arguments and gn args passed to the
    # wrapped gn.
    index = args.index('--') if '--' in args else len(args)
    self._options = self._parse_arguments(args[:index])
    self._gn_args = args[index + 1:]

  def _parse_arguments(self, args):
    self.parser = argparse.ArgumentParser(
      description=__doc__,
      formatter_class=argparse.RawTextHelpFormatter,
    )

    def add_common_options(p):
      p.add_argument(
          '-m', '--master', default='developer_default',
          help='config group or master from mb_config.pyl - default: '
               'developer_default')
      p.add_argument(
          '-v', '--verbosity', action='count',
          help='print wrapped commands (use -vv to print output of wrapped '
               'commands)')

    subps = self.parser.add_subparsers()

    # Command: gen.
    gen_cmd = subps.add_parser(
        'gen', help='generate a new set of build files (default)')
    gen_cmd.set_defaults(func=self.cmd_gen)
    add_common_options(gen_cmd)
    gen_cmd.add_argument(
        'outdir', nargs='?',
        help='optional gn output directory')
    gen_cmd.add_argument(
        '-b', '--builder',
        help='build configuration or builder name from mb_config.pyl, e.g. '
             'x64.release')
    gen_cmd.add_argument(
        '-p', '--pedantic', action='store_true',
        help='run gn over command-line gn args to catch errors early')

    # Command: list.
    list_cmd = subps.add_parser(
        'list', help='list available configurations')
    list_cmd.set_defaults(func=self.cmd_list)
    add_common_options(list_cmd)

    # Default to "gen" unless global help is requested.
    if not args or args[0] not in list(subps.choices) + ['-h', '--help']:
      args = ['gen'] + args

    return self.parser.parse_args(args)

  def cmd_gen(self):
    if not self._options.outdir and not self._options.builder:
      self.parser.error('please specify either an output directory or '
                        'a builder/config name (-b), e.g. x64.release')

    if not self._options.outdir:
      # Derive output directory from builder name.
      self._options.outdir = _sanitize_nonalpha(self._options.builder)
    else:
      # Also, if this should work on windows, we might need to use \ where
      # outdir is used as path, while using / if it's used in a gn context.
      if self._options.outdir.startswith('/'):
        self.parser.error(
            'only output directories relative to %s are supported' % OUT_DIR)

    if not self._options.builder:
      # Derive builder from output directory.
      self._options.builder = self._options.outdir

    # Check for builder/config in mb config.
    if self._options.builder not in self._mbw.builder_groups[self._options.master]:
      print('%s does not exist in %s for %s' % (
          self._options.builder, CONFIG, self._options.master))
      return 1

    # TODO(machenbach): Check if the requested configurations has switched to
    # gn at all.

    # The directories are separated with slashes in a gn context (platform
    # independent).
    gn_outdir = '/'.join([OUT_DIR, self._options.outdir])

    # Call MB to generate the basic configuration.
    self._call_cmd([
      sys.executable,
      '-u', os.path.join('tools', 'mb', 'mb.py'),
      'gen',
      '-f', CONFIG,
      '-m', self._options.master,
      '-b', self._options.builder,
      gn_outdir,
    ])

    # Handle extra gn arguments.
    gn_args_path = os.path.join(OUT_DIR, self._options.outdir, 'args.gn')

    # Append command-line args.
    modified = self._append_gn_args(
        'command-line', gn_args_path, '\n'.join(self._gn_args))

    # Regenerate ninja files to check for errors in the additional gn args.
    if modified and self._options.pedantic:
      self._call_cmd(['gn', 'gen', gn_outdir])
    return 0

  def cmd_list(self):
    print('\n'.join(sorted(self._mbw.builder_groups[self._options.master])))
    return 0

  def verbose_print_1(self, text):
    if self._options.verbosity and self._options.verbosity >= 1:
      print('#' * 80)
      print(text)

  def verbose_print_2(self, text):
    if self._options.verbosity and self._options.verbosity >= 2:
      indent = ' ' * 2
      for l in text.splitlines():
        if type(l) == bytes:
          l = l.decode()
        print(indent + l)

  def _call_cmd(self, args):
    self.verbose_print_1(' '.join(args))
    try:
      output = subprocess.check_output(
        args=args,
        stderr=subprocess.STDOUT,
      )
      self.verbose_print_2(output)
    except subprocess.CalledProcessError as e:
      self.verbose_print_2(e.output)
      raise

  def _find_work_dir(self, path):
    """Find the closest v8 root to `path`."""
    if os.path.exists(os.path.join(path, 'tools', 'dev', 'v8gen.py')):
      # Approximate the v8 root dir by a folder where this script exists
      # in the expected place.
      return path
    elif os.path.dirname(path) == path:
      raise Exception(
          'This appears to not be called from a recent v8 checkout')
    else:
      return self._find_work_dir(os.path.dirname(path))

  def _append_gn_args(self, type, gn_args_path, more_gn_args):
    """Append extra gn arguments to the generated args.gn file."""
    if not more_gn_args:
      return False
    self.verbose_print_1('Appending """\n%s\n""" to %s.' % (
        more_gn_args, os.path.abspath(gn_args_path)))
    with open(gn_args_path, 'a') as f:
      f.write('\n# Additional %s args:\n' % type)
      f.write(more_gn_args)
      f.write('\n')

    # Artificially increment modification time as our modifications happen too
    # fast. This makes sure that gn is properly rebuilding the ninja files.
    mtime = os.path.getmtime(gn_args_path) + 1
    with open(gn_args_path, 'a'):
      os.utime(gn_args_path, (mtime, mtime))

    return True

  def main(self):
    # Always operate relative to the base directory for better relative-path
    # handling. This script can be used in any v8 checkout.
    workdir = self._find_work_dir(os.getcwd())
    if workdir != os.getcwd():
      self.verbose_print_1('cd ' + workdir)
      os.chdir(workdir)

    # Initialize MB as a library.
    self._mbw = mb.MetaBuildWrapper()

    # TODO(machenbach): Factor out common methods independent of mb arguments.
    self._mbw.ParseArgs(['lookup', '-f', CONFIG])
    self._mbw.ReadConfigFile()

    if not self._options.master in self._mbw.builder_groups:
      print('%s not found in %s\n' % (self._options.master, CONFIG))
      print('Choose one of:\n%s\n' % (
          '\n'.join(sorted(self._mbw.builder_groups.keys()))))
      return 1

    return self._options.func()


if __name__ == "__main__":
  gen = GenerateGnArgs(sys.argv[1:])
  try:
    sys.exit(gen.main())
  except Exception:
    if not gen._options.verbosity or gen._options.verbosity < 2:
      print ('\nHint: You can raise verbosity (-vv) to see the output of '
             'failed commands.\n')
    raise
                                                                               node-23.7.0/deps/v8/tools/disasm.py                                                                 0000664 0000000 0000000 00000007337 14746647661 0017051 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
#
# Copyright 2011 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of Google Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import re
import subprocess
import tempfile


# Avoid using the slow (google-specific) wrapper around objdump.
OBJDUMP_BIN = "/usr/bin/objdump"
if not os.path.exists(OBJDUMP_BIN):
  OBJDUMP_BIN = "objdump"

# -M intel-mnemonic selects Intel syntax.
# -C demangles.
# -z disables skipping over sections of zeroes.
_COMMON_DISASM_OPTIONS = ["-M", "intel-mnemonic", "-C", "-z"]

_DISASM_HEADER_RE = re.compile(r"[a-f0-9]+\s+<.*:$")
_DISASM_LINE_RE = re.compile(r"\s*([a-f0-9]+):\s*(\S.*)")

# Keys must match constants in V8FileLogger::LogCodeInfo.
_ARCH_MAP = {
  "ia32": "-m i386",
  "x64": "-m i386 -M x86-64",
  "arm": "-m arm",  # Not supported by our objdump build.
  "arm64": "-m aarch64"
}


def GetDisasmLines(filename, offset, size, arch, inplace, arch_flags=""):
  tmp_name = None
  if not inplace:
    # Create a temporary file containing a copy of the code.
    assert arch in _ARCH_MAP, "Unsupported architecture '%s'" % arch
    arch_flags = arch_flags + " " +  _ARCH_MAP[arch]
    tmp_file = tempfile.NamedTemporaryFile(prefix=".v8code", delete=False)
    tmp_name = tmp_file.name
    tmp_file.close()
    command = "dd if=%s of=%s bs=1 count=%d skip=%d && " \
              "%s %s -D -b binary %s %s" % (
      filename, tmp_name, size, offset,
      OBJDUMP_BIN, ' '.join(_COMMON_DISASM_OPTIONS), arch_flags,
      tmp_name)
  else:
    command = "%s %s %s --start-address=%d --stop-address=%d -d %s " % (
      OBJDUMP_BIN, ' '.join(_COMMON_DISASM_OPTIONS), arch_flags,
      offset,
      offset + size,
      filename)
  process = subprocess.Popen(command,
                             shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT)
  out, err = process.communicate()
  lines = out.decode('utf-8').split("\n")
  header_line = 0
  for i, line in enumerate(lines):
    if _DISASM_HEADER_RE.match(line):
      header_line = i
      break
  if tmp_name:
    os.unlink(tmp_name)
  split_lines = []
  for line in lines[header_line + 1:]:
    match = _DISASM_LINE_RE.match(line)
    if match:
      line_address = int(match.group(1), 16)
      split_lines.append((line_address, match.group(2)))
  return split_lines
                                                                                                                                                                                                                                                                                                 node-23.7.0/deps/v8/tools/draw_instruction_graph.sh                                                 0000775 0000000 0000000 00000010451 14746647661 0022324 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
#
# Copyright 2013 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of Google Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This script reads in CSV formatted instruction data, and draws a stacked
# graph in png format.

defaultfile=arm64_inst.csv
defaultout=arm64_inst.png
gnuplot=/usr/bin/gnuplot


# File containing CSV instruction data from simulator.
file=${1:-$defaultfile}

# Output graph png file.
out=${2:-$defaultout}

# Check input file exists.
if [ ! -e $file ]; then
  echo "Input file not found: $file."
  echo "Usage: draw_instruction_graph.sh <input csv> <output png>"
  exit 1
fi

# Search for an error message, and if found, exit.
error=`grep -m1 '# Error:' $file`
if [ -n "$error" ]; then
  echo "Error message in input file:"
  echo " $error"
  exit 2
fi

# Sample period - period over which numbers for each category of instructions is
# counted.
sp=`grep -m1 '# sample_period=' $file | cut -d= -f2`

# Get number of counters in the CSV file.
nc=`grep -m1 '# counters=' $file | cut -d= -f2`

# Find the annotation arrows. They appear as comments in the CSV file, in the
# format:
#   # xx @ yyyyy
# Where xx is a two character annotation identifier, and yyyyy is the
# position in the executed instruction stream that generated the annotation.
# Turn these locations into labelled arrows.
arrows=`sed '/^[^#]/ d' $file | \
        perl -pe "s/^# .. @ (\d+)/set arrow from \1, graph 0.9 to \1, $sp/"`;
labels=`sed '/^[^#]/d' $file | \
        sed -r 's/^# (..) @ (.+)/set label at \2, graph 0.9 "\1" \
                center offset 0,0.5 font "FreeSans, 8"/'`;

# Check for gnuplot, and warn if not available.
if [ ! -e $gnuplot ]; then
  echo "Can't find gnuplot at $gnuplot."
  echo "Gnuplot version 4.6.3 or later required."
  exit 3
fi

# Initialise gnuplot, and give it the data to draw.
echo | $gnuplot <<EOF
$arrows
$labels
MAXCOL=$nc
set term png size 1920, 800 #ffffff
set output '$out'
set datafile separator ','
set xtics font 'FreeSans, 10'
set xlabel 'Instructions' font 'FreeSans, 10'
set ytics font 'FreeSans, 10'
set yrange [0:*]
set key outside font 'FreeSans, 8'

set style line 2 lc rgb '#800000'
set style line 3 lc rgb '#d00000'
set style line 4 lc rgb '#ff6000'
set style line 5 lc rgb '#ffc000'
set style line 6 lc rgb '#ffff00'

set style line 7 lc rgb '#ff00ff'
set style line 8 lc rgb '#ffc0ff'

set style line 9 lc rgb '#004040'
set style line 10 lc rgb '#008080'
set style line 11 lc rgb '#40c0c0'
set style line 12 lc rgb '#c0f0f0'

set style line 13 lc rgb '#004000'
set style line 14 lc rgb '#008000'
set style line 15 lc rgb '#40c040'
set style line 16 lc rgb '#c0f0c0'

set style line 17 lc rgb '#2020f0'
set style line 18 lc rgb '#6060f0'
set style line 19 lc rgb '#a0a0f0'

set style line 20 lc rgb '#000000'
set style line 21 lc rgb '#ffffff'

plot for [i=2:MAXCOL] '$file' using 1:(sum [col=i:MAXCOL] column(col)) \
title columnheader(i) with filledcurve y1=0 ls i
EOF



                                                                                                                                                                                                                       node-23.7.0/deps/v8/tools/dump-cpp.py                                                               0000664 0000000 0000000 00000003665 14746647661 0017316 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2016 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This script executes dumpcpp.js, collects all dumped C++ symbols,
# and merges them back into v8 log.

# for py2/py3 compatibility
from __future__ import print_function

import os
import platform
import re
import subprocess
import sys

def is_file_executable(fPath):
  return os.path.isfile(fPath) and os.access(fPath, os.X_OK)

if __name__ == '__main__':
  JS_FILES = ['dumpcpp-driver.mjs']
  tools_path = os.path.dirname(os.path.realpath(__file__))
  on_windows = platform.system() == 'Windows'
  JS_FILES = [os.path.join(tools_path, f) for f in JS_FILES]

  args = []
  log_file = 'v8.log'
  debug = False
  for arg in sys.argv[1:]:
    if arg == '--debug':
      debug = True
      continue
    args.append(arg)
    if not arg.startswith('-'):
      log_file = arg

  if on_windows:
    args.append('--windows')

  with open(log_file, 'r') as f:
    lines = f.readlines()

  d8_line = re.search(',\"(.*d8)', ''.join(lines))
  if d8_line:
    d8_exec = d8_line.group(1)
    if not is_file_executable(d8_exec):
      print('d8 binary path found in {} is not executable.'.format(log_file))
      sys.exit(-1)
  else:
    print('No d8 binary path found in {}.'.format(log_file))
    sys.exit(-1)

  args = [d8_exec] + ['--module'] + JS_FILES + ['--'] + args

  with open(log_file) as f:
    sp = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                          stdin=f)
    out, err = sp.communicate()
  if debug:
    print(err)
  if sp.returncode != 0:
    print(out)
    exit(-1)

  if on_windows and out:
    out = re.sub('\r+\n', '\n', out)

  is_written = not bool(out)
  with open(log_file, 'w') as f:
    for line in lines:
      if not is_written and line.startswith('tick'):
        f.write(out)
        is_written = True
      f.write(line)
                                                                           node-23.7.0/deps/v8/tools/dumpcpp-driver.mjs                                                        0000664 0000000 0000000 00000001570 14746647661 0020664 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {
    CppProcessor, ArgumentsProcessor, LinuxCppEntriesProvider,
    WindowsCppEntriesProvider, MacOSCppEntriesProvider
  } from  "./dumpcpp.mjs";

// Dump C++ symbols of shared library if possible

const entriesProviders = {
  'linux': LinuxCppEntriesProvider,
  'windows': WindowsCppEntriesProvider,
  'macos': MacOSCppEntriesProvider
};

const params = ArgumentsProcessor.process(arguments);
const cppProcessor = new CppProcessor(
  new (entriesProviders[params.platform])(params.nm, params.targetRootFS,
                                          params.apkEmbeddedLibrary),
  params.timedRange, params.pairwiseTimedRange);
await cppProcessor.processLogFile(params.logFileName);
cppProcessor.dumpCppSymbols();
                                                                                                                                        node-23.7.0/deps/v8/tools/dumpcpp.mjs                                                               0000664 0000000 0000000 00000004120 14746647661 0017365 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        // Copyright 2016 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import { LogReader, parseString } from "./logreader.mjs";
import { CodeMap, CodeEntry } from "./codemap.mjs";
export {
    ArgumentsProcessor, LinuxCppEntriesProvider,
    WindowsCppEntriesProvider, MacOSCppEntriesProvider,
  } from  "./tickprocessor.mjs";


export class CppProcessor extends LogReader {
  constructor(cppEntriesProvider, timedRange, pairwiseTimedRange) {
    super(timedRange, pairwiseTimedRange);
    this.setDispatchTable({
         __proto__: null,
        'shared-library': {
          parsers: [parseString, parseInt, parseInt, parseInt],
          processor: this.processSharedLibrary }
    });
    this.cppEntriesProvider_ = cppEntriesProvider;
    this.codeMap_ = new CodeMap();
    this.lastLogFileName_ = null;
  }

  /**
   * @override
   */
  printError(str) {
    console.log(str);
  }

  processLogFile(fileName) {
    this.lastLogFileName_ = fileName;
    let line;
    while (line = readline()) {
      this.processLogLine(line);
    }
  }

  processLogFileInTest(fileName) {
    // Hack file name to avoid dealing with platform specifics.
    this.lastLogFileName_ = 'v8.log';
    const contents = d8.file.read(fileName);
    this.processLogChunk(contents);
  }

  processSharedLibrary(name, startAddr, endAddr, aslrSlide) {
    const self = this;
    const libFuncs = this.cppEntriesProvider_.parseVmSymbols(
        name, startAddr, endAddr, aslrSlide, function(fName, fStart, fEnd) {
      const entry = new CodeEntry(fEnd - fStart, fName, 'CPP');
      self.codeMap_.addStaticCode(fStart, entry);
    });
  }

  dumpCppSymbols() {
    const staticEntries = this.codeMap_.getAllStaticEntriesWithAddresses();
    const total = staticEntries.length;
    for (let i = 0; i < total; ++i) {
      const entry = staticEntries[i];
      const printValues = ['cpp', `0x${entry[0].toString(16)}`, entry[1].size,
                        `"${entry[1].name}"`];
                        console.log(printValues.join(','));
    }
  }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/eval_gc_nvp.py                                                            0000775 0000000 0000000 00000015270 14746647661 0020052 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
#
# Copyright 2015 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

"""This script is used to analyze GCTracer's NVP output."""


# for py2/py3 compatibility
from __future__ import print_function


from argparse import ArgumentParser
from copy import deepcopy
from gc_nvp_common import split_nvp
from math import ceil, log
from sys import stdin


class LinearBucket:
  def __init__(self, granularity):
    self.granularity = granularity

  def value_to_bucket(self, value):
    return int(value / self.granularity)

  def bucket_to_range(self, bucket):
    return (bucket * self.granularity, (bucket + 1) * self.granularity)


class Log2Bucket:
  def __init__(self, start):
    self.start = int(log(start, 2)) - 1

  def value_to_bucket(self, value):
    index = int(log(value, 2))
    index -= self.start
    if index < 0:
      index = 0
    return index

  def bucket_to_range(self, bucket):
    if bucket == 0:
      return (0, 2 ** (self.start + 1))
    bucket += self.start
    return (2 ** bucket, 2 ** (bucket + 1))


class Histogram:
  def __init__(self, bucket_trait, fill_empty):
    self.histogram = {}
    self.fill_empty = fill_empty
    self.bucket_trait = bucket_trait

  def add(self, key):
    index = self.bucket_trait.value_to_bucket(key)
    if index not in self.histogram:
      self.histogram[index] = 0
    self.histogram[index] += 1

  def __str__(self):
    ret = []
    keys = self.histogram.keys()
    keys.sort()
    last = keys[len(keys) - 1]
    for i in range(0, last + 1):
      (min_value, max_value) = self.bucket_trait.bucket_to_range(i)
      if i == keys[0]:
        keys.pop(0)
        ret.append("  [{0},{1}[: {2}".format(
          str(min_value), str(max_value), self.histogram[i]))
      else:
        if self.fill_empty:
          ret.append("  [{0},{1}[: {2}".format(
            str(min_value), str(max_value), 0))
    return "\n".join(ret)


class Category:
  def __init__(self, key, histogram, csv, percentiles):
    self.key = key
    self.values = []
    self.histogram = histogram
    self.csv = csv
    self.percentiles = percentiles

  def process_entry(self, entry):
    if self.key in entry:
      self.values.append(float(entry[self.key]))
      if self.histogram:
        self.histogram.add(float(entry[self.key]))

  def min(self):
    return min(self.values)

  def max(self):
    return max(self.values)

  def avg(self):
    if len(self.values) == 0:
      return 0.0
    return sum(self.values) / len(self.values)

  def empty(self):
    return len(self.values) == 0

  def _compute_percentiles(self):
    ret = []
    if len(self.values) == 0:
      return ret
    sorted_values = sorted(self.values)
    for percentile in self.percentiles:
      index = int(ceil((len(self.values) - 1) * percentile / 100))
      ret.append("  {0}%: {1}".format(percentile, sorted_values[index]))
    return ret

  def __str__(self):
    if self.csv:
      ret = [self.key]
      ret.append(len(self.values))
      ret.append(self.min())
      ret.append(self.max())
      ret.append(self.avg())
      ret = [str(x) for x in ret]
      return ",".join(ret)
    else:
      ret = [self.key]
      ret.append("  len: {0}".format(len(self.values)))
      if len(self.values) > 0:
        ret.append("  min: {0}".format(self.min()))
        ret.append("  max: {0}".format(self.max()))
        ret.append("  avg: {0}".format(self.avg()))
        if self.histogram:
          ret.append(str(self.histogram))
        if self.percentiles:
          ret.append("\n".join(self._compute_percentiles()))
      return "\n".join(ret)

  def __repr__(self):
    return "<Category: {0}>".format(self.key)


def make_key_func(cmp_metric):
  def key_func(a):
    return getattr(a, cmp_metric)()
  return key_func


def main():
  parser = ArgumentParser(description="Process GCTracer's NVP output")
  parser.add_argument('keys', metavar='KEY', type=str, nargs='+',
                      help='the keys of NVPs to process')
  parser.add_argument('--histogram-type', metavar='<linear|log2>',
                      type=str, nargs='?', default="linear",
                      help='histogram type to use (default: linear)')
  linear_group = parser.add_argument_group('linear histogram specific')
  linear_group.add_argument('--linear-histogram-granularity',
                            metavar='GRANULARITY', type=int, nargs='?',
                            default=5,
                            help='histogram granularity (default: 5)')
  log2_group = parser.add_argument_group('log2 histogram specific')
  log2_group.add_argument('--log2-histogram-init-bucket', metavar='START',
                          type=int, nargs='?', default=64,
                          help='initial buck size (default: 64)')
  parser.add_argument('--histogram-omit-empty-buckets',
                      dest='histogram_omit_empty',
                      action='store_true',
                      help='omit empty histogram buckets')
  parser.add_argument('--no-histogram', dest='histogram',
                      action='store_false', help='do not print histogram')
  parser.set_defaults(histogram=True)
  parser.set_defaults(histogram_omit_empty=False)
  parser.add_argument('--rank', metavar='<no|min|max|avg>',
                      type=str, nargs='?',
                      default="no",
                      help="rank keys by metric (default: no)")
  parser.add_argument('--csv', dest='csv',
                      action='store_true', help='provide output as csv')
  parser.add_argument('--percentiles', dest='percentiles',
                      type=str, default="",
                      help='comma separated list of percentiles')
  args = parser.parse_args()

  histogram = None
  if args.histogram:
    bucket_trait = None
    if args.histogram_type == "log2":
      bucket_trait = Log2Bucket(args.log2_histogram_init_bucket)
    else:
      bucket_trait = LinearBucket(args.linear_histogram_granularity)
    histogram = Histogram(bucket_trait, not args.histogram_omit_empty)

  percentiles = []
  for percentile in args.percentiles.split(','):
    try:
      percentiles.append(float(percentile))
    except ValueError:
      pass

  categories = [ Category(key, deepcopy(histogram), args.csv, percentiles)
                 for key in args.keys ]

  while True:
    line = stdin.readline()
    if not line:
      break
    obj = split_nvp(line)
    for category in categories:
      category.process_entry(obj)

  # Filter out empty categories.
  categories = [x for x in categories if not x.empty()]

  if args.rank != "no":
    categories = sorted(categories, key=make_key_func(args.rank), reverse=True)

  for category in categories:
    print(category)


if __name__ == '__main__':
  main()
                                                                                                                                                                                                                                                                                                                                        node-23.7.0/deps/v8/tools/eval_gc_time.sh                                                           0000775 0000000 0000000 00000006453 14746647661 0020172 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
#
# Copyright 2015 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Convenience Script used to rank GC NVP output.

print_usage_and_die() {
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "OPTIONS"
  echo  "  -r|--rank new-gen-rank|old-gen-rank    GC mode to profile"
  echo  "                                         (default: old-gen-rank)"
  echo  "  -s|--sort avg|max                      sorting mode (default: max)"
  echo  "  -t|--top-level                         include top-level categories"
  echo  "  -c|--csv                               provide csv output"
  echo  "  -f|--file FILE                         profile input in a file"
  echo  "                                         (default: stdin)"
  echo  "  -p|--percentiles                       comma separated percentiles"
  exit 1
}

OP=old-gen-rank
RANK_MODE=max
TOP_LEVEL=no
CSV=""
LOGFILE=/dev/stdin
PERCENTILES=""

while [[ $# -ge 1 ]]
do
  key="$1"
  case $key in
    -r|--rank)
      case $2 in
        new-gen-rank|old-gen-rank)
          OP="$2"
          ;;
        *)
          print_usage_and_die
      esac
      shift
      ;;
    -s|--sort)
      case $2 in
        max|avg)
          RANK_MODE=$2
          ;;
        *)
          print_usage_and_die
      esac
      shift
      ;;
    -t|--top-level)
      TOP_LEVEL=yes
      ;;
    -c|--csv)
      CSV=" --csv "
      ;;
    -f|--file)
      LOGFILE=$2
      shift
      ;;
    -p|--percentiles)
      PERCENTILES="--percentiles=$2"
      shift
      ;;
    *)
      break
      ;;
  esac
  shift
done

if [[ $# -ne 0 ]]; then
  echo "Unknown option(s): $@"
  echo ""
  print_usage_and_die
fi

INTERESTING_NEW_GEN_KEYS="\
  scavenge \
  weak \
  roots \
  old_new \
  semispace \
"

INTERESTING_OLD_GEN_KEYS="\
  clear.dependent_code \
  clear.global_handles \
  clear.maps \
  clear.slots_buffer \
  clear.string_table \
  clear.weak_collections \
  clear.weak_lists \
  evacuate.candidates \
  evacuate.clean_up \
  evacuate.copy \
  evacuate.update_pointers \
  evacuate.update_pointers.to_evacuated \
  evacuate.update_pointers.to_new \
  evacuate.update_pointers.weak \
  external.mc_prologue \
  external.mc_epilogue \
  external.mc_incremental_prologue \
  external.mc_incremental_epilogue \
  external.weak_global_handles \
  mark.finish_incremental \
  mark.roots \
  mark.weak_closure \
  mark.weak_closure.ephemeral \
  mark.weak_closure.weak_handles \
  mark.weak_closure.weak_roots \
  mark.weak_closure.harmony \
  sweep.code \
  sweep.map \
  sweep.old \
"

if [[ "$TOP_LEVEL" = "yes" ]]; then
  INTERESTING_OLD_GEN_KEYS="\
    ${INTERESTING_OLD_GEN_KEYS} \
    clear \
    evacuate \
    finish \
    incremental_finalize \
    mark \
    pause
    sweep \
  "
  INTERESTING_NEW_GEN_KEYS="\
    ${INTERESTING_NEW_GEN_KEYS} \
  "
fi

BASE_DIR=$(dirname $0)

case $OP in
  new-gen-rank)
    cat $LOGFILE | grep "gc=s" \
      | $BASE_DIR/eval_gc_nvp.py \
      --no-histogram \
      --rank $RANK_MODE \
      $CSV \
      $PERCENTILES \
      ${INTERESTING_NEW_GEN_KEYS}
    ;;
  old-gen-rank)
    cat $LOGFILE | grep "gc=ms" \
      | $BASE_DIR/eval_gc_nvp.py \
      --no-histogram \
      --rank $RANK_MODE \
      $CSV \
      $PERCENTILES \
      ${INTERESTING_OLD_GEN_KEYS}
    ;;
  *)
    ;;
esac
                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/explicit-compile-hints/                                                   0000775 0000000 0000000 00000000000 14746647661 0021577 5                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        node-23.7.0/deps/v8/tools/explicit-compile-hints/generate-explicit-function-compile-hints.py        0000664 0000000 0000000 00000005342 14746647661 0032162 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3

# Copyright 2023 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# be found in the LICENSE file.

import base64
import sys

script_id_to_name = {}
script_id_to_start_positions = {}


def varint(n):
  orig_mask = (1 << 7) - 1
  mask = (1 << 7) - 1
  res = []
  shift = 0
  while n > mask:
    mask = mask << 7
    shift += 7

  while mask > orig_mask:
    # This byte will start with 1
    res.append((1 << 7) | ((n & mask) >> shift))

    mask = mask >> 7
    shift -= 7

  assert (mask == orig_mask)
  # This byte will start with 0
  res.append(n & orig_mask)
  return res


def encode_delta_varint_base64(start_positions):
  bytes = []
  prev_pos = 0
  for p in start_positions:
    bytes.extend(varint(p - prev_pos))
    prev_pos = p
  return base64.b64encode(bytearray(bytes)).decode()


def decode_varints(bytes):
  ints = []
  current = 0
  for b in bytes:
    if b & (1 << 7):
      # Not the last byte
      current = (current << 7) | (b & ((1 << 7) - 1))
    else:
      # The last byte
      current = (current << 7) | b
      ints.append(current)
      current = 0
  return ints


def decode_delta_varint_base64(comment):
  bytes = base64.b64decode(comment)
  deltas = decode_varints(bytes)
  prev_pos = 0
  positions = []
  for d in deltas:
    prev_pos += d
    positions.append(prev_pos)
  return positions


if len(sys.argv) < 2 or '--help' in sys.argv:
  print('Usage: python3 generate-explicit-function-compile-hints.py v8.log')
  exit(1)

with open(sys.argv[1], 'r') as log_file:
  for line in log_file:
    fields = line.strip().split(',')

    if len(fields) >= 3:
      if fields[0] == 'script-details':
        script_id = int(fields[1])
        script_name = fields[2]

        script_id_to_name[script_id] = script_name
      elif fields[0] == 'function' and fields[1] == 'parse-function':
        script_id = int(fields[2])
        start_position = int(fields[3])

        if script_id in script_id_to_start_positions:
          script_id_to_start_positions[script_id].add(start_position)
        else:
          script_id_to_start_positions[script_id] = {start_position}

for script_id, script_name in script_id_to_name.items():
  if script_id in script_id_to_start_positions:
    if not script_name.startswith('http') and not script_name.startswith(
        'file'):
      continue
    start_positions = list(script_id_to_start_positions[script_id])
    start_positions.sort()
    print(script_name)
    magic_comment = encode_delta_varint_base64(start_positions)
    back = decode_delta_varint_base64(magic_comment)
    if start_positions != back:
      print('Decoding failed!')
      exit(1)
    print(f"//# experimentalChromiumCompileHintsData={magic_comment}\n")
                                                                                                                                                                                                                                                                                              node-23.7.0/deps/v8/tools/find-builtin                                                              0000775 0000000 0000000 00000001164 14746647661 0017521 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash

set -euo pipefail

BUILTIN_NAME="$1"

if ! which rg >/dev/null ; then
    echo >&2 "This tool requires 'rg', install it with 'sudo apt install ripgrep'"
    exit 1
fi

TOOLS_DIRNAME="$(dirname "$0")"
V8_DIRNAME="$(dirname "$TOOLS_DIRNAME")"

if rg --type-add 'tq:*.tq' --type tq --with-filename --line-number "\bbuiltin $BUILTIN_NAME\b" "$V8_DIRNAME" | rg -v '\bextern builtin\b' | cut -f1-2 -d: ; then
    exit 0
fi

if rg --type cpp --with-filename --line-number "\b(TF_BUILTIN\(|::Generate_?)$BUILTIN_NAME\b" "$V8_DIRNAME" | cut -f1-2 -d: ; then
    exit 0
fi

echo >&2 "Builtin '$BUILTIN_NAME' not found"
exit 1                                                                                                                                                                                                                                                                                                                                                                                                            node-23.7.0/deps/v8/tools/find-commit-for-patch.py                                                  0000775 0000000 0000000 00000006503 14746647661 0021655 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
# Copyright 2014 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# for py2/py3 compatibility
from __future__ import print_function

import argparse
import subprocess
import sys


def GetArgs():
  parser = argparse.ArgumentParser(
      description="Finds a commit that a given patch can be applied to. "
                  "Does not actually apply the patch or modify your checkout "
                  "in any way.")
  parser.add_argument("patch_file", help="Patch file to match")
  parser.add_argument(
      "--branch", "-b", default="origin/master", type=str,
      help="Git tree-ish where to start searching for commits, "
           "default: %(default)s")
  parser.add_argument(
      "--limit", "-l", default=500, type=int,
      help="Maximum number of commits to search, default: %(default)s")
  parser.add_argument(
      "--verbose", "-v", default=False, action="store_true",
      help="Print verbose output for your entertainment")
  return parser.parse_args()


def FindFilesInPatch(patch_file):
  files = {}
  next_file = ""
  with open(patch_file) as patch:
    for line in patch:
      if line.startswith("diff --git "):
        # diff --git a/src/objects.cc b/src/objects.cc
        words = line.split()
        assert words[2].startswith("a/") and len(words[2]) > 2
        next_file = words[2][2:]
      elif line.startswith("index "):
        # index add3e61..d1bbf6a 100644
        hashes = line.split()[1]
        old_hash = hashes.split("..")[0]
        if old_hash.startswith("0000000"): continue  # Ignore new files.
        files[next_file] = old_hash
  return files


def GetGitCommitHash(treeish):
  cmd = ["git", "log", "-1", "--format=%H", treeish]
  return subprocess.check_output(cmd).strip()


def CountMatchingFiles(commit, files):
  matched_files = 0
  # Calling out to git once and parsing the result Python-side is faster
  # than calling 'git ls-tree' for every file.
  cmd = ["git", "ls-tree", "-r", commit] + [f for f in files]
  output = subprocess.check_output(cmd)
  for line in output.splitlines():
    # 100644 blob c6d5daaa7d42e49a653f9861224aad0a0244b944      src/objects.cc
    _, _, actual_hash, filename = line.split()
    expected_hash = files[filename]
    if actual_hash.startswith(expected_hash): matched_files += 1
  return matched_files


def FindFirstMatchingCommit(start, files, limit, verbose):
  commit = GetGitCommitHash(start)
  num_files = len(files)
  if verbose: print(">>> Found %d files modified by patch." % num_files)
  for _ in range(limit):
    matched_files = CountMatchingFiles(commit, files)
    if verbose: print("Commit %s matched %d files" % (commit, matched_files))
    if matched_files == num_files:
      return commit
    commit = GetGitCommitHash("%s^" % commit)
  print("Sorry, no matching commit found. "
        "Try running 'git fetch', specifying the correct --branch, "
        "and/or setting a higher --limit.")
  sys.exit(1)


if __name__ == "__main__":
  args = GetArgs()
  files = FindFilesInPatch(args.patch_file)
  commit = FindFirstMatchingCommit(args.branch, files, args.limit, args.verbose)
  if args.verbose:
    print(">>> Matching commit: %s" % commit)
    print(subprocess.check_output(["git", "log", "-1", commit]))
    print(">>> Kthxbai.")
  else:
    print(commit)
                                                                                                                                                                                             node-23.7.0/deps/v8/tools/find_depot_tools.py                                                       0000664 0000000 0000000 00000002733 14746647661 0021117 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        # Copyright 2014 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
"""Small utility function to find depot_tools and add it to the python path.
"""

# for py2/py3 compatibility
from __future__ import print_function

import os
import sys


def directory_really_is_depot_tools(directory):
  return os.path.isfile(os.path.join(directory, 'gclient.py'))


def add_depot_tools_to_path():
  """Search for depot_tools and add it to sys.path."""
  # First look if depot_tools is already in PYTHONPATH.
  for i in sys.path:
    if i.rstrip(os.sep).endswith('depot_tools'):
      if directory_really_is_depot_tools(i):
        return i

  # Then look if depot_tools is in PATH, common case.
  for i in os.environ['PATH'].split(os.pathsep):
    if i.rstrip(os.sep).endswith('depot_tools'):
      if directory_really_is_depot_tools(i):
        sys.path.insert(0, i.rstrip(os.sep))
        return i
  # Rare case, it's not even in PATH, look upward up to root.
  root_dir = os.path.dirname(os.path.abspath(__file__))
  previous_dir = os.path.abspath(__file__)
  while root_dir and root_dir != previous_dir:
    if directory_really_is_depot_tools(os.path.join(root_dir, 'depot_tools')):
      i = os.path.join(root_dir, 'depot_tools')
      sys.path.insert(0, i)
      return i
    previous_dir = root_dir
    root_dir = os.path.dirname(root_dir)
  print('Failed to find depot_tools', file=sys.stderr)
  return None
                                     node-23.7.0/deps/v8/tools/freebsd-tick-processor                                                    0000775 0000000 0000000 00000000400 14746647661 0021504 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/sh

# A wrapper script to call 'linux-tick-processor'.

# Known issues on FreeBSD:
#  No ticks from C++ code.
#  You must have d8 built and in your path before calling this.

tools_path=`cd $(dirname "$0");pwd`
$tools_path/linux-tick-processor "$@"
                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/fuzz-harness.sh                                                           0000775 0000000 0000000 00000007340 14746647661 0020207 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/bin/bash
# Copyright 2012 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials provided
#       with the distribution.
#     * Neither the name of Google Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# A simple harness that downloads and runs 'jsfunfuzz' against d8. This
# takes a long time because it runs many iterations and is intended for
# automated usage. The package containing 'jsfunfuzz' can be found as an
# attachment to this bug:
# https://bugzilla.mozilla.org/show_bug.cgi?id=jsfunfuzz

JSFUNFUZZ_URL="https://bugzilla.mozilla.org/attachment.cgi?id=310631"
JSFUNFUZZ_MD5="d0e497201c5cd7bffbb1cdc1574f4e32"

v8_root=$(readlink -f $(dirname $BASH_SOURCE)/../)
jsfunfuzz_dir="$v8_root/tools/jsfunfuzz"

if [ -n "$1" ]; then
  d8="${v8_root}/$1"
else
  d8="${v8_root}/d8"
fi

if [ ! -f "$d8" ]; then
  echo "Failed to find d8 binary: $d8"
  exit 1
fi

# Deprecated download method. A prepatched archive is downloaded as a hook
# if jsfunfuzz=1 is specified as a gyp flag. Requires google.com authentication
# for google storage.
if [ "$3" == "--download" ]; then

  jsfunfuzz_file="$v8_root/tools/jsfunfuzz.zip"
  if [ ! -f "$jsfunfuzz_file" ]; then
    echo "Downloading $jsfunfuzz_file ..."
    wget -q -O "$jsfunfuzz_file" $JSFUNFUZZ_URL || exit 1
  fi

  jsfunfuzz_sum=$(md5sum "$jsfunfuzz_file" | awk '{ print $1 }')
  if [ $jsfunfuzz_sum != $JSFUNFUZZ_MD5 ]; then
    echo "Failed to verify checksum!"
    exit 1
  fi

  if [ ! -d "$jsfunfuzz_dir" ]; then
    echo "Unpacking into $jsfunfuzz_dir ..."
    unzip "$jsfunfuzz_file" -d "$jsfunfuzz_dir" || exit 1
    echo "Patching runner ..."
    cat << EOF | patch -s -p0 -d "$v8_root"
--- tools/jsfunfuzz/jsfunfuzz/multi_timed_run.py~
+++ tools/jsfunfuzz/jsfunfuzz/multi_timed_run.py
@@ -125,7 +125,7 @@
 
 def many_timed_runs():
     iteration = 0
-    while True:
+    while iteration < 100:
         iteration += 1
         logfilename = "w%d" % iteration
         one_timed_run(logfilename)
EOF
  fi

fi

flags='--expose-gc --verify-gc'
python -u "$jsfunfuzz_dir/jsfunfuzz/multi_timed_run.py" 300 \
    "$d8" $flags "$jsfunfuzz_dir/jsfunfuzz/jsfunfuzz.js"
exit_code=$(cat w* | grep " looking good" -c)
exit_code=$((100-exit_code))

if [ -n "$2" ]; then
  archive="$2"
else
  archive=fuzz-results-$(date +%Y%m%d%H%M%S).tar.bz2
fi
echo "Creating archive $archive"
tar -cjf $archive err-* w*
rm -f err-* w*

echo "Total failures: $exit_code"
exit $exit_code
                                                                                                                                                                                                                                                                                                node-23.7.0/deps/v8/tools/gc-nvp-to-csv.py                                                          0000775 0000000 0000000 00000002173 14746647661 0020170 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
#
# Copyright 2015 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#
# This is a utility for generating csv files based on GC traces produced by
# V8 when run with flags --trace-gc --trace-gc-nvp.
#
# Usage: gc-nvp-to-csv.py [-h] [filename]
#


# for py2/py3 compatibility
from __future__ import print_function

import argparse
import sys
import gc_nvp_common


def process_trace(f):
  trace, keys = gc_nvp_common.parse_gc_trace_with_keys(f)
  if trace:
    print(*keys, sep=', ')
    for entry in trace:
      print(*(entry.get(key, '') for key in keys), sep=', ')


def main(args):
  if args.filename:
    with open(args.filename, 'rt') as f:
      process_trace(f)
  else:
    process_trace(sys.stdin)


if __name__ == '__main__':
  # Command line options.
  parser = argparse.ArgumentParser(
      description='Helper script for converting --trace-gc-nvp logs to CSV')
  parser.add_argument('filename', type=str, nargs='?', help='GC trace log file')
  args = parser.parse_args()
  # Call the main function.
  main(args)
                                                                                                                                                                                                                                                                                                                                                                                                     node-23.7.0/deps/v8/tools/gc-nvp-trace-processor.py                                                 0000775 0000000 0000000 00000026032 14746647661 0022070 0                                                                                                    ustar 00root                            root                            0000000 0000000                                                                                                                                                                        #!/usr/bin/env python3
#
# Copyright 2010 the V8 project authors. All rights reserved.
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#